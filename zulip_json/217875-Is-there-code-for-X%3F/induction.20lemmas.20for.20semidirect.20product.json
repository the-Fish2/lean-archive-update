[
    {
        "content": "<p>i have defined a <code>GroupHom</code> using <code>SemidirectProduct.lift</code>, and i'd like to prove that it is injective by using the fact that the maps i used to define it are injective, and that the only overlap in the codomain is <code>1</code>. I had guessed that to do this i could use some kind of closure-induction argument for the semidirect product, but i found none...<br>\na first thing that would help is the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">GroupTheory</span><span class=\"bp\">.</span><span class=\"n\">SemidirectProduct</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hom</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">→*</span><span class=\"w\"> </span><span class=\"n\">MulAut</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">SemidirectProduct</span><span class=\"bp\">.</span><span class=\"n\">is_closure</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">SemidirectProduct</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">⋊</span><span class=\"o\">[</span><span class=\"n\">hom</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">∪</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">SemidirectProduct</span><span class=\"bp\">.</span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">⋊</span><span class=\"o\">[</span><span class=\"n\">hom</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊤</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>ultimately, my goal is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">H</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f₁</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">→*</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f₂</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">→*</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">f₁</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">MulEquiv</span><span class=\"bp\">.</span><span class=\"n\">toMonoidHom</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">φ</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">MulEquiv</span><span class=\"bp\">.</span><span class=\"n\">toMonoidHom</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">MulAut</span><span class=\"bp\">.</span><span class=\"n\">conj</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f₂</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"w\"> </span><span class=\"n\">f₁</span><span class=\"o\">))</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">SemidirectProduct</span><span class=\"bp\">.</span><span class=\"n\">lift_inj</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hf₁</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"bp\">.</span><span class=\"n\">Injective</span><span class=\"w\"> </span><span class=\"n\">f₁</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hf2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"bp\">.</span><span class=\"n\">Injective</span><span class=\"w\"> </span><span class=\"n\">f₂</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">hindep</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f₁</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"bp\">⊓</span><span class=\"w\"> </span><span class=\"n\">f₂</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊥</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">Function</span><span class=\"bp\">.</span><span class=\"n\">Injective</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">SemidirectProduct</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"w\"> </span><span class=\"n\">f₁</span><span class=\"w\"> </span><span class=\"n\">f₂</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 440562828,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1716577333
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>solution to second part</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>lemma SemidirectProduct.lift_inj (hf₁ : Function.Injective f₁) (hf₂ : Function.Injective f₂)\n    (hindep : f₁.range ⊓ f₂.range = ⊥):\n    Function.Injective (SemidirectProduct.lift f₁ f₂ h) := by\n  rw [← MonoidHom.ker_eq_bot_iff, eq_bot_iff]\n  intro x\n  simp only [Subgroup.mem_bot]\n  rw [MonoidHom.mem_ker]\n  obtain ⟨x₁,x₂⟩ := x\n  simp only [mk_eq_inl_mul_inr, map_mul, lift_inl, lift_inr]\n  intro hinv\n  obtain hinv&#39; : f₁ x₁ = (f₂ x₂)⁻¹ := by\n    rw [← one_mul (f₂ x₂)⁻¹]\n    rw [← hinv]\n    simp only [mul_inv_cancel_right]\n  have him₁ : f₁ x₁ ∈ f₁.range := by simp only [MonoidHom.mem_range,\n    exists_apply_eq_apply]\n  have him₂ : f₁ x₁ ∈ f₂.range := by rw [hinv&#39;]; simp only [inv_mem_iff,\n    MonoidHom.mem_range, exists_apply_eq_apply]\n  have hone : f₁ x₁ ∈ ⊥ := by\n    rw [← hindep]\n    exact And.intro him₁ him₂\n  simp only [Subgroup.mem_bot] at hone\n  have hker : x₁ ∈ f₁.ker := by\n    rw [MonoidHom.mem_ker f₁]\n    exact hone\n\n  rw [← MonoidHom.ker_eq_bot_iff] at hf₁ hf₂\n  rw [hf₁] at hker\n  simp only [Subgroup.mem_bot] at hker\n  rw [hker] at hinv&#39; ⊢\n  simp only [map_one, one_eq_inv] at hinv&#39;\n  rw [← MonoidHom.mem_ker] at hinv&#39;\n  rw [hf₂] at hinv&#39;\n  simp only [Subgroup.mem_bot] at hinv&#39;\n  rw [hinv&#39;]\n  simp only [map_one, mul_one]\n</code></pre></div>\n</div></div>",
        "id": 440562977,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1716577415
    },
    {
        "content": "<p>I would prove the stronger theorem that every element of a semidirect product is equal to a product g*n. A general element of a Subgroup.closure is a random finite product so the stronger theorem looks easier to prove. You can then just use the fact that injective iff trivial kernel</p>",
        "id": 440615146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716620850
    },
    {
        "content": "<p>so you suggest using something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">SemidirectProduct</span><span class=\"bp\">.</span><span class=\"n\">factor</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">⋊</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">SemidirectProduct</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">SemidirectProduct</span><span class=\"bp\">.</span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mk_eq_inl_mul_inr</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">g</span>\n</code></pre></div>",
        "id": 440615431,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1716621173
    },
    {
        "content": "<p>my point is mostly that proving this closure property opens up the use of <code>Subgroup.induction</code> and variants</p>",
        "id": 440615521,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1716621273
    },
    {
        "content": "<p>which i imagine wouldn't be harmful</p>",
        "id": 440615533,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1716621291
    },
    {
        "content": "<p>Sure, but now proving the closure property is easy</p>",
        "id": 440615614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716621369
    },
    {
        "content": "<p>ah, i see</p>",
        "id": 440615623,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1716621392
    },
    {
        "content": "<p>(hopefully!)</p>",
        "id": 440615631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716621410
    },
    {
        "content": "<p>I guess you just need to prove that the product of two things in S is in closure S, which could be a lemma in its own right</p>",
        "id": 440615650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716621464
    },
    {
        "content": "<p>it already is (sort of): <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.mul_mem_sup#doc\">docs#Subgroup.mul_mem_sup</a></p>",
        "id": 440616641,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1716622556
    },
    {
        "content": "<p>at least, the form i need</p>",
        "id": 440616690,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1716622575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/induction.20lemmas.20for.20semidirect.20product/near/440615431\">said</a>:</p>\n<blockquote>\n<p>so you suggest using something like this?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">SemidirectProduct</span><span class=\"bp\">.</span><span class=\"n\">factor</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">⋊</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">SemidirectProduct</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">SemidirectProduct</span><span class=\"bp\">.</span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mk_eq_inl_mul_inr</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">g</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This should be phrased as an induction principle</p>",
        "id": 440623619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716630340
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">SemidirectProduct</span><span class=\"bp\">.</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">⋊</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">⋊</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span><span class=\"n\">x₂</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mk_eq_inl_mul_inr</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"n\">x₁</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"n\">x₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>you mean like this?</p>",
        "id": 440623687,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1716630405
    },
    {
        "content": "<p>or like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">SemidirectProduct</span><span class=\"bp\">.</span><span class=\"n\">induction'</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">⋊</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">⋊</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">),</span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span><span class=\"n\">x₂</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mk_eq_inl_mul_inr</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">x₁</span><span class=\"w\"> </span><span class=\"n\">x₂</span>\n</code></pre></div>",
        "id": 440623744,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1716630477
    },
    {
        "content": "<p>I meant the second one</p>",
        "id": 440652884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716659204
    },
    {
        "content": "<p>But with <code>@[elab_as_elim]</code></p>",
        "id": 440652894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716659227
    }
]