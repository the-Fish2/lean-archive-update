[
    {
        "content": "<p>from as far as i can tell, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAction.QuotientAction#doc\">docs#MulAction.QuotientAction</a> only works for using <code>smul</code> on a set with a multiplicative structure, but i'd like to talk about the (multiplicative) action of a group on a quotient of modules, which has an additive structure. <code>IsScalarTower</code> does not hold, the semi-\"toAdd\"-ification of the field of <code>MulAction.QuotientAction</code> does...</p>",
        "id": 442764595,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1717588189
    },
    {
        "content": "<p>Do we have quotients of group representations in <code>Mathlib/RepresentationTheory/</code>? They should give you the right action...</p>",
        "id": 442765325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717588398
    },
    {
        "content": "<p>not as far as i can tell...</p>",
        "id": 442765978,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1717588575
    },
    {
        "content": "<p>And where does a quotient of modules get the smul of its ring of scalars? Because that ring is a multiplicative monoid... So hopefully that's done in the right abstraction</p>",
        "id": 442766422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717588697
    },
    {
        "content": "<p>that does exist, but that only works for the ring of scalars itself...<br>\nfor the record, that is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule.Quotient.mulAction#doc\">docs#Submodule.Quotient.mulAction</a></p>",
        "id": 442766681,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1717588775
    },
    {
        "content": "<p>for now, i've defined this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">Monoid</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MulAction</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Submodule</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">ModuleQuotientAction</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">neg_add_mem</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">a'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">a'</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">•</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">•</span><span class=\"w\"> </span><span class=\"n\">a'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">H</span>\n\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">ModuleQuotientAction</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">⧸</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">smul</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Quotient</span><span class=\"bp\">.</span><span class=\"n\">map'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">•</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">a'</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">QuotientAddGroup</span><span class=\"bp\">.</span><span class=\"n\">leftRel_apply</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Submodule</span><span class=\"bp\">.</span><span class=\"n\">mem_toAddSubgroup</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">MulAction</span><span class=\"bp\">.</span><span class=\"n\">ModuleQuotientAction</span><span class=\"bp\">.</span><span class=\"n\">neg_add_mem</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">    </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">QuotientAddGroup</span><span class=\"bp\">.</span><span class=\"n\">leftRel_apply</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"n\">one_smul</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Quotient</span><span class=\"bp\">.</span><span class=\"n\">inductionOn'</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">congr_arg</span><span class=\"w\"> </span><span class=\"n\">Quotient</span><span class=\"bp\">.</span><span class=\"n\">mk''</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">one_smul</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">mul_smul</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">b'</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Quotient</span><span class=\"bp\">.</span><span class=\"n\">inductionOn'</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">congr_arg</span><span class=\"w\"> </span><span class=\"n\">Quotient</span><span class=\"bp\">.</span><span class=\"n\">mk''</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mul_smul</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">b'</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- #synth SMul β (α ⧸ H)</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>\n<p>this quite possibly might conflict due to some defEq issues in combination with addition being commutative, but this at least does give the instance i want</p>",
        "id": 442771821,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1717590162
    },
    {
        "content": "<p>Shouldn't <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SubMulAction#doc\">docs#SubMulAction</a> be involved somehow?</p>\n<p>Typically we don't do the golfy \"closed under x - y\" trick because even though it's one axiom not two, in practice you use <code>add_mem</code> and <code>neg_mem</code> and <code>zero_mem</code> so you have to prove them anyway.</p>",
        "id": 442779158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717592159
    },
    {
        "content": "<p>the thing is, i basically lifted this proof from the one at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAction.quotient#doc\">docs#MulAction.quotient</a></p>",
        "id": 442779386,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1717592221
    },
    {
        "content": "<p>(as well as the field for the structure)</p>",
        "id": 442779514,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1717592257
    },
    {
        "content": "<p>so although you might be right, i wouldn't know how to adress this...</p>",
        "id": 442780465,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1717592468
    }
]