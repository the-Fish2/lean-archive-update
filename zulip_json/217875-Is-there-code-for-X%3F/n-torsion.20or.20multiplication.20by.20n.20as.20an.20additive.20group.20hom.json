[
    {
        "content": "<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> be an additive commutative group (for example the points on an elliptic curve) and let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> be a natural. I'd like to consider the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-torsion subgroup of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> either as a term of type <code>Subgroup A</code> or as a group (i.e. a type) in its own right. I guess I could do this if we have the multiplication-by-n map as a group homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A\\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>. Do we have any of this stuff in mathlib?</p>",
        "id": 429096078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711212638
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=smulAddHom#doc\">docs#smulAddHom</a></p>",
        "id": 429096798,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711213183
    },
    {
        "content": "<p>I hope we have the right instances for this to \"just work\" in your case.</p>",
        "id": 429096930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711213247
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"n\">smulAddHom</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">smulAddHom</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 429097018,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711213323
    },
    {
        "content": "<p>Looking forward to some Tate modules :)</p>",
        "id": 429097081,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711213379
    },
    {
        "content": "<p>Do we have the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/n\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathbb\">Z</span></span></span></span>-module structure on the kernel (promoted to a type)?</p>",
        "id": 429098694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711214738
    },
    {
        "content": "<p>probably not.</p>",
        "id": 429098710,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711214756
    },
    {
        "content": "<p>The whole <code>torsion</code> framework could get a facelift... for example, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">torsion</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">IsOfFinOrder</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>is how we define the torsion subgroup. I don't see a definition of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-torsion subgroup or anything related.</p>",
        "id": 429098954,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711214915
    },
    {
        "content": "<p>Also, roots of unity are defined as follows, again not using anything from torsion</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rootsOfUnity</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ζ</span> <span class=\"bp\">|</span> <span class=\"n\">ζ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 429099141,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711215057
    },
    {
        "content": "<p>One really nice thing about the whole \"5 year\" business is that one could imagine that I'll actually get around to making PRs fixing up stuff like this. Do you have an idea about what the general definitions should look like? I'm just running into this stuff now with FLT.</p>",
        "id": 429099256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711215137
    },
    {
        "content": "<p>In the additive case, I think it makes sense to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">M[r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span> whenever <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>:</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">r : R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module</p>",
        "id": 429099311,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711215200
    },
    {
        "content": "<p><span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> WAIT: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule.torsionBy#doc\">docs#Submodule.torsionBy</a></p>",
        "id": 429099394,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711215247
    },
    {
        "content": "<p>Will I then end up in hell if I try letting r be a natural? There's also the issue of setting it all up with AddCommGroups for Int and AddCommMonoids for Nat, right? Or will they work by magic? Oh -- but they should be to_additive of a multiplicative story which the module thing won't work for, right?</p>",
        "id": 429099432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711215302
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.IsTorsionBySet.module#doc\">docs#Module.IsTorsionBySet.module</a> !</p>",
        "id": 429099498,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711215360
    },
    {
        "content": "<p>okay, the situation is much better than I had anticipated.</p>",
        "id": 429099545,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711215380
    },
    {
        "content": "<p>We should ask <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> if he has any ideas on how to make all this work in the multiplicative case.</p>",
        "id": 429099559,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711215405
    },
    {
        "content": "<p>well in some sense, but in some sense it's much worse: I get a module structure for <code>Z \\/ (n)</code> rather than <code>ZMod n</code>, for example.</p>",
        "id": 429099562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711215414
    },
    {
        "content": "<p>Do you absolutely have to use <code>ZMod</code>?</p>",
        "id": 429099595,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711215450
    },
    {
        "content": "<p>So some stuff will have to be written specifically for integers and then there will maybe be diamonds to deal with.</p>",
        "id": 429099596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711215450
    },
    {
        "content": "<p>Do I have to use ZMod? I don't really know yet. I want to set up deformation theory for mod p Galois reps but I haven't yet thought hard about what that will look like -- right now I just want to talk about the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-torsion in the Frey curve and say that it's 2-dimensioal.</p>",
        "id": 429099722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711215540
    },
    {
        "content": "<p>I would imagine that working with <code>\\Z / (p^n)</code> would actually be <em>easier</em> for deformations, given the general form of Schlessinger's criterion.</p>",
        "id": 429100380,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711216045
    },
    {
        "content": "<p>OTOH, we would have to formulate alternatives to things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PadicInt.lift#doc\">docs#PadicInt.lift</a> in terms of quotients of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> instead of <code>ZMod</code>.</p>",
        "id": 429100537,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711216130
    },
    {
        "content": "<p>Besides, IMO <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZMod.castHom#doc\">docs#ZMod.castHom</a> can be a pain to work with sometimes.</p>",
        "id": 429100576,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711216177
    },
    {
        "content": "<p>I've only just started thinking about this stuff and I haven't started thinking about Schlessinger etc. Do you think this would be troublesome:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ZMod.module</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I just want to say that something is 2-dimensional!</p>",
        "id": 429101273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711216734
    },
    {
        "content": "<p>if you just want to say it's two dimensional as a free module, you can just state that there exists some isomorphism as a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-module with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">(\\Z/n)^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> without even requiring the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span></span></span></span>-module instance.</p>",
        "id": 429101677,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711217042
    },
    {
        "content": "<p>yeah. I just felt that \"finrank (ZMod p) V = 2\" was a much snappier way of saying this. Maybe I'll do what you suggest for now though.</p>",
        "id": 429101763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711217101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/n-torsion.20or.20multiplication.20by.20n.20as.20an.20additive.20group.20hom/near/429101273\">said</a>:</p>\n<blockquote>\n<p>Do you think this would be troublesome:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ZMod.module</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I just want to say that something is 2-dimensional!</p>\n</blockquote>\n<p>A safer bet would be to assume <code>Module (Zmod n) A</code> where you need it I think</p>",
        "id": 429101846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711217116
    },
    {
        "content": "<p>Wait -- what Adam suggested doesn't work :-( Almost immediately after defining it, I want to talk about whether E[p] is irreducible or not, so I need something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Representation#doc\">docs#Representation</a> which needs a ground ring.</p>",
        "id": 429101924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711217176
    },
    {
        "content": "<p>why can't you take the ground ring to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>?</p>",
        "id": 429102647,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711217807
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZMod.commRing#doc\">docs#ZMod.commRing</a></p>",
        "id": 429105117,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711219711
    },
    {
        "content": "<p>But when you'll work with elliptic curves with complex multiplication, or higher stuff, you'll wish to have the endomorphism of the curve act on the Tate module.  So today's gain will be tomorrow's pain.</p>",
        "id": 429105219,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711219779
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommMonoid.zmodModule#doc\">docs#AddCommMonoid.zmodModule</a> (upstreamed from PFR). But I agree with Adam that Z/nZ has better API than ZMod n.</p>",
        "id": 429154616,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1711257175
    },
    {
        "content": "<p>How do I say nZ?</p>",
        "id": 429171559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711268962
    },
    {
        "content": "<p>I have a bunch of definitions for <code>A[n]</code> (<code>.ker</code>), <code>nA</code> (<code>.range</code>), <code>A/nA</code>, and <code>A/A[n]</code> (which is isomorphic to <code>nA</code>) that I'm developing locally using <code>DistribMulAction.toAddMonoidHom</code> and <code>zpowGroupHom</code> (because there's no <code>MulDistribMulAction.toMonoidHom</code>), which includes the associated maps (e.g. <code>A[n] -&gt; A'[n]</code> given <code>A -&gt; A'</code>) and their images, the <code>DistribMulAction</code> by a monoid and their invariant subgroups, and some Galois theory for <code>E(K)[n]</code>.</p>",
        "id": 429173823,
        "sender_full_name": "David Ang",
        "timestamp": 1711270494
    },
    {
        "content": "<p>Can you start PRing this stuff?</p>",
        "id": 429174988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711271071
    },
    {
        "content": "<p>Sure, I’ll work on them this week</p>",
        "id": 429175596,
        "sender_full_name": "David Ang",
        "timestamp": 1711271683
    },
    {
        "content": "<p>I don’t have A[n] as a representation currently though</p>",
        "id": 429175876,
        "sender_full_name": "David Ang",
        "timestamp": 1711271865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/n-torsion.20or.20multiplication.20by.20n.20as.20an.20additive.20group.20hom/near/429171559\">said</a>:</p>\n<blockquote>\n<p>How do I say nZ?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddSubgroup.zmultiples#doc\">docs#AddSubgroup.zmultiples</a></p>",
        "id": 429176789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711272412
    },
    {
        "content": "<p>Or <code>AddCircle n</code> for Z/nZ</p>",
        "id": 429176822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711272440
    },
    {
        "content": "<p>I would hope that the latter doesn't have a ring structure</p>",
        "id": 429183611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711276735
    },
    {
        "content": "<p>And zmultiples is no good, I want the ideal</p>",
        "id": 429183659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711276799
    },
    {
        "content": "<p>The answer looks like it's quite a mouthful compared to ZMod p</p>",
        "id": 429183729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711276846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/n-torsion.20or.20multiplication.20by.20n.20as.20an.20additive.20group.20hom/near/429183659\">said</a>:</p>\n<blockquote>\n<p>And zmultiples is no good, I want the ideal</p>\n</blockquote>\n<p>.toIntSubmodule will give you that</p>",
        "id": 429183826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711276930
    },
    {
        "content": "<p>Though that's probably an argument that <code>Ideal.zmultiples</code> should exist</p>",
        "id": 429183840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711276951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/n-torsion.20or.20multiplication.20by.20n.20as.20an.20additive.20group.20hom/near/429183611\">said</a>:</p>\n<blockquote>\n<p>I would hope that the latter doesn't have a ring structure</p>\n</blockquote>\n<p>With suitable assumptions it seems reasonable for it to (perhaps a euclidean domain is right?)</p>",
        "id": 429183939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711277061
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\Z[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> is a Euclidean domain and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">p\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathbb\">Z</span></span></span></span> isn't an ideal so the quotient won't naturally be a ring.</p>",
        "id": 429185258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711277905
    },
    {
        "content": "<p>But the point is that this is some topological additive group construction and should have nothing to do with what I'm doing</p>",
        "id": 429185354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711277932
    },
    {
        "content": "<p>Ah, I guess maybe the key thing here is that <code>toIntSubmodule</code> doesn't generalize very well, and so the instance would only exist for Int (and Nat if we did everything again for semirings)</p>",
        "id": 429185601,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711278050
    },
    {
        "content": "<p>From my perspective, the fact that \"addcircle\" is topological is a (pragmatic) accident; the definition of <code>(𝕜 ⧸ AddSubgroup.zmultiples p)</code> doesn't use the topology at all</p>",
        "id": 429185648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711278108
    },
    {
        "content": "<p>it just has a completely different semantic meaning from what I'm trying to do, that's my concern. It's designed to be a topological additive group and the name indicates this. I am slightly stunned that people are suggesting anything other than <code>ZMod p</code> for the integers mod p -- that's exactly why we made that type. If there's more API for other things then my instinct is that the fix is to write more API for ZMod p.</p>",
        "id": 429187163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711279188
    },
    {
        "content": "<p>I think a lot of the time we give answers to \"what might be the shortest path to do X today\" and not necessarily \"what is the 'right' path to do X after building more API\".</p>",
        "id": 429187357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711279324
    },
    {
        "content": "<p>The needs of a student on a 3 month project are rather different than those of someone with a 5 year grant :)</p>",
        "id": 429187394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711279361
    },
    {
        "content": "<p>OK nice :-) I think I'll blunder on with ZMod p and the hints above for torsion, and we'll see what happens :-)</p>",
        "id": 429187893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711279596
    },
    {
        "content": "<p>I mean, my understanding for why we have ZMod is that if we used ideals we have very little hope of doing anything computational with it</p>",
        "id": 429226359,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1711298987
    },
    {
        "content": "<p>Should we make a <code>IsZMod n</code> class?</p>",
        "id": 429226733,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711299264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/n-torsion.20or.20multiplication.20by.20n.20as.20an.20additive.20group.20hom/near/429226359\">said</a>:</p>\n<blockquote>\n<p>I mean, my understanding for why we have ZMod is that if we used ideals we have very little hope of doing anything computational with it</p>\n</blockquote>\n<p>I dont think this is true.</p>",
        "id": 429226803,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711299355
    },
    {
        "content": "<p>Namely the quotient by an ideal is still just a  quotient. So maps from the quotient are still computable and in fact maps from quotients of Z will compile to maps from Z</p>",
        "id": 429226903,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711299441
    },
    {
        "content": "<p>I think the argument goes that Zmod is better computationally, in the same way that we don't implement Rat or Int with a quotient</p>",
        "id": 429227013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711299536
    },
    {
        "content": "<p>Though I guess that's kind of irrelevant since both have native implementations behind the scenes anyway</p>",
        "id": 429227226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711299604
    },
    {
        "content": "<p>Fair enough. I still think there is a good argument for an <code>IsZMod</code> class. <code>ZMod p</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">\\Z_p/p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span></span></span></span> are all useful in different contexts</p>",
        "id": 429227246,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711299629
    },
    {
        "content": "<p>The nice thing about having a class is that these rings have no automorphisms</p>",
        "id": 429235678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711305668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/n-torsion.20or.20multiplication.20by.20n.20as.20an.20additive.20group.20hom/near/429171559\">said</a>:</p>\n<blockquote>\n<p>How do I say nZ?</p>\n</blockquote>\n<p>There's a notation <code>R ∙ v</code> for <code>Submodule.span R {v}</code>, so <code>Ideal.span {n}</code> can be written <code>ℤ • n</code>.</p>",
        "id": 429236784,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1711306583
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 429337445,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711360691
    },
    {
        "content": "<p>you might maybe also try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Operations</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span><span class=\"o\">:</span><span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span><span class=\"o\">:</span><span class=\"n\">Ideal</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>i believe this notion of multiplication might be (close to) what leads to the notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">n\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathbb\">Z</span></span></span></span> in the first place, although right now, this seems to only work for natural numbers <code>n</code>, via <code>AddMonoid.toNatSMul : SMul ℕ (Ideal R)</code> rather than via something like <code>Submodule.toSMulSubModule :SMul R (Submodule R M)</code>(which i think doesn't exist? not sure tho).</p>",
        "id": 429357043,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711365360
    },
    {
        "content": "<p>I have some relevant code from an ongoing project. I've opened a PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/11742\">#11742</a> containing basically the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">torsionBy</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Submodule.torsionBy</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAddSubgroup</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">moduleZModTorsionBy</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">torsionBy</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I could also prove that this definition of <code>torsionBy A n</code> is the same as <code>(DistribMulAction.toAddMonoidHom A n).ker</code> and so on, if that's deemed useful.</p>",
        "id": 430062144,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1711630800
    }
]