[
    {
        "content": "<p>If I have a k-vector space V with basis B, how can I decompose a vector in V to the basis vector? I can't even prove the case of 1 dimension:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">decompose</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"bp\">-&gt;</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">b.repr.symm</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">b.repr</span> <span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 417150187,
        "sender_full_name": "Qin Yuxuan",
        "timestamp": 1705892860
    },
    {
        "content": "<p>You have some typos there. <code>set_option autoImplicit false</code> might be helpful.<br>\nThe 0th basis vector is <code>b 0</code>.<br>\nUse the theorem <code>Basis.total_repr</code> for the fact that <code>v</code> is a linear combination of basis vectors. There will be some messing around to show that the sum has zero or one terms.</p>",
        "id": 417151935,
        "sender_full_name": "Richard Copley",
        "timestamp": 1705894189
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis#doc\">docs#Basis</a></p>",
        "id": 417152445,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705894579
    },
    {
        "content": "<p>It's good to come to terms with the fact that <code>Basis.total_repr</code> is <em>already</em> the decomposition you seek. It takes some getting used to, but it is a good abstraction and there is a lot of API built around it.<br>\nNonetheless, here's a proof of your example, for purposes of illustration. It is messy.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basis</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">decompose</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">b</span> <span class=\"mi\">0</span>\n  <span class=\"n\">intro</span> <span class=\"n\">v</span>\n  <span class=\"n\">use</span> <span class=\"n\">b.repr</span> <span class=\"n\">v</span> <span class=\"mi\">0</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">b.total_repr</span> <span class=\"n\">v</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsubset</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b.repr</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">_</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_singleton</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Fin.eq_zero</span> <span class=\"n\">x</span>\n  <span class=\"k\">have</span> <span class=\"n\">hzero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"o\">(</span><span class=\"n\">b.repr</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b.repr</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.mem_support_iff.not</span><span class=\"o\">,</span> <span class=\"n\">not_ne_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hc</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">zero_smul</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.total_apply</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.sum</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_subset</span> <span class=\"n\">hsubset</span> <span class=\"n\">hzero</span><span class=\"o\">,</span>\n    <span class=\"n\">Finset.sum_singleton</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 417152725,
        "sender_full_name": "Richard Copley",
        "timestamp": 1705894835
    },
    {
        "content": "<p>ok, thanks <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 417153563,
        "sender_full_name": "Qin Yuxuan",
        "timestamp": 1705895564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634838\">Qin Yuxuan</span> has marked this topic as resolved.</p>",
        "id": 417153568,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705895568
    }
]