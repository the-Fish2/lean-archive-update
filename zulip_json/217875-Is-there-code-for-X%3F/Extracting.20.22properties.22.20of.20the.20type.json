[
    {
        "content": "<p>Newbie question about types. </p>\n<p>In the NNG it is easy to understand how the MyNat type is constructed and what are the axioms (rules) that we can use. </p>\n<p>Is a programmatic way with some kind of elaboration to extract the type information directly from lean. <br>\nSomething like #typedefinitio MyNat to extract:</p>\n<ul>\n<li>constructor like inductive </li>\n<li>axioms like add_zero</li>\n<li>operators definitions: like +:  N -&gt; N -&gt; N  </li>\n</ul>\n<p>Would appreciate any help or pointers on this topic!</p>",
        "id": 434327096,
        "sender_full_name": "Jan Idziak",
        "timestamp": 1713520297
    },
    {
        "content": "<p>You can use <code>#whatsnew in</code> before the type declaration to get the automatic stuff declared with the inductive type.</p>",
        "id": 434392163,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713542489
    },
    {
        "content": "<p>As for things declared on the type (like it's <code>Add</code> instance, you'll need to look it up manually to some extent. You can look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat#doc\">docs#Nat</a> and then click on the \"instances\" arrow below it to see which instances are available.</p>",
        "id": 434392622,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713542629
    },
    {
        "content": "<p>You can also do <code>#synth Add Nat</code></p>",
        "id": 434392924,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713542718
    },
    {
        "content": "<p>Note that <code>Add</code> is not part of the <em>definition</em> of the type <code>Nat</code>, which is the reason this has a separate procedure.</p>",
        "id": 434393180,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713542790
    }
]