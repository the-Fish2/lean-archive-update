[
    {
        "content": "<p>I'm struggling with proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.toPNat'</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>this seems like something which should be trivial, but I don't manage to prove it.</p>",
        "id": 424047963,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1709221330
    },
    {
        "content": "<p>Does <code>assumption_mod_cast</code> work?</p>",
        "id": 424048209,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709221419
    },
    {
        "content": "<p>Nope, <code>tactic 'assumption' failed</code></p>",
        "id": 424048321,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1709221444
    },
    {
        "content": "<p>Well, I now managed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.toPNat'</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">Nat.toPNat'</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.toPNat'</span> <span class=\"n\">n</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">PNat.coe_lt_coe</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>but it still seems way too long</p>",
        "id": 424049043,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1709221653
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.toPNat'</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">PNat.coe_lt_coe</span><span class=\"o\">,</span> <span class=\"n\">PNat.toPNat'_coe</span><span class=\"o\">,</span> <span class=\"n\">PNat.one_coe</span><span class=\"o\">]</span>\n  <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 424049204,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709221689
    },
    {
        "content": "<p>But yes, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PNat.coe_lt_coe#doc\">docs#PNat.coe_lt_coe</a> is the important lemma</p>",
        "id": 424049288,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709221715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inequality.20of.20Nat.20implies.20inequality.20of.20PNat/near/424049204\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.toPNat'</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">PNat.coe_lt_coe</span><span class=\"o\">,</span> <span class=\"n\">PNat.toPNat'_coe</span><span class=\"o\">,</span> <span class=\"n\">PNat.one_coe</span><span class=\"o\">]</span>\n  <span class=\"n\">omega</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 424049664,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1709221807
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.toPNat'</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">PNat.coe_lt_coe</span><span class=\"o\">]</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>also work, but I agree the main point is to start with <code>rw [← PNat.coe_lt_coe]</code>.</p>",
        "id": 424049896,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709221873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690858\">Command Master</span> has marked this topic as resolved.</p>",
        "id": 424078317,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709229950
    }
]