[
    {
        "content": "<p>I tried a few spellings, nothing came up for <code>exact?</code>/<code>apply?</code>/<code>aesop?</code>/etc:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∉</span> <span class=\"bp\">𝓝</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hc</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span> <span class=\"n\">ε_in_icc</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Metric.mem_nhds_iff.mp</span> <span class=\"n\">hc</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_mem</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">∈</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">a</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">mem_ball_iff_norm'.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ε_pos</span><span class=\"o\">,</span> <span class=\"n\">abs_of_pos</span><span class=\"o\">])</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_nmem</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">∉</span> <span class=\"n\">Set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Set.not_mem_Icc_of_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h_nmem</span> <span class=\"o\">(</span><span class=\"n\">ε_in_icc</span> <span class=\"n\">h_mem</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">Icc_mem_nhds</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">Set.Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">Filter.mem_of_superset</span> <span class=\"n\">h</span> <span class=\"n\">Set.Ioo_subset_Icc_self</span>\n</code></pre></div>\n<p>Do we have something like this?</p>",
        "id": 422059097,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708222882
    },
    {
        "content": "<p>I would be surprised if this is in Mathlib. They look pretty useless. What are you trying to do with those lemmas?</p>",
        "id": 422061406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708225901
    },
    {
        "content": "<p>I have (not <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> unfortunately):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Rectangle</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">[[</span><span class=\"n\">z.re</span><span class=\"o\">,</span> <span class=\"n\">w.re</span><span class=\"o\">]]</span> <span class=\"bp\">×</span><span class=\"n\">ℂ</span> <span class=\"o\">[[</span><span class=\"n\">z.im</span><span class=\"o\">,</span> <span class=\"n\">w.im</span><span class=\"o\">]]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">RectanglePullToNhdOfPole'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z₀</span> <span class=\"n\">z₁</span> <span class=\"n\">z₂</span> <span class=\"n\">z₃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span>\n    <span class=\"c1\">-- ...</span>\n    <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Rectangle</span> <span class=\"n\">z₁</span> <span class=\"n\">z₂</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">Rectangle</span> <span class=\"n\">z₁</span> <span class=\"n\">z₂</span> <span class=\"bp\">⊆</span> <span class=\"n\">Rectangle</span> <span class=\"n\">z₀</span> <span class=\"n\">z₃</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fHolo</span> <span class=\"o\">:</span> <span class=\"n\">HolomorphicOn</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Rectangle</span> <span class=\"n\">z₀</span> <span class=\"n\">z₃</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}))</span> <span class=\"o\">:</span>\n    <span class=\"n\">RectangleIntegral</span> <span class=\"n\">f</span> <span class=\"n\">z₀</span> <span class=\"n\">z₃</span> <span class=\"bp\">=</span> <span class=\"n\">RectangleIntegral</span> <span class=\"n\">f</span> <span class=\"n\">z₁</span> <span class=\"n\">z₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and I need <code>p</code> to not be on the edge of the inner rectangle. But maybe I should take instead of <code>(hp : Rectangle z₁ z₂ ∈ 𝓝 p)</code>, just directly <code>(hp : z₁ &lt; p.re ∧ ...)</code>?</p>",
        "id": 422062930,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708227916
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mem_interior_iff_mem_nhds</span><span class=\"o\">,</span> <span class=\"n\">interior_Icc</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∉</span> <span class=\"bp\">𝓝</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">irrefl</span> <span class=\"n\">_</span> <span class=\"bp\">·.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">Set.Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">interior_Icc</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">interior_mem_nhds.symm</span>\n</code></pre></div>",
        "id": 422083583,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1708249116
    },
    {
        "content": "<p><code>bar</code> above looks like a reasonable <code>simp</code> lemma for mathlib, probably with <code>Ioo</code> spelling on the right.</p>",
        "id": 424901769,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709654330
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11178\">https://github.com/leanprover-community/mathlib4/pull/11178</a></p>",
        "id": 424931171,
        "sender_full_name": "llllvvuu",
        "timestamp": 1709662893
    }
]