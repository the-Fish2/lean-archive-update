[
    {
        "content": "<p>What is know about exterior powers in mathlib ? So far the best I found is <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/ExteriorAlgebra/Grading.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/ExteriorAlgebra/Grading.html</a>, which defines the exterior algebra as a graded algebra.</p>\n<p>I asked lean to synthesize a <code>FiniteDimensional</code> instance on the nth exterior of a finite-dimensional vector space and got an error. That is not very hard to fix, but does this mean that mathlib doesn't have the formula for the dimension of the nth exterior power of a finite-dimensional vector space (or a free module of finite rank) ? </p>\n<p>Still about exterior powers but unrelated, what about the <code>NormedSpace</code> case ? Is the topological vector space structure on exterior powers defined ?</p>\n<p>The reason of all these questions, of course, is that I am trying to define the Pl√ºcker embedding from a Grassmannian to a projective space, and I want to do it coordinate-free. Hence exterior powers.</p>",
        "id": 396657255,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1697295618
    },
    {
        "content": "<p>I don't think we have anything serious there. Maybe <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> or <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> have something more on a branch, towards de Rham cohomology, but not PRed yet if I understand correctly.</p>",
        "id": 396657744,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697296097
    },
    {
        "content": "<p>Okay, I can <code>sorry</code> the results I need about dimension of exterior powers for now.</p>\n<p>I can also work in finite dimension so the exterior power has a canonical topological vector space structure. But now I have another question, as I don't just need a tvs structure to define the manifold structure, I need a <code>NormedSpace</code> instance: is there some preferred way to put a <code>NormedSpace</code> instance on a finite-dimensional vector space over a <code>NontriviallyNormedField</code> ? I have been looking at the <code>NormedSpace</code> files in mathlib but I haven't found anything yet. (Of course I can do it myself: use choice to pick an isomorphism with a <code>Fin r ‚Üí  ùïú</code> (where <code> ùïú</code> is my base field) and then transport the norm. I was just wondering is there's a better way.)</p>",
        "id": 396658548,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1697296819
    },
    {
        "content": "<p>Even if you choose a basis, what norm will you choose on ‚ÄòFin r to k‚Äò?</p>",
        "id": 396659515,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1697297427
    },
    {
        "content": "<p>I would avoid using finite-dimensionality to choose a norm and arguing that since all norms are equivalent it gives the right topology. Instead I'd rather put the correct norm on exterior products of a normed space-- whatever that is. For the exterior product of a dual space, I know what this should be: the operator norm on multilinear maps. For the exterior product of a space, maybe embed it into its bidual and use the previous sentence -- or do that in a more canonical way I am not thinking of for now, probably.</p>",
        "id": 396660693,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697298527
    },
    {
        "content": "<p>Note that it would make sense to do that for tensor products first. There are two canonical norms on tensor products, but only one of them comes from the point of view of multilinear maps, so that's probably the one whose analogue we want to use here.</p>",
        "id": 396660796,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697298607
    },
    {
        "content": "<p>There's an open issue about putting an inner product space structure on the tensor product, with some links to previous work</p>",
        "id": 396661269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697299107
    },
    {
        "content": "<p>Regarding exterior powers:</p>\n<ul>\n<li>we have them today as <code>LinearMap.range (Œπ R : M ‚Üí‚Çó[R] ExteriorAlgebra R M) ^ i</code>, but that's obviously not very convenient</li>\n<li>probably we want them as a a quotient of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorPower#doc\">docs#TensorPower</a></li>\n<li>I think <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> has some work on them in <a href=\"https://github.com/leanprover-community/mathlib/tree/koszul_cx\">https://github.com/leanprover-community/mathlib/tree/koszul_cx</a></li>\n</ul>",
        "id": 396661422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697299263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Exterior.20powers/near/396659515\">said</a>:</p>\n<blockquote>\n<p>Even if you choose a basis, what norm will you choose on ‚ÄòFin r to k‚Äò?</p>\n</blockquote>\n<p>Lean does it for me, it's the sup norm:<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/Basic.html#Pi.normedSpace\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/Basic.html#Pi.normedSpace</a><br>\n(And it's an instance, so if I did something else it would require extra effort.)</p>",
        "id": 396666213,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1697303848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Exterior.20powers/near/396657744\">said</a>:</p>\n<blockquote>\n<p>I don't think we have anything serious there. Maybe <span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> or <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> have something more on a branch, towards de Rham cohomology, but not PRed yet if I understand correctly.</p>\n</blockquote>\n<p>Yury and I have avoided this issue by working with the antisymmetric k-multilinear maps from V rather than the k-th exterior power of V-dual. And FWIW, I've come to think of this not as a formalization hack but as a reflection of mathematical reality ...</p>",
        "id": 396668275,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697306368
    },
    {
        "content": "<p>Indeed, this way we don't have to assume <code>[FiniteDimensional]</code> here and there.</p>",
        "id": 396671467,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1697309928
    },
    {
        "content": "<p>The project is on hold for now but we're going to CMU in November for a week to collaborate on it.</p>",
        "id": 396671492,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1697309984
    },
    {
        "content": "<p>Okay, this is giving me some ideas. First, I need to generalize things a little bit from <code>Fin r</code> to general fintypes.</p>",
        "id": 396678254,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1697318291
    },
    {
        "content": "<p>I think that all this really is an argument in favor of using the \"algebraic geometry\" Grassmannian, i.e. the set of dimension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> subspaces of the dual of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>. I cannot say that I am displeased by this. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 396834585,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1697439204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Exterior.20powers/near/396678254\">said</a>:</p>\n<blockquote>\n<p>Okay, this is giving me some ideas. First, I need to generalize things a little bit from <code>Fin r</code> to general fintypes.</p>\n</blockquote>\n<p>I am always in favour of this!</p>",
        "id": 396856970,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1697447470
    },
    {
        "content": "<p>So I now have a PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/10654\">#10654</a>) introducing exterior powers and giving some of their properties, like a basis (when the module is free). I also wrote some code to define a norm on them following S√©bastien's suggestion, though I am not totally satisfied with it (I don't think that one should just use multilinear maps into the base field, but into all normed vector spaces, which introduces universe issues). But maybe <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> or <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  you've made progress on that ?</p>",
        "id": 422107584,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708271689
    },
    {
        "content": "<p>Wow, <a href=\"https://github.com/leanprover-community/mathlib4/pull/10654\">#10654</a> looks awesome!</p>",
        "id": 422107691,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1708271791
    },
    {
        "content": "<p>A basic question relating to that PR; do we want <code>ExteriorPower R n M : Type*</code> or <code>exteriorPower R n M : Submodule R (ExteriorAlgebra R M)</code>?</p>",
        "id": 422109707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708273658
    },
    {
        "content": "<p>Right now we have the name of the first but the type of the second <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorPower#doc\">docs#TensorPower</a>, for comparison, is a <code>Type</code>.</p>",
        "id": 422109718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708273674
    },
    {
        "content": "<p>Maybe it's fine to have both?</p>",
        "id": 422109835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708273761
    },
    {
        "content": "<p>Re defining a norm, in case it's helpful (probably not!) I'll mention the inner product space defined on an exterior power of a finite-dimensional inner product space via the Gram determinant, as described <a href=\"https://en.wikipedia.org/wiki/Exterior_algebra#Inner_product\">here</a> on Wikipedia.</p>",
        "id": 422109940,
        "sender_full_name": "Richard Copley",
        "timestamp": 1708273827
    },
    {
        "content": "<p>I think whatever we do about the norm, it does not belong in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10654\">#10654</a>, to prevent that PR becoming too big!</p>",
        "id": 422109979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708273863
    },
    {
        "content": "<p>If it isn't yet <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 422113237,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708276655
    },
    {
        "content": "<p>On the one hand, I like types. On the other hand, I would like to be able to say that the exterior algebra is the direct sum of all the exterior powers, and I don't know how to do that if it's not a submodule.</p>",
        "id": 422127227,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708288613
    },
    {
        "content": "<blockquote>\n<p>I would like to be able to say that the exterior algebra is the direct sum of all the exterior powers,</p>\n</blockquote>\n<p>We already have that result stated for types, it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DirectSum.decomposeAlgEquiv#doc\">docs#DirectSum.decomposeAlgEquiv</a> (via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ExteriorAlgebra.gradedAlgebra#doc\">docs#ExteriorAlgebra.gradedAlgebra</a>) :)</p>",
        "id": 422127259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708288641
    },
    {
        "content": "<p>Though indeed the development towards that result uses the submodule spelling</p>",
        "id": 422127289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708288671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Exterior.20powers/near/422109940\">said</a>:</p>\n<blockquote>\n<p>Re defining a norm, in case it's helpful (probably not!) I'll mention the inner product space defined on an exterior power of a finite-dimensional inner product space via the Gram determinant, as described <a href=\"https://en.wikipedia.org/wiki/Exterior_algebra#Inner_product\">here</a> on Wikipedia.</p>\n</blockquote>\n<p>I do have a definition of the norm written down in <a href=\"https://github.com/smorel394/ExteriorPowers\">my own project</a>, and it works fine, but it only gives the universal property of the normed exterior powers for alternating maps into the base field, which is not good. I know how to fix this, but I will have to play with universes and I'm a bit afraid.</p>",
        "id": 422127489,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708288857
    },
    {
        "content": "<p>If one works over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> (or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>), then the definition I already have and the one I want to have will give the same result, thanks to the Hahn-Banach theorem. So my real concern is things like non spherically complete fields.</p>",
        "id": 422127618,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708288967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Exterior.20powers/near/422127259\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I would like to be able to say that the exterior algebra is the direct sum of all the exterior powers,</p>\n</blockquote>\n<p>We already have that result stated for types, it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DirectSum.decomposeAlgEquiv#doc\">docs#DirectSum.decomposeAlgEquiv</a> (via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ExteriorAlgebra.gradedAlgebra#doc\">docs#ExteriorAlgebra.gradedAlgebra</a>) :)</p>\n</blockquote>\n<p>You're right, I confused myself. Anyway, I should not vote, because right now I want to choose the solution that will give me less work (i.e. keeping exterior powers as submodules), but that might not be the best choice in the long term.</p>",
        "id": 422127737,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708289079
    },
    {
        "content": "<p>I think that's an ok answer for the context of your PR, in which case the short-term solution is to rename <code>ExteriorPower</code> to <code>exteriorPower</code> or <code>ExteriorAlgebra.powers</code></p>",
        "id": 422128266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708289549
    },
    {
        "content": "<p>It was initially called <code>ExteriorAlgebra.gradedPiece</code>...<br>\nBut then, what do I do with all the notation that has <code>ExteriorPower</code> as a prefix, like <code>ExteriorPower.ŒπMulti</code>or <code>ExteriorPower.map</code> ? Is it okay to call them <code>exteriorPower.ŒπMulti</code>etc ? I cannot pretend that I totally understand the naming conventions.</p>",
        "id": 422128435,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708289692
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=unitary#doc\">docs#unitary</a> is probably the best example to copy</p>",
        "id": 422128502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708289762
    },
    {
        "content": "<p>Thanks ! So according to this, <code>exteriorPower.map</code> would definitely be allowed.</p>",
        "id": 422128696,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708289923
    },
    {
        "content": "<p>Still haven't figured out what's causing the timeouts in <code>ExterirAlgebra/Grading.lean</code> in this <a href=\"https://github.com/leanprover-community/mathlib4/tree/SM.ExteriorPowerDef\">branch</a> where I introduce and use the notation for exterior powers earlier. (I set the maximum number of heartbeats to 5000000 and it still timeouts, so I don't think it's just slowness, Lean really has trouble guessing something but as usual it just tells me <code>(deterministic) timeout at 'isDefEq'</code>.)</p>",
        "id": 422128896,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708290078
    },
    {
        "content": "<p>Okay, apparently the problem is that Lean can't figure out the <code>DirectSum.GSemiring</code> structure when I use the notation, even if I explicitely tell it that all the <code>(Œõ[R]^i) M</code> are submodules of the exterior algebra. Now I have to figure the exact incantation to make it create that instance, but I can't even find the definition of the instance...</p>",
        "id": 422130743,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708291640
    },
    {
        "content": "<p>yeah I've been looking at this too, on the face of it it just looks like you've introduced a new notation and then randomly things break. Sounds like you've got further than me, but perhaps it's worth saying that the porting note which was there already</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: Lean needs to be reminded of this instance otherwise it cannot</span>\n<span class=\"c1\">-- synthesize 0 in the next theorem</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span> <span class=\"mi\">1100</span><span class=\"o\">]</span> <span class=\"n\">MulZeroClass.toZero</span> <span class=\"k\">in</span>\n</code></pre></div>\n<p>is already an indication that something weird is going on. I remember Amelia having terrible trouble with exterior powers years ago.</p>",
        "id": 422131449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708292352
    },
    {
        "content": "<p>Well I'm too tired to think about it tonight, so I'll just go to bed and hope things make more sense tomorrow.</p>",
        "id": 422131659,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708292550
    },
    {
        "content": "<p>Here's the issue on master: maybe I'm missing something obvious, but adding an <code>abbrev</code> for <code>LinearMap.range (Œπ R : M ‚Üí‚Çó[R] ExteriorAlgebra R M) ^ i</code> stops a once-working declaration from compiling.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.ExteriorAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.GradedAlgebra.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ExteriorAlgebra</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">working</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">GradedAlgebra.Œπ</span> <span class=\"o\">:</span>\n    <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DirectSum.lof</span> <span class=\"n\">R</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"bp\">‚àò‚Çó</span>\n    <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">codRestrict</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">LinearMap.mem_range_self</span> <span class=\"n\">_</span> <span class=\"n\">m</span>\n\n<span class=\"c1\">-- Porting note: Lean needs to be reminded of this instance otherwise it cannot</span>\n<span class=\"c1\">-- synthesize 0 in the next theorem</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span> <span class=\"mi\">1100</span><span class=\"o\">]</span> <span class=\"n\">MulZeroClass.toZero</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">GradedAlgebra.Œπ_sq_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">GradedAlgebra.Œπ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">GradedAlgebra.Œπ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">working</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">this_breaks_it</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ExteriorPower</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">this_breaks_it</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">not_working_any_more</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">brokenGradedAlgebra.Œπ</span> <span class=\"o\">:</span>\n    <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DirectSum.lof</span> <span class=\"n\">R</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"bp\">‚àò‚Çó</span>\n    <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">codRestrict</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">LinearMap.mem_range_self</span> <span class=\"n\">_</span> <span class=\"n\">m</span>\n\n<span class=\"c1\">-- Porting note: Lean needs to be reminded of this instance otherwise it cannot</span>\n<span class=\"c1\">-- synthesize 0 in the next theorem</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span> <span class=\"mi\">1100</span><span class=\"o\">]</span> <span class=\"n\">MulZeroClass.toZero</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">brokenGradedAlgebra.Œπ_sq_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">brokenGradedAlgebra.Œπ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">brokenGradedAlgebra.Œπ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- deterministic timeout</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">not_working_any_more</span>\n</code></pre></div>",
        "id": 422132487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708293400
    },
    {
        "content": "<p>Tensor powers have an explicitely defined <code>DirectSum.GSemiring</code> instance on them (cf <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/TensorPower.html#TensorPower.gsemiring\">this</a>), so maybe that's the solution here ? I just don't know if it would break other stuff.</p>",
        "id": 422185759,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708332525
    },
    {
        "content": "<p>For example, this gets rid of the timeout (of course it's cheating):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.ExteriorAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.GradedAlgebra.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ExteriorAlgebra</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">working</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">GradedAlgebra.Œπ</span> <span class=\"o\">:</span>\n    <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DirectSum.lof</span> <span class=\"n\">R</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"bp\">‚àò‚Çó</span>\n    <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">codRestrict</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">LinearMap.mem_range_self</span> <span class=\"n\">_</span> <span class=\"n\">m</span>\n\n<span class=\"c1\">-- Porting note: Lean needs to be reminded of this instance otherwise it cannot</span>\n<span class=\"c1\">-- synthesize 0 in the next theorem</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span> <span class=\"mi\">1100</span><span class=\"o\">]</span> <span class=\"n\">MulZeroClass.toZero</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">GradedAlgebra.Œπ_sq_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">GradedAlgebra.Œπ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">GradedAlgebra.Œπ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">working</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">this_breaks_it</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ExteriorPower</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">this_breaks_it</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">not_working_any_more</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">brokenGradedAlgebra.Œπ</span> <span class=\"o\">:</span>\n    <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DirectSum.lof</span> <span class=\"n\">R</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"bp\">‚àò‚Çó</span>\n    <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">codRestrict</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">LinearMap.mem_range_self</span> <span class=\"n\">_</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">annoying</span> <span class=\"o\">:</span> <span class=\"n\">DirectSum.GSemiring</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span>  <span class=\"bp\">‚Ü¶</span>  <span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Porting note: Lean needs to be reminded of this instance otherwise it cannot</span>\n<span class=\"c1\">-- synthesize 0 in the next theorem</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span> <span class=\"mi\">1100</span><span class=\"o\">]</span> <span class=\"n\">MulZeroClass.toZero</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">brokenGradedAlgebra.Œπ_sq_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">brokenGradedAlgebra.Œπ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">brokenGradedAlgebra.Œπ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- deterministic timeout</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">not_working_any_more</span>\n</code></pre></div>",
        "id": 422186428,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708332747
    },
    {
        "content": "<p>Also the doc of <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/DirectSum/Ring.html\">DirectSum/Ring</a> says that it provides helper functions such as <code>DirectSum.GSemiring.ofSubmodules</code> to construct <code>DirectSum.GSemiring</code> instances, but I cannot locate this helper functions in mathlib (using the site search or moogle). Maybe the names changed and the doc was not updated ?</p>",
        "id": 422196183,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708335926
    },
    {
        "content": "<p>I found the relevant instance that Lean needs to be reminded of, it's called <code>Submodule.nat_power_gradedMonoid</code>. This gets rid of the timeout:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.ExteriorAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.GradedAlgebra.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ExteriorAlgebra</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">working</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">GradedAlgebra.Œπ</span> <span class=\"o\">:</span>\n    <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DirectSum.lof</span> <span class=\"n\">R</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"bp\">‚àò‚Çó</span>\n    <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">codRestrict</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">LinearMap.mem_range_self</span> <span class=\"n\">_</span> <span class=\"n\">m</span>\n\n<span class=\"c1\">-- Porting note: Lean needs to be reminded of this instance otherwise it cannot</span>\n<span class=\"c1\">-- synthesize 0 in the next theorem</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span> <span class=\"mi\">1100</span><span class=\"o\">]</span> <span class=\"n\">MulZeroClass.toZero</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">GradedAlgebra.Œπ_sq_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">GradedAlgebra.Œπ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">GradedAlgebra.Œπ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">working</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">this_breaks_it</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ExteriorPower</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">this_breaks_it</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">not_working_any_more</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">brokenGradedAlgebra.Œπ</span> <span class=\"o\">:</span>\n    <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DirectSum.lof</span> <span class=\"n\">R</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"bp\">‚àò‚Çó</span>\n    <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">codRestrict</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">LinearMap.mem_range_self</span> <span class=\"n\">_</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">why</span> <span class=\"o\">:</span> <span class=\"n\">SetLike.GradedMonoid</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Submodule.nat_power_gradedMonoid</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- Porting note: Lean needs to be reminded of this instance otherwise it cannot</span>\n<span class=\"c1\">-- synthesize 0 in the next theorem</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span> <span class=\"mi\">1100</span><span class=\"o\">]</span> <span class=\"n\">MulZeroClass.toZero</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">brokenGradedAlgebra.Œπ_sq_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">brokenGradedAlgebra.Œπ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">brokenGradedAlgebra.Œπ</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">not_working_any_more</span>\n</code></pre></div>\n<p>However, maybe there is a better way to remind Lean that the instance exists, such as what was done here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: Lean needs to be reminded of this instance otherwise it cannot</span>\n<span class=\"c1\">-- synthesize 0 in the next theorem</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span> <span class=\"mi\">1100</span><span class=\"o\">]</span> <span class=\"n\">MulZeroClass.toZero</span> <span class=\"k\">in</span>\n</code></pre></div>",
        "id": 422272518,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708360453
    },
    {
        "content": "<p>Oh nice catch! There is something seriously borked about these direct sums. I've seen this sort of thing before -- an import screws things up. This works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.ExteriorAlgebra.Basic</span>\n<span class=\"c1\">-- import Mathlib.RingTheory.GradedAlgebra.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>but if you uncomment the second import then the zero can't be found any more. So there's some bad instance being imported: I'll look further.</p>",
        "id": 422298010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708372684
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.ExteriorAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.GradedAlgebra.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">SetLike.gcommSemiring</span> <span class=\"c1\">-- :-/</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">SetLike.gcommRing</span>     <span class=\"c1\">-- :-/</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"c1\">-- now works</span>\n</code></pre></div>",
        "id": 422301104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708373956
    },
    {
        "content": "<p>These instances are used in <code>RingTheory.MvPolynomial.Homogeneous</code> :-/ (in an <em>example</em>?!) Comment out that example, and change the two instances above to defs, and mathlib compiles fine :-)</p>",
        "id": 422301799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708374201
    },
    {
        "content": "<p>Those are definitely supposed to be instances!</p>",
        "id": 422307075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708376824
    },
    {
        "content": "<p>Yes, unfortunately this is what I thought too, and right now I'm struggling to figure out why they're causing a problem, because if a typeclass search times out (as opposed to failing) then I can't work out how to see the instance trace. I'm wondering if they're causing some kind of loop?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.ExteriorAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.GradedAlgebra.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"c1\">--attribute [-instance] SetLike.gcommSemiring -- :-/</span>\n<span class=\"c1\">--attribute [-instance] SetLike.gcommRing     -- :-/</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n <span class=\"c1\">-- seems to hang, no trace accessible</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 422307325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708376994
    },
    {
        "content": "<p>I will have a lot more time to look at this next week than I do this week</p>",
        "id": 422307683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708377213
    },
    {
        "content": "<p>I guess I will have a lot less time next week because I'll have to read your thesis?</p>",
        "id": 422308084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708377488
    },
    {
        "content": "<p>My guess: too many <code>XClass</code> classes are available. Is there a way to manage this in a local way?</p>",
        "id": 422308803,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708377971
    },
    {
        "content": "<p>I've disproved my loop conjecture: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Zero</span> <span class=\"n\">took</span> <span class=\"mi\">608</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>(on my fast machine!)</p>",
        "id": 422309731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708378560
    },
    {
        "content": "<p>I don't understand <a href=\"https://gist.github.com/kbuzzard/abee7d588f756e8ad877581f336b48f2\">the trace</a> at all.</p>",
        "id": 422314193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708381311
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.ExteriorAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.GradedAlgebra.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ExteriorAlgebra</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ExteriorPower</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span>  <span class=\"c1\">-- no</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"c1\">-- yes</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"c1\">-- no</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">SetLike.gcommSemiring</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">SetLike.gcommRing</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"c1\">-- yes</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"c1\">-- yes</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"c1\">-- no</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">why</span> <span class=\"o\">:</span> <span class=\"n\">SetLike.GradedMonoid</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Submodule.nat_power_gradedMonoid</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.range</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí‚Çó</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ExteriorAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"c1\">-- yes</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"c1\">-- yes</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"c1\">-- yes</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">SetLike.gcommSemiring</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">SetLike.gcommRing</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"c1\">-- no</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"c1\">-- yes</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"o\">(</span><span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">ExteriorPower</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"c1\">-- yes</span>\n</code></pre></div>",
        "id": 422324254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708388220
    },
    {
        "content": "<p>This looks quite unpleasant. I will take a closer look tomorrow (or on the flight to SF tonight maybe)</p>",
        "id": 422330773,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708393476
    },
    {
        "content": "<p>What's frustrating is that I cannot extract a trace in the failing cases. Note that some of the no's might become yes's if you leave lean on for ten minutes with all heartbeats on +infty, but I don't know how to get a trace even in that situation.</p>",
        "id": 422365221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708416506
    },
    {
        "content": "<p>By the way, the definition of exterior powers (and notation for them) is now split off in PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10744\">#10744</a>.</p>",
        "id": 422371663,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708419267
    },
    {
        "content": "<p>I didn't take the time to have a look at Sophie's file, but with <span class=\"user-mention\" data-user-id=\"406490\">@Mar√≠a In√©s de Frutos Fern√°ndez</span> , we managed to prove that for the divided power algebra (which has one advantage on the exterior algebra, namely it is commutative). You can have a look on github, in case it helps‚Ä¶<br>\n<a href=\"https://github.com/AntoineChambert-Loir/DividedPowers4/blob/72105a6d850124bf5904c30e5a0e223272c31eb7/DividedPowers/DPAlgebra/Graded/Basic.lean#L88\">DividedPowers/DPAlgebra/Graded/Basic.lean</a></p>",
        "id": 422433754,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708440771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>, the grading of the exterior algebra is already in mathlib at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ExteriorAlgebra.gradedAlgebra#doc\">docs#ExteriorAlgebra.gradedAlgebra</a>, and has been for some time!</p>",
        "id": 422435317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708441127
    },
    {
        "content": "<p>Yes, the problem is, as far as I can tell, that once you introduce a notation for the graded pieces Lean becomes unable to synthesize some instances. But the grading was already there.</p>",
        "id": 422445760,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1708443889
    },
    {
        "content": "<p>And the meta-problem is that it's also (at least as far as I'm concerned) extremely difficult to see <em>why</em> Lean becomes unable to synthesize them, because it won't give out traces on failures.</p>",
        "id": 422447130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708444291
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/mrb%2Fext_alg_testing\">branch#mrb/ext_alg_testing</a> has something that is close to the cutoff. It‚Äôs still over because the search space is too big.</p>",
        "id": 422547476,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708493121
    },
    {
        "content": "<p>Synthesizing <code>Zero</code> is down to <code>21000</code> heartbeats and the instance <code>why</code> is necessary because Lean only has <code>GradedRing.toGradedMonoid</code> in the cache for a <code>SetLike.GradedMonoid</code>. Some <code>foApprox</code> and <code>constApprox</code> errors have popped up.</p>",
        "id": 422629260,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708525629
    },
    {
        "content": "<p>Maybe unrelated but every diamond test around this part of the library of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">algebraNat</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">(</span><span class=\"n\">FreeAlgebra</span> <span class=\"n\">S</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">instAlgebra</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>fails with <code>with_reducible_and_instances</code></p>",
        "id": 422679757,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708539799
    },
    {
        "content": "<p>Presumably due to the use of <code>RingHom.comp</code> in the definitions?</p>",
        "id": 422928218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708648014
    },
    {
        "content": "<p>Should we drop <code>cast</code> from <code>Algebra</code> definition to reduce diamonds?</p>",
        "id": 422929194,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708648687
    },
    {
        "content": "<p>I don't understand the question</p>",
        "id": 422929373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708648842
    },
    {
        "content": "<p>Currently <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra#doc\">docs#Algebra</a> has a <code>RingHom</code> in its definition. We can drop it, formulate axioms in terms of <code>SMul</code>, then define a <code>RingHom</code> projection as <code>a ‚Ä¢ 1</code> and prove (non-defeq) lemmas about equality to <code>Nat.cast</code> etc.</p>",
        "id": 422929760,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708649125
    },
    {
        "content": "<p>I think setting <code>toFun</code> manually to avoid diamonds is probably a better solution</p>",
        "id": 422930924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708649924
    },
    {
        "content": "<p>At some point we'll find we want a casting function for non-unital semirings, and then the smul approach fails</p>",
        "id": 422930962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708649952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Exterior.20powers/near/422928218\">said</a>:</p>\n<blockquote>\n<p>Presumably due to the use of <code>RingHom.comp</code> in the definitions?</p>\n</blockquote>\n<p>I <em>think</em> so but I couldn‚Äôt completely isolate it with the time I had</p>",
        "id": 423069683,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708711951
    },
    {
        "content": "<p>Okay, any advice on what I should do about PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10744\">#10744</a> ? That's the PR where I introduce the <code>ExteriorPower</code> abbreviation (and notation for it) as early as possible, it broke some stuff in <code>LinearAlgebra/ExteriorAlgebra/Grading</code> for some reasons that, to be quite frank, I still don't understand, I fixed the broken stuff by manually defining an instance that before was automatically synthesized by Lean, but I don't know if that was The Right Way to do it, because all that instances stuff is basically black magic to me.<br>\nAnd now that PR is blocking PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10654\">#10654</a> that was actually doing things with exterior powers, so I'm kind of regretting the fact that I created it at all.</p>",
        "id": 423881636,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1709146160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ?</p>",
        "id": 423881956,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709146261
    },
    {
        "content": "<p>I'll look at this in a few hours. Shortcut instances are fairly benign for fixing typeclass issues, so the workaround you describe is probably fine</p>",
        "id": 423882216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709146352
    },
    {
        "content": "<p>I think it is ok. We really need a global tag or issue or something for ‚Äúwhy do I need this instance?‚Äù</p>",
        "id": 423883104,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709146652
    },
    {
        "content": "<p>I pushed some changes, notably fixing the notation to be <code>Œõ[R]^n M</code> not <code>(Œõ[R]^n) M</code></p>",
        "id": 423897808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709152382
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11062\">#11062</a> makes the same change for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorPower#doc\">docs#TensorPower</a></p>",
        "id": 423922749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709163562
    },
    {
        "content": "<p>Should it be a <code>\\bigwedge</code> rather than a <code>\\Lambda</code>? (Same question for AlternatingMap.)</p>",
        "id": 423926422,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709165654
    },
    {
        "content": "<p>One example (<a href=\"https://en.wikipedia.org/wiki/Exterior_algebra#Exterior_power\">wikipedia</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>The {{math|''k''}}th '''exterior power''' of {{tmath|V}}, denoted {{tmath|{\\textstyle\\bigwedge}^{\\!k}(V)}}, [...]\n</code></pre></div>\n<p>(The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>‚Äãth <strong>exterior power</strong> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, denoted <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mo>‚ãÄ</mo><mi>k</mi></msup><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">\\bigwedge^k V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.239em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">‚ãÄ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.989em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, [...])</p>",
        "id": 423926905,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709166053
    },
    {
        "content": "<p>Oh nice catch</p>",
        "id": 423927213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709166294
    },
    {
        "content": "<p>So <code>‚ãÄ</code> not <code>Œõ</code>?</p>",
        "id": 423927317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709166354
    },
    {
        "content": "<p>Yes</p>",
        "id": 423927376,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709166395
    },
    {
        "content": "<p>People do use <code>\\Lambda</code>, but it's a solecism in my opinion.  Not the worst I've seen (there's a textbook that uses a script S for powerset).</p>",
        "id": 423927465,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709166456
    },
    {
        "content": "<p>Annoying thing to bring up, sorry. Shall I make a PR?</p>",
        "id": 423927858,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709166774
    },
    {
        "content": "<p>so hard to grep</p>",
        "id": 423928178,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709167032
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11064\">#11064</a></p>\n<p>[Edit: to denote <code>AlternatingMap R M N Œπ</code> by <code>M [‚ãÄ^Œπ]‚Üí‚Çó[R] N</code> (with <code>\\bigwedge</code>)]</p>",
        "id": 423929543,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709167907
    },
    {
        "content": "<p>Ah, silly me: that's only AlternatingMap (ExteriorPower doesn't exist on master yet). I'll edit the description, and I will see if I can edit <a href=\"https://github.com/leanprover-community/mathlib4/pull/10744\">#10744</a> (for ExteriorPower). It's probably good to do those two changes separately anyway.</p>",
        "id": 423930272,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709168414
    },
    {
        "content": "<p>done.</p>\n<p>[Edit: edited <a href=\"https://github.com/leanprover-community/mathlib4/pull/10744\">#10744</a> to denote <code>exteriorPower R n M</code> by <code>‚ãÄ[R]^n M</code> (with <code>\\bigwedge</code>)]</p>",
        "id": 423930655,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709168684
    },
    {
        "content": "<p>... fixing ...</p>",
        "id": 423931244,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709169135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Exterior.20powers/near/423929543\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11064\">#11064</a></p>\n<p>[Edit: to denote <code>AlternatingMap R M N Œπ</code> by <code>M [‚ãÄ^Œπ]‚Üí‚Çó[R] N</code> (with <code>\\bigwedge</code>)]</p>\n</blockquote>\n<p>Build succeeded, lint failed. I touched it, so I need to add a docstring.</p>",
        "id": 423934179,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709171229
    },
    {
        "content": "<p>Where \"it\" is <code>ContinuousAlternatingMap</code> (in \"Mathlib.Topology.Algebra.Module.Alternating.Basic\"). The linter error is</p>\n<blockquote>\n<p>/- The <code>docBlame</code> linter reports:<br>\nDEFINITIONS ARE MISSING DOCUMENTATION STRINGS: -/<br>\n-- Mathlib.Topology.Algebra.Module.Alternating.Basic<br>\nError: ./././Mathlib/Topology/Algebra/Module/Alternating/Basic.lean:46:1: error: term_[‚ãÄ^_]‚ÜíL[_]_ definition missing documentation string</p>\n</blockquote>\n<p>I don't understand this. I'll keep looking.</p>",
        "id": 423936222,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709171843
    },
    {
        "content": "<p>No, I don't get it, and it's too late at night for me to think about it now.</p>\n<p>State of affairs: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10744\">#10744</a> (<code>exteriorPower</code>) is <span aria-label=\"green\" class=\"emoji emoji-1f7e2\" role=\"img\" title=\"green\">:green:</span>, and no one needs to rush to think about <a href=\"https://github.com/leanprover-community/mathlib4/pull/11064\">#11064</a> (<code>AlternatingMap</code>).</p>",
        "id": 423937834,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709172608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> I just pushed a commit that should fix this issue.</p>",
        "id": 423942927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709176437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Exterior.20powers/near/423897808\">said</a>:</p>\n<blockquote>\n<p>I pushed some changes, notably fixing the notation to be <code>Œõ[R]^n M</code> not <code>(Œõ[R]^n) M</code></p>\n</blockquote>\n<p>Thanks ! I wanted to do that but didn't know how to (I just copied the notation from the tensor power file, because I don't know how to define this kind of notation myself).</p>",
        "id": 423995958,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1709204551
    }
]