[
    {
        "content": "<p>I was hoping that this was already implemented by the MorphismProperty stuff but it didn't look like it. Is there a more specialized way of doing it that's already in mathlib?</p>",
        "id": 419720956,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707071922
    },
    {
        "content": "<p>I don’t think we have anything like this. I would add the construction of a wide subcat associated to a morphism property which respects isos and compositions</p>",
        "id": 419723507,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707074020
    },
    {
        "content": "<p>Yeah, I'll go ahead and do that</p>",
        "id": 419723520,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707074040
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.MorphismProperty.respectsIdentity#doc\">docs#CategoryTheory.MorphismProperty.respectsIdentity</a></p>",
        "id": 419723562,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707074045
    },
    {
        "content": "<p>I guess respecting isos is a less evil property anyway</p>",
        "id": 419723585,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707074072
    },
    {
        "content": "<p>Re: (non) evil stuff, the function <code>MorphismProperty.map</code> forms the image up to isomorphisms instead of the image on the nose and I think this is a bad design decision &amp; that the name is misleading. If someone is working with categories as strict objects/working in the 1-cat Cat then you really would want the on the nose image. I would suggest having map be the strict map and defining <code>essMap (P : MorphismProperty C) (F : C ⥤ D) := isoClosure (map P F)</code>. Anyone have thoughts on this?</p>",
        "id": 419728323,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707078402
    },
    {
        "content": "<p>It seems you are looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.MorphismProperty.IsMultiplicative#doc\">docs#CategoryTheory.MorphismProperty.IsMultiplicative</a></p>\n<p>Please note that we do not have the notion of isomorphisms of categories: we only have equivalences. Early designs decisions in the category theory library prevent people to even think about \"evil\" stuff.</p>\n<p>I would not mind too much if you <em>renamed</em> <code>MorphismProperty.map</code> as <code>essMap</code>, define a more strict <code>map</code> and prove the lemma <code>P.essMap F = isoClosure (P.map F)</code>.</p>",
        "id": 419729697,
        "sender_full_name": "Joël Riou",
        "timestamp": 1707079595
    },
    {
        "content": "<p>I'm not sure what you mean by not having the notion of isomorphism of categories? There is an instance <code>LargeCategory Cat</code> and thus a notion of isomorphism of categories in mathlib. It seems like a bad idea to prevent people from thinking about evil stuff if the goal is to be able to formalize math, since some category theory is evil (eg grothendieck fibrations, the thomason model structure)</p>\n<p>Edit: Also there's a definition of skeletal categories in mathib</p>",
        "id": 419729990,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707079897
    },
    {
        "content": "<p>Why are Grothendieck fibrations evil? They’re not evil if you do them correctly (I.e. using pseudofunctors)</p>",
        "id": 419733261,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707082532
    },
    {
        "content": "<p>The definition of a cartesian morphism talks about equality of morphisms in different Homs, and so equality of objects</p>",
        "id": 419733420,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707082676
    },
    {
        "content": "<p>Maybe “prevent” is too strong a word, but experience shows that “evil” translates to “pain when formalizing” quite consistently</p>",
        "id": 419733464,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707082687
    },
    {
        "content": "<p>Er, that's not quite right sorry. It's the existence of a cartesian lift that talks about equality of objects</p>",
        "id": 419733491,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707082715
    },
    {
        "content": "<p>Doesn’t that get solved with pseudofunctors?</p>",
        "id": 419733511,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707082734
    },
    {
        "content": "<p>If you think of a Grothendieck fibration as a plain old functor, then I agree that it is evil</p>",
        "id": 419733552,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707082765
    },
    {
        "content": "<p>I thought you were talking about functors vs pseudofunctors on the other side of the grothendieck correspondence, sorry. What do you have in mind for the definition of a grothendieck fibration?</p>",
        "id": 419733624,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707082812
    },
    {
        "content": "<p>Usually they go between 1-categories, so I'm not sure how one could be replaced with a pseudofunctor</p>",
        "id": 419733646,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707082841
    },
    {
        "content": "<p>Oh wait I’m thinking of the Grothendieck construction, sorry.</p>",
        "id": 419733900,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707083048
    },
    {
        "content": "<p>Anyway, if you have higher category theory where you can talk about sheaves of categories, do you really still need Grothendieck fibrations?</p>",
        "id": 419734119,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707083226
    },
    {
        "content": "<p>/shrug I would say that's a matter of opinion. Do we still need the total space of a vector bundle if we can think of it as a locally free sheaf instead?</p>",
        "id": 419734243,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707083332
    },
    {
        "content": "<p>(also, to be clear, there is a way of making the definition non-evil in the literature. but people talk and reason about grothendieck fibrations more frequently than they do street fibrations)</p>",
        "id": 419734330,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707083404
    },
    {
        "content": "<p>(FWIW, I've been thinking a lot about what \"evil\" really means lately, as I've been doing some stuff around Lawvere theories)</p>",
        "id": 419736534,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707085166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> has marked this topic as resolved.</p>",
        "id": 419975541,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707194828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> has marked this topic as unresolved.</p>",
        "id": 419975583,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707194880
    },
    {
        "content": "<p>I added some stuff about wide subcategories and in the process refactored parts of the MorphismProperty file (changing map -&gt; essMap like discussed above and making more order-theoretic structures apparent). I also ended up with some stuff about setoids and the saturation of a subset (see <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Set.20that.20descends.20to.20a.20quotient\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Set.20that.20descends.20to.20a.20quotient</a>), as well as adding general lemmas in the order theory library. I'd also like to unify the <code>Quiver.Total</code> and <code>CategoryTheory.Arrow</code> structures; it would be nice if the comma category structure was initially defined for a pair of prefunctors between quivers (this is a little odd since the \"comma quiver\" doesn't actually have a quiver structure, but I still think it would be nice to unify things). Not sure if I should keep working on that on this branch or treat it as a separate thing after this is merged</p>\n<p>In progress PR: <a href=\"https://github.com/leanprover-community/mathlib4/compare/master...MorphismPropertySubcategory\">https://github.com/leanprover-community/mathlib4/compare/master...MorphismPropertySubcategory</a></p>",
        "id": 419975945,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707195139
    },
    {
        "content": "<p>Also, the argument order of map/inverseImage is very strange and I think it should be flipped for consistency with eg sets</p>",
        "id": 419978301,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707197066
    },
    {
        "content": "<p>For the order of arguments of <code>MorphismProperty.inverseImage</code>, the idea was to allow dot notation.</p>",
        "id": 419984765,
        "sender_full_name": "Joël Riou",
        "timestamp": 1707201605
    },
    {
        "content": "<p><code>P.inverseImage F</code> just looks backwards to me, but maybe I'm alone here</p>",
        "id": 419984846,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707201675
    },
    {
        "content": "<p>You are not alone, this issue appear in several places in Mathlib, and I think we should simply not use dot notation in this case.</p>",
        "id": 420077470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707234673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/The.20wide.20subcategory.20on.20monomorphisms.3F/near/419975945\">said</a>:</p>\n<blockquote>\n<p>Not sure if I should keep working on that on this branch or treat it as a separate thing after this is merged</p>\n</blockquote>\n<p>I would think that this is already too big for a single PR, and that it should at least be split into several PR (one or two for the modifications of the most lowlevel files only, one for the renamings about <code>MorphismProperty.map</code>, one for the new <code>WideCategory</code> stuff).</p>\n<p>Initially, I had suggested defining <code>MorphismProperty C</code> as <code>Set (Arrow C)</code>, but this idea was rejected (do not ask me why). Then, reintroducing <code>Set (Arrow C)</code> as part of the <code>MorphismProperty</code> API is probably not welcome.</p>",
        "id": 420126047,
        "sender_full_name": "Joël Riou",
        "timestamp": 1707249992
    },
    {
        "content": "<p>Anyway, this should also be a good opportunity to split the file <code>CategoryTheory.MorphismProperty</code> into several shorter files.</p>",
        "id": 420126634,
        "sender_full_name": "Joël Riou",
        "timestamp": 1707250178
    },
    {
        "content": "<p>Ah okay, I didn't know that about the history of MorphismProperty. I think it's desirable to be able to write P f or f \\in P where f is a homomorphism, but we can't do this with DFunlike or Mem because of their choice of outparams (I think?). Can you link to the original discussion about this? I feel like it might be nicest to have MorphismProperty be a set of arrows directly and to provide a coercion from X ⟶ Y to Arrow C</p>",
        "id": 420131365,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707251859
    },
    {
        "content": "<p>(i will put a pause on any further work and making splitting stuff up a priority today)</p>",
        "id": 420131562,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707251919
    },
    {
        "content": "<p>I don't remember the history, but I think the <code>Set (Arrow C)</code> approach was rejected because writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∈</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">f \\in P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> for a morphism <code>f : X -&gt; Y</code>, which has type <code>X \\hom Y</code> and not <code>Arrow C</code>, would have caused issues.</p>",
        "id": 420132025,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707252084
    },
    {
        "content": "<p>Note that <code>Membership X Y</code> has <code>X</code> as an <code>outParam</code>.</p>",
        "id": 420132442,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707252259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/The.20wide.20subcategory.20on.20monomorphisms.3F/near/420131365\">said</a>:</p>\n<blockquote>\n<p>...provide a coercion from X ⟶ Y to Arrow C</p>\n</blockquote>\n<p>I think this exists...</p>",
        "id": 420132814,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707252411
    },
    {
        "content": "<p>Ah yep it does</p>",
        "id": 420132892,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707252451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/The.20wide.20subcategory.20on.20monomorphisms.3F/near/420131365\">said</a>:</p>\n<blockquote>\n<p>Ah okay, I didn't know that about the history of MorphismProperty. I think it's desirable to be able to write P f or f \\in P where f is a homomorphism</p>\n</blockquote>\n<p>If <code>f :X ⟶ Y</code>, it is possible to write <code>P f</code>, but not <code>f \\in P</code>. It is probably better we cannot write <code>f \\in P</code> because this would give two different syntaxes for the exact same thing, which we should try to avoid (e.g. in order to do rewrites, we would need twice as many lemmas depending on which syntax is used...). If <code>w : Arrow C</code>, we can write <code>P w.hom</code>, which seems quite reasonable.</p>\n<blockquote>\n<p>I feel like it might be nicest to have MorphismProperty be a set of arrows directly and to provide a coercion from X ⟶ Y to Arrow C</p>\n</blockquote>\n<p>The current design and the <code>Set (Arrow C)</code> design are equally ok. The point is that there is already a certain amount of code which uses the current design (algebraic geometry, localization of categories, and I have many more planned PRs...). Then, unless some very strong arguments are given, refactoring this just for the sake of changing the definition seems to me like a total waste of time and energy.</p>",
        "id": 420139526,
        "sender_full_name": "Joël Riou",
        "timestamp": 1707255187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/The.20wide.20subcategory.20on.20monomorphisms.3F/near/420132025\">said</a>:</p>\n<blockquote>\n<p>I don't remember the history, but I think the <code>Set (Arrow C)</code> approach was rejected because writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∈</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">f \\in P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> for a morphism <code>f : X -&gt; Y</code>, which has type <code>X \\hom Y</code> and not <code>Arrow C</code>, would have caused issues.</p>\n</blockquote>\n<p>Yeah I'm realizing this now, and I don't really understand what's causing these issues. In my mental model the fact that <code>Membership</code> has the member-type as an outparam means that when I write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∈</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">f \\in P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> the typesclass resolution should find an instance <code>Membership (Arrow C) (MorphismProperty C)</code>, deduce that <code>f</code> needs to have type <code>Arow C</code>, then find the coercion from <code>X \\hom Y</code> to <code>Arraow C</code></p>",
        "id": 420149734,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707259870
    },
    {
        "content": "<p>Can someone break down for me why this isn't what happens?</p>",
        "id": 420149751,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707259887
    },
    {
        "content": "<p>If you explicitly tell lean to coerce, then it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Arrow</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span>\n</code></pre></div>",
        "id": 420150062,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707260048
    },
    {
        "content": "<p>you could trace typeclass inference to see what's going on.</p>",
        "id": 420150070,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707260055
    },
    {
        "content": "<p>If I understand correctly the issue without the explicit coercion is that typeclass search finds the <code>Membership (Arrow C) (Set (Arrow C))</code> instance, with <code>Arrow C</code> being an outParam, and since the type of <code>f</code> is not <code>Arrow C</code>, the search fails. Now with the up arrow, there is another class to find for the coercion, and lean knows that it should look for a coercion to <code>Arrow C</code> from the other step, and it is finally able to find such a coercion, so it works.</p>",
        "id": 420150367,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707260245
    },
    {
        "content": "<p>Maybe the issue is that I don't know when or why lean decides to insert coercions</p>",
        "id": 420150534,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707260348
    },
    {
        "content": "<p>gah, <code>(. ∈ P) f</code> does typecheck</p>",
        "id": 420151134,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707260672
    },
    {
        "content": "<p>I guess lean does insert coercions when it elaborates function applications? We should wait for a typeclass expert to chime in :)</p>",
        "id": 420151429,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707260849
    },
    {
        "content": "<p><code>(f : _) ∈ P</code> fails to synthesize a membership instance like before, <code>(f : ?_) ∈ P</code> works!</p>",
        "id": 420151791,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707261019
    },
    {
        "content": "<p>I've made a series of PRs breaking up my one big commit from earlier: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10347\">#10347</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/10348\">#10348</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/10349\">#10349</a>, and <a href=\"https://github.com/leanprover-community/mathlib4/pull/10350\">#10350</a>. The actual wide subcategory definition isn't in any of these, I'd like to hold off on PRing it in until Quiver.Total/Arrow and WideSubquiver/MorphismProperty are better unified (also, WideSubquiver is a bad name and WideSubcategory should be a special case of the subcategory formed by a MorphismProperty closed under composition and taking the identity of the domain/codomain of any morphism in it, but which may not contain all objects)</p>",
        "id": 420364841,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707350895
    },
    {
        "content": "<p>I kicked the first one on the queue</p>",
        "id": 420413346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707383000
    }
]