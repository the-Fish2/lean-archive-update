[
    {
        "content": "<p>Basically, I want an automatic way to prove things like \"x<em>y</em>z=z<em>y</em>x\" and \"(c+d)<em>(a+b) = a</em>c+a<em>d+b</em>c+b*d\" without having to do it manually step by step using rewrite rules.</p>\n<p>This involves writing expressions in their \"normal form\".</p>\n<p>Some steps involve sorting the terms alphabetically such as writing \"y<em>x\" as \"x</em>y\"</p>\n<p>Now, I can think of two ways to achieve this:</p>\n<p>(1) Write the simplification code directly in Lean<br>\n(2) Create/Use a computer algebra system that can do simplification, but which generates Lean 4 code as a certificate for each step. </p>\n<p>The way (2) would work is you could use commands like \"Simplify\" or \"Factorise\" and it would use whatever algorithm is best to do this, but would then also prove the step by writing a list of Lean tactics. </p>\n<p>So for example, if I had an expression \"3<em>x+3</em>y+3<em>z\", I could call factorise it to get \"3</em>(x+y+z)\" and then it would also generate the lean 4 rewrite rules for this.  </p>\n<p>So I guess the question is: Is Lean 4 powerful enough to write computer algebra simplification code in itself or  is the best way to use it as a backend for a computer algebra system that verifies each step? And are there any tips for using Lean as a backend?</p>",
        "id": 442051672,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717334059
    },
    {
        "content": "<p>Are you looking for the <code>ring</code> tactic?</p>",
        "id": 442051702,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717334091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Can.20automatic.20algebraic.20expansion.20be.20written.20in.20lean.204.3F/near/442051702\">said</a>:</p>\n<blockquote>\n<p>Are you looking for the <code>ring</code> tactic?</p>\n</blockquote>\n<p>Possibly, does that simplify expressions into alphabetical form e.g. \"dbac = abcd\"? I have looked at the ring tactic and it looks pretty good.</p>\n<p>I'm also thinking of a way you could write automatic factorisation using complicated algorithms (as is done in things like Mathematica) but which proves the step using Lean. And whether that is theoertically possible to write in Lean or should be written in a separate program but using Lean as a proof checker.</p>",
        "id": 442051940,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717334260
    },
    {
        "content": "<p>It simplifies into \"alphabetical form\" but where the \"alphabet\" is some secret (to you) list of all possible \"ring atoms\" (we don't just want to sort variable names, but also things which should be considered constants from the POV of the language of rings, like <code>exp x</code>, <code>log x</code>, <code>π</code>, etc...)</p>",
        "id": 442052137,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717334385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"725689\">Mr Proof</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Can.20automatic.20algebraic.20expansion.20be.20written.20in.20lean.204.3F/near/442051940\">said</a>:</p>\n<blockquote>\n<p>I'm also thinking of a way you could write automatic factorisation using complicated algorithms (as is done in things like Mathematica) but which proves the step using Lean. And whether that is theoertically possible to write in Lean or should be written in a separate program but using Lean as a proof checker.</p>\n</blockquote>\n<p>That sounds like you should look at the polyrith tactic</p>",
        "id": 442052216,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717334419
    },
    {
        "content": "<p>This is all looks very powerful. It looks almost you can write a full computer algebra software in Lean. (Which is tempting to try and do just by giving Lean a more computer-algebra-type interface).</p>\n<p>I suppose my main concern is, is this necessarily the best thing to do? For example a computer algebra software like Mathematica may use lots of tricks and heuristics to factorise a large polynomial which are a black-box and not really important as long as it arrives at the right answer. But  once we get the answer, the rewrite rules are simple to calculate. </p>\n<p>Thus I want the power of a computer algebra system with the proof checking of Lean and somehow combine the two systems together.  </p>\n<p>So I'm basically thinking out-loud whether the best course of action is to re-write computer algebra rules in Lean, or write Lean into a computer algebra system for some subset of operations. Either way would generate Lean checkable code.</p>",
        "id": 442053439,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717335201
    },
    {
        "content": "<p>This is more or less what polyrith does. I'm really sorry that I can't explain more now (it's exam season over here), but go read this: <a href=\"https://hrmacbeth.github.io/computations_in_lean/02_Using_Polyrith.html\">https://hrmacbeth.github.io/computations_in_lean/02_Using_Polyrith.html</a></p>",
        "id": 442053617,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717335316
    },
    {
        "content": "<p>This is all possible to do and there are people in this community who have been thinking about such things for a while.</p>",
        "id": 442053622,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1717335318
    },
    {
        "content": "<p>Thanks, I will check this out. If this is the case, I may have a go at making a front-end to Lean that is more like a familiar computer-algebra system which can use these tactics for simplification. (Unless someone has already done this.)<br>\nIf it is like you say and can already do things like automatic factorisation of polynomials then this would be very useful for even high school students to use.<br>\nI think the other main thing a computer algebra system can do is reduce polynomials like the \"x^2 + a x + b\" to it's solutions. And also draw graphs of equations or geometric diagrams (but that is just extra fluff which is nice for humans to look at but which doesn't correspond to a proof).</p>",
        "id": 442054336,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717335718
    },
    {
        "content": "<p>The general idea would be a CAS to provide the factorization (say) and then use Lean to check that it is correct (which the <code>ring</code> tactic should be able to do). This approach should work reasonably well when there is a \"certificate\" available that can be checked reasonably efficiently (this is what <code>polyrith</code> does: an external Gröbner basis computation produces an explicit linear combination of relations, and the linear combination can be checked by the <code>linear_combination</code> tactic).</p>",
        "id": 442057034,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1717337460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"725689\">@Mr Proof</span> Have you heard of widgets? You could check out the string diagram generator that Yumo Mizuno made.</p>",
        "id": 442058001,
        "sender_full_name": "E. Dean Young",
        "timestamp": 1717338092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"725689\">Mr Proof</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Can.20automatic.20algebraic.20expansion.20be.20written.20in.20lean.204.3F/near/442054336\">said</a>:</p>\n<blockquote>\n<p>Thanks, I will check this out. If this is the case, I may have a go at making a front-end to Lean that is more like a familiar computer-algebra system which can use these tactics for simplification.</p>\n</blockquote>\n<p>Note that you wouldn't need to do this from to scratch even if there were no <code>polyrith</code>. The Sage CAS (<a href=\"http://sagemath.org\">sagemath.org</a>) should have code for this.</p>",
        "id": 442061231,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1717340309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Can.20automatic.20algebraic.20expansion.20be.20written.20in.20lean.204.3F/near/442057034\">said</a>:</p>\n<blockquote>\n<p><code>polyrith</code></p>\n</blockquote>\n<p>I see. So I see it calls an external python file to do some calculations outside lean. Interesting. So presumably I could also make a tactic that queries a CAS or some other software. That is interesting. I will have to research more about how the interface works.</p>",
        "id": 442077170,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717348413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"707242\">@Ralf Stephan</span> Thanks, I will check out Sage as well. Last time I used Sagemath, I found it quite bulky and only worked in a virtual environment on Windows but it's probably improved a lot since then. I usually use standalone wxMaxima for simple algebraic manipulation.  That gives me a few options to explore. </p>\n<p>So I'm thinking maybe create a widget that interfaces with maxima/sage that can for example factor an equation, and then exports that back into Lean together with the rewrite rules or polyrith. Or something like that. Probably not much of a time saver other than not having to change the format of the equations from Lean format to a CAS format.</p>\n<p>Mind you I don't want to reinvent the wheel so if this is already been done let me know!</p>",
        "id": 442084325,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717351793
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/master/scripts/polyrith_sage.py\">https://github.com/leanprover-community/mathlib4/blob/master/scripts/polyrith_sage.py</a></p>",
        "id": 442219532,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1717412442
    },
    {
        "content": "<p>If anyone would like to factor out that scripts into a pure sagecell wrapper, and separately the polyrith specific code, that would be very helpful for everyone interested in further sage connections.</p>",
        "id": 442408816,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717462728
    },
    {
        "content": "<p>AFIK Sage uses maxima for doing algebraic computations. Therefor it seems like, a nicer approach would just be to include all the maxima libraries within Lean so you wouldn't need a separate program. Maxima is &lt;50Mb so not very big.<br>\nYou can use maxima from the command-line like:</p>\n<p>maxima --very-quiet -r \"display2d:false$factor(x^2+2<em>x</em>y+y^2);quit();\"</p>",
        "id": 442678375,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717554515
    },
    {
        "content": "<p>That's a very big \"just\"!</p>",
        "id": 442684679,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717558185
    },
    {
        "content": "<p>Nah</p>",
        "id": 442687890,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717559912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"725689\">Mr Proof</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Can.20automatic.20algebraic.20expansion.20be.20written.20in.20lean.204.3F/near/442678375\">said</a>:</p>\n<blockquote>\n<p>AFIK Sage uses maxima for doing algebraic computations.</p>\n</blockquote>\n<p>That is no longer true for quite a while. As maintainer of Pynac I took part in decoupling Sage from Maxima, especially wrt algebraic manipulations. It would also simply be impossible to serve Sage cells to customers with a slow Maxima-based engine.</p>",
        "id": 442708656,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1717570569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"725689\">@Mr Proof</span>  here's another simple example of an automatic normal-form using <code>rw []</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- A category C consists of:</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u₀</span><span class=\"o\">,</span><span class=\"n\">v₀</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">Obj</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u₀</span>\n<span class=\"w\">  </span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Obj</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Obj</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">v₀</span>\n<span class=\"w\">  </span><span class=\"n\">Idn</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span>\n<span class=\"w\">  </span><span class=\"n\">Cmp</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Z</span>\n<span class=\"w\">  </span><span class=\"n\">Id₁</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span>\n<span class=\"w\">    </span><span class=\"n\">Cmp</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Idn</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"n\">Id₂</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span>\n<span class=\"w\">    </span><span class=\"n\">Cmp</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Idn</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"n\">Ass</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">Cmp</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Cmp</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Cmp</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Cmp</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">h</span>\n\n\n<span class=\"c1\">-- Notation for the identity map which infers the category:</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">identity_map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Idn</span><span class=\"w\"> </span><span class=\"n\">X</span>\n<span class=\"kn\">notation</span><span class=\"w\"> </span><span class=\"s2\">\"𝟙_(\"</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"s2\">\")\"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">identity_map</span><span class=\"w\"> </span><span class=\"n\">C</span>\n\n\n\n<span class=\"c1\">-- Notation for composition which infers the category and objects:</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">composition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Obj</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Obj</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Obj</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Cmp</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span>\n<span class=\"kn\">notation</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"s2\">\"∘_(\"</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"s2\">\")\"</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">composition</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span>\n\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Id₁</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Obj</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Obj</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">𝟙</span><span class=\"bp\">_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Id₂</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">f</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Id₂</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Obj</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"mi\">𝟙</span><span class=\"bp\">_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Id₁</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">f</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Ass</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Obj</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"o\">((</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Ass</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">macro</span><span class=\"w\"> </span><span class=\"s2\">\"cat\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">repeat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Id₁</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">repeat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Id₂</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">repeat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ass</span><span class=\"o\">]))</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"o\">}</span>\n<span class=\"w\">          </span><span class=\"o\">{</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Obj</span><span class=\"o\">}</span>\n<span class=\"w\">          </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Obj</span><span class=\"o\">}</span>\n<span class=\"w\">          </span><span class=\"o\">{</span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Obj</span><span class=\"o\">}</span>\n<span class=\"w\">          </span><span class=\"o\">{</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Obj</span><span class=\"o\">}</span>\n<span class=\"w\">          </span><span class=\"o\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"w\">          </span><span class=\"o\">{</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">}</span>\n<span class=\"w\">          </span><span class=\"o\">{</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">}</span>\n<span class=\"w\">          </span><span class=\"o\">{</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"o\">}:</span>\n<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">𝟙</span><span class=\"bp\">_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"mi\">𝟙</span><span class=\"bp\">_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">∘_</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">cat</span>\n</code></pre></div>",
        "id": 442909774,
        "sender_full_name": "E. Dean Young",
        "timestamp": 1717625851
    },
    {
        "content": "<p>In the above the `(tactic| ) combines tactics.</p>",
        "id": 442920568,
        "sender_full_name": "E. Dean Young",
        "timestamp": 1717628956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707242\">Ralf Stephan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Can.20automatic.20algebraic.20expansion.20be.20written.20in.20lean.204.3F/near/442708656\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"725689\">Mr Proof</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Can.20automatic.20algebraic.20expansion.20be.20written.20in.20lean.204.3F/near/442678375\">said</a>:</p>\n<blockquote>\n<p>AFIK Sage uses maxima for doing algebraic computations.</p>\n</blockquote>\n<p>That is no longer true for quite a while. As maintainer of Pynac I took part in decoupling Sage from Maxima, especially wrt algebraic manipulations. It would also simply be impossible to serve Sage cells to customers with a slow Maxima-based engine.</p>\n</blockquote>\n<p>Thanks for the info. Maxima slow though? I use wxmaxima a lot. And at least for basic algebraic manipulation I often find it faster than Mathematica. e.g. I can expand and factor $(x+y+z)^10$ almost instantaneously. Which seems good enough, if you need a tactic to factor something rather than the other way round. (Which maybe you never need to IDK). I'm sure Pynac is just as good though and probably makes more sense to use.</p>\n<p><span class=\"user-mention\" data-user-id=\"559197\">@Dean Young</span> Thanks. Now I'm wondering about how fast code written in Lean is. If it is purely interpreted or if it would use a JIT etc for extra speed.</p>",
        "id": 442933453,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717633927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"725689\">Mr Proof</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Can.20automatic.20algebraic.20expansion.20be.20written.20in.20lean.204.3F/near/442933453\">said</a>:</p>\n<blockquote>\n<p>Now I'm wondering about how fast code written in Lean is.</p>\n</blockquote>\n<p>Compiled code can be quite fast, if written correctly. But you must understand that Lean is doing things differently than a CAS, because it has to prove them. So, for example, using the <code>ring</code> tactic to should that <code>(x + y + z)  ^ 10</code> is equal to its expansion (which <code>ring</code> won't compute for you), is <em>much</em> slower than something that simply computes the expansion. This is because <code>ring</code> is generating a proof term on the fly, and a CAS is not burdened by such things.</p>\n<p>You could write very fast Lean code that computes polynomial expansions, but simultaneously producing a proof of correctness is much harder.</p>",
        "id": 442953650,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1717643342
    },
    {
        "content": "<p>I guess the way to proceed would be to</p>\n<ol>\n<li>write fast code that does some computation;</li>\n<li>provide a general proof of correctness of this code,</li>\n</ol>\n<p>which can then be used for the proof that any given computation is correct without constructing a separate specialized proof each time (which I think is what the <code>ring</code> tactic is doing).</p>",
        "id": 443001471,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1717662514
    },
    {
        "content": "<p>This is classic proof by reflection. Note that for this to work the \"fast code\" needs to be fast in the kernel --- merely fast in compiled code is not good enough, although <code>reduceBool</code> and <code>reduceNat</code> can (by adding the compiler to the trust base!) can get around this.</p>",
        "id": 443058193,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717680496
    },
    {
        "content": "<p>I suppose also compiling Lean down into some more efficient machine code means it is no longer a simple kernel so that can be trusted... although for day-to-day work that's probably fine. Then you would just use the slower kernel to check the proof at the end. Though it would be devastating if you thought you'd proved an amazing breakthrough proof and it turned out to just be a bug in the compiler and it wasn't proved at all!</p>",
        "id": 443154974,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717705763
    }
]