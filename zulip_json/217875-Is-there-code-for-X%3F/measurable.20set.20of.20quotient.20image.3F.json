[
    {
        "content": "<p>Do we have something like the measurability of the forward image of a quotient map? (Do I need some more assumptions perhaps?) We have <code>measurableSet_quotient</code> which deals with preimages...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Group.Action</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"π\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Countable</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSMul</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">''</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 417972298,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1706134105
    },
    {
        "content": "<p>I don't know wether we have it, but here is a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Group.Action</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Group.Pointwise</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"π\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Countable</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSMul</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">''</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">G</span> <span class=\"n\">α</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">measurableSet_quotient</span><span class=\"o\">,</span> <span class=\"n\">Quotient.mk''_eq_mk</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Quotient.mk'_eq_mk</span><span class=\"o\">,</span>\n      <span class=\"n\">MulAction.quotient_preimage_image_eq_union_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">iUnion</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">↦</span> <span class=\"n\">hS.const_smul</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 417975350,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706135556
    },
    {
        "content": "<p>Ah thanks, so I should be doing all these conversions between <code>Quotient.mk</code>, <code>Quotient.mk'</code>, and <code>Quotient.mk''</code>... May I ask why we have the three...?</p>",
        "id": 417999775,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1706151065
    },
    {
        "content": "<p>Because nobody cleaned it up after migration.</p>",
        "id": 418005091,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706155200
    },
    {
        "content": "<p>I started looking at removing one of them but got distracted. I may try to find the code later</p>",
        "id": 418017582,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706165020
    }
]