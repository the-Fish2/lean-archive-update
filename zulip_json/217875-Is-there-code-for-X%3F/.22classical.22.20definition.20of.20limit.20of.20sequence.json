[
    {
        "content": "<p>I usually do limits in the traditional sense (formalising my own \"for all epsilon exists N\" definition) when teaching 1st years. But in my course I'm working with PhD students so I don't see why I can't do the proper filter approach for a change (in fact I will probably do both). So I need the bridge. Presumably we have the following (I made no attempt to golf because I am expecting people to tell me a bunch of tricks I'm missing):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`|`</span> <span class=\"n\">x</span> <span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">definition</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚àÄ</span> <span class=\"n\">Œµ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"c1\">-- do we have this in some form?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_limit_iff_tendsto</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">tendsto</span> <span class=\"n\">a</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">X</span> <span class=\"n\">hX</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_nhds_iff_exists_Ioo_subset</span> <span class=\"n\">at</span> <span class=\"n\">hX</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hX</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">hxl</span><span class=\"o\">,</span> <span class=\"n\">hly</span><span class=\"o\">‚ü©,</span> <span class=\"n\">h2</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">set</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hŒµ</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hŒµ_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"n\">lt_min</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">Œµ</span> <span class=\"n\">hŒµ_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_map</span><span class=\"o\">,</span> <span class=\"n\">mem_at_top_sets</span><span class=\"o\">],</span>\n    <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hN</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">abs_lt</span> <span class=\"n\">at</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hŒµ1</span> <span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">min_le_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hŒµ2</span> <span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">min_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">Œµ</span> <span class=\"n\">hŒµ</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">tendsto_nhds</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">set.Ioo</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">Œµ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">is_open_Ioo</span><span class=\"o\">)</span> <span class=\"o\">‚ü®</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_at_top_sets</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hN</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">abs_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224420519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611883693
    },
    {
        "content": "<p>Then all my 20 line proofs turn into things like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_limit</span> <span class=\"n\">b</span> <span class=\"n\">m</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_limit_iff_tendsto</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto.add</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_limit</span> <span class=\"n\">b</span> <span class=\"n\">m</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_limit_iff_tendsto</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto.mul</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224420784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611883961
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.tendsto_at_top\">docs#metric.tendsto_at_top</a></p>",
        "id": 224421095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611884247
    },
    {
        "content": "<p>gaargh there was more than one <code>tendsto_at_top</code> and I didn't scroll down far enough! Thanks!</p>",
        "id": 224421823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611884901
    },
    {
        "content": "<p>the topology ones were all referring to <code>at_top</code> on the target, and the metric one has it on the source.</p>",
        "id": 224421976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611885035
    },
    {
        "content": "<p>As a person who never bothered to learn about filters, how do I use <code>metric.tendsto_at_top</code> to state that the limit of sequence <code>a : \\N \\to \\R</code> is <code>A</code>? Is it <code>filter.tendsto a filter.at_top (nhds A)</code>?</p>\n<p>Is there an abbreviation of this? It would be great to write <code>\\lim a A</code> instead</p>",
        "id": 423480248,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1708980243
    },
    {
        "content": "<p>This message makes me so nostalgic. It reminds me of my foolish youth. We even had such an abbreviation is Mathlib at some point. But of course it was only making everything obscure.</p>",
        "id": 423480742,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708980465
    },
    {
        "content": "<p>Patrick never bothered to learn about limits, he only thinks in terms of filters</p>",
        "id": 423480872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708980506
    },
    {
        "content": "<p>So we happily learned about filters and removed the abbreviation and lived happily ever after.</p>",
        "id": 423480895,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708980519
    },
    {
        "content": "<p>Kevin is rewriting history here. In 2017 I knew nothing about filters and complained to Mario and Johannes that I wanted my Œµ's back.</p>",
        "id": 423481041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708980598
    },
    {
        "content": "<p>Then I became enlightened and started proselytism.</p>",
        "id": 423481160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708980635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span> If you write <code>open Filter</code> then you can write <code>atTop.Tendsto (nhds A)</code>, which is a bit shorter.</p>",
        "id": 423483643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708981687
    },
    {
        "content": "<p>And you can also use notation for <code>nhds</code>, if you want.</p>",
        "id": 423483673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708981705
    },
    {
        "content": "<p>I don't know if making users learn advanced math (filters) in order to state a theorem one encounters in a first calculus class is proselytism. Feels more like gatekeeping, no?</p>",
        "id": 423484165,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1708981932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.22classical.22.20definition.20of.20limit.20of.20sequence/near/423480895\">said</a>:</p>\n<blockquote>\n<p>So we happily learned about filters and removed the abbreviation and lived happily ever after.</p>\n</blockquote>\n<p>Do you mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lim#doc\">docs#lim</a> ? Or am I misunderstanding what abbreviation you are talking about ?</p>",
        "id": 423484326,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708982025
    },
    {
        "content": "<p>I am not claiming to understand why having such an abbreviation is good/bad idea. I'm just saying that as a PhD student trying to learn Lean and teach it to some undergrads, I always feel an internal wave of fear when a theorem involves a limit</p>",
        "id": 423484328,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1708982026
    },
    {
        "content": "<p>In theory, the library should allow you to treat <code>Tendsto a atTop (nhds A)</code> as just \"notation\" (a bit longer than expected, granted) for the epsilon delta definition. Then in practice it turns out we use filters so much that sometimes we forget to state the common epsilon versions, but you can absolutely complain about that here.</p>",
        "id": 423484822,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708982241
    },
    {
        "content": "<p><code>Tendsto a atTop (nhds A)</code> is much scarier that <code>lim a A</code> if one does not know what filters are (me). And when one tries to use this definition, the first line will always be <code>rw metric.tendsto_at_top</code> to translate it back to the classic language</p>",
        "id": 423485357,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1708982461
    },
    {
        "content": "<p>I mean, for some reason in a math curriculum we teach people metric topology first, and point-set topology much later. For the same reason one would prefer to have the classical definition of the limit</p>",
        "id": 423485597,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1708982556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.22classical.22.20definition.20of.20limit.20of.20sequence/near/423485357\">said</a>:</p>\n<blockquote>\n<p><code>Tendsto a atTop (nhds A)</code> is much scarier that <code>lim a A</code> if one does not know what filters are (me). And when one tries to use this definition, the first line will always be <code>rw metric.tendsto_at_top</code> to translate it back to the classic language</p>\n</blockquote>\n<p>Sure, but my point is that it only <em>looks</em> scarier, because the library should allow you to treat it like you treat the basic notion. In the same way, it sounds scary to undergraduates to talk about modules instead of vector spaces, but once that initial annoyance comes up one I don‚Äôt think it‚Äôs that big of a deal ?</p>",
        "id": 423486131,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708982783
    },
    {
        "content": "<p>That's a good comparison. I think it would be great to have a vector space in mathlib! It would make it more accessible to undergrads. I'd say the difference is that I can define a module in one sentence: \"a module is like a vector space but instead of a field, it's over a ring, meaning there is no division\". This is not that big of a gap to breach.</p>",
        "id": 423486502,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1708982934
    },
    {
        "content": "<p>AFAIK, it's universally accepted that the Bourbaki approach is bad for math education. Not having a distinct limit of a sequence in the classical sense is exactly the Bourbaki approach, I'd say</p>",
        "id": 423486789,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1708983038
    },
    {
        "content": "<p>Also, IMHO it‚Äôs not super hard to make sense of each part of that <code>Tendsto</code> statement: if you just see a filter as \"a way to converge\", then this statement is precisely saying \"as you converge to infinity on the domain, your image under the function converges to <code>A</code>\". I agree that it‚Äôs not super natural if you‚Äôre not used to it, but that‚Äôs a good explanation to give if someone asks for it</p>",
        "id": 423486798,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708983041
    },
    {
        "content": "<p>Vasily, where did you get the idea that Mathlib is a teaching library?</p>",
        "id": 423486925,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708983117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.22classical.22.20definition.20of.20limit.20of.20sequence/near/423486789\">said</a>:</p>\n<blockquote>\n<p>AFAIK, it's universally accepted that the Bourbaki approach is bad for math education. Not having a distinct limit of a sequence in the classical sense is exactly the Bourbaki approach, I'd say</p>\n</blockquote>\n<p>AFAIK the Bourbaki approach is quite good for formalization (both on paper and on a computer) though, and this is precisely why we are using it</p>",
        "id": 423486972,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708983124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.22classical.22.20definition.20of.20limit.20of.20sequence/near/423484326\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.22classical.22.20definition.20of.20limit.20of.20sequence/near/423480895\">said</a>:</p>\n<blockquote>\n<p>So we happily learned about filters and removed the abbreviation and lived happily ever after.</p>\n</blockquote>\n<p>Do you mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lim#doc\">docs#lim</a> ? Or am I misunderstanding what abbreviation you are talking about ?</p>\n</blockquote>\n<p>No I think you are too young to have known this. It was literally a notation for a Tendsto statement.</p>",
        "id": 423487100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708983183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.22classical.22.20definition.20of.20limit.20of.20sequence/near/423486925\">said</a>:</p>\n<blockquote>\n<p>Vasily, where did you get the idea that Mathlib is a teaching library?</p>\n</blockquote>\n<p>That's a fair point. I think it de-facto is. When I don't know how to do something in Lean my steps are:</p>\n<ol>\n<li><code>simp</code></li>\n<li>Moogle</li>\n<li>Index of mathlib</li>\n<li>Ask on Zulip.</li>\n</ol>\n<p>Am I missing a step?</p>",
        "id": 423487115,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1708983197
    },
    {
        "content": "<p>That is to say, most Lean I know comes from mathlib. The only exception are tutorials like MIL. But those are very limited in scope</p>",
        "id": 423487352,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1708983282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.22classical.22.20definition.20of.20limit.20of.20sequence/near/423485357\">said</a>:</p>\n<blockquote>\n<p>And when one tries to use this definition, the first line will always be <code>rw metric.tendsto_at_top</code> to translate it back to the classic language</p>\n</blockquote>\n<p>Only when <em>you</em> use it. For most people using Mathlib this <code>rw</code> is the very last thing to try.</p>",
        "id": 423487358,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708983286
    },
    {
        "content": "<p>This is clearly not the first time this comes up. I understand how to do the thing I wanted to do, so I am happy now. <br>\nI am sure that in several years an undergrad won't have to learn measure theory to do basic probability and point-set topology to do calculus but for now Lean is still young :)</p>",
        "id": 423487961,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1708983498
    },
    {
        "content": "<p>Vasily, I think that if you want to achieve this goal then the best way is to write your own course notes - there's plenty of good examples around, I think there's a page with a link to many. Mathlib is not designed for teaching at all. There's a very good reason to not have a strictly weaker definition lying around in terms of library design</p>",
        "id": 423506752,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708992225
    },
    {
        "content": "<p>I am far from being able to write my own notes for teaching Lean. I am only learning it myself :)</p>",
        "id": 423531286,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1709008301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.22classical.22.20definition.20of.20limit.20of.20sequence/near/423487100\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.22classical.22.20definition.20of.20limit.20of.20sequence/near/423484326\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.22classical.22.20definition.20of.20limit.20of.20sequence/near/423480895\">said</a>:</p>\n<blockquote>\n<p>So we happily learned about filters and removed the abbreviation and lived happily ever after.</p>\n</blockquote>\n<p>Do you mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lim#doc\">docs#lim</a> ? Or am I misunderstanding what abbreviation you are talking about ?</p>\n</blockquote>\n<p>No I think you are too young to have known this. It was literally a notation for a Tendsto statement.</p>\n</blockquote>\n<p>I removed this notation in <a href=\"https://github.com/leanprover-community/mathlib/pull/15696\">mathlib#15696</a> less than 2 years ago!</p>",
        "id": 423539580,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709014729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span> Suppose that you want to add a definition of the limit of a sequence. Then you need to</p>\n<ul>\n<li>decide what to do with sequences that don't converge</li>\n<li>decide what to do with sequences that converge to <code>+‚àû</code> or to <code>-‚àû</code></li>\n<li>decide what to do with sequences like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>‚àí</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(-1)^n n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">‚àí</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span></span></span></span></li>\n<li>prove basic arithmetic lemmas (adding <code>ConvergentSeq f</code> here and there)</li>\n<li>prove theorem(s) about composition</li>\n<li>probably, more</li>\n</ul>\n<p>Now you want to deal with the limit of a function as <code>x ‚Üí a</code> or <code>x ‚Üí a+0</code> or <code>x ‚Üí +‚àû</code> or <code>|x| ‚Üí +‚àû</code>; in each case you're back to square 1.</p>",
        "id": 423540185,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709015070
    },
    {
        "content": "<p>So, you figured out some way to deal with all this without introducing filters. Now you're trying to define Riemann integral. You need to take the limit as the diameter of a tagged partition tends to zero. Unless you use filters, you need to repeat whatever theory of limits, Cauchy sequences etc you had once more.</p>",
        "id": 423540634,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709015328
    },
    {
        "content": "<p>I guess, Patrick wrote it all much better in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>.</p>",
        "id": 423540813,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709015456
    },
    {
        "content": "<p>tl;dr if you want to have sequences and limits for education, then the best way is to define it in your file that imports <code>Mathlib</code>.</p>",
        "id": 423540952,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709015537
    },
    {
        "content": "<p>You can reuse theory about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto#doc\">docs#Filter.Tendsto</a> and/or much smaller theory of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.limUnder#doc\">docs#Filter.limUnder</a> under the hood but most (all?) of your code won't be accepted to Mathlib.</p>",
        "id": 423541014,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709015607
    },
    {
        "content": "<p>I have thought it would be nice to have some notation for filters. Something like <code>f‚∏®ùìù x‚∏©</code> for <code>(ùìù x).map f</code>. <code>f‚∏®ùìù x‚∏© ‚â§ ùìù y</code> looks quite reasonable. Perhaps even <code>Tendsto f (ùìù x) (ùìù y)</code> could be written <code>f‚∏®ùìù x‚∏© ‚Ü¶ ùìù y</code>.</p>",
        "id": 423613402,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1709042911
    },
    {
        "content": "<p>I don‚Äôt think we are in desperate need of notations here, <code>map f F</code> is quite readable in my opinion (probably more than <code>F.map f</code> by the way, this is one of the rare times where we don‚Äôt encourage dot notation). On paper we would use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mo>‚àó</mo></msub></mrow><annotation encoding=\"application/x-tex\">f_*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1757em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">‚àó</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> for <code>map f</code> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mo>‚àó</mo></msup></mrow><annotation encoding=\"application/x-tex\">f^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">‚àó</span></span></span></span></span></span></span></span></span></span></span> for <code>comap f</code>, so I think if we want a notation it would be nice to have it look like this.</p>",
        "id": 423621132,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709044793
    },
    {
        "content": "<p><code>f‚∏®ùìù x‚∏© ‚Ü¶ ùìù y</code> is really bad, it is meant to be <code>f‚∏®ùìù x‚∏© ‚â§ ùìù y</code></p>",
        "id": 423623166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709045332
    },
    {
        "content": "<p>And I fully agree with Anatole about <code>F.map f</code>.</p>",
        "id": 423623287,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709045361
    },
    {
        "content": "<p>I've started a publically editable sheet for Lean spellings of various math concepts at <a href=\"https://docs.google.com/spreadsheets/d/1ap8ByJDvXw9c1G629UxRRoag3gTcMpPsRpm3_yCINyo/edit#gid=0\">https://docs.google.com/spreadsheets/d/1ap8ByJDvXw9c1G629UxRRoag3gTcMpPsRpm3_yCINyo/edit#gid=0</a> , and just added limits as another example of a math concept that doesn't have an obvious spelling.  Further contributions welcome!</p>",
        "id": 423648796,
        "sender_full_name": "Terence Tao",
        "timestamp": 1709051171
    },
    {
        "content": "<p>This is very nice. As there are multiple spellings for certain statements, and Mathlib prefers certain spellings over others (e.g. that's what <code>simp</code> does, if I understand correctly), is there a way to indicate which spelling is the preferred one?... For example, I don't recall which of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsum</span><span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span><span class=\"o\">:</span> <span class=\"bp\">‚àë'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">HasSum</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is preferred (I'm guessing the latter?...).</p>",
        "id": 423683411,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709062954
    },
    {
        "content": "<p>As I learned recently, if things are spelled in the preferred way, then there's a better chance that a tactic like <code>exact?</code> will find the appropriate theorem...</p>",
        "id": 423683608,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709063033
    },
    {
        "content": "<p>The latter is indeed preferred</p>",
        "id": 423686735,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709064235
    },
    {
        "content": "<p>I guess for now I'll just swap the order of the spellings, and try to be consistent about having the most preferred spelling first when there are multiple options.  (Longer term, I'd like this list to migrate to something less janky than a Google Sheet... if there are any suggestions for a suitable platform for this list, I'd be happy to hear them.)</p>",
        "id": 423729831,
        "sender_full_name": "Terence Tao",
        "timestamp": 1709083402
    },
    {
        "content": "<p>Markdown file in a github repo?</p>",
        "id": 423734515,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709086982
    },
    {
        "content": "<p>Its off-topic, but I am definitely reluctant to type things in google-docs (I don't want to help training AI), and github repositories might pose the same problem. Could the FRO host a git infrastructure for mathlib?</p>",
        "id": 423768967,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709109229
    },
    {
        "content": "<p>If you want a private git server, you can use a self-hosted instance of <a href=\"https://about.gitea.com/\">gitea</a>. I've done so for years (since before GitHub allowed free private repos) for my personal use and that of my coauthors.</p>",
        "id": 423820678,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709127909
    }
]