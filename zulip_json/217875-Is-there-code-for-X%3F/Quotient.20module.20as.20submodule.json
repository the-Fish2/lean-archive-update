[
    {
        "content": "<p>I'm trying to write a helper lemma that says something like <code>(V / p \\times p) \\equiv\\_l[K] V</code>. Right now there is <code>prodEquivOfIsCompl</code>, which requires two compl submodules. Is there a canonical way to treat <code>V / p</code> as a submodule of <code>V</code>?</p>",
        "id": 425076338,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1709728768
    },
    {
        "content": "<p>Is K a field?</p>",
        "id": 425077366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709729097
    },
    {
        "content": "<p>Yeah, and<code>Module K V</code> so I'm working in vector spaces/subspaces</p>",
        "id": 425077450,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1709729121
    },
    {
        "content": "<p>By the way there is definitely no <em>canonical</em> way to treat V/p as a submodule of V :-)</p>",
        "id": 425077490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709729132
    },
    {
        "content": "<p>I guess canonical is the wrong word, I more mean is there a way for V/p to be treated as a submodule of V</p>",
        "id": 425077707,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1709729179
    },
    {
        "content": "<p>I know there's <code>quotientEquivOfIsCompl</code> but that requires me to produce a submodule <code>q</code> such that <code>IsCompl p q</code></p>",
        "id": 425077906,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1709729240
    },
    {
        "content": "<p>there should be a lemma saying that any surjective linear map over a field splits.</p>",
        "id": 425078050,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1709729279
    },
    {
        "content": "<p>When I needed that property, I used <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/Projective.html#Module.projective_lifting_property\">Module.projective_lifting_property</a>. Normally modules over a field will have a <code>Module.Projective</code> instance on them so it will work.</p>",
        "id": 425078866,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1709729535
    },
    {
        "content": "<p>I keep getting the <code>tactic 'cases' failed, nested error:\ntactic 'induction' failed, recursor 'Exists.casesOn' can only eliminate into Prop</code> <br>\nerror when I try to use <code>projective_lifting_property</code> - is this something you usually encounter? I can post an MWE if that helps</p>",
        "id": 425640432,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1709955708
    },
    {
        "content": "<p>What’s the goal?</p>",
        "id": 425640749,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1709955848
    },
    {
        "content": "<p>Worst case scenario you can use choice</p>",
        "id": 425640773,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1709955866
    },
    {
        "content": "<p>I'm just trying to show the equivalence <code>{W : Submodule K V | FiniteDimensional.finrank K W = k} ≃\n  {W : Submodule K ((V ⧸ (K ∙ a)) × (K ∙ a)) | FiniteDimensional.finrank K W = k}</code></p>",
        "id": 425640817,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1709955890
    },
    {
        "content": "<p>Which isn't quite what I need for what I'm doing but I thought it would be a useful helper lemma</p>",
        "id": 425640921,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1709955948
    },
    {
        "content": "<p>If you're trying to construct something like your equivalence, as opposed to just proving a statement, by eliminating an existential quantifier (that means that you have a statement like <code>∃ x, p x</code> and you apply a tactic like <code>obtain</code> or <code>let</code> to define a <code>x</code> satisfying <code>p</code>), then Lean will complain. The way around this is to use <code>Classical.choose</code>, as Adam said.<br>\nFor example, in your case, you can obtain the linear equivalence between <code>V</code> and <code>(V ⧸ span K {a}) ×  span K {a}</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Projective</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">truc</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">⧸</span> <span class=\"n\">span</span> <span class=\"n\">K</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"bp\">×</span>  <span class=\"n\">span</span> <span class=\"n\">K</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Classical.choice</span> <span class=\"o\">(</span><span class=\"n\">quotient_prod_linearEquiv</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">K</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">})))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>Note that Lean forced me to mark the definition as <code>noncomputable</code>, because it is not constructive. </p>\n<p>Once you have the linear equivalence you can define the equivalence on submodules easily by hand, but maybe mathlib already has something like that, I am not sure.</p>",
        "id": 425668328,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1709974071
    },
    {
        "content": "<p>I guess what I'm confused about is, shouldn't the submodule <code>q</code> such that <code>isCompl p q</code> be unique when the ambient space is a vector space? Maybe I'm just really rusty on my linear algebra.</p>",
        "id": 425725178,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1710025143
    },
    {
        "content": "<p>it's not unique.</p>",
        "id": 425725200,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710025178
    },
    {
        "content": "<p>A subspace can have many complements.</p>",
        "id": 425725208,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710025192
    },
    {
        "content": "<p>For example, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_0,y_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is any point in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> a field) with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">y_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is nonzero, then the span of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_0,y_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is a complement for the span of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1,0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 425725358,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710025309
    },
    {
        "content": "<p>Ah, I think I was thinking of orthogonal space</p>",
        "id": 425740903,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1710043128
    },
    {
        "content": "<p>I guess, stepping back, what I'm trying to prove is a recurrence relation between the number of k-dimensional subspaces of a finite-dimensional vector space <code>V</code> over a finite field, and k- and (k-1)-dimensional subspaces of <code>V / p</code> where <code>p</code> is some one-dimensional subspace</p>",
        "id": 425741255,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1710043390
    },
    {
        "content": "<p>The noncomputable definitions we have show that there is some equivalence between <code>V / p \\times p</code> and <code>V</code>, but what I think I need is the specific equivalence that uses projections of <code>V</code> to <code>V / p</code> and <code>p</code></p>",
        "id": 425741378,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1710043516
    },
    {
        "content": "<p>In general there is no \"projection from V to p\"</p>",
        "id": 425743890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710046478
    },
    {
        "content": "<p>Also, I don't understand why you need to have a specific form for the equivalence. Once you know that <code>V</code> and <code>V/p x p</code> are linearly equivalent, you also know that they have the same number of <code>k</code>-dimensional subspaces, so you can start counting <code>k</code>-dimensional subspaces of <code>V/p x p</code> directly.</p>",
        "id": 425753718,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710057406
    },
    {
        "content": "<p>So I might be misunderstanding, but the recurrence I'm trying to prove fixes a projection <code>f</code> of <code>V</code> with nullspace <code>p</code> of dimension 1, and that projection is what gives us the equivalence relation</p>",
        "id": 425984670,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1710181706
    },
    {
        "content": "<p>I'm trying to follow the last paragraph of <a href=\"https://en.wikipedia.org/wiki/Gaussian_binomial_coefficient#Analogs_of_Pascal's_identity\">https://en.wikipedia.org/wiki/Gaussian_binomial_coefficient#Analogs_of_Pascal's_identity</a></p>",
        "id": 425985602,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1710182057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Quotient.20module.20as.20submodule/near/425753718\">said</a>:</p>\n<blockquote>\n<p>Also, I don't understand why you need to have a specific form for the equivalence. Once you know that <code>V</code> and <code>V/p x p</code> are linearly equivalent, you also know that they have the same number of <code>k</code>-dimensional subspaces, so you can start counting <code>k</code>-dimensional subspaces of <code>V/p x p</code> directly.</p>\n</blockquote>\n<p>I think I need the specific equivalence because I'll have to break it down into the maps from <code>V</code> to <code>V/p</code> and <code>V</code> to <code>p</code> in order to prove the recurrence I want</p>",
        "id": 425990016,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1710183664
    },
    {
        "content": "<p>If we let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mi>n</mi><mi>k</mi></mfrac><mo fence=\"true\">)</mo></mrow><mi>q</mi></msub></mrow><annotation encoding=\"application/x-tex\">{n \\choose k}_q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3858em;vertical-align:-0.5358em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7454em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:-0.0983em;\"><span style=\"top:-2.3003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5358em;\"><span></span></span></span></span></span></span></span></span></span> denote the number of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-dimensional subspaces of an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-dimensional vector space over field of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> is a prime power, then we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mi>n</mi><mi>k</mi></mfrac><mo fence=\"true\">)</mo></mrow><mi>q</mi></msub><mo>=</mo><msup><mi>q</mi><mi>k</mi></msup><msub><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mi>k</mi></mfrac><mo fence=\"true\">)</mo></mrow><mi>q</mi></msub><mo>+</mo><msub><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo fence=\"true\">)</mo></mrow><mi>q</mi></msub></mrow><annotation encoding=\"application/x-tex\">{n \\choose k}_q = q^k{n - 1 \\choose k}_q + {n - 1 \\choose k - 1}_q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3858em;vertical-align:-0.5358em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7454em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:-0.0983em;\"><span style=\"top:-2.3003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4309em;vertical-align:-0.5358em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:-0.0983em;\"><span style=\"top:-2.3003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4842em;vertical-align:-0.5891em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:-0.1516em;\"><span style=\"top:-2.247em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5891em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 425990293,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1710183765
    },
    {
        "content": "<p>and the way I want to go about proving it, per the wikipedia article, is fixing a one-dimensional subspace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> and an equivalence between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi><mo>×</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">V / p \\times p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, and then considering the case where every element of a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-dim subspace of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi><mo>×</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">V / p \\times p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> is of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x, 0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> which corresponds to the first part of the term, and the other case corresponds to the second part of the term</p>",
        "id": 425990727,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1710183910
    },
    {
        "content": "<p>What I am saying is that once you know that <code>V</code> and <code>V/p x p</code> are equivalent, you can just assume that <code>V</code> is equal to <code>V/p x p</code> (because equivalent vector spaces will have the same number of <code>k</code>-dimensional subspaces). For <code>V/p x p</code>, you know what the maps to <code>V/p</code> and <code>p</code> are, they are just the two projections.</p>",
        "id": 426054136,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710219301
    },
    {
        "content": "<p>So I've been working on this and I think I'm doing it poorly - this definition that I have is really tedious to prove and I assume there's probably a better way of setting it up. Does anyone have any suggestions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">succDimSubspaces_equivDimSubspaces</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"o\">((</span><span class=\"n\">V</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">∙</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">∙</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">|</span> <span class=\"n\">FiniteDimensional.finrank</span> <span class=\"n\">K</span> <span class=\"n\">W</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mem_span_singleton_self</span> <span class=\"n\">a</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">∈</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"bp\">≃</span>\n  <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"o\">((</span><span class=\"n\">V</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">∙</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">∙</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"n\">FiniteDimensional.finrank</span> <span class=\"n\">K</span> <span class=\"n\">W</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 429705613,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1711474235
    },
    {
        "content": "<p>This looks to me like it has nothing to do with quotients or submodules, V/&lt;a&gt; may as well be X and Ka may as well be Y. The dimension criterion is also artificial, you could remove it and then add it in again later. Why not prove that subspaces of X x Y containing 0 + Y biject with subspaces of X x Y having trivial intersection with Y first? The constructions each way are project onto X then inject, and project onto X and then cross with top. You can establish this bijection first and then refine it to the one you want by putting things like dimension conditions later on.</p>",
        "id": 429760983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711499413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Quotient.20module.20as.20submodule/near/429760983\">said</a>:</p>\n<blockquote>\n<p>This looks to me like it has nothing to do with quotients or submodules, V/&lt;a&gt; may as well be X and Ka may as well be Y. The dimension criterion is also artificial, you could remove it and then add it in again later. Why not prove that subspaces of X x Y containing 0 + Y biject with subspaces of X x Y having trivial intersection with Y first? The constructions each way are project onto X then inject, and project onto X and then cross with top. You can establish this bijection first and then refine it to the one you want by putting things like dimension conditions later on.</p>\n</blockquote>\n<p>So something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subspacesBijection</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">Submodule.map</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.inr</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">⊤</span> <span class=\"bp\">≤</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"bp\">≃</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">Submodule.map</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.inr</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"o\">}</span> <span class=\"n\">where</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 429920882,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1711563524
    },
    {
        "content": "<p>Yeah except I misspoke -- <code>Disjoint</code> isn't strong enough, you want \"every element has W component 0\"</p>",
        "id": 429925605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711565300
    },
    {
        "content": "<p>Isn't saying the top of W mapped into the vector space is disjoint from X the same thing?</p>",
        "id": 429925800,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1711565368
    },
    {
        "content": "<p>Like it's saying the image of all of W mapped into V \\times W is disjoint from X</p>",
        "id": 429925943,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1711565408
    },
    {
        "content": "<p>Actually wait - changing it to <code>∀ x ∈ X, x.2 = 0</code> makes it so much easier, simp just closed the first goal instantly</p>",
        "id": 429926148,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1711565487
    },
    {
        "content": "<p>It's been a little while since I've worked on this but I'm trying to wrap this up - the last part I'm stuck on is the other bijection, where the submodules don't have <code>Submodule.map (LinearMap.inr K V W) ⊤</code> as a submodule. In this case it's not a direct equivalence, and we have to keep track of linear maps from each submodule <code>X</code> to <code>W</code> (in order to \"reconstruct\" the submodules from their images). At first I thought using dependent products made the most sense, i.e. mapping into something like <code>{(X : Submodule K (V × W), \\phi)| Disjoint (Submodule.map (LinearMap.inr K V W) ⊤) X }</code> where we have that <code>\\phi</code> is a linear map from <code>X</code> to <code>W</code> or something, but that really doesn't work. Does anyone have any idea what type I can use for this? I'm trying to have a set of tuples like <code>(X, \\phi : X \\rightarrow W)</code>.</p>",
        "id": 435273243,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1713993081
    },
    {
        "content": "<p>I wonder if instead of defining the linear maps as being from <code>V \\times W</code> to <code>W</code> with some additional condition on the image of <code>X</code> would help? The problem is I don't need to count maps from <code>V \\times W</code> to <code>W</code> and I can't figure out what condition I need exactly</p>",
        "id": 435273711,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1713993280
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subspacesBijection2</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">Submodule.map</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.inr</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">⊤</span> <span class=\"bp\">≤</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"bp\">≃</span>\n  <span class=\"o\">{((</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>This doesn't typecheck cause I can't figure out how I need to write it but maybe something like this</p>",
        "id": 435274546,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1713993637
    },
    {
        "content": "<p>Just to note that <code>Submodule.map (LinearMap.inr K V W) ⊤</code> is better-spelt <code>LinearMap.range (.inr K V W)</code></p>",
        "id": 435276120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713994359
    },
    {
        "content": "<p>Can you add imports / variables to that code snippet above so that it _almost_ typechecks?</p>",
        "id": 435276327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713994459
    },
    {
        "content": "<p>Should be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.BigOperators</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Submodule.LinearMap</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Submodule.Map</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Prod</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subspacesBijection2</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">Submodule.map</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.inr</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">⊤</span> <span class=\"bp\">≤</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"bp\">≃</span>\n  <span class=\"o\">{((</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">W</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 435276630,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1713994621
    },
    {
        "content": "<p>er sorry, missing some stuff</p>",
        "id": 435277182,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1713994924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> updated</p>",
        "id": 435278467,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1713995590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Quotient.20module.20as.20submodule/near/435276327\">said</a>:</p>\n<blockquote>\n<p>Can you add imports / variables to that code snippet above so that it _almost_ typechecks?</p>\n</blockquote>\n<p>Hi, the latest code snippet should be an mwe where it almost typechecks</p>",
        "id": 436900229,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1714747862
    }
]