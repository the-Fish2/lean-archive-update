[
    {
        "content": "<p>i'd like to create a definition of a code. i'd like to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Submodule.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Submodule</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Code</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Code</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Subspace</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span> <span class=\"n\">Code</span>\n</code></pre></div>\n<p>however, it complains that it cannot generate <code>DivisionRing K</code>.<br>\naccording to the docs, a Field is a CommRing with inverses for nonzero elements, while a DivisionRing is a Ring with inverses for nonzero elements... Surely this should be cast automatically? or am i missing something here?</p>",
        "id": 419857124,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707144808
    },
    {
        "content": "<p>it gets weirder even....<br>\neven if i replace <code>[Field K]</code> with <code>[DivisionRing K]</code> it says it can't synthesise the instance?</p>",
        "id": 419859027,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707145224
    },
    {
        "content": "<p>Try adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>after your imports and see if that helps explain what's heppening</p>",
        "id": 419859556,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707145327
    },
    {
        "content": "<p>it says <code>unknown identifier K</code>... i'm guessing that means i should put the <code>(K:Type)</code> argument first? i thought it would be able to infer it from later parameters?</p>",
        "id": 419860432,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707145565
    },
    {
        "content": "<p>or is that exactly what i've turned off...</p>",
        "id": 419860591,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707145607
    },
    {
        "content": "<p>No, what's happening in your code is that lean invents an implicit <code>K</code> when you first use it, and then you introduce a second, explicit K which is different from the first one, and in particular this second K isn't a field</p>",
        "id": 419861676,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707145909
    },
    {
        "content": "<p>i expected that just like when you write something like <code>{α :Type } (x:α)</code> it would infer it...</p>",
        "id": 419862015,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707145991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as resolved.</p>",
        "id": 419862891,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707146194
    }
]