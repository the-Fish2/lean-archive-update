[
    {
        "content": "<p>I can't seem to find something like this, breaking a sum on <code>ℕ</code> into the first few terms plus the rest? Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_eq_partial_add_tail</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n   <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Icc</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 431515764,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712320894
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=sum_add_tsum_nat_add#doc\">docs#sum_add_tsum_nat_add</a></p>",
        "id": 431515884,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712320926
    },
    {
        "content": "<p>Argh! Why doesn't <code>exact?</code> find it...? :( Thanks!!</p>",
        "id": 431516101,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712321001
    },
    {
        "content": "<p>because it's stated using <code>Finset.range</code>, not <code>Finset.Icc</code></p>",
        "id": 431516205,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712321036
    },
    {
        "content": "<p>Note that your version is wrong for <code>N = 0</code>...</p>",
        "id": 431516355,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712321076
    },
    {
        "content": "<p>Argh. I see, so <code>Finset.range N</code> is not the same thing as <code>Finset.Icc 0 (N-1)</code> when <code>N=0</code>...</p>",
        "id": 431517067,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712321317
    },
    {
        "content": "<p>That's why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.range_eq_Ico#doc\">docs#Finset.range_eq_Ico</a> uses <code>Ico</code> and not <code>Icc</code>. Got it.</p>",
        "id": 431517235,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712321375
    },
    {
        "content": "<p>While I'm asking stupid questions, do we have glue to connect <code>Ico 0 N</code> with <code>Icc 0 (N-1)</code>?</p>",
        "id": 431517395,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712321419
    },
    {
        "content": "<p>(When <code>N \\ge 1</code>)</p>",
        "id": 431517444,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712321437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- Set.Ico _ _ = Set.Icc _ _</p>",
        "id": 431517548,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712321476
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/SuccPred/Basic.html#Order.Ico_succ_right\">Order.Ico_succ_right</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/SuccPred/Basic.html#Order.Ico_succ_right_of_not_isMax\">Order.Ico_succ_right_of_not_isMax</a></p>",
        "id": 431517549,
        "sender_full_name": "loogle",
        "timestamp": 1712321477
    },
    {
        "content": "<p>The first one looks close...</p>",
        "id": 431517622,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712321503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- Finset.Ico _ _ = Finset.Icc _ _</p>",
        "id": 431518065,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712321648
    },
    {
        "content": "<p>(If you type \"@loo\" and then click on the right name in the pop-up window, it should work.)<br>\n(But I think, editing an old message will not do it.)</p>",
        "id": 431518195,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712321692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Finset.Ico _ _ = Finset.Icc _ _</p>",
        "id": 431518331,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712321732
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Interval.html#Nat.Ico_succ_right\">Nat.Ico_succ_right</a></p>",
        "id": 431518332,
        "sender_full_name": "loogle",
        "timestamp": 1712321733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- Finset.Ico _ _ = Finset.Icc _ _</p>",
        "id": 431518335,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712321734
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Interval.html#Nat.Ico_succ_right\">Nat.Ico_succ_right</a></p>",
        "id": 431518336,
        "sender_full_name": "loogle",
        "timestamp": 1712321735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/If.20summable.2C.20then.20tsum.20is.20equal.20to.20partial.20sum.20plus.20tail/near/431517395\">said</a>:</p>\n<blockquote>\n<p>While I'm asking stupid questions, do we have glue to connect <code>Ico 0 N</code> with <code>Icc 0 (N-1)</code>?</p>\n</blockquote>\n<p>Yesn't. I wrote a very barebones API ages ago, but we're still missing a lot of lemmas</p>",
        "id": 431518527,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712321802
    },
    {
        "content": "<p>The layout in mathlib is currently weird, so my plan is to first get <a href=\"https://github.com/leanprover-community/mathlib4/pull/11765\">#11765</a> in then add a bunch of lemmas</p>",
        "id": 431518613,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712321837
    },
    {
        "content": "<p>Hm, I seem to have gotten it to work with existing API (once the statement was corrected):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_eq_partial_add_tail</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n   <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Icc</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sum_add_tsum_nat_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">N</span><span class=\"o\">)]</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.range_eq_Ico</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.Ico_succ_right</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.sub_add_cancel</span> <span class=\"n\">hN</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_tsub_cancel_right</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Certainly not the \"slickest\" solution, lots of golf possibilities...</p>",
        "id": 431519137,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712321999
    },
    {
        "content": "<p>But are you sure you want to sum over <code>Finset.Icc</code>? We use <code>Finset.Ico</code> or <code>finset.range</code> because in general it's better behaved, as you can see in the above example -- and since we use it more this means that there will be more API around it, which makes it easier to use for yet another reason. Of course in some situations you don't really have a choice, but if you do have a choice my advice would be to use <code>Finset.range</code>.</p>",
        "id": 431526044,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712324239
    },
    {
        "content": "<p>Yes I'm sure you're right and I should refactor what I'm doing...</p>",
        "id": 431529017,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712325197
    }
]