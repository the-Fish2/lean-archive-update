[
    {
        "content": "<p>Do we really not have the following ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Filter.HasBasis.nhds_interior</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">HasBasis</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasBasis</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"bp\">‚àò</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">H.to_subset</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">interior_subset</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">interior_mem_nhds.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">H.mem_of_mem</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 419277277,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706803089
    },
    {
        "content": "<p>I am not surprised. This is a pretty specific statement. Where do you need this?</p>",
        "id": 419303065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706810248
    },
    {
        "content": "<p>What I really want is a simple way to get a basis of <code>ùìù x</code> which is both countable and made of open sets (with a <code>FirstCountableTopology</code> hypothesis of course). Maybe I've missed it, but I figured the simplest way was to take a countable basis and replace each set by its interior. The reason I want <em>open</em> neighborhoods is I want them measurable.</p>",
        "id": 419306019,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706811246
    },
    {
        "content": "<p>In the same vein we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.HasBasis.nhds_closure#doc\">docs#Filter.HasBasis.nhds_closure</a></p>",
        "id": 419306074,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706811272
    },
    {
        "content": "<p>Of course the \"real\" lemma is a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.lift%27#doc\">docs#Filter.lift'</a> statement, but I couldn't find it either...</p>",
        "id": 419306208,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706811327
    },
    {
        "content": "<p>Sorry, I forgot to PR it with <code>Filter.HasBasis.lift'_closure</code> etc</p>",
        "id": 419354075,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706830931
    },
    {
        "content": "<p>I can open a PR that mirrors the <code>closure</code> API later today.</p>",
        "id": 419354379,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706831069
    },
    {
        "content": "<p>Thanks! And no worries of course!</p>",
        "id": 419354770,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706831273
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10175\">#10175</a></p>",
        "id": 419356221,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706831965
    },
    {
        "content": "<p>As for your <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem, we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.HasBasis.exists_antitone_subbasis#doc\">docs#Filter.HasBasis.exists_antitone_subbasis</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.IsMeasurablyGenerated#doc\">docs#Filter.IsMeasurablyGenerated</a></p>",
        "id": 419358265,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706832902
    },
    {
        "content": "<p>The latter could use a rewrite using <code>Filter.HasBasis</code>. Also, we have this \"has subbasis in sets with property\" here and there; should we add it as a typeclass?</p>",
        "id": 419358484,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706833013
    },
    {
        "content": "<p>Thanks a lot Yury! I thought about something like <code>IsMeasurablyGenerated</code> but for some reason I didn't even check wether it existed <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> Regardless of the rewriting, do we have a <em>lemma</em> expressing it in terms of bases?</p>",
        "id": 419442843,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706875085
    }
]