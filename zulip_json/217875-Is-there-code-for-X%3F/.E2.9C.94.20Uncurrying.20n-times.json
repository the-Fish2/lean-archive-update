[
    {
        "content": "<p>Is there an existing way to uncurry a function multiple times, i.e. uncurryₙ 2 = Function.uncurry ∘ Function.uncurry?</p>\n<p>I've almost got it (and it might actually be better) with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Functionₙ</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">result</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">):</span> <span class=\"n\">Functionₙ</span> <span class=\"mi\">0</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">Functionₙ</span> <span class=\"n\">n</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"n\">Functionₙ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Functionₙ.resultType</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Functionₙ</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">result</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">_</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">resultType</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Functionₙ.argType</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Functionₙ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">α</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">u.argType</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsFunctionₙ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">functionₙ</span> <span class=\"o\">:</span> <span class=\"n\">Functionₙ</span> <span class=\"n\">n</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">IsFunctionₙ</span> <span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"bp\">.</span><span class=\"n\">result</span> <span class=\"n\">α</span> <span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">IsFunctionₙ</span> <span class=\"n\">n</span> <span class=\"n\">β</span><span class=\"o\">]:</span> <span class=\"n\">IsFunctionₙ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"n\">α</span> <span class=\"n\">h.functionₙ</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uncurryₙ</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">IsFunctionₙ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">h.functionₙ.argType</span> <span class=\"bp\">→</span> <span class=\"n\">h.functionₙ.resultType</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span> <span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">result</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">⟩,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span> <span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"n\">_</span> <span class=\"n\">u</span> <span class=\"o\">⟩,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">uncurryₙ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span> <span class=\"n\">u</span> <span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Prod.snd</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">uncurryₙ</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">100</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">Function.uncurry</span> <span class=\"bp\">∘</span> <span class=\"n\">Function.uncurry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">100</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"mi\">3</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but awkwardly Function.uncurry builds the Product from inside-out instead of outside in hence <code>(ℕ × ℕ) × ℕ</code> instead of what I get with <code>ℕ × ℕ × ℕ</code> (although maybe my product is nicer).</p>",
        "id": 410612596,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1704007872
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.HasUncurry#doc\">docs#Function.HasUncurry</a></p>",
        "id": 410613521,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704008742
    },
    {
        "content": "<p>Interesting, that goes for the same Prod type that I end up with, but this is exactly what I'm looking for, thanks!</p>",
        "id": 410615219,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1704010224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"562941\">Andrew Carter</span> has marked this topic as resolved.</p>",
        "id": 410615223,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704010228
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.OfArity.uncurry#doc\">docs#Function.OfArity.uncurry</a> may also be relevant</p>",
        "id": 410623634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704018488
    }
]