[
    {
        "content": "<p>I have a function <code>f : ℕ → ℕ∞</code>, and would like functions for the partial sums, the infinite sum, as well as theorems about how they relate to each other. I found <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum#doc\">docs#tsum</a> , but this seems to leave the question of existences and uniqueness of the sum unresolved. And I can't find anything on partial sums. What's the easiest approach to this?</p>",
        "id": 432507827,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1712756846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> tsum, ENat</p>",
        "id": 432511221,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712757770
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Calculus/SmoothSeries.html#contDiff_tsum\">contDiff_tsum</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Calculus/SmoothSeries.html#contDiff_tsum_of_eventually\">contDiff_tsum_of_eventually</a>, and <a href=\"https://loogle.lean-lang.org/?q=tsum%2C%20ENat\">2 more</a></p>",
        "id": 432511229,
        "sender_full_name": "loogle",
        "timestamp": 1712757772
    },
    {
        "content": "<p>That's not very encouraging</p>",
        "id": 432511260,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712757781
    },
    {
        "content": "<p>Yes, we have a lot of material for functions taking values in <code>ENNReal</code> (i.e., non negative reals with added infinity), but not so much for functions taking values in <code>ENat</code>, simply because no-one has needed them until then. You could try to mimick the statements for <code>ENNReal</code> (for instance what is around <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal.summable#doc\">docs#ENNReal.summable</a>)</p>",
        "id": 432516906,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712759311
    },
    {
        "content": "<p>But can't you just coerce it to <code>ENNReal</code> and use the results there? By using something like <a href=\"https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Data/Real/ENatENNReal.lean#L29-L29\">https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Data/Real/ENatENNReal.lean#L29-L29</a>?</p>",
        "id": 432518541,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712759713
    },
    {
        "content": "<p>Coercing seems worth trying, but I'm not sure that'll be much easier</p>",
        "id": 432521843,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712760501
    },
    {
        "content": "<p>I'm confused. <span class=\"user-mention\" data-user-id=\"654733\">@Markus Schmaus</span> you don't <em>really</em> mean the infinite sum of a sequence in <code>ENat</code>, do you? This will be finite if and only if the partial sums are eventually constant if and only if the sequence is eventually zero, and hence in that case the infinite sum is really just a finite sum in disguise.</p>",
        "id": 432527801,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712762031
    },
    {
        "content": "<p>I mean an infinite sum in <code>ENat</code>, which quite likely may be infinite, which is fine for <code>ENat</code>, or may be finite if the sequence is eventually zero. </p>\n<p>For context, I'm interested in the length of concatenating a potentially infinite list of potentially infinite iterators.</p>",
        "id": 432532504,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1712763293
    },
    {
        "content": "<p>I will look into <code>ENNReal</code>.</p>",
        "id": 432532617,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1712763333
    },
    {
        "content": "<p>Just take the sum using <code>tsum</code>. What do you need to prove about it?</p>",
        "id": 432547366,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712768058
    },
    {
        "content": "<p>(Also, use the sigma notation for <code>tsum</code>)</p>",
        "id": 432547754,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712768165
    },
    {
        "content": "<p>This page might have some of the theorems you want: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/InfiniteSum/NatInt.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/InfiniteSum/NatInt.html</a></p>",
        "id": 432550591,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712768933
    },
    {
        "content": "<p>To be more clear, for <code>f : ℕ → ℕ∞</code>, if you write <code>open scoped BigOperators</code>:</p>\n<p>The sum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{i = 0}^\\infty f(i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span></span></span></span> can be written as <code>∑' i, f i</code><br>\nThe sum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{i = 0}^{n - 1} f(i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2537em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.954em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span></span></span></span> can be written as <code>∑ i in Finset.range n, f i</code></p>",
        "id": 432553593,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712770046
    },
    {
        "content": "<p>You will need to prove yourself that every function to <code>ℕ∞</code> is summable (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Summable#doc\">docs#Summable</a>), but you should not need to introduce your own notation or function for the sums.</p>",
        "id": 432554582,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712770428
    },
    {
        "content": "<p>I wrote some code for this that can be found in <a href=\"https://github.com/apnelson1/Matroid/blob/main/Matroid/ForMathlib/ENatTopology.lean\">https://github.com/apnelson1/Matroid/blob/main/Matroid/ForMathlib/ENatTopology.lean</a>. </p>\n<p>The relevant API is roughly in lines 200-400. I think it should be PRed, but I haven't got around to it.</p>",
        "id": 432902269,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1712927915
    }
]