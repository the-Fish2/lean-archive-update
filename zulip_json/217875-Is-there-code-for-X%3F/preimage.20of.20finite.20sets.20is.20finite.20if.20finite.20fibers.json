[
    {
        "content": "<p>Three questions here, </p>\n<p>1) does mathlib have the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.Finite.preimage'</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Set.Finite.induction_on</span>\n    <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"o\">),</span>\n      <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">preimage_empty</span><span class=\"o\">,</span> <span class=\"n\">finite_empty</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"n\">hs</span> <span class=\"n\">hrec</span> <span class=\"n\">_</span> <span class=\"n\">hf</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">singleton_union</span><span class=\"o\">,</span> <span class=\"n\">Set.preimage_union</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Set.Finite.union</span> <span class=\"c1\">-- finite_biUnion''</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">mem_insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hrec</span> <span class=\"n\">hs</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">↦</span> <span class=\"n\">hf</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">mem_insert_of_mem</span> <span class=\"n\">a</span> <span class=\"n\">hb</span><span class=\"o\">))</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span>\n</code></pre></div>\n<p>2) is it worth having the (slightly strongest) version where only <code>(range f ∩ s).Finite</code><br>\n(It can be deduced easily using <code>preimage_range_inter</code>.</p>\n<p>3) The code above has a strange behaviour. After the <code>apply</code>, I have 4 goals to check, and I don't understand why <code>h</code> and <code>hf</code> have to be given.</p>",
        "id": 439448894,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1716135251
    },
    {
        "content": "<p>Can you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite.biUnion#doc\">docs#Set.Finite.biUnion</a> instead of proving it by hand?</p>",
        "id": 439449623,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1716135997
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.Finite.preimage'</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Set.biUnion_preimage_singleton</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Set.Finite.biUnion</span> <span class=\"n\">h</span> <span class=\"n\">hf</span>\n</code></pre></div>",
        "id": 439449785,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1716136159
    },
    {
        "content": "<p>If someone wants to adopt <a href=\"https://github.com/leanprover-community/mathlib4/pull/6449\">#6449</a> feel free to do so <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 439456726,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1716142658
    },
    {
        "content": "<p>Thanks for the one-line proof, Vincent !<br>\nIf anyone can explain the bizarre behavior of the apply, I'd be grateful too.</p>",
        "id": 439558823,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1716206434
    },
    {
        "content": "<blockquote>\n<p>3) The code above has a strange behaviour. After the <code>apply</code>, I have 4 goals to check, and I don't understand why <code>h</code> and <code>hf</code> have to be given.</p>\n</blockquote>\n<p><code>apply</code> doesn't automatically close the goals with matching assumptions in the context; you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">Set.Finite.induction_on</span>\n    <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">s.Finite</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">hf</span>\n</code></pre></div>\n<p>to save the last two lines. <code>h</code> and <code>hf</code> are the first two arguments in <code>C</code>.</p>",
        "id": 439751092,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1716277261
    }
]