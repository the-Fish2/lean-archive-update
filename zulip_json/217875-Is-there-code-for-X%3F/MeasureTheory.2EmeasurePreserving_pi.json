[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.MeasurePreserving.prod#doc\">docs#MeasureTheory.MeasurePreserving.prod</a> but not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.measurePreserving_pi#doc\">docs#MeasureTheory.measurePreserving_pi</a>, it seems. Is this statement true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib.MeasureTheory.Constructions.Pi</span>\n\n<span class=\"kd\">theorem</span><span class=\"w\"> </span><span class=\"n\">MeasureTheory.measurePreserving_pi</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MeasurableSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MeasurableSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Measure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">ν</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Measure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">SFinite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">SFinite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ν</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MeasurePreserving</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ν</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">MeasurePreserving</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Measure.pi</span><span class=\"w\"> </span><span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Measure.pi</span><span class=\"w\"> </span><span class=\"n\">ν</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and if so what would be the best way to prove it?</p>",
        "id": 447272293,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1719420719
    },
    {
        "content": "<p>Did you try to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Measure.pi_eq#doc\">docs#MeasureTheory.Measure.pi_eq</a> ?</p>",
        "id": 447364537,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719449455
    },
    {
        "content": "<p>UPD: I see that you want <code>SFinite</code>, not <code>SigmaFinite</code>. I don't know about details here.</p>",
        "id": 447364588,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719449504
    },
    {
        "content": "<p>As of now, <code>SFinite</code> is mentioned 0 times in the file about pi measures.</p>",
        "id": 447364771,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1719449619
    },
    {
        "content": "<p>You need <code>SigmaFinite</code> to work with iterated products. The reason is that we need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Measure.prod_eq#doc\">docs#MeasureTheory.Measure.prod_eq</a>, which has a comment above it that it's false for <code>SFinite</code> measures. I once looked at whether we can can generalize parts of the theory of <code>Measure.pi</code> to <code>SFinite</code> measures, but I don't think it's possible (at least with the current definition).</p>",
        "id": 447395691,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719469492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/MeasureTheory.2EmeasurePreserving_pi/near/447395691\">said</a>:</p>\n<blockquote>\n<p>You need <code>SigmaFinite</code> to work with iterated products. The reason is that we need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Measure.prod_eq#doc\">docs#MeasureTheory.Measure.prod_eq</a>, which has a comment above it that it's false for <code>SFinite</code> measures. I once looked at whether we can can generalize parts of the theory of <code>Measure.pi</code> to <code>SFinite</code> measures, but I don't think it's possible (at least with the current definition).</p>\n</blockquote>\n<p>Right. I am happy with <code>SigmaFinite</code>. I put <code>SFinite</code> because it was what was used for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.MeasurePreserving.prod#doc\">docs#MeasureTheory.MeasurePreserving.prod</a>. Anyway, I'll have a look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Measure.pi_eq#doc\">docs#MeasureTheory.Measure.pi_eq</a>. Thanks to you both!</p>",
        "id": 447399178,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1719470624
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/14185\">#14185</a></p>",
        "id": 447416790,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1719476767
    }
]