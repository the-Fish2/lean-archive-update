[
    {
        "content": "<p>I know how to prove this (I did it for polynomial in several variables, so I just need to copy that), but I would have preferred avoiding that. Does anybody have an idea of how to prove this easily within mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">S</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(By the way, if mathlib knew what <code>N[X]</code> were,  this would do most of the job…)</p>",
        "id": 422434923,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708441031
    },
    {
        "content": "<p>I think we're missing the <code>Finsupp</code> version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.directSumLeft#doc\">docs#TensorProduct.directSumLeft</a></p>",
        "id": 422435877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708441275
    },
    {
        "content": "<p>From which that is a trivial consequence since polynomials are finsupps almost by definition</p>",
        "id": 422435963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708441296
    },
    {
        "content": "<p>wait, <code>DirectSum</code> isn't a <code>Finsupp</code>?</p>",
        "id": 422437579,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708441727
    },
    {
        "content": "<p>No, it's a DFinsupp</p>",
        "id": 422440630,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708442537
    },
    {
        "content": "<p>Because the pieces might be different types</p>",
        "id": 422440658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708442547
    },
    {
        "content": "<p>Arguably we could try just dropping <code>Finsupp</code> altogether and using <code>Dfinsupp</code> everywhere, but that is a massive refactor</p>",
        "id": 422440734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708442568
    },
    {
        "content": "<p>We do at least have that the two are isomorphic in the non-dependent case</p>",
        "id": 422440823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708442589
    },
    {
        "content": "<p>I'll write the <code>Finsupp</code>stuff and PR it… (Maybe one can rewrite <code>Finsupp</code> to <code>DFinsupp</code> and that's it!?)</p>",
        "id": 422444024,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708443416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tensor.20Product/near/422444024\">said</a>:</p>\n<blockquote>\n<p>(Maybe one can rewrite <code>Finsupp</code> to <code>DFinsupp</code> and that's it!?)</p>\n</blockquote>\n<p>If you mean for adding those results, probably yes. If you mean for merging the two into one; not a chance!</p>",
        "id": 422445534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708443831
    },
    {
        "content": "<p>I proved the various equiv I needed, I'll PR it this morning. You will probably have some comments to add. Basically, the definitions are :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Finsupp</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Finsupp.tensorProductLeft</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- variant for right</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Finsupp.tensorProductLeft'</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Finsupp</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">MvPolynomial</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MvPolynomial.tensorProductRight'</span> <span class=\"o\">:</span>\n    <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→₀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MvPolynomial</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Polynomial.tensorProductRight</span> <span class=\"o\">:</span>\n    <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Polynomial.toFinsuppLinearEquiv</span> <span class=\"o\">:</span>\n    <span class=\"n\">S</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">P</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">LinearEquiv.rTensor</span>  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Polynomial.tensorProductRight'</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422584588,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708510569
    },
    {
        "content": "<p>At a glance those look  reasonable; I assume you're aware we already have the version with a <code>Finsupp</code> on both sides of the tensor product?</p>",
        "id": 422591201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708512993
    },
    {
        "content": "<p>It might be nice to extract an intermediate <code>AddMonoidAlgebra</code> version too, along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Polynomial.tensorProductRight'</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">AddMonoidAlgebar</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which might even be true as an AlgHom</p>",
        "id": 422591300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708513040
    },
    {
        "content": "<p>Oh, I guess that only makes sense when <code>N</code> is an algebra</p>",
        "id": 422593972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708513896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tensor.20Product/near/422591201\">said</a>:</p>\n<blockquote>\n<p>At a glance those look  reasonable; I assume you're aware we already have the version with a <code>Finsupp</code> on both sides of the tensor product?</p>\n</blockquote>\n<p>I saw that, and I changed my proofs accordingly, except that the proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finsuppTensorFinsupp_apply#doc\">docs#finsuppTensorFinsupp_apply</a> is bizarrely complicated, and I try to fix that.<br>\n(Also, I generalized to <code>CommSemiring</code>, etc.)</p>",
        "id": 422602380,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708517183
    },
    {
        "content": "<p>Also : I believe we miss <code>finsupp_sum_tmul</code> and <code>finsupp_tmul_sum</code>…</p>",
        "id": 422602540,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708517245
    },
    {
        "content": "<p>(Well, what I wrote was proved by <code>simp [Finsupp.sum, sum_tmul]</code>, so it's not a necessary addition.)</p>",
        "id": 422607680,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708519083
    },
    {
        "content": "<p>Another question :<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.congr#doc\">docs#TensorProduct.congr</a>,  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.map#doc\">docs#TensorProduct.map</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=rTensor#doc\">docs#rTensor</a> provide a linear equiv / a linear map between tensor products, but when the modules on the left  have additional actions, then so do the tensor products, and the maps defined have extra linearity. <br>\nHow should this be phrased?  What do you think of this :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">LinearMap</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo_isLinearMap'</span>  <span class=\"o\">:</span> <span class=\"n\">IsLinearMap</span> <span class=\"n\">S</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">LinearMap</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">foo</span> <span class=\"k\">with</span>\n  <span class=\"n\">map_smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo_isLinearMap'</span> <span class=\"n\">foo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 422635393,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708527328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tensor.20Product/near/422591300\">said</a>:</p>\n<blockquote>\n<p>It might be nice to extract an intermediate <code>AddMonoidAlgebra</code> version too, along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Polynomial.tensorProductRight'</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">AddMonoidAlgebar</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which might even be true as an AlgHom</p>\n</blockquote>\n<p>Might this wait for another occasion?</p>",
        "id": 422643259,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708529366
    },
    {
        "content": "<blockquote>\n<p>but when the modules on the left have additional actions, then so do the tensor products, and the maps defined have extra linearity.</p>\n</blockquote>\n<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.AlgebraTensorModule.congr#doc\">docs#TensorProduct.AlgebraTensorModule.congr</a> ?</p>",
        "id": 422653066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708531754
    },
    {
        "content": "<p>I was not…</p>",
        "id": 422657802,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708532842
    },
    {
        "content": "<p>(but we miss the analogue for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.directSumLeft#doc\">docs#TensorProduct.directSumLeft</a> , so some thing needs to be done anyway…)</p>",
        "id": 422659862,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708533384
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10824\">#10824</a></p>",
        "id": 422662350,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708534120
    }
]