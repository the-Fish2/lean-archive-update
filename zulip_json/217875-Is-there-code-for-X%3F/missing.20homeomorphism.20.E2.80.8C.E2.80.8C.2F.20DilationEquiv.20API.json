[
    {
        "content": "<p>It seems to me we are missing some API related to homeomorphisms. In particular, I couldn't find things like these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.IsROrC</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">DilationEquiv.toHomeomorph</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PseudoEMetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PseudoEMetricSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">РЅЃрхѕ</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">РЅЃРѓю</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n  <span class=\"n\">continuous_toFun</span> <span class=\"o\">:=</span> <span class=\"n\">Dilation.toContinuous</span> <span class=\"n\">e</span>\n  <span class=\"n\">continuous_invFun</span> <span class=\"o\">:=</span> <span class=\"n\">Dilation.toContinuous</span> <span class=\"n\">e.symm</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">e.toEquiv</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">DilationEquiv.coe_toHomeomorph</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PseudoEMetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PseudoEMetricSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">РЅЃрхѕ</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">РЄЉ</span><span class=\"n\">e.toHomeomorph</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">DilationEquiv.toHomeomorph_symm</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PseudoEMetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">PseudoEMetricSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">РЅЃрхѕ</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">e.toHomeomorph.symm</span> <span class=\"bp\">=</span> <span class=\"n\">e.symm.toHomeomorph</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">NormedSpace.dilationEquiv</span> <span class=\"o\">(</span><span class=\"bp\">­ЮЋю</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"bp\">­ЮЋю</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">­ЮЋю</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">РёЮ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">E</span> <span class=\"bp\">РЅЃрхѕ</span> <span class=\"n\">E</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Рђќ</span><span class=\"n\">r</span><span class=\"bp\">Рђќ</span> <span class=\"o\">:</span> <span class=\"bp\">­ЮЋю</span><span class=\"o\">)</span> <span class=\"bp\">Рђб</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Рђќ</span><span class=\"n\">r</span><span class=\"bp\">РђќРЂ╗┬╣</span> <span class=\"o\">:</span> <span class=\"bp\">­ЮЋю</span><span class=\"o\">)</span> <span class=\"bp\">Рђб</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"bp\">|</span><span class=\"n\">r</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"n\">РёЮ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">­ЮЋю</span><span class=\"o\">)</span> <span class=\"bp\">РЅа</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hr.ne'</span><span class=\"o\">)]</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">smul_smul</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"bp\">|</span><span class=\"n\">r</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"n\">РёЮ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">­ЮЋю</span><span class=\"o\">)</span> <span class=\"bp\">РЅа</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hr.ne'</span><span class=\"o\">)]</span>\n  <span class=\"n\">edist_eq'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">lift</span> <span class=\"n\">r</span> <span class=\"n\">to</span> <span class=\"n\">РёЮ</span><span class=\"bp\">РЅЦ</span><span class=\"mi\">0</span> <span class=\"n\">using</span> <span class=\"n\">hr.le</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">Real.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">edist_add_right</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">РЪе</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hr.ne'</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">wРѓЂ</span> <span class=\"n\">wРѓЂ</span> <span class=\"bp\">Рєд</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">РЪЕ</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">NNReal.abs_eq</span><span class=\"o\">,</span> <span class=\"n\">edist_eq_coe_nnnorm_sub</span><span class=\"o\">,</span> <span class=\"bp\">Рєљ</span> <span class=\"n\">smul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_sub_sub_cancel_right</span><span class=\"o\">,</span>\n      <span class=\"n\">nnnorm_smul</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.coe_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_cast</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Homeomorph.subtype</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">Рєњ</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">Рєњ</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">РЅЃРѓю</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">Рѕђ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">Рєћ</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">РЅЃРѓю</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">//</span> <span class=\"n\">q</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.map</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"bp\">┬и</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mp</span><span class=\"o\">)</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.map</span> <span class=\"n\">e.symm</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"bp\">Рєд</span> <span class=\"n\">he</span> <span class=\"n\">_</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mpr</span> <span class=\"o\">((</span><span class=\"n\">e.apply_symm_apply</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">РќИ</span> <span class=\"n\">hy</span><span class=\"o\">)</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">continuous_toFun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">e.continuous.subtype_map</span> <span class=\"n\">_</span>\n  <span class=\"n\">continuous_invFun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">e.symm.continuous.subtype_map</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Homeomorph.sets</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">РЅЃРѓю</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">РЂ╗┬╣'</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">s</span> <span class=\"bp\">РЅЃРѓю</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Homeomorph.subtype</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Set.ext_iff.mp</span> <span class=\"n\">he</span>\n</code></pre></div>",
        "id": 417544953,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706051261
    },
    {
        "content": "<p>Does linking to continuous affine equivs make sense  here?</p>",
        "id": 417545377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706051490
    },
    {
        "content": "<p>Do we have those?</p>",
        "id": 417546497,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706052071
    },
    {
        "content": "<p>As for <code>NormedSpace.dilationEquiv</code>, I think that translation and multiplication should be separate <code>def</code>s. Also, one of them is an <code>IsometryEquiv</code>. I don't know if we have <code>IsometryEquiv.toDilationEquiv</code>.</p>",
        "id": 417547156,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706052391
    },
    {
        "content": "<p>Huh, we only have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousAffineMap#doc\">docs#ContinuousAffineMap</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AffineEquiv#doc\">docs#AffineEquiv</a></p>",
        "id": 417547253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706052434
    }
]