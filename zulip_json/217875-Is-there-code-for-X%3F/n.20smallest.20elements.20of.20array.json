[
    {
        "content": "<p>Do we have some algorithm somewhere that finds the n smallest elements (with respect to some relation <code>r</code>) of an array? I could sort the array and take the first n elements, of course, but in my use case <code>n</code> is much smaller than the size of the array.</p>",
        "id": 420479241,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707405317
    },
    {
        "content": "<p>If your <code>n</code> is not much smaller than <code>log Array.size</code> it may not be much faster to sort first, I think.</p>",
        "id": 420481411,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707405942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/n.20smallest.20elements.20of.20array/near/420479241\">said</a>:</p>\n<blockquote>\n<p>... in my use case <code>n</code> is much smaller than the size of the array.</p>\n</blockquote>",
        "id": 420481522,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707405967
    },
    {
        "content": "<p>It's even much smaller than log of the size.</p>",
        "id": 420481601,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707405989
    },
    {
        "content": "<p>Ok, I consider <code>log Array.size</code> to be much smaller than <code>Array.size</code>!  <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 420481641,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707406000
    },
    {
        "content": "<p>Anyway, I have not come across it.</p>",
        "id": 420482010,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707406091
    },
    {
        "content": "<p>Except when <code>n</code> is <code>1</code>: <em>really</em> small compared to <code>n</code>.</p>",
        "id": 420482111,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707406120
    },
    {
        "content": "<p>Yeah, me neither, thanks for confirming! Isn't \"QuickSelect\" a standard algorithm in the same vein as quicksort (which we do have)?</p>",
        "id": 420482151,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707406133
    },
    {
        "content": "<p>Btw, I was scarred by a feature of <code>Array.qsort</code> and I feel that I should share it: if your relation is not irreflexive, the output of <code>.qsort</code> need not be sorted.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span>  <span class=\"c1\">-- true</span>\n  <span class=\"k\">let</span> <span class=\"n\">unsorted</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"n\">unsorted.qsort</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">unsorted</span>\n</code></pre></div>",
        "id": 420483078,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707406363
    },
    {
        "content": "<p>Quickselect is for selecting the single element at rank n.<br>\nThe usual approach for the question in title would be maintaining a <a href=\"https://en.wikipedia.org/wiki/Min-max_heap\">max-heap</a> of size n while going through the array in a single pass, and constantly inserting the new element if it's smaller than the current max and popping out the max.</p>",
        "id": 420483230,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707406409
    },
    {
        "content": "<p>Ok, this should be quite easy to implement.</p>",
        "id": 420483682,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707406543
    },
    {
        "content": "<p>if i understand the quickselect algorithm correctly you are (partially) sorting the array while doing it, so it actually gives the smallest k elements in the same time though?</p>",
        "id": 420484041,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1707406637
    },
    {
        "content": "<p>if you select the right pivot, yes, so you could combine that with quickselect.</p>",
        "id": 420484266,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707406695
    },
    {
        "content": "<p>you should be able to take all items with index less than the n after quickselect, right? they won't be sorted though</p>",
        "id": 420485652,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707407115
    }
]