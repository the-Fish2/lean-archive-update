[
    {
        "content": "<p>I can't believe that there isn't a version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=quotientKerEquivRange#doc\">docs#quotientKerEquivRange</a> for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgHom#doc\">docs#AlgHom</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">RingHom.ker</span> <span class=\"n\">f.toRingHom</span><span class=\"o\">))</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">f.range</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 423565289,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709026123
    },
    {
        "content": "<p>Well, it's at one step from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.quotientKerAlgEquivOfSurjective#doc\">docs#Ideal.quotientKerAlgEquivOfSurjective</a></p>",
        "id": 423572494,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709028516
    },
    {
        "content": "<p>It indeed seems we are missing this version (we have the one using <code>RingHom.range</code> in that file so I would surprised if it were elsewhere).</p>",
        "id": 423577281,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709030041
    },
    {
        "content": "<p>I'll do it, but this requires a few other lemmas…</p>",
        "id": 423577416,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709030073
    },
    {
        "content": "<p>Relatedly, it is very annoying to have to type <code>RingHom.ker f.toRingHom</code> everytime one needs to consider the kernel of a morphism of algebras… is there a better way? Should one add <code>AlgHom.ker</code>, etc.</p>",
        "id": 423577551,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709030119
    },
    {
        "content": "<p>What do you mean? This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">RingHom.ker</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 423578744,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709030481
    },
    {
        "content": "<p>You can write <code>RingHom.ker f</code>, no?</p>",
        "id": 423578759,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709030487
    },
    {
        "content": "<p>I agree that writing <code>f.ker</code> would be nicer thought</p>",
        "id": 423578784,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709030496
    },
    {
        "content": "<p>maybe — but I expect to be able to write <code>f.ker</code>.</p>",
        "id": 423578815,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709030510
    },
    {
        "content": "<p>Yeah, this used to be possible in lean 3, but lean 4 is stricter on dot notation. Not sure if there's a chance to change that</p>",
        "id": 423579260,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709030601
    },
    {
        "content": "<p>There are also inconsistencies in notation : compare <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.quotientKerAlgEquivOfSurjective#doc\">docs#Ideal.quotientKerAlgEquivOfSurjective</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.quotientKerEquivOfSurjective#doc\">docs#RingHom.quotientKerEquivOfSurjective</a><br>\nI believe the former should be in the <code>AlgHom</code> namespace and not in <code>Ideal.AlgHom</code>…</p>",
        "id": 423579265,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709030602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/first.20isomorphism.20theorem.20for.20algebra.20morphisms/near/423579260\">said</a>:</p>\n<blockquote>\n<p>Yeah, this used to be possible in lean 3, but lean 4 is stricter on dot notation. Not sure if there's a chance to change that</p>\n</blockquote>\n<p>It suffices to add a definition of <code>AlgHom.ker</code></p>",
        "id": 423579346,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709030628
    },
    {
        "content": "<p>Nothing to see at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.AlgHom.quotientKerEquivRange#doc\">docs#Ideal.AlgHom.quotientKerEquivRange</a></p>",
        "id": 423579498,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709030670
    },
    {
        "content": "<p>(edited)</p>",
        "id": 423579767,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709030763
    },
    {
        "content": "<p>(the missing function is precisely the one that is missing…)</p>",
        "id": 423579833,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709030777
    },
    {
        "content": "<p>I am not sure how to activate dot notation, currently we cannot write <code>f.ker</code> even if <code>f</code> is a <code>RingHom</code>.</p>",
        "id": 423580012,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709030864
    },
    {
        "content": "<p>Ah, this is just because <code>RingHom.ker</code> doesn't take a ring hom as argument (but a term of type <code>RIngHomClass</code>)</p>",
        "id": 423580597,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709031104
    },
    {
        "content": "<p>We do still have an issue asking for more extensible dot notation, right? I guess in theory this could be done via aliases right now but that seems pretty terrible</p>",
        "id": 423831882,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1709131164
    },
    {
        "content": "<p>It'd be nice to be able to register specifically that RingHoms and AlgHoms can use RingHom dot notation, and if the name matches just try put it in even if it's not quite right' - on the other hand this is a bit at odds with other details of the implementation of dot notation</p>",
        "id": 423832243,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1709131258
    }
]