[
    {
        "content": "<p>Do we have a name for a bilinear map that has trivial left and right kernels?  E.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dual</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span> <span class=\"n\">Module</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A quasi-perfect pairing of two (left) modules over a commutative ring. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">QuasiPerfectPairing</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toLin</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n  <span class=\"n\">injectiveLeft</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">toLin</span>\n  <span class=\"n\">injectiveRight</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">toLin.flip</span>\n</code></pre></div>",
        "id": 420555512,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1707432725
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.Nondegenerate#doc\">docs#LinearMap.Nondegenerate</a></p>",
        "id": 420557971,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1707434024
    },
    {
        "content": "<p>Thank you, that is a perfect answer to the question that I asked.  Your answer made me realize that I actually want an additional saturation condition, namely that the left and right cokernels are <code>R</code>-torsion-free. (sorry, I don't know how to spell this: <code>torsion R (cokernel toLin) = ⊥</code> maybe?).  Basically, I am looking for something that specializes to a perfect pairing in the finite rank case.</p>",
        "id": 420582392,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1707450560
    },
    {
        "content": "<p>This might be what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dual</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Torsion</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span> <span class=\"n\">Module</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A quasi-perfect pairing of two (left) modules over a commutative ring. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">QuasiPerfectPairing</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toLin</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n  <span class=\"n\">injectiveLeft</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">toLin</span>\n  <span class=\"n\">injectiveRight</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">toLin.flip</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">QuasiPerfectPairing</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">torsion</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Dual</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"bp\">⧸</span> <span class=\"n\">LinearMap.range</span> <span class=\"n\">P.toLin</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span>\n<span class=\"k\">#check</span> <span class=\"n\">torsion</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"n\">LinearMap.range</span> <span class=\"n\">P.toLin.flip</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span>\n\n<span class=\"c1\">-- Also bear in mind:</span>\n<span class=\"k\">#check</span> <span class=\"n\">Submodule.noZeroSMulDivisors_iff_torsion_eq_bot</span>\n</code></pre></div>",
        "id": 420633176,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1707478031
    },
    {
        "content": "<p>Thank you!  I think this is what I want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">QuasiPerfectPairing</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toLin</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n  <span class=\"n\">injectiveLeft</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">toLin</span>\n  <span class=\"n\">injectiveRight</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">toLin.flip</span>\n  <span class=\"n\">saturatedLeft</span> <span class=\"o\">:</span> <span class=\"n\">NoZeroSMulDivisors</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Dual</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"bp\">⧸</span> <span class=\"n\">LinearMap.range</span> <span class=\"n\">toLin</span><span class=\"o\">)</span>\n  <span class=\"n\">saturatedRight</span> <span class=\"o\">:</span> <span class=\"n\">NoZeroSMulDivisors</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"n\">LinearMap.range</span> <span class=\"n\">toLin.flip</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'll see if I can prove anything about it.</p>",
        "id": 420679324,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1707493776
    }
]