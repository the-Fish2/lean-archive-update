[
    {
        "content": "<p>Hello,</p>\n<p>I'm looking for a result something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">T₁</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">cond₁</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.IsTopologicalBasis</span> <span class=\"n\">T₁</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">cond₂</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.IsTopologicalBasis</span> <span class=\"n\">T₂</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"bp\">⊓</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">U₁</span> <span class=\"bp\">∈</span> <span class=\"n\">T₁</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U₂</span> <span class=\"bp\">∈</span> <span class=\"n\">T₂</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">U₁</span> <span class=\"bp\">∩</span> <span class=\"n\">U₂</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm aware of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isTopologicalBasis_pi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))}</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">IsTopologicalBasis</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsTopologicalBasis</span> <span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">U</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In <code>Topology.Bases</code> and though I should be able to deduce it from that.</p>\n<p>I set off naively like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">T₁</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">cond₁</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.IsTopologicalBasis</span> <span class=\"n\">T₁</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">cond₂</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.IsTopologicalBasis</span> <span class=\"n\">T₂</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"bp\">⊓</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">U₁</span> <span class=\"bp\">∈</span> <span class=\"n\">T₁</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U₂</span> <span class=\"bp\">∈</span> <span class=\"n\">T₂</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">U₁</span> <span class=\"bp\">∩</span> <span class=\"n\">U₂</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t₁</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t₂</span>\n  <span class=\"k\">let</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">T₁</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">T₂</span>\n  <span class=\"k\">let</span> <span class=\"n\">conds</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cond₁</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cond₂</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">t₁</span> <span class=\"bp\">⊓</span> <span class=\"n\">t₂</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>However after many hours of trying I haven't been able to put it all together correctly.</p>\n<p>Is there an easier way of doing this? Is there some kind of \"deduce the pairwise result from the pi result\" magic that I've missed?</p>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 419989448,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1707204503
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isTopologicalBasis_prod#doc\">docs#isTopologicalBasis_prod</a> ?</p>",
        "id": 419990072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707204878
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.IsTopologicalBasis.prod#doc\">docs#TopologicalSpace.IsTopologicalBasis.prod</a> should save you the trouble with <code>Fin 2</code></p>",
        "id": 419990165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707204946
    },
    {
        "content": "<p>In any case it’s the wrong way around to deduce the inf statement from the prod statement, it should be the converse</p>",
        "id": 420022937,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707217496
    },
    {
        "content": "<p>Your best option would probably be to mimic the proof of the prod statement</p>",
        "id": 420023657,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707217764
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 420068678,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707232215
    },
    {
        "content": "<p>Well, this is true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- surely this must exist somewhere???</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">subset_and_subset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">Set.inter_subset_inter</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">inter_self</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">IsTopologicalBasis.inter</span> <span class=\"o\">{</span><span class=\"n\">B₁</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span>\n    <span class=\"o\">{</span><span class=\"n\">B₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">B₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsTopologicalBasis</span> <span class=\"o\">(</span><span class=\"n\">image2</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∩</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">B₁</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">isTopologicalBasis_of_isOpen_of_nhds</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"n\">hu₁</span><span class=\"o\">,</span> <span class=\"n\">hu₂</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h₁.isOpen</span> <span class=\"n\">hu₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inter</span> <span class=\"o\">(</span><span class=\"n\">h₂.isOpen</span> <span class=\"n\">hu₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"n\">hu</span> <span class=\"n\">uo</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_image2</span><span class=\"o\">,</span> <span class=\"n\">exists_and_left</span><span class=\"o\">,</span> <span class=\"n\">exists_exists_and_exists_and_eq_and</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">h₁.nhds_hasBasis</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_iff.1</span> <span class=\"o\">(</span><span class=\"n\">IsOpen.mem_nhds</span> <span class=\"n\">uo</span> <span class=\"n\">hu</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hbs</span><span class=\"o\">⟩,</span> <span class=\"n\">hsu</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">h₂.nhds_hasBasis</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_iff.1</span> <span class=\"o\">(</span><span class=\"n\">IsOpen.mem_nhds</span> <span class=\"n\">uo</span> <span class=\"n\">hu</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hbt</span><span class=\"o\">⟩,</span> <span class=\"n\">htu</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">s</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hs</span>\n    <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">hbs</span><span class=\"o\">,</span> <span class=\"n\">hbt</span><span class=\"o\">⟩,</span> <span class=\"n\">subset_and_subset</span> <span class=\"n\">hsu</span> <span class=\"n\">htu</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p>Although I can't believe that <code>{s t u : Set α} (h₁ : s ⊆ u) (h₂ : t ⊆ u) : s ∩ t ⊆ u</code> is unknown to Lean.</p>\n<p>I then try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">T₁</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">cond₁</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.IsTopologicalBasis</span> <span class=\"n\">T₁</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">cond₂</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.IsTopologicalBasis</span> <span class=\"n\">T₂</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"bp\">⊓</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">image2</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∩</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">T₁</span> <span class=\"n\">T₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">t₁</span> <span class=\"bp\">⊓</span> <span class=\"n\">t₂</span>\n  <span class=\"n\">apply</span> <span class=\"n\">IsTopologicalBasis.inter</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Getting rid of the <code>sorry</code>s is defeating me.</p>",
        "id": 420149784,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1707259909
    },
    {
        "content": "<p>Anatole didn't write that your statement is wrong, he wrote that the optimal proof strategy goes in the other direction.</p>",
        "id": 420150377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707260253
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 420157155,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707264316
    },
    {
        "content": "<p>One of h1 and h2 is unnecessary:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">subset_and_subset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h₁</span> <span class=\"n\">h.1</span>\n  <span class=\"c1\">-- or (s.inter_subset_left t).trans h₁</span>\n</code></pre></div>",
        "id": 420159971,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707265902
    },
    {
        "content": "<p>I think it's pretty easy to specialize <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isTopologicalBasis_iInf#doc\">docs#isTopologicalBasis_iInf</a> to <code>isTopologicalBasis_inf</code> and that kind of statement is arguably what we should have in mathlib (rather than putting three different topologies on the same space; usually you'd use type synonyms for that).<br>\nIt's usually easier to use <code>Bool</code> for this purpose than <code>Fin 2</code>, since <code>Bool.rec</code> is convenient and has good defeq properties. Some examples are <a href=\"https://github.com/leanprover-community/mathlib4/blob/49212605e40e9d9fcbcd9968ce362f91dad303ca/Mathlib/Algebra/Group/UniqueProds.lean#L311-L316\">here</a>.</p>",
        "id": 420160150,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707265993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373192\">Christopher Hoskin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inf.20of.20a.20pair.20of.20topologies/near/420149784\">said</a>:</p>\n<blockquote>\n<p>Although I can't believe that <code>{s t u : Set α} (h₁ : s ⊆ u) (h₂ : t ⊆ u) : s ∩ t ⊆ u</code> is unknown to Lean.</p>\n</blockquote>\n<p>The aim is not to make a library containing every obvious fact in mathematics, as entertaining as that might be (cf. <a href=\"https://en.wikipedia.org/wiki/The_Poetry_Cloud\">The Poetry Cloud</a>  by Cixin Liu). It's a success if what <em>is</em> there makes your lemma easy to prove in a couple of steps!</p>",
        "id": 420160435,
        "sender_full_name": "Richard Copley",
        "timestamp": 1707266164
    },
    {
        "content": "<p>Scratch that, I now think using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.IsTopologicalBasis.prod#doc\">docs#TopologicalSpace.IsTopologicalBasis.prod</a> and mimicking the proof that deduces isTopologicalBasis_iInf from isTopologicalBasis_pi would be the easiest. No need to deal with universe ULift issues ...</p>",
        "id": 420161905,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707267227
    },
    {
        "content": "<p>Here's a complete proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Bases</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">tY</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">tZ</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fY</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fZ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">induced_to_prod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">×</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">induced</span> <span class=\"n\">f</span> <span class=\"n\">inferInstance</span> <span class=\"bp\">=</span> <span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">tY</span> <span class=\"bp\">⊓</span> <span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">tZ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">induced_inf</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">induced_compose</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inducing_inf_to_prod</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">Inducing</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">×</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">induced</span> <span class=\"n\">fY</span> <span class=\"n\">tY</span> <span class=\"bp\">⊓</span> <span class=\"n\">induced</span> <span class=\"n\">fZ</span> <span class=\"n\">tZ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">fY</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fZ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">induced</span> <span class=\"n\">fY</span> <span class=\"n\">tY</span> <span class=\"bp\">⊓</span> <span class=\"n\">induced</span> <span class=\"n\">fZ</span> <span class=\"n\">tZ</span><span class=\"bp\">;</span> <span class=\"o\">⟨(</span><span class=\"n\">induced_to_prod</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">fY</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fZ</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">TopologicalSpace.IsTopologicalBasis.inf</span>\n    <span class=\"o\">{</span><span class=\"n\">BY</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">Y</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">BZ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">Z</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">bY</span> <span class=\"o\">:</span> <span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">BY</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bZ</span> <span class=\"o\">:</span> <span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">BZ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">induced</span> <span class=\"n\">fY</span> <span class=\"n\">tY</span> <span class=\"bp\">⊓</span> <span class=\"n\">induced</span> <span class=\"n\">fZ</span> <span class=\"n\">tZ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">BY.image2</span> <span class=\"o\">(</span><span class=\"n\">fY</span> <span class=\"bp\">⁻¹'</span> <span class=\"bp\">·</span> <span class=\"bp\">∩</span> <span class=\"n\">fZ</span> <span class=\"bp\">⁻¹'</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">BZ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">induced</span> <span class=\"n\">fY</span> <span class=\"n\">tY</span> <span class=\"bp\">⊓</span> <span class=\"n\">induced</span> <span class=\"n\">fZ</span> <span class=\"n\">tZ</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">bY.prod</span> <span class=\"n\">bZ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inducing</span> <span class=\"o\">(</span><span class=\"n\">inducing_inf_to_prod</span> <span class=\"n\">fY</span> <span class=\"n\">fZ</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.image_image2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">B₁</span> <span class=\"n\">B₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">X</span> <span class=\"n\">t₁</span> <span class=\"n\">B₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">X</span> <span class=\"n\">t₂</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"bp\">⊓</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.image2</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∩</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">B₁</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis.inf</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">id</span> <span class=\"n\">id</span> <span class=\"n\">B₁</span> <span class=\"n\">B₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">induced_id</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)]</span>\n<span class=\"c1\">-- need to specify all implicit arguments because multiple instances on the same type</span>\n<span class=\"c1\">-- would be easier if `TopologicalSpace` arguments in `TopologicalSpace.IsTopologicalBasis.inf`</span>\n<span class=\"c1\">-- are regular implicit rather than instance implicit</span>\n</code></pre></div>",
        "id": 420165337,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707269604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> Thanks very much for your proof. I'm afraid the way Mathlib handles topologies is just a bit beyond the grasp of my intellect. I'm trying to apply your result to the <a href=\"https://en.wikipedia.org/wiki/Lawson_topology\">Lawson Topology</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Order.LowerUpperTopology</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Order.ScottTopology</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Topology</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">tY</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">tZ</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fY</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fZ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">induced_to_prod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">×</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">induced</span> <span class=\"n\">f</span> <span class=\"n\">inferInstance</span> <span class=\"bp\">=</span> <span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">tY</span> <span class=\"bp\">⊓</span> <span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">tZ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">induced_inf</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">induced_compose</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inducing_inf_to_prod</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">Inducing</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">×</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">induced</span> <span class=\"n\">fY</span> <span class=\"n\">tY</span> <span class=\"bp\">⊓</span> <span class=\"n\">induced</span> <span class=\"n\">fZ</span> <span class=\"n\">tZ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">fY</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fZ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">induced</span> <span class=\"n\">fY</span> <span class=\"n\">tY</span> <span class=\"bp\">⊓</span> <span class=\"n\">induced</span> <span class=\"n\">fZ</span> <span class=\"n\">tZ</span><span class=\"bp\">;</span> <span class=\"o\">⟨(</span><span class=\"n\">induced_to_prod</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">fY</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fZ</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">TopologicalSpace.IsTopologicalBasis.inf</span>\n    <span class=\"o\">{</span><span class=\"n\">BY</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">Y</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">BZ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">Z</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">bY</span> <span class=\"o\">:</span> <span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">BY</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bZ</span> <span class=\"o\">:</span> <span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">BZ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">induced</span> <span class=\"n\">fY</span> <span class=\"n\">tY</span> <span class=\"bp\">⊓</span> <span class=\"n\">induced</span> <span class=\"n\">fZ</span> <span class=\"n\">tZ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">BY.image2</span> <span class=\"o\">(</span><span class=\"n\">fY</span> <span class=\"bp\">⁻¹'</span> <span class=\"bp\">·</span> <span class=\"bp\">∩</span> <span class=\"n\">fZ</span> <span class=\"bp\">⁻¹'</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">BZ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">induced</span> <span class=\"n\">fY</span> <span class=\"n\">tY</span> <span class=\"bp\">⊓</span> <span class=\"n\">induced</span> <span class=\"n\">fZ</span> <span class=\"n\">tZ</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">bY.prod</span> <span class=\"n\">bZ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inducing</span> <span class=\"o\">(</span><span class=\"n\">inducing_inf_to_prod</span> <span class=\"n\">fY</span> <span class=\"n\">fZ</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.image_image2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">B₁</span> <span class=\"n\">B₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">X</span> <span class=\"n\">t₁</span> <span class=\"n\">B₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">X</span> <span class=\"n\">t₂</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"bp\">⊓</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.image2</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∩</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">B₁</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">IsTopologicalBasis.inf</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">id</span> <span class=\"n\">id</span> <span class=\"n\">B₁</span> <span class=\"n\">B₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">induced_id</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)]</span>\n<span class=\"c1\">-- need to specify all implicit arguments because multiple instances on the same type</span>\n<span class=\"c1\">-- would be easier if `TopologicalSpace` arguments in `TopologicalSpace.IsTopologicalBasis.inf`</span>\n<span class=\"c1\">-- are regular implicit rather than instance implicit</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The Lawson topology is defined as the meet of the `LowerTopology` and the `ScottTopology`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">lawson</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">lower</span> <span class=\"n\">α</span> <span class=\"bp\">⊓</span> <span class=\"n\">scott</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">The Lawson topology is defined as the meet of the `LowerTopology` and the `ScottTopology`.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">IsLawson</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">topology_eq_lawson</span> <span class=\"o\">:</span> <span class=\"o\">‹</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"bp\">=</span> <span class=\"n\">lawson</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The sets of the form U\\↑F where U is Scott open and F is finite form a basis for the Lawson</span>\n<span class=\"sd\">topology</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">lawsonBasis</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">image2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"bp\">⇑</span><span class=\"n\">WithLower.toLower</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">x</span> <span class=\"bp\">∩</span> <span class=\"bp\">⇑</span><span class=\"n\">WithScott.toScott</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">IsLower.lowerBasis</span> <span class=\"o\">(</span><span class=\"n\">WithLower</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">WithScott</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">U</span><span class=\"o\">})</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IsLawson</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsLawson</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">topology_eq</span> <span class=\"o\">:</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"bp\">=</span> <span class=\"n\">lawson</span> <span class=\"o\">:=</span> <span class=\"n\">topology_eq_lawson</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">isTopologicalBasis</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.IsTopologicalBasis</span> <span class=\"o\">(</span><span class=\"n\">lawsonBasis</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lawsonBasis</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">IsTopologicalBasis.inf</span> <span class=\"n\">WithLower.toLower</span> <span class=\"n\">WithScott.toScott</span> <span class=\"n\">IsLower.isTopologicalBasis</span> <span class=\"o\">(</span><span class=\"n\">TopologicalSpace.isTopologicalBasis_opens</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">WithScott</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">topology_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lawson</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">congrArg₂</span> <span class=\"n\">Inf.inf</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">IsLawson</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Topology</span>\n</code></pre></div>\n<p>Is this the right idea? I reduce it to the goals</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scott</span> <span class=\"bp\">=</span> <span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">WithScott.toScott</span><span class=\"o\">)</span> <span class=\"n\">WithScott.instTopologicalSpaceWithScott</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lower</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">WithLower.toLower</span><span class=\"o\">)</span> <span class=\"n\">WithLower.instTopologicalSpaceWithLower</span>\n</code></pre></div>\n<p>but then I'm not sure what to do next (or if this is just nonsense)?</p>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 420342581,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1707339956
    },
    {
        "content": "<p>I think you rather want to create <code>Lawson</code> as a type alias for \\a and define an <code>instance : TopologicalSpace (Lawson \\a)</code></p>",
        "id": 420345279,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707341074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span> Ruben may be right, but your goals are easily provable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">lower</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">induced</span> <span class=\"n\">WithLower.toLower</span> <span class=\"n\">WithLower.instTopologicalSpaceWithLower</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">lower</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">IsLower.WithLowerHomeomorph</span> <span class=\"n\">α</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">(</span><span class=\"n\">lower</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">inducing.induced</span>\n</code></pre></div>",
        "id": 420346741,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707341668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inf.20of.20a.20pair.20of.20topologies/near/420345279\">said</a>:</p>\n<blockquote>\n<p>I think you rather want to create <code>Lawson</code> as a type alias for α and define an <code>instance : TopologicalSpace (Lawson α)</code></p>\n</blockquote>\n<p>This is not really the pattern in this part of the library (or rather the pattern is to have both the type synonym and the topology on the original space)</p>",
        "id": 420350537,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707343228
    },
    {
        "content": "<p>I left out the type synonym and some of the other boilerplate for a MWE, but I have it in the file I'm working on.</p>",
        "id": 420351704,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1707343785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lower</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">scottHausdorff</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">scott</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">upperSet</span> <span class=\"n\">α</span> <span class=\"bp\">⊔</span> <span class=\"n\">scottHausdorff</span>\n</code></pre></div>\n<p>Presumably it should be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">scottHausdorff</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">scott</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">upperSet</span> <span class=\"n\">α</span> <span class=\"bp\">⊔</span> <span class=\"n\">scottHausdorff</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>to be consistent?</p>",
        "id": 420353139,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1707344439
    },
    {
        "content": "<p>Hmm yeah, <code>α</code> should be explicit in <code>scottHausdorff</code></p>",
        "id": 420353213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707344472
    },
    {
        "content": "<p>Sorry I didn't catch that in review</p>",
        "id": 420353229,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707344479
    },
    {
        "content": "<p>Similarly we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">IsLower.WithLowerHomeomorph</span>\n</code></pre></div>\n<p>but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">WithScott.withScottHomeomorph</span>\n</code></pre></div>\n<p>which is right?</p>",
        "id": 420353283,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1707344509
    },
    {
        "content": "<p>The latter</p>",
        "id": 420353419,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707344558
    },
    {
        "content": "<p>I'll do a PR to make it consistent then.</p>",
        "id": 420353442,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1707344573
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10346\">https://github.com/leanprover-community/mathlib4/pull/10346</a></p>",
        "id": 420356324,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1707346072
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">lower</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">induced</span> <span class=\"n\">WithLower.toLower</span> <span class=\"n\">WithLower.instTopologicalSpaceWithLower</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">lower</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">WithLower.withLowerHomeomorph</span> <span class=\"n\">α</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">(</span><span class=\"n\">lower</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">inducing.induced</span>\n</code></pre></div>\n<p>But this fails with <code>(deterministic) timeout at 'isDefEq', maximum number of heartbeats (1000000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">1000000</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">scott</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">induced</span> <span class=\"n\">WithScott.toScott</span> <span class=\"n\">WithScott.instTopologicalSpaceWithScott</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">scott</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">WithScott.withScottHomeomorph</span> <span class=\"n\">α</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">(</span><span class=\"n\">scott</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">inducing.induced</span>\n</code></pre></div>",
        "id": 420594564,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1707460952
    },
    {
        "content": "<p>I <em>think</em> you want the <code>symm</code> of that homeomorphism, but I'm not at Lean to check. You might also try providing the arguments to <code>IsScott.mk</code> explicitly instead of hiding them behind the anonymous constructor with <code>rfl</code>.</p>",
        "id": 420612567,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707470362
    },
    {
        "content": "<p>Coming back to the original question, I still think it's cleaner to do (all code below is with the environment of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsTopologicalBasis.prod#doc\">docs#IsTopologicalBasis.prod</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">IsTopologicalBasis.inf</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B₁</span> <span class=\"n\">B₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)}</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">IsTopologicalBasis</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"n\">B₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">IsTopologicalBasis</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsTopologicalBasis</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t₁</span> <span class=\"bp\">⊓</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">image2</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∩</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">B₁</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span>  <span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">t₁</span> <span class=\"bp\">⊓</span> <span class=\"n\">t₂</span>\n  <span class=\"n\">refine</span> <span class=\"n\">isTopologicalBasis_of_isOpen_of_nhds</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">hu₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"n\">hu₂</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">h₁.isOpen</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"n\">hu₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"n\">inf_le_left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inter</span>\n      <span class=\"o\">((</span><span class=\"n\">h₂.isOpen</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"n\">hu₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"n\">inf_le_right</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"n\">hu</span> <span class=\"n\">uo</span>\n    <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">nhds_inf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">h₁.nhds_hasBasis</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t₁</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">inf</span> <span class=\"o\">(</span><span class=\"n\">h₂.nhds_hasBasis</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t₂</span><span class=\"o\">))</span>\n      <span class=\"bp\">|&gt;.</span><span class=\"n\">mem_iff.1</span> <span class=\"o\">(</span><span class=\"n\">uo.mem_nhds</span> <span class=\"n\">hu</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩,</span> <span class=\"n\">hu</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">mem_image2_of_mem</span> <span class=\"n\">hs</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩,</span> <span class=\"n\">hu</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and then change the prod theorem to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">IsTopologicalBasis.induced</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsTopologicalBasis</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">induced</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">preimage</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.inducing</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">induced</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inducing_induced</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">IsTopologicalBasis.prod</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B₁</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span>\n    <span class=\"o\">{</span><span class=\"n\">B₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">B₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">IsTopologicalBasis</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsTopologicalBasis</span> <span class=\"o\">(</span><span class=\"n\">image2</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">×ˢ</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">B₁</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h₁.induced</span> <span class=\"n\">Prod.fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inf</span> <span class=\"o\">(</span><span class=\"n\">h₂.induced</span> <span class=\"n\">Prod.snd</span><span class=\"o\">)</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">image2_image_left</span><span class=\"o\">,</span> <span class=\"n\">image2_image_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 421216348,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707820514
    },
    {
        "content": "<p>Did anyone make a PR out of Junyan's version already? If not I'll open a PR with this and other cleanups in this file.</p>",
        "id": 421216437,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707820556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inf.20of.20a.20pair.20of.20topologies/near/421216437\">said</a>:</p>\n<blockquote>\n<p>Did anyone make a PR out of Junyan's version already? If not I'll open a PR with this and other cleanups in this file.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span>  I've been experimenting with it locally, but have done nothing towards preparing a PR, so I'd be very happy for you to go ahead.</p>",
        "id": 421299463,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1707848231
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10732\">#10732</a></p>",
        "id": 422308557,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708377830
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lawson_basis</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">image2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"bp\">⇑</span><span class=\"n\">WithLower.toLower</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">x</span> <span class=\"bp\">∩</span> <span class=\"bp\">⇑</span><span class=\"n\">WithScott.toScott</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">IsLower.lowerBasis</span> <span class=\"o\">(</span><span class=\"n\">WithLower</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">WithScott</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">U</span><span class=\"o\">})</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">isTopologicalBasis</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace.IsTopologicalBasis</span> <span class=\"o\">(</span><span class=\"n\">lawson_basis</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lawson_basis</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">IsTopologicalBasis.inf_induced</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">IsLower.isTopologicalBasis</span>\n    <span class=\"o\">(</span><span class=\"n\">TopologicalSpace.isTopologicalBasis_opens</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">WithScott</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"n\">WithLower.toLower</span> <span class=\"n\">WithScott.toScott</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">topology_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lawson</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">congrArg₂</span> <span class=\"n\">Inf.inf</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"n\">letI</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">lower</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">IsLower.withLowerHomeomorph</span> <span class=\"n\">α</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">(</span><span class=\"n\">lower</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">inducing.induced</span>\n  <span class=\"n\">letI</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">scott</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">IsScott.withScottHomeomorph</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">scott</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">inducing.induced</span>\n</code></pre></div>",
        "id": 423295975,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1708899249
    }
]