[
    {
        "content": "<p>I'm having problems finding the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">tsum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_eq_zero_iff#doc\">docs#tsum_eq_zero_iff</a>, which looks close, but needs a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CanonicallyOrderedAddCommMonoid#doc\">docs#CanonicallyOrderedAddCommMonoid</a> as the target type.</p>",
        "id": 409454792,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703188050
    },
    {
        "content": "<p>My attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_eq_zero_iff_of_summable_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderedAddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderClosedTopology</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tsum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">H</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">hf₀</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hn.symm</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hn.trans_le</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_tsum</span> <span class=\"n\">hf</span> <span class=\"n\">n</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">hf₀</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">convert</span> <span class=\"n\">tsum_zero</span> <span class=\"k\">with</span> <span class=\"n\">n</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>But it feels like this is missing from Mathlib...</p>",
        "id": 409456102,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703188632
    },
    {
        "content": "<p>One could convert to an integral and use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.integral_eq_zero_iff_of_nonneg#doc\">docs#MeasureTheory.integral_eq_zero_iff_of_nonneg</a> , or convert to <code>ENNReal</code> and use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal.tsum_eq_zero#doc\">docs#ENNReal.tsum_eq_zero</a></p>",
        "id": 409456824,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703188922
    },
    {
        "content": "<p>Yeah I was going to suggest to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_eq_zero_iff#doc\">docs#tsum_eq_zero_iff</a> and to convert to <code>NNReal</code></p>",
        "id": 409456958,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703188956
    },
    {
        "content": "<p>I think <code>NNReal</code> should satisfy all the assumptions of that lemma.</p>",
        "id": 409456999,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703188972
    },
    {
        "content": "<p>Does this give a nicer proof?</p>",
        "id": 409457050,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703188989
    },
    {
        "content": "<p>I can see you are attracted to the golfing side of Mathlib. Don't resist, do it for real:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">·</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">H</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">H.2.symm.lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">hf₀</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">trans_le</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_tsum</span> <span class=\"n\">hf</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">hf₀</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span>\n</code></pre></div>",
        "id": 409457477,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703189199
    },
    {
        "content": "<p>I'm not such a golf pro but here is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tsum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">hsum</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.ofReal_tsum_of_nonneg</span> <span class=\"n\">hf₀</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hsum</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hf₀</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsum_congr</span> <span class=\"n\">h0</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 409457864,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703189411
    },
    {
        "content": "<p>But my version is more general <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 409457968,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703189483
    },
    {
        "content": "<p>Slightly more golfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tsum_eq_zero_iff_of_summable_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderedAddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderClosedTopology</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tsum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">tsum_zero</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">H</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">hf₀</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hn.symm</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">trans_le</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_tsum</span> <span class=\"n\">hf</span> <span class=\"n\">n</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">hf₀</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span>\n</code></pre></div>",
        "id": 409458132,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703189577
    }
]