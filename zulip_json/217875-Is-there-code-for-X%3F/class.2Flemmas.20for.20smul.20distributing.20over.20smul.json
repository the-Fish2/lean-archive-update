[
    {
        "content": "<p>i have three instances of SMul, and i'd like to use the fact that these are related via one distributing over another:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">I</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulAction</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"c1\">-- u • v = fun i =&gt; ↑u * (v i)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">RingAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"c1\">-- f • v := fun i =&gt; f (v i)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">RingAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"c1\">-- f • u := ↑(f ↑u)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ringaut_smul_unit_distrib</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">RingAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">RingAut.smul_def</span><span class=\"o\">]</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f.map_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>i'd like to know if there is some class i can use to lift this fact to functions <code>d: I -&gt; Kˣ</code></p>",
        "id": 435890864,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714323020
    },
    {
        "content": "<p>i can imagine some kind of <code>SMulDistribSMulClass</code> would be used:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">SMulDistribSMulClass</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_distrib</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instSMulDistribSMulClass</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">SMulDistribSMulClass</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)]:</span>\n    <span class=\"n\">SMulDistribSMulClass</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_distrib</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">SMulDistribSMulClass.smul_distrib</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instSMulDistribSMulClass'</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMulDistribSMulClass</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulDistribSMulClass</span> <span class=\"n\">A</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_distrib</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply'</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">SMulDistribSMulClass.smul_distrib</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instSMulDistribSMulClass''</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMulDistribSMulClass</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulDistribSMulClass</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_distrib</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply'</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">SMulDistribSMulClass.smul_distrib</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 435893082,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714325206
    },
    {
        "content": "<p>can someone point out what's going on here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- #synth IsScalarTower (RingAut K) K K</span>\n<span class=\"c1\">-- #synth SMulCommClass (RingAut K) K K</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulDistribMulAction</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulDistribMulAction</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">g</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">smul_mul'</span><span class=\"o\">,</span> <span class=\"n\">Units.mul_inv</span><span class=\"o\">,</span> <span class=\"n\">smul_one</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">smul_mul'</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_one</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">smul_mul</span> <span class=\"n\">g</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">smul_mul'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">smul_one</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">smul_one</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMulDistribSMulClass</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_distrib</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">MulDistribMulAction.instSMulDistribSmulClass</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulDistribMulAction</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulDistribSMulClass</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_distrib</span> <span class=\"n\">a</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_mul'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulDistribMulAction</span> <span class=\"o\">(</span><span class=\"n\">RingAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMulDistribSMulClass</span> <span class=\"o\">(</span><span class=\"n\">RingAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">SMulDistribSMulClass</span> <span class=\"o\">(</span><span class=\"n\">RingAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">MulDistribMulAction.instSMulDistribSmulClass</span> <span class=\"o\">(</span><span class=\"n\">RingAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span>\n    <span class=\"c1\">-- failed to unify</span>\n    <span class=\"c1\">--   SMulDistribSMulClass (RingAut K) Kˣ Kˣ</span>\n    <span class=\"c1\">-- with</span>\n    <span class=\"c1\">--   SMulDistribSMulClass (RingAut K) Kˣ Kˣ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">MulDistribMulAction.instSMulDistribSmulClass</span> <span class=\"o\">(</span><span class=\"n\">RingAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"c1\">-- foo.{u_1} {K : Type u_1} [inst✝ : Field K] : SMulDistribSMulClass (RingAut K) Kˣ Kˣ</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMulDistribSMulClass</span> <span class=\"o\">(</span><span class=\"n\">RingAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 435895176,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714327125
    },
    {
        "content": "<p>I think there is a bug in the error message generation there; I thought it was supposed to automatically add <code>@</code>s to make the differing arguments visible</p>",
        "id": 435907076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714336439
    },
    {
        "content": "<p>Either way, if you click on the terms in the infoview you should be able to track down the issue</p>",
        "id": 435907124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714336473
    },
    {
        "content": "<p>it seems to be having problems with the fact that <code>K</code> has commutative multiplication...<br>\nit fails with <code>CommMonoid K</code>, but succeeds with <code>Monoid K</code>...</p>",
        "id": 435908012,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714337354
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 435908171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714337519
    },
    {
        "content": "<p>I am happy to look at this further tomorrow morning if someone doesn't beat me to it, but am not at lean right now: this is very likely either a problem I've seen before, or one of my own creation</p>",
        "id": 435908187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714337523
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Equiv</span>\n<span class=\"c1\">-- import Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Init.Tactics</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Units.instMulDistribMulAction'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulDistribMulAction</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulDistribMulAction</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">g</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">smul_mul'</span><span class=\"o\">,</span> <span class=\"n\">Units.mul_inv</span><span class=\"o\">,</span> <span class=\"n\">smul_one</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">smul_mul'</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_one</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">smul_mul</span> <span class=\"n\">g</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">smul_mul'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">smul_one</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">smul_one</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">class</span> <span class=\"n\">SMulDistribSMulClass</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_distrib</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">MulDistribMulAction.instSMulDistribSmulClass</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulDistribMulAction</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulDistribSMulClass</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_distrib</span> <span class=\"n\">a</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_mul'</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulDistribMulAction</span> <span class=\"o\">(</span><span class=\"n\">MulAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMulDistribSMulClass</span> <span class=\"o\">(</span><span class=\"n\">MulAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulDistribMulAction</span> <span class=\"o\">(</span><span class=\"n\">MulAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMulDistribSMulClass</span> <span class=\"o\">(</span><span class=\"n\">MulAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 435908544,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714337870
    },
    {
        "content": "<p>This is the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Monoid.toMulAction</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Units.mulAction'</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- fails</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Monoid.toMulAction</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Units.mulAction'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- ok</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 435909251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714338515
    },
    {
        "content": "<p>I think this is what was being discussed in the other thread I linked to before</p>",
        "id": 435909262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714338541
    },
    {
        "content": "<p>ah yes, that seems right...</p>",
        "id": 435909495,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714338803
    },
    {
        "content": "<p>so, for posterity, the issue is with the following definitional difference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">):</span>\n  <span class=\"n\">u₁</span> <span class=\"bp\">•</span> <span class=\"n\">u₂</span> <span class=\"bp\">=</span> <span class=\"o\">⟨(</span><span class=\"n\">u₁</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">u₂</span><span class=\"o\">,((</span><span class=\"n\">u₁</span><span class=\"bp\">⁻¹</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">):</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">u₂</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">):</span>\n  <span class=\"n\">u₁</span> <span class=\"bp\">•</span> <span class=\"n\">u₂</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">u₁</span> <span class=\"bp\">*</span> <span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">u₁</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 435910698,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714340041
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/units.2Emul_action'.20diamond/near/246400399\">Here's</a> the old thread</p>",
        "id": 435911892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714341159
    }
]