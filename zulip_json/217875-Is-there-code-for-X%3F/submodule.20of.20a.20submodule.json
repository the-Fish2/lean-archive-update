[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- B as a submodule of M?</span>\n</code></pre></div>",
        "id": 239703440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621579152
    },
    {
        "content": "<p>Is it something like <code>B.map A.incl</code>?</p>",
        "id": 239703946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621579509
    },
    {
        "content": "<p>For subgroups the morphism is <code>A.subtype</code></p>",
        "id": 239705048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621580290
    },
    {
        "content": "<p>That seems to be the preferred spelling, given how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.equiv_subtype_map\">docs#submodule.equiv_subtype_map</a> is stated</p>",
        "id": 239712907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621584933
    },
    {
        "content": "<p>Reviving this thread after two years because I exactly need this construction, but now in Lean4 rather than Lean3.  Here I discovered a weird quirk.  While the general construction</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">B.map</span> <span class=\"n\">A.subtype</span>\n</code></pre></div>\n<p>works fine, the specialization to the integers does not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">ℤ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">B.map</span> <span class=\"n\">A.subtype</span>\n<span class=\"c1\">-- failed to synthesize instance SemilinearMapClass (↥A →ₗ[ℤ] M) ?m.2597 (↥A) M</span>\n</code></pre></div>\n<p>I can fix it, but only with a weird empty application of <code>convert</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">ℤ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">convert</span> <span class=\"n\">B.map</span> <span class=\"o\">(</span><span class=\"n\">σ₁₂</span> <span class=\"o\">:=</span> <span class=\"n\">RingHom.id</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">A.subtype</span>\n    <span class=\"n\">convert</span>\n</code></pre></div>\n<p>What is going on here??</p>",
        "id": 410567369,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703964511
    },
    {
        "content": "<p>My guess (not tested): Lean fails to unify universes.</p>",
        "id": 410567399,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703964561
    },
    {
        "content": "<p>I'll try to test it now.</p>",
        "id": 410567415,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703964587
    },
    {
        "content": "<p>My guess is there is an instance diamond with the <code>SemilinearMapClass</code> on the integers.  (Based on recent experience I am inclined to blame almost all weird behavior on instance diamonds.)</p>",
        "id": 410567601,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703964787
    },
    {
        "content": "<p>It looks like there is an instance diamond for <code>Module Int _</code></p>",
        "id": 410567623,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703964819
    },
    {
        "content": "<p>But <code>convert</code> fixes it because of a <code>Subsingleton</code> instance.</p>",
        "id": 410567631,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703964837
    },
    {
        "content": "<p>Ugh.  Is there a workaround that allows me to express <code>Submodule ℤ M</code> as a term, as opposed to merely giving a proof of existence?  Otherwise I can't proceed with my application.</p>",
        "id": 410567707,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703964917
    },
    {
        "content": "<p>You should not be assuming <code>[Module ℤ M]</code>. Lean can already derive it from <code>[AddCommGroup M]</code>.</p>",
        "id": 410567716,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703964933
    },
    {
        "content": "<p>Ah!  I got caught in this trap once before.</p>",
        "id": 410567786,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703964981
    },
    {
        "content": "<p>But wait, there is still a diamond issue here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">B.map</span> <span class=\"n\">A.subtype</span>\n<span class=\"c1\">-- failed to synthesize instance  SemilinearMapClass (↥A →+ M) ?m.2315 (↥A) M</span>\n</code></pre></div>",
        "id": 410567923,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703965138
    },
    {
        "content": "<p>You need <code>(A : Submodule Int M)</code></p>",
        "id": 410567948,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703965179
    },
    {
        "content": "<p>You can get one from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddSubgroup.toIntSubmodule#doc\">docs#AddSubgroup.toIntSubmodule</a>, eg <code>B.map A.toIntSubmodule.subtype</code></p>",
        "id": 410568010,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703965208
    },
    {
        "content": "<p>Or <code>A.subtype.toIntLinearMap</code></p>",
        "id": 410568175,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703965374
    },
    {
        "content": "<p>The latter may work a bit better with Lean 4 <code>simp</code>.</p>",
        "id": 410568228,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703965422
    },
    {
        "content": "<p>OK, to close my argument, I <em>think</em> I need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">B.map</span> <span class=\"n\">A.subtype.toIntLinearMap</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but <code>simp</code> didn't offer an obvious way out here.</p>",
        "id": 410568781,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703966025
    },
    {
        "content": "<p>(or I need some equivalence between<code>B</code> and <code>B.map A.subtype.toIntLinearMap</code>, if they aren't identical types).</p>",
        "id": 410568841,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703966067
    },
    {
        "content": "<p>That's an equality of types, which is almost never a good idea</p>",
        "id": 410568877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703966116
    },
    {
        "content": "<p>Yeah, ignore what I just said, I applied <code>congr</code> way too deep.</p>",
        "id": 410568890,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703966143
    },
    {
        "content": "<p>What I actually need is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">B.map</span> <span class=\"n\">A.subtype.toIntLinearMap</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but I might be able to do this one on my own.</p>",
        "id": 410569074,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703966340
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">B.map</span> <span class=\"n\">A.subtype.toIntLinearMap</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Submodule.equivMapOfInjective</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">Subtype.val_injective</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 410569104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703966394
    },
    {
        "content": "<p>OK, that worked, and closes my use case.  Thanks!</p>",
        "id": 410569312,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703966519
    },
    {
        "content": "<p>Or computably:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">B.map</span> <span class=\"n\">A.subtype.toIntLinearMap</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b.prop</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">map_add'</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_smul'</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span>\n    <span class=\"o\">⟨</span><span class=\"n\">a.val</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">a.prop</span><span class=\"o\">⟩,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 410570017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703967203
    }
]