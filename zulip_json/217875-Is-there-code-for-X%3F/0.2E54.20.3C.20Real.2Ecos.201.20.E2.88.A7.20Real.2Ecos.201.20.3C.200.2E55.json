[
    {
        "content": "<p>I'm updating course notes. Am I still correct to claim that \"Lean is not a calculator -- for example proving <code>0.54 &lt; Real.cos 1 ∧ Real.cos 1 &lt; 0.55</code> will probably be quite a difficult task\"? As far as I know there has been no progress on questions such as this since last year.</p>",
        "id": 410299369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703772740
    },
    {
        "content": "<p>Can't you use the first few terms of the series expansion, which is alternating, so gives upper/lower bounds? (Do we have that in mathlib?)</p>",
        "id": 410299989,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703773060
    },
    {
        "content": "<p>I guess, but I suppose what I'm really angling for is some kind of <code>:= by approx</code> tactic (which I think has been discussed before, but I'm unclear about what the scope should be).</p>",
        "id": 410300517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703773274
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/New.20.60by_approx.60.20tactic.20for.20proving.20real.20inequalities\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/New.20.60by_approx.60.20tactic.20for.20proving.20real.20inequalities</a> <span class=\"user-mention\" data-user-id=\"650732\">@Sebastian Zimmer</span>  is working on this, it seems</p>",
        "id": 410300992,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703773481
    },
    {
        "content": "<p>Your answer is quite annoying Alex, because I'm struggling to think of a harder question :-) For <code>6.082 &lt; Real.sqrt 37</code> you can just square both sides, for sin and cos you can use the trick you mentioned, exp you can use the power series for lower bounds (and probably there's a simple trick for upper bounds), for log you can use the inverse of exp, and I'm running out of functions. What about the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>-invariant? :-) Pari-GP can do it...</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>? ellj((1+sqrt(-163))/2)\n%3 = -262537412640768000.00000000000000000000\n?\n</code></pre></div>",
        "id": 410301070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703773533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/0.2E54.20.3C.20Real.2Ecos.201.20.E2.88.A7.20Real.2Ecos.201.20.3C.200.2E55/near/410300992\">said</a>:</p>\n<blockquote>\n<p><a href=\"#narrow/stream/287929-mathlib4/topic/New.20.60by_approx.60.20tactic.20for.20proving.20real.20inequalities\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/New.20.60by_approx.60.20tactic.20for.20proving.20real.20inequalities</a> <span class=\"user-mention silent\" data-user-id=\"650732\">Sebastian Zimmer</span>  is working on this, it seems</p>\n</blockquote>\n<p>Oh nice! Somehow I'd missed this. I've added my <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> :-)</p>",
        "id": 410301270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703773627
    },
    {
        "content": "<p>Aren't the collection of all such \"tricks\" exactly how calculators to compute these quantities work, in the end they are also programmed by hand to compute good approximations to values of special functions?</p>",
        "id": 410301506,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703773750
    },
    {
        "content": "<p>If you want to give them a hard problem, you could ask them to find BB(5). <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> But not even calculators / computers can do that.</p>",
        "id": 410308464,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703777055
    },
    {
        "content": "<p>Or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H(2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span> <a href=\"https://en.wikipedia.org/wiki/Hilbert%27s_sixteenth_problem#The_second_part_of_Hilbert's_16th_problem\">https://en.wikipedia.org/wiki/Hilbert%27s_sixteenth_problem#The_second_part_of_Hilbert's_16th_problem</a></p>",
        "id": 410385709,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703822967
    },
    {
        "content": "<p>In the absence of <code>by approx</code>, it looks something like this. (All those local <code>simp</code> lemmas for powers of <code>I</code> illustrate something that's got worse with Lean 4 - we've lost the effects of <code>I_pow_bit0</code> and <code>I_pow_bit1</code> without a replacement to get <code>simp</code> simplifying <code>I</code> to the power of natural number literals automatically.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">I_pow_3</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_three</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">I_pow_4</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">I_pow_5</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"n\">I</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">I_pow_6</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">I_pow_7</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">I</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux1</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">Complex.exp</span> <span class=\"n\">I</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">389</span> <span class=\"bp\">/</span> <span class=\"mi\">720</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4241</span> <span class=\"bp\">/</span> <span class=\"mi\">5040</span><span class=\"o\">)))</span> <span class=\"bp\">≤</span> <span class=\"mi\">35840</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">exp_bound</span> <span class=\"n\">abs_I.le</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">Finset.range</span><span class=\"o\">,</span> <span class=\"n\">Nat.factorial</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">ring_nf</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux2</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">Real.cos</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">389</span> <span class=\"bp\">/</span> <span class=\"mi\">720</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">35840</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">aux1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">one_mul</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">cos_add_sin_I</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">abs_re_le_abs</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ofReal_one</span><span class=\"o\">,</span> <span class=\"n\">cos_ofReal_re</span><span class=\"o\">,</span> <span class=\"n\">sin_ofReal_im</span><span class=\"o\">,</span> <span class=\"n\">neg_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cos_one</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">54</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Real.cos</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">Real.cos</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">abs_le'.1</span> <span class=\"n\">aux2</span><span class=\"o\">)</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 410483152,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1703887772
    },
    {
        "content": "<p>Thank you Joseph! I chose this example in my course notes because I thought it would be much worse than this!</p>",
        "id": 410530635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703930320
    },
    {
        "content": "<p>Btw, the proofs of the <code>I_pow_j</code> lemmas could also all be <code>simp [pow_succ]</code> (and are not needed for the rest to work).</p>",
        "id": 410532099,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1703931416
    },
    {
        "content": "<p>Perhaps we should have <code>I ^ (succ (succ n)) = -I ^ n</code> as a simp lemma?</p>",
        "id": 410532649,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703931981
    },
    {
        "content": "<p>Eric, I like your suggestion!  With that, the proofs of the <code>I_pow_j</code> lemmas are <code>by simp</code>, of course.</p>",
        "id": 410533083,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1703932478
    },
    {
        "content": "<p>So this does work with <code>pow_succ</code> included in the lemmas passed to <code>norm_num</code> instead of adding all those separate <code>I_pow_</code> lemmas.</p>\n<p>I'm not sure exactly what if any kinds of expressions involving <code>I</code> <code>norm_num</code> is meant to work with (given the unlimited scope of expressions mathematicians may want to be evaluated exactly, many of which have definitely been said to be outside the scope of <code>norm_num</code>), but being able to do exact evaluations of expressions involving <code>I</code>, integer literals and field operations (including integer powers), producing a result in some canonical form such as \"rational + rational * I\", does seem like it would be useful for some tactic (independent of an approximation tactic). (It's definitely what I wanted to do when evaluating the result given by a particular use of <code>exp_bound</code> in order to work out what the statement of <code>aux1</code> should be.)</p>",
        "id": 410580664,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1703979059
    },
    {
        "content": "<p>norm_num is, as far as I can tell, presently not great at complex numbers.</p>",
        "id": 410580985,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703979439
    },
    {
        "content": "<p>Should it be? Is it in scope for <code>norm_num</code> to be able to prove e.g. <code>I ^ 5 / 2 + I ^ 7 / 3 = I / 6</code> without needing to pass any extra arguments to <code>norm_num</code>? Or is that beyond the scope of what's considered a \"number\" that it should normalize?</p>",
        "id": 410581277,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1703979774
    }
]