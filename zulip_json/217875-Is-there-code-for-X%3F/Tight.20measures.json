[
    {
        "content": "<p>Hi, I've noticed that tight measures are missing from mathlib, is anyone working on these? Otherwise I'd be happy to develop some API!</p>",
        "id": 434821260,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713811273
    },
    {
        "content": "<p>iirc <span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span> was working on Prokhorov's theorem.</p>",
        "id": 434924812,
        "sender_full_name": "Jason KY.",
        "timestamp": 1713858675
    },
    {
        "content": "<p>I haven't really started working on tightness per se! It would be great to see these developed!</p>",
        "id": 435019695,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1713888819
    },
    {
        "content": "<p>The main thing that I planned was Prokhorov's theorem via Riesz-Markov-Kakutani on compact spaces plus Banach-Alaoglu. But I have not done it (one significant reason is that I had not yet gotten to PRing the Riesz-Markov-Kakutani). And even excluding Prokhorov's theorem, there would be a fair amount of API about tight measures that should be added.</p>\n<p>(I do have a personal preference for the Prokhorov proof along the above mentioned route, but if you end up doing that via another route, then it is still better to have in Mathlib than not have it at all! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 435019919,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1713888888
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"673728\">@Josha Dekker</span>, please go ahead if you want to develop tightness!</p>\n<p>We should just slightly coordinate regarding the remaining parts of weak convergence theory. The Lévy-Prokhorov metric is still in an open PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/11549\">#11549</a>. There are some other parts of the weak convergence API that I plan to fill in as soon as I have time (next week when I'm back from a conference should be my semester's almost last two exam gradings so I expect to have more time in relatively near future). Also one portmanteau implication is sequential in its current formulation, and I intend to fix this. It doesn't really matter when one has metrizability, but it is not mathlib-stylish as it is. I had something on cdf's, but I might have to rewrite to connect better to what exists... Also if that overlaps with your tightness plans, you can do the relevant cdf API, too.</p>",
        "id": 435019965,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1713888902
    },
    {
        "content": "<p>...and once we have <code>Measure.real</code> (from the PFR project) I would like to clean up some of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.ProbabilityMeasure#doc\">docs#MeasureTheory.ProbabilityMeasure</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.FiniteMeasure#doc\">docs#MeasureTheory.FiniteMeasure</a> with it.</p>",
        "id": 435021040,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1713889217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tight.20measures/near/435019965\">said</a>:</p>\n<blockquote>\n<p>So <span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span>, please go ahead if you want to develop tightness!</p>\n<p>We should just slightly coordinate regarding the remaining parts of weak convergence theory. The Lévy-Prokhorov metric is still in an open PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/11549\">#11549</a>. There are some other parts of the weak convergence API that I plan to fill in as soon as I have time (next week when I'm back from a conference should be my semester's almost last two exam gradings so I expect to have more time in relatively near future). Also one portmanteau implication is sequential in its current formulation, and I intend to fix this. It doesn't really matter when one has metrizability, but it is not mathlib-stylish as it is. I had something on cdf's, but I might have to rewrite to connect better to what exists... Also if that overlaps with your tightness plans, you can do the relevant cdf API, too.</p>\n</blockquote>\n<p>No worries, I'm not necessarily planning to tackle Prokhorov at this point. I just noted tightness was missing, and thought it would be a nice opportunity to familiarise myself more with this region of Mathlib</p>",
        "id": 435021642,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713889404
    },
    {
        "content": "<p>I will just write up some general tightness API, but if you have special orders, let me know and I'll see what I can do (assuming my own research permits me the time...)</p>",
        "id": 435021821,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713889453
    },
    {
        "content": "<p>Sounds like the two of you should be reviewing each other's PRs, so we can get them in quicker :)</p>",
        "id": 435022767,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713889755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tight.20measures/near/435022767\">said</a>:</p>\n<blockquote>\n<p>Sounds like the two of you should be reviewing each other's PRs, so we can get them in quicker :)</p>\n</blockquote>\n<p>Sure, feel free to tag me, <span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span>! I'm not a very experienced reviewer at this point, but I'm happy to chip in!</p>",
        "id": 435023083,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713889843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tight.20measures/near/435022767\">said</a>:</p>\n<blockquote>\n<p>Sounds like the two of you should be reviewing each other's PRs, so we can get them in quicker :)</p>\n</blockquote>\n<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I agree! (...but for a week or so still, I doubt I would get any reviewing done. Hopefully better in near future!)</p>",
        "id": 435023256,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1713889907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span> and <span class=\"user-mention\" data-user-id=\"673728\">@Josha Dekker</span>, have you seen <a href=\"https://github.com/leanprover-community/mathlib4/pull/12290\">#12290</a> about RMK? It's not complete yet, and there's still some work to be done to get it into a good form, but it's a start on getting a more general version.</p>",
        "id": 435037681,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713894439
    },
    {
        "content": "<p>yes, it would certainly be good to have this.  I think this is going to depend on having a type class for compactly supported continuous functions, judging from the conversations, so I’ll keep an eye out for this work!</p>",
        "id": 435075957,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713910522
    },
    {
        "content": "<p>(Pre-)Tight measures are defined in  <a href=\"https://github.com/leanprover-community/mathlib4/pull/12394\">#12394</a>. This is very much WIP. I'm sharing as I welcome suggestions on missing parts of the API. Currently it is very bare-bones. Also, if anyone has a good suggestion where my lemma's <code>aux1</code> and <code>aux2</code> should go/are in Mathlib, I'm happy to hear this!</p>",
        "id": 435142202,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713948901
    },
    {
        "content": "<p>I don't think we have the notion of <code>Separable Measures</code> yet, right? (These are measures that assign full measure to a separable set). I'll make a separate PR for these, along with some very small API. This property is weaker than tightness on metric spaces but equivalent on complete metric spaces (which is occasionally useful).</p>",
        "id": 435156960,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713953863
    },
    {
        "content": "<p>Separable measures are in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12396\">#12396</a>, but I'm a bit short on inspiration about what API I can write for them that isn't \"infer IsSeparable from IsTight\" (all of which need to be in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12394\">#12394</a>, as I think the file on tightness should import the file on separable, not vice versa)</p>",
        "id": 435159630,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713954965
    },
    {
        "content": "<p>I guess that you don't know what API you should prove for separable measures because you don't have any use for those measures (yet?). If you don't need them, the best course of action might simply be to not add them, and wait until you need them for something. A definition without API is useless, and a definition that is not tested in an application might be a \"wrong\" definition, in the sense that the way it is formalized is unusable. Of course I am not saying that those separable measures are useless in general (I don't know about that): I am only remarking that they seem useless to you for now.</p>\n<p>In contrast, you have apparently no trouble finding stuff to add about tight measures because there is a clear use case discussed in this thread. This is in my opinion a much better way to develop the library: pick a goal and then add the missing definitions and theorems that are useful towards that goal, rather than add something just because it's a definition that exists in some book and that is not in mathlib yet.</p>",
        "id": 435178627,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1713961874
    },
    {
        "content": "<p>Yes, in a sense that is correct, although tight measures and separable measures have some interplay: on complete metric spaces, Borel measures are pretight iff tight iff separable. It is furthermore consistent with ZF that all Borel measures on metric spaces are separable. </p>\n<p>Along this, we have the advantage that separable measures also have nice characterisations for weak convergence (where we only have to consider fewer test functions). Also, if I recall correctly, general versions of convergence results like Slutsky require the limiting distribution to be separable.</p>",
        "id": 435180462,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713962529
    },
    {
        "content": "<p>But I agree that building API purely for the sake of building API is not the way to go. I'm putting my definition of Separable measures in  <a href=\"https://github.com/leanprover-community/mathlib4/pull/12396\">#12396</a> for now, as it sometimes is convenient to move from tightness to separability of a measure.</p>",
        "id": 435180719,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713962631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tight.20measures/near/435180462\">said</a>:</p>\n<blockquote>\n<p>Yes, in a sense that is correct, although tight measures and separable measures have some interplay: on complete metric spaces, Borel measures are pretight iff tight iff separable. It is furthermore consistent with ZF that all Borel measures on metric spaces are separable. </p>\n</blockquote>\n<p>I don't know anything about separable measures, but I don't see how this statement could be true. Take a very big Hilbert space, and define a measure <code>mu</code> by <code>mu s = 0</code> is <code>s</code> is contained in a countable union of balls of radius <code>1</code>, and <code>mu s = \\infty</code> otherwise. This is a Borel measure on a metric space, but it is not separable if I understand your definition correctly.</p>",
        "id": 435194130,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1713966480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tight.20measures/near/435194130\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tight.20measures/near/435180462\">said</a>:</p>\n<blockquote>\n<p>Yes, in a sense that is correct, although tight measures and separable measures have some interplay: on complete metric spaces, Borel measures are pretight iff tight iff separable. It is furthermore consistent with ZF that all Borel measures on metric spaces are separable. </p>\n</blockquote>\n<p>I don't know anything about separable measures, but I don't see how this statement could be true. Take a very big Hilbert space, and define a measure <code>mu</code> by <code>mu s = 0</code> is <code>s</code> is contained in a countable union of balls of radius <code>1</code>, and <code>mu s = \\infty</code> otherwise. This is a Borel measure on a metric space, but it is not separable if I understand your definition correctly.</p>\n</blockquote>\n<p>You are absolutely right, I should've specified that I'm assuming here that we are looking at finite measures (typically, probability measures even)</p>",
        "id": 435195004,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713966715
    },
    {
        "content": "<p>just a very brief update: I’ve defined separable measures, pretight measures and tight measures so far, and I’m proving the necessary relationships between them while I go to make sure the definitions are sensible. I’m literally an epsilon away from the Ulam tightness theorem, which is the last ingredient I need for showing that under some niceness conditions, separable measures are in fact right. I didn’t commit this yet, but I’m hoping to finish that tomorrow/friday, so that the PR can be up for review! Uniform tightness/asymptotic tightness are deferred for now, as we had some discussions in a different thread about how best to formalize them in terms of filters!</p>",
        "id": 436578710,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714600414
    },
    {
        "content": "<p>For uniform and asymptotic tightness (and for tightness of a single measure as well), a filtery definition (from that other thread) could be like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsTight</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Tendsto</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smallSets</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsUniformlyTight</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">TendstoUniformly</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">μ</span> <span class=\"n\">i</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smallSets</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsTightAtFilter</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">TendstoUniformlyOnFilter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">μ</span> <span class=\"n\">i</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smallSets</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>except the last two don't work now because of a missing <code>UniformSpace</code> instance on <code>ENNReal</code> (and the last one might not be what you want).</p>",
        "id": 436580097,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714601189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tight.20measures/near/436580097\">said</a>:</p>\n<blockquote>\n<p>For uniform and asymptotic tightness (and for tightness of a single measure as well), a filtery definition (from that other thread) could be like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsTight</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Tendsto</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smallSets</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsUniformlyTight</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">TendstoUniformly</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">μ</span> <span class=\"n\">i</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smallSets</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsTightAtFilter</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">TendstoUniformlyOnFilter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">μ</span> <span class=\"n\">i</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smallSets</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>except the last two don't work now because of a missing <code>UniformSpace</code> instance on <code>ENNReal</code> (and the last one might not be what you want).</p>\n</blockquote>\n<p>Thanks! I’ll wait for that instance to land then, then I’ll start playing around with these definitions!</p>",
        "id": 436619751,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714628190
    },
    {
        "content": "<p>Hi, <a href=\"https://github.com/leanprover-community/mathlib4/pull/12394\">#12394</a> is up for review and defines <code>IsSeparable</code>, <code>IsPretight</code> and <code>IsTight</code> and shows some relationships between them. Main result is Ulam's tightness theorem (and a strengthened version that only requires <code>IsSeparable</code> rather than <code>SeparableSpace</code>. It is still building, but I don't expect any problems there! I think most results are straightforward, although some proofs are a bit longish: I've used 4 private lemma's to break up the work a bit, but still Ulam's tightness theorem and its strengthened form require some legwork.</p>",
        "id": 437012687,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714820634
    },
    {
        "content": "<p>Still pushing for the use of filters: e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">of_compactSpace</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompactSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsTight</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">IsTight</span><span class=\"o\">,</span> <span class=\"n\">Tendsto</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">pure_le_nhds</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 437055607,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714860528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tight.20measures/near/437055607\">said</a>:</p>\n<blockquote>\n<p>Still pushing for the use of filters: e.g.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">of_compactSpace</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompactSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsTight</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">IsTight</span><span class=\"o\">,</span> <span class=\"n\">Tendsto</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">pure_le_nhds</span> <span class=\"mi\">0</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks, I’ll try and see soon if I can refactor some of them in terms of filters!</p>",
        "id": 437055813,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714860767
    },
    {
        "content": "<p>Do you think (almost) all proofs should be based on filters if (reasonably) possible? Or do you think that it is okay to just use the epsilon-based definition if it is more convenient?</p>",
        "id": 437055894,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1714860883
    },
    {
        "content": "<p>I guess whatever is more convenient works in proofs, but using filters tends to make proofs easier. Typically, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hμ</span> <span class=\"o\">:</span> <span class=\"n\">IsTight</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hν</span> <span class=\"o\">:</span> <span class=\"n\">IsTight</span> <span class=\"n\">ν</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsTight</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"bp\">+</span> <span class=\"n\">ν</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hμ.add</span> <span class=\"n\">hν</span>\n</code></pre></div>\n<p>(which is essentially your version) is much easier than slicing epsilons and taking unions :-)</p>",
        "id": 437056209,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1714861248
    },
    {
        "content": "<p>Is there any news on this PR? We are in the process of proving that algebras which separate points are separating (in a complete and separable metric space). One step requires to use that single finite measures are tight.</p>",
        "id": 446559119,
        "sender_full_name": "Peter Pfaffelhuber",
        "timestamp": 1719220707
    },
    {
        "content": "<p>I’m a bit swamped by work for the next few weeks (research, thesis supervision, etc), so I won’t be able to properly integrate the final remarks before late July, I think. It shouldn’t be too hard, but I can’t afford to make the headspace for Lean right now. Please feel free to pick what you want from the PR/incorporate the remaining comments there! I’m happy to advise!</p>",
        "id": 446560760,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1719221052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"572064\">@Peter Pfaffelhuber</span> if I do manage to find a good opportunity anyway I'll make sure to post here first, but I don't expect that to be the case in the next two weeks for sure... I think the details that are still open are not too tricky. Perhaps you find Ulam's tightness theorem useful as well, that one is in there as well!</p>",
        "id": 446563384,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1719221613
    }
]