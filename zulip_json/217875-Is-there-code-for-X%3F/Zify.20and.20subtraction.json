[
    {
        "content": "<p>Is this lemma already in Mathlib?  It was annoying to prove, and <code>zify</code> was only mildly helpful.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_of_sub_of_nat_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span>\n  <span class=\"bp\">.</span> <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">max_eq_left</span> <span class=\"o\">(</span><span class=\"n\">sub_nonneg.mpr</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">norm_cast</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">max_eq_right</span> <span class=\"o\">(</span><span class=\"n\">sub_nonpos.mpr</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">norm_cast</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Related to this - would it make sense to make this lemma a <code>zify_simps</code> lemma, to be used when the simpler <code>zify_simps</code> lemmas <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.Zify.Nat.cast_sub_of_add_le#doc\">docs#Mathlib.Tactic.Zify.Nat.cast_sub_of_add_le</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.cast_sub_of_lt#doc\">docs#Nat.cast_sub_of_lt</a> are not available?  I find it much easier to manipulate the <code>max (a-b:ℤ) 0</code> expression than the <code>(a-b:ℕ)</code> expression.</p>\n<p>EDIT: similar questions could be raised for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_of_int_toNat_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int.toNat</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">le_or_lt</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rcases</span> <span class=\"n\">Int.eq_ofNat_of_zero_le</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Int.toNat_eq_zero.mpr</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 410789467,
        "sender_full_name": "Terence Tao",
        "timestamp": 1704166420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Nat.cast (Int.toNat _), max</p>",
        "id": 410794088,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704170717
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'max'<br>\nDid you mean <a href=\"https://loogle.lean-lang.org/?q=Nat.cast%20%28Int.toNat%20_%29%2C%20%22max%22\"><code>Nat.cast (Int.toNat _), \"max\"</code></a>, <a href=\"https://loogle.lean-lang.org/?q=Nat.cast%20%28Int.toNat%20_%29%2C%20Max.max\"><code>Nat.cast (Int.toNat _), Max.max</code></a>, or <a href=\"https://loogle.lean-lang.org/?q=Nat.cast%20%28Int.toNat%20_%29%2C%20max\">something else</a>?</p>",
        "id": 410794091,
        "sender_full_name": "loogle",
        "timestamp": 1704170718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Nat.cast (Int.toNat _), Max.max</p>",
        "id": 410794110,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704170745
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/Int/Lemmas.html#Int.toNat_eq_max\">Int.toNat_eq_max</a></p>",
        "id": 410794111,
        "sender_full_name": "loogle",
        "timestamp": 1704170745
    },
    {
        "content": "<p>It looks like the first lemma does not exist in the library.</p>",
        "id": 410794184,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704170831
    },
    {
        "content": "<p>Another proof using the <code>omega</code> tactic to avoid doing any heavy lifting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_of_sub_of_nat_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">max_def</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 410852418,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704205300
    }
]