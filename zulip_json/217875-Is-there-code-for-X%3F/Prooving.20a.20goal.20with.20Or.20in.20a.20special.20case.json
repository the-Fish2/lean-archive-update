[
    {
        "content": "<p>When i normally want to proove a goal that contains Or, I use the left or the right Tactic to proove just one of the Terms. But in this case I have a hypothesis h that says that a variable x is an element of a set S. My goal is that x is in Set B or in Set A. I cannot use the right or the left tactic because not every element in S is in A or in B. The actual proof I need this for has some dependencies, so it wouldn't make sense to include it here.<br>\nTo illustrate what I mean, here is a minimal example. (This can be proved with simp and apply? but this does not work for my actual proof)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">10</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_in_sets</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If you want to see the actual example look  <a href=\"http://188.34.190.13:3000/#project=banach-tarski&amp;file=.%2Fbanach_tarski%2FEquidecomposable.lean\">here</a>. Scroll down to rotate_A_B_eq_S at line 275. (ignore the rest of the code, it is a mess)</p>",
        "id": 425718454,
        "sender_full_name": "Christian K",
        "timestamp": 1710018217
    },
    {
        "content": "<p>Your goal is definitionally equal to <code>n &lt; 10 ∨ 10 ≤ n</code> so it can be proven with <code>exact Nat.lt_or_ge n 10</code>. However, in more complicated situations, you can use <code>by_cases h : n &lt; 10</code> which will create two goals, requiring you to prove the theorem separately when <code>h</code> is true and <code>h</code> is false.</p>",
        "id": 425719882,
        "sender_full_name": "Niels Voss",
        "timestamp": 1710019598
    },
    {
        "content": "<p>Ok thank you very much, this worked great. With this, I was able to proof that a circle is equidecomposable with a circle with a missing point.</p>",
        "id": 425721971,
        "sender_full_name": "Christian K",
        "timestamp": 1710021750
    }
]