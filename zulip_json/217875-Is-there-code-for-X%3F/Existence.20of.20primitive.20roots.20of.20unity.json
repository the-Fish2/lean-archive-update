[
    {
        "content": "<p>Are we really missing the assertion that there exists a primitive root of unity of order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> whenever <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is coprime to the characteristic of the field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and the correct polynomial splits in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>?</p>",
        "id": 413189844,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705421579
    },
    {
        "content": "<p>I don't think we have a lot of existence statement about primitive roots of unity, but it should be easy using the cyclotomic stuff</p>",
        "id": 413196035,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705423446
    },
    {
        "content": "<p>what cyclotomic stuff?</p>",
        "id": 413196672,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705423645
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.isRoot_cyclotomic_iff#doc\">docs#Polynomial.isRoot_cyclotomic_iff</a> says that the roots of the cyclotomic polynomial are precisely the primitive root of unity, so it depends by what you mean with \"the correct polynomial\"</p>",
        "id": 413196910,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705423715
    },
    {
        "content": "<p>Aha that's great!</p>",
        "id": 413196980,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705423734
    },
    {
        "content": "<p><code>[NeZero ↑n]</code> is a funny way of stating the characteristic condition :)</p>",
        "id": 413197528,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705423904
    },
    {
        "content": "<p>Yeah, I don't remember why it is spelled that way</p>",
        "id": 413197789,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705423985
    },
    {
        "content": "<p>I came up with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_isPrimitiveRoot</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">splits</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Splits</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">IsPrimitiveRoot</span> <span class=\"n\">ξ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ξ</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_root_of_splits</span> <span class=\"n\">_</span> <span class=\"n\">splits</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.degree_cyclotomic</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_cast</span>\n    <span class=\"k\">suffices</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span>  <span class=\"n\">n.totient</span> <span class=\"k\">from</span> <span class=\"n\">Nat.pos_iff_ne_zero.mp</span> <span class=\"n\">this</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.totient_pos</span>\n    <span class=\"n\">exact</span> <span class=\"n\">NeZero.pos_of_neZero_natCast</span> <span class=\"n\">F</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">isRoot_cyclotomic_iff</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 413207378,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705427023
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.degree_cyclotomic_pos#doc\">docs#Polynomial.degree_cyclotomic_pos</a> to golf it</p>",
        "id": 413208136,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705427235
    },
    {
        "content": "<p>BTW, I'm thinking about this now because of some discussion I had with <span class=\"user-mention\" data-user-id=\"668959\">@Qi Ge</span> yesterday about formalizing the cyclotomic character. Another question which should be answered is in what level of generality this should be done. </p>\n<p>One approach is to take a so-called \"truncation set\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> in the sense of big Witt vectors, which does not contain the characteristic of the field, and define a cyclotomic character associated to that. If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is the set of powers of a fixed prime <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> then this should give the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-adic cyclotomic character.</p>",
        "id": 413208432,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705427295
    },
    {
        "content": "<p>Do we have the fact that the cyclotomic polynomial is separable under the suitable characteristic assumptions?</p>",
        "id": 413211009,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705428122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Existence.20of.20primitive.20roots.20of.20unity/near/413211009\">said</a>:</p>\n<blockquote>\n<p>Do we have the fact that the cyclotomic polynomial is separable under the suitable characteristic assumptions?</p>\n</blockquote>\n<p>I coudn't find it, and came up with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">separable_cyclotomic</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Separable</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Polynomial.Separable.of_dvd</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Polynomial.cyclotomic.dvd_X_pow_sub_one</span> <span class=\"n\">n</span> <span class=\"n\">K</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.X_pow_sub_one_separable_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">NeZero.natCast_ne</span> <span class=\"n\">n</span> <span class=\"n\">K</span>\n</code></pre></div>",
        "id": 413214213,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705429209
    },
    {
        "content": "<p>Note that I have a branch called something like kbuzzard-cyclotomic-character which defines the mod n cyclo char but it broke after the simp refactor in core and fixing it is kind of low priority for me right now because I'm teaching and doing other things until April.</p>",
        "id": 413216106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705429963
    },
    {
        "content": "<p>I'll get to a computer and push the partial fixes I have</p>",
        "id": 413216148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705429986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> we do have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsPrimitiveRoot.autToPow#doc\">docs#IsPrimitiveRoot.autToPow</a></p>",
        "id": 413216190,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705430015
    },
    {
        "content": "<p>the issue <span class=\"user-mention\" data-user-id=\"668959\">@Qi Ge</span> and I were discussing is in packaging them together as <code>n</code> varies</p>",
        "id": 413216269,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705430044
    },
    {
        "content": "<p>Then there's the issue of continuity w.r.t. the profinite topology of the absolute Galois group, but I don't think that would be too hard</p>",
        "id": 413216348,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705430078
    },
    {
        "content": "<p>anyway, I have to come back to this later. I pushed the few lemmas I wrote to <a href=\"https://github.com/leanprover-community/mathlib4/tree/AT-cyclotomic\">branch#AT-cyclotomic</a></p>",
        "id": 413216516,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705430157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Existence.20of.20primitive.20roots.20of.20unity/near/413216190\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> we do have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsPrimitiveRoot.autToPow#doc\">docs#IsPrimitiveRoot.autToPow</a></p>\n</blockquote>\n<p>Yeah but this is a bit weird because it chooses a root of unity, which you don't have to do.</p>",
        "id": 413217043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705430384
    },
    {
        "content": "<p>On the other hand, I did write the file before I had realised that this existed. This is the current status of my code (which I think now compiles with master):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Copyright (c) 2023 Hanneke Wiersema. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Kevin Buzzard, Hanneke Wiersema</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.AlgebraicClosure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.RootsOfUnity.Basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n\n<span class=\"cm\"># The cyclotomic character</span>\n\n<span class=\"cm\">Let `L` be an integral domain and let `n : ℕ+` be a positive integer. If `μₙ` is the</span>\n<span class=\"cm\">group of `n`th roots of unity in `L` then any field automorphism `g` of `L`</span>\n<span class=\"cm\">induces an automorphism of `μₙ` which, being a cyclic group, must be of</span>\n<span class=\"cm\">the form `ζ ↦ ζ^j` for some integer `j = j(g)`, well-defined in `ZMod d`, with</span>\n<span class=\"cm\">`d` the cardinality of `μₙ`. The function `j` is a group homomorphism</span>\n<span class=\"cm\">`(L ≃+* L) →* ZMod d`.</span>\n\n<span class=\"cm\">Future work: If `L` is separably closed (e.g. algebraically closed) and `p` is a prime</span>\n<span class=\"cm\">number such that `p ≠ 0` in `L`, then applying the above construction with</span>\n<span class=\"cm\">`n = p^i` (noting that the size of `μₙ` is `p^i`) gives a compatible collection of</span>\n<span class=\"cm\">group homomorphisms `(L ≃+* L) →* ZMod (p^i)` which glue to give</span>\n<span class=\"cm\">a group homomorphism `(L ≃+* L) →* ℤₚ`; this is the `p`-adic cyclotomic character.</span>\n\n<span class=\"cm\">## Important definitions</span>\n\n<span class=\"cm\">Let `L` be an integral domain, `g : L ≃+* L` and `n : ℕ+`. Let `d` be the number of `n`th roots</span>\n<span class=\"cm\">of `1` in `L`.</span>\n\n<span class=\"cm\">* `ModularCyclotomicCharacter n : L ≃+* L →* ZMod d` sends `g` to the unique `j` such</span>\n<span class=\"cm\">   that `g(ζ)=ζ^j` for all `ζ : rootsOfUnity n L`.</span>\n\n<span class=\"cm\">## Todo</span>\n\n<span class=\"cm\">* Prove the compatibility of `ModularCyclotomicCharacter n` and `ModularCyclotomicCharacter m`</span>\n<span class=\"cm\">if `n ∣ m`.</span>\n\n<span class=\"cm\">* Define the cyclotomic character.</span>\n\n<span class=\"cm\">* Prove that it's continuous.</span>\n\n<span class=\"cm\">## Tags</span>\n\n<span class=\"cm\">cyclotomic character</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span>\n\n<span class=\"cm\">## The mod n theory</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rootsOfUnity.integer_power_of_ringEquiv</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃+*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">rootsOfUnity</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidHom.map_cyclic</span> <span class=\"o\">(</span><span class=\"n\">g.restrictRootsOfUnity</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMonoidHom</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"n\">Units.ext_iff.1</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">SetCoe.ext_iff.2</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hm</span> <span class=\"n\">t</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rootsOfUnity.integer_power_of_ringEquiv'</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃+*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">rootsOfUnity</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidHom.map_cyclic</span> <span class=\"o\">(</span><span class=\"n\">g.restrictRootsOfUnity</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMonoidHom</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"bp\">↦</span> <span class=\"n\">Units.ext_iff.1</span> <span class=\"bp\">$</span> <span class=\"n\">SetCoe.ext_iff.2</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩)⟩</span>\n\n<span class=\"sd\">/-- `ModularCyclotomicCharacter_aux g n` is a non-canonical auxiliary integer `j`,</span>\n<span class=\"sd\">   only well-defined modulo the number of `n`'th roots of unity in `L`, such that `g(ζ)=ζ^j`</span>\n<span class=\"sd\">   for all `n`'th roots of unity `ζ` in `L`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">ModularCyclotomicCharacter_aux</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃+*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">rootsOfUnity.integer_power_of_ringEquiv</span> <span class=\"n\">n</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span>\n\n<span class=\"c1\">-- the only thing we know about `ModularCyclotomicCharacter_aux g n`</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ModularCyclotomicCharacter_aux_spec</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃+*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">rootsOfUnity</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">ModularCyclotomicCharacter_aux</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">rootsOfUnity.integer_power_of_ringEquiv</span> <span class=\"n\">n</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span>\n\n<span class=\"sd\">/-- If `g` is a field automorphism of `L`, and `n : ℕ+`, then</span>\n<span class=\"sd\">  `ModularCyclotomicCharacter.toFun n g` is the `j : ZMod d` such that `g(ζ)=ζ^j` for all</span>\n<span class=\"sd\">  `n`'th roots of unity. Here `d` is the number of `n`th roots of unity in `L`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">ModularCyclotomicCharacter.toFun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃+*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">rootsOfUnity</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ModularCyclotomicCharacter_aux</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- This appears to be missing from the library. It should not be in this file.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Group.pow_eq_zpow_mod</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">Int.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">Int.emod_add_ediv</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">zpow_add</span><span class=\"o\">,</span> <span class=\"n\">zpow_mul</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ModularCyclotomicCharacter</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"χ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ModularCyclotomicCharacter.toFun</span>\n\n<span class=\"sd\">/-- The formula which characterises the output of `ModularCyclotomicCharacter g n`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">spec</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃+*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">rootsOfUnity</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"n\">n</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">t</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ModularCyclotomicCharacter_aux_spec</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zpow_ofNat</span><span class=\"o\">,</span> <span class=\"n\">ModularCyclotomicCharacter.toFun</span><span class=\"o\">,</span>\n    <span class=\"n\">ZMod.val_int_cast</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Subgroup.coe_zpow</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Units.ext_iff.1</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">SetCoe.ext_iff.2</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Group.pow_eq_zpow_mod</span> <span class=\"n\">_</span> <span class=\"n\">pow_card_eq_one</span>\n\n<span class=\"c1\">-- this is in the wrong place I guess</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsCyclic</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hGcard</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"n\">a.val</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"n\">b.val</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IsCyclic.exists_generator</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">hgord</span> <span class=\"o\">:=</span> <span class=\"n\">orderOf_eq_card_of_forall_mem_zpowers</span> <span class=\"n\">hg</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">g</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_eq_pow_iff_modEq</span><span class=\"o\">,</span> <span class=\"n\">hgord</span><span class=\"o\">,</span> <span class=\"n\">hGcard</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ZMod.nat_cast_eq_nat_cast_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hGcard</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">ZMod.nat_cast_val</span><span class=\"o\">,</span> <span class=\"n\">ZMod.cast_id'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">χ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">RingEquiv.refl</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">rootsOfUnity</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ζ</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subgroup.coe_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">spec</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">rootsOfUnity</span> <span class=\"n\">n</span> <span class=\"n\">L</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.size_positive'</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">this.lt_or_eq</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Fact.mk</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ZMod.val_one</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.card_le_one_iff_subsingleton.mp</span> <span class=\"n\">h.ge</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">ζ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">ζ</span> <span class=\"mi\">1</span>\n    <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃+*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">χ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">χ</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">χ</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">rootsOfUnity</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ζ</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subgroup.coe_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">spec</span><span class=\"o\">]</span>\n  <span class=\"n\">change</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">ˣ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">spec</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Subgroup.coe_pow</span><span class=\"o\">,</span> <span class=\"n\">spec</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">Subgroup.coe_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Subgroup.coe_pow</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">2</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_eq_pow_iff_modEq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ZMod.nat_cast_eq_nat_cast_iff</span><span class=\"o\">,</span> <span class=\"n\">SubmonoidClass.coe_pow</span><span class=\"o\">,</span>\n    <span class=\"n\">ZMod.nat_cast_val</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">ZMod.cast_mul</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">orderOf</span> <span class=\"n\">ζ</span><span class=\"o\">)</span> <span class=\"n\">orderOf_dvd_card</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ModularCyclotomicCharacter</span>\n\n<span class=\"c1\">-- see also `IsPrimitiveRoot.autToPow`, which is the same construction under the more</span>\n<span class=\"c1\">-- restrictive condition that there exists a primitive n'th root of unity.</span>\n<span class=\"sd\">/-- Given a positive integer `n`, `ModularCyclotomicCharacter n` is a</span>\n<span class=\"sd\">multiplicative homomorphism from the automorphisms of a field `L` to `ℤ/dℤ`,</span>\n<span class=\"sd\">where `d` is the number of `n`'th roots of unity in `L`. It is uniquely</span>\n<span class=\"sd\">characterised by the property that `g(ζ)=ζ^(ModularCyclotomicCharacter n g)`</span>\n<span class=\"sd\">for `g` an automorphism of `L` and `ζ` an `n`th root of unity. -/</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">ModularCyclotomicCharacter</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">≃+*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">rootsOfUnity</span> <span class=\"n\">n</span> <span class=\"n\">L</span> <span class=\"o\">}))</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidHom.toHomUnits</span>\n  <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">ModularCyclotomicCharacter.toFun</span> <span class=\"n\">n</span>\n    <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">ModularCyclotomicCharacter.id</span> <span class=\"n\">n</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">ModularCyclotomicCharacter.comp</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 413217198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705430453
    },
    {
        "content": "<p>Now it's compiling again, my next job was going to be to figure out how to adapt it given that I now know about <code>IsPrimitiveRoot.autToPow</code>. Note that this started off as Hanneke Wiersema's project from the Leiden workshop. What I want to be able to do is to state that the determinant of the n-torsion of an elliptic curve is the mod n cyclo char but we are way way off this (we don't even know that the n-torsion is a finite object, and to define the Weil pairing we will probably need some form of Riemann-Roch for elliptic curves)</p>",
        "id": 413217561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705430620
    },
    {
        "content": "<p>BTW, why is this our definition of the abs gal group?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">absoluteGaloisGroup</span> <span class=\"o\">:=</span> <span class=\"n\">AlgebraicClosure</span> <span class=\"n\">K</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">AlgebraicClosure</span> <span class=\"n\">K</span>\n</code></pre></div>\n<p>as opposed to using the separable closure?</p>",
        "id": 413226619,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705433989
    },
    {
        "content": "<p>They're the same thing, right?</p>",
        "id": 413228491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705434677
    },
    {
        "content": "<p>So perhaps the answer is \"the separable closure did not exist at that time\"</p>",
        "id": 413228574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705434714
    },
    {
        "content": "<p>Yeah, sure, but the Galois correspondence is wonky</p>",
        "id": 413228587,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705434718
    },
    {
        "content": "<p>We don't have the galois correspondence for infinite extensions so this is not yet an issue</p>",
        "id": 413228690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705434760
    },
    {
        "content": "<p>I.e. the fixed fields of the algebraic closure will be the perfect closures of the corresponding extensions of k</p>",
        "id": 413228694,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705434762
    },
    {
        "content": "<p>Yeah the definition sounds like a terrible idea now we actually have some theory of separable extensions.</p>",
        "id": 413228998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705434898
    },
    {
        "content": "<p>The other issue is that should we really be choosing a geometric point anyway? But this is a separate discussion. I still don't have a clear idea how we're doing to do Frobenius elements -- one wacky idea I had was to literally choose an element of the absolute Galois group and call it Frob_P and then have an IsFrobenius P g which is true iff g is conjugate to an element which differs from Frob_P by an element of the equally noncanonical inertia subgroup.</p>",
        "id": 413229413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705435081
    },
    {
        "content": "<p>Because I want to talk about traces of Frobenius on Galois reps without jumping through hoops</p>",
        "id": 413229582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705435142
    },
    {
        "content": "<p>If you work in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>r</mi><mi>o</mi><msub><mi>f</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">Prof_{out}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">ro</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> then there’s no issue!</p>",
        "id": 413229912,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705435274
    },
    {
        "content": "<p>There's still the inertia group issue -- am I allowed to take the trace of Frobenius at a ramified extension?</p>",
        "id": 413232545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705436393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> In case it helps, the branch mentioned above now has a sorry-free proof of the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_isPrimitiveRoot_of_isSepClosed</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsSepClosed</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">IsPrimitiveRoot</span> <span class=\"n\">ξ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">cyclotomicCharacter</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsSepClosure</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cyclotomicCharacter_spec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsSepClosure</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hξ</span> <span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">∈</span> <span class=\"n\">rootsOfUnity</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">ξ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">cyclotomicCharacter</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"n\">n</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">σ</span> <span class=\"n\">ξ</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cyclotomicCharacter_unique</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsSepClosure</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hχ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">∈</span> <span class=\"n\">rootsOfUnity</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)),</span>\n      <span class=\"n\">ξ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">σ</span> <span class=\"n\">ξ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">χ</span> <span class=\"bp\">=</span> <span class=\"n\">cyclotomicCharacter</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 413243975,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705441416
    },
    {
        "content": "<p>But it still needs a bit of cleanup before I open a PR</p>",
        "id": 413244134,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705441468
    },
    {
        "content": "<p>With those and the (seemingly nonexistent) obvious morphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><msup><mo stretchy=\"false\">)</mo><mo>×</mo></msup><mo>→</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>m</mi><msup><mo stretchy=\"false\">)</mo><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">(\\Z/n)^\\times \\to (\\Z/m)^\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0213em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0213em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> divides <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, it should be easy to show compatibility and take limits</p>",
        "id": 413244280,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705441542
    },
    {
        "content": "<p>Use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.map#doc\">docs#Units.map</a> and the underlying ring hom?</p>",
        "id": 413247048,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705442675
    },
    {
        "content": "<p>the underlying ring hom seems to be missing!</p>",
        "id": 413247287,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705442779
    },
    {
        "content": "<p>If you know otherwise, then I would love an answer here: <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/ZMod.2Elift.20for.20ring.20homs/near/413234717\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/ZMod.2Elift.20for.20ring.20homs/near/413234717</a> :)</p>",
        "id": 413247328,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705442796
    },
    {
        "content": "<p>I thought monnet did infinite galois?</p>",
        "id": 415974826,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1705480013
    },
    {
        "content": "<p>Just the definition of the topology, so we could state the correspondence. The proof is pretty hairy IIRC</p>",
        "id": 415975669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705480339
    },
    {
        "content": "<p>You would imagine it all \"just follows by taking the limit of the finite case\" but I'm not sure I ever figured out a satisfactory one line translation of this</p>",
        "id": 415975768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705480386
    }
]