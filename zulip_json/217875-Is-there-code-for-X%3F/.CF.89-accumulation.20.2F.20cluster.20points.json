[
    {
        "content": "<p>Do we have œâ-accumulation points? (These are accumulation points of a set <code>S</code> such that every neighbourhood of the point contains infinitely many points of <code>S</code>) <br>\nI'm asking because if we want to have a definition of Countably Compact spaces that is consistent with those of Compact spaces and Lindel√∂f spaces, I would say that these are the way to go. I'm also happy to just use the 'traditional' definition (countable cover has a finite subcover).</p>",
        "id": 421115900,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707767574
    },
    {
        "content": "<p>Doesn't <code>AccPt</code> imply this under some mild separation assumptions?</p>",
        "id": 421116436,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707767761
    },
    {
        "content": "<p>I thought <code>AccPt</code> was a usual accumulation point (in particular, it requires every neighbourhood to contain at least 1 point of <code>S</code> other than the accumulation point)</p>",
        "id": 421116922,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707767921
    },
    {
        "content": "<p>If every punctured nhd of <code>a</code> contains at least 1 point of <code>S</code>, then in a T‚ÇÅ space it contains infinitely many pts of <code>S</code>.</p>",
        "id": 421117091,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707767980
    },
    {
        "content": "<p>Oh yes, of course</p>",
        "id": 421117285,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707768029
    },
    {
        "content": "<p>Similarly to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=infinite_of_mem_nhds#doc\">docs#infinite_of_mem_nhds</a></p>",
        "id": 421117338,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707768044
    },
    {
        "content": "<p>but I'd guess we don't want to assume T1 in our definition, right?</p>",
        "id": 421117513,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707768100
    },
    {
        "content": "<p>While we sometimes care about non-T‚ÇÅ spaces, any new definition should make it clear that it is equivalent to <code>AccPt</code> in a T‚ÇÅ space.</p>",
        "id": 421117538,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707768109
    },
    {
        "content": "<p>You can write <code>AccPt x (cofinite ‚äì ùí´ s)</code></p>",
        "id": 421117731,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707768162
    },
    {
        "content": "<p>And have a lemma saying that in a T‚ÇÅ space it is equivalent to <code>AccPt x (ùí´ s)</code></p>",
        "id": 421117850,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707768213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.CF.89-accumulation.20.2F.20cluster.20points/near/421117731\">said</a>:</p>\n<blockquote>\n<p>You can write <code>AccPt x (cofinite ‚äì ùí´ s)</code></p>\n</blockquote>\n<p>Thank you!</p>\n<p>So this would give œâ-accumulation points? <br>\nWhere should such a definition and the corresponding lemma probably go?</p>",
        "id": 421118016,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707768261
    },
    {
        "content": "<p>Don't you mean the following? I'm not sure why you were using the principal filter ùí´ s specifically? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AccPt</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"c1\">-- the Mathlib definition</span>\n  <span class=\"n\">NeBot</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">‚â†</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">‚äì</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OmegaAccPt</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"c1\">-- the œâ-accumulation point definition</span>\n  <span class=\"n\">AccPt</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">cofinite</span> <span class=\"bp\">‚äì</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 421118966,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707768595
    },
    {
        "content": "<p>I think he was just giving the definition in the generality you asked for, but sure</p>",
        "id": 421119309,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707768713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.CF.89-accumulation.20.2F.20cluster.20points/near/421119309\">said</a>:</p>\n<blockquote>\n<p>I think he was just giving the definition in the generality you asked for, but sure</p>\n</blockquote>\n<p>whoops sorry, that's fair! I figured we'd want it in Mathlib in full generality, I missed that!</p>",
        "id": 421119426,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707768746
    },
    {
        "content": "<p>what about the following: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OmegaAccPt'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">NeBot</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span><span class=\"o\">[</span><span class=\"bp\">‚â†</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">‚äì</span> <span class=\"n\">F</span> <span class=\"bp\">‚äì</span> <span class=\"n\">cofinite</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 421119507,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707768778
    },
    {
        "content": "<p>which one would be preferable? I can probably give it a go tomorrow!</p>",
        "id": 421119558,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707768796
    },
    {
        "content": "<p>I think there‚Äôs not much difference between these once you‚Äôve wrote the API</p>",
        "id": 421119758,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707768860
    },
    {
        "content": "<p>Thanks, both of you! I have a route to pursue here!</p>",
        "id": 421120609,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707769185
    },
    {
        "content": "<p>I‚Äôm wondering, would it be interesting to do this for any (infinite) cardinal ? Unfortunately the cardinal here is named <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Cardinal.aleph0#doc\">docs#Cardinal.aleph0</a> not omega‚Ä¶ And that would mean defining the analog of <code>cofinite</code> for all cardinals, but that would be easy</p>",
        "id": 421120850,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707769263
    },
    {
        "content": "<p>Yes, I would say so. You could then get <code>condensation points</code> and <code>complete accumulation points</code> relatively easily from that I would think.</p>",
        "id": 421121307,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707769423
    },
    {
        "content": "<p>The fact that it is named differently shouldn't really be a problem, we can always use an alias or something for that, right? Or did I misinterpret what you were saying?</p>",
        "id": 421121523,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707769485
    },
    {
        "content": "<p>If you're interested in adding this, please feel free to do so! I'm happy to wait until it is in Mathlib (I have no rush in adding <code>CountablyCompactSpaces</code>, there's a lot of other stuff I can look into!) or I could give it a try tomorrow! What would the proper analogue of <code>cofinite</code> be? <code>cocardinal</code> with a parameter?</p>",
        "id": 421121902,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707769603
    },
    {
        "content": "<p>I have no idea about the naming, and I don‚Äôt have that much time at the moment, so feel free to play with it!</p>",
        "id": 421122366,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707769751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.CF.89-accumulation.20.2F.20cluster.20points/near/421121523\">said</a>:</p>\n<blockquote>\n<p>The fact that it is named differently shouldn't really be a problem, we can always use an alias or something for that, right? Or did I misinterpret what you were saying?</p>\n</blockquote>\n<p>I just meant that we wouldn‚Äôt be able to literally write <code>Cardinal.omega.accPt</code> (or whatever that would have been)</p>",
        "id": 421122596,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707769818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.CF.89-accumulation.20.2F.20cluster.20points/near/421122596\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.CF.89-accumulation.20.2F.20cluster.20points/near/421121523\">said</a>:</p>\n<blockquote>\n<p>The fact that it is named differently shouldn't really be a problem, we can always use an alias or something for that, right? Or did I misinterpret what you were saying?</p>\n</blockquote>\n<p>I just meant that we wouldn‚Äôt be able to literally write <code>Cardinal.omega.accPt</code> (or whatever that would have been)</p>\n</blockquote>\n<p>Okay, gotcha! </p>\n<p>I‚Äôll try and do a sequence of PR‚Äôs:</p>\n<ul>\n<li>generalize cofinite (we already have cocountable)</li>\n<li>define Cardinal.???.accPt (or something like that)</li>\n<li>define Countably Compact in terms of this property</li>\n</ul>",
        "id": 421122829,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707769904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.CF.89-accumulation.20.2F.20cluster.20points/near/421122829\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.CF.89-accumulation.20.2F.20cluster.20points/near/421122596\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.CF.89-accumulation.20.2F.20cluster.20points/near/421121523\">said</a>:</p>\n<blockquote>\n<p>The fact that it is named differently shouldn't really be a problem, we can always use an alias or something for that, right? Or did I misinterpret what you were saying?</p>\n</blockquote>\n<p>I just meant that we wouldn‚Äôt be able to literally write <code>Cardinal.omega.accPt</code> (or whatever that would have been)</p>\n</blockquote>\n<p>Okay, gotcha! </p>\n<p>I‚Äôll try and do a sequence of PR‚Äôs:</p>\n<ul>\n<li>generalize cofinite (we already have cocountable)</li>\n<li>define Cardinal.???.accPt (or something like that)</li>\n<li>define Countably Compact in terms of this property</li>\n</ul>\n</blockquote>\n<p>If time allows and things like that‚Ä¶</p>",
        "id": 421122967,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707769942
    },
    {
        "content": "<p>Do we have <code>cocountable</code>? I can‚Äôt find it‚Ä¶</p>",
        "id": 421124331,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707770389
    },
    {
        "content": "<p>I thought we did, but I don't see it either.</p>",
        "id": 421124573,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707770470
    },
    {
        "content": "<p>I thought we had a PR for this at some point, but I may have been wrong‚Ä¶ I thought that was the motivating reason that we added Uncountable a while back. I‚Äôll check tomorrow, otherwise I‚Äôll see if I can add that as well!</p>",
        "id": 421124918,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707770598
    },
    {
        "content": "<p>The PR that added Uncountable was <a href=\"https://github.com/leanprover-community/mathlib4/pull/9254\">#9254</a>, looks like it was discussed there but I only said I‚Äôd add it‚Ä¶ let me make that up in a new pr that generalizes cofinite to other cardinalities as well. As a starting point, I just realized we‚Äôll probably need the analogue of Uncountable for those, right? Let me see how far I can get!</p>",
        "id": 421125784,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707770918
    },
    {
        "content": "<p>I would prefer to have <code>cofinite</code> stay as is, without dependency on <code>Cardinal</code>s.</p>",
        "id": 421157715,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707785745
    },
    {
        "content": "<p>(or we can greatly reduce <code>import</code>s of <code>SetTheory.Cardinal</code>)</p>",
        "id": 421157779,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707785767
    },
    {
        "content": "<p>The second option doesn't work because you need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Cardinal.add_lt_of_lt#doc\">docs#Cardinal.add_lt_of_lt</a></p>",
        "id": 421158919,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707786595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.CF.89-accumulation.20.2F.20cluster.20points/near/421157715\">said</a>:</p>\n<blockquote>\n<p>I would prefer to have <code>cofinite</code> stay as is, without dependency on <code>Cardinal</code>s.</p>\n</blockquote>\n<p>I‚Äôll leave cofinite untouched, but I‚Äôll try to get cocountable and friends from a general thing</p>",
        "id": 421182318,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707804802
    },
    {
        "content": "<p>Probably I‚Äôll need something that says that a set does not have a given cardinality (like Uncountable does for Countable), any suggestions?</p>",
        "id": 421182590,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707805008
    },
    {
        "content": "<p>What I meant is to form the filter of all subsets whose complement has cardinality strictly less than a fixed infinite cardinal. This is indeed a filter because being strictly smaller than an infinite cardinal is stable under finite union.</p>",
        "id": 421187252,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707808462
    },
    {
        "content": "<p>You‚Äôre right, that‚Äôll probably allow me to avoid the definition altogether. I‚Äôm thinking that we might want to have CardinalInterFilter to extend CountableInterFilter, as then K-Lindel√∂f spaces and their API would be a very straightforward extension of Lindel√∂f spaces.</p>",
        "id": 421187504,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707808646
    },
    {
        "content": "<p>When do people use K-Lindel√∂f spaces?</p>",
        "id": 421188195,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707809060
    },
    {
        "content": "<p>Good question, I just figured I‚Äôd probably know how to generalize it</p>",
        "id": 421190460,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707810439
    },
    {
        "content": "<p>I'm working on <code>cocardinal</code> and <code>cocountable</code> filters, I have working definitions but they may be somewhat suboptimal. To keep the threads focussed, I've posted them <a href=\"#narrow/stream/287929-mathlib4/topic/Cocountable.20and.20cocardinal/near/421209118\">here</a></p>",
        "id": 421209247,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707817908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.CF.89-accumulation.20.2F.20cluster.20points/near/421188195\">said</a>:</p>\n<blockquote>\n<p>When do people use K-Lindel√∂f spaces?</p>\n</blockquote>\n<p>The answer is : quite rarely, but this kind of question is dangerous in mathematics. <br>\nAfterall, when do people use Lindel√∂f spaces ? rarely as well, except for those who use them (and I'd guess, some areas of topology and of model theory use them).</p>",
        "id": 421219948,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707821813
    },
    {
        "content": "<p>I'm sorry if my question sounded like \"why should we bother?\" My intention was to understand how should we fit them into the library without blowing up dependencies of most of the topology.</p>",
        "id": 421363198,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707880513
    },
    {
        "content": "<p>(or maybe I should not care about adding ordinals to the <code>import</code> closure early)</p>",
        "id": 421363330,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707880593
    },
    {
        "content": "<p>As for Lindel√∂f spaces, we have a bunch of lemmas that are duplicated between spaces with 2nd countable topology and œÉ-compact spaces and in fact should be restated for Lindel√∂f spaces/sets.</p>",
        "id": 421363531,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707880721
    },
    {
        "content": "<p>Yes, these are definitely worth restating in terms of Lindel√∂f! </p>\n<p>With respect to import hierarchy, the way I see it we can either import ordinals early and define K-Lindel√∂f in full generality, or first define Lindel√∂f and then put K-Lindel√∂f much later.</p>",
        "id": 421382773,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707894652
    }
]