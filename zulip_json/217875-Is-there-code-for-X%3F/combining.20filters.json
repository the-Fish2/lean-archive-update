[
    {
        "content": "<p>Can someone please remind me what the tactic is for rewriting inside filters? E.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hgh</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 410431658,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703855747
    },
    {
        "content": "<p>I'm not sure there's a tactic, per se, but there's a lemma <code>IsLittleO.congr'</code> showing that you can exchange either side of a little-O statement with something eventually equal. Here's a one-liner:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hgh</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hgh.congr'</span> <span class=\"o\">(</span><span class=\"n\">hfg.mp</span> <span class=\"o\">(</span><span class=\"n\">eventually_of_forall</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"n\">hx.symm</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410432361,
        "sender_full_name": "David Loeffler",
        "timestamp": 1703856293
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 410432882,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703856677
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.EventuallyEq.trans_isLittleO#doc\">docs#Filter.EventuallyEq.trans_isLittleO</a></p>",
        "id": 410458308,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703871638
    },
    {
        "content": "<p>And you can use it with <code>calc</code> like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">f</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">hfg</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hgh</span>\n</code></pre></div>",
        "id": 410458452,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703871708
    }
]