[
    {
        "content": "<p>Does Mathlib have the notion of the algebraic closure of <code>F</code> <em>within</em> <code>F'</code> when <code>F</code> and <code>F'</code> are fields and <code>F'</code> is an <code>F</code>-algebra (i.e., the subfield of <code>F'</code> consisting of all elements of <code>F'</code> tha are algebraic over <code>F</code>)?</p>",
        "id": 446418079,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719148598
    },
    {
        "content": "<p>You could take the integral closure. I’m not sure if it will have a field instance in the appropriate cases</p>",
        "id": 446418455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719148880
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=integralClosure#doc\">docs#integralClosure</a></p>",
        "id": 446418506,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719148918
    },
    {
        "content": "<p>OK; that's what I would have fallen back on, too. We may have to add the conversion to a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subfield#doc\">docs#Subfield</a> ...</p>",
        "id": 446418714,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719149072
    },
    {
        "content": "<p>Somewhat related:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">RingHom</span><span class=\"bp\">.</span><span class=\"n\">toAlgebra</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">algebraMap</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">algebraMap</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span>\n</code></pre></div>\n<p>I would expect this transitivity of structures to be directly available, but can't seem to find it.</p>",
        "id": 446419520,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719149728
    },
    {
        "content": "<p>It’s explicitly not available as an instance because you are meant to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsScalarTower#doc\">docs#IsScalarTower</a></p>",
        "id": 446420120,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719150184
    },
    {
        "content": "<p>In other words, assume <code>[Algebra R S] [Algebra S A] [Algebra R A] [IsScalarTower R S A]</code></p>",
        "id": 446420205,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719150254
    },
    {
        "content": "<p>But as a def, we may have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.trans#doc\">docs#Algebra.trans</a> or something like that</p>",
        "id": 446420324,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719150353
    },
    {
        "content": "<p>Maybe not… but note that things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.IsIntegral.trans#doc\">docs#Algebra.IsIntegral.trans</a> are formulated in terms of <code>IsScalarTower</code></p>",
        "id": 446420433,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719150458
    },
    {
        "content": "<p>Yes, but there is no obvious way to get <code>IsScalarTower R S A</code> directly from the two algebra instances, as far as I can see.</p>",
        "id": 446420531,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719150507
    },
    {
        "content": "<p>Context: I'm trying to extend the theory of algebraic function fields of one variable. We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FunctionField#doc\">docs#FunctionField</a>, but this only assumes <code>[Algebra (RatFunc F) FF]</code>, and I need <code>IsScalarTower F (RatFunc F) FF</code>.</p>\n<p>So is the recommendation to refactor <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FunctionField#doc\">docs#FunctionField</a> to assume <code>[IsScalarTower F (RatFunc F) FF]</code> right away?</p>",
        "id": 446420849,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719150776
    },
    {
        "content": "<p>OK, I just found this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"n\">FF</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">FF</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">RatFunc</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">FF</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hF</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FunctionField</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"n\">FF</span><span class=\"o\">)</span>\n\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"n\">FF</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">RatFunc</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsScalarTower</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">RatFunc</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">FF</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">IsScalarTower</span><span class=\"bp\">.</span><span class=\"n\">of_algebraMap_eq</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">congrFun</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so it looks like I can work with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FunctionField#doc\">docs#FunctionField</a> as it is for the time being...</p>",
        "id": 446420954,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719150862
    },
    {
        "content": "<p>(where <code>Algebra.trans</code> is the <code>example</code> from above).</p>",
        "id": 446420974,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719150886
    },
    {
        "content": "<p>I see. To be honest, I disagree with this definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FunctionField#doc\">docs#FunctionField</a> (which IMO should just mean a finitely generated extension, possibly assuming relatively algebraically closed).</p>",
        "id": 446421539,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719151358
    },
    {
        "content": "<p>Even in the one dimensional case, I don’t think it makes sense to assume such a <code>IsScalarTower</code> instance. Such an instance essentially is equivalent to naming a transcendental element, and it’s not clear to me that such a transcendental should be named by default</p>",
        "id": 446421666,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719151500
    },
    {
        "content": "<p>My gut feeling is that for practical purposes it is good to have a fixed transcendental element around (rather than to have to conjure one up each time it is needed), but let's see how far I get with the present set-up.</p>",
        "id": 446425740,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719154440
    }
]