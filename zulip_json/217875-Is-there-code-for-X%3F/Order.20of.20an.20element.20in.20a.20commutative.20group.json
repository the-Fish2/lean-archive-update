[
    {
        "content": "<p>Is there a theorem: For a CommGroup, the order of any element divdes the order of the element which has max order? I cant find in mathlib4 <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 417572161,
        "sender_full_name": "Hallon",
        "timestamp": 1706069101
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Find.20some.20theorem.20in.20lean.2E\">#lean4 &gt; Find some theorem in lean.</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 417573909,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706070444
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=order_dvd_exponent#doc\">docs#order_dvd_exponent</a> though I think the name should start with <code>orderOf</code></p>",
        "id": 417595595,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706085170
    },
    {
        "content": "<p>Really we should change <code>orderOf</code> to something like <code>GroupTheory.order</code></p>",
        "id": 417595689,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706085225
    },
    {
        "content": "<p>Oh, is it actually the case that the exponent is attained by an element?</p>",
        "id": 417595755,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706085244
    },
    {
        "content": "<p>... or to <code>torsion</code> maybe</p>",
        "id": 417595763,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706085245
    },
    {
        "content": "<p>Isn't <code>torsion</code> too overloaded?</p>",
        "id": 417595798,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706085272
    },
    {
        "content": "<p>Not in a group theory context I would think?</p>",
        "id": 417595828,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706085293
    },
    {
        "content": "<p>It's definitely less overloaded than <code>order</code></p>",
        "id": 417595861,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706085309
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Torsion_group\">https://en.wikipedia.org/wiki/Torsion_group</a> ?</p>",
        "id": 417596053,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706085388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"683822\">@Hallon</span> I renamed the thread so that it's less generic.</p>",
        "id": 417596194,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706085469
    },
    {
        "content": "<p>Homework drives me crazy. Thank you all for your help!</p>",
        "id": 417596410,
        "sender_full_name": "Hallon",
        "timestamp": 1706085561
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.exponent_eq_max%27_orderOf#doc\">docs#Monoid.exponent_eq_max'_orderOf</a></p>",
        "id": 417596451,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706085587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Order.20of.20an.20element.20in.20a.20commutative.20group/near/417596053\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Torsion_group\">https://en.wikipedia.org/wiki/Torsion_group</a> ?</p>\n</blockquote>\n<p>Thats not <code>torsion</code> though! That's <code>torsionGroup</code> or <code>Subgroup.torsion</code>.</p>",
        "id": 417596534,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706085610
    },
    {
        "content": "<p>The proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.exponent_eq_iSup_orderOf#doc\">docs#Monoid.exponent_eq_iSup_orderOf</a> should contain a proof of existence of an element with <code>orderOf _ = exponent _</code>.</p>",
        "id": 417596795,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706085734
    },
    {
        "content": "<p>Moving this fact to a separate lemma before that proof would be a good short PR.</p>",
        "id": 417596851,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706085759
    },
    {
        "content": "<p>The last question of homework: the following is one line of source code which is very clear. But how to prove?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">show</span> <span class=\"n\">orderOf</span> <span class=\"o\">(</span><span class=\"n\">max_order_element</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max'</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"n\">orderOf</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>The order of the max_order_element of G is equal to the max value of the set consisted of the order of all element of G?</p>",
        "id": 417600669,
        "sender_full_name": "Hallon",
        "timestamp": 1706087099
    },
    {
        "content": "<p>It's intuitively obvious</p>",
        "id": 417600716,
        "sender_full_name": "Hallon",
        "timestamp": 1706087118
    },
    {
        "content": "<p>This is a HW on which course?</p>",
        "id": 417601048,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706087209
    },
    {
        "content": "<p>And what do you know about <code>max_order_element G</code>?</p>",
        "id": 417601117,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706087229
    },
    {
        "content": "<p>HW is given by my tutor to exercise our lean programming. 'The finite subgroup of field is cyclic'. The informal language to prove is not difficult.</p>",
        "id": 417601729,
        "sender_full_name": "Hallon",
        "timestamp": 1706087405
    },
    {
        "content": "<p>‘max_order_element G' is the element of G which has max order</p>",
        "id": 417601851,
        "sender_full_name": "Hallon",
        "timestamp": 1706087452
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=subgroup_units_cyclic#doc\">docs#subgroup_units_cyclic</a></p>",
        "id": 417602074,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706087527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Order.20of.20an.20element.20in.20a.20commutative.20group/near/417596795\">said</a>:</p>\n<blockquote>\n<p>The proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.exponent_eq_iSup_orderOf#doc\">docs#Monoid.exponent_eq_iSup_orderOf</a> should contain a proof of existence of an element with <code>orderOf _ = exponent _</code>.</p>\n</blockquote>\n<p>I'm not sure if this is true? The proof basically constructs an element with maximal p-adic norm for each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>∣</mo><mi mathvariant=\"normal\">exp</mi><mo>⁡</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">p \\mid \\operatorname{exp} G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">exp</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>, and the <code>max'</code> statement only holds for cancellative monoids</p>",
        "id": 417602513,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706087672
    },
    {
        "content": "<p>Crazy</p>",
        "id": 417602605,
        "sender_full_name": "Hallon",
        "timestamp": 1706087705
    },
    {
        "content": "<p>The informal proof of the field result is quite difficult isn't it? I don't know a simple proof of this. There's a proof which looks simple but which assumes the classification of finite abelian groups...</p>",
        "id": 417602675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706087725
    },
    {
        "content": "<p>I misdescribed it. The question is 'The finite multiplicative group of a field is a cyclic group'. The proof is about constructing n+1 roots, which contradicts the fundamental theorem of algebra</p>",
        "id": 417603276,
        "sender_full_name": "Hallon",
        "timestamp": 1706087932
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/wHHXeo3ET6bKSGsJJ6xPEwMN/微信截图_20240124171915.png\">微信截图_20240124171915.png</a><br>\nThis is the informal proof, if you can understand Chinese</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/wHHXeo3ET6bKSGsJJ6xPEwMN/微信截图_20240124171915.png\" title=\"微信截图_20240124171915.png\"><img src=\"/user_uploads/3121/wHHXeo3ET6bKSGsJJ6xPEwMN/微信截图_20240124171915.png\"></a></div>",
        "id": 417603509,
        "sender_full_name": "Hallon",
        "timestamp": 1706088013
    },
    {
        "content": "<p>Fundamental theorem of algebra: that's not the hard part. The hard part is \"if a finite abelian group is not cyclic then there exists an n such that there are more than n solutions to x^n=1\". From first principles this is very nontrivial</p>",
        "id": 417603613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706088052
    },
    {
        "content": "<p>yep</p>",
        "id": 417603875,
        "sender_full_name": "Hallon",
        "timestamp": 1706088130
    },
    {
        "content": "<p>Hence the theorem which you claimed was \"not difficult\" is in fact a \"not difficult corollary of a difficult theorem\" which is very different in lean. Fortunately we have the difficult theorem</p>",
        "id": 417604046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706088186
    },
    {
        "content": "<p>And the corollary</p>",
        "id": 417604093,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706088206
    },
    {
        "content": "<p>This problem is a relatively simple one from our practice problems, using some familiar conclusions</p>",
        "id": 417604493,
        "sender_full_name": "Hallon",
        "timestamp": 1706088340
    },
    {
        "content": "<p>There is a completely low-level way to go about proving the corollary directly using a delicate counting argument, which I would recommend as a route if we didn't have the difficult theorem</p>",
        "id": 417604582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706088366
    },
    {
        "content": "<p>\"a delicate counting argument\"?</p>",
        "id": 417604696,
        "sender_full_name": "Hallon",
        "timestamp": 1706088415
    },
    {
        "content": "<p>Yes, the proof that Gauss and Euler (who didn't know about groups) knew.</p>",
        "id": 417604824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706088465
    },
    {
        "content": "<p>Could you find it in wiki?</p>",
        "id": 417605066,
        "sender_full_name": "Hallon",
        "timestamp": 1706088550
    },
    {
        "content": "<p>I don't know, I read it when I was an undergraduate, I have notes in my office :-)</p>",
        "id": 417605303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706088616
    },
    {
        "content": "<p>Uh-Huh, are you PHD now? I am only senior <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 417605670,
        "sender_full_name": "Hallon",
        "timestamp": 1706088730
    },
    {
        "content": "<p>I don't know what your teacher wants but you should probably stick to the proof that they suggest :-)</p>",
        "id": 417605863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706088792
    },
    {
        "content": "<p>OK. Now I only have the last step to formalize the proof</p>",
        "id": 417606186,
        "sender_full_name": "Hallon",
        "timestamp": 1706088899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"683822\">@Hallon</span> It's easy to find out that Kevin has a PhD degree for quite some time. E.g., by reading his <a href=\"https://en.wikipedia.org/wiki/Kevin_Buzzard\">Wikipedia</a> page.</p>",
        "id": 417606686,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706089046
    },
    {
        "content": "<p>So, how to write this step using lean? <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">show</span> <span class=\"n\">orderOf</span> <span class=\"o\">(</span><span class=\"n\">max_order_element</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max'</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"n\">orderOf</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 417606858,
        "sender_full_name": "Hallon",
        "timestamp": 1706089093
    },
    {
        "content": "<p>I'm not sure I want to do your homework for you...</p>",
        "id": 417606952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706089126
    },
    {
        "content": "<p>wow,  Imperial College London. <span aria-label=\"pleading face\" class=\"emoji emoji-1f97a\" role=\"img\" title=\"pleading face\">:pleading_face:</span> My research direction is analytic number theory.</p>",
        "id": 417607378,
        "sender_full_name": "Hallon",
        "timestamp": 1706089252
    },
    {
        "content": "<p>OK, I'll think it over myself</p>",
        "id": 417607416,
        "sender_full_name": "Hallon",
        "timestamp": 1706089267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Order.20of.20an.20element.20in.20a.20commutative.20group/near/417596851\">said</a>:</p>\n<blockquote>\n<p>Moving this fact to a separate lemma before that proof would be a good short PR.</p>\n</blockquote>\n<p>Got this compiling locally, will push later</p>",
        "id": 417627527,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706096393
    },
    {
        "content": "<p>I assume you had to change the proof? I think you can then generalize the <code>max'_orderOf</code> one to non-cancellative monoids, no?</p>",
        "id": 417631892,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706098160
    },
    {
        "content": "<p>I found two ways - either extract most of the proof into a technical lemma, or prove the existence first. Not sure which is best: <a href=\"https://github.com/leanprover-community/mathlib4/pull/new/wip-monoid-exponent\">https://github.com/leanprover-community/mathlib4/pull/new/wip-monoid-exponent</a></p>",
        "id": 417633411,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706098747
    },
    {
        "content": "<p>Oh, I missed your point about <code>max</code>. It can already be generalized to non-cancellative monoids at the expense of an explicit <code>∀ g : G, 0 &lt; orderOf g</code> hypothesis</p>",
        "id": 417635448,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706099534
    },
    {
        "content": "<p>I guess the issue here is that obviously <code>0</code> is maximal in the divisibility poset, and what we're looking for is actually a sup in this order; it just turns out that that agrees with the <code>max</code> for all non-zero integers</p>",
        "id": 417637795,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706100432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Order.20of.20an.20element.20in.20a.20commutative.20group/near/417635448\">said</a>:</p>\n<blockquote>\n<p>[...] at the expense of an explicit <code>∀ g : G, 0 &lt; orderOf g</code> hypothesis</p>\n</blockquote>\n<p>You mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.IsTorsion#doc\">docs#Monoid.IsTorsion</a> ?</p>",
        "id": 417644151,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706102477
    },
    {
        "content": "<p>Maybe, but that's not how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.exponent_eq_iSup_orderOf#doc\">docs#Monoid.exponent_eq_iSup_orderOf</a> is stated (please don't go and refactor the entire file before I get my changes in)</p>",
        "id": 417654593,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706105902
    },
    {
        "content": "<p>Uh, annoying. Tell me when you're done <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 417666006,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706109231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"683822\">Hallon</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Order.20of.20an.20element.20in.20a.20commutative.20group/near/417603276\">said</a>:</p>\n<blockquote>\n<p>I misdescribed it. The question is 'The finite multiplicative group of a field is a cyclic group'. The proof is about constructing n+1 roots, which contradicts the fundamental theorem of algebra</p>\n</blockquote>\n<p>No, this is not the fundamental theorem of algebra, at least not what people call the fundamental theorem of algebra. The fundamental theorem say that non-constant polynomials with complex coefficients have at least one complex root. And from there it is easy to get as many roots counted with multiplicity as the degree. This is deep. What you need is the much, much easier result that a degree d polynomial over a field has at most d roots. This is important but much easier. It only depends on the Euclidean division of polynomials.</p>",
        "id": 417710255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706123476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Order.20of.20an.20element.20in.20a.20commutative.20group/near/417602675\">said</a>:</p>\n<blockquote>\n<p>The informal proof of the field result is quite difficult isn't it? I don't know a simple proof of this. There's a proof which looks simple but which assumes the classification of finite abelian groups...</p>\n</blockquote>\n<p>No, you don't need the full force of the classification of finite abelian groups. You only need to know that in every finite abelian group there is an element whose order is the exponent of the group. This is much easier (and can be a step towards the classification theorem depending on how you prove that classification).</p>",
        "id": 417710658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706123626
    },
    {
        "content": "<p>The easier result only relies on Lagrange's theorem saying the order of a subgroup divides the order of the group, and on unique decomposition of natural numbers into products of primes.</p>",
        "id": 417710861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706123701
    },
    {
        "content": "<p>See Lemma 5.4.13 from <a href=\"https://www.imo.universite-paris-saclay.fr/~patrick.massot/enseignement/poly_alg.pdf\">https://www.imo.universite-paris-saclay.fr/~patrick.massot/enseignement/poly_alg.pdf</a> for instance.</p>",
        "id": 417710952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706123749
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9975\">https://github.com/leanprover-community/mathlib4/pull/9975</a> (cc <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> )</p>",
        "id": 417960510,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706129020
    }
]