[
    {
        "content": "<p>Does this code already exist in mathlib? Or can it be golfed significantly?<br>\nIdeally, I would like to have this equiv as a linear equiv, <code>(S ⊗[R] M →ₗ[S] N) ≃ₗ[S] (M →ₗ[R] N)</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">LinearMap.baseChangeEquiv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.comp</span> <span class=\"o\">(</span><span class=\"n\">g.restrictScalars</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">({</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">m</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">TensorProduct.tmul_add</span><span class=\"o\">]</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">TensorProduct.tmul_smul</span><span class=\"o\">,</span> <span class=\"n\">RingHom.id_apply</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">TensorProduct.AlgebraTensorModule.lift</span>\n    <span class=\"n\">exact</span> <span class=\"o\">{</span>\n      <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">f</span>\n      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span><span class=\"o\">]</span>\n      <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n        <span class=\"n\">ext</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">RingHom.id_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 438358762,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715605893
    },
    {
        "content": "<p>It seems that the classes involved in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.TensorProduct.includeRight#doc\">docs#Algebra.TensorProduct.includeRight</a> should be relaxed a bit.</p>",
        "id": 438370274,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715608848
    },
    {
        "content": "<p>How can they be relaxed if you want an algebra morphism?</p>",
        "id": 438371015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715609032
    },
    {
        "content": "<p>Do we need the <code>by apply ... exact</code> here?</p>",
        "id": 438371695,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715609214
    },
    {
        "content": "<p>you can get a linear map with only one side of the tensor product being a (commutative) algebra.</p>",
        "id": 438371709,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715609216
    },
    {
        "content": "<p>Sorry, \"relaxed\" isn't exactly right, it's more that I'm surprised that we don't have the linear version of this.</p>",
        "id": 438371812,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715609243
    },
    {
        "content": "<p>So am I…</p>",
        "id": 438371874,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715609260
    },
    {
        "content": "<p>The <code>invfun</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invFun</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">TensorProduct.AlgebraTensorModule.lift</span> <span class=\"o\">((</span><span class=\"n\">LinearMap.lsmul</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">flip</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 438371908,
        "sender_full_name": "Richard Copley",
        "timestamp": 1715609268
    },
    {
        "content": "<p>right now <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.TensorProduct.includeRight#doc\">docs#Algebra.TensorProduct.includeRight</a> is just defined directly (and <code>includeLeft</code> is defined in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.TensorProduct.includeLeftRingHom#doc\">docs#Algebra.TensorProduct.includeLeftRingHom</a> ). I think it would be more useful to introduce linear versions of both of these (with the appropriate \"relaxed\" typeclasses) and build these algebra homs on top of those.</p>",
        "id": 438372507,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715609418
    },
    {
        "content": "<p>Do we not have the adjunction formulated in categorical terms?</p>",
        "id": 438372705,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715609475
    },
    {
        "content": "<p>We do: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Category/ModuleCat/ChangeOfRings.html#ModuleCat.extendRestrictScalarsAdj\">ModuleCat.extendRestrictScalarsAdj</a></p>",
        "id": 438372962,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715609547
    },
    {
        "content": "<p>How is the category part of mathlib supposed to interact with the rest? There's a risk of fragmentation and/or duplication if things can be/have to be done twice in an unspecified way.</p>",
        "id": 438375011,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715610078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/base.20change.20adjunction.20for.20linear.20maps/near/438375011\">said</a>:</p>\n<blockquote>\n<p>How is the category part of mathlib supposed to interact with the rest? There's a risk of fragmentation and/or duplication if things can be/have to be done twice in an unspecified way.</p>\n</blockquote>\n<p>I think that the definitions should be done first (1) for types equipped with <code>[Module...]</code> instances and secondly (2) in the language of categories <code>ModuleCat</code> <em>by</em> using the API (1). Mostly, it should not be in the other direction.</p>\n<p>If, for some reason, the categorical version of something entered mathlib first, the unbundled version should be added and the category theory definition changed in order to use the unbundled version.</p>",
        "id": 438393231,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715614922
    },
    {
        "content": "<p>I'm not sure how much of an improvement this is :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">LinearMap.baseChangeEquiv'</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n    <span class=\"n\">g.restrictScalars</span> <span class=\"n\">R</span> <span class=\"bp\">∘ₗ</span>\n      <span class=\"o\">((</span><span class=\"n\">LinearMap.lsmul</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rTensor</span> <span class=\"n\">M</span> <span class=\"bp\">∘ₗ</span>\n        <span class=\"o\">(</span><span class=\"n\">TensorProduct.lid</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.toLinearMap</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">TensorProduct.AlgebraTensorModule.lift</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.lsmul</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">flip</span> <span class=\"n\">f</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 438393732,
        "sender_full_name": "Richard Copley",
        "timestamp": 1715615059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/base.20change.20adjunction.20for.20linear.20maps/near/438393231\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/base.20change.20adjunction.20for.20linear.20maps/near/438375011\">said</a>:</p>\n<blockquote>\n<p>How is the category part of mathlib supposed to interact with the rest? There's a risk of fragmentation and/or duplication if things can be/have to be done twice in an unspecified way.</p>\n</blockquote>\n<p>I think that the definitions should be done first (1) for types equipped with <code>[Module...]</code> instances and secondly (2) in the language of categories <code>ModuleCat</code> <em>by</em> using the API (1). Mostly, it should not be in the other direction.</p>\n<p>If, for some reason, the categorical version of something entered mathlib first, the unbundled version should be added and the category theory definition changed in order to use the unbundled version.</p>\n</blockquote>\n<p>Interesting - could you expand on why this is the best approach? I've wanted e.g. non-categorical representation morphisms myself but I'd hoped that someday this wouldn't be the case. And I'd assumed it'd be nice to be able to use the category theory library to get non-category theory API when possible.</p>",
        "id": 438596432,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1715699070
    },
    {
        "content": "<p>One of the reasons is that in the category theory context, there are more restrictions on universes, for example, the unbundled notion of linear map is more general than the notion of morphisms in the category <code>ModuleCat</code>. Otherwise, I would obviously promote category theory more!</p>\n<p>(Then, of course, if unbundled/bundled versions of new definitions are equally general, and if it is much easier to use category theory, there is no reason not to use it.)</p>",
        "id": 438606940,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715702413
    },
    {
        "content": "<p>Fair enough. I guess the category theory typeclass assumptions are also less general sometimes too, like <code>ModuleCat</code> requiring an AddCommGroup and a ring rather than AddCommMonoid and semiring</p>",
        "id": 438629472,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1715710723
    }
]