[
    {
        "content": "<p>Do we have something similar to the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Array.pairs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">A</span> <span class=\"k\">do</span> <span class=\"n\">for</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"n\">B</span> <span class=\"k\">do</span>\n    <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">out.push</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">out</span>\n</code></pre></div>",
        "id": 420084626,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707236630
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.zip#doc\">docs#Array.zip</a> ?</p>",
        "id": 420088578,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707237697
    },
    {
        "content": "<p>It's not quite zip.</p>",
        "id": 420088617,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707237709
    },
    {
        "content": "<p>Ah ok.</p>",
        "id": 420088708,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707237725
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">zip</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">]</span>\n<span class=\"c1\">-- #[(1, 5), (2, 6), (3, 7)]</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">pairs</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">]</span>\n<span class=\"c1\">-- #[(1, 5), (1, 6), (1, 7), (2, 5), (2, 6), (2, 7), (3, 5), (3, 6), (3, 7)]</span>\n</code></pre></div>",
        "id": 420088817,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707237765
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.product#doc\">docs#List.product</a></p>",
        "id": 420089027,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1707237823
    },
    {
        "content": "<p>Yes, that's the one, but I would like it for arrays</p>",
        "id": 420089136,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707237845
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> I should read</p>",
        "id": 420089198,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1707237862
    },
    {
        "content": "<p>Although your response shows that I should name it <code>Array.product</code> :)</p>",
        "id": 420089333,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707237902
    },
    {
        "content": "<p>Yeah, and I don't think it exists already.</p>",
        "id": 420089402,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1707237923
    }
]