[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.ProbabilityMassFunction.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"sd\">/-- fair coin. an example of discrete random variable -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Die</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span>\n    <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- how to show this??</span>\n  <span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 428133262,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711029002
    },
    {
        "content": "<p>This is pretty dumb:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.ProbabilityMassFunction.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"sd\">/-- fair coin. an example of discrete random variable -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Die</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span>\n    <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsum_fintype</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.inv_two_add_inv_two</span><span class=\"o\">]</span> <span class=\"c1\">-- dumb</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Summable.hasSum_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">this</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">tsum_eq_zero_of_not_summable</span> <span class=\"n\">this</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">zero_ne_one</span>\n  <span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 428139181,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1711030531
    },
    {
        "content": "<p>You really should be using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PMF.ofFintype#doc\">docs#PMF.ofFintype</a> here</p>",
        "id": 428139388,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711030581
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PMF.uniformOfFinset#doc\">docs#PMF.uniformOfFinset</a> is the answer to the thread title.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Distributions.Uniform</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"sd\">/-- fair coin. an example of discrete random variable -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Die</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">PMF.uniformOfFinset</span> <span class=\"n\">Finset.univ</span> <span class=\"n\">Finset.univ_nonempty</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 428139907,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1711030729
    },
    {
        "content": "<p>Don't we have anything about <code>HasSum</code> on finite types?</p>",
        "id": 428142351,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1711031287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> HasSum, Fintype</p>",
        "id": 428143853,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711031662
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/InfiniteSum/Defs.html#hasSum_fintype\">hasSum_fintype</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/Multilinear/Basic.html#ContinuousMultilinearMap.hasSum_eval\">ContinuousMultilinearMap.hasSum_eval</a></p>",
        "id": 428143861,
        "sender_full_name": "loogle",
        "timestamp": 1711031664
    },
    {
        "content": "<p>Huh, I swear I loogled it</p>",
        "id": 428145530,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1711032063
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.ProbabilityMassFunction.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"sd\">/-- fair coin. an example of discrete random variable -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Die</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span>\n    <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">convert</span> <span class=\"n\">hasSum_fintype</span> <span class=\"n\">_</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.inv_two_add_inv_two</span><span class=\"o\">]</span> <span class=\"c1\">-- dumb</span>\n      <span class=\"n\">infer_instance</span>\n  <span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 428147378,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1711032496
    },
    {
        "content": "<p>Thank you very much. I learned a lot from your comments.</p>",
        "id": 428172960,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711039290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 428172994,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711039300
    }
]