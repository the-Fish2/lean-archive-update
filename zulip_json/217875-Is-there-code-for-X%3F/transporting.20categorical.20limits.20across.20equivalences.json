[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/7125\">#7125</a>, I found myself writing (or struggling to write) a huge pile of boilerplate to transfer the following across <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Equivalence#doc\">docs#CategoryTheory.Equivalence</a> s:</p>\n<ul>\n<li><code>Limits.IsZero</code></li>\n<li><code>Limits.HasZeroObject</code></li>\n<li><code>Limits.HasZeroMorphisms</code></li>\n<li><code>Limits.Cone</code></li>\n<li><code>Limits.BinaryBicone</code></li>\n<li><code>Limits.BinaryBicone.IsBilimit</code></li>\n<li><code>Limits.BinaryBiproductData</code></li>\n<li><code>Limits.HasBinaryBiproduct</code></li>\n</ul>\n<p>Am I missing existing results for these elsewhere?</p>",
        "id": 421420611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707908354
    },
    {
        "content": "<p>(i.e., perhaps we have them for <code>IsEquivalence</code> instead?)</p>",
        "id": 421420757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707908402
    },
    {
        "content": "<p>It seems that some of your constructions (taking a colimit cocone for <code>F ⋙ e.functor</code> and trying to get a colimit cocone for <code>F</code>) could be obtained by first for applying <code>e.inverse</code> (use <code>isColimitOfPreserves</code>), so that you get a colimit cocone for <code>(F ⋙ e.functor) ⋙ e.inverse</code> and then using the iso between <code>F</code> and <code>(F ⋙ e.functor) ⋙ e.inverse</code> and  a definition like <code>IsColimit.precomposeHomEquiv</code>.</p>",
        "id": 421423921,
        "sender_full_name": "Joël Riou",
        "timestamp": 1707909638
    },
    {
        "content": "<p>(You may also have a look at the file <code>CategoryTheory.Adjunction.Limits</code> which shows how to transport <code>HasColimitsOfShape</code> (rather than <code>IsColimit</code>) in both directions of an equivalence.)</p>",
        "id": 421424461,
        "sender_full_name": "Joël Riou",
        "timestamp": 1707909859
    },
    {
        "content": "<p>Thanks! While looking around a bit here I created <a href=\"https://github.com/leanprover-community/mathlib4/pull/10532\">#10532</a>, though it probably won't actually help me</p>",
        "id": 421427273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707911004
    },
    {
        "content": "<p>I had another look at this, and split off the rather messy <a href=\"https://github.com/leanprover-community/mathlib4/pull/11100\">#11100</a></p>",
        "id": 424409936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709384762
    }
]