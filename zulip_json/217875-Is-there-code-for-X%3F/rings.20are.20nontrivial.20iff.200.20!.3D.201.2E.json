[
    {
        "content": "<p>I can't find this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">NonAssocSemiring.Nontrivial_iff</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NonAssocSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Nontrivial</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">zero_ne_one'</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">Function.Surjective.groupWithZero.proof_1</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(and I'm a bit suspicious of the proof <code>exact?</code> gave me...)</p>",
        "id": 437149096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714930112
    },
    {
        "content": "<p>Oh this is better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">NonAssocSemiring.Nontrivial_iff</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NonAssocSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nontrivial</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">zero_ne_one'</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 437149263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714930305
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Function.Surjective.groupWithZero.proof_1.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G₀'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">G₀'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">G₀'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h01</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Nontrivial</span> <span class=\"n\">G₀'</span>\n</code></pre></div>\n<p>This could be an aesop safe rule because it's the universal property of <code>Nontrivial</code>.</p>",
        "id": 437149347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714930383
    },
    {
        "content": "<p>Here's it making use of another lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">NonAssocSemiring.Nontrivial_iff</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NonAssocSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nontrivial</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">zero_ne_one</span><span class=\"o\">,</span> <span class=\"n\">nontrivial_of_ne</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 437149532,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714930550
    },
    {
        "content": "<p>The difference between <code>zero_ne_one</code> and <code>zero_ne_one'</code> is that the former doesn't take <code>R</code> explicitly.</p>",
        "id": 437149677,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714930600
    }
]