[
    {
        "content": "<p>This is the first time I'm trying to use polynomials in Lean, and this is proving to be more of a struggle than I anticipated. What I'm trying to do is very simple: I have a <code>v : Fin n → R</code> that I would like to consider as the coefficients of a polynomial. Then, all I want to say is that it has at most <code>n-1</code> zeros if <code>v ≠ 0</code>. My first attempt was just something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Polynomial</span> <span class=\"k\">in</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">toPoly</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Polynomial.X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but then showing that this is nonzero if <code>v ≠ 0</code> is not direct. So then I tried going the finsupp route, and ended up writing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Polynomial.ofCoeffs</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFinsupp</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">c</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n                 <span class=\"n\">support</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">c</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n                 <span class=\"n\">mem_support_toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n                  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n                  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n                    <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n                    <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span>\n                      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">dite_true</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n                      <span class=\"n\">exact</span> <span class=\"n\">h</span>\n                    <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n                  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_filter</span><span class=\"o\">]</span>\n                    <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n                    <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n                    <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>But surely I'm overcomplicating things here. Is there a straightforward way to do what I want?</p>",
        "id": 417686792,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1706114949
    },
    {
        "content": "<p>Going through <code>Finsupp</code> sounds like a pain. Maybe \\smul is easier than C (v i) *?</p>",
        "id": 417687366,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706115122
    },
    {
        "content": "<p>Well, the problem with the sum is that the terms of the sum \"could\" cancel out.</p>",
        "id": 417687584,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1706115178
    },
    {
        "content": "<p>Note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x^2-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> has four zeros in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>8</mn><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/8\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/8</span><span class=\"mord mathbb\">Z</span></span></span></span>.</p>",
        "id": 417687607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706115183
    },
    {
        "content": "<p>Let's say <code>R</code> is a field.</p>",
        "id": 417687983,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1706115303
    },
    {
        "content": "<p>(I should probably rename it to something more fieldlike in my code.)</p>",
        "id": 417688231,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1706115371
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Polynomial</span> <span class=\"n\">BigOperators</span> <span class=\"k\">in</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">toPoly</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">Polynomial.X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">toPoly</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">zero_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">toPoly</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">toPoly</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.finset_sum_coeff</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.coeff_smul</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.coeff_X_pow</span><span class=\"o\">,</span>\n      <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_ite</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Finset.sum_ite</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_const_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.val_inj</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.filter_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_univ</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_singleton</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.coeff_zero</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 417698665,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706119076
    },
    {
        "content": "<p>It's true for integral domains</p>",
        "id": 417699599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706119422
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15476\">mathlib#15476</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">of_list</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">of_finsupp</span> <span class=\"n\">l.to_finsupp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">of_list</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofFn</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 417704581,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1706121328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomials/near/417704581\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15476\">mathlib#15476</a>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">of_list</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">of_finsupp</span> <span class=\"n\">l.to_finsupp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">of_list</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofFn</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is what I was hoping to find somewhere! Are you planning to port that PR?</p>",
        "id": 417711692,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1706124049
    },
    {
        "content": "<p>In the meantime I'll use <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>'s solution -- thanks!</p>",
        "id": 417711752,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1706124072
    },
    {
        "content": "<p>I haven't had any mathlib time in months, so I've unfortunately had to let it linger. I hope that porting would be straightforward, the prereqs are merged iirc.</p>",
        "id": 417715260,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1706125394
    },
    {
        "content": "<p>I'm taking a look; unfortunately <a href=\"https://github.com/leanprover-community/mathlib/pull/18182\">!3#18182</a> broke it</p>",
        "id": 417795089,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706125807
    },
    {
        "content": "<p>I managed to get it to compile at <a href=\"https://github.com/leanprover-community/mathlib4/pull/9973\">https://github.com/leanprover-community/mathlib4/pull/9973</a> by removing all the decidability arguments. Still 27 deprecation warnings around List.nthLe. I'm not planning any further work on it</p>",
        "id": 417960212,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706128862
    },
    {
        "content": "<p>The hope of the decidability arguments was to have a \"computable\" list-based way of generating polynomials. Since I can't help currently, it's not my place to say that that is a requirement. Perhaps when I have time again, I'll be able to build in the computability aspect.</p>",
        "id": 417972977,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1706134429
    },
    {
        "content": "<p>My PR <a href=\"https://github.com/leanprover/std4/pull/556\">std4#556</a> introducing <code>OrderedAssocList</code> is intended initially for internal use by omega, but could potentially be useful for computable polynomials. (Although RBMap is probably suitable too.)</p>",
        "id": 417996743,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706148861
    }
]