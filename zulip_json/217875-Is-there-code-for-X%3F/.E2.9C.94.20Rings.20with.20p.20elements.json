[
    {
        "content": "<p>Do we know that <code>ZMod p</code> is the only ring with <code>p</code> elements (<code>p</code> being a prime)?</p>",
        "id": 444429807,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718273522
    },
    {
        "content": "<p>You mean, ring with a unit... <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 444430545,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718273789
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isCyclic_of_prime_card#doc\">docs#isCyclic_of_prime_card</a> is close, but it doesn't know about the ring structure.</p>",
        "id": 444430591,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1718273813
    },
    {
        "content": "<p>Yes yes, <code>Ring</code> in Lean's sense.</p>",
        "id": 444430608,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718273820
    },
    {
        "content": "<p>(Anyway, I do not know the answer to your actual question.)</p>",
        "id": 444430846,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718273911
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZMod.ringEquiv#doc\">docs#ZMod.ringEquiv</a></p>",
        "id": 444432505,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718274386
    },
    {
        "content": "<p>So we need to prove that <code>CharP R p</code> is automatic in this case</p>",
        "id": 444432615,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718274411
    },
    {
        "content": "<p>\"is\" as in <code>Eq</code>? :)</p>",
        "id": 444433007,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718274504
    },
    {
        "content": "<p>That is, trade that for <code>p.Prime</code>, right?</p>",
        "id": 444433021,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718274509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rings.20with.20p.20elements/near/444433007\">said</a>:</p>\n<blockquote>\n<p>\"is\" as in <code>Eq</code>? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Of course: isn't the model that everyone talks about always the cardinality one?</p>",
        "id": 444433101,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718274547
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">ringEquiv</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">Prime</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hR</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ZMod</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">≃+*</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nontrivial</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"bp\">.</span><span class=\"n\">one_lt_card_iff_nontrivial</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hR</span><span class=\"w\"> </span><span class=\"bp\">▸</span><span class=\"w\"> </span><span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">one_lt</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CharP</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">CharP</span><span class=\"bp\">.</span><span class=\"n\">charP_iff_prime_eq_zero</span><span class=\"w\"> </span><span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hR</span><span class=\"w\"> </span><span class=\"bp\">▸</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_card_eq_zero</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">ZMod</span><span class=\"bp\">.</span><span class=\"n\">ringEquiv</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">hR</span>\n</code></pre></div>",
        "id": 444433109,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1718274553
    },
    {
        "content": "<p>Nice!</p>",
        "id": 444433213,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718274594
    },
    {
        "content": "<p>Thanks</p>",
        "id": 444433220,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718274597
    },
    {
        "content": "<p>Even better with <code>hR</code> on that last line</p>",
        "id": 444433357,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718274645
    },
    {
        "content": "<p>Fixed :)</p>",
        "id": 444433407,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1718274662
    },
    {
        "content": "<p>Who's making a PR?</p>",
        "id": 444434178,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718274957
    },
    {
        "content": "<p>I need it for the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">univ</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">univ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n</code></pre></div>\n<p>I can make the PR</p>",
        "id": 444434493,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718275081
    },
    {
        "content": "<p>(this can be proved by hand, but it is a good occasion to add the other result)</p>",
        "id": 444434560,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718275100
    },
    {
        "content": "<p>I am using it for something related to cyclotomic fields, so the PR is still WIP, but if someone wants to have a look it is <a href=\"https://github.com/leanprover-community/mathlib4/pull/13798\">#13798</a></p>",
        "id": 444448456,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718279915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> has marked this topic as resolved.</p>",
        "id": 444449503,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718280208
    }
]