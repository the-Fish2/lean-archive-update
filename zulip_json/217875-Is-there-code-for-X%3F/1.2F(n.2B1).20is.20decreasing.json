[
    {
        "content": "<p>Looking for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Antitone</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but having problems finding it in Mathlib...</p>\n<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Antitone, Inv.inv</p>",
        "id": 422792272,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708599553
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Group/Defs.html#Antitone.inv\">Antitone.inv</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Group/Defs.html#Monotone.inv\">Monotone.inv</a>, and <a href=\"https://loogle.lean-lang.org/?q=Antitone%2C%20Inv.inv\">1 more</a></p>",
        "id": 422792278,
        "sender_full_name": "loogle",
        "timestamp": 1708599554
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Antitone</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">inv_le_inv_of_le</span>\n  <span class=\"bp\">·</span> <span class=\"n\">positivity</span>\n  <span class=\"n\">gcongr</span>\n</code></pre></div>",
        "id": 422804788,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708604426
    },
    {
        "content": "<p>but <code>inv_0</code> lemmas are lacking...</p>",
        "id": 422804818,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708604438
    },
    {
        "content": "<p>Thanks; I had a similar proof.<br>\nThe real question is, I guess, whether some form of this should be in Mathlib.</p>",
        "id": 422805735,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708604780
    },
    {
        "content": "<p>Btw, there is a <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Can't.20find.20a.20theorem.20that.20works\">current thread</a> with a similar problem of missing <code>inv\\0</code> lemmas.</p>\n<p>I personally would expect the <code>inv\\0</code> lemmas to exist.</p>",
        "id": 422806270,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708604976
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/WithZero.html#inv_le_inv%E2%82%80\">docs#inv_le_inv₀</a>, but it only applies to a <code>LinearOrderedCommGroupWithZero</code>, which I think the reals are not.</p>",
        "id": 422806865,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708605210
    },
    {
        "content": "<p>Yeah I think that's for general valuation theory, which demands that 0 is the smallest element. Can I interest you in NNReal?</p>",
        "id": 422807360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708605377
    },
    {
        "content": "<p>Un-#xy: I need this for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_summable_indicator_one_div_natCast</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"n\">Set.indicator</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which I use in turn to show that Dirichlet L-series have absicssa of absolute convergence equal to 1.<br>\nGoing via <code>NNReal</code> looks like a significant detour here.</p>",
        "id": 422807596,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708605475
    },
    {
        "content": "<p>I have some <code>antitoneOn</code> lemmas for <code>inv</code>at <a href=\"https://github.com/leanprover-community/mathlib4/pull/9984\">#9984</a>, but they might be a bit of a hassle to use here.</p>",
        "id": 422817225,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1708608819
    },
    {
        "content": "<p>Just out of interest, why do we care that the abscissa of absolute convergence is <em>equal</em> to one? (Other than the \"because it's there\" reason). Presumably for all applications it suffices to know that it's at most 1?</p>",
        "id": 422964705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708674365
    },
    {
        "content": "<p>I think \"because it's there\" is a sufficient reason! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 422991301,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708685037
    }
]