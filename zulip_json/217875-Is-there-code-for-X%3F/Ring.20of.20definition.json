[
    {
        "content": "<p>Is there something like the following: Given a finitely presented <code>R</code>-algebra <code>A</code>, there exists a finite type <code>ℤ</code>-algebra <code>R₀</code> and a finitely presented <code>A₀</code>-algebra such that <code>R ⊗[R₀] A₀</code> is <code>R</code>-isomorphic to <code>A</code>. Note that I need an explicit construction, i.e. something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hgenS</span> <span class=\"o\">:</span> <span class=\"n\">Ideal.span</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MvPolynomial.Set.coefficients</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Set.iUnion</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">p.val.coeff</span> <span class=\"bp\">''</span> <span class=\"n\">p.val.support</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RingOfDefinition</span> <span class=\"o\">:</span> <span class=\"n\">Subring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subalgebra.toSubring</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.Set.coefficients</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"R₀\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">RingOfDefinition</span> <span class=\"n\">S</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"A\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RingOfDefinition.Set</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MvPolynomial.map</span> <span class=\"o\">(</span><span class=\"n\">SubringClass.subtype</span> <span class=\"n\">R₀</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">S</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"S₀\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">RingOfDefinition.Set</span> <span class=\"n\">S</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"I₀\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ideal.span</span> <span class=\"n\">S₀</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"A₀\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R₀</span> <span class=\"bp\">⧸</span> <span class=\"n\">I₀</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R₀</span> <span class=\"n\">A₀</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baseChange</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R₀</span><span class=\"o\">]</span> <span class=\"n\">A₀</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 433153370,
        "sender_full_name": "Christian Merten",
        "timestamp": 1713117844
    },
    {
        "content": "<p>I highly doubt that we have anything like this</p>",
        "id": 433154883,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713119344
    },
    {
        "content": "<p>We definitely should have it though! It's the first key idea in all that reduction to the noetherian case in EGA4 sections 8 to 11</p>",
        "id": 433157784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713122021
    },
    {
        "content": "<p>Working on it, would put this in something like <code>RingTheory.RingOfDefinition</code>?</p>",
        "id": 433157872,
        "sender_full_name": "Christian Merten",
        "timestamp": 1713122084
    },
    {
        "content": "<p>I have played around with this for a while now: Showing the above mentioned result is quite straightforward, but I tried to come up with a usable API if more is needed than merely the existence of such a subring, but also some control over which equalities should remain true. The suggestion can be found at draft PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/12743\">#12743</a>.</p>\n<p>A quick summary of <a href=\"https://github.com/leanprover-community/mathlib4/pull/12743\">#12743</a>: The interesting part is <a href=\"https://github.com/leanprover-community/mathlib4/blob/6091ad276d920fe835213a1a82392c7063529b45/Mathlib/RingTheory/RingOfDefinition/Basic.lean\">https://github.com/leanprover-community/mathlib4/blob/6091ad276d920fe835213a1a82392c7063529b45/Mathlib/RingTheory/RingOfDefinition/Basic.lean</a>.</p>\n<ul>\n<li>introduce a typeclass <code>HasCoefficients</code> expressing that the coefficients of a polynomial are contained in a subring.</li>\n<li>automatically infer <code>HasCoefficients</code> under basic <code>adjoinCoefficients</code> operations, to reduce overhead when various sets of coefficients need to be adjoined.</li>\n</ul>\n<p>One example (is in above linked file):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Lean automatically infers that any of the adjoined polynomials has coefficients in the new</span>\n<span class=\"cm\">ring. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">t₃</span> <span class=\"n\">t₄</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">t₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">R₀</span> <span class=\"o\">:=</span> <span class=\"n\">Subring.adjoinCoefficients</span> <span class=\"n\">t₄</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">Subring.adjoinCoefficients</span> <span class=\"n\">t₃</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">Subring.adjoinCoefficients</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">Subring.adjoinCoefficients</span> <span class=\"n\">t₂</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">core</span> <span class=\"n\">t₁</span><span class=\"bp\">;</span>\n    <span class=\"n\">HasCoefficients</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R₀</span> <span class=\"bp\">∧</span> <span class=\"n\">HasCoefficients</span> <span class=\"n\">p.val</span> <span class=\"n\">R₀</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">inferInstance</span><span class=\"o\">,</span> <span class=\"n\">inferInstance</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Given <code>[HasCoefficients p R₀]</code>, <code>p.repr R₀</code> is the representative of <code>p</code> in <code>MvPolynomial ι R₀</code>. For more details read the module docstring of the linked file.</p>\n<p>A use of this API can be found in draft PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/12744\">#12744</a>. Here the relevant file is <a href=\"https://github.com/leanprover-community/mathlib4/blob/0f581c67990efbf323fbd70c2000945cb04022d1/Mathlib/RingTheory/Smooth/Descent.lean\">https://github.com/leanprover-community/mathlib4/blob/0f581c67990efbf323fbd70c2000945cb04022d1/Mathlib/RingTheory/Smooth/Descent.lean</a>.</p>\n<p>If you have any comments or suggestions, I would be happy to hear them.</p>",
        "id": 437540995,
        "sender_full_name": "Christian Merten",
        "timestamp": 1715120149
    },
    {
        "content": "<p>Your <code>coefficients</code> is basically <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.frange#doc\">docs#Polynomial.frange</a>. APIs around <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.toSubring#doc\">docs#Polynomial.toSubring</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.liftsRing#doc\">docs#Polynomial.liftsRing</a> may also be useful.</p>",
        "id": 437566462,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1715136929
    },
    {
        "content": "<p>Thanks, that seems to be only for single variable polynomials though. But I can certainly adapt the naming. Although I find Polyonmial.frange less telling than \"coefficients\"</p>",
        "id": 437587456,
        "sender_full_name": "Christian Merten",
        "timestamp": 1715150459
    },
    {
        "content": "<p>Yeah, it might make sense to adapt the naming in the other direction.</p>",
        "id": 437593971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715153252
    }
]