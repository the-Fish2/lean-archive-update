[
    {
        "content": "<p>Ive been looking into the <a href=\"https://github.com/TwoFx/sudoku\">soduku widget</a> for lean and I'm interested in maybe furthering the idea. However, there does seem to be a big issue. For you to solve the soduku, you need to give the solution in the goal, which kind of defeats the purpose. Is there a way to structure a goal so this isn't needed (i.e: your arguments are the clues and the goal is \"find the solution to the puzzle\")?</p>",
        "id": 418879209,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1706633006
    },
    {
        "content": "<p>These examples make me suspect that Lean should be able to also find a solution to a sudoku puzzle:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∉</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">n</span>\n  <span class=\"n\">decide</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∉</span> <span class=\"n\">range</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">n</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 418880125,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706633319
    },
    {
        "content": "<p>Maybe? I'm worried it may get caught on more complex logic. Either way, that would still involve having to give the solution in the goal before solving it.</p>",
        "id": 418936909,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1706656179
    },
    {
        "content": "<p>We <em>really</em> should fix <code>decide</code> so you don't need the revert here!</p>",
        "id": 418941372,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706658556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"632788\">shortc1rcuit</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Logic.20puzzles.20in.20Lean/near/418936909\">said</a>:</p>\n<blockquote>\n<p>Either way, that would still involve having to give the solution in the goal before solving it.</p>\n</blockquote>\n<p>Not necessarily: since <code>decide</code> will only work on one choice, you can write a tactic that tries out all values in <code>0...9</code> and only use the one where <code>decide</code> was successful.</p>",
        "id": 418943412,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706659592
    },
    {
        "content": "<p>I'm confused, wouldn't you still have to put <code>n = 8</code> in the goal?</p>",
        "id": 419052011,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1706711371
    },
    {
        "content": "<p>What I am suggesting is that you can get a metaprogram to figure out what the answer is and then either add a declaration automatically to the environment or produce a <code>Try this</code> output with the solution.</p>",
        "id": 419079365,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706718789
    },
    {
        "content": "<p>I think a good 'fix' would be instead of saying \"prove that X is the answer\", having \"prove that there exists an answer\". This is a similar problem to what they run into with IMO problem formalization -- you don't want to give away the answer.</p>",
        "id": 419276500,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706802851
    },
    {
        "content": "<p>Even better if you say \"show that there exists a unique solution\", which is true for many logic puzzles :)</p>",
        "id": 419276574,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706802874
    }
]