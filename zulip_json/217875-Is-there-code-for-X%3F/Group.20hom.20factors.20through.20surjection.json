[
    {
        "content": "<p>Suppose I have group homs <code>f : G →* H</code> and <code>g : G  →* J</code>. If <code>f</code> is surjective, and <code>g</code> is trivial on <code>ker f</code>, then <code>g</code> factors through <code>f</code>. Is there a one-liner proof of this in mathlib?</p>",
        "id": 432943252,
        "sender_full_name": "David Loeffler",
        "timestamp": 1712940551
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom.liftOfSurjective#doc\">docs#MonoidHom.liftOfSurjective</a> or something nearby?</p>",
        "id": 432943346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712940596
    },
    {
        "content": "<p>Not really related, but I wonder what others think of definitions formulated like this. I would much rather be able to write <code>f.liftOfSurjective hf g &lt;| by ...</code> as opposed to <code>f.liftOfSurjective hf \\&lt;g, by ...\\&gt;</code>, just in terms of ergonomics.</p>",
        "id": 432943804,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712940780
    },
    {
        "content": "<p>It's useful to have these <code>Equiv</code> versions because it means you can rewrite by <code>Equiv.surjective.forall</code> or apply <code>Equiv.injective</code></p>",
        "id": 432944387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712940995
    },
    {
        "content": "<p>maybe we should have a different name for the equiv version; but having two names for everything is possibly worse than a few extra angle brackets</p>",
        "id": 432944437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712941018
    },
    {
        "content": "<p>A few years ago I systematically promoted many of these <code>lift</code>-like results to equivalences</p>",
        "id": 432944511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712941049
    },
    {
        "content": "<p>We seem to be missing a lemma <code>MonoidHom.liftOfSurjective_comp</code> stating the defining property.</p>",
        "id": 432944677,
        "sender_full_name": "David Loeffler",
        "timestamp": 1712941110
    },
    {
        "content": "<p>Is it <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonoidHom.liftOfRightInverse_comp#doc\">docs#AddMonoidHom.liftOfRightInverse_comp</a> ?</p>",
        "id": 432944885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712941194
    },
    {
        "content": "<p>The RHS of that equiv should also be a subtype :)</p>",
        "id": 432944900,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712941201
    },
    {
        "content": "<p>What subtype?</p>",
        "id": 432945057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712941245
    },
    {
        "content": "<p>nevermind I'm wrong.</p>",
        "id": 432945104,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712941265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Group.20hom.20factors.20through.20surjection/near/432944885\">said</a>:</p>\n<blockquote>\n<p>Is it <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonoidHom.liftOfRightInverse_comp_apply#doc\">docs#AddMonoidHom.liftOfRightInverse_comp_apply</a> ?</p>\n</blockquote>\n<p>Yes, that gives it pretty quickly, but if we're going to have <code>liftOfSurjective</code> as an alias for a special case of <code>liftOfRightInverse</code>, then we should have the corresponding lemma too.</p>",
        "id": 432945113,
        "sender_full_name": "David Loeffler",
        "timestamp": 1712941267
    },
    {
        "content": "<p>FWIW, I don't think we should get rid of the equiv versions of such lift constructions, but I would rather have both (again, just for ergonomics)</p>",
        "id": 432945200,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712941306
    },
    {
        "content": "<p><code>liftOfSurjective</code> is reducible, so <code>rw [liftOfRightInverse_comp_apply]</code> will work on it. Generally we don't repeat lemmas for <code>reducible def</code> (a.k.a <code>abbrev</code>s), because that defeats the point of it being reducible in the first place</p>",
        "id": 432945213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712941311
    }
]