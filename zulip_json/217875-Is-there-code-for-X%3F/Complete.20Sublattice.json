[
    {
        "content": "<p>We have a definition <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sublattice#doc\">docs#Sublattice</a> for sublattices but nothing for complete sublattices. We could define these along the following lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Sublattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CompleteLattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">CompleteSublattice</span> <span class=\"kd\">extends</span> <span class=\"n\">Sublattice</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">sSupClosed'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">sSup</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span>\n  <span class=\"n\">sInfClosed'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">sInf</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CompleteSublattice</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">CompleteSublattice</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSetLike</span> <span class=\"o\">:</span> <span class=\"n\">SetLike</span> <span class=\"o\">(</span><span class=\"n\">CompleteSublattice</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">L.carrier</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">L</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">SetLike.coe_injective'</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Bot</span> <span class=\"n\">L</span> <span class=\"n\">where</span>\n  <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">⊥</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">L.sSupClosed'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">empty_subset</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Top</span> <span class=\"n\">L</span> <span class=\"n\">where</span>\n  <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">⊤</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">L.sInfClosed'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">empty_subset</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SupSet</span> <span class=\"n\">L</span> <span class=\"n\">where</span>\n  <span class=\"n\">sSup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">sSup</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">L.sSupClosed'</span> <span class=\"n\">image_val_subset</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">InfSet</span> <span class=\"n\">L</span> <span class=\"n\">where</span>\n  <span class=\"n\">sInf</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">sInf</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">L.sInfClosed'</span> <span class=\"n\">image_val_subset</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subtype.coe_injective.completeLattice</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CompleteSublattice</span>\n</code></pre></div>\n<p>I claim this might save us a bit of boilerplate here and there. Has anyone, e.g., <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> any remarks about the desirability of this definition?</p>",
        "id": 412831640,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1705252886
    },
    {
        "content": "<p>There's currently exactly one use of sublattices, namely the four functions theorem (and it's not even crucial, just there to make a WLOG argument a bit easier), so it's hard to tell.</p>",
        "id": 412832205,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705253287
    },
    {
        "content": "<p>Thanks, that's roughly what I thought. I'll continue with what I'm doing and consider if it seems worth it.</p>",
        "id": 412832261,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1705253346
    },
    {
        "content": "<p>Actually, what use cases do you have in mind? Very often, we care about sublattices which are closed under infimum (eg subgroups) or under supremum (no example in mind but I'm sure they exist), but it's much rarer to have a sublattice which is closed under both.</p>",
        "id": 412832320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705253402
    },
    {
        "content": "<p>aren't subgroups and submodules, precisely, instances of such a complete lattices?</p>",
        "id": 412846435,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705266190
    },
    {
        "content": "<p>No because the union of subgroups is not a subgroup. That was precisely the point of my previous message.</p>",
        "id": 412848013,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705267791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Complete.20Sublattice/near/412846435\">said</a>:</p>\n<blockquote>\n<p>aren't subgroups and submodules, precisely, instances of such a complete lattices?</p>\n</blockquote>\n<p>They are, but the sup operation gives you the subgroup generated by the union. Is this not the way the family of substructures is regarded as a lattice?</p>",
        "id": 412848870,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1705268572
    },
    {
        "content": "<p>What Yaël means is that it is not a <em>sublattice</em> in the sense that the coercion to sets of the sup operation on subgroups is not sup operation on sets of their coercion to sets.</p>\n<p>So, it <em>is</em> a (complete) lattice, but only a sub-inf-iInf-semilattice.</p>",
        "id": 412875411,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705285790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Complete.20Sublattice/near/412832320\">said</a>:</p>\n<blockquote>\n<p>or under supremum (no example in mind ...)</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.Opens#doc\">docs#TopologicalSpace.Opens</a></p>",
        "id": 412877818,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705287520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Complete.20Sublattice/near/412832320\">said</a>:</p>\n<blockquote>\n<p>Actually, what use cases do you have in mind?</p>\n</blockquote>\n<p>I don't think it's so hard to come up with examples.</p>\n<p>How about the lattice of submodules of a module as a sublattice of the lattice of additive submonoids? (Related to my abandoned <a href=\"https://github.com/leanprover-community/mathlib4/pull/9695\">#9695</a>, which I might unabandon if / when I feel I've made enough progress with my primary goal.)</p>\n<p>The real example to hand is the collection of invariant submodules of a module wrt some (fixed) linear endomorphism. More generally another example is the lattice of Lie submodules of a Lie module. More generally still, surely any location where we use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Injective.completeLattice#doc\">docs#Function.Injective.completeLattice</a> and more generally still, the image of any <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CompleteLatticeHom#doc\">docs#CompleteLatticeHom</a></p>",
        "id": 412926705,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1705314479
    },
    {
        "content": "<p>(Btw I appreciate term has resumed Yaël so I'm not expecting you to spend further time replying here. I just wanted your quick opinion since you've written so much of this corner of the library; your remarks above have already been useful to me.)</p>",
        "id": 412927055,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1705314602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Complete.20Sublattice/near/412926705\">said</a>:</p>\n<blockquote>\n<p>How about the lattice of submodules of a module as a sublattice of the lattice of additive submonoids? </p>\n<p>The real example to hand is the collection of invariant submodules of a module wrt some (fixed) linear endomorphism. More generally another example is the lattice of Lie submodules of a Lie module.</p>\n</blockquote>\n<p>Okay I can believe these are actually complete sublattices (sub-complete lattices?).</p>",
        "id": 412929352,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705315379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Complete.20Sublattice/near/412926705\">said</a>:</p>\n<blockquote>\n<p>any location where we use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Injective.completeLattice#doc\">docs#Function.Injective.completeLattice</a> and more generally still, the image of any <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CompleteLatticeHom#doc\">docs#CompleteLatticeHom</a></p>\n</blockquote>\n<p>Yeah that was basically my use case for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sublattice#doc\">docs#Sublattice</a>. Precisely, the reason was that I needed to construct a sublattice  <code>L</code> inside a proof and have Lean derive <code>Lattice L</code>. Without <code>Sublattice</code>, I would have needed to fill in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype.lattice#doc\">docs#Subtype.lattice</a> by hand, and that was particularly irritating in that instance since <code>L</code> was the sublattice generated by a set, so it was obviously closed under inf and sup and I thought it would be bad design to not interface that through a <code>Sublattice</code> type.</p>",
        "id": 412930193,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705315664
    },
    {
        "content": "<p>This similar to my situation (though not quite identical). I'll probably propose this new definition.</p>",
        "id": 412930511,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1705315773
    },
    {
        "content": "<p>Okay, great! Note that</p>\n<ul>\n<li>I have more <code>Sublattice</code> material in <a href=\"https://github.com/YaelDillies/LeanCamCombi/blob/master/LeanCamCombi/Mathlib/Order/Sublattice.lean\">https://github.com/YaelDillies/LeanCamCombi/blob/master/LeanCamCombi/Mathlib/Order/Sublattice.lean</a></li>\n<li><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> is currently refactoring bundled sets, so the boilerplate you need to write might change very soon</li>\n</ul>",
        "id": 412930787,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705315875
    },
    {
        "content": "<p>Note that \"submodules as a sublattice of additive submonoids\" is not a sublattice (as in <code>{s : AddSubmonoid M // _}</code>) but a special type of homomorphism between complete lattices.</p>",
        "id": 412961868,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705326761
    },
    {
        "content": "<p>Yes, <code>Submodule</code> is its own type, not just a mere <code>Subtype</code> etc.</p>",
        "id": 412962203,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1705326857
    },
    {
        "content": "<p>I persuaded myself this was worth having: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9763\">#9763</a></p>",
        "id": 412994390,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1705336634
    }
]