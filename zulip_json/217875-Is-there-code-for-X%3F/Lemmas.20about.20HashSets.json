[
    {
        "content": "<p>Are there any lemmas about HashSets ? I wrote some verified algorithm using Finsets in Lean and managed to show its correctness. Unfortunately, this is really slow so I replaced it with the HashSets defined in Lean, which helps a lot, but now the proof no longer works.</p>\n<p>I tried proving it myself but it seems difficult. Did anyone ever work on this before ? I am mainly interested in the correctness of the insertion under <code>LawfulBEq</code> so something like:</p>\n<p><code>∀ (b': B),  ((S.insert b).contains b' ↔ S.contains b' ∨ b == b') </code></p>",
        "id": 426022686,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1710197327
    },
    {
        "content": "<p>There is a second implementation of HashSet/HashMap in Std, which has quite a few proofs. The <code>HashSet</code> in the Lean repository is mainly intended for implementation of the compiler, and has little proved about it.</p>",
        "id": 426062742,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710225651
    },
    {
        "content": "<p>I guess I best define then a hashSet as <code>abbrev HashSet  (A: Type) := Std.HashMap A Unit </code> and try from there. Thank you.</p>",
        "id": 426081870,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1710234649
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 426096410,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710240011
    },
    {
        "content": "<p>Depending on how your verified algorithm works, note that HashMap (either Std's or Lean's) is (edit:) not suitable for kernel computation. If you need that, then you want RBMap or AssocList instead.</p>",
        "id": 426096584,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710240098
    },
    {
        "content": "<p>Sorry, but I don't know what you mean by kernel computation.  I mainly want a faster variant compared to Finsets, which HashSets fulfilled and replace the lemmas about insertion to Finset by lemmas for my new data structure.The requirements are rather simple: I traverse something and insert into the set where I already way.</p>",
        "id": 426101686,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1710241897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Lemmas.20about.20HashSets/near/426096584\">said</a>:</p>\n<blockquote>\n<p>Depending on how your verified algorithm works, note that HashMap (either Std's or Lean's) is suitable for kernel computation. If you need that, then you want RBMap or AssocList instead.</p>\n</blockquote>\n<p>Are you missing a \"not\" somewhere, or am I misreading haha</p>",
        "id": 426140714,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710254497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"619540\">@Johannes Tantow</span>, where will you be running your code? Unfortunately \"faster\" depends on whether it is running in native code (i.e. under <code>reduceBool</code>), interpreted code (i.e. most tactics), or in the kernel (if you are asking the kernel to give you a <code>rfl</code> proof that <code>f x = y</code>).</p>",
        "id": 426239434,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710292405
    },
    {
        "content": "<p>I want to use it in an compiled program by lake. I guess that is native code ?</p>",
        "id": 426543455,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1710423533
    }
]