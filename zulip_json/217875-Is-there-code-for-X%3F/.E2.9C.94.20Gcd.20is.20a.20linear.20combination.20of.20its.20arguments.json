[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">GcdLinearCombination</span> <span class=\"o\">(</span><span class=\"n\">k₀</span> <span class=\"n\">k₁</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m₀</span> <span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Int.gcd</span> <span class=\"n\">k₀</span> <span class=\"n\">k₁</span> <span class=\"bp\">=</span> <span class=\"n\">m₀</span> <span class=\"bp\">*</span> <span class=\"n\">k₀</span> <span class=\"bp\">+</span> <span class=\"n\">m₁</span> <span class=\"bp\">*</span> <span class=\"n\">k₁</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks for the help.</p>",
        "id": 438885100,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1715806991
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Int/GCD.html#Nat.xgcd\">Nat.xgcd</a></p>",
        "id": 438886075,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715807357
    },
    {
        "content": "<p>looks like we don't have the analogously named lemma for <code>Int</code> :(</p>",
        "id": 438886139,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715807395
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"c1\">-- set_option maxHeartbeats 0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">associated_gcd_gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Associated</span> <span class=\"o\">(</span><span class=\"n\">IsBezout.gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">gcd_greatest_associated</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">IsBezout.gcd_dvd_left</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">IsBezout.gcd_dvd_right</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">e</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n    <span class=\"n\">apply</span> <span class=\"n\">IsBezout.dvd_gcd</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">GcdLinearCombination</span> <span class=\"o\">(</span><span class=\"n\">k₀</span> <span class=\"n\">k₁</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m₀</span> <span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Int.gcd</span> <span class=\"n\">k₀</span> <span class=\"n\">k₁</span> <span class=\"bp\">=</span> <span class=\"n\">m₀</span> <span class=\"bp\">*</span> <span class=\"n\">k₀</span> <span class=\"bp\">+</span> <span class=\"n\">m₁</span> <span class=\"bp\">*</span> <span class=\"n\">k₁</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IsBezout.gcd_eq_sum</span> <span class=\"n\">k₀</span> <span class=\"n\">k₁</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">associated_gcd_gcd</span> <span class=\"n\">k₀</span> <span class=\"n\">k₁</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.associated_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">use</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Int.coe_gcd</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">n</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.coe_gcd</span><span class=\"o\">]</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 438889956,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715809006
    },
    {
        "content": "<p>(I thought I knew all the gcd's in mathlib, but I discovered a new one just now)</p>",
        "id": 438890047,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715809053
    },
    {
        "content": "<p>First lemma is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12941\">#12941</a></p>",
        "id": 438893371,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715810670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385848\">Mark Andrew Gerads</span> has marked this topic as resolved.</p>",
        "id": 438898619,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715813394
    }
]