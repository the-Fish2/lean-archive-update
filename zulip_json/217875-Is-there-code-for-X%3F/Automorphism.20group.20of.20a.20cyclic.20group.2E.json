[
    {
        "content": "<p>Suppose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> is finite cyclic of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, leanified as <code>IsCyclic G</code> and <code>Fintype G</code>, for example. Do we have in mathlib the isomorphism between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>u</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Aut(G)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><msup><mo stretchy=\"false\">)</mo><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">(\\mathbb{Z}/n)^\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0213em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 413071807,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705374947
    },
    {
        "content": "<p>Do we have it for <code>ZMod n</code>?</p>",
        "id": 413071890,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705374991
    },
    {
        "content": "<p>I wrote this in a branch, let me find it. The problem is that it doesn't <code>to_additive</code>ize currently because Lean wants to apply it to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><msup><mo stretchy=\"false\">)</mo><mo lspace=\"0em\" rspace=\"0em\">×</mo></msup></mrow><annotation encoding=\"application/x-tex\">(\\mathbb{Z}/n)^{\\times}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0213em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">×</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 413074580,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705376820
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/j-loreaux%2Fgenerator\">branch#j-loreaux/generator</a></p>",
        "id": 413074667,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705376870
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 413074676,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705376879
    },
    {
        "content": "<p>Oh, actually, it's not quite what you asked for.</p>",
        "id": 413074722,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705376885
    },
    {
        "content": "<p>Nevermind. I have the bijection generators and the units of <code>ZMod n</code>.</p>",
        "id": 413074793,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705376940
    },
    {
        "content": "<p>However, that branch is probably quite useful for getting your hands on this isomorphism.</p>",
        "id": 413074842,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705376974
    },
    {
        "content": "<p>Aha I see.</p>",
        "id": 413074849,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705376976
    },
    {
        "content": "<p>Yes, still very helpful. Thanks!</p>",
        "id": 413074870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705376990
    },
    {
        "content": "<p>Feel free to clean up that branch and PR it if you wish. I'm too busy with other things to focus on it.</p>",
        "id": 413074964,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705377024
    },
    {
        "content": "<p>I probably won't do anything with it since I found another more direct approach to what I was actually looking into.</p>",
        "id": 413075084,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705377100
    }
]