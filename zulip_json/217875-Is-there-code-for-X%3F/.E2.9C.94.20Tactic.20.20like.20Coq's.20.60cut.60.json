[
    {
        "content": "<p>Is there a tactic that works like Coq's <code>cut</code>? Given a goal <code>A</code>, the tactic <code>cut B</code> generates subgoals <code>B → A</code> and <code>B</code>.</p>",
        "id": 440151573,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1716400895
    },
    {
        "content": "<p>I think <code>suffices B by</code> should do this. (Edit: oh, it does this and then <code>intro this</code> on the B -&gt; A goal)</p>",
        "id": 440152362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716401128
    },
    {
        "content": "<p>If there were a modus ponens theorem, it'd just be a matter of using <code>apply</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">cut</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">hb</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">cut</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">  </span><span class=\"c\">/-</span>\n<span class=\"cm\">  case h</span>\n<span class=\"cm\">  a b : Prop</span>\n<span class=\"cm\">  ⊢ b → a</span>\n\n<span class=\"cm\">  case hb</span>\n<span class=\"cm\">  a b : Prop</span>\n<span class=\"cm\">  ⊢ b</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 440152731,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716401258
    },
    {
        "content": "<p>I called this <code>cut</code> rather than <code>mp</code> just because normally <code>b</code> would be implicit.</p>",
        "id": 440152865,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716401299
    },
    {
        "content": "<p>And there really isn't this theorem anywhere?</p>",
        "id": 440153086,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1716401395
    },
    {
        "content": "<p>Maybe it's somewhere in the library, but it's certainly in the first line of my code block.</p>",
        "id": 440153599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716401575
    },
    {
        "content": "<p>Why would you need a name for function application? Edit: I guess because you want a <code>cut</code> tactic :-)</p>",
        "id": 440153983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716401736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  (?b -&gt; ?a) -&gt; ?b -&gt; ?a</p>",
        "id": 440154318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716401858
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> Cannot search: No constants or name fragments in search pattern.</p>",
        "id": 440154320,
        "sender_full_name": "loogle",
        "timestamp": 1716401859
    },
    {
        "content": "<p>Having a non-dependent function application like this helps <code>apply</code> unify against the goal. There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.app#doc\">docs#Function.app</a>, but it doesn't work because it's dependent. (Plus, it's deprecated for some reason.)</p>",
        "id": 440154475,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716401910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ?b -&gt; ?a, ?b, |- ?a</p>",
        "id": 440154517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716401927
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> Cannot search: No constants or name fragments in search pattern.</p>",
        "id": 440154519,
        "sender_full_name": "loogle",
        "timestamp": 1716401928
    },
    {
        "content": "<p>I guess this actually works, and it's not so bad to type, assuming <code>b</code> isn't so complicated (a big assumption):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"c1\">-- or `refine (?_ : b → _) ?_` if you don't want to name the goals.</span>\n<span class=\"w\">  </span><span class=\"c\">/-</span>\n<span class=\"cm\">  case h</span>\n<span class=\"cm\">  a b : Prop</span>\n<span class=\"cm\">  ⊢ b → a</span>\n\n<span class=\"cm\">  case hb</span>\n<span class=\"cm\">  a b : Prop</span>\n<span class=\"cm\">  ⊢ b</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 440154809,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716402036
    },
    {
        "content": "<p>Maybe Andrej wants to save typing so you can write something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">macro</span><span class=\"w\"> </span><span class=\"s2\">\"cut\"</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">hb</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 440155235,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716402197
    },
    {
        "content": "<p>so he can have his <code>cut b</code></p>",
        "id": 440155268,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716402209
    },
    {
        "content": "<p>We can also name those hypotheses for nicer UI:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">macro</span><span class=\"w\"> </span><span class=\"s2\">\"cut\"</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">cut</span><span class=\"bp\">.</span><span class=\"n\">imp</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">cut</span><span class=\"bp\">.</span><span class=\"n\">goal</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">cut</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">  </span><span class=\"c\">/-</span>\n<span class=\"cm\">  case cut.imp</span>\n<span class=\"cm\">  a b : Prop</span>\n<span class=\"cm\">  ⊢ b → a</span>\n\n<span class=\"cm\">  case cut.goal</span>\n<span class=\"cm\">  a b : Prop</span>\n<span class=\"cm\">  ⊢ b</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 440156013,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716402457
    },
    {
        "content": "<p>Should we add this to mathlib?</p>",
        "id": 440156028,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716402462
    },
    {
        "content": "<p>I’m not sure we need to add new tactics for something that can already be done in lots of different ways. Here in particular the gain compared to <code>suffices</code> is not clear. There are already so many tactics… I think this <code>cut</code> only makes sense for Coq users who want to transition without changing too many things.</p>",
        "id": 440156953,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716402772
    },
    {
        "content": "<p>How precisely would I use <code>suffices</code> in place of <code>cut</code>?</p>",
        "id": 440191147,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1716415022
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">suffices</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">hb</span>\n</code></pre></div>",
        "id": 440192016,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716415381
    },
    {
        "content": "<p>Got it. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> mentioned <code>suffices</code> right at the beginning,  but for some reason I couldn't get it to work. It's working perfectly, so I think that's the answer. No need for <code>cut</code>. Thanks.</p>",
        "id": 440192137,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1716415441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> has marked this topic as resolved.</p>",
        "id": 440192306,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716415509
    }
]