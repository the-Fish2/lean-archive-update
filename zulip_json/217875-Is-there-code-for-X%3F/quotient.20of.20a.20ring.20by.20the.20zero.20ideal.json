[
    {
        "content": "<p>I'm surprised we don't have this; just want to make sure there isn't an easier way to construct it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quotientBotEquiv</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">Ideal.quotEquivOfEq</span> <span class=\"o\">(</span><span class=\"n\">RingHom.ker_coe_equiv</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">RingHom.quotientKerEquivOfRightInverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 422274398,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1708360901
    },
    {
        "content": "<p>Can we prove it more generally for <code>[Semiring R]</code> and <code>⊥ : RingCon R</code>?</p>",
        "id": 422275344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708361196
    },
    {
        "content": "<p>Presumably you can, but <del>docs#Ideal.instHasQuotientIdealToSemiringToCommSemiring is defined in terms of Submodule.hasQuotient, so</del> <code>R ⧸ (⊥ : Ideal R)</code> is not defeq to <code>(⊥ : RingCon R).Quotient</code>, but it is defeq to <code>(Ideal.Quotient.ringCon ⊥ : RingCon R).Quotient</code>.</p>",
        "id": 422277686,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1708362062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/quotient.20of.20a.20ring.20by.20the.20zero.20ideal/near/422274398\">said</a>:</p>\n<blockquote>\n<p>I'm surprised we don't have this; just want to make sure there isn't an easier way to construct it:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quotientBotEquiv</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">Ideal.quotEquivOfEq</span> <span class=\"o\">(</span><span class=\"n\">RingHom.ker_coe_equiv</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">RingHom.quotientKerEquivOfRightInverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It should be a bit easier in the other direction (that of <a href=\"http://Quotient.mk\">Quotient.mk</a>).</p>",
        "id": 422329377,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708392230
    }
]