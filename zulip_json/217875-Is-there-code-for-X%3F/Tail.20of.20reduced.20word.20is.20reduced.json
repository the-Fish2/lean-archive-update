[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.FreeGroup.Basic</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tail_reduced_eq_reduced</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>  <span class=\"n\">FreeGroup.reduce</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x.tail</span> <span class=\"bp\">=</span>  <span class=\"n\">FreeGroup.reduce</span> <span class=\"n\">x.tail</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span>\n        <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>\"A codeblock says more than a thousand words\"...<br>\nI have a List wich represents a word in a FreeGroup. according to hx, this word is fully reduced. I thought it would be simple to prove that the tail of this word is also reduced, but I'm stuck. What am I missing?</p>",
        "id": 426617317,
        "sender_full_name": "Christian K",
        "timestamp": 1710445815
    },
    {
        "content": "<p>I think there are essentially three steps to this proof.</p>\n<ol>\n<li>Show (using <code>FreeGroup.reduce.cons</code> and induction) that <code>(FreeGroup.reduce L).length ≤ L.length</code> for all lists L, and that equality holds if and only if  <code>FreeGroup.reduce L = L</code>.</li>\n<li>Show that <code>(FreeGroup.reduce (x :: L)).length ≤ 1 + (FreeGroup.reduce L).length</code> for all <code>x</code> and <code>L</code>. This can be done using <code>FreeGroup.reduce.cons</code> directly and should not require induction.</li>\n<li>Assuming that <code>FreeGroup.reduce (x :: L) = x :: L</code>, you can take the length of both sides and combine the above results to show that <code>FreeGroup.reduce L = L</code>.</li>\n</ol>\n<p>That is how I would approach it, but maybe someone can suggest an easier way.</p>",
        "id": 426670677,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1710475649
    },
    {
        "content": "<p>I do not think that it makes much sense to use induction directly on the theorem <code>tail_reduced_eq_reduced</code> you are trying to prove. In order to actually use the inductive hypothesis <code>ih</code>, you will need to show that <code>tail = FreeGroup.reduce tail</code>. And if you can do that, the proof is already done anyway.</p>",
        "id": 426671403,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1710476166
    },
    {
        "content": "<p>I don't think the first point works like that, because if<br>\n<code>List.length (FreeGroup.reduce L) &lt; List.length L</code>then <code>L</code>is not reduced. <br>\nAnd I don't see how i could use 2. then.</p>",
        "id": 426745178,
        "sender_full_name": "Christian K",
        "timestamp": 1710509752
    },
    {
        "content": "<p>I came up with a proof, though I wouldn't be surprised if there's an easier / more elegant way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.FreeGroup.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reduce_ne_inv_pair</span> <span class=\"o\">:</span> <span class=\"n\">FreeGroup.reduce</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.nil_append</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">FreeGroup.reduce.not</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tail_reduced_eq_reduced</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">FreeGroup.reduce</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">x.tail</span> <span class=\"bp\">=</span> <span class=\"n\">FreeGroup.reduce</span> <span class=\"n\">x.tail</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">FreeGroup.reduce.cons</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">FreeGroup.reduce</span> <span class=\"n\">tail</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.reduce</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">List.exists_cons_of_ne_nil</span> <span class=\"n\">h1</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n      <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">h3</span>\n      <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">head</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n        <span class=\"n\">cases'</span> <span class=\"n\">h3</span> <span class=\"k\">with</span> <span class=\"n\">h4</span> <span class=\"n\">h5</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">h5</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">reduce_ne_inv_pair</span> <span class=\"n\">h2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.cons_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.tail_cons</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n</code></pre></div>",
        "id": 426771110,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1710517530
    },
    {
        "content": "<p>Ok thank you very much.</p>",
        "id": 426795254,
        "sender_full_name": "Christian K",
        "timestamp": 1710525316
    }
]