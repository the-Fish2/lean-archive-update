[
    {
        "content": "<p>The present version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.sum_smul_index%27#doc\">docs#Finsupp.sum_smul_index'</a>  can be generalized to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Generalizes `Finsupp.sum_smul_index'`</span>\n<span class=\"kd\">example</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">f.support</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Finsupp.sum</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finsupp.sum</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">symm</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.sum</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.sum_of_support_subset</span> <span class=\"n\">_</span> <span class=\"n\">Finsupp.support_smul</span> <span class=\"n\">_</span> <span class=\"n\">h0</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_congr</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">_</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.coe_smul</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but the proof is longer than the one-line initial proof <code>exact Finsupp.sum_mapRange_index h0</code>.</p>",
        "id": 422624009,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708524062
    },
    {
        "content": "<p>That's not more general, the version in mathlib assumes only <code>DistribSMul R M</code></p>",
        "id": 422625321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708524471
    },
    {
        "content": "<p>I think it is because of <code>f </code>which is valued in <code>R</code>…</p>",
        "id": 422625447,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708524506
    },
    {
        "content": "<p>You're comparing to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sum_smul_index'</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DistribSMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g.sum</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finsupp.sum_mapRange_index</span> <span class=\"n\">h0</span>\n</code></pre></div>\n<p>right?</p>",
        "id": 422625535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708524537
    },
    {
        "content": "<p>But no, I'm confusing with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.sum_smul_index#doc\">docs#Finsupp.sum_smul_index</a> (not primed)</p>",
        "id": 422625553,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708524541
    },
    {
        "content": "<p>So yes, I should have!</p>",
        "id": 422625583,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708524550
    },
    {
        "content": "<p>I guess your intended generalization is <code> ∈ f.support</code>?</p>",
        "id": 422625626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708524566
    },
    {
        "content": "<p>I really meant for the monoid value.<br>\nI don't know whether the <code>∈ f.support</code> is important, I wrote it inconsciously…</p>",
        "id": 422625780,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708524605
    },
    {
        "content": "<p>I think it's a good generalization, since we had a PR not that long ago that added it to <code>sum_add_index</code></p>",
        "id": 422625896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708524642
    },
    {
        "content": "<p>I should make it in another PR, here, I'm doing tensor products…</p>",
        "id": 422625993,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708524677
    },
    {
        "content": "<p>Presumably then the existing primed lemma already has the generalization you wanted?</p>",
        "id": 422626127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708524712
    },
    {
        "content": "<p>Maybe the unprimed one should have a docstring that says its the special case of the primed one</p>",
        "id": 422626289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708524751
    },
    {
        "content": "<p>The primed lemma suffices me.<br>\nAnd the generalization for support can't be proved in one line, unless one generalizes  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.sum_mapRange_index#doc\">docs#Finsupp.sum_mapRange_index</a>.</p>",
        "id": 422626493,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708524814
    }
]