[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">s.sum</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEReal</span> <span class=\"bp\">=</span> <span class=\"n\">s.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEReal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 431287401,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712229530
    },
    {
        "content": "<p>Don't think we have it</p>",
        "id": 431287983,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712229730
    },
    {
        "content": "<p>Thanks for your reply!<br>\nShould I prove it by induction?</p>",
        "id": 431289679,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712230306
    },
    {
        "content": "<p>i think it might be better to prove it via it being an addhom?</p>",
        "id": 431290457,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712230564
    },
    {
        "content": "<p>there is probably api for it in that case?</p>",
        "id": 431290510,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712230581
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=map_sum#doc\">docs#map_sum</a></p>",
        "id": 431291586,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712230882
    },
    {
        "content": "<p>also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EReal.coe_add#doc\">docs#EReal.coe_add</a></p>",
        "id": 431292940,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712231244
    },
    {
        "content": "<p>that should probably be about all you need?</p>",
        "id": 431292991,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712231264
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Real.toERealAddHom</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→+</span> <span class=\"n\">EReal</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">Real.toEReal</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_add'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">EReal.coe_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- or `rfl`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">s.sum</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEReal</span> <span class=\"bp\">=</span> <span class=\"n\">s.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEReal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Real.toERealAddHom_apply</span><span class=\"o\">,</span> <span class=\"n\">map_sum</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 431293806,
        "sender_full_name": "Richard Copley",
        "timestamp": 1712231514
    },
    {
        "content": "<p>Should it be called AddMonoidHom? I couldn't immediately see this in mathlib and I would imagine that we want it.</p>",
        "id": 431299295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712233052
    },
    {
        "content": "<p>Maybe! There's some precedent for naming <code>AddMonoidHom</code>s with a suffix <code>AddHom</code>: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.liftAddHom#doc\">docs#TensorProduct.liftAddHom</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.constVAddHom#doc\">docs#Equiv.constVAddHom</a> for a couple</p>",
        "id": 431300134,
        "sender_full_name": "Richard Copley",
        "timestamp": 1712233292
    },
    {
        "content": "<p>Why not just make it a <code>RingHom</code>?</p>",
        "id": 431324885,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712240511
    },
    {
        "content": "<p><a href=\"https://github.com/madvorak/vcsp/blob/a0e85a44f37432e52995138979511c48cd00094d/VCSP/ExtendedRationals.lean#L994\">https://github.com/madvorak/vcsp/blob/a0e85a44f37432e52995138979511c48cd00094d/VCSP/ExtendedRationals.lean#L994</a><br>\n<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><br>\n<a href=\"https://github.com/madvorak/vcsp/blob/a0e85a44f37432e52995138979511c48cd00094d/VCSP/LinearRelaxationGnvAndSFP.lean#L21\">https://github.com/madvorak/vcsp/blob/a0e85a44f37432e52995138979511c48cd00094d/VCSP/LinearRelaxationGnvAndSFP.lean#L21</a></p>",
        "id": 431325767,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712240753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60Finset.2Esum.60.20commutes.20with.20.60Real.2EtoEReal.60/near/431324885\">said</a>:</p>\n<blockquote>\n<p>Why not just make it a <code>RingHom</code>?</p>\n</blockquote>\n<p>I doubt anything with infinity in is an additive group let alone a ring.</p>",
        "id": 431339486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712244223
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom#doc\">docs#RingHom</a></p>",
        "id": 431339642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712244258
    },
    {
        "content": "<p>Hmm it could be a semiring but even there I'm super nervous about distributivity.</p>",
        "id": 431339802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712244302
    },
    {
        "content": "<p>It isn't distributive, so no.</p>",
        "id": 431339887,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712244321
    },
    {
        "content": "<p>I guess it's a bit weird to me that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom#doc\">docs#RingHom</a> requires anything besides the data fields, but <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 431340537,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712244507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60Finset.2Esum.60.20commutes.20with.20.60Real.2EtoEReal.60/near/431339486\">said</a>:</p>\n<blockquote>\n<p>I doubt anything with infinity in is an additive group let alone a ring.</p>\n</blockquote>\n<p>Yeah. Today I ran into problems because extended rationals/reals are not <code>OrderedCancelAddCommMonoid</code>, which I assumed in the finite-valued case. I still haven't fully recovered from it:<br>\n<a href=\"https://github.com/madvorak/vcsp/blob/a0e85a44f37432e52995138979511c48cd00094d/VCSP/LinearRelaxationGnvAndSFP.lean#L431\">https://github.com/madvorak/vcsp/blob/a0e85a44f37432e52995138979511c48cd00094d/VCSP/LinearRelaxationGnvAndSFP.lean#L431</a></p>",
        "id": 431340747,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712244563
    },
    {
        "content": "<p>Probably it wouldn't be useful in very many contexts, but that is the case with many generalizations in Mathlib: they are useful in some niche.</p>",
        "id": 431340753,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712244565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60Finset.2Esum.60.20commutes.20with.20.60Real.2EtoEReal.60/near/431325767\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/madvorak/vcsp/blob/a0e85a44f37432e52995138979511c48cd00094d/VCSP/ExtendedRationals.lean#L994\">https://github.com/madvorak/vcsp/blob/a0e85a44f37432e52995138979511c48cd00094d/VCSP/ExtendedRationals.lean#L994</a><br>\n<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><br>\n<a href=\"https://github.com/madvorak/vcsp/blob/a0e85a44f37432e52995138979511c48cd00094d/VCSP/LinearRelaxationGnvAndSFP.lean#L21\">https://github.com/madvorak/vcsp/blob/a0e85a44f37432e52995138979511c48cd00094d/VCSP/LinearRelaxationGnvAndSFP.lean#L21</a></p>\n</blockquote>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">- -- Richard Copley provided</span>\n<span class=\"gi\">+ -- Edward van de Meent provided</span>\n</code></pre></div>",
        "id": 431347216,
        "sender_full_name": "Richard Copley",
        "timestamp": 1712246257
    },
    {
        "content": "<p>I am really confused now. Is it now attributed correctly in a way that acknowledge both your contributions?</p>",
        "id": 431347716,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712246353
    },
    {
        "content": "<p>i'd say so?</p>",
        "id": 431348467,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712246477
    },
    {
        "content": "<p>Or even shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEReal</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEReal</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_sum</span> <span class=\"n\">Real.toERealAddHom</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 431349064,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712246583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60Finset.2Esum.60.20commutes.20with.20.60Real.2EtoEReal.60/near/431347716\">said</a>:</p>\n<blockquote>\n<p>I am really confused now. Is it now attributed correctly in a way that acknowledge both your contributions?</p>\n</blockquote>\n<p>Sorry! I didn't mean to make more work for you. No objections from me to any way you want to phrase things. It was just my way of pointing out that Edward said it first.</p>",
        "id": 431349910,
        "sender_full_name": "Richard Copley",
        "timestamp": 1712246731
    },
    {
        "content": "<p>Alright. I attributed <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> for the definition and <span class=\"user-mention\" data-user-id=\"684366\">@Edward van de Meent</span> for the proof idea. Is it now correct?</p>",
        "id": 431350208,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712246788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 431355344,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712248010
    }
]