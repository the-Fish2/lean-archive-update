[
    {
        "content": "<p>Do we have everything necessary to prove this ? What about the version where we evaluate at any point rather than zero (I expect this to be harder since you can't just use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.divMonomial#doc\">docs#MvPolynomial.divMonomial</a>) ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">RingHom</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MvPolynomial.ker_aeval_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Ideal.span</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 426210911,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1710276965
    },
    {
        "content": "<p>In my opinion it shouldn't be very hard (but  who knows...): one inclusion seems trivial, and for the other one I would use the degree. But this is only a guess</p>",
        "id": 426218792,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710280429
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">RingHom</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MvPolynomial.ker_aeval_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Ideal.span</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">image_univ</span><span class=\"o\">,</span> <span class=\"n\">mem_ideal_span_X_image</span><span class=\"o\">,</span> <span class=\"n\">eval_zero</span><span class=\"o\">,</span> <span class=\"n\">mem_ker</span><span class=\"o\">,</span> <span class=\"n\">constantCoeff_eq</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">not_mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">not_iff_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">push_neg</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hm</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"n\">_</span> <span class=\"n\">trivial</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.mem_ideal_span_X_image#doc\">docs#MvPolynomial.mem_ideal_span_X_image</a> is the key lemma. On the other hand we know <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.vanishingIdeal_singleton_isMaximal#doc\">docs#MvPolynomial.vanishingIdeal_singleton_isMaximal</a> but apparently don't have the explicit generators.</p>",
        "id": 426223630,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1710282777
    },
    {
        "content": "<p>Thanks!</p>\n<p>From my limited experience with this area of mathlib <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.mem_ideal_span_X_image#doc\">docs#MvPolynomial.mem_ideal_span_X_image</a> doesn't seem very natural (compare with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.ker_evalRingHom#doc\">docs#Polynomial.ker_evalRingHom</a>), I guess this is because we don't have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=divByMonic#doc\">docs#divByMonic</a> for <code>MvPolynomial</code> ?</p>",
        "id": 426224829,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1710283541
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.mem_ideal_span_X_image#doc\">docs#MvPolynomial.mem_ideal_span_X_image</a> should be thought of as a lemma about monomials (not monic polynomials) and there's even a generalization to any monomial ideal: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonoidAlgebra.mem_ideal_span_of%27_image#doc\">docs#AddMonoidAlgebra.mem_ideal_span_of'_image</a>.</p>\n<p>We could prove the analogue of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.ker_evalRingHom#doc\">docs#Polynomial.ker_evalRingHom</a> relatively easily using <code>ker_aeval_zero</code> above (shouldn't it be called <code>ker_eval_zero</code>)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MvPolynomial</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">RingHom</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ker_eval_zero</span> <span class=\"o\">:</span> <span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Ideal.span</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">image_univ</span><span class=\"o\">,</span> <span class=\"n\">mem_ideal_span_X_image</span><span class=\"o\">,</span> <span class=\"n\">eval_zero</span><span class=\"o\">,</span> <span class=\"n\">mem_ker</span><span class=\"o\">,</span> <span class=\"n\">constantCoeff_eq</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">not_mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">not_iff_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">push_neg</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"n\">hm</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h0</span> <span class=\"n\">_</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"bp\">!</span><span class=\"kd\">]</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">addCAlgEquiv</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">ofAlgHom</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aeval_zero_comp_addCAlgEquiv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">addCAlgEquiv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ker_eval</span> <span class=\"o\">:</span> <span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Ideal.span</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">aeval_zero_comp_addCAlgEquiv</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"n\">change</span> <span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toRingHom</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">ker</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Ideal.comap_comap</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ker</span><span class=\"o\">,</span> <span class=\"n\">ker_eval_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Ideal.map_symm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">addCAlgEquiv</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toRingEquiv</span><span class=\"o\">,</span>\n    <span class=\"n\">Ideal.map_span</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">range_comp</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span><span class=\"bp\">!;</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">addCAlgEquiv</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vanishingIdeal_singleton</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">vanishingIdeal</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">Ideal.span</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_vanishingIdeal_singleton_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ker_eval</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MvPolynomial</span>\n</code></pre></div>",
        "id": 426261016,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1710306588
    }
]