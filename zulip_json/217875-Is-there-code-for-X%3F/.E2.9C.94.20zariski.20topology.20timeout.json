[
    {
        "content": "<p>I just start learning lean4 and try to define the zariski topology for the affine space A^n over K...</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">ℓ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">ℓ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">ℓ</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nil</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">section</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">𝔸</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">ℓ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">𝕍</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">MvPolynomial</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">𝔸toF</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">zariski_topology</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TopologicalSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">IsOpen</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">MvPolynomial</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">𝕍</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span>\n<span class=\"w\">  </span><span class=\"n\">isOpen_inter</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"n\">U1</span><span class=\"w\"> </span><span class=\"n\">U2</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">I1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">U1_open</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">U2_open</span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">U1_open</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">U2_open</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">compl</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">𝕍</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">I1</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">I2</span>\n<span class=\"w\">    </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">constructor</span>\n<span class=\"w\">    </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">⟨⟨</span><span class=\"n\">f1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f1_in_I1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V1</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f2_in_I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V2</span><span class=\"bp\">⟩⟩⟩</span>\n<span class=\"w\">    </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">f2</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">mul_mem_mul</span><span class=\"w\"> </span><span class=\"n\">f1_in_I1</span><span class=\"w\"> </span><span class=\"n\">f2_in_I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V2</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f_in_I1I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V</span><span class=\"bp\">⟩⟩</span>\n<span class=\"w\">    </span><span class=\"n\">rcases</span><span class=\"w\"> </span><span class=\"n\">IsNoetherian</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span><span class=\"w\"> </span><span class=\"n\">I1</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">fs1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">fs1_span</span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"n\">rcases</span><span class=\"w\"> </span><span class=\"n\">IsNoetherian</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span><span class=\"w\"> </span><span class=\"n\">I2</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">fs2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">fs2_span</span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">fs1_span</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"n\">fs2_span</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">f_in_I1I2</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">span_mul_span'</span><span class=\"w\"> </span><span class=\"n\">fs1</span><span class=\"bp\">.</span><span class=\"n\">toSet</span><span class=\"w\"> </span><span class=\"n\">fs2</span><span class=\"bp\">.</span><span class=\"n\">toSet</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">f_in_I1I2</span>\n<span class=\"w\">    </span><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">mem_span_finset</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"n\">f_in_I1I2</span>\n<span class=\"w\">    </span><span class=\"n\">constructor</span>\n</code></pre></div>\n<p>but at #check it complained: \"(deterministic) timeout at <code>whnf</code>, maximum number of heartbeats (200000) has been reached.\" <span aria-label=\"worried\" class=\"emoji emoji-1f61f\" role=\"img\" title=\"worried\">:worried:</span></p>",
        "id": 443433295,
        "sender_full_name": "Hans Lin",
        "timestamp": 1717829895
    },
    {
        "content": "<p>Can you include all the imports? I never saw <code>#check</code> used inside a definition and maybe that's invalid. But you can certainly do <code>have := mem_span_finset.mp f_in_I1I2</code> and check the type of <code>this</code> in the infoview.</p>",
        "id": 443478614,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717859359
    },
    {
        "content": "<p>Here is the imports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">MvPolynomial</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Polynomial</span><span class=\"bp\">.</span><span class=\"n\">Eval</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">RingTheory</span><span class=\"bp\">.</span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">Operations</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">RingTheory</span><span class=\"bp\">.</span><span class=\"n\">Noetherian</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">RingTheory</span><span class=\"bp\">.</span><span class=\"n\">Polynomial</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">Defs</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Field</span><span class=\"bp\">.</span><span class=\"n\">Defs</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Topology</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n</code></pre></div>\n<p>and I've also tried <code>have := mem_span_finset.mp f_in_I1I2</code> and <code>simp [mem_span_finset.mp f_in_I1I2]</code> but they complain with the same info...</p>",
        "id": 443520174,
        "sender_full_name": "Hans Lin",
        "timestamp": 1717879080
    },
    {
        "content": "<p>I'm still missing the definition of <code>𝔸toF</code>.<br>\nCan you make sure everything works when you open it in Lean 4 playground?<br>\n<a href=\"/user_uploads/3121/EC2kSNXxALvpdAc3vrfrZEzj/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/EC2kSNXxALvpdAc3vrfrZEzj/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/EC2kSNXxALvpdAc3vrfrZEzj/image.png\"></a></div>",
        "id": 443536201,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1717891728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/zariski.20topology.20timeout/near/443536201\">#narrow/stream/217875-Is-there-code-for-X.3F/topic/zariski.20topology.20timeout/near/443536201</a>：</p>\n<blockquote>\n<p>I'm still missing the definition of <code>𝔸toF</code>.<br>\nCan you make sure everything works when you open it in Lean 4 playground?<br>\n<a href=\"/user_uploads/3121/EC2kSNXxALvpdAc3vrfrZEzj/image.png\">image.png</a></p>\n</blockquote>\n<p>Ah, sorry. Here is the adjusted code piece:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">MvPolynomial</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Polynomial</span><span class=\"bp\">.</span><span class=\"n\">Eval</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">RingTheory</span><span class=\"bp\">.</span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">Operations</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">RingTheory</span><span class=\"bp\">.</span><span class=\"n\">Noetherian</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">RingTheory</span><span class=\"bp\">.</span><span class=\"n\">Polynomial</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">Defs</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Field</span><span class=\"bp\">.</span><span class=\"n\">Defs</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Topology</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">MvPolynomial</span>\n\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">section</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">ℓ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">ℓ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">ℓ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">ℓ</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nil</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">𝔸toF</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">R</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_⟩</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">𝔸toF</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">omega</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">𝕍</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">MvPolynomial</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">𝔸toF</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">zariski_topology</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TopologicalSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">IsOpen</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">MvPolynomial</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">𝕍</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span>\n<span class=\"w\">  </span><span class=\"n\">isOpen_inter</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"n\">U1</span><span class=\"w\"> </span><span class=\"n\">U2</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">I1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">U1_open</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">U2_open</span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">U1_open</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">U2_open</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">compl</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">𝕍</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">I1</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">I2</span>\n<span class=\"w\">    </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">constructor</span>\n<span class=\"w\">    </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">⟨⟨</span><span class=\"n\">f1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f1_in_I1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V1</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f2_in_I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V2</span><span class=\"bp\">⟩⟩⟩</span>\n<span class=\"w\">    </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">f2</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">mul_mem_mul</span><span class=\"w\"> </span><span class=\"n\">f1_in_I1</span><span class=\"w\"> </span><span class=\"n\">f2_in_I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V2</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f_in_I1I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V</span><span class=\"bp\">⟩⟩</span>\n<span class=\"w\">    </span><span class=\"n\">rcases</span><span class=\"w\"> </span><span class=\"n\">IsNoetherian</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span><span class=\"w\"> </span><span class=\"n\">I1</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">fs1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">fs1_span</span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"n\">rcases</span><span class=\"w\"> </span><span class=\"n\">IsNoetherian</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span><span class=\"w\"> </span><span class=\"n\">I2</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">fs2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">fs2_span</span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">fs1_span</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"n\">fs2_span</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">f_in_I1I2</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">span_mul_span</span><span class=\"w\"> </span><span class=\"n\">fs1</span><span class=\"bp\">.</span><span class=\"n\">toSet</span><span class=\"w\"> </span><span class=\"n\">fs2</span><span class=\"bp\">.</span><span class=\"n\">toSet</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">f_in_I1I2</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mem_span_finset</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"n\">f_in_I1I2</span><span class=\"w\"> </span><span class=\"c1\">-- timeout :(</span>\n</code></pre></div>\n<p>I have run this code in Lean4 playground. All terms are defined and the timeout problem is still there...</p>",
        "id": 443557162,
        "sender_full_name": "Hans Lin",
        "timestamp": 1717909259
    },
    {
        "content": "<p>On seeing this code my first question is why you don't just define <code>\\bbA R n</code> to just be <code>(Fin n) -&gt; R</code> (or even an <code>abbrev</code> or notation for that)</p>",
        "id": 443558904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717910401
    },
    {
        "content": "<p>Squeezing the simps makes this code 30% faster and thus less painful to work with (replace <code>simp [...]</code> with <code>simp? [...]</code> and then click on the blue output to do a second replacement with <code>simp only [&lt;longer list&gt;]</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- with the `simp`s this is 21953 heartbeats</span>\n<span class=\"c1\">-- with `simp only`s it's `14187`</span>\n<span class=\"c1\">-- count_heartbeats in</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">zariski_topology</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TopologicalSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">IsOpen</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">MvPolynomial</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">𝕍</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span>\n<span class=\"w\">  </span><span class=\"n\">isOpen_inter</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"n\">U1</span><span class=\"w\"> </span><span class=\"n\">U2</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">I1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">U1_open</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">U2_open</span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">U1_open</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">compl</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">𝕍</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">mem_setOf_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">not_forall</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">not_imp</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">U2_open</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">I1</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">I2</span>\n<span class=\"w\">    </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">constructor</span>\n<span class=\"w\">    </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">⟨⟨</span><span class=\"n\">f1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f1_in_I1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V1</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f2_in_I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V2</span><span class=\"bp\">⟩⟩⟩</span>\n<span class=\"w\">    </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">f2</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">mul_mem_mul</span><span class=\"w\"> </span><span class=\"n\">f1_in_I1</span><span class=\"w\"> </span><span class=\"n\">f2_in_I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">map_mul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V2</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">or_self</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">and_self</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f_in_I1I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V</span><span class=\"bp\">⟩⟩</span>\n<span class=\"w\">    </span><span class=\"n\">rcases</span><span class=\"w\"> </span><span class=\"n\">IsNoetherian</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span><span class=\"w\"> </span><span class=\"n\">I1</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">fs1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">fs1_span</span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"n\">rcases</span><span class=\"w\"> </span><span class=\"n\">IsNoetherian</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span><span class=\"w\"> </span><span class=\"n\">I2</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">fs2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">fs2_span</span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">fs1_span</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">submodule_span_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">fs2_span</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">f_in_I1I2</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">span_mul_span</span><span class=\"w\"> </span><span class=\"n\">fs1</span><span class=\"bp\">.</span><span class=\"n\">toSet</span><span class=\"w\"> </span><span class=\"n\">fs2</span><span class=\"bp\">.</span><span class=\"n\">toSet</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_coe</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">f_in_I1I2</span>\n<span class=\"w\">    </span><span class=\"c1\">--have := mem_span_finset.mp f_in_I1I2 -- timeout :(</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">isOpen_univ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">isOpen_sUnion</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 443559389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717910915
    },
    {
        "content": "<p>The timeout is because you're trying to feed the function <code>mem_span_finset.mp</code> something which it can't eat but which it's desperately trying to digest. It wants a term of type <code>x ∈ Submodule.span R ↑s</code> and <code>Ideal.span</code> is the same as <code>Submodule.span R</code> but the issue is the little arrow on the <code>s</code>. Lean is trying to unify the set <code>(⋃ s ∈ fs1, ⋃ t ∈ fs2, {s * t})</code> with <code>↑s</code> for some <code>s : Finset R</code> and the up-arrow the coercion to a set. But you have given it a set which wasn't coerced from a finset. It's a shame it times out rather than just saying \"that's not a set coerced from a finset\" but I think that's the issue.</p>",
        "id": 443559787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717911342
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Classical</span><span class=\"w\"> </span><span class=\"c1\">-- because you're using `Finset` without `DecidableEq`.</span>\n<span class=\"c1\">-- you'd probably be better off using `Set.Finite`, or adding</span>\n<span class=\"c1\">-- relevant decidability instances</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"kn\">scoped</span><span class=\"w\"> </span><span class=\"n\">Pointwise</span><span class=\"w\"> </span><span class=\"c1\">-- so we can multiply finsets</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">zariski_topology</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TopologicalSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">𝔸</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">IsOpen</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">MvPolynomial</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">𝕍</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span>\n<span class=\"w\">  </span><span class=\"n\">isOpen_inter</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"n\">U1</span><span class=\"w\"> </span><span class=\"n\">U2</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">I1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">U1_open</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">U2_open</span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">U1_open</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">compl</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">𝕍</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">mem_setOf_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">not_forall</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">not_imp</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">U2_open</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">I1</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">I2</span>\n<span class=\"w\">    </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">constructor</span>\n<span class=\"w\">    </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">⟨⟨</span><span class=\"n\">f1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f1_in_I1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V1</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f2_in_I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V2</span><span class=\"bp\">⟩⟩⟩</span>\n<span class=\"w\">    </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">f2</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">mul_mem_mul</span><span class=\"w\"> </span><span class=\"n\">f1_in_I1</span><span class=\"w\"> </span><span class=\"n\">f2_in_I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">map_mul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V2</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">or_self</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">and_self</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">f_in_I1I2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P_notin_V</span><span class=\"bp\">⟩⟩</span>\n<span class=\"w\">    </span><span class=\"n\">rcases</span><span class=\"w\"> </span><span class=\"n\">IsNoetherian</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span><span class=\"w\"> </span><span class=\"n\">I1</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">fs1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">fs1_span</span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"n\">rcases</span><span class=\"w\"> </span><span class=\"n\">IsNoetherian</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span><span class=\"w\"> </span><span class=\"n\">I2</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">fs2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">fs2_span</span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">fs1_span</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">submodule_span_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">fs2_span</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">f_in_I1I2</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">span_mul_span</span><span class=\"w\"> </span><span class=\"n\">fs1</span><span class=\"bp\">.</span><span class=\"n\">toSet</span><span class=\"w\"> </span><span class=\"n\">fs2</span><span class=\"bp\">.</span><span class=\"n\">toSet</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_coe</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">f_in_I1I2</span>\n<span class=\"w\">    </span><span class=\"c1\">-- new code here</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">f_in_I1I2_correct</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fs1</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">fs2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"c1\">-- surely this can be golfed, I don't know my way around finsets</span>\n<span class=\"w\">      </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">f_in_I1I2</span>\n<span class=\"w\">      </span><span class=\"n\">ext</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">mem_iUnion</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">exists_prop</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_coe</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_mul</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">exists_congr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">and_congr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">?_</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">exists_congr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">and_congr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">?_</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mem_span_finset</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"n\">f_in_I1I2_correct</span><span class=\"w\"> </span><span class=\"c1\">-- works</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">isOpen_univ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">isOpen_sUnion</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 443561215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717912844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/zariski.20topology.20timeout/near/443558904\">#narrow/stream/217875-Is-there-code-for-X.3F/topic/zariski.20topology.20timeout/near/443558904</a>：</p>\n<blockquote>\n<p>On seeing this code my first question is why you don't just define <code>\\bbA R n</code> to just be <code>(Fin n) -&gt; R</code> (or even an <code>abbrev</code> or notation for that)</p>\n</blockquote>\n<p>Thank you so much for your response and suggestion, and it really solved my problem!! <br>\nI’m quite new to Lean 4, and as an exercise, I planned to start from basic concepts like constructing <code>\\bbA^n</code> and then move towards understanding elliptic curves. So initially, I created an inductive type <code>\\bbA</code>. While reading the documentation for MvPolynomial, I realized that n-tuples over R are typically represented as Fin n → R, so I wrote an instance Equiv (\\bbA R n) (Fin n → R) to bridge the gap ad hocly. Now I see that using <code>abbrev 𝔸 (R : Type ℓ) [Ring R] (n : ℕ) : Type ℓ := Fin n → R</code> is much more efficient. I'll take your suggestion to refine it. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 443728677,
        "sender_full_name": "Hans Lin",
        "timestamp": 1718013261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"726531\">Hans Lin</span> has marked this topic as resolved.</p>",
        "id": 443728709,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718013271
    }
]