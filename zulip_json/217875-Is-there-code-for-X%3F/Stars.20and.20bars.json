[
    {
        "content": "<p>We don't seem to have this in Mathlib. I don't suppose someone has it elsewhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Sym.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Sym.starsAndBarsEquiv</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Sym</span> <span class=\"n\">ι</span> <span class=\"n\">k</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 426362124,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1710342570
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>rg<span class=\"w\"> </span>-i<span class=\"w\"> </span><span class=\"s2\">\"stars and bars\"</span>\nMathlib/Data/Finset/Sym.lean\n<span class=\"m\">113</span>:/--<span class=\"w\"> </span>Finset<span class=\"w\"> </span>**stars<span class=\"w\"> </span>and<span class=\"w\"> </span>bars**<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>the<span class=\"w\"> </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"sb\">`</span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"sb\">`</span>.<span class=\"w\"> </span>-/\n\nMathlib/Data/Sym/Card.lean\n<span class=\"m\">14</span>:#<span class=\"w\"> </span>Stars<span class=\"w\"> </span>and<span class=\"w\"> </span>bars\n<span class=\"m\">20</span>:this<span class=\"w\"> </span>is<span class=\"w\"> </span>central<span class=\"w\"> </span>to<span class=\"w\"> </span>the<span class=\"w\"> </span><span class=\"s2\">\"stars and bars\"</span><span class=\"w\"> </span>technique<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>combinatorics,<span class=\"w\"> </span>where<span class=\"w\"> </span>we<span class=\"w\"> </span>switch<span class=\"w\"> </span>between\n<span class=\"m\">32</span>:The<span class=\"w\"> </span><span class=\"s2\">\"stars and bars\"</span><span class=\"w\"> </span>technique<span class=\"w\"> </span>arises<span class=\"w\"> </span>from<span class=\"w\"> </span>another<span class=\"w\"> </span>way<span class=\"w\"> </span>of<span class=\"w\"> </span>presenting<span class=\"w\"> </span>the<span class=\"w\"> </span>same<span class=\"w\"> </span>problem.<span class=\"w\"> </span>Instead<span class=\"w\"> </span>of\n<span class=\"m\">47</span>:while<span class=\"w\"> </span>the<span class=\"w\"> </span><span class=\"s2\">\"stars and bars\"</span><span class=\"w\"> </span>technique<span class=\"w\"> </span>gives\n<span class=\"m\">53</span>:stars<span class=\"w\"> </span>and<span class=\"w\"> </span>bars,<span class=\"w\"> </span>multichoose\n<span class=\"m\">117</span>:/--<span class=\"w\"> </span>The<span class=\"w\"> </span>*stars<span class=\"w\"> </span>and<span class=\"w\"> </span>bars*<span class=\"w\"> </span>lemma:<span class=\"w\"> </span>the<span class=\"w\"> </span>cardinality<span class=\"w\"> </span>of<span class=\"w\"> </span><span class=\"sb\">`</span>Sym<span class=\"w\"> </span>α<span class=\"w\"> </span>k<span class=\"sb\">`</span><span class=\"w\"> </span>is<span class=\"w\"> </span>equal<span class=\"w\"> </span>to\n<span class=\"m\">191</span>:/--<span class=\"w\"> </span>Type<span class=\"w\"> </span>**stars<span class=\"w\"> </span>and<span class=\"w\"> </span>bars**<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>the<span class=\"w\"> </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"sb\">`</span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"sb\">`</span>.<span class=\"w\"> </span>-/\n\nMathlib/Data/Nat/Choose/Basic.lean\n<span class=\"m\">33</span>:This<span class=\"w\"> </span>is<span class=\"w\"> </span>central<span class=\"w\"> </span>to<span class=\"w\"> </span>the<span class=\"w\"> </span><span class=\"s2\">\"stars and bars\"</span><span class=\"w\"> </span>technique<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>informal<span class=\"w\"> </span>mathematics,<span class=\"w\"> </span>where<span class=\"w\"> </span>we<span class=\"w\"> </span>switch<span class=\"w\"> </span>between\n<span class=\"m\">39</span>:binomial<span class=\"w\"> </span>coefficient,<span class=\"w\"> </span>combination,<span class=\"w\"> </span>multicombination,<span class=\"w\"> </span>stars<span class=\"w\"> </span>and<span class=\"w\"> </span>bars\n</code></pre></div>",
        "id": 426365619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710343434
    },
    {
        "content": "<p>So I think it is there in <em>some</em> form.</p>",
        "id": 426365749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710343460
    },
    {
        "content": "<p>Thanks, I did a similar search. IIUC, the results we have compute the cardinality of <code>Sym ι k</code> in terms of binomial coefficients, but do not provide the bijection I request.</p>",
        "id": 426366074,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1710343554
    },
    {
        "content": "<p>Of course, I'd love to be corrected!</p>",
        "id": 426366326,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1710343611
    },
    {
        "content": "<p>Ooh, I see. That's sad. Hopefully it is easy to refactor the proofs to get the equiv?</p>",
        "id": 426367562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710343920
    },
    {
        "content": "<p>I'll take a look later this afternoon if I hear nothing else here.</p>",
        "id": 426367784,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1710343974
    },
    {
        "content": "<p>OK I caved in and did it by hand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Sym.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Multiset.sum_count_eq_card</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s.count</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Multiset.toFinset_sum_count_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finset.sum_filter_ne_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"sd\">/-- A classic \"stars and bars\" bijection. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Sym.starsAndBarsEquiv</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Sym</span> <span class=\"n\">ι</span> <span class=\"n\">k</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">s.count</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hs</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">hP</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">({</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Multiset.count_sum</span><span class=\"o\">]</span> <span class=\"c1\">-- TODO Fix</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Multiset.count_singleton</span><span class=\"o\">]</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">hP</span><span class=\"o\">⟩</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Multiset.count_sum</span><span class=\"o\">]</span> <span class=\"c1\">-- TODO Fix</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Multiset.count_singleton</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I now need to divert my attention but I'll PR this later today unless I hear a reason not to do so.</p>",
        "id": 426370595,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1710344765
    },
    {
        "content": "<p>I think I discussed something similar in a DM with <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  long ago</p>",
        "id": 426372204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710345221
    },
    {
        "content": "<p>This shouldn't need finiteness, should it?</p>",
        "id": 426372410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710345268
    },
    {
        "content": "<p>This also came up <a href=\"https://github.com/leanprover-community/mathlib4/pull/10983#discussion_r1503446113\">here in the complete homogeneous symmetric polynomial PR</a> and I suggested constructing the Equiv but it was not actually done.</p>",
        "id": 426372793,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1710345365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Stars.20and.20bars/near/426372410\">said</a>:</p>\n<blockquote>\n<p>This shouldn't need finiteness, should it?</p>\n</blockquote>\n<p>You can't write <code>∑ i,</code> without ι being a Fintype. But you might use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.sum#doc\">docs#Finsupp.sum</a>. In fact there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Multiset.toFinsupp#doc\">docs#Multiset.toFinsupp</a>. Maybe we should combine <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.image#doc\">docs#Equiv.image</a> with it to construct <code>starsAndBarsEquiv</code>.</p>",
        "id": 426374188,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1710345728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> That should be in mathlib. Having a version without <code>Fintype</code> seems like a separate project — having <code>{P : ι → ℕ // ∑ i, P i = k}</code> in bijective correspondence to some type with a know cardinality is important.</p>\n<p>I wouldn't call this stars-and-bars however. This bijection is the observation that multisets are determined — and described by — finitely supported Nat-valued functions, via <code>Multiset.count</code> (which, by the way, seems to be missing results about how <code>fun m =&gt; m.count</code> is injective, and how the image of <code>m.count</code> is finite). Where are the stars and where are the bars?</p>",
        "id": 426385964,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710349019
    },
    {
        "content": "<p>I see, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Multiset.toFinsupp#doc\">docs#Multiset.toFinsupp</a> would be great for creating this equivalence. (And injectivity/finiteness facts about Multiset.count would be nice to factor out of it.)</p>",
        "id": 426386360,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710349128
    },
    {
        "content": "<p>Agreed, I shouldn't really call this \"stars and bars\". Fiddling with this now we can have the Finsupp version too if we do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Multiset.foo</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">toFinsupp.toEquiv</span> <span class=\"bp\">''</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">P.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">P</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">AddEquiv.toEquiv_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">EquivLike.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">mem_setOf_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finsupp.card_toMultiset</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Multiset.toFinsupp.symm</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finsupp.card_toMultiset</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Sym.starsAndBarsEquiv'</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Sym</span> <span class=\"n\">ι</span> <span class=\"n\">k</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">P.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Multiset.toFinsupp.toEquiv.image</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Equiv.Set.ofEq</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Multiset.foo</span> <span class=\"n\">ι</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 426386492,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1710349166
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.equivFunOnFinite#doc\">docs#Finsupp.equivFunOnFinite</a> to convert to the Fintype.sum version.</p>",
        "id": 426388467,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1710349683
    },
    {
        "content": "<p>OK I'll PR something along these lines after dinner:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finsupp.Multiset</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Sym.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"c1\">-- No longer need this lemma but still worth adding</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Multiset.sum_count_eq_card</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s.count</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Multiset.toFinset_sum_count_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finset.sum_filter_ne_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">Finsupp.card_toMultiset</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Multiset.toFinsupp_sum_eq</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">s.toFinsupp.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finsupp.card_toMultiset</span><span class=\"o\">,</span> <span class=\"n\">toFinsupp_toMultiset</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Multiset.toFinsupp_image_card_eq</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">toFinsupp</span> <span class=\"bp\">''</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">P.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">P</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Multiset.toFinsupp.symm</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Sym.equivNatSum</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Sym</span> <span class=\"n\">ι</span> <span class=\"n\">k</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">P.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Multiset.toFinsupp.toEquiv.image</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Equiv.Set.ofEq</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">Multiset.toFinsupp_image_card_eq</span> <span class=\"n\">ι</span> <span class=\"n\">k</span>\n\n<span class=\"c1\">-- It is `Finsupp.equivFunOnFinite` that makes this noncomputable.</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Sym.equivNatSum'</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Sym</span> <span class=\"n\">ι</span> <span class=\"n\">k</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Sym.equivNatSum</span> <span class=\"n\">ι</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.equivFunOnFinite.image</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Equiv.Set.ofEq</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">P</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_def</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.sum_fintype</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Finsupp.equivFunOnFinite.symm</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_def</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.sum_fintype</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 426395125,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1710351763
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11360\">#11360</a></p>",
        "id": 426419859,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1710361165
    },
    {
        "content": "<p>It seems pretty silly to me that this is noncomputable... will comment in the PR</p>",
        "id": 426421192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710361707
    },
    {
        "content": "<p>Follow-up PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/11380\">#11380</a> (in which stars and bars really do make an appearance).</p>",
        "id": 426599417,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1710439565
    }
]