[
    {
        "content": "<p>Is there an existing definition in Mathlib and API for the following concept?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Perm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ArePerm</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.ofFn</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">List.ofFn</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 411731688,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1704718002
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.Perm.ofFn_comp_perm#doc\">docs#Equiv.Perm.ofFn_comp_perm</a></p>",
        "id": 411731960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704718102
    },
    {
        "content": "<p>Probably you want an <code>iff</code> version of that</p>",
        "id": 411732025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704718129
    },
    {
        "content": "<p>I guess (not tested) <code>MulAction.orbitRel (DomMulAct (Equiv.Perm (Fin n))</code> is what you want.</p>",
        "id": 411747866,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704723812
    },
    {
        "content": "<p>If you're going to add theory about it, then please do it for <code>α → β</code> without finiteness assumptions first.</p>",
        "id": 411747990,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704723845
    },
    {
        "content": "<p>You can define, e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">DomConj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 411748900,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704724147
    }
]