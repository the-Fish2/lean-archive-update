[
    {
        "content": "<p>i tried looking for an applicable instance, but i have yet to find it...</p>\n<p>in particular, i'd like to know if there already exists something along the lines of this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Finite.GaloisField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.DomAct.Basic</span> <span class=\"c1\">-- unoptimised imports</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">K</span><span class=\"o\">]:</span> <span class=\"n\">MulDistribMulAction</span> <span class=\"o\">(</span><span class=\"n\">RingAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">σ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">σ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"n\">x.inv</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">σ.map_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.inv_eq_val_inv</span><span class=\"o\">,</span> <span class=\"n\">Units.mul_inv</span><span class=\"o\">,</span> <span class=\"n\">map_one</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">σ.map_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.inv_eq_val_inv</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_mul</span><span class=\"o\">,</span> <span class=\"n\">map_one</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">smul_mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">HSMul.hSMul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.val_mul</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_eq_val_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_rev</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"n\">smul_one</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">HSMul.hSMul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.val_one</span><span class=\"o\">,</span> <span class=\"n\">map_one</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_eq_val_inv</span><span class=\"o\">,</span> <span class=\"n\">inv_one</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span>\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"c1\">-- this is my specific use case</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulDistribMulAction</span> <span class=\"o\">(</span><span class=\"n\">RingAut</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 435474461,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714082524
    },
    {
        "content": "<p>in comparison it does find the action <code>MulDistribMulAction (RingAut K) K</code> when not just looking at units</p>",
        "id": 435474712,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714082650
    },
    {
        "content": "<p>We have the MulAction version:</p>",
        "id": 435477249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714084195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> MulAction _ (Units _)</p>",
        "id": 435477327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714084218
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/GroupAction/Units.html#Units.mulAction%27\">Units.mulAction'</a></p>",
        "id": 435477331,
        "sender_full_name": "loogle",
        "timestamp": 1714084219
    },
    {
        "content": "<p>In theory, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.mulDistribMulAction%27#doc\">docs#Units.mulDistribMulAction'</a> should apply here, but maybe it is stated with the wrong assumptions</p>",
        "id": 435477653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714084425
    },
    {
        "content": "<p>both of these seem to require <code>IsScalarTower (RingAut K) K K</code>, which doesn't hold...</p>",
        "id": 435478413,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714084973
    },
    {
        "content": "<p>because that would mean that <code>f x * y = f (x * y)</code></p>",
        "id": 435478467,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714085024
    },
    {
        "content": "<p>similarly, <code>SMulCommClass (RingAut K) K K</code> is equivalent to <code>x * f y = f (x * y)</code></p>",
        "id": 435478599,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714085115
    },
    {
        "content": "<p>btw, is there a reason <code>IsScalarTower</code> isn't called <code>SMulAssocClass</code>?</p>",
        "id": 435478741,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714085203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/RingAutomorphisms.20act.20on.20units.20via.20application/near/435478413\">said</a>:</p>\n<blockquote>\n<p>both of these seem to require <code>IsScalarTower (RingAut K) K K</code>, which doesn't hold...</p>\n</blockquote>\n<p>I think it's likely this is a mistake; maybe try looking through the history to see if there were any comments when it was written? (Prediction: I wrote it...)</p>",
        "id": 435478840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714085276
    },
    {
        "content": "<p>The fix will be to replace that instance with your proof, which will hold just fine in the general case after notation modifications. The question is whether we still need the old instance as well for <em>something</em>, or if it's completely useless</p>",
        "id": 435478992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714085365
    },
    {
        "content": "<p>it looks like the multiplication in those instances is also different from the one i'm looking for...<br>\nthose instances use <code>(f x).inv = f.inv x.inv</code>, but i believe i need <code>(f x).inv = f x.inv</code></p>",
        "id": 435479312,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714085593
    },
    {
        "content": "<p>Well, in any situation where both your instance and that instance apply, they must be propositionally equal</p>",
        "id": 435480211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714086112
    },
    {
        "content": "<p>My point was more \"you should generalize your result away from <code>RingAut</code>\"</p>",
        "id": 435480285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714086149
    },
    {
        "content": "<p>ah yes, that makes sense</p>",
        "id": 435480310,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714086178
    },
    {
        "content": "<p>how about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulDistribMulAction</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulDistribMulAction</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">•</span> <span class=\"n\">x.inv</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">MulDistribMulAction.smul_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.inv_eq_val_inv</span><span class=\"o\">,</span> <span class=\"n\">Units.mul_inv</span><span class=\"o\">,</span> <span class=\"n\">smul_one</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">MulDistribMulAction.smul_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.inv_eq_val_inv</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_one</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulAction.one_smul</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulAction.mul_smul</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">b</span>\n  <span class=\"n\">smul_mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulDistribMulAction.smul_mul</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">smul_one</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulDistribMulAction.smul_one</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 435481064,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714086742
    },
    {
        "content": "<p>I think you can avoid the long theorems names there by using  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=smul_mul%27#doc\">docs#smul_mul'</a> etc</p>",
        "id": 435525496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714114613
    },
    {
        "content": "<p>Here's the golfed version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulDistribMulAction</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulDistribMulAction</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">g</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">smul_mul'</span><span class=\"o\">,</span> <span class=\"n\">Units.mul_inv</span><span class=\"o\">,</span> <span class=\"n\">smul_one</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">smul_mul'</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_one</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">smul_mul</span> <span class=\"n\">g</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">smul_mul'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">smul_one</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">smul_one</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 435537059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714119045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/RingAutomorphisms.20act.20on.20units.20via.20application/near/435478840\">said</a>:</p>\n<blockquote>\n<p>I think it's likely this is a mistake; maybe try looking through the history to see if there were any comments when it was written? (Prediction: I wrote it...)</p>\n</blockquote>\n<p>Yep, this was me in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10480\">#10480</a></p>",
        "id": 435537298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714119131
    },
    {
        "content": "<p>It looks like I somehow lost track of Reid's comments in response to that PR:</p>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/units.2Emul_action'.20diamond/near/262653519\">said</a>:</p>\n<blockquote>\n<p>But those are the wrong conditions!</p>\n</blockquote>\n<blockquote>\n<p>It should be simply <code>[group G] [monoid M] [mul_distrib_mul_action G M]</code></p>\n</blockquote>",
        "id": 435537715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714119301
    },
    {
        "content": "<p>I mean... It does compile, so I'm not sure it's \"wrong\" per se, maybe not as applicable as expected.</p>",
        "id": 435538085,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1714119424
    }
]