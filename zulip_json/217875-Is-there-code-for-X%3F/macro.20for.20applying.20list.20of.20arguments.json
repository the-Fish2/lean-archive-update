[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span><span class=\"w\"> </span><span class=\"n\">linter.unusedVariables</span><span class=\"w\"> </span><span class=\"n\">false</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"w\"> </span><span class=\"n\">a3</span><span class=\"w\"> </span><span class=\"n\">a4</span><span class=\"w\"> </span><span class=\"n\">a5</span><span class=\"w\"> </span><span class=\"n\">a6</span><span class=\"w\"> </span><span class=\"n\">a7</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">IO.println</span><span class=\"w\"> </span><span class=\"s2\">\"many arguments!\"</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s2\">\"one\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"two\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"three\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"four\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"five\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"six\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"seven\"</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- some macro definition...</span>\n<span class=\"c1\">-- Here it is temporarily defined as infix.</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">70</span><span class=\"w\"> </span><span class=\"s2\">\" apply \"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 444939240,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718511537
    },
    {
        "content": "<p>Are you looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.mkAppN#doc\">docs#Lean.mkAppN</a> ?</p>",
        "id": 444957096,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718528103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Thank you! but argument type of <code>mkAppN</code> is <code>Expr</code>...</p>",
        "id": 444963895,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718533394
    },
    {
        "content": "<p>You can turn your <code>args</code> into an <code>Array Expr</code> if you want to</p>",
        "id": 444963974,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718533455
    },
    {
        "content": "<p>This would be a very inefficient way</p>",
        "id": 444963992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718533492
    },
    {
        "content": "<p>Asei is right that they need something purely syntactic.</p>",
        "id": 444964018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718533515
    },
    {
        "content": "<p>Maybe it would be good to un <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 444964041,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718533545
    },
    {
        "content": "<p>It is easy to do if you know that kind of things. I’ll wait a bit to see if someone who can write the solution without firing up Lean shows up. Other I’ll take a look.</p>",
        "id": 444964097,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718533576
    },
    {
        "content": "<p>No metaprogramming needed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">unusedVariables</span><span class=\"w\"> </span><span class=\"n\">false</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"w\"> </span><span class=\"n\">a3</span><span class=\"w\"> </span><span class=\"n\">a4</span><span class=\"w\"> </span><span class=\"n\">a5</span><span class=\"w\"> </span><span class=\"n\">a6</span><span class=\"w\"> </span><span class=\"n\">a7</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">println</span><span class=\"w\"> </span><span class=\"s2\">\"many arguments!\"</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s2\">\"one\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"two\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"three\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"four\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"five\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"six\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"seven\"</span><span class=\"o\">]</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"bp\">.</span><span class=\"n\">OfArity</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 444964740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718534226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  Thank you! I also want to generalise to cases where the argument types are not necessarily the same.</p>",
        "id": 444964981,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718534451
    },
    {
        "content": "<p>Then you can't use a list</p>",
        "id": 444965295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718534737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> indeed, you're right...!!</p>",
        "id": 444965399,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718534839
    },
    {
        "content": "<p>You might find some of the declarations near <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.OfArity#doc\">docs#Function.OfArity</a> interesting</p>",
        "id": 444965484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718534911
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.FromTypes.uncurry#doc\">docs#Function.FromTypes.uncurry</a> especially</p>",
        "id": 444965535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718534971
    }
]