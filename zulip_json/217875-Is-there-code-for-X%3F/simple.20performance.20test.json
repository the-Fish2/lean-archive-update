[
    {
        "content": "<p>We know that you can measure execution time with <code>#time</code>. However, it is not clear how to bind the execution time to a variable. Is it possible to verify in code that \"the process finishes within x milliseconds\"?</p>",
        "id": 445974901,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718928239
    },
    {
        "content": "<p>You can observe the durations you get back from things like monoMsNow, but the declarations are opaque, so there's no way to write a theorem proving something like <code>forall (input), runtime (f input) &lt;= n_millis</code>. You can provide a sort of runtime guarantee by just branching on the measured execution time if it's above/below a certain threshold. That being said there are a lot of OS/hardware details that go into measuring real-world time, so it's a guarantee with an asterisk.</p>",
        "id": 445978244,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1718930404
    },
    {
        "content": "<p>Also reading your question again, I think you can just subtract (t_after - t_before) to get the duration, you should be able to get that from <code>IO.monoMsNow</code>. The source code for <code>timeCmd</code> is a pretty reasonable example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">command_elab</span><span class=\"w\"> </span><span class=\"n\">timeCmd</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">timeCmdElab</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CommandElab</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">time</span><span class=\"bp\">%$</span><span class=\"n\">tk</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">command</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">monoMsNow</span>\n<span class=\"w\">    </span><span class=\"n\">elabCommand</span><span class=\"w\"> </span><span class=\"n\">stx</span>\n<span class=\"w\">    </span><span class=\"n\">logInfoAt</span><span class=\"w\"> </span><span class=\"n\">tk</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"time: {(← IO.monoMsNow) - start}ms\"</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">throwUnsupportedSyntax</span>\n</code></pre></div>",
        "id": 445978498,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1718930594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris Bailey</span> Thank you!</p>",
        "id": 445978612,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718930681
    }
]