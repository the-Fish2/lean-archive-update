[
    {
        "content": "<p>Do we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>μ</mi><mo>∗</mo><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>d</mi><mo>∣</mo><mi>n</mi></mrow></msub><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(\\mu * \\Lambda)(n) = \\sum_{d \\mid n} \\mu(d)\\Lambda(n / d) = -\\mu(n)\\log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Λ</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2247em;vertical-align:-0.4747em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mrel mtight\">∣</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>?</p>",
        "id": 425460936,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709882043
    },
    {
        "content": "<p>The proof I am aware of uses <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mo fence=\"true\">(</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo fence=\"true\">)</mo></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>=</mo><mo>−</mo><msup><mi>ζ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><msup><mi>ζ</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>⋅</mo><mfrac><mrow><mo>−</mo><msup><mi>ζ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\left(1 / \\zeta(s)\\right)&#x27; = -\\zeta&#x27;(s) / \\zeta^2(s) = \\frac{1}{\\zeta(s)} \\cdot \\frac{-\\zeta&#x27;(s)}{\\zeta(s)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1418em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8918em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3651em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.5845em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0645em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> then looking at their Dirichlet series <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>ζ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>2</mn></mrow></msub><mfrac><mrow><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><msup><mi>n</mi><mi>s</mi></msup></mfrac></mrow><annotation encoding=\"application/x-tex\">\\zeta&#x27;(s) = \\sum_{n\\geq 2}\\frac{\\log(n)}{n^s}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4049em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mrow><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>=</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow></msub><mfrac><mrow><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><msup><mi>n</mi><mi>s</mi></msup></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{\\zeta(s)} = \\sum_{n\\geq 1} \\frac{\\mu(n)}{n^s}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3651em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4049em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">μ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mo>−</mo><msup><mi>ζ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>=</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow></msub><mfrac><mrow><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><msup><mi>n</mi><mi>s</mi></msup></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{-\\zeta&#x27;(s)}{\\zeta(s)} =  \\sum_{n\\geq 1} \\frac{\\Lambda(n)}{n^s}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5845em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0645em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4049em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">Λ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, copying from <a href=\"https://www.wikiwand.com/en/Dirichlet_series\">wiki</a>.</p>",
        "id": 425461903,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709882633
    },
    {
        "content": "<p>And also <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow></msub><mfrac><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><msup><mi>n</mi><mi>s</mi></msup></mfrac><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><msup><mi>F</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow></msub><mfrac><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><msup><mi>n</mi><mi>s</mi></msup></mfrac></mrow><annotation encoding=\"application/x-tex\">F(s) = \\sum_{n\\geq 1} \\frac{f(x)}{n^s} \\implies F&#x27;(s) = -\\sum_{n\\geq 1} \\frac{f(n)\\log n}{n^s}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4049em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4049em;vertical-align:-0.3949em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>.</p>",
        "id": 425462043,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709882707
    },
    {
        "content": "<p>Maybe one can deduce that from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ArithmeticFunction.log_mul_moebius_eq_vonMangoldt#doc\">docs#ArithmeticFunction.log_mul_moebius_eq_vonMangoldt</a> or one of its variants?</p>",
        "id": 425465945,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709884794
    },
    {
        "content": "<p>I can't think of any way to derive it directly from that (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>log</mi><mo>⁡</mo><mo>∗</mo><mi>μ</mi><mo>=</mo><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\log * \\mu = \\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∗</span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span></span></span></span>), but maybe my number theory is too weak <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span> I will just use the proof I gave, especially since your EulerProduct has <code>LSeries_vonMangoldt_eq_deriv_riemannZeta_div</code> i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow></msub><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><msup><mi>n</mi><mrow><mo>−</mo><mi>s</mi></mrow></msup><mo>=</mo><mo>−</mo><msup><mi>ζ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{n\\geq 1} \\Lambda(n) n^{-s} = -\\zeta&#x27;(s)/\\zeta(s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1662em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 425466303,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709884892
    },
    {
        "content": "<p>There's an apparently elementary proof on page 97 of <a href=\"https://eclass.uoa.gr/modules/document/file.php/MATH717/04.%20%CE%92%CE%BF%CE%B7%CE%B8%CE%AE%CE%BC%CE%B1%CF%84%CE%B1/Analytic-number-theory-Hildebrand.pdf\">https://eclass.uoa.gr/modules/document/file.php/MATH717/04.%20%CE%92%CE%BF%CE%B7%CE%B8%CE%AE%CE%BC%CE%B1%CF%84%CE%B1/Analytic-number-theory-Hildebrand.pdf</a> - not sure that's easier</p>",
        "id": 425469463,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709886290
    },
    {
        "content": "<p>I need to look more closely, but that gave me inspiration for a new proof lol. Just do it for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">n = p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mi>p</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">n = p^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0435em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> (should be 0 both side), then use <code>IsMultiplicative</code>.</p>",
        "id": 425469833,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709886468
    },
    {
        "content": "<p>But these two proofs should both be easier to formalise in Lean.</p>",
        "id": 425469890,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709886483
    },
    {
        "content": "<p>I will lay out the details here so it's easier for me to formalise...<br>\nLHS=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>μ</mi><mo>∗</mo><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>d</mi><mo>∣</mo><mi>p</mi></mrow></msub><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>p</mi><mo>−</mo><mn>0</mn><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">(\\mu*\\Lambda)(p)=\\sum_{d\\mid p}\\mu(d)\\Lambda(n/d)=\\mu(1)\\Lambda(p)+\\mu(p)\\Lambda(1)=\\log p-0=\\log p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Λ</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2247em;vertical-align:-0.4747em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mrel mtight\">∣</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>,RHS=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mi>log</mi><mo>⁡</mo><mi>p</mi><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">-\\mu(p)\\log p=\\log p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span><br>\nLHS=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>μ</mi><mo>∗</mo><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>k</mi></msubsup><mi>μ</mi><mo stretchy=\"false\">(</mo><msup><mi>p</mi><mi>i</mi></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><msup><mi>p</mi><mrow><mi>k</mi><mo>−</mo><mi>i</mi></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mo>+</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mn>0</mn><mo>⋅</mo><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><msup><mi>p</mi><mrow><mi>k</mi><mo>−</mo><mi>i</mi></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">(\\mu*\\Lambda)(p^k)=\\sum_{i=0}^k \\mu(p^i)\\Lambda(p^{k-i})=\\mu(1)\\Lambda(p^k)+\\mu(p^k)\\cdot\\Lambda(1)+\\sum_{i=1}^{k-1} 0\\cdot\\Lambda(p^{k-i})=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\">Λ</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2887em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.989em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2887em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.989em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>,RHS=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mi>log</mi><mo>⁡</mo><mi>p</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">-\\mu(p^k)\\log p=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span><br>\nAnd then use <code>IsMultiplicative.mul</code></p>",
        "id": 425474337,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709888076
    },
    {
        "content": "<p>Should be easier than proving <code>IsSummable</code> :)</p>",
        "id": 425474497,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709888113
    },
    {
        "content": "<p>... no, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span></span></span></span> is not multiplicative.</p>",
        "id": 425475985,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709888682
    },
    {
        "content": "<p><a href=\"https://github.com/grhkm21/PrimeNumberTheoremAnd/commit/d787740b3a33087579dffac7a96ea5868fc2c6b8\">https://github.com/grhkm21/PrimeNumberTheoremAnd/commit/d787740b3a33087579dffac7a96ea5868fc2c6b8</a> almost done</p>",
        "id": 425504100,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709899159
    },
    {
        "content": "<p><a href=\"https://github.com/grhkm21/PrimeNumberTheoremAnd/blob/convolution1/PrimeNumberTheoremAnd/cp.lean#L123\">https://github.com/grhkm21/PrimeNumberTheoremAnd/blob/convolution1/PrimeNumberTheoremAnd/cp.lean#L123</a></p>\n<p>It was not a pleasant experience</p>",
        "id": 425778463,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710081378
    },
    {
        "content": "<p>Writing a 100 line monolithic proof is never a pleasant experience. I see lots of <code>have</code>s in your proof. Maybe factor them out as sublemmas and it might help you to see the wood from the trees?</p>",
        "id": 425779910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710082741
    },
    {
        "content": "<p>I’ll translate my Lean into a latex outline later</p>",
        "id": 425780077,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710082866
    },
    {
        "content": "<p>Here's my first attempt at a golf. I hope the two sorries aren't too hard to prove.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ArithmeticFunction.mul_prime_pow_apply</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Icc</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Nat.Coprime.divisors_inter_eq</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">m.Coprime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m.divisors</span> <span class=\"bp\">∩</span> <span class=\"n\">n.divisors</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">d</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_inter</span><span class=\"o\">,</span> <span class=\"n\">mem_divisors</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_singleton</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">hdm</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">hdn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.eq_one_of_dvd_coprimes</span> <span class=\"n\">hmn</span> <span class=\"n\">hdm</span> <span class=\"n\">hdn</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">one_dvd</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">one_dvd</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_isPrimePow</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">m.Coprime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdm</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span> <span class=\"n\">IsPrimePow</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">μ</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.recOnPosPrimePosCoprime</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hp</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"n\">hp</span> <span class=\"n\">hk</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ArithmeticFunction.mul_prime_pow_apply</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hk1</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hk1</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.Ico_succ_right</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">vonMangoldt_apply_prime</span><span class=\"o\">,</span>\n        <span class=\"n\">moebius_apply_prime</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ArithmeticFunction.moebius_apply_prime_pow</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hk.ne.symm</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">hk1</span><span class=\"o\">]</span>\n    <span class=\"n\">trans</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">Finset.sum_subset</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">_root_.zero_le</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n      <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">_root_.zero_le</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">_root_.mul_eq_zero</span><span class=\"o\">,</span>\n        <span class=\"n\">Int.cast_eq_zero</span><span class=\"o\">]</span>\n      <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">h2i</span>\n      <span class=\"n\">left</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">moebius_apply_prime_pow</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">),</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">)]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_range</span><span class=\"o\">,</span> <span class=\"n\">vonMangoldt_apply_pow</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hk.ne.symm</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"n\">moebius_apply_prime</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hm</span> <span class=\"n\">hn</span> <span class=\"n\">hmn</span> <span class=\"n\">h_ind_n</span> <span class=\"n\">h_ind_m</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">hm0</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n    <span class=\"k\">calc</span>\n      <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">divisors</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">ArithmeticFunction.mul_apply</span><span class=\"o\">,</span> <span class=\"n\">Nat.sum_divisorsAntidiagonal'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">μ</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">m.divisors</span> <span class=\"bp\">∪</span> <span class=\"n\">n.divisors</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span>\n          <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">m.divisors</span> <span class=\"bp\">∩</span> <span class=\"n\">n.divisors</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">Finset.sum_subset</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span>\n          <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Finset.union_subset</span>\n            <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.divisors_subset_of_dvd</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dvd_mul_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n            <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.divisors_subset_of_dvd</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dvd_mul_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_divisors</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">_root_.mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">]</span>\n          <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hxmn</span> <span class=\"n\">_</span> <span class=\"n\">hx_not</span>\n          <span class=\"n\">right</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ArithmeticFunction.vonMangoldt_eq_zero_iff</span><span class=\"o\">]</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">,</span> <span class=\"n\">and_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hx_not</span>\n          <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hx_not</span>\n          <span class=\"n\">apply</span> <span class=\"n\">not_isPrimePow</span> <span class=\"n\">hmn</span> <span class=\"n\">hxmn</span> <span class=\"o\">(</span><span class=\"n\">hx_not.1</span> <span class=\"n\">hm0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx_not.2</span> <span class=\"n\">hn0</span><span class=\"o\">)</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.Coprime.divisors_inter_eq</span> <span class=\"n\">hmn</span> <span class=\"n\">hm0</span> <span class=\"n\">hn0</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">m.divisors</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.divisors</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sum_union_inter</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">m.divisors</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">μ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.divisors</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mul_sum</span><span class=\"o\">,</span> <span class=\"n\">Finset.mul_sum</span><span class=\"o\">]</span>\n        <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_congr</span> <span class=\"n\">rfl</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_divisors</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">]</span>\n          <span class=\"n\">intro</span> <span class=\"n\">d</span> <span class=\"n\">hdm</span> <span class=\"n\">_</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_div_assoc</span> <span class=\"n\">_</span> <span class=\"n\">hdm</span><span class=\"o\">]</span>\n          <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsMultiplicative.map_mul_of_coprime</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">arith_mult</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmn.coprime_div_left</span> <span class=\"n\">hdm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_congr</span> <span class=\"n\">rfl</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_divisors</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">]</span>\n          <span class=\"n\">intro</span> <span class=\"n\">d</span> <span class=\"n\">hdn</span> <span class=\"n\">_</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_div_assoc</span> <span class=\"n\">_</span> <span class=\"n\">hdn</span><span class=\"o\">]</span>\n          <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsMultiplicative.map_mul_of_coprime</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">arith_mult</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmn.coprime_div_right</span> <span class=\"n\">hdn</span><span class=\"o\">)]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">μ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">ArithmeticFunction.mul_apply</span><span class=\"o\">]</span>\n        <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sum_divisorsAntidiagonal'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">μ</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">μ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h_ind_n</span><span class=\"o\">,</span> <span class=\"n\">h_ind_m</span><span class=\"o\">]</span>\n        <span class=\"n\">ring</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">log_apply</span><span class=\"o\">,</span> <span class=\"n\">neg_add_rev</span><span class=\"o\">,</span> <span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">hmn</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsMultiplicative.map_mul_of_coprime</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">arith_mult</span><span class=\"o\">)</span> <span class=\"n\">hmn</span><span class=\"o\">,</span>\n          <span class=\"n\">Real.log_mul</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"o\">)]</span>\n        <span class=\"n\">push_cast</span>\n        <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 425790393,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1710092285
    },
    {
        "content": "<p><span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span> I will have to study it carefully haha(haha...)</p>\n<p>I can't even prove the first lemma. I am stuck on this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">divisorsAntidiagonal</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x.1</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In particular I don't know how to deal with sums when they are over different sets.</p>",
        "id": 425793185,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710094634
    },
    {
        "content": "<p>I can construct an equivalence between the (subtypes of the) two sets:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                                               <span class=\"c\">/-</span><span class=\"cm\"> these are subtypes -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">thing</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset.Icc</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">divisors</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">mem_divisors.mpr</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">pow_dvd_pow</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_Icc.mp</span> <span class=\"n\">hd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">hp.pos</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne.symm</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">d.factorization</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩⟩</span>\n    <span class=\"n\">exact</span> <span class=\"n\">factorization_le_of_le_pow</span> <span class=\"o\">(</span><span class=\"n\">le_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">hp.pos</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dvd_of_mem_divisors</span> <span class=\"n\">hd</span><span class=\"o\">))</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">]</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">asdf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_prime_pow</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">mem_divisors.mp</span> <span class=\"n\">d.prop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">asdf</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But Lean doesn't like my subtype :(</p>",
        "id": 425793205,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710094653
    },
    {
        "content": "<p>Or even say I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">asdf</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">divisorsAntidiagonal</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.Icc</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>How do I use this to prove the lemma I'm stuck on? (I think this is a purely Lean question, not a Math question)</p>",
        "id": 425793368,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710094784
    },
    {
        "content": "<p>Also for the second <code>sorry</code>, here's the proof I came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_isPrimePow</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">m.Coprime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdm</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span> <span class=\"n\">IsPrimePow</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span><span class=\"bp\">!</span> <span class=\"n\">hd_pp</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hp_prime</span><span class=\"o\">,</span> <span class=\"n\">hk_pos</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hd_pp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">prime_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp_prime</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hdm</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">hdm</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">dvd_zero</span> <span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hdn</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">hdn</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">dvd_zero</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp_prime.pow_dvd_iff_le_factorization</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hdm</span> <span class=\"n\">hdn</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">assumption</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">n.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_contra</span><span class=\"bp\">!</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">m.gcd</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_gcd_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">dvd_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hp_prime.ne_one</span> <span class=\"n\">this</span>\n    <span class=\"n\">all_goals</span> <span class=\"n\">apply</span> <span class=\"n\">dvd_of_factorization_pos</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp_prime.pow_dvd_iff_le_factorization</span> <span class=\"bp\">$</span> <span class=\"n\">mul_ne_zero_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">Nat.factorization_mul</span> <span class=\"n\">hm</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.coe_add</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hd</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>But I think it's also pretty terrible and I'm not sure how to write it nicely :( (That's 6 by_contra lemmas <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> )</p>",
        "id": 425794757,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710095942
    },
    {
        "content": "<p>This works for the first sorry: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ArithmeticFunction.mul_prime_pow_apply</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Icc</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ArithmeticFunction.mul_apply</span><span class=\"o\">,</span> <span class=\"n\">sum_divisorsAntidiagonal</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">·</span><span class=\"o\">),</span>\n    <span class=\"n\">divisors_prime_pow</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_map</span><span class=\"o\">,</span> <span class=\"n\">Finset.range_eq_Ico</span><span class=\"o\">,</span> <span class=\"n\">Nat.Ico_succ_right</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_congr</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">_root_.zero_le</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">Function.Embedding.coeFn_mk</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span> <span class=\"n\">hk</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.pow_div</span> <span class=\"n\">hk</span> <span class=\"n\">hp.pos</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>In my experience, equivalences between finsets are really ill-behaved, and you're much better off working with <code>Finset.map</code> and <code>Finset.image</code>. Once I found <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.divisors_prime_pow#doc\">docs#Nat.divisors_prime_pow</a>, the rest of the proof fell in place.</p>",
        "id": 425794788,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1710095963
    },
    {
        "content": "<p>Ohhhhh okay <code>divisors_prime_pow</code> is exactly what I was missing... This will be useful in many of my other proofs, thanks sooo much</p>",
        "id": 425795062,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710096146
    },
    {
        "content": "<p>Okay I learned a lot from your code, especially that <code>erw</code> can write inside binders (to some extent?). I <del>golfed it further</del> reproved the lemma but using your framework. Here's what I got:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">μ</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.recOnPosPrimePosCoprime</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hp</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">hp_prime</span> <span class=\"n\">hn_pos</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"bp\">Λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_prime_pow_apply</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hp_prime</span><span class=\"o\">,</span> <span class=\"n\">intCoe_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">Nat.div_self</span> <span class=\"n\">hp_prime.pos</span><span class=\"o\">,</span>\n        <span class=\"n\">moebius_apply_prime</span> <span class=\"n\">hp_prime</span><span class=\"o\">,</span> <span class=\"n\">vonMangoldt_apply_prime</span> <span class=\"n\">hp_prime</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">trans</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">sum_subset</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"n\">_</span> <span class=\"n\">hd</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n        <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hd</span> <span class=\"bp\">⊢;</span> <span class=\"n\">omega</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_not_lt</span> <span class=\"bp\">$</span> <span class=\"n\">mem_range.not.mp</span> <span class=\"n\">hd</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">moebius_apply_prime_pow</span> <span class=\"n\">hp_prime</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">)]</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum_range</span><span class=\"o\">,</span> <span class=\"n\">moebius_apply_prime</span> <span class=\"n\">hp_prime</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">vonMangoldt_apply_pow</span><span class=\"o\">,</span> <span class=\"n\">vonMangoldt_apply_pow</span><span class=\"o\">,</span> <span class=\"n\">add_neg_self</span><span class=\"o\">,</span>\n          <span class=\"n\">moebius_apply_prime_pow</span> <span class=\"n\">hp_prime</span><span class=\"o\">]</span>\n        <span class=\"n\">all_goals</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">omega</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hab</span> <span class=\"n\">ha'</span> <span class=\"n\">hb'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">ha₀</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb₀</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n    <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">divisors</span><span class=\"o\">,</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">mul_apply</span><span class=\"o\">,</span> <span class=\"n\">sum_divisorsAntidiagonal</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">a.divisors</span> <span class=\"bp\">∪</span> <span class=\"n\">b.divisors</span><span class=\"o\">,</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n        <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">a.divisors</span> <span class=\"bp\">∩</span> <span class=\"n\">b.divisors</span><span class=\"o\">,</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hab.divisors_inter_eq</span> <span class=\"n\">ha₀</span> <span class=\"n\">hb₀</span><span class=\"o\">]</span>\n      <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">sum_subset</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">hd'</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">union_subset</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">divisors_subset_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">mul_ne_zero</span> <span class=\"n\">ha₀</span> <span class=\"n\">hb₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mem_divisors</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hd</span> <span class=\"n\">hd'</span>\n        <span class=\"n\">apply</span> <span class=\"n\">mul_eq_zero_of_left</span> <span class=\"o\">(</span><span class=\"n\">vonMangoldt_eq_zero_iff.mpr</span> <span class=\"bp\">$</span> <span class=\"n\">not_isPrimePow</span> <span class=\"n\">hab</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n        <span class=\"n\">all_goals</span> <span class=\"n\">tauto</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">a.divisors</span><span class=\"o\">,</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">b.divisors</span><span class=\"o\">,</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">sum_union_inter</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">a.divisors</span><span class=\"o\">,</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">b.divisors</span><span class=\"o\">,</span> <span class=\"bp\">Λ</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_sum</span><span class=\"o\">,</span> <span class=\"n\">mul_sum</span><span class=\"o\">]</span>\n      <span class=\"n\">congr</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">hd_dvd</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mem_divisors.mp</span> <span class=\"n\">hd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_div_assoc</span> <span class=\"n\">_</span> <span class=\"n\">hd_dvd</span><span class=\"o\">,</span> <span class=\"n\">isMultiplicative_moebius.right</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_mul</span><span class=\"o\">]</span>\n        <span class=\"n\">ring_nf</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hab.symm.coprime_dvd_right</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.div_mul_cancel</span> <span class=\"n\">hd_dvd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n      <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">hd_dvd</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mem_divisors.mp</span> <span class=\"n\">hd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_div_assoc</span> <span class=\"n\">_</span> <span class=\"n\">hd_dvd</span><span class=\"o\">,</span> <span class=\"n\">isMultiplicative_moebius.right</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_mul</span><span class=\"o\">]</span>\n        <span class=\"n\">ring_nf</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hab.coprime_dvd_right</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.div_mul_cancel</span> <span class=\"n\">hd_dvd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_apply</span><span class=\"o\">,</span> <span class=\"n\">intCoe_apply</span><span class=\"o\">,</span> <span class=\"n\">sum_divisorsAntidiagonal</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha'</span><span class=\"o\">,</span> <span class=\"n\">hb'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span>\n        <span class=\"n\">isMultiplicative_moebius.right</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n        <span class=\"bp\">@</span><span class=\"n\">log_apply</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">Real.log_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">norm_cast</span>\n      <span class=\"n\">all_goals</span> <span class=\"n\">exact</span> <span class=\"n\">cast_ne_zero.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>10L shorter (using dark magic such as <code>all_goals tauto</code>)</p>",
        "id": 425808588,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710107268
    },
    {
        "content": "<p>One can deduce the identity <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mo>∗</mo><mi mathvariant=\"normal\">Λ</mi><mo>=</mo><mo>−</mo><mi>μ</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">\\mu * \\Lambda = - \\mu L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6597em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">μL</span></span></span></span> from the Leibniz rule <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo>∗</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>L</mi><mi>f</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>g</mi><mo>+</mo><mi>f</mi><mo>∗</mo><mi>L</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">L(f*g) = (Lf)*g + f*Lg</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">Lg</span></span></span></span>, Mobius inversion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mo>∗</mo><mn>1</mn><mo>=</mo><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu*1=\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6597em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo>∗</mo><mn>1</mn><mo>=</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda*1=L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>.  Indeed, applying Leibniz to Mobius inversion one gets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi>μ</mi><mo>∗</mo><mn>1</mn><mo>+</mo><mi>μ</mi><mo>∗</mo><mi>L</mi><mo>=</mo><mi>δ</mi><mi>L</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">L\\mu * 1 + \\mu * L = \\delta L = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Lμ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6597em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, hence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mo>∗</mo><mi mathvariant=\"normal\">Λ</mi><mo>∗</mo><mn>1</mn><mo>=</mo><mi>μ</mi><mo>∗</mo><mi>L</mi><mo>=</mo><mo>−</mo><mi>L</mi><mi>μ</mi><mo>∗</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\mu * \\Lambda * 1 = \\mu * L = - L \\mu * 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6597em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6597em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">Lμ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.  Now cancel the convolution with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> by another Mobius inversion.  (This is just the Dirichlet series proof in disguise, but perhaps these little lemmas about Dirichlet convolution can be helpful for other manipulations of this type.)</p>\n<p>A less traditional proof (see <a href=\"https://terrytao.wordpress.com/2014/09/24/derived-multiplicative-functions/\">this blog post of mine</a> ) is to work in the <a href=\"https://en.wikipedia.org/wiki/Dual_number\">dual number system</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">R</mi><mo stretchy=\"false\">[</mo><mi>ε</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>ε</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">{\\bf R}[\\varepsilon]/(\\varepsilon^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">R</span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">ε</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mi>ε</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">1 + \\varepsilon L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mord mathnormal\">L</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo>+</mo><mi>ε</mi><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta + \\varepsilon \\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mord\">Λ</span></span></span></span> are all multiplicative in this system.  One can then establish the identity <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>δ</mi><mo>+</mo><mi>ε</mi><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>ε</mi><mi>L</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> \\mu * (\\delta + \\varepsilon \\Lambda) = - \\mu ( 1 + \\varepsilon L)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6597em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mord\">Λ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span></span></span></span> by checking on prime powers and then using multiplicativity; then the identity you want follows by extracting the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> coefficient.  This approach is more complicated than traditional approaches, but scales better when one wants to consider \"higher order\" versions of such identities, as discussed in the blog post.</p>",
        "id": 425831989,
        "sender_full_name": "Terence Tao",
        "timestamp": 1710128390
    },
    {
        "content": "<p>Just to be clear, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(f)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span> here is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>↦</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d \\mapsto f(d)\\log(d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7054em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span>?<br>\nUpdate: yes</p>",
        "id": 425885089,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710155269
    },
    {
        "content": "<p>And to state the (possibly) obvious : <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is a derivation on arithmetic functions such that the natural morphism of algebras <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>↦</mo><mi>L</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f\\mapsto L(f,s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> from (reasonably bounded) arithmetic functions to (germs of) holomorphic functions on the complex plane (which maps addition to addition, and convolution to multiplication) is a morphism of differential algebras.<br>\nThe operator $\\exp(\\eps L)$$ corresponds with that of the (infinitesimal) Taylor formula.</p>",
        "id": 425889289,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710156901
    },
    {
        "content": "<p>@ Lean people, just to be clear, is the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> above not in Lean? I can't find it with <code>f.deriv</code> (for <code>f: ArithmeticFunction R</code>)</p>",
        "id": 425910988,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710164430
    },
    {
        "content": "<p>It should just be <code>-pmul log f</code>.</p>",
        "id": 425917491,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710166301
    },
    {
        "content": "<p>You probably want it as <code>.deriv</code> or something like that, so that you can write <code>(f * g).deriv = f.deriv*g+f*g.deriv</code>, for example.</p>",
        "id": 425917651,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710166339
    },
    {
        "content": "<p>I think a modest amount of API for this <code>deriv</code> operator on arithmetic functions (e.g., the derivation axioms, the relation with derivatives of Dirichlet series, and the fact that <code>f.deriv = g.deriv</code> if and only if <code>f = g + C • 1</code> for some <code>C</code>, so in particular <code>1.deriv = 0</code>) would be useful to have somewhere in Mathlib.NumberTheory.ArithmeticFunction .</p>",
        "id": 425927230,
        "sender_full_name": "Terence Tao",
        "timestamp": 1710169009
    },
    {
        "content": "<p>I am trying to improve the api for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> too (there's <em>one</em> lemma about convolution inverses), since you can do stuff about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mo stretchy=\"false\">)</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">(f^{-1})&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> too. And I got stuck already <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20termination.20of.20sum.20over.20properDivisors/near/425921747\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Proving.20termination.20of.20sum.20over.20properDivisors/near/425921747</a><br>\nBut I can try to work on this, though I won't be as fast as others at Lean</p>",
        "id": 425928866,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710169396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> I saw that you have written code about completely multiplicative functions. Do you think there should be an extra typeclass for <code>{Is}CompletelyMultiplicative</code>? In your <code>EulerProducts</code> code, it is expressed as <code>ℕ →*₀ ℕ</code>, but it doesn't interact well with <code>ArithmeticFunction</code> and those API at all.</p>",
        "id": 426016980,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710194993
    },
    {
        "content": "<p>I have to catch the bus soon but here are some thoughts after working on this for a bit. This is my first time writing \"library code\", so sorry if it's very not in Mathlib style. But:</p>\n<ol>\n<li>There should be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>; See L105 of below</li>\n<li>There should be <code>IsCompleteMultiplicative</code>; See L166 of below</li>\n<li>Most lemmas in Mathlib can/should be phrased in terms of <code>ArithmeticFunction R</code> instead of just over <code>\\Z</code>, e.g. the <code>isMultiplicative</code> ones (over a <code>[CommRing R]</code>) or yeah; See Line 248 of below</li>\n</ol>\n<hr>\n<p>I have a very terrible framework for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> now! <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/commit/65cd68780a6dcd7d150a39c7209f8a49da82a0f8\">this is the \"below\"</a></p>\n<ol start=\"4\">\n<li>I need some help with structuring my code into a Mathlib-worthy version</li>\n<li>\n<p>I need help with making the API more user AND developer(?) friendly<br>\n  -&gt; Currently the API is borderline unusable - in particular, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> requires <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">f(1) \\neq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, meaning I have to pass this <code>Fact</code> around. I chose a typeclass <code>[Fact Invertible (f 1)]</code>, but that causes all kinds of problems, and you need a lot of auxiliary <code>have : Invertible (\\zeta 1) := ...</code> or whatever.</p>\n</li>\n<li>\n<p>I need some sanity check (on the code, not me): is this a reasonable approach? Especially with the <code>mkUnit</code> functions</p>\n</li>\n</ol>",
        "id": 426031932,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710203034
    },
    {
        "content": "<p>There's a lot of Lean/Mathlib code and very little Math, to be honest</p>",
        "id": 426031991,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710203065
    },
    {
        "content": "<p>Or is the correct to write it using <code>\\frac1</code> and <code>Invertible</code> typeclasses (as in <code>[Invertible f]</code>)?<br>\nUpdate: Probably not</p>",
        "id": 426032573,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710203586
    },
    {
        "content": "<p>Sorry for the spam, feel free to mute this stream <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nMy justification for (3.) was that some functions are defined over different codomains (e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span> maps to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> while <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ζ</mi></mrow><annotation encoding=\"application/x-tex\">\\zeta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span></span></span></span> maps to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>), so it'll be simpler if everything is stated as when every function is casted to a common ring already. But this results in long statements:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inv_totient</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">pmul</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>When all I want to say is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inv_totient</span> <span class=\"o\">:</span> <span class=\"n\">φ.inv</span> <span class=\"bp\">=</span> <span class=\"n\">ζ</span> <span class=\"bp\">*</span> <span class=\"n\">pmul</span> <span class=\"n\">μ</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>Plus the problem can be solved by using <code>natCoe_apply</code> and <code>intCoe_apply</code>, so I don't know if my idea (3.) is good at all.</p>",
        "id": 426040763,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710209188
    },
    {
        "content": "<p>Note: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsMultiplicative</span> <span class=\"o\">(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">arith_mult</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Try this: exact IsMultiplicative.nat_cast isMultiplicative_zeta -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsMultiplicative</span> <span class=\"o\">(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">arith_mult</span><span class=\"bp\">?</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsMultiplicative</span> <span class=\"o\">(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">isMultiplicative_zeta.nat_cast</span>\n</code></pre></div>\n<p>So the API isn't <em>that</em> bad at the moment. That said I do think that <code>ζ</code> and <code>μ</code> should be defined  for any type <code>R</code> where <code>0</code> <code>1</code> (and <code>-1</code> for <code>μ</code>) make sense, just to save on casts.</p>",
        "id": 426044713,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1710211677
    },
    {
        "content": "<p>Okay <code>isMultiplicative</code> is <em>the</em> worst example I can give, but any other example should be better</p>",
        "id": 426045600,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710212366
    },
    {
        "content": "<p>Gareth, why don't you define an <code>Inv (ArithmeticFunction R)</code> notation which sends <code>f</code> to its true inverse if <code>f 1 = 0</code> and to <code>0</code> (or <code>f</code> or anything you want really) if not?</p>",
        "id": 426078592,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710233619
    },
    {
        "content": "<p>If you can make it so that you can construct a <code>DivisionMonoid (ArithmeticFunction R)</code> instance, you get an extra point</p>",
        "id": 426078724,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710233671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Convolution.20of.20mu.20and.20Lambda/near/426078592\">said</a>:</p>\n<blockquote>\n<p>Gareth, why don't you define an <code>Inv (ArithmeticFunction R)</code> notation which sends <code>f</code> to its true inverse if <code>f 1 = 0</code> and to <code>0</code> (or <code>f</code> or anything you want really) if not?</p>\n</blockquote>\n<p>...that should probably read \"if <code>f 1</code> is invertible\"</p>",
        "id": 426093355,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710238897
    },
    {
        "content": "<p>Defining <code>ζ</code>, <code>μ</code> etc. as <code>ArithmeticFunction R</code> for varying <code>R</code> will mean you have to write <code>ζ R</code>, <code>μ R</code> etc., so there is some trade-off.</p>",
        "id": 426093593,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710238991
    },
    {
        "content": "<p>In any case, I had very similar problems related to the fact that when there is a coercion from <code>R</code> to <code>R'</code>, this does not imply that there is also one from <code>ArithmeticFunction R</code> to <code>ArithmeticFunction R'</code>. It is OK when <code>R = ℕ</code> or <code>R = ℤ</code>, but not, e,g, when <code>R = ℝ</code> and <code>R' = ℂ</code>, which is relevant when we want to consider the L-series of the von Mangoldt function, which is <code>Λ : ArithmeticFunction ℝ</code>. My first attempt to make this work was <a href=\"https://github.com/leanprover-community/mathlib4/pull/10725\">#10725</a>, which did not enjoy a friendly reception. To make it work for L-series, I then introduced the notation <code>↗f</code>, which will turn <code>f</code> into a function from <code>ℕ</code> to <code>ℂ</code> if at all possible (this was recently merged into Mathlib and is available in <a href=\"https://tqft.net/mathlib4files/Mathlib/NumberTheory/LSeries/Basic\">file#Mathlib/NumberTheory/LSeries/Basic</a>).</p>\n<p>One problem with setting this up more generally for <code>ArithmeticFunction</code>s is that you need the coercion map from <code>R</code> to <code>R'</code> to preserve some structure (being a <code>ZeroHom</code> is the bare minimum, but in most cases, you want a ring homomorphism or an algebra map). Another one is that trying to set this up for general <code>R</code> and <code>R'</code>, there are type class synthesis problems; see the discussion <a href=\"#narrow/stream/144837-PR-reviews/topic/.2310725.20and.20.2310728.3A.20L-series/near/422590170\">here</a>.</p>",
        "id": 426096537,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710240070
    },
    {
        "content": "<p>I should've tried that <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> it's how 1/0 is defined anyways... sorry for that. I'll try that</p>",
        "id": 426101810,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710241924
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">invertible</span> <span class=\"o\">:=</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> (1) is this correct (in Lean)? -/</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">invFun</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"c\">/-</span><span class=\"cm\"> (2) How do I extract the unit? Using `[Invertible (f 1)]` -/</span>\n                         <span class=\"c\">/-</span><span class=\"cm\"> I can just write \\frac1 ..., but not here -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.properDivisors.attach</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mem_properDivisors.mp</span> <span class=\"n\">d.prop</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">invFun</span> <span class=\"n\">hf</span> <span class=\"n\">d</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this.right</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> (3) Is this correct? -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">invertible</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.dec</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">f</span> <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"n\">f.invFun</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I wrote this down but faced the problems (1) (2) (3)</p>",
        "id": 426105563,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710243457
    },
    {
        "content": "<p>This might work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ArithmeticFunction</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">invertible</span> <span class=\"o\">:=</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> (1) is this correct (in Lean)? -/</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">invFun</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">hf.unit</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:)</span> <span class=\"c\">/-</span><span class=\"cm\"> (2) How do I extract the unit? Using `[Invertible (f 1)]` -/</span>\n                         <span class=\"c\">/-</span><span class=\"cm\"> I can just write \\frac1 ..., but not here -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">hf.unit</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:)</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.properDivisors.attach</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mem_properDivisors.mp</span> <span class=\"n\">d.prop</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">invFun</span> <span class=\"n\">hf</span> <span class=\"n\">d</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this.right</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> (3) Is this correct? -/</span>\n<span class=\"c1\">-- noncomputable instance : Decidable (invertible f) := Classical.dec _</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">f</span> <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"n\">f.invFun</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>But maybe it is better to do it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ArithmeticFunction</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">invertible</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> (1) is this correct (in Lean)? -/</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"c1\">-- Add decidability assumptions where needed</span>\n<span class=\"c1\">-- We can always use `classical` in proofs later.</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">inv_leading</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">invertible</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">f</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">hf.unit</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">invFun</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">invertible</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.inv_leading</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.inv_leading</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.properDivisors.attach</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mem_properDivisors.mp</span> <span class=\"n\">d.prop</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">invFun</span> <span class=\"n\">d</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this.right</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">inv</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">invertible</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">f.invFun</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>The real test is whether it is easy to show that the so-defined inverse really is an inverse w.r.t. convolution...</p>",
        "id": 426108792,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710244680
    },
    {
        "content": "<p>I proved that already</p>",
        "id": 426109136,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710244795
    },
    {
        "content": "<p>(when things are invertible)</p>",
        "id": 426109250,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710244823
    },
    {
        "content": "<p>Now everything's noncomputable because <code>IsUnit</code> doesn't carry data about an explicit unit (?) :( But that's fine. Thanks for the help</p>",
        "id": 426113459,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710246347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Convolution.20of.20mu.20and.20Lambda/near/426078724\">said</a>:</p>\n<blockquote>\n<p>If you can make it so that you can construct a <code>DivisionMonoid (ArithmeticFunction R)</code> instance, you get an extra point</p>\n</blockquote>\n<p>This requires (f^-1)^-1 = f, but that only holds when f is invertible.</p>",
        "id": 426119504,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710248414
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 426119616,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710248451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Convolution.20of.20mu.20and.20Lambda/near/426113459\">said</a>:</p>\n<blockquote>\n<p>Now everything's noncomputable because <code>IsUnit</code> doesn't carry data about an explicit unit (?) :( But that's fine. Thanks for the help</p>\n</blockquote>\n<p>Yes: extracting the unit from <code>IsUnit</code> is noncomputable.</p>",
        "id": 426125134,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710250136
    },
    {
        "content": "<p>I'm using your second definition and defined this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">invertible</span> <span class=\"n\">f</span> <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"n\">f.invFun</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>However, this requires <code>[DecidablePred (@invertible R hR)]</code>, even if it's <strong>given</strong>by the user. Is there any way to avoid that?</p>",
        "id": 426142525,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710254929
    },
    {
        "content": "<p>If that makes any sense.</p>",
        "id": 426142543,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710254934
    },
    {
        "content": "<p><a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/commit/ed34ea5f829d44a765f7413cc1f41369aac0cbd4#diff-0d1b6fce930b9e8b2888446c17b4315f3a71f5ae7d06af1b1af146967245efdaR99\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/commit/ed34ea5f829d44a765f7413cc1f41369aac0cbd4#diff-0d1b6fce930b9e8b2888446c17b4315f3a71f5ae7d06af1b1af146967245efdaR99</a> L99 and L273</p>",
        "id": 426143168,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710255071
    },
    {
        "content": "<p>If you do it  like in my second definition, you don't need the <code>if</code> in the definition of the <code>inv</code> field.</p>\n<p>In any case, whenever you use <code>if</code>, you need a decidability instance for the predicate you base the decision on. This is how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ite#doc\">docs#ite</a> (or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=dite#doc\">docs#dite</a>) is defined. (And you cannot really avoid this when you want to produce \"data\" like in the <code>inv</code> field above).</p>",
        "id": 426143620,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710255184
    },
    {
        "content": "<p>You could use <code>open Classical in</code> on the line before your definition, to use the classical instance.</p>",
        "id": 426143788,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1710255236
    },
    {
        "content": "<p>Oh <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> I'm using your <code>inv_leading</code> and <code>invFun</code> from the second definition, but the if-then-else from the first definition.</p>",
        "id": 426143927,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710255264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Convolution.20of.20mu.20and.20Lambda/near/426143788\">said</a>:</p>\n<blockquote>\n<p>You could use <code>open Classical in</code> on the line before your definition, to use the classical instance.</p>\n</blockquote>\n<p>Yeah but I try not to do that. Maybe I shouldn't care that much?</p>",
        "id": 426144037,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710255295
    },
    {
        "content": "<p>You probably can write down something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">IsUnit</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">invertible</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>then it should be inferred when <code>R</code> is something like the integers or the rationals.</p>",
        "id": 426144165,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710255326
    },
    {
        "content": "<p>The point of defining <code>inv_leading</code> is that the definition of the inverse works also when <code>f 1</code> is not invertible and gives you the zero function (since <code>f.inv_leading = 0</code> in this case).<br>\nSo the case distinction is moved to <code>inv_leading</code>.</p>",
        "id": 426144489,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710255400
    },
    {
        "content": "<p>Then f.inv.inv won’t always be f. Is that fine? I defined it to be f.inv=f when it’s not invertible.</p>",
        "id": 426144785,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710255477
    },
    {
        "content": "<p>I don't think it makes sense to require <code>inv</code> to be an involution in this context.<br>\nWhen <code>R</code> is a (commutative) ring, there will be a (commutative) ring structure on <code>ArithmeticFunction R</code>, and the relevant statement should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">isUnit_iff</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">invertible</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>and you can use general API for units in rings.</p>\n<p>I don't think there is a reasonable way to produce a <code>DivisionMonoid</code> structure on <code>ArithmeticFunction R</code>.</p>",
        "id": 426146665,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710255895
    },
    {
        "content": "<p>Oh! That’s smart, so user just deal with (IsUnit f), which has a ton of existing API</p>",
        "id": 426146909,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710255957
    },
    {
        "content": "<p>Okay that I can do, I will work on it when I get back :) thanks a lot</p>",
        "id": 426147005,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710255972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Convolution.20of.20mu.20and.20Lambda/near/426144037\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Convolution.20of.20mu.20and.20Lambda/near/426143788\">said</a>:</p>\n<blockquote>\n<p>You could use <code>open Classical in</code> on the line before your definition, to use the classical instance.</p>\n</blockquote>\n<p>Yeah but I try not to do that. Maybe I shouldn't care that much?</p>\n</blockquote>\n<p>Is there a reason you're trying not to do that? Unless in very specific cases (when you're writing a function that the kernel should be able to evaluate -- which will never be the case with complex numbers), it's perfectly reasonable and safe.</p>",
        "id": 426152319,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1710257250
    },
    {
        "content": "<p>Computability is the biggest reasons yeah, it’ll be nice if I can just #eval \\phi\\^-1 12 and verify it’s what I want :) But yeah it doesn’t bother me</p>",
        "id": 426158579,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710258872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Convolution.20of.20mu.20and.20Lambda/near/426119504\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Convolution.20of.20mu.20and.20Lambda/near/426078724\">said</a>:</p>\n<blockquote>\n<p>If you can make it so that you can construct a <code>DivisionMonoid (ArithmeticFunction R)</code> instance, you get an extra point</p>\n</blockquote>\n<p>This requires (f^-1)^-1 = f, but that only holds when f is invertible.</p>\n</blockquote>\n<p>Not if you define <code>f⁻¹ := f</code> when <code>f</code> isn't invertible.</p>",
        "id": 426187127,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710267436
    },
    {
        "content": "<p>Then the other requirements fail e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mi>g</mi><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>g</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(fg)^{-1}=g^{-1}f^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 426187208,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710267465
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/7AZp0XwG0nFMRy7r2plYhi_8/Screenshot-2024-03-12-at-18.18.01.png\">Screenshot-2024-03-12-at-18.18.01.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7AZp0XwG0nFMRy7r2plYhi_8/Screenshot-2024-03-12-at-18.18.01.png\" title=\"Screenshot-2024-03-12-at-18.18.01.png\"><img src=\"/user_uploads/3121/7AZp0XwG0nFMRy7r2plYhi_8/Screenshot-2024-03-12-at-18.18.01.png\"></a></div><p>:(</p>",
        "id": 426187304,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710267495
    },
    {
        "content": "<p>Yes, so this is what I'm saying you would get bonus points if you managed to write such an instance <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 426187311,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710267497
    },
    {
        "content": "<p>I think I have something slightly better now using Michael's idea of using <code>IsUnit</code> for the API</p>",
        "id": 426187437,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710267547
    },
    {
        "content": "<p>I'm not yet convinced it's impossible. There's probably some clever trick of junk value that makes it work. And then it'd be worth using that junk value since it makes so many more theorems true.</p>",
        "id": 426187480,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710267571
    },
    {
        "content": "<p>I was thinking the opposite, that you should be able to prove it's <em>impossible</em> to set such junk values</p>",
        "id": 426187576,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710267604
    },
    {
        "content": "<p>I'd be interested in either!</p>",
        "id": 426188098,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710267805
    },
    {
        "content": "<p>(bonus points for you in either case <span aria-label=\"fishing\" class=\"emoji emoji-1f3a3\" role=\"img\" title=\"fishing\">:fishing:</span> <span aria-label=\"carrot\" class=\"emoji emoji-1f955\" role=\"img\" title=\"carrot\">:carrot:</span>)</p>",
        "id": 426188240,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710267852
    },
    {
        "content": "<p>For \"And then it'd be worth using that junk value since it makes so many more theorems true.\" do you mean e.g. we can use the whole <code>DivisionMonoid</code> API?</p>",
        "id": 426188296,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710267876
    },
    {
        "content": "<p>Not sure what I was thinking, but it's indeed impossible, for quite a simple reason</p>",
        "id": 426190960,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710268869
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> satisfies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo>∗</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>n</mi><mo>=</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">(f * f^{-1})(n) = [n = 1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo>∗</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">(f * f^{-1})(1) = f(1)f^{-1}(1) = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span><br>\nSo you need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">1 / f(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^{-1}(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> and indeed this is the only division that's needed (for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n \\geq 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^{-1}(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> satisfies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>d</mi><mo>∣</mo><mi>n</mi></mrow></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\sum_{d \\mid n} f(d)f^{-1}(n / d) = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2888em;vertical-align:-0.4747em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mrel mtight\">∣</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> so rearrange and you get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^{-1}(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>)</p>",
        "id": 426191055,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710268912
    },
    {
        "content": "<p>Your argument only shows what <code>f^-1</code> is when <code>f</code> is invertible. What I'm interested in here is what we can set <code>f^-1</code> to when <code>f</code> is not invertible.</p>",
        "id": 426196267,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710270886
    },
    {
        "content": "<p>Compare <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZMod.inv#doc\">docs#ZMod.inv</a> . There is no <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DivisionMonoid#doc\">docs#DivisionMonoid</a> instance on  <code>ZMod n</code>, however.</p>",
        "id": 426196542,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710271001
    },
    {
        "content": "<p>Similar problema show up when inverting 2*2 matrices.</p>",
        "id": 426199619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710272345
    },
    {
        "content": "<p>For commutative rings, such as the convolution ring, using the junk value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>:</mo><mo>=</mo><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f^{-1} := f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> for non-invertible <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> seems to obey the <code>DivisionMonoid</code> axioms without exception, if I am not mistaken.</p>",
        "id": 426199929,
        "sender_full_name": "Terence Tao",
        "timestamp": 1710272484
    },
    {
        "content": "<p>Oh, wait, it doesn't.  Grr.</p>",
        "id": 426200111,
        "sender_full_name": "Terence Tao",
        "timestamp": 1710272556
    },
    {
        "content": "<p>How do you get that <code>f * g = f * g⁻¹</code> when <code>g</code> is invertible, but <code>f</code> is not?</p>",
        "id": 426200137,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710272575
    },
    {
        "content": "<p>How painful would it be to remove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">(f^{-1})^{-1}=f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> from the axioms of a division monoid, and only recover this fact from the other axioms for invertible <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>?  Then one can just set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">f^{-1}=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> for non-invertible <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>.</p>",
        "id": 426200520,
        "sender_full_name": "Terence Tao",
        "timestamp": 1710272721
    },
    {
        "content": "<p>It looks like the only way Mathlib knows to get a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DivisionMonoid#doc\">docs#DivisionMonoid</a> is from a group (with zero); all other instances just serve to make sure that certain constructions involving <code>DivisionMonoid</code>s are <code>DivisionMonoid</code>s themselves. So I'm not convinced that this is really a good notion...</p>",
        "id": 426201073,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710272931
    },
    {
        "content": "<p>Aren't things coming from groups and groups with zero <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DivInvMonoid#doc\">docs#DivInvMonoid</a> s?</p>",
        "id": 426202315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710273468
    },
    {
        "content": "<p>\"A DivisionMonoid is a DivInvMonoid with involutive inversion and such that (a * b)⁻¹ = b⁻¹ * a⁻¹ and a * b = 1 → a⁻¹ = b.\" So a <code>DivisionMonoid</code> adds some structure.</p>",
        "id": 426203361,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710273878
    },
    {
        "content": "<p>For what it's worth, ZMod n does have a division monoid structure if one defines <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mi>m</mi><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>m</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(dm)^{-1} =d(m^{-1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> divides <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> is coprime to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">n/d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">d</span></span></span></span>, though this is rather artificial and not really a point in favor of keeping the current <code>DivisionMonoid</code> definition.</p>",
        "id": 426203445,
        "sender_full_name": "Terence Tao",
        "timestamp": 1710273911
    },
    {
        "content": "<p>I guess my point above was that inverses in <code>ZMod n</code> are defined in this artificial way, yet there is no <code>DivisionMonoid</code> instance.</p>",
        "id": 426203826,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710274059
    },
    {
        "content": "<p>Actually I think the current inverse definition is slightly different (setting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mi>m</mi><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(dm)^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>m</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">m^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> rather than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>m</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d(m^{-1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>), so it doesn't obey the <code>DivisionMonoid</code> axioms as currently formulated.</p>",
        "id": 426204350,
        "sender_full_name": "Terence Tao",
        "timestamp": 1710274285
    },
    {
        "content": "<p>I suspect that there are very few applications in which complete involutionarity of the inverse operation of a <code>DivisionMonoid</code> is actually useful, and the special case of invertible elements can be deduced from the other axioms, so it may actually not be too painful to refactor that away, so that (among other things) <code>Ring</code>s now become <code>DivisionMonoid</code>s (by using the zero junk value).</p>",
        "id": 426205152,
        "sender_full_name": "Terence Tao",
        "timestamp": 1710274601
    },
    {
        "content": "<p>Note that the motivating example for the introduction of <code>DivisionMonoid</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.divisionMonoid#doc\">docs#Finset.divisionMonoid</a></p>",
        "id": 426214255,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710278315
    },
    {
        "content": "<p>I am writing a paper about it, but I'm afraid it will still be a month or so before I have something to show</p>",
        "id": 426214370,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710278359
    },
    {
        "content": "<p>But are there any results where it is relevant that taking the inverse is involutory even on non-invertible elements?</p>",
        "id": 426214448,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710278399
    },
    {
        "content": "<p>Plenty. I encourage you to try removing that axiom and see what breaks.</p>",
        "id": 426214797,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710278541
    },
    {
        "content": "<p>I'm not against having an extra typeclass which would be <code>DivisionMonoid</code> without the <code>inv_inv</code> axiom, but it would have to be a separate typeclass</p>",
        "id": 426214948,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710278617
    },
    {
        "content": "<p>To be honest, I will just stick will the plain stuff (proving theorems only for invertible functions) so that I get some math out. Making it fancy and milking extra features can be done later :D</p>",
        "id": 426225137,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710283689
    }
]