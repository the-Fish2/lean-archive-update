[
    {
        "content": "<p>I'm looking for something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but have difficulties finding it.</p>",
        "id": 409025823,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703024628
    },
    {
        "content": "<p>Isn't this just an application of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.comp#doc\">docs#Filter.Tendsto.comp</a> ?</p>",
        "id": 409026441,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703024932
    },
    {
        "content": "<p>I guess so. I think I was looking for something involving <code>comp</code>, but may have mistyped (it is getting late ...).</p>",
        "id": 409026533,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703024996
    },
    {
        "content": "<p>Is there a tactic that clears <code>Tendsto (fun x ↦ 1 - x) (𝓝[≠] 1) (𝓝[≠] 0)</code>?</p>",
        "id": 409027339,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703025437
    },
    {
        "content": "<p>Hmm... perhaps I led you astray. This works though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">tendsto_map'_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span><span class=\"bp\">!</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">Homeomorph.addLeft</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toPartialHomeomorph.map_nhdsWithin_eq</span>\n    <span class=\"o\">(</span><span class=\"n\">Set.mem_univ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>The first two lines get it down to the essence of the argument.</p>",
        "id": 409030925,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703027206
    },
    {
        "content": "<p>That <code>toPartialHomeomorph.map_nhdsWithin_eq</code> is really ugly. If the lemma is missing for homeomorphisms then it should be added.</p>",
        "id": 409032497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703028148
    },
    {
        "content": "<p>Indeed, I think it's missing. If I can get to it, I'll PR, but i'm quite busy at the moment.</p>",
        "id": 409035769,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703030198
    },
    {
        "content": "<p>I guess we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.LeftInvOn.map_nhdsWithin_eq#doc\">docs#Set.LeftInvOn.map_nhdsWithin_eq</a>, but that's not really better.</p>",
        "id": 409036021,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703030371
    },
    {
        "content": "<p>Oh, I guess we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Embedding.map_nhdsWithin_eq#doc\">docs#Embedding.map_nhdsWithin_eq</a>. So the above can be written:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">tendsto_map'_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span><span class=\"bp\">!</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">Homeomorph.addLeft</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">embedding.map_nhdsWithin_eq</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>which I think is fine.</p>",
        "id": 409036688,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703030650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Shifted.20limits/near/409027339\">said</a>:</p>\n<blockquote>\n<p>Is there a tactic that clears <code>Tendsto (fun x ↦ 1 - x) (𝓝[≠] 1) (𝓝[≠] 0)</code>?</p>\n</blockquote>\n<p>I'm still stuck at this. To un-#xy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"Γ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Complex.Gamma</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Metric</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_sub_one_mul_Gamma_one_sub_nhds_one</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">tendsto_self_mul_Gamma_nhds_zero.comp</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">neg</span>\n  <span class=\"n\">convert</span> <span class=\"n\">tendsto_map</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- goal is `𝓝[≠] 0 = map (fun x ↦ 1 - x) (𝓝[≠] 1)`</span>\n</code></pre></div>",
        "id": 409186723,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703079024
    },
    {
        "content": "<p>This should be easy, but trying to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Embedding.map_nhdsWithin_eq#doc\">docs#Embedding.map_nhdsWithin_eq</a> together with some <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Homeomorph#doc\">docs#Homeomorph</a> gave me trouble, because I could not identify the homeomorphism with the function...</p>",
        "id": 409187361,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703079272
    },
    {
        "content": "<p>Here is another one that should be easy, but which I found tricky:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dist_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">dist_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_Nat_cast</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">int_cast_abs</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.cast_abs</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">Int.cast_one</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">Int.cast_lt</span><span class=\"o\">,</span> <span class=\"n\">Int.abs_lt_one_iff</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">,</span>\n      <span class=\"n\">Int.ofNat_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 409192526,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703081130
    },
    {
        "content": "<p>Needs more lemmas!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Nat.dist_eq_dist</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Dist.dist</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.dist</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.dist_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.dist_eq_max_sub_min</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">max_sub_min_eq_abs'</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dist_nat_cast'</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.dist_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">norm_cast</span> <span class=\"c1\">-- not sure why this still introduces `Int.subNatNat`</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_abs</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">int_cast_abs</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dist_nat_cast</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.dist</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_nat_cast'</span><span class=\"o\">,</span> <span class=\"n\">Nat.dist_eq_dist</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Nat.dist_eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Nat.eq_of_dist_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">Nat.dist_eq_zero</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dist_const</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_lt_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.dist_eq_zero_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dist_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">dist_const</span> <span class=\"n\">m</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 409198643,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703082897
    },
    {
        "content": "<p>Regarding the previous question: struggling with such trivialities always means missing stupid lemmas, often simp lemmas. You simply need to have the patience to write those lemmas and put them into Mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Homeomorph.mulLeft_apply</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousMul</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Homeomorph.mulLeft</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Homeomorph.mulRight_apply</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousMul</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Homeomorph.mulRight</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Homeomorph.inv_apply</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InvolutiveInv</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousInv</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Homeomorph.inv</span> <span class=\"n\">G</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Homeomorph.image_compl</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≃ₜ</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span> <span class=\"n\">f.toEquiv.image_compl</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Homeomorph.map_punctured_nhds_eq</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≃ₜ</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">f.embedding.map_nhdsWithin_eq</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f.image_compl</span><span class=\"o\">,</span> <span class=\"n\">Set.image_singleton</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"Γ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Complex.Gamma</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Metric</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_sub_one_mul_Gamma_one_sub_nhds_one</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">tendsto_self_mul_Gamma_nhds_zero.comp</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">neg</span>\n  <span class=\"n\">convert</span> <span class=\"n\">tendsto_map</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">((</span><span class=\"n\">Homeomorph.neg</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">Homeomorph.addLeft</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">map_punctured_nhds_eq</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 409202993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703084220
    },
    {
        "content": "<p>The fact the first three lemmas are missing is very weird. They should be the first lemmas after the definition of these homeomorphisms.</p>",
        "id": 409203171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703084269
    },
    {
        "content": "<p>Maybe they should even be auto-generated by <code>@[simps]</code> or something.</p>",
        "id": 409203320,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703084311
    },
    {
        "content": "<p>I am not really feeling at home in this part of Mathlib, so I would appreciate it if someone more knowledgeable would PR these missing lemmas. (Alternatively, I'd need some help with finding the right places to put them.)</p>",
        "id": 409203711,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703084427
    },
    {
        "content": "<p>Fwiw:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Homeomorph.mulLeft_apply</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousMul</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Homeomorph.mulLeft</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_mulLeft</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 409204495,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703084617
    },
    {
        "content": "<p>But there's zero lemmas about <code>Homeomorph.inv</code></p>",
        "id": 409204846,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703084715
    },
    {
        "content": "<p>Ok, so the first two are there already, but didn't trigger because the third one was missing</p>",
        "id": 409205070,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703084768
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/9166\">#9166</a></p>",
        "id": 409206896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703085332
    }
]