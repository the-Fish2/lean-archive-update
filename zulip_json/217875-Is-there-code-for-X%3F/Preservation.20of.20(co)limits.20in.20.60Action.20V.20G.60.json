[
    {
        "content": "<p>Is there somewhere the statement: If a functor to <code>Action V G</code> composed with the forgetful functor to <code>V</code> preserves (co)limits, then also the functor itself preserves (co)limits?</p>\n<p>I.e. something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RepresentationTheory.Action.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Preserves.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">v₁</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">w₂</span> <span class=\"n\">w₁</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span> <span class=\"n\">Functor</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">LargeCategory.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ConcreteCategory</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">})</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">SingleObj.preservesColimit</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">SingleObj</span> <span class=\"n\">G</span> <span class=\"bp\">⥤</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">w₂</span><span class=\"o\">,</span> <span class=\"n\">w₁</span><span class=\"o\">}</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">PreservesColimit</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"o\">(</span><span class=\"n\">evaluation</span> <span class=\"o\">(</span><span class=\"n\">SingleObj</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">SingleObj.star</span> <span class=\"n\">G</span><span class=\"o\">)))</span>\n    <span class=\"o\">:</span> <span class=\"n\">PreservesColimit</span> <span class=\"n\">K</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">preservesColimitOfEvaluation</span>\n  <span class=\"n\">intro</span> <span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Action.preservesColimitOfPreserves</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">Action</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w₁</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">w₂</span><span class=\"o\">,</span> <span class=\"n\">w₁</span><span class=\"o\">}</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">PreservesColimit</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget₂</span> <span class=\"o\">(</span><span class=\"n\">Action</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">PreservesColimit</span> <span class=\"n\">K</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">F'</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">SingleObj</span> <span class=\"n\">G</span> <span class=\"bp\">⥤</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"o\">(</span><span class=\"n\">Action.functorCategoryEquivalence</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">functor</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">PreservesColimit</span> <span class=\"n\">K</span> <span class=\"n\">F'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">SingleObj.preservesColimit</span>\n    <span class=\"k\">show</span> <span class=\"n\">PreservesColimit</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget₂</span> <span class=\"o\">(</span><span class=\"n\">Action</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">preservesColimitOfReflectsOfPreserves</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Action.functorCategoryEquivalence</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">functor</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Action.preservesColimitOfShapeOfPreserves</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">Action</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w₁</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">w₂</span><span class=\"o\">,</span> <span class=\"n\">w₁</span><span class=\"o\">}</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">PreservesColimitsOfShape</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget₂</span> <span class=\"o\">(</span><span class=\"n\">Action</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">PreservesColimitsOfShape</span> <span class=\"n\">J</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">K</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Action.preservesColimitOfPreserves</span>\n  <span class=\"n\">exact</span> <span class=\"n\">PreservesColimitsOfShape.preservesColimit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Action.preservesColimitOfSizeOfPreserves</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">Action</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">PreservesColimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">w₂</span><span class=\"o\">,</span> <span class=\"n\">w₁</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget₂</span> <span class=\"o\">(</span><span class=\"n\">Action</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">PreservesColimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">w₂</span><span class=\"o\">,</span> <span class=\"n\">w₁</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">J</span> <span class=\"n\">_</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Action.preservesColimitOfShapeOfPreserves</span>\n  <span class=\"n\">exact</span> <span class=\"n\">PreservesColimitsOfSize.preservesColimitsOfShape</span>\n</code></pre></div>",
        "id": 409717165,
        "sender_full_name": "Christian Merten",
        "timestamp": 1703337810
    },
    {
        "content": "<p>Is this a statement about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.ConcreteCategory#doc\">docs#CategoryTheory.ConcreteCategory</a> s?</p>",
        "id": 409722096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703342344
    },
    {
        "content": "<p>I don't really think it is, it just uses the <code>HasForget₂</code> instance which needs <code>ConcreteCategory V</code>, but <code>forget₂ (Action V G) V</code> could be just defined by hand as <code>(evaluation (SingleObj G) V).obj (SingleObj.star G)</code>.</p>",
        "id": 409722312,
        "sender_full_name": "Christian Merten",
        "timestamp": 1703342543
    },
    {
        "content": "<p>Ah, maybe I misunderstood. Are you suggesting it could be generalized to the case of concrete categories?</p>",
        "id": 409722365,
        "sender_full_name": "Christian Merten",
        "timestamp": 1703342597
    },
    {
        "content": "<p>In my mind this is just a consequence of <code>Action G V</code> being a special functor category and how (co)limits in functor categories are computed.</p>",
        "id": 409722513,
        "sender_full_name": "Christian Merten",
        "timestamp": 1703342726
    },
    {
        "content": "<p>you're looking or a \"reflects colimits\" kind of statement.</p>",
        "id": 409725211,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703344811
    },
    {
        "content": "<p>Thanks! It seems to be some special version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.evaluationJointlyReflectsColimits#doc\">docs#CategoryTheory.Limits.evaluationJointlyReflectsColimits</a></p>",
        "id": 409725585,
        "sender_full_name": "Christian Merten",
        "timestamp": 1703345062
    },
    {
        "content": "<p>Which in this setting can be formulated sligthly more compactly, because <code>SingleObj G</code> has only one object. The reformulation seems to be the snippet above.</p>",
        "id": 409725673,
        "sender_full_name": "Christian Merten",
        "timestamp": 1703345111
    }
]