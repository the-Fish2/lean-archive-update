[
    {
        "content": "<p>Here's a problem I'm facing. I want to apply partial integration to prove:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>x</mi><msup><mi>φ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>x</mi><mo>=</mo><mi>b</mi><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>a</mi><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>−</mo><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\int_a^b x φ&#x27;(x) dx = b φ(b) - a φ(a) - \\int_a^b φ(x) dx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3998em;vertical-align:-0.3558em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.044em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span><span style=\"top:-3.2579em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3558em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\">φ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3998em;vertical-align:-0.3558em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.044em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span><span style=\"top:-3.2579em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3558em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span></span><br>\nfor a continuously differentiable function <code>φ</code>. So I would think that I should apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_mul_deriv_eq_deriv_mul#doc\">docs#intervalIntegral.integral_mul_deriv_eq_deriv_mul</a> to a function satisfying <code>ContDiffOn ℝ 1 φ [[a, b]]</code>. The theorem requires that I use a closed interval <code>[[a, b]]</code> (presumably necessary because we'll be evaluating <code>φ</code> at <code>a</code> and <code>b</code>). I also need to know that <code>φ</code> has derivative <code>deriv φ</code> on <code>[[a, b]]</code>, and that <code>deriv φ</code> is continuous on <code>[[a, b]]</code>. The problem is that, as far as I can tell, the assumption <code>ContDiffOn</code> can only tell me that <code>HasDerivAt φ (deriv φ x) x</code> and <code>ContinuousOn (deriv φ)</code> hold on the <strong>open</strong> interval <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a,b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span>, which of course is not sufficient for the application. Is that really true? (And hence I shouldn't assume <code>ContDiffOn</code>, but just directly assume the two properties that I need, right?) Or is there a better way to use the <code>ContDiffOn</code> API that I'm missing? Thanks! Here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.IntegralEqImproper</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Interval</span> <span class=\"n\">Topology</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a_le_b</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">φDiff</span> <span class=\"o\">:</span> <span class=\"n\">ContDiffOn</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"n\">φ</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]])</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">deriv</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>\n      <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">φ</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- This is for the parts below:</span>\n  <span class=\"k\">have</span> <span class=\"n\">φDiff'</span> <span class=\"o\">:</span> <span class=\"n\">ContDiffOn</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">φDiff.mono</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">uIcc_of_le</span> <span class=\"n\">a_le_b</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Ioo_subset_Icc_self</span>\n\n  <span class=\"n\">set</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span>\n  <span class=\"n\">set</span> <span class=\"n\">u'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]],</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">hasDerivAt_id'</span> <span class=\"n\">x</span>\n  <span class=\"k\">have</span> <span class=\"n\">hu'</span> <span class=\"o\">:</span> <span class=\"n\">IntervalIntegrable</span> <span class=\"n\">u'</span> <span class=\"n\">MeasureTheory.volume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Continuous.intervalIntegrable</span>\n    <span class=\"n\">continuity</span>\n\n  <span class=\"c1\">-- Can't seem to prove this:</span>\n  <span class=\"k\">have</span> <span class=\"n\">derivφ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]],</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- I can only prove this:</span>\n  <span class=\"k\">have</span> <span class=\"n\">derivφ_Open</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"k\">have</span> <span class=\"n\">x_in_s</span> <span class=\"o\">:</span> <span class=\"n\">Set.Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">isOpen_Ioo.mem_nhds</span> <span class=\"n\">hx</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ContDiffAt.hasStrictDerivAt</span> <span class=\"o\">(</span><span class=\"n\">φDiff'.contDiffAt</span> <span class=\"n\">x_in_s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hasDerivAt</span>\n  <span class=\"c1\">-- Can't seem to prove this:</span>\n  <span class=\"k\">have</span> <span class=\"n\">derivφCont</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- I can only prove this:</span>\n  <span class=\"k\">have</span> <span class=\"n\">derivφCont'</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ContDiffOn.continuousOn</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">contDiffOn_succ_iff_deriv_of_isOpen</span> <span class=\"n\">isOpen_Ioo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">φDiff'</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hv'</span> <span class=\"o\">:</span> <span class=\"n\">IntervalIntegrable</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">MeasureTheory.volume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n    <span class=\"n\">derivφCont.intervalIntegrable</span>\n  <span class=\"n\">convert</span> <span class=\"n\">intervalIntegral.integral_mul_deriv_eq_deriv_mul</span> <span class=\"n\">hu</span> <span class=\"n\">derivφ</span> <span class=\"n\">hu'</span> <span class=\"n\">hv'</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 431151635,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712168998
    },
    {
        "content": "<p>I suppose I could assume <code>ContDiffOn</code> for some open set <code>s</code> containing <code>[[a, b]]</code>...? That's probably the easiest solution?</p>",
        "id": 431151891,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712169099
    },
    {
        "content": "<p>I'm not very familiar with this end of the library, but it seems to me from a mathematical perspective that probably <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_mul_deriv_eq_deriv_mul#doc\">docs#intervalIntegral.integral_mul_deriv_eq_deriv_mul</a> could instead take arguments <code>hu</code> and <code>hv</code> involving <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasDerivWithinAt#doc\">docs#HasDerivWithinAt</a> (within <code>Set.uIcc a b</code>), or else we could have a variant with these assumptions. But maybe I'm missing some subtlety here.</p>\n<p>I have no idea whether this is the correct approach to your problem though.</p>",
        "id": 431159995,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712172312
    },
    {
        "content": "<p>The version with <code>HasDerivWithinAt</code> could probably be obtained from the one that we have (using some kind of Schwarz reflection to extend a <code>ContDiffOn</code> function on <code>Icc a b</code> to a <code>ContDiffOn</code> function on a neighborhood. Alternatively, you can always work on <code>Icc (a + e) (b - e)</code> and let <code>e</code> go to <code>0</code> in the end.</p>",
        "id": 431165027,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712174062
    },
    {
        "content": "<p>If I read correctly what <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContDiffOn#doc\">docs#ContDiffOn</a> says, it seems to me that it includes the required condition on the extreme points when you apply it with <code>s = Set.uIcc a b</code>. In any case, this is what “a neighborhood within <code>s</code> of each point” means.</p>",
        "id": 431192516,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712185502
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_deriv_mul_eq_sub#doc\">docs#intervalIntegral.integral_deriv_mul_eq_sub</a> is proven using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_eq_sub_of_hasDerivAt#doc\">docs#intervalIntegral.integral_eq_sub_of_hasDerivAt</a>, which is a special case of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_eq_sub_of_hasDeriv_right#doc\">docs#intervalIntegral.integral_eq_sub_of_hasDeriv_right</a>. But we can use the last lemma directly to get what you want.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.IntegralEqImproper</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Interval</span> <span class=\"n\">Topology</span> <span class=\"n\">Set</span> <span class=\"n\">intervalIntegral</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAlgebra</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">integral_deriv_mul_eq_sub'</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">u'</span> <span class=\"n\">v'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]],</span> <span class=\"n\">HasDerivWithinAt</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]]</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]],</span> <span class=\"n\">HasDerivWithinAt</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">v'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]]</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hu'</span> <span class=\"o\">:</span> <span class=\"n\">IntervalIntegrable</span> <span class=\"n\">u'</span> <span class=\"n\">volume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hv'</span> <span class=\"o\">:</span> <span class=\"n\">IntervalIntegrable</span> <span class=\"n\">v'</span> <span class=\"n\">volume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">u'</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">v'</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2u</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"n\">u</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]]</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuousWithinAt</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2v</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"n\">v</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]]</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuousWithinAt</span>\n  <span class=\"n\">apply</span> <span class=\"n\">integral_eq_sub_of_hasDeriv_right</span> <span class=\"o\">(</span><span class=\"n\">h2u.mul</span> <span class=\"n\">h2v</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mem_Icc_of_Ioo</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mem_Icc_of_Ioo</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">hasDerivAt</span>\n      <span class=\"o\">(</span><span class=\"n\">Icc_mem_nhds</span> <span class=\"n\">hx.1</span> <span class=\"n\">hx.2</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">hasDerivWithinAt</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hu'.mul_continuousOn</span> <span class=\"n\">h2v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">hv'.continuousOn_mul</span> <span class=\"n\">h2u</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 431195068,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712187118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>: <code>ContDiffOn _ _ _ s</code> only gives <code>HasDerivAt</code> only at points in the interior of <code>s</code>. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContDiffOn.congr#doc\">docs#ContDiffOn.congr</a> shows that <code>ContDiffOn</code> is independent of any values the function takes on points outside <code>s</code>. (But maybe I misunderstood what you were claiming.)</p>",
        "id": 431195345,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712187300
    },
    {
        "content": "<p>I think all the statements involving <code>HasDerivAt</code> on <code>uIcc</code> could (should?) also have versions using <code>uIoo</code> (except this is not a thing in mathlib) and assuming continuity on <code>uIcc</code>. We already have a version in this form, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_eq_sub_of_hasDerivAt_of_le#doc\">docs#intervalIntegral.integral_eq_sub_of_hasDerivAt_of_le</a>, from which all the other ones can easily be derived.</p>",
        "id": 431232339,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712211484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Using.20.60ContDiffOn.60.20for.20partial.20integration/near/431195345\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span>: <code>ContDiffOn _ _ _ s</code> only gives <code>HasDerivAt</code> only at points in the interior of <code>s</code>. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContDiffOn.congr#doc\">docs#ContDiffOn.congr</a> shows that <code>ContDiffOn</code> is independent of any values the function takes on points outside <code>s</code>. (But maybe I misunderstood what you were claiming.)</p>\n</blockquote>\n<p>I was just claiming that the doc string says otherwise.</p>",
        "id": 431235721,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712213209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Using.20.60ContDiffOn.60.20for.20partial.20integration/near/431232339\">said</a>:</p>\n<blockquote>\n<p>I think all the statements involving <code>HasDerivAt</code> on <code>uIcc</code> could (should?) also have versions using <code>uIoo</code> (except this is not a thing in mathlib) and assuming continuity on <code>uIcc</code>. We already have a version in this form, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_eq_sub_of_hasDerivAt_of_le#doc\">docs#intervalIntegral.integral_eq_sub_of_hasDerivAt_of_le</a>, from which all the other ones can easily be derived.</p>\n</blockquote>\n<p>Perhaps it would help discovery to have <code>Ioo</code> somewhere in the name? <code>of_le</code> does refer to one of the assumptions but does not point to the main difference when compared to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_eq_sub_of_hasDerivAt#doc\">docs#intervalIntegral.integral_eq_sub_of_hasDerivAt</a> ... Or perhaps <code>integral_eq_sub_of_continuousOn_of_hasDerivAt</code> to stress the fact that the assumptions are on different sets?</p>",
        "id": 431244580,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712216288
    },
    {
        "content": "<p>Yes, the current name is very bad. I found it just by browing the file.</p>",
        "id": 431251887,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712218515
    },
    {
        "content": "<p>I PR'd in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11886\">#11886</a> incorporating Sebastien's suggestion.</p>",
        "id": 431272631,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712224301
    },
    {
        "content": "<p>I come back about the significance of <code>WithinAt</code> etc. The docstrings talk about “neighborhoods of x within s”, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=nhdsWithin#doc\">docs#nhdsWithin</a> seems to agree with the mathematical meaning of a neighborhood of a point <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> within a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>. <br>\nProvided this understanding is OK, when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> is an interval <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">;</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a;b]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span>, the bounds <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> belong to the relative interior, “withinAt” should say something.</p>",
        "id": 431295978,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712232093
    },
    {
        "content": "<p>The docstring of <code>ContinuousOn</code> end with \"neighborhood of <code>x</code> in <code>s</code>\", which is meant in the sense of <code>nhdsWithin</code>.</p>",
        "id": 431296662,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712232286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Using.20.60ContDiffOn.60.20for.20partial.20integration/near/431232339\">said</a>:</p>\n<blockquote>\n<p>I think all the statements involving <code>HasDerivAt</code> on <code>uIcc</code> could (should?) also have versions using <code>uIoo</code> (except this is not a thing in mathlib)</p>\n</blockquote>\n<p>FYI There's a definition of <code>uIoo</code> and some API for it sitting around in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9598\">#9598</a>...</p>",
        "id": 431306266,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712235212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> , are you still planning to have a look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/9598\">#9598</a>, or do you prefer if someone takes it over?</p>",
        "id": 431309815,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712236133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> , if you split off the <code>uIoo</code> part from this PR in another PR, I'll merge it quickly! Often, small self-contained PRs get in much quicker than big PRs. You can have a look at how I split <a href=\"https://github.com/leanprover-community/mathlib4/pull/11776\">#11776</a> into small chunks for instance, it worked pretty well (with different reviewers with different expertise on the different bits, while noone would have looked at the whole thing...)</p>",
        "id": 431310461,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712236313
    },
    {
        "content": "<p>Ah btw <span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> speaking of this, do you by any chance have code showing this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fourier_surjection_on_schwartz</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝓢</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">𝓢</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"bp\">𝓕</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Asking for a friend ;-)</p>",
        "id": 431311523,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712236635
    },
    {
        "content": "<p>I hope that within a few weeks, we should have in Mathlib the fact that the Fourier transform maps Schwartz to Schwartz. Then you can deduce your statement from Fourier inversion. My advice would be to keep the <code>sorry</code> in PNT until then. Current PRs in this direction are <a href=\"https://github.com/leanprover-community/mathlib4/pull/11776\">#11776</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/11867\">#11867</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/11868\">#11868</a> by the way :-), with the latter two being mostly straightforward to review.</p>",
        "id": 431316187,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712238066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Using.20.60ContDiffOn.60.20for.20partial.20integration/near/431310461\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> , if you split off the <code>uIoo</code> part from this PR in another PR, I'll merge it quickly! Often, small self-contained PRs get in much quicker than big PRs. You can have a look at how I split <a href=\"https://github.com/leanprover-community/mathlib4/pull/11776\">#11776</a> into small chunks for instance, it worked pretty well (with different reviewers with different expertise on the different bits, while noone would have looked at the whole thing...)</p>\n</blockquote>\n<p>I guess I didn't think <a href=\"https://github.com/leanprover-community/mathlib4/pull/9598\">#9598</a> was all that big... :( It's only ~600 lines. It's gotten a number of very useful comments and suggestions already, which have been addressed (to my knowledge), so I'm not sure why it's still sitting... (But of course I know we're all very busy!...) I guess if it sits for another week or so, I'll split off the <code>uIoo</code> bits...</p>",
        "id": 431320820,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712239377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Using.20.60ContDiffOn.60.20for.20partial.20integration/near/431316187\">said</a>:</p>\n<blockquote>\n<p>I hope that within a few weeks, we should have in Mathlib the fact that the Fourier transform maps Schwartz to Schwartz. Then you can deduce your statement from Fourier inversion. My advice would be to keep the <code>sorry</code> in PNT until then. Current PRs in this direction are <a href=\"https://github.com/leanprover-community/mathlib4/pull/11776\">#11776</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/11867\">#11867</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/11868\">#11868</a> by the way :-), with the latter two being mostly straightforward to review.</p>\n</blockquote>\n<p>This is great! And it's good to know - Heather and I were (slowly) moving in that direction (after <a href=\"https://github.com/leanprover-community/mathlib4/pull/9663\">#9663</a>, which turned into <a href=\"https://github.com/leanprover-community/mathlib4/pull/9773\">#9773</a>), so we'll work on something else.</p>\n<p>One nice thing about the PNT+ blueprint approach is that people are encouraged to publicly \"claim\" tasks <em>before</em> they start working on them, to minimize as much possible the possibility of duplicating efforts. I don't suppose that kind of \"claim\" mechanism can be made to work on the larger Mathlib project... (These zulip discussions are the next best thing, it seems?...)</p>",
        "id": 431323625,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712240157
    },
    {
        "content": "<p>Oops, sorry for the lack of coordination! Yes, Zulip is the best we have for this kind of discussion, but it's definitely not perfect.</p>",
        "id": 431329721,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712241760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Using.20.60ContDiffOn.60.20for.20partial.20integration/near/431320820\">said</a>:</p>\n<blockquote>\n<p>I guess I didn't think <a href=\"https://github.com/leanprover-community/mathlib4/pull/9598\">#9598</a> was all that big... :( It's only ~600 lines. It's gotten a number of very useful comments and suggestions already, which have been addressed (to my knowledge), so I'm not sure why it's still sitting... (But of course I know we're all very busy!...) I guess if it sits for another week or so, I'll split off the <code>uIoo</code> bits...</p>\n</blockquote>\n<p>Obviously this isn't always possible, but I think shooting for &lt; 200 lines, and ideally even less, is a good goal in general.</p>",
        "id": 431333259,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712242627
    },
    {
        "content": "<p>Of course no worries at all! I'm just imagining if one could build some big public ledger, a \"blueprint dependency graph\"-type map of Mathlib, somehow organizing what everyone's working on and has laid claim to...</p>",
        "id": 431333412,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712242674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Using.20.60ContDiffOn.60.20for.20partial.20integration/near/431333259\">said</a>:</p>\n<blockquote>\n<p>Obviously this isn't always possible, but I think shooting for &lt; 200 lines, and ideally even less, is a good goal in general.</p>\n</blockquote>\n<p>Ah, that's good to know, thanks. I was imagining that anything &lt;1000 lines is not \"too\" big. But good to know that ~200 is the max target...</p>",
        "id": 431333757,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712242757
    },
    {
        "content": "<p>I think that's what <a href=\"https://github.com/leanprover-community/mathlib4/projects?query=is%3Aopen\">projects</a> could be used for</p>",
        "id": 431334004,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712242808
    },
    {
        "content": "<p>Oh cool!! I didn't know about that. (But it seems it's not used so much in practice...?)</p>",
        "id": 431340151,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712244402
    },
    {
        "content": "<p>Hi, I have very little free time because of my new job. Feel free to unassign any PR from me. I'm sorry for not saying it out loud earlier.</p>",
        "id": 431713407,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1712445915
    }
]