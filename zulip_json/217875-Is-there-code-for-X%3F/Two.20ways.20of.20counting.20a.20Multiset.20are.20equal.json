[
    {
        "content": "<p>Any idea how to prove the following technicality? Unfolding definitions doesn't get me there.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.fst</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Multiset.ToType#doc\">docs#Multiset.ToType</a> is implicitly used in the first expression.</p>",
        "id": 425303571,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709818491
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.fst</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum</span><span class=\"o\">]</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Multiset.map_map</span> <span class=\"n\">f</span> <span class=\"n\">Sigma.fst</span><span class=\"o\">,</span>  <span class=\"n\">Multiset.map_univ_coe</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 425305812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709819264
    },
    {
        "content": "<p>I think there's a lemma missing about <code>Finset.univ (Multiset.toType s)</code></p>",
        "id": 425305836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709819273
    },
    {
        "content": "<p>This also seems to work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.fst</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum</span><span class=\"o\">,</span> <span class=\"n\">Multiset.map_univ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 425308024,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709819957
    },
    {
        "content": "<p>Should the missing lemma be in terms of <code>Finset.univ.sigma (fun _ =&gt; Finset.univ)</code> ?</p>",
        "id": 425308099,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709819976
    },
    {
        "content": "<p>Yes, but you need to launder it through the equiv to <code>Multiset.ToType</code></p>",
        "id": 425309481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709820286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Two.20ways.20of.20counting.20a.20Multiset.20are.20equal/near/425308024\">said</a>:</p>\n<blockquote>\n<p>This also seems to work.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.fst</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum</span><span class=\"o\">,</span> <span class=\"n\">Multiset.map_univ</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks a lot!!<br>\n<a href=\"https://github.com/madvorak/vcsp/blob/74b18912b65b174fb059264c6c7e126186de4218/VCSP/LinearRelaxationAndSFP.lean#L232\">https://github.com/madvorak/vcsp/blob/74b18912b65b174fb059264c6c7e126186de4218/VCSP/LinearRelaxationAndSFP.lean#L232</a></p>",
        "id": 425309865,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709820368
    }
]