[
    {
        "content": "<p>Consider the following lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_inv_of_involutive_of_fixed_point_free</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hφ₁</span> <span class=\"o\">:</span> <span class=\"n\">Function.Involutive</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hφ₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">·⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">↦</span> <span class=\"n\">φ</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">α.Injective</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">g</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">Finite.injective_iff_surjective.mp</span> <span class=\"n\">hα</span> <span class=\"n\">g</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">hφ₁</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"n\">h</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">g₁</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g₁</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g₂</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inv_mul_eq_one</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hφ₂</span> <span class=\"o\">(</span><span class=\"n\">g₁</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">g₂</span><span class=\"o\">)</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">inv_mul_eq_one</span><span class=\"o\">]</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">g₂</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"n\">g₂</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>\n<ol>\n<li>Does this exist in mathlib?</li>\n<li>If not:<br>\n  (a) what should the name be?<br>\n  (b) can we optimize the proof?</li>\n</ol>",
        "id": 424196359,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709287352
    },
    {
        "content": "<p>Oh I never knew that result!</p>",
        "id": 424199074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709288383
    },
    {
        "content": "<p>What's a counterexample in the infinite case?</p>",
        "id": 424199261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709288424
    },
    {
        "content": "<p>Free group on two generators with the obvious involution.</p>",
        "id": 424199544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709288483
    },
    {
        "content": "<p>In the finite case, of course this implies that <code>G</code> is abelian.</p>",
        "id": 424199691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709288512
    },
    {
        "content": "<p>...and has no elements of order 2</p>",
        "id": 424199762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709288524
    },
    {
        "content": "<p>I guess we could call this the \"odd order lemma\" <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 424199826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709288547
    },
    {
        "content": "<p>The proof is already quite short, isn't it? Or do you see a better math proof?</p>",
        "id": 424199954,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709288594
    },
    {
        "content": "<p>No, I don't. But I feel like this might have a 5-line proof instead of a 10-line proof.</p>",
        "id": 424200223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709288691
    },
    {
        "content": "<p><a href=\"https://groupprops.subwiki.org/wiki/Fixed-point-free_involution_on_finite_group_is_inverse_map\">Here</a> they split out a lemma (which is also hard to name).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">injective_commutator_of_fixed_point_free</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hφ₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">φ</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_inv_eq_iff_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">eq_inv_mul_iff_mul_eq</span><span class=\"o\">,</span> <span class=\"n\">inv_inv</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_inv</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">map_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">inv_mul_eq_one.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hφ₂</span> <span class=\"n\">_</span> <span class=\"n\">h.symm</span>\n</code></pre></div>",
        "id": 424221305,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709294818
    },
    {
        "content": "<p>And then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_inv_of_involutive_of_fixed_point_free</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hφ₁</span> <span class=\"o\">:</span> <span class=\"n\">Function.Involutive</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hφ₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">·⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">g</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Finite.injective_iff_surjective.mp</span>\n    <span class=\"o\">(</span><span class=\"n\">injective_commutator_of_fixed_point_free</span> <span class=\"n\">φ</span> <span class=\"n\">hφ₂</span><span class=\"o\">)</span> <span class=\"n\">g</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">map_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_rev</span><span class=\"o\">,</span> <span class=\"n\">inv_inv</span><span class=\"o\">,</span> <span class=\"n\">hφ₁</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 424221785,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709294952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/fixed.20point.20free.20involutive.20automorphisms.20of.20groups.20are.20inv/near/424199826\">said</a>:</p>\n<blockquote>\n<p>I guess we could call this the \"odd order lemma\" <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>\n</blockquote>\n<p>The \"odd order\" part can be stronger, as discussed <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20How.20to.20construct.20a.20Finset.20from.20a.20Set/near/423984848\">here</a></p>",
        "id": 424231032,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709298264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> I guess that split makes sense. Do you know if there are more uses for the intermediate result?</p>",
        "id": 424246374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709302453
    },
    {
        "content": "<p>Concerning the names... I'm not happy with \"fixed point free\" because <code>1</code> is a fixed point. But I don't know a better version.</p>",
        "id": 424246452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709302476
    },
    {
        "content": "<p>Otoh, it seems that the groupprops wiki also uses that terminology, so maybe it isn't very evil.</p>",
        "id": 424246856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709302570
    },
    {
        "content": "<p>Ooh, that wiki also lists another application of the intermediate result. That's good.</p>",
        "id": 424247303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709302712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/fixed.20point.20free.20involutive.20automorphisms.20of.20groups.20are.20inv/near/424246374\">said</a>:</p>\n<blockquote>\n<p>Do you know if there are more uses for the intermediate result?</p>\n</blockquote>\n<p>One other application is linked on its proof page, <a href=\"https://groupprops.subwiki.org/wiki/Commutator_map_with_fixed-point-free_automorphism_is_injective\">here</a>.</p>\n<p>Yeah, \"phi is fixed-point free\" or \"phi is a fixed-point-free homomorphism\" seem to be standard for group endomorphisms.</p>",
        "id": 424247319,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709302717
    },
    {
        "content": "<p>Do you understand why they call it the \"commutator map\"?</p>",
        "id": 424247616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709302806
    },
    {
        "content": "<p>No! I can't make that make sense.</p>",
        "id": 424247680,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709302828
    },
    {
        "content": "<p>It's conjugating <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span> with left multiplication by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, and evaluating the result at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 424247838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709302870
    },
    {
        "content": "<p>Not sure that is helpful...</p>",
        "id": 424247867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709302879
    },
    {
        "content": "<p>There is a lot of theory of these fixed point free automorphisms (I think Gorenstein's book on finite groups might have a whole chapter about them, but I don't have a copy handy right now). But my memory is that the standard route to get the basic results is to first show injectivity/surjectively of <code>g⁻¹ * φ g</code> (or <code>φ g * g⁻¹</code>). From here, if <code>φ ^ k = 1</code>, then <code>g * φ g * ... * φ^(k-1) g = 1</code> (or <code>φ^(k-1) g * ... * φ g * g  = 1</code>). In particular, if <code>φ ^ 2 = 1</code>, then <code>φ g = g⁻¹</code>, so <code>G</code> is abelian. Another fun result is that a fixed point free automorphism will fix a unique Sylow <code>p</code>-subgroup for each prime <code>p</code>.</p>",
        "id": 424291475,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1709313119
    },
    {
        "content": "<p>Are they studied in their own right or are they useful for e.g. classification of finite simple groups or whatever?</p>",
        "id": 424291731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709313184
    },
    {
        "content": "<p>Certainly the latter. Maybe also the former <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 424291865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709313229
    },
    {
        "content": "<p>Thompson's thesis proved that the existence of a fixed point free automorphism of prime order implies that the group is nilpotent.</p>",
        "id": 424292082,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1709313299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> So certainly it would make sense to define a predicate <code>MonoidHom.FixedPointFree</code>, if there are more than 5 lemmas about the concept.</p>",
        "id": 424292579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709313477
    },
    {
        "content": "<p>Do you have a good name for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>↦</mo><mi>ϕ</mi><mi>g</mi><mo>⋅</mo><msup><mi>g</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">g \\mapsto \\phi g \\cdot g^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7054em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 424292655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709313492
    },
    {
        "content": "<p>No I don't, unfortunately. (And my preference would actually be <code>g⁻¹ * φ g</code> so that you get <code>g * φ g * ... * φ^(k-1) g = 1</code>)</p>",
        "id": 424293674,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1709313827
    },
    {
        "content": "<p>Fine with me.</p>",
        "id": 424293783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709313848
    },
    {
        "content": "<p>Do you think <code>commutatorMap</code> from groupprops is a sensible name? I still don't really understand that name.</p>",
        "id": 424293877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709313876
    },
    {
        "content": "<p>It seems fine. I think the idea is that the usual commutator <code>g⁻¹ * h⁻¹ * g * h</code> is secretly <code>g⁻¹ * φ g</code> for <code>φ</code> being conjugation by <code>h</code>. So if your fixed point free automorphism is coming from a Frobenius semidirect product, then it actually is a commutator map.</p>",
        "id": 424294192,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1709313988
    },
    {
        "content": "<p>Aha, that makes sense.</p>",
        "id": 424294403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709314075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/fixed.20point.20free.20involutive.20automorphisms.20of.20groups.20are.20inv/near/424246452\">said</a>:</p>\n<blockquote>\n<p>Concerning the names... I'm not happy with \"fixed point free\" because <code>1</code> is a fixed point. But I don't know a better version.</p>\n</blockquote>\n<p>What about “torsion-free groups” or “torsion-free modules”?</p>",
        "id": 424302447,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709317203
    },
    {
        "content": "<p>Fixed-point-free is the standard name (e.g., <a href=\"https://www.jstor.org/stable/2372721\">https://www.jstor.org/stable/2372721</a>)</p>",
        "id": 424302636,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1709317273
    },
    {
        "content": "<p>Yes, it's one more example of -free names where there are (obvious) exceptions.</p>",
        "id": 424302714,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709317315
    },
    {
        "content": "<p>In Mathlib we already have <code>Disjoint</code> subspaces sharing a point.</p>",
        "id": 424302839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709317364
    },
    {
        "content": "<p>Sure, but those are of course disjoint in the lattice-theoretic sense.</p>",
        "id": 424310991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709320556
    },
    {
        "content": "<p>Anyway, <code>FixedPointFree</code> is totally fine.</p>",
        "id": 424311062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709320576
    },
    {
        "content": "<p>... and \"torsion-free\" has another meaning (no nontrivial element of finite order).</p>",
        "id": 424314867,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709322233
    },
    {
        "content": "<p>It's the “same” meaning : no <em>nontrivial</em> stuff such that.</p>",
        "id": 424318380,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709323666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> has marked this topic as resolved.</p>",
        "id": 424439016,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709407757
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20fixed.20point.20free.20involutive.20automorphisms.20of.20groups.20are.2E.2E.2E\">#Is there code for X? &gt; ✔ fixed point free involutive automorphisms of groups are...</a> by <span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span>.</p>",
        "id": 424439019,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709407758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> has marked this topic as unresolved.</p>",
        "id": 424441330,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709409553
    }
]