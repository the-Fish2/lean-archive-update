[
    {
        "content": "<p>Is there any reason why there are no symm / trans lemmas for <code>PartialEquiv.EqOnSource</code> and <code>PartialHomeomorph.EqOnSource</code>? I would have to rely on <code>Setoid.symm</code> and <code>Setoid.trans</code> from their setoid instances, but that's not obvious at all. It would be nice to be able to write <code>h.symm</code> or <code>h.trans h'</code> where <code>h : e ≈ e'</code> and <code>h' : e' ≈ e''</code>.</p>\n<p>My second question is why dot notation doesn't work in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.PartialEquiv</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">PartialEquiv.EqOnSource.symm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">PartialEquiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">≈</span> <span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e'</span> <span class=\"bp\">≈</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Setoid.symm</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">PartialEquiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">≈</span> <span class=\"n\">e'</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">h.symm</span> <span class=\"c1\">-- invalid field notation, function 'PartialEquiv.EqOnSource.symm' does not have argument with type (PartialEquiv.EqOnSource ...) that can be used, it must be explicit or implicit with a unique name</span>\n</code></pre></div>\n<p>but the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">PartialEquiv.EqOnSource.symm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">PartialEquiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">PartialEquiv.EqOnSource</span> <span class=\"n\">e</span> <span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e'</span> <span class=\"bp\">≈</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Setoid.symm</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">PartialEquiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">≈</span> <span class=\"n\">e'</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">h.symm</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 415956865,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1705469762
    },
    {
        "content": "<p>It used to work with dot notation in Lean 3 (at least, community edition).</p>",
        "id": 415957381,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705470142
    },
    {
        "content": "<p>While porting, we tried not to change API.</p>",
        "id": 415957406,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705470167
    },
    {
        "content": "<p>Did <code>.symm</code> and <code>.trans</code> work automatically for any instance of <code>Setoid</code>?</p>",
        "id": 415957493,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1705470224
    },
    {
        "content": "<p>The dot notation doesn't work because Lean looks for an argument of type <code>PartialEquiv.EqOnSource</code> without unfolding any definitions.</p>",
        "id": 415957563,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705470258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin (尹維晨)</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/EqOnSource.2Esymm.20.2F.20.2Etrans/near/415957493\">said</a>:</p>\n<blockquote>\n<p>Did <code>.symm</code> and <code>.trans</code> work automatically for any instance of <code>Setoid</code>?</p>\n</blockquote>\n<p>Not tested and I doubt that: the type of <code>e ≈ e'</code> is not <code>Setoid</code>. One possible solution is to drop the instances and add notations.</p>",
        "id": 415957682,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705470342
    },
    {
        "content": "<p>But this should be discussed with other active users of <code>PartialEquiv</code>s/<code>PartialHomeomorph</code>s before you start working on this.</p>",
        "id": 415957754,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705470378
    },
    {
        "content": "<p>This kind of instance/notation refactor is currently beyond me...</p>",
        "id": 415957821,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1705470439
    }
]