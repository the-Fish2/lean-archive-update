[
    {
        "content": "<p>Do we have this?  My guess is that it exists in some quite abstract form, but I don't know where:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"sd\">/-- A complex derivative, treated as `ℂ →L[ℝ] → ℂ` -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Complex.real_hasFDerivAt</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasFDerivAt</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ContinuousLinearMap.lsmul</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 421937025,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708116953
    },
    {
        "content": "<p>It's roughly</p>\n<ol>\n<li><code>HasDerivAt.hasFDerivAt</code></li>\n<li>Dropping a CLM over <code>ℂ</code> to one over <code>ℝ</code>, as these are an appropriate tower.</li>\n<li>A bit of commutativity at the end to swap left and right.</li>\n</ol>\n<p>(2) is the only bit I don't know how to do idiomatically.  (Unless the whole thing already exists.)</p>",
        "id": 421937387,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708117122
    },
    {
        "content": "<p>(2) is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.restrictScalars#doc\">docs#ContinuousLinearMap.restrictScalars</a></p>",
        "id": 421938049,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708117396
    },
    {
        "content": "<p>Great, thank you!</p>",
        "id": 421938075,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708117407
    },
    {
        "content": "<p>But notice we also have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasFDerivAt.restrictScalars#doc\">docs#HasFDerivAt.restrictScalars</a></p>",
        "id": 421938134,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708117436
    },
    {
        "content": "<p>Even better, that's everything but the (3) bit.</p>",
        "id": 421938246,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708117487
    },
    {
        "content": "<p>Ah, no, that's also just (2).</p>",
        "id": 421938282,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708117510
    },
    {
        "content": "<p>But in any case I'm set.</p>",
        "id": 421938292,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708117516
    },
    {
        "content": "<p>This works as a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"sd\">/-- A complex derivative, treated as `ℂ →L[ℝ] → ℂ` -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Complex.real_hasFDerivAt</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasFDerivAt</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ContinuousLinearMap.lsmul</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h.hasFDerivAt.restrictScalars</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 421938998,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708117838
    },
    {
        "content": "<p>Ha, nice.  I was stuck trying to simplify things at that third line, and was blocked because (1) <code>ContinuousLinearMap.restrictScalars_apply</code> doesn't exist and (2) <code>ContinuousLinearMap.coe_restrictScalars</code> wasn't firing.</p>",
        "id": 421939135,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708117916
    },
    {
        "content": "<p>Excellent, and now I can do things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A complex derivative, treated as `ℂ →L[ℝ] → ℂ` -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Complex.real_hasFDerivAt</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasFDerivAt</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ContinuousLinearMap.lsmul</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h.hasFDerivAt.restrictScalars</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"sd\">/-- The derivative of `.im` -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">hasFDerivAt_im</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">HasFDerivAt</span> <span class=\"n\">Complex.im</span> <span class=\"n\">imCLM</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Complex.im</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"n\">imCLM</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Complex.imCLM_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ContinuousLinearMap.hasFDerivAt</span>\n\n<span class=\"sd\">/-- The derivative of `arg`, via `log` -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">hasFDerivAt_arg</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">slitPlane</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasFDerivAt</span> <span class=\"n\">arg</span> <span class=\"o\">(</span><span class=\"n\">imCLM</span> <span class=\"bp\">∘</span><span class=\"n\">L</span> <span class=\"n\">ContinuousLinearMap.lsmul</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">arg</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Complex.log_im</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">HasFDerivAt.comp</span> <span class=\"n\">_</span> <span class=\"n\">hasDerivAt_im</span> <span class=\"o\">(</span><span class=\"n\">Complex.real_hasFDerivAt</span> <span class=\"o\">(</span><span class=\"n\">Complex.hasDerivAt_log</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 421939375,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708118027
    },
    {
        "content": "<p>(Sorry, not a working example because of opens. :/)</p>",
        "id": 421939454,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708118056
    },
    {
        "content": "<p>I am using monotonicity of <code>arg</code> to show a region is star-shaped.</p>",
        "id": 421939522,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708118088
    }
]