[
    {
        "content": "<p>This is a somewhat trivial thing, but would it make sense to have an analogue of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.toFinite#doc\">docs#Set.toFinite</a> for non-emptiness, i.e.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.toNonempty</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set.Nonempty</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty_coe_sort.mp</span> <span class=\"n\">hs</span>\n</code></pre></div>\n<p>so that one can use <code>s.toNonempty</code> instead of <code>nonempty_coe_sort.mp (s := s) (by infer_instance)</code>? With the current API it seems unnecessarily clunky to be able to actually establish a <code>Set.Nonempty</code> proposition.</p>",
        "id": 410745090,
        "sender_full_name": "Terence Tao",
        "timestamp": 1704134874
    },
    {
        "content": "<p>Sounds good. What do you think of calling it <code>Set.of_nonempty_coe</code>?</p>",
        "id": 410745234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704135006
    },
    {
        "content": "<p>Would that mean that <code>Set.toFinite</code> should be similarly aliased to <code>Set.of_finite_coe</code>?  I'm fine with either (or both), but I suppose we should try to be consistent with naming conventions if there is no pressing reason to deviate from them.</p>",
        "id": 410745308,
        "sender_full_name": "Terence Tao",
        "timestamp": 1704135117
    },
    {
        "content": "<p>I think of <code>Set.toFinite</code> as a pretty poor name. Certainly, I can't guess it every time I need it! I think <code>Set.Finite.of_subtype</code> or <code>Set.Finite.of_coe</code> or <code>Set.Finite.of_coe_sort</code> would be better.</p>",
        "id": 410745453,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704135248
    },
    {
        "content": "<p>Similarly one could have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Set.of_infinite_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">:</span> <span class=\"n\">Infinite</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set.Infinite</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">infinite_coe_iff.mp</span> <span class=\"n\">hs</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.of_subsingleton_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set.Subsingleton</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">subsingleton_coe</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hs</span>\n</code></pre></div>\n<p>On the other hand, we already have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.to_countable#doc\">docs#Set.to_countable</a>.  It seems that the naming conventions here are not uniform.</p>",
        "id": 410745646,
        "sender_full_name": "Terence Tao",
        "timestamp": 1704135473
    },
    {
        "content": "<p>Yeah, I am happy to open a PR to clean this up. I've been annoyed by it.</p>",
        "id": 410745943,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704135722
    },
    {
        "content": "<p>Would you still keep <code>Set.toFinite</code> and <code>Set.to_countable</code> as aliases for (I presume) <code>Set.of_finite_coe</code> and <code>Set.of_countable_coe</code>?  Certainly <code>Set.toFinite</code> is used extensively in PFR for instance.</p>",
        "id": 410746046,
        "sender_full_name": "Terence Tao",
        "timestamp": 1704135778
    },
    {
        "content": "<p>As deprecated aliases, likely.</p>",
        "id": 410746082,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704135800
    },
    {
        "content": "<p>The point of a name like <code>Set.Finite.of_coe</code> is that you can write <code>.of_coe</code> wherever Lean expects a term of type <code>Set.Finite _</code>.</p>",
        "id": 410746158,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704135843
    },
    {
        "content": "<p>But then conversely if one only has a name for the set <code>s</code> and not the <code>Finite</code> instance, how do you use dot notation to prove <code>Set.Finite s</code> using the name <code>Set.Finite.of_coe</code>?  I find <code>s.toFinite</code> a convenient notation.</p>",
        "id": 410746375,
        "sender_full_name": "Terence Tao",
        "timestamp": 1704136018
    },
    {
        "content": "<p>What would <code>s.toFinite</code> do if you didn't have the <code>Finite s</code> instance around? I would expect that to error.</p>",
        "id": 410746418,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704136079
    },
    {
        "content": "<p>\"failed to synthesize instance  Finite ↑s\".</p>",
        "id": 410746511,
        "sender_full_name": "Terence Tao",
        "timestamp": 1704136152
    },
    {
        "content": "<p>I use <code>s.toFinite.toFinset</code> a lot to create <code>Finset</code> versions of a <code>Finite</code> set.  Not sure how else to do it actually.</p>",
        "id": 410746644,
        "sender_full_name": "Terence Tao",
        "timestamp": 1704136297
    },
    {
        "content": "<p>Oh you can just use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.toFinset#doc\">docs#Set.toFinset</a></p>",
        "id": 410746701,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704136331
    },
    {
        "content": "<p>A neat alternative is the <code>lift</code> tactic. If <code>s : Set α</code> and <code>hs : s.Finite</code>, then <code>lift s to Finset α using hs</code> will replace <code>s : Set α</code> by <code>s : Finset α</code> everywhere. It's magic.</p>",
        "id": 410746729,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704136410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Set.2EtoNonempty/near/410746158\">said</a>:</p>\n<blockquote>\n<p>The point of a name like <code>Set.Finite.of_coe</code> is that you can write <code>.of_coe</code> wherever Lean expects a term of type <code>Set.Finite _</code>.</p>\n</blockquote>\n<p>I feel like dot notation is frequently used for this where expected types aren't available</p>",
        "id": 410747198,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704136913
    },
    {
        "content": "<p>There's no harm having multiple aliases though (or maybe there are simp lemmas where this matters...)</p>",
        "id": 410747261,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704136955
    },
    {
        "content": "<p>I'm not sure I agree that Set.toFinite should be fundamentally renamed, but it should be Set.to_finite per the convention, right?</p>",
        "id": 410747585,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704137308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Set.2EtoNonempty/near/410746701\">said</a>:</p>\n<blockquote>\n<p>Oh you can just use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.toFinset#doc\">docs#Set.toFinset</a></p>\n</blockquote>\n<p><code>Set.toFinset</code> requires a <code>Fintype</code> instance, which is not automatically generated from a <code>Finite</code> instance (a decidability issue perhaps?).</p>",
        "id": 410747699,
        "sender_full_name": "Terence Tao",
        "timestamp": 1704137426
    },
    {
        "content": "<p>You can use <code>classical</code> to fix this.</p>",
        "id": 410747716,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704137451
    },
    {
        "content": "<p>We don't have <code>Finite α → Fintype α</code> as an instance in <code>classic</code> to avoid diamonds.</p>",
        "id": 410747738,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704137487
    },
    {
        "content": "<p>Yes but <code>Fintype α → Fintype s</code> becomes an instance.</p>",
        "id": 410747801,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704137538
    },
    {
        "content": "<p>One trick is <code>have := Fintype.ofFinite</code> to force the classical instances that <code>s.toFinite.toFinset</code> gives. I'm sure this causes issues places, but you can always be more precise with the <code>have</code> by giving an argument</p>",
        "id": 410747917,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704137668
    },
    {
        "content": "<p>Currently we have the following converters regarding finite sets:</p>\n<ul>\n<li><code>Set.toFinite</code> : converts <code>Finite</code> instance to <code>Set.Finite</code> proposition</li>\n<li><code>Finset.finite_toSet</code>: converts a <code>Finset</code> type to a <code>Set.Finite</code> proposition</li>\n<li><code>Fintype.finite</code>: converts a <code>Fintype</code> instance to a <code>Finite</code> instance</li>\n<li><code>Set.Finite.to_subtype</code>: converts <code>Set.Finite</code> proposition to a <code>Finite</code> instance</li>\n<li><code>Finite.of_fintype</code>: Instance inference from <code>Fintype</code> to <code>Finite</code> </li>\n<li><code>Set.Finite.fintype</code>: converts <code>Set.Finite</code> proposition to a <code>Fintype</code> instance</li>\n<li><code>Fintype.ofFinite</code>: converts a <code>Finite</code> instance to a <code>Fintype</code> instance</li>\n<li><code>Fintype.ofFinset</code>: converts a <code>Finset</code> type to a <code>Fintype</code> instance</li>\n<li><code>Set.Finite.toFinset</code>: converts a <code>Set.Finite</code> proposition to a <code>Finset</code> type</li>\n</ul>\n<p>I could imagine that there might be a more logical naming system here <del>(in particular we might also want to have a wrapper for <code>Set.finite_coe_iff.mpr</code>)</del>.</p>",
        "id": 410751265,
        "sender_full_name": "Terence Tao",
        "timestamp": 1704140021
    },
    {
        "content": "<p>Isn't <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite.to_subtype#doc\">docs#Set.Finite.to_subtype</a> a wrapper for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.finite_coe_iff#doc\">docs#Set.finite_coe_iff</a> ?</p>",
        "id": 410758501,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704143945
    }
]