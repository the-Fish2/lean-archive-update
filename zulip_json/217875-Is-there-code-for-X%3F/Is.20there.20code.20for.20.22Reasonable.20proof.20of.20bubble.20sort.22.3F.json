[
    {
        "content": "<p>Something like this , it is only pseudocode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"c1\">-- 冒泡排序</span>\n<span class=\"kd\">def</span> <span class=\"n\">bubbleSort</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">fix</span> <span class=\"n\">swapAdjacent</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"o\">::</span> <span class=\"n\">y2</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">y1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">y2</span> <span class=\"k\">then</span> <span class=\"n\">y2</span> <span class=\"o\">::</span> <span class=\"n\">swapAdjacent</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n                        <span class=\"k\">else</span> <span class=\"n\">y1</span> <span class=\"o\">::</span> <span class=\"n\">swapAdjacent</span> <span class=\"o\">(</span><span class=\"n\">y2</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">sortedRest</span> <span class=\"o\">:=</span> <span class=\"n\">bubbleSort</span> <span class=\"n\">xs</span> <span class=\"k\">in</span>\n  <span class=\"n\">swapAdjacent</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">sortedRest</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- 冒泡排序的合理性证明</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bubbleSort_correct</span> <span class=\"o\">(</span><span class=\"n\">lst</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">bubbleSort</span> <span class=\"n\">lst</span> <span class=\"bp\">=</span> <span class=\"n\">lst.sort</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- 使用列表长度的归纳法证明</span>\n  <span class=\"n\">induction</span> <span class=\"n\">lst</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- 基础情况：空列表已经是排好序的</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- 归纳情况</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bubbleSort</span><span class=\"o\">,</span> <span class=\"n\">IH</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- 需要证明的目标是 swapAdjacent (x :: bubbleSort xs) = insert x (bubbleSort xs).sort (≤)</span>\n    <span class=\"c1\">-- 先证明一个引理：swapAdjacent 返回的列表最后一个元素是最大的元素</span>\n    <span class=\"k\">have</span> <span class=\"n\">max_at_last</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">ys</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">swapAdjacent</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cons_ne_nil</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ys</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">induction</span> <span class=\"n\">ys</span> <span class=\"k\">with</span> <span class=\"n\">y1</span> <span class=\"n\">ys</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">ys</span> <span class=\"k\">with</span> <span class=\"n\">y2</span> <span class=\"n\">ys</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">swapAdjacent</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">y1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">y2</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">swapAdjacent</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">],</span>\n            <span class=\"c1\">-- 使用 IH 来进行归纳推理，得到 ys 的最大元素将被放在列表最后一个位置上</span>\n            <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">swapAdjacent</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"o\">::</span> <span class=\"n\">y2</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">cons_ne_nil</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n              <span class=\"o\">:=</span> <span class=\"n\">max_at_last</span> <span class=\"o\">(</span><span class=\"n\">y1</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cons_ne_nil</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n            <span class=\"n\">rw</span> <span class=\"n\">last_cons</span> <span class=\"o\">(</span><span class=\"n\">cons_ne_nil</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h''</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">last_cons</span> <span class=\"o\">(</span><span class=\"n\">cons_ne_nil</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n            <span class=\"n\">rwa</span> <span class=\"n\">last_cons</span> <span class=\"o\">(</span><span class=\"n\">cons_ne_nil</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">swapAdjacent</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">],</span>\n            <span class=\"n\">cases</span> <span class=\"n\">ys</span> <span class=\"k\">with</span> <span class=\"n\">y3</span> <span class=\"n\">ys</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">insert</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n            <span class=\"o\">{</span> <span class=\"c1\">-- 此时 y1 ≤ y2，因此继续使用 IH 进行归纳推理</span>\n              <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">swapAdjacent</span> <span class=\"o\">(</span><span class=\"n\">y2</span> <span class=\"o\">::</span> <span class=\"n\">y3</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">cons_ne_nil</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n                <span class=\"o\">:=</span> <span class=\"n\">max_at_last</span> <span class=\"o\">(</span><span class=\"n\">y2</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cons_ne_nil</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n              <span class=\"n\">rw</span> <span class=\"n\">last_cons</span> <span class=\"o\">(</span><span class=\"n\">cons_ne_nil</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h''</span><span class=\"o\">,</span>\n              <span class=\"n\">cases</span> <span class=\"n\">h''</span> <span class=\"k\">with</span> <span class=\"n\">h''</span> <span class=\"n\">h'''</span><span class=\"o\">,</span>\n              <span class=\"c1\">-- 根据归纳假设，swapAdjacent (y2 :: ys) = (y2 :: ys).sort (≤)</span>\n              <span class=\"n\">rw</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">y2</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">),</span>\n              <span class=\"c1\">-- 使用列表的反转引理将等式转化为与 insert 一致的形式</span>\n              <span class=\"n\">rw</span> <span class=\"n\">reverse_reverse</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y2</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)),</span>\n              <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">reverse_cons</span> <span class=\"n\">h'''</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">reverse_cons</span> <span class=\"n\">h'''</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"n\">insert_eq_insert_sorted</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"n\">reverse_cons</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"n\">reverse_cons</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"c1\">-- 使用之前证明的引理，将 swapAdjacent (x :: bubbleSort xs) 的最后一个元素替换为 x</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">swapAdjacent</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bubbleSort</span> <span class=\"n\">xs</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">cons_ne_nil</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">last_cons</span> <span class=\"o\">(</span><span class=\"n\">cons_ne_nil</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"n\">max_at_last</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">bubbleSort</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cons_ne_nil</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"c1\">-- 由于交换相邻元素的操作只改变了最后一个元素的位置，因此 swapAdjacent 产生的列表与 insert 的结果相同</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">insert_eq_insert_sorted</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">reverse_cons</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- 继续使用 IH 进行归纳推理</span>\n    <span class=\"n\">rw</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 409532444,
        "sender_full_name": "chenjulang",
        "timestamp": 1703228141
    },
    {
        "content": "<p>And all the algorithm theorems in the book  “Introduction to Algorithms” ， <br>\nCan we find the proofs in LEAN?</p>",
        "id": 409533353,
        "sender_full_name": "chenjulang",
        "timestamp": 1703228664
    },
    {
        "content": "<p>I would guess that you would have a much easier time proving that the result of your algorithm is sorted, rather then directly proving its output is equal to the output of a different sorting algorithm.</p>",
        "id": 409534574,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1703229441
    },
    {
        "content": "<p>Also, this looks like Lean 3 code! You really should move to Lean 4 if at all possible.</p>",
        "id": 409534616,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1703229475
    }
]