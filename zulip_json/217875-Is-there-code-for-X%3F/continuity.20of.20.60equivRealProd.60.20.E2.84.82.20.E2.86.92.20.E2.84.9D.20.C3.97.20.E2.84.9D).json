[
    {
        "content": "<p>Any hints here please?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extracted_1</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">Complex.equivRealProd</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- continuity fails</span>\n<span class=\"c1\">-- exact? fails</span>\n<span class=\"c1\">-- simp? fails</span>\n<span class=\"c1\">-- apply? junk</span>\n<span class=\"c1\">-- rw? junk</span>\n</code></pre></div>\n<p>What tactic should I have used on this? Thanks!</p>",
        "id": 420111734,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707245083
    },
    {
        "content": "<p>That would be <code>Complex.equivRealProdCLM.continuous</code> I think ?</p>",
        "id": 420112909,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707245415
    },
    {
        "content": "<p>I don’t think this is in scope of any tactic currently (not saying this is a good thing!)</p>",
        "id": 420113684,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707245651
    },
    {
        "content": "<p>I think that should probably be extracted as a lemma</p>",
        "id": 420113778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707245684
    },
    {
        "content": "<p>I'm working on a fixed branch; <code>equivRealProdCLM</code> was added 2 weeks ago, so I didn't have it in my old branch. Maybe <code>continuity</code> would've caught it? Thanks!</p>",
        "id": 420113955,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707245744
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.lipschitz_equivRealProd#doc\">docs#Complex.lipschitz_equivRealProd</a>, so you can also do <code>Complex.lipschitz_equivRealProd.continuous</code>. Maybe that’s cleaner and suggests we don’t need the <code>Continuous</code> lemma itself ?</p>",
        "id": 420114325,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707245880
    },
    {
        "content": "<p>By the way, may I ask why you need this ? I mean if mathlib were perfect could you just apply everything you want to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> directly, or is there a real blocker somewhere ? Is it because you want to have the product norm ?</p>",
        "id": 420115025,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707246114
    },
    {
        "content": "<p>Relatedly, do we have the isometry with 2D euclidean space?</p>",
        "id": 420115493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707246290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/continuity.20of.20.60equivRealProd.60.20.E2.84.82.20.E2.86.92.20.E2.84.9D.20.C3.97.20.E2.84.9D.29/near/420113955\">said</a>:</p>\n<blockquote>\n<p>I'm working on a fixed branch; <code>equivRealProdCLM</code> was added 2 weeks ago, so I didn't have it in my old branch. Maybe <code>continuity</code> would've caught it? Thanks!</p>\n</blockquote>\n<p>No it wasn't. That's been around a long time. Two weeks ago Yury renamed it from <code>Complex.equivRealProdClm</code>, so you should have that.</p>",
        "id": 420133751,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707252824
    },
    {
        "content": "<p>Got it, thanks; I have the old name then.</p>",
        "id": 420146688,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707258367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/continuity.20of.20.60equivRealProd.60.20.E2.84.82.20.E2.86.92.20.E2.84.9D.20.C3.97.20.E2.84.9D.29/near/420115025\">said</a>:</p>\n<blockquote>\n<p>By the way, may I ask why you need this ? I mean if mathlib were perfect could you just apply everything you want to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> directly, or is there a real blocker somewhere ? Is it because you want to have the product norm ?</p>\n</blockquote>\n<p>I'm dealing a lot with rectangles, so I need things like <code>s ×ℂ t</code>... See, e.g., <a href=\"https://github.com/leanprover-community/mathlib4/pull/9598\">#9598</a> (and the PNT+ project is full of things like this...)</p>",
        "id": 420146830,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707258460
    }
]