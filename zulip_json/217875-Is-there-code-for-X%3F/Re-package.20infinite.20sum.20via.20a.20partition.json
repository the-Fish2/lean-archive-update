[
    {
        "content": "<p>I am looking for something like (possibly with a more general target type than <code>ℂ</code>, of course)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">HasSum.tsum_fibers</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">HasSum</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasSum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">↦</span> <span class=\"n\">tsum</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Set.restrict</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">})</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but I'm unable to find anything close.</p>\n<p>Any suggestions regarding where to look?</p>\n<p>The finite version is there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Finset.sum.sum_fibers</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">s.image</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.sum</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sum_fiberwise_of_maps_to</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Maybe one can use some filter magic to go from this to infinite sums, but I'm not an adept of the necessary yoga...</p>",
        "id": 410479879,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703885030
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasSum.sigma#doc\">docs#HasSum.sigma</a> ?</p>",
        "id": 410480454,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703885513
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasSum.prod_fiberwise#doc\">docs#HasSum.prod_fiberwise</a> (which comes right below it). I'll check it out. Thanks! <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span></p>",
        "id": 410480692,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703885708
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 410480805,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703885795
    },
    {
        "content": "<p>Maybe you want to combine that with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.sigmaFiberEquiv#doc\">docs#Equiv.sigmaFiberEquiv</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.hasSum_iff#doc\">docs#Equiv.hasSum_iff</a></p>",
        "id": 410483142,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703887747
    },
    {
        "content": "<p>OK:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">HasSum.tsum_fibers</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">HasSum</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasSum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">↦</span> <span class=\"n\">tsum</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Set.restrict</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">})</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">HasSum.sigma</span> <span class=\"o\">((</span><span class=\"n\">Equiv.hasSum_iff</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Equiv.sigmaFiberEquiv</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Summable.hasSum_iff</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Summable.subtype</span> <span class=\"n\">hf.summable</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Thanks everybody!</p>",
        "id": 410483825,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703888358
    }
]