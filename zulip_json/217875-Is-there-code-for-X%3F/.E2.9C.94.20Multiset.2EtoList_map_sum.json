[
    {
        "content": "<p>Possible <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> here, but having a proof would comfort me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Multiset.toList_map_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">s.toList.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">Multiset.induction</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Multiset.map_cons</span><span class=\"o\">,</span> <span class=\"n\">Multiset.sum_cons</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 424394765,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709371119
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Multiset</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sum_coe</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"n\">l.sum</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Multiset.toList_map_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">s.toList.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sum_coe</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">coe_map</span><span class=\"o\">,</span> <span class=\"n\">coe_toList</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- TODO: `coe_map` is the wrong way around and missing `norm_cast`</span>\n</code></pre></div>",
        "id": 424406791,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709381762
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11099\">#11099</a></p>",
        "id": 424407781,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709382811
    },
    {
        "content": "<p>Thank you!!<br>\n<a href=\"https://github.com/madvorak/vcsp/blob/55a0fe6235ed6dd361d9e622f884ce5372f15697/VCSP/LinearRelaxationAndSFP.lean#L5\">https://github.com/madvorak/vcsp/blob/55a0fe6235ed6dd361d9e622f884ce5372f15697/VCSP/LinearRelaxationAndSFP.lean#L5</a></p>",
        "id": 424408026,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709382988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 424410570,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709385447
    },
    {
        "content": "<p>PS:<br>\nCan <code>induction' s using Multiset.induction</code> be written without the <code>induction'</code> that has the apostrophe at the end?</p>",
        "id": 438759205,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715764449
    },
    {
        "content": "<p><code>induction s using Multiset.induction</code> should work</p>",
        "id": 438759511,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715764551
    },
    {
        "content": "<p>Yes! Thanks!</p>\n<p>PS: I am just a bit surprised (and a tiny bit uncomfortable) that I have to write <code>@cons a m ih</code> in the second branch. Shouldn't <code>cons a m ih</code> work? Is there a reason why the declaration</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">recursor</span> <span class=\"mi\">5</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">induction</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span><span class=\"bp\">ₘ</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">induction'</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">empty</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">cons</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>uses those <code>⦃ ... ⦄</code> binders?</p>",
        "id": 438760190,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715764796
    },
    {
        "content": "<p>I think just because it didn't matter in lean 3 and we haven't gotten around to cleaning it up</p>",
        "id": 438761185,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715765146
    },
    {
        "content": "<p>I agree all those should be explicit unless we get support for <code>{}</code> in <code>induction with</code></p>",
        "id": 438761325,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715765190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Multiset.2EtoList_map_sum/near/438760190\">said</a>:</p>\n<blockquote>\n<p>I have to write <code>@cons a m ih</code> in the second branch. </p>\n</blockquote>\n<p>Can you show what you mean?</p>",
        "id": 438761838,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715765378
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">Multiset.induction</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 438762175,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715765498
    },
    {
        "content": "<p>(Please don't suggest \"don't use <code>with</code>\")</p>",
        "id": 438762233,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715765519
    },
    {
        "content": "<p>I would expect</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">Multiset.induction</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>to work</p>",
        "id": 438762543,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715765619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Multiset.2EtoList_map_sum/near/438761325\">said</a>:</p>\n<blockquote>\n<p>I agree all those should be explicit unless we get support for <code>{}</code> in <code>induction with</code></p>\n</blockquote>\n<p>Indeed</p>",
        "id": 438763100,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715765818
    }
]