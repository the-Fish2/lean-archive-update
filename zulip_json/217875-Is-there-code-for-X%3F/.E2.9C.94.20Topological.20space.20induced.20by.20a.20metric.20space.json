[
    {
        "content": "<p>I'm struggling to find the documentation for the topological space induced by a metric space. Is there a topological space instance I'm missing, or perhaps a typeclass extension somewhere?</p>",
        "id": 430705476,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1712029738
    },
    {
        "content": "<p>I'm unsure about this, but the missing link here may be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformSpace#doc\">docs#UniformSpace</a></p>",
        "id": 430706889,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712030687
    },
    {
        "content": "<blockquote>\n<p>A metric space has a natural uniformity, and a uniform space has a natural topology.</p>\n</blockquote>",
        "id": 430706949,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712030743
    },
    {
        "content": "<p>see also: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PseudoMetricSpace#doc\">docs#PseudoMetricSpace</a></p>\n<blockquote>\n<p>Each pseudo metric space induces a canonical UniformSpace and hence a canonical TopologicalSpace. This is enforced in the type class definition, by extending the UniformSpace structure.</p>\n</blockquote>",
        "id": 430707311,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712030984
    },
    {
        "content": "<p>Thank you, I see that now. I still don't see how to access the natural topology from an instance of a MetricSpace. Would I have to send it to a PseudoMetricSpace, send that to a UniformSpace, and then sent that to a topological one?</p>",
        "id": 430707640,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1712031215
    },
    {
        "content": "<p>no, I think you get it for free</p>",
        "id": 430707812,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712031343
    },
    {
        "content": "<p>if you have a type endowed with a <code>MetricSpace</code> structure, it should automatically be a <code>TopologicalSpace</code> as well</p>",
        "id": 430707954,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712031415
    },
    {
        "content": "<p>How so? Lean throws an error on the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">sp</span> <span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">sp.isOpen</span> <span class=\"bp\">Ø</span>\n</code></pre></div>",
        "id": 430708018,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1712031480
    },
    {
        "content": "<p>Mathlib imported, of course</p>",
        "id": 430708072,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1712031496
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">sp</span> <span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 430708209,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712031595
    },
    {
        "content": "<p>you may have been using the wrong symbol for the empty set, btw</p>",
        "id": 430708382,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712031659
    },
    {
        "content": "<p>Oh, whoops</p>",
        "id": 430708416,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1712031695
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 430708486,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1712031725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"699800\">Brandon Harad</span> has marked this topic as resolved.</p>",
        "id": 430708492,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712031730
    }
]