[
    {
        "content": "<p>Is there code for proving that <code>unitaryGroup</code> is a <code>LieGroup</code> with <code>Hermitian</code> generators? i.e. <code>U = e^ (i H)</code>.</p>",
        "id": 417567362,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706065650
    },
    {
        "content": "<p>Probably it would be nice to do this in the \"point free\" setting of linear maps first, and only then do it for matrices.</p>",
        "id": 417569296,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706067055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/417569296\">said</a>:</p>\n<blockquote>\n<p>Probably it would be nice to do this in the \"point free\" setting of linear maps first, and only then do it for matrices.</p>\n</blockquote>\n<p>I take that as a no? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 417569546,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706067237
    },
    {
        "content": "<p>We have that the invertible ones are a Lie group in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.instLieGroupToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedAddCommGroupToNormedAddCommGroupToNonUnitalNormedRingToNormedSpace%27ToNormedFieldModelWithCornersSelfUnitsToMonoidToMonoidWithZeroToSemiringToRingInstGroupInstTopologicalSpaceUnitsToPseudoMetricSpaceToSeminormedRingInstChartedSpaceToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingUnitsToMonoidToMonoidWithZeroToSemiringToRingInstTopologicalSpaceUnits#doc\">docs#Units.instLieGroupToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedAddCommGroupToNormedAddCommGroupToNonUnitalNormedRingToNormedSpace'ToNormedFieldModelWithCornersSelfUnitsToMonoidToMonoidWithZeroToSemiringToRingInstGroupInstTopologicalSpaceUnitsToPseudoMetricSpaceToSeminormedRingInstChartedSpaceToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingUnitsToMonoidToMonoidWithZeroToSemiringToRingInstTopologicalSpaceUnits</a>, so it shouldn't be too hard to get the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=unitary#doc\">docs#unitary</a> elements.</p>",
        "id": 417569627,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706067288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/417569627\">said</a>:</p>\n<blockquote>\n<p>We have that the invertible ones are a Lie group in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.instLieGroupToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedAddCommGroupToNormedAddCommGroupToNonUnitalNormedRingToNormedSpace%27ToNormedFieldModelWithCornersSelfUnitsToMonoidToMonoidWithZeroToSemiringToRingInstGroupInstTopologicalSpaceUnitsToPseudoMetricSpaceToSeminormedRingInstChartedSpaceToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingUnitsToMonoidToMonoidWithZeroToSemiringToRingInstTopologicalSpaceUnits#doc\">docs#Units.instLieGroupToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedAddCommGroupToNormedAddCommGroupToNonUnitalNormedRingToNormedSpace'ToNormedFieldModelWithCornersSelfUnitsToMonoidToMonoidWithZeroToSemiringToRingInstGroupInstTopologicalSpaceUnitsToPseudoMetricSpaceToSeminormedRingInstChartedSpaceToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingUnitsToMonoidToMonoidWithZeroToSemiringToRingInstTopologicalSpaceUnits</a>, so it shouldn't be too hard to get the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=unitary#doc\">docs#unitary</a> elements.</p>\n</blockquote>\n<p>thanks! Being a physics person, I have to dig into it a bit more to see its connection to unitary...</p>",
        "id": 417570258,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706067771
    },
    {
        "content": "<p>The unitary elements form a subgroup of the invertible (i.e., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units#doc\">docs#Units</a>) ones, but I'm probably underestimating the amount of work involved in actually laying hands on the Lie structure.</p>",
        "id": 417570920,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706068273
    },
    {
        "content": "<p>Actually, I think this should follow from Cartan's theorem (which we may not have) and the fact that the unitary elements are closed (in the norm topology).</p>",
        "id": 417572394,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706069249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/417572394\">said</a>:</p>\n<blockquote>\n<p>Actually, I think this should follow from Cartan's theorem (which we may not have) and the fact that the unitary elements are closed (in the norm topology).</p>\n</blockquote>\n<p>Thanks! It's starting to make sense. I am interested in contributing this to Mathlib, but I might need a bit help (since I am relatively new to Lean). Do you happen to be interested in helping this? <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span>  (and probably <span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin (尹維晨)</span> ) <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> ?</p>",
        "id": 417619551,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706093376
    },
    {
        "content": "<p>iiuc, there are two things to do:</p>\n<ol>\n<li><code>unitaryGroup</code> is a <code>LieGroup</code>. The step is: prove that <code>unitaryGroup</code> is a subgroup of <code>Units</code> and by <a href=\"https://en.wikipedia.org/wiki/Closed-subgroup_theorem\">the closed subgroup theorem</a>, <code>unitaryGroup</code> is a <code>LieGroup</code>.</li>\n<li>Lie group and Lie algebra correspondence. We need to prove that in the general case (since Lean doesn't have it).</li>\n</ol>",
        "id": 417620224,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706093638
    },
    {
        "content": "<p>It's not so much a \"correspondence\" in 2 as a one way construction, right?</p>",
        "id": 417620506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706093737
    },
    {
        "content": "<p>Ok, I just followed <a href=\"https://en.wikipedia.org/wiki/Lie_group%E2%80%93Lie_algebra_correspondence\">Wikipedia</a> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 417621158,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706093973
    },
    {
        "content": "<p>In all honesty, you'll need the guidance of one of the real geometers here, maybe <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>. I suspect this is a nontrivial project, and perhaps not a good way to get your feet wet.</p>",
        "id": 417655032,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706106047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/417572394\">said</a>:</p>\n<blockquote>\n<p>Actually, I think this should follow from Cartan's theorem (which we may not have) and the fact that the unitary elements are closed (in the norm topology).</p>\n</blockquote>\n<p>You shouldn't need Cartan's theorem for this, you really want the much easier fact that a submanifold of a Lie group which is also a subgroup is a Lie group. Of course one also needs to define submanifolds for this <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> but mathematically this is way simpler than proving Cartan's theorem.</p>",
        "id": 417662577,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706108309
    },
    {
        "content": "<p>I was thinking that actually showing it's a submanifold would be tricky, and I wanted to use a sledgehammer. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 417663798,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706108617
    },
    {
        "content": "<p>I agree with Jireh and Anatole. All the obvious work to do in Lie group theory has a bunch of manifold theory as a prerequisite. Manifold theory is currently moving and any help there would be most welcome, but it would make for a difficult first project.</p>",
        "id": 417665032,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706108962
    },
    {
        "content": "<p>For example this thread shows that we're still at the R&amp;D stage for submanifolds: <a href=\"#narrow/stream/116395-maths/topic/Infinite-dimensional.20manifolds/near/412264089\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Infinite-dimensional.20manifolds/near/412264089</a></p>",
        "id": 417665330,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706109049
    },
    {
        "content": "<p>OTOH Lie algebra theory should be quite accessible as the only prerequisite there is linear algebra over commutative scalars (which is in great shape). A project I'd love to see someone take on there is the existence of Cartan subalgebras.</p>",
        "id": 417665754,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706109154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/417663798\">said</a>:</p>\n<blockquote>\n<p>I was thinking that actually showing it's a submanifold would be tricky</p>\n</blockquote>\n<p>It shouldn't, at least with good API. The map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">L</mi></mrow><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mrow><mi mathvariant=\"normal\">E</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">d</mi></mrow><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>T</mi><mo>↦</mo><mi>T</mi><mo>−</mo><mo stretchy=\"false\">(</mo><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">f : \\mathrm{GL}(V) \\to \\mathrm{End}(V), T \\mapsto T - (T^{-1})^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">GL</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">End</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> clearly has constant rank, since it's derivative is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo>↦</mo><mi>H</mi><mo>+</mo><msup><mi>H</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">H\\mapsto H + H^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> everywhere, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^{-1}(0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> is a submanifold. I'm not very familiar with Banach manifolds, but I would say this works also if <code>V</code> is infinite dimensional?? After all you still have the implicit functions theorem...</p>",
        "id": 417666622,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706109380
    },
    {
        "content": "<p>Thanks for the discussions. I can see the difficulties.</p>\n<p>My goal is to formalize the matrix exponential map for finite dimensional unitary matrices (<code>U = e^iH</code>), which is common and useful for quantum mechanics and quantum computing. Since it's a pretty restricted and specialized case, is it a good idea to just prove that first? say following Brian Hall or other books. What would be the minimal viable path here? Any suggestions will be appreciated.</p>",
        "id": 417684397,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706114221
    },
    {
        "content": "<p>You want that every unitary has such a representation, or that the exponential (with <code>I</code>) of a hermitian is always unitary?</p>",
        "id": 417685146,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706114430
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/417685146\">said</a>:</p>\n<blockquote>\n<p>You want that every unitary has such a representation, or that the exponential (with <code>I</code>) of a hermitian is always unitary?</p>\n</blockquote>\n<p>I think I need both.</p>",
        "id": 417685330,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706114488
    },
    {
        "content": "<p>We already have the latter. The former we will have soon-ish.</p>",
        "id": 417685872,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706114654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/417685872\">said</a>:</p>\n<blockquote>\n<p>We already have the latter. The former we will have soon-ish.</p>\n</blockquote>\n<p>Ah, that's very good to know. Can you point me to them? (was trying to find them using moogle but wasn't able to)</p>\n<p>For the former, which files is it going to be? (is there a way I can contribute or track the progress?)</p>",
        "id": 417686114,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706114732
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NormedSpace.exp_mem_unitary_of_mem_skewAdjoint#doc\">docs#NormedSpace.exp_mem_unitary_of_mem_skewAdjoint</a></p>",
        "id": 417699508,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706119380
    },
    {
        "content": "<p>The latter we will have once <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a> is finished. Anatole and I are working on that currently.</p>",
        "id": 417699591,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706119417
    },
    {
        "content": "<p>Thanks <span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span>! I think you answered my question and I will mark this question as resolved.</p>\n<p>Glad that this special case is resolved, this is very reassuring.</p>",
        "id": 417704653,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706121361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671093\">Yunong Shi</span> has marked this topic as resolved.</p>",
        "id": 417704710,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706121368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"671093\">@Yunong Shi</span>  note two things:</p>\n<ol>\n<li>There is no need to mark topics as resolved (and in fact, a small reason to prefer <em>not</em> to mark them resolved).</li>\n<li>Even after <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a> is in, there will need to be some glue code to make it apply to matrices.</li>\n</ol>",
        "id": 417705106,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706121534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671093\">Yunong Shi</span> has marked this topic as unresolved.</p>",
        "id": 417705153,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706121556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/417705106\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"671093\">Yunong Shi</span>  note two things:</p>\n<ol>\n<li>There is no need to mark topics as resolved (and in fact, a small reason to prefer <em>not</em> to mark them resolved).</li>\n<li>Even after <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a> is in, there will need to be some glue code to make it apply to matrices.</li>\n</ol>\n</blockquote>\n<p>Ok, unresolved it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> . Yeah, the glue code sounds much more manageable than proving Cartan's theorem for a first project. But still, happy to contribute to more Lie group theory once I am more familiar with Lean.</p>",
        "id": 417705542,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706121693
    },
    {
        "content": "<p>There was <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Lie.20algebra.20exponential.20map.3F/near/401599039\">another thread</a> a couple months ago asking about exponential maps.</p>",
        "id": 417966581,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1706131649
    },
    {
        "content": "<p>Integral curves (existence + uniqueness) were just added to mathlib. One eventual goal would be to define the exponential map for general Lie groups, and then show that it coincides with the matrix exponential as a special case.</p>\n<p>The difficulty right now is that on mathlib, (1) integral curves are defined in terms of the kinematic tangent vectors (a copy of the manifold's model vector space at each point), but (2) the Lie algebra of a Lie group is defined algebraically from point derivations. So an element of the Lie algebra is not necessarily the tangent vector to an integral curve. These two notions of tangent space are not isomorphic for general manifolds. They are isomorphic for matrix Lie groups, but that should be proven as a special case of finite-dimensional real/complex manifolds, which are a special case of manifolds modelled on reflexive Banach spaces. This is why we're trying to develop Banach manifolds some more.</p>\n<p>It is tempting to do the easy case of matrix Lie groups first, but it's important to make the initial definition (e.g. of exponential maps) appropriately general.</p>\n<p>Another challenge before we can use Cartan's theorem is that we don't have Cartan's theorem in mathlib yet. In fact, we don't even have a definition of submanifolds. Again, this is because we want to make the definition appropriately general and the associated API reasonably user-friendly.</p>\n<p>I'm very happy to see another physics person interested in formalisation. Although your stated goal may not be immediately approachable at the current state of mathlib, we should find something that you're interested in and is within reach. I believe <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> is working on the classification of simple Lie algebras. Perhaps there are approachable tasks there?</p>",
        "id": 417969997,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1706133135
    },
    {
        "content": "<p>In terms of more physics topics, I think it would be worthwhile to build a library of ODE solutions commonly used in physics. For example, I don't think the Bessel functions or spherical harmonics are in mathlib, are they? I don't know if the mathlib community would consider these too applied, but in the grand scheme of things, we should have these things formalised somewhere.</p>",
        "id": 417970369,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1706133321
    },
    {
        "content": "<p>Happy to chat more deeply elsewhere. Feel free to DM.</p>",
        "id": 417970482,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1706133372
    },
    {
        "content": "<p>Do we have the definition of the Lie algebra of a Lie group ? I didn't even knew that !</p>",
        "id": 417975892,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706135841
    },
    {
        "content": "<p>Ah, I guess this is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LeftInvariantDerivation#doc\">docs#LeftInvariantDerivation</a></p>",
        "id": 417976115,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706135936
    },
    {
        "content": "<blockquote>\n<p>So the tangent vector to an integral curve is not currently an element of the Lie algebra.</p>\n</blockquote>\n<p>The issue would actually be the other direction, right? We can always take a tangent vector, define the associated left invariant vector field, and this gives us a left invariant derivation</p>",
        "id": 417976527,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706136145
    },
    {
        "content": "<p>Yes :)</p>",
        "id": 417976585,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1706136182
    },
    {
        "content": "<p>I should say \"elements of the Lie algebra are not necessarily tangent vectors to integral curves\"</p>",
        "id": 417976626,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1706136218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/417666622\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/417663798\">said</a>:</p>\n<blockquote>\n<p>I was thinking that actually showing it's a submanifold would be tricky</p>\n</blockquote>\n<p>It shouldn't, at least with good API. The map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">L</mi></mrow><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mrow><mi mathvariant=\"normal\">E</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">d</mi></mrow><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>T</mi><mo>↦</mo><mi>T</mi><mo>−</mo><mo stretchy=\"false\">(</mo><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">f : \\mathrm{GL}(V) \\to \\mathrm{End}(V), T \\mapsto T - (T^{-1})^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">GL</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">End</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> clearly has constant rank, since it's derivative is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo>↦</mo><mi>H</mi><mo>+</mo><msup><mi>H</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">H\\mapsto H + H^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> everywhere, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^{-1}(0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> is a submanifold. I'm not very familiar with Banach manifolds, but I would say this works also if <code>V</code> is infinite dimensional?? After all you still have the implicit functions theorem...</p>\n</blockquote>\n<p>The regular value and constant rank theorem are on my personal wish-list once submanifolds are merged. The inverse function theorem for manifolds is within reach today; deducing the implicit function theorem from it could be a fun project*. Help is always welcome :-)</p>\n<ul>\n<li>touching smooth vector bundles, so probably not an ideal first project</li>\n</ul>",
        "id": 417978561,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706137273
    },
    {
        "content": "<blockquote>\n<p>once submanifolds are merged </p>\n</blockquote>\n<p>Today I actually spent some time thinking about how to properly define submanifolds in the current setup, and the more I do the more I think that it will be extremely painful if we don’t allow for model spaces depending on the point…</p>",
        "id": 417979020,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706137492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> Perhaps we can move this to the submanifolds thread. I have some definitions I can share, and I'd like to hear what challenges you've encountered.</p>",
        "id": 417979129,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1706137549
    },
    {
        "content": "<p>I’m about to go to sleep right now, but I’ll be happy to continue this discussion tomorrow !</p>",
        "id": 417979223,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706137598
    },
    {
        "content": "<p>Hi guys,</p>\n<p>Really appreciate the discussion. It was super helpful! Maybe I can illustrate my immediate and long-term goals more clearly and to see how I can align my long-term goal with your efforts in Mathlib.</p>\n<h3>Immediate goal</h3>\n<p>My immediate goal is to prove the so-called <a href=\"https://en.wikipedia.org/wiki/Eastin%E2%80%93Knill_theorem\">Eastin-Knill theorem</a> in quantum computation. It's a direct (and simple) application of Lie group theory with real world impact: it is an important no-go theorem tells people a certain (very desirable) way of building large-scale quantum computers is impossible. And the proof is only about 1-column long. I will be super happy if I can prove it in Lean.</p>\n<p>So far, the blockers I see are the following \"theorems\" (taken and modified from <a href=\"https://arxiv.org/pdf/0811.4262.pdf\">the original paper</a>)</p>\n<ol>\n<li>Any d-dimensional unitary operator $U$ satisfies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>=</mo><msup><mi>e</mi><mrow><mi>i</mi><mi>H</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">U=e^{iH}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.08125em;\">H</span></span></span></span></span></span></span></span></span></span></span></span> for some Hermitian operator <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span>. (thanks to <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> , I know that it will be proved in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a>)</li>\n<li>The set of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-unitary product operators, which are direct products of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> unitary operators <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>⊗</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>U</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\otimes_{j=1}^{n} U_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0781em;vertical-align:-0.3948em;\"></span><span class=\"mord\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4413em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3948em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>, has generators <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>=</mo><msup><mi>e</mi><mrow><mi>i</mi><msubsup><mo>⊗</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>H</mi><mi>j</mi></msub></mrow></msup></mrow><annotation encoding=\"application/x-tex\">U=e^{i\\otimes_{j=1}^{n} H_j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9222em;\"><span style=\"top:-3.1052em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\"><span class=\"mbin mtight\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7385em;\"><span style=\"top:-2.214em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4249em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:-0.0813em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2819em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>. (I think this could be easily proved)</li>\n<li>The intersection of 2 Lie groups is a Lie group. (I think this statement can be \"lowered\" to unitary groups and be proved.)</li>\n<li>(zulip won't render this one, I will send it below)</li>\n<li>\"Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">F</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{F}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span></span></span> be a set consisting of one representative from each coset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">G</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{G}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7805em;vertical-align:-0.0972em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.0593em;\">G</span></span></span></span>. \"(I am not sure how to do this in Lean).</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">F</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{F}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span></span></span> is a finite, discrete group applied to a projected space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span>, however, the unitary group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> we are interested has infinite operators, thus, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> cannot be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>. (I am not sure how to do this in Lean)</li>\n</ol>\n<p>If 1-6 can be proved in Lean (with  <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a>), then I will be happy to prove Eastin-Knill theorem as my first project. Any suggestions would be appreciated!</p>\n<h3>Long-term goals</h3>\n<p>My main interest is quantum compilation, which basically deals with problem of how to make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>U</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>d</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SU(2^d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> using the kronecker product and dot product of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>U</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SU(2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>U</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SU(4)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span></span> matrices. There are many important results leverage Cartan subalgebra and Cartan's KAK theorem. Thus, I think in the long-term, I will definitely be interested in contributing to a project like showing the existence of Cartan subalgebra like <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> suggested. Having these in Mathlib can enable me to prove more quantum compilation results, like \"any 2 qubit unitaries can be synthesized by at most 3 controlled-not (CNOT) gate\". CNOT is the unitary matrix: [[1,0,0,0], [0,1,0,0],[0,0,0,1],[0,0,1,0]].</p>\n<p>We could talk about long-term goals later, but my main focus is Eastin Knill if it's possible to prove now. If you could share your thoughts on 1-6 above, it would be super helpful!</p>",
        "id": 418023514,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706168655
    },
    {
        "content": "<hr>\n<p>Here is 4 above that zulip won't render:</p>\n<ol start=\"4\">\n<li>Any Lie group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">G</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{G}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7805em;vertical-align:-0.0972em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.0593em;\">G</span></span></span></span> can be partitioned into cosets of the connected component of the identity, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> is a Lie subgroup of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">G</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{G}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7805em;vertical-align:-0.0972em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.0593em;\">G</span></span></span></span>. Thus, any element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>∈</mo><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">C \\in \\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> can be written as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><msub><mo>∏</mo><mi>k</mi></msub><msup><mi>e</mi><mrow><mi>i</mi><msub><mi>D</mi><mi>k</mi></msub></mrow></msup></mrow><annotation encoding=\"application/x-tex\">C =\\prod_k e^{i D_k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.141em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1864em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3488em;margin-left:-0.0278em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1512em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>D</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">D_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"fraktur\">c</mi></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{c}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4753em;\"></span><span class=\"mord mathfrak\">c</span></span></span></span>, the Lie algebra of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span>. (I am not sure if this statement can be \"lowered\" to unitary groups and proved easily. Maybe: any \"connected\" unitary subgroup can be written as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>=</mo><msub><mo>∏</mo><mi>k</mi></msub><msup><mi>e</mi><mrow><mi>i</mi><msub><mi>H</mi><mi>k</mi></msub></mrow></msup></mrow><annotation encoding=\"application/x-tex\">U=\\prod_k e^{i H_k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.141em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1864em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3488em;margin-left:-0.0813em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1512em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>?)</li>\n</ol>",
        "id": 418023570,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706168702
    },
    {
        "content": "<hr>\n<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span>  (<span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> suggested that I should ping you here :D)</p>",
        "id": 418124535,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706202208
    },
    {
        "content": "<p>About 4, we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.connectedComponentOfOne#doc\">docs#Subgroup.connectedComponentOfOne</a> (would people be okay with renaming it to <code>identityComponent</code>? Maybe it's harder to additivize...) so the decomposition into cosets is immediate. We don't have that it's normal though. And obviously we don't have the exponential for general Lie groups...</p>",
        "id": 418129293,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706203593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/418129293\">said</a>:</p>\n<blockquote>\n<p>About 4, we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.connectedComponentOfOne#doc\">docs#Subgroup.connectedComponentOfOne</a> (would people be okay with renaming it to <code>identityComponent</code>? Maybe it's harder to additivize...) so the decomposition into cosets is immediate. We don't have that it's normal though. And obviously we don't have the exponential for general Lie groups...</p>\n</blockquote>\n<p>Thanks! That's super helpful. I guess after <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a>, the unitary version of 4 could be proved? (by <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a> together with the unitary version of 3).</p>",
        "id": 418131739,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706204345
    },
    {
        "content": "<p>4 is easy with <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a>. The argument goes like this: suppose <code>u</code> is unitary with distance to <code>1</code> is less than 2. Then the spectrum of <code>u</code> omits <code>-1</code>, so the logarithm is continuous on the spectrum. Consequently <code>u</code> is an exponential unitary. Note, one only needs the holomorphic functional calculus here, but we don't have that yet either. </p>\n<p>Hence if <code>u</code> and <code>v</code> are unitaries whose distance is at most 2, then they differ by an exponential unitary factor. Consequently, the path component containing the identity consists of finite products of exponential unitaries.</p>",
        "id": 418132163,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706204460
    },
    {
        "content": "<p>You don’t even need any norm: the exponential is open around 0, so the subgroup generated by the exponential is open, hence it’s the full subgroup by connectedness.</p>",
        "id": 418132831,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706204649
    },
    {
        "content": "<p>Wait I must be saying something stupid</p>",
        "id": 418132966,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706204702
    },
    {
        "content": "<p>Ignore what I just said temporarily</p>",
        "id": 418132998,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706204713
    },
    {
        "content": "<p>Yeah okay what I said should work except we need manifold theory to do it properly, which we don’t have. So indeed the best is to use functional calculus to show that the image of the exponential is a neighborhood of 1.</p>",
        "id": 418134343,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706205166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/418132163\">said</a>:</p>\n<blockquote>\n<p>4 is easy with <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a>. The argument goes like this: suppose <code>u</code> is unitary with distance to <code>1</code> is less than 2. Then the spectrum of <code>u</code> omits <code>-1</code>, so the logarithm is continuous on the spectrum. Consequently <code>u</code> is an exponential unitary. Note, one only needs the holomorphic functional calculus here, but we don't have that yet either. </p>\n<p>Hence if <code>u</code> and <code>v</code> are unitaries whose distance is at most 2, then they differ by an exponential unitary factor. Consequently, the path component containing the identity consists of finite products of exponential unitaries.</p>\n</blockquote>\n<p>\"Note, one only needs the holomorphic functional calculus here, but we don't have that yet either.\" We don't have it in the current Mathlib or <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a>? If the latter, it seems to contradict with \"4 is easy with <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a>.\". <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 418135222,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706205484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/418129293\">said</a>:</p>\n<blockquote>\n<p>About 4, we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.connectedComponentOfOne#doc\">docs#Subgroup.connectedComponentOfOne</a> (would people be okay with renaming it to <code>identityComponent</code>? Maybe it's harder to additivize...)</p>\n</blockquote>\n<p><code>ZeroComponent</code> ?</p>",
        "id": 418136611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706205969
    },
    {
        "content": "<p>We don't have it. <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a> is the <em>continuous</em> functional calculus and so suffices to handle the problem at hand.</p>\n<p>But the logarithm is holomorphic, so you don't need the full power of the continuous functional calculus, and you can get away with the mathematically-weaker-but-apparently-harder-to-formalize holomorphic functional calculus.</p>",
        "id": 418142225,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706208022
    },
    {
        "content": "<p>Actually I'm not sure I understood correctly your point 4. Do you want this just for the unitary group or for arbitrary Lie subgroups of it?</p>",
        "id": 418160401,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706214834
    },
    {
        "content": "<p>If the latter then I think continuous functional calculus alone won't be enough to get elements of the Lie algebra of the subgroup. That's a dumb example, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mn>2</mn><mi>i</mi><mi>π</mi></mrow></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">e^{2i\\pi} = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">iπ</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> yet <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>i</mi><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">2i\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">iπ</span></span></span></span> is not in the Lie algebra of the trivial subgroup, so you can't just take the same decomposition as in the full unitary group.</p>",
        "id": 418160938,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706215062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/418136611\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60unitaryGroup.60.20is.20a.20.60LieGroup.60.20with.20Hermitian.20generators/near/418129293\">said</a>:</p>\n<blockquote>\n<p>About 4, we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.connectedComponentOfOne#doc\">docs#Subgroup.connectedComponentOfOne</a> (would people be okay with renaming it to <code>identityComponent</code>? Maybe it's harder to additivize...)</p>\n</blockquote>\n<p><code>ZeroComponent</code> ?</p>\n</blockquote>\n<p>That's fine for me, wouldn't people argue that we should just use <code>OneComponent</code>?</p>",
        "id": 418161441,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706215300
    },
    {
        "content": "<p>Anatole, I <em>think</em> Yunong was saying the following: there is a general fact for Lie groups that the connected component of the identity (not just any connected subgroup) consists of products of images of generators under the exponential map. (And of course, the cosets partition the full group)</p>\n<p>And then the question was: can the version of this specific to unitary matrices be proved more easily? And I showed how the answer is yes using the CFC.</p>",
        "id": 418162361,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706215755
    },
    {
        "content": "<p>Ok, I understood that he was asking for the general fact about Lie groups but only for Lie subgroups of a unitary group (with the associated identity component and Lie algebras, not necessarily those of unitaries). I agree that CFC is enough for your interpretation.</p>",
        "id": 418162651,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706215894
    },
    {
        "content": "<blockquote>\n<p>But the logarithm is holomorphic, so you don't need the full power of the continuous functional calculus, and you can get away with the mathematically-weaker-but-apparently-harder-to-formalize holomorphic functional calculus.</p>\n</blockquote>\n<p>Side note: I'm really not surprised by this. If you look in Bourbaki's \"Spectral theory\", the construction of the holomorphic functional calculus is an order of magnitude longer than that of continuous functional calculus. Isn't the whole strength of holomorphic functional calculus that it works in any Banach algebra?</p>",
        "id": 418162820,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706215977
    },
    {
        "content": "<p>Yes, and not just for normal elements besides. \"mathematically-weaker\" was the wrong phrase. I should have said \"requiring-less-mathematical-structure\" or something.</p>",
        "id": 418163061,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706216080
    },
    {
        "content": "<p>In my head, I always think of it as \"simpler\", regardless of the difficulty of the construction, because of the chain of extensions:</p>\n<p><code>Polynomial.aeval</code> → holomorphic FC → continuous FC → borel FC</p>",
        "id": 418163296,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706216194
    },
    {
        "content": "<p>Re Zerocomponent -- the thing is that most of the interesting Lie groups are nonabelian (although they have interesting abelian subgroups) so the group law is almost always <code>*</code> in practice, and \"identity component\" is the standard terminology here. I guess we can just use \"identity component\" even in the additive case -- even though it's 0, it's still the identity.</p>",
        "id": 418178695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706223847
    },
    {
        "content": "<p>Ah right we have the namespace to disambiguate <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 418178743,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706223886
    }
]