[
    {
        "content": "<p>i'd like to have the homomorphism <code>f:((ι ≃ ι) →* MulAut (ι → Kˣ))</code> given by composition... i haven't found it in mathlib yet, however...<br>\ni'd like in particular to prove that there is a subgroup <code>(ι → Kˣ)⋊[f] (ι ≃ ι)</code> of <code>(ι → K) ≃ₗ[K] (ι → K)</code></p>",
        "id": 426204893,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710274497
    },
    {
        "content": "<p>(i'm assuming <code>[Field K]</code> and <code>[Fintype ι]</code>)</p>",
        "id": 426205451,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710274734
    },
    {
        "content": "<p>It will be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulDistribMulAction.toMulAut#doc\">docs#MulDistribMulAction.toMulAut</a></p>",
        "id": 426207436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710275531
    },
    {
        "content": "<p>Probably <code>MulDistribMulAction.toMulAut (DomMulAct (ι ≃ ι)) (ι → Kˣ)</code> composed with something to remove the type synonym</p>",
        "id": 426207902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710275726
    },
    {
        "content": "<p>thanks! i've managed to simplify it to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.InformationTheory.Code.Linear.Aut</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Finite.GaloisField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.DomAct.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulDistribMulAction</span> <span class=\"o\">((</span><span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">ᵈᵐᵃ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refine'</span> <span class=\"o\">{</span>\n    <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">σ</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">DomMulAct.mk.symm</span> <span class=\"n\">σ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span>\n    <span class=\"bp\">..</span><span class=\"o\">}</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"bp\">→*</span> <span class=\"n\">MulAut</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">MulDistribMulAction.toMulAut</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">ᵈᵐᵃ</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 426212643,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710277622
    },
    {
        "content": "<p>it doesn't synthesise this instance from mathlib yet, however...</p>",
        "id": 426212874,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710277710
    },
    {
        "content": "<p>i imagine it might be because of some kind of diamond, but i'm not familiar enough with this neck of the mathlib to be able to tell why...</p>",
        "id": 426212986,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710277750
    },
    {
        "content": "<p>it seems that <code>DomMulAct</code> isn't a lot of help in this regard yet.</p>",
        "id": 426213446,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710277943
    },
    {
        "content": "<p>I think this is probably just a gap, though the one in mathlib should be more general</p>",
        "id": 426213535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710277986
    },
    {
        "content": "<p>Here's the missing one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulDistribMulAction</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">ᵈᵐᵃ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">smul_one</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">ᵈᵐᵃ</span> <span class=\"bp\">→*</span> <span class=\"n\">MulAut</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">MulDistribMulAction.toMulAut</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">ᵈᵐᵃ</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 426213983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710278199
    },
    {
        "content": "<p>awesome, thanks!</p>",
        "id": 426214149,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710278280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as resolved.</p>",
        "id": 426214200,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710278286
    },
    {
        "content": "<p>Or without the <code>dma</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"n\">MulAut</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">MulDistribMulAction.toMulAut</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">ᵈᵐᵃ</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">MulEquiv.inv'</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMonoidHom</span>\n</code></pre></div>",
        "id": 426214398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710278374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> has marked this topic as resolved.</p>",
        "id": 426216569,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710279338
    },
    {
        "content": "<p>I've added the missing piece in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11345\">#11345</a></p>",
        "id": 426224461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710283316
    }
]