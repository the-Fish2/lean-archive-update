[
    {
        "content": "<p>Is the fact that the sum over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">1/p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">p</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> prime diverges somewhere in Mathlib?<br>\nAsking loogle for <code>|- Not (Summable _)</code> gives five results, the first three of which are not relevant, and the other two are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.not_summable_nat_cast_inv#doc\">docs#Real.not_summable_nat_cast_inv</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.not_summable_one_div_nat_cast#doc\">docs#Real.not_summable_one_div_nat_cast</a> , which are about the harmonic series.</p>\n<p>If this is not there, I guess including it would be welcome? For fun (and also because I will need it) I have spent the last couple of days formalizing Erdös's elementary proof (as given in the BOOK), so it would be easy to PR the result now.</p>",
        "id": 409835682,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703444852
    },
    {
        "content": "<p>It would be nice to have something like <code>Summable (∑' p : Nat.Primes, (p : Real) ^ r) &lt;-&gt; r &lt; -1</code></p>",
        "id": 409835876,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703445073
    },
    {
        "content": "<p>That's an easy consequence.</p>",
        "id": 409835994,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703445238
    },
    {
        "content": "<p>What would be the idiomatic way to spell it? I currently have <code>¬ Summable (indicator {p | p.Prime} (fun n : ℕ ↦ (1 : ℝ) / n))</code>, but one could also use <code>Nat.Primes</code>.</p>",
        "id": 409836065,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703445307
    },
    {
        "content": "<p>AFAIK, we don't have a convention here yet.</p>",
        "id": 409836343,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703445701
    },
    {
        "content": "<p>Could it be expresses as = infty in EReal?</p>",
        "id": 409836502,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703445858
    },
    {
        "content": "<p>There should be lemmas in Mathlib that translate between the various versions. (But I didn't check yet.)</p>",
        "id": 409836535,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703445903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> We definitely have lemmas about <code>= infty</code> in <code>ENNReal</code>, not sure about <code>EReal</code>.</p>",
        "id": 409845990,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703455747
    },
    {
        "content": "<p>My code is <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts\">here</a>. I'll start PRing it tomorrow.</p>",
        "id": 409847915,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703457909
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9240\">#9240</a> provides the necessary results on bounds for the cardinalities of the sets of <code>k</code>-smooth and <code>k</code>-rough numbers up to some bound <code>N</code>.</p>",
        "id": 409908521,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703508110
    },
    {
        "content": "<p>I think the statements on the divergence of the series should go into a separate file.<br>\nWould it make sense to set up a sub-folder <code>Analytic</code> below <code>Number_Theory</code> and put it there (and then also move <code>ZetaFunction</code> and <code>ZetaValues and maybe some other files</code>there), or is it better (for the time being, at least) to just have a new file <code>SumPrimeReciprocals</code> (say) in <code>NumberTheory</code>? <span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 409908777,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703508360
    },
    {
        "content": "<p>I like the idea of an Analytic directory! We've seen evidence in 2023 that chunks of modern combinatorics are formalisable \"in real time\" and I'm wondering whether we might be able to push analytic number theory in that direction in 2024.</p>",
        "id": 409910155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703509425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> would your code easily give the identities <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><mfrac><mrow><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><msup><mi>n</mi><mi>s</mi></msup></mfrac><mo>=</mo><mo>−</mo><mfrac><mrow><msup><mi>ζ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=1}^\\infty \\frac{\\Lambda(n)}{n^s} = -\\frac{\\zeta&#x27;(s)}{\\zeta(s)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">Λ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.5845em;vertical-align:-0.52em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0645em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><mfrac><mrow><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><mrow><msup><mi>n</mi><mi>s</mi></msup><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow></mfrac><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=2}^\\infty \\frac{\\Lambda(n)}{n^s \\log n} = \\log \\zeta(s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.4911em;vertical-align:-0.4811em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">Λ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">R</mi><mi mathvariant=\"normal\">e</mi></mrow><mi>s</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Re} s &gt; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Re</span></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>?  This would not only give the divergence of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>p</mi></msub><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_p 1/p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">p</span></span></span></span> (send <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>→</mo><msup><mn>1</mn><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">s \\to 1^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span> in the second identity) but also start the road towards the prime number theorem.</p>",
        "id": 409932078,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703529431
    },
    {
        "content": "<p>Erdős's proof of the divergence will not give that, but it should not be too hard to get it from what I did so far w.r.t. Euler products (I'm preparing a logarithmic version). Then we only need the Wiener-Ikehara Tauberian theorem...</p>",
        "id": 409932224,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703529588
    },
    {
        "content": "<p>I'd be willing to contribute to (but not take the lead on) a PFR-type collaborative project to develop the analytic number theory library, for instance by making blueprints of various basic analytic number theory facts (prime number theorem, Dirichlet's theorem, Mertens' theorem, etc.).</p>",
        "id": 409932577,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703529994
    },
    {
        "content": "<p>Dirichlet's Theorem (on primes in AP) is what I am aiming at with Euler products and related stuff. So I'd be happy to contribute. But I am not an analytic number theorist, so I'm not really qualified to lead a wider project to develop analytic number theory in Mathlib.</p>",
        "id": 409932681,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703530163
    },
    {
        "content": "<p>I think one of the issues is that there's not yet enough complex analysis to do analytic number theory the way some (myself included) would like... One can go around this in lots of ways for particular applications (e.g. the elementary approach), but ideally we would do something that applies to all Langlands L-functions, once the complex analysis is there...</p>",
        "id": 409935106,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703532763
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9270\">#9270</a> is a prerequisite for applying log to Euler products.</p>",
        "id": 409935318,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703533011
    },
    {
        "content": "<p>For the unit-fractions project, <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>  did formalise quite a bit of 'basic' ANT, including things like Chebyshev estimates, divergence of 1/p (in fact the asymptotic), basic sieves, and so on.</p>\n<p>I believe he was in the middle of some sort of mathlib port. In any case I'd advise anyone against going ahead with this until Bhavik appears here with an update about the current state of the art.</p>",
        "id": 409935589,
        "sender_full_name": "Thomas Bloom",
        "timestamp": 1703533321
    },
    {
        "content": "<p>In fact, thanks to <span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span>, the Rutgers group is quite close to showing that holomorphic functions on discs have primitives, and from there that holomorphic functions on simply connected domains have primitives. Then we should be able to do a lot more of the contour-pulling type argument that one would like... (We would also get complex logs on arbitrary branch cuts, and then combined with Vincent's work, the Riemann Mapping Theorem, which is a nice target of independent interest...)</p>",
        "id": 409935637,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703533336
    },
    {
        "content": "<p>Indeed, I'd argue that unit-fractions is already a demonstration of analytic number theory being formalised 'in real time'.</p>",
        "id": 409935742,
        "sender_full_name": "Thomas Bloom",
        "timestamp": 1703533461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"458865\">Thomas Bloom</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Sum.20over.201.2Fp.20diverges/near/409935589\">said</a>:</p>\n<blockquote>\n<p>For the unit-fractions project, <span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span>  did formalise quite a bit of 'basic' ANT, including things like Chebyshev estimates, divergence of 1/p (in fact the asymptotic), basic sieves, and so on.</p>\n<p>I believe he was in the middle of some sort of mathlib port. In any case I'd advise anyone against going ahead with this until Bhavik appears here with an update about the current state of the art.</p>\n</blockquote>\n<p>Oh yeah, I believe he even has the growth rate of it</p>",
        "id": 409935784,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703533529
    },
    {
        "content": "<p>From memory, in unit-fractions we have: Chebyshev estimates for number of primes, asymptotic for sum of 1/p, related Mertens theorems like asymptotic for product of 1-1/p, divisor function upper bound, Eratosthenes-Legendre sieve, general partial summation lemmas.</p>",
        "id": 409935842,
        "sender_full_name": "Thomas Bloom",
        "timestamp": 1703533578
    },
    {
        "content": "<p>But all of the above just use elementary methods, nothing with complex analysis, which as Alex says is more problematic. In particular for PNT probably should set up enough complex analysis to.force the usual (Newman?) Proof through, rather than brute forcing an elementary proof through</p>",
        "id": 409935923,
        "sender_full_name": "Thomas Bloom",
        "timestamp": 1703533692
    },
    {
        "content": "<p>Although perhaps Florian Richter's recent elementary proof would be a good.project</p>",
        "id": 409935930,
        "sender_full_name": "Thomas Bloom",
        "timestamp": 1703533712
    },
    {
        "content": "<p>I would suggest not doing one of the elementary approaches, but rather to go for a Riemann/Hadamard-de la Vallee Poussin - type proof of PNT (that is, using complex analysis), with some modern twists on smoothing/unsmoothing with Mellin convolutions and Hoffstein-Lockhart (+Goldfeld-Hoffstein) for the zero repulsion argument. (As in, e.g.: <a href=\"https://youtu.be/U11HOX8GZ3c\">https://youtu.be/U11HOX8GZ3c</a>) The reason is: this is very robust and will open up a world of possibilities, e.g., Hecke L-functions attached to modular forms, Rankin-Selberg, then Tate's thesis, etc etc...</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"U11HOX8GZ3c\" href=\"https://youtu.be/U11HOX8GZ3c\"><img src=\"https://uploads.zulipusercontent.net/eaca3e5b3f8d563c6faeb56410e424f9d26784c0/68747470733a2f2f692e7974696d672e636f6d2f76692f553131484f5838475a33632f64656661756c742e6a7067\"></a></div>",
        "id": 409941301,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703539779
    },
    {
        "content": "<p>I agree, this way would be much better from a long term point of view, only question is whether there is enough complex analysis in place to make it feasible?</p>",
        "id": 409941961,
        "sender_full_name": "Thomas Bloom",
        "timestamp": 1703540585
    },
    {
        "content": "<p>If there isn't, it should be provided.</p>",
        "id": 409941972,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703540619
    },
    {
        "content": "<p>Perhaps a stretch goal would be to get as far as the Chebotarev density theorem?</p>",
        "id": 409942552,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703541429
    },
    {
        "content": "<p>That would be very good to have, as it is used frequently in applications.</p>",
        "id": 409942568,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703541466
    },
    {
        "content": "<p>It would also be a good test of whether one can split up a complex project into more atomic pieces, where people only need to know one subfield of mathematics (e.g., complex analysis, analytic number theory, or algebraic number theory) to contribute to a single piece.</p>",
        "id": 409942642,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703541579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Would Chebotarev density be useful at all for FLT?</p>",
        "id": 409942905,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703541747
    },
    {
        "content": "<p>I don't think Chebotarev is useful for FLT, but if we develop enough complex analysis to do PNT via contours, that will be  important progress towards getting a trace formula, and Jacquet-Langlands is needed for FLT...</p>",
        "id": 409943540,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703542446
    },
    {
        "content": "<p>Cebotarev is surely needed for FLT. An R=T theorem is just a more precise way of giving a bijection between certain Galois representations and certain modular eigenforms. Given a modular eigenform, the Galois representation attached to it is characterised by the traces of Frobenius elements at a cofinite set of prime numbers. Without some form of Cebotarev you wouldn't know that the representation is uniquely determined by this data.</p>",
        "id": 409943864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703542901
    },
    {
        "content": "<p>I stand corrected! So even better, PNT via complex analysis would open a path to Cheboratev as well...</p>",
        "id": 409943939,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703542973
    },
    {
        "content": "<p>So perhaps we could open a Chebotarev subproject of FLT, and a PNT subproject of Chebotarev?</p>",
        "id": 409944105,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703543165
    },
    {
        "content": "<p>I have an FLT blueprint which is hugely incomplete and am slightly scared to open it because I have a heavy teaching load Jan to March and am worried that if I open it then suddenly everyone will be expecting me to run it, which I don't have the capacity to do right now (the grant starts in October but realistically I'll be able to run it from April)</p>",
        "id": 409944427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703543583
    },
    {
        "content": "<p>OK then maybe it makes more sense to focus for now on developing enough complex analysis and Dirichlet series theory to do PNT for now by the sort of complex analytic methods that extend to other L-functions, and just blackbox Chebatorev for FLT until someone manages to formalize it.</p>",
        "id": 409944991,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703544211
    },
    {
        "content": "<p>I would also think that it makes sense to aim at getting PNT and Dirichlet into Mathlib first:</p>\n<ul>\n<li>the results are important and useful (e.g., Hasse-Minkowski for quadratic forms depends on Dirichlet)</li>\n<li>the experience will help with more ambitious targets</li>\n<li>proofs can always be refactored later when more general results become available.</li>\n</ul>",
        "id": 410001577,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703583908
    },
    {
        "content": "<p>I'm sorry to be dropping in late to this interesting discussion. One possibly relevant piece of info: the prime number theorem was recently formalised in Isabelle, by <span class=\"user-mention\" data-user-id=\"566171\">@Meow</span>. I am not familiar with the details of the proof, but it certainly uses a lot of complex analysis, and gives the classical exp(sqrt log x) error term.</p>",
        "id": 410052238,
        "sender_full_name": "David Loeffler",
        "timestamp": 1703613513
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9313\">#9313</a> adds the fact in the title of this thread.</p>\n<p>I think it makes sense to have that now, even though stronger results are very likely to be added soon from the unit fractions project:</p>\n<ul>\n<li>we want this specific result in any case, and it is better to have it earlier</li>\n<li>if desired, the proof can be refactored later</li>\n</ul>\n<p>Reviews are welcome!</p>",
        "id": 410276589,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703760379
    },
    {
        "content": "<p>I've heard that the elementary proof of PNT leads to large sieve method, which is also very important in analytic number theory. Is it correct?</p>",
        "id": 410284593,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703764957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Sum.20over.201.2Fp.20diverges/near/410284593\">said</a>:</p>\n<blockquote>\n<p>I've heard that the elementary proof of PNT leads to large sieve method, which is also very important in analytic number theory. Is it correct?</p>\n</blockquote>\n<p>The large sieve inequality is indeed important in ANT, though I don't know exactly how it is connected to the elementary proof of PNT other than that Selberg was heavily involved  in both.  The elementary proof usually requires the Brun-Titchmarsh inequality but this can be proven by a number of sieve methods (large sieve will work, but for instance the Selberg sieve will work just fine also).</p>\n<p>If one is to do any serious analytic number theory in Lean (beyond \"classical\" multiplicative number theory, such as that required in the complex analytic proof of PNT, Dirichlet, Chebotarev, etc.) then sieve theory would definitely need to be implemented at some point, but that could be a bit messy (I'm hoping that a putative PNT project will give us experience in how to use asymptotic notation \"in the style of analytic number theory\", as this will be used a <em>lot</em> in sieve theory.)</p>",
        "id": 410319214,
        "sender_full_name": "Terence Tao",
        "timestamp": 1703782519
    },
    {
        "content": "<p>Selberg sieve is <a href=\"#narrow/stream/113489-new-members/topic/Sieve.20Methods/near/361942383\">here</a></p>",
        "id": 410319490,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703782700
    },
    {
        "content": "<p>I have now managed to produce a proof of the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"n\">BigOperators</span> <span class=\"n\">EulerProduct</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Nat.ArithmeticFunction</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">dirichletSeries_vonMangoldt_eq_neg_deriv_zeta_div_zeta</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.re</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑'</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">Λ</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">deriv</span> <span class=\"n\">riemannZeta</span> <span class=\"n\">s</span> <span class=\"bp\">/</span> <span class=\"n\">riemannZeta</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'll generalize this to Dirichlet L-series and clean up my code in the next days, before starting PRing it to Mathlib.</p>\n<p>To get from here to PNT, we need some version of the Wiener-Ikehara theorem and a proof that the zeta function does not vanish on Re = 1 (and the residue of the logarithmic derivative of zeta at 1).</p>",
        "id": 410352321,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703803879
    },
    {
        "content": "<p>May I ask a technical question: Why do you coerce <code>n</code> to <code>ℂ</code> here before raising to the <code>-s</code>? In \"math\" (as opposed to \"mathlib\"), this causes issues with complex powers of complex numbers, requiring branch cuts, etc. I would naively think that it would be better to coerce into, say, <code>NNReal</code>, where the power of <code>a^b : NNReal^Complex</code> can be defined as <code>Real.exp(b Real.log a)</code>, with no need for branch cuts...?</p>",
        "id": 410377056,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703817022
    },
    {
        "content": "<p>And if we're going to be pulling contours, we'll need a residue theorem (for rectangles). I'm working on such now...</p>",
        "id": 410377083,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703817042
    },
    {
        "content": "<blockquote>\n<p>Why do you coerce n to ℂ here before raising to the -s? [...] I would naively think that it would be better to coerce into, say, NNReal, where the power of a^b : NNReal^Complex can be defined as Real.exp(b Real.log a), with no need for branch cuts...?</p>\n</blockquote>\n<p>Why use two coercions, if using one works? (I thought it was considered \"good mathlib style\" to avoid proliferation of subtypes as much as possible.)</p>",
        "id": 410401420,
        "sender_full_name": "David Loeffler",
        "timestamp": 1703835821
    },
    {
        "content": "<p>If complex^complex is defined in lean then all the branch cut work must be done already.</p>",
        "id": 410412488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703843536
    },
    {
        "content": "<p>One could set up <code>HPow</code> instances for <code>Nat</code>, <code>Int</code>, <code>Rat</code>, <code>Real</code> wth complex exponents (etc.), I suppose, but I suspect that this would lead to problems somewhere. There are some experts around who may be able to say more about that.</p>",
        "id": 410427397,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703852765
    },
    {
        "content": "<p>One pain point I encountered is that there are lemmas like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.ofReal_log#doc\">docs#Complex.ofReal_log</a> that apply to real numbers coerced to complex ones, but don't trigger (in a rewrite) when you have, say, a natural number coerced to a complex one. So I'm doing things like <code>rw [..., show (n : Complex) = (n : Real) from rfl, &lt;do something&gt;, show ((n : Real) : Complex) = n  from rfl, ...]</code> a number of times. I have some idea how to improve on that; I'll try that out some time later today.</p>",
        "id": 410427402,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703852769
    },
    {
        "content": "<p>In those cases you should have specific lemmas for coercions of naturals, integers...</p>",
        "id": 410427477,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703852839
    },
    {
        "content": "<p>But this would multiply the number of lemmas by n = #{Nat, Int, Rat, ....}.</p>",
        "id": 410427517,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703852879
    },
    {
        "content": "<p>I'll let you know if my idea works. But this will have to wait a bit.</p>",
        "id": 410427607,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703852919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Sum.20over.201.2Fp.20diverges/near/410427517\">said</a>:</p>\n<blockquote>\n<p>But this would multiply the number of lemmas by n = #{Nat, Int, Rat, ....}.</p>\n</blockquote>\n<p>Yes, but that's fine because there are not so many such lemmas.</p>",
        "id": 410427629,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703852942
    },
    {
        "content": "<p>This is what the rest of mathlib already does.</p>",
        "id": 410427654,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703852968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"Complex.\", \"ofReal\"</p>",
        "id": 410427800,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703853066
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Complex/Basic.html#Complex.ofReal%27.delaborator\">Complex.ofReal'.delaborator</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Complex/Basic.html#Complex.ofReal%27\">Complex.ofReal'</a>, and <a href=\"https://loogle.lean-lang.org/?q=%22Complex.%22%2C%20%22ofReal%22\">108 more</a></p>",
        "id": 410427802,
        "sender_full_name": "loogle",
        "timestamp": 1703853067
    },
    {
        "content": "<p>OK, not all of them are relevant, but I suspect it is still quite a lot...</p>",
        "id": 410427820,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703853089
    },
    {
        "content": "<p>I've started a new thread <a href=\"#narrow/stream/287929-mathlib4/topic/Uniform.20way.20of.20saying.20there.20is.20a.20coercion.20to.20Real.3F/near/410442159\">here</a> to discuss this.</p>",
        "id": 410442203,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703862945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Sum.20over.201.2Fp.20diverges/near/410352321\">said</a>:</p>\n<blockquote>\n<p>I have now managed to produce a proof of the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"n\">BigOperators</span> <span class=\"n\">EulerProduct</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Nat.ArithmeticFunction</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">dirichletSeries_vonMangoldt_eq_neg_deriv_zeta_div_zeta</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.re</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑'</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">Λ</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">deriv</span> <span class=\"n\">riemannZeta</span> <span class=\"n\">s</span> <span class=\"bp\">/</span> <span class=\"n\">riemannZeta</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'll generalize this to Dirichlet L-series and clean up my code in the next days, before starting PRing it to Mathlib.</p>\n<p>To get from here to PNT, we need some version of the Wiener-Ikehara theorem and a proof that the zeta function does not vanish on Re = 1 (and the residue of the logarithmic derivative of zeta at 1).</p>\n</blockquote>\n<p>A status report:<br>\nI realized that it would make sense to build on the existing code for L-series and add more API (derivatives, products, convergence ...) and then deduce the result above from the existing relation between the von Mangoldt function and other arithmetic functions <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.ArithmeticFunction.vonMangoldt_mul_zeta#doc\">docs#Nat.ArithmeticFunction.vonMangoldt_mul_zeta</a> rather than from the Euler product. So I've been working on L-series for a bit, and my code is slowly converging, but will need some more time.</p>\n<p>Another question in this context (as L-series tend to converge conditionally in some vertical strip): Does Mathlib have a notion corresponding to the usual convergence of Nat-indexed series? I.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.InfiniteSum.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">HasSum_nat</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(plus relevant API lemmas, of course...)</p>",
        "id": 410724821,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704117220
    },
    {
        "content": "<p>I don't think we have this and furthermore I don't think we've ever needed it. Will <code>tsum</code> not work for your application?</p>",
        "id": 410727540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704119255
    },
    {
        "content": "<p><code>HasSum</code>, <code>Summable</code>, <code>tsum</code> and friends are about absolute convergence (at least when the target is finite-dimensional over the reals). So when the sum converges conditionally, but not absolutely, then the <code>tsum</code> will be zero.</p>",
        "id": 410727673,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704119368
    },
    {
        "content": "<p>I see -- you're thinking about sums such as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mn>1</mn><mi>s</mi></msup><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mn>3</mn><mi>s</mi></msup><mo>+</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mn>5</mn><mi>s</mi></msup><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mn>7</mn><mi>s</mi></msup><mo>+</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">1/1^s-1/3^s+1/5^s-1/7^s+\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.313em;\"></span><span class=\"minner\">⋯</span></span></span></span> and want to evaluate them at places like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">s=1/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/2</span></span></span></span>?</p>",
        "id": 410728243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704119812
    },
    {
        "content": "<p>no, we don't have separate definition for <code>Tendsto (∑ i in range ⋅, f i) atTop (nhds a)</code>.</p>",
        "id": 410730522,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704121509
    },
    {
        "content": "<p>What I would like to have in particular is the conclusion that the limit function is holomorphic on the domain of conditional convergence. Do we have theorems about holomorphicity of limits of holomorphic functions?</p>",
        "id": 410732156,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704122825
    },
    {
        "content": "<p>We have that uniform limits of holomorphic functions are holomorphic  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TendstoLocallyUniformlyOn.differentiableOn#doc\">docs#TendstoLocallyUniformlyOn.differentiableOn</a></p>",
        "id": 410741111,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1704130762
    },
    {
        "content": "<p>What I have done so far on L-series is <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts\">here</a>. (This is not on the newest Mathlib as of now, but I will update when cache is working again.)<br>\n<span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 410876619,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704215197
    },
    {
        "content": "<p>Presumably the idea is to PR everything to mathlib?</p>",
        "id": 410884755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704218769
    },
    {
        "content": "<p>I have now managed to obtain a sorry-free proof of the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Nat</span> <span class=\"n\">ArithmeticFunction</span>\n\n<span class=\"sd\">/-- A version of the *Wiener-Ikehara Tauberian Theorem*: If `f` is a nonnegative arithmetic</span>\n<span class=\"sd\">function whose L-series has a simple pole at `s = 1` with residue `A` and otherwise extends</span>\n<span class=\"sd\">continuously to the closed half-plane `re s ≥ 1`, then `∑ n &lt; N, f n` is asymptotic to `A*N`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">WienerIkeharaTheorem</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Set.EqOn</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">LSeries</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">A</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.re</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"n\">ContinuousOn</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">s.re</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"o\">((</span><span class=\"n\">Finset.range</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">PNT_vonMangoldt</span> <span class=\"o\">(</span><span class=\"n\">WIT</span> <span class=\"o\">:</span> <span class=\"n\">WienerIkeharaTheorem</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"o\">((</span><span class=\"n\">Finset.range</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>My current proofs of the analytic continuation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>ζ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\zeta&#x27;(s)/\\zeta(s) + 1/(s-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> and of the non-vanishing of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ζ</mi></mrow><annotation encoding=\"application/x-tex\">\\zeta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span></span></span></span> on the line <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Re</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Re}(s) = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Re</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> are a bit clunky, so I will try to polish them a bit before uploading then to my Euler Products repo.</p>",
        "id": 411079491,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704315272
    },
    {
        "content": "<p>So now somebody has to formalize a proof of Wiener-Ikehara <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 411085196,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704317483
    },
    {
        "content": "<p>Yep! That'll be part of my forthcoming blueprint...</p>",
        "id": 411085921,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1704317873
    },
    {
        "content": "<p>The code for the PNT reduction is now available <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts\">here</a>.</p>",
        "id": 411174664,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704368719
    },
    {
        "content": "<p>I have now refactored the proof of the non-vanishing of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ζ</mi></mrow><annotation encoding=\"application/x-tex\">\\zeta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Re</mi><mo>⁡</mo><mi>s</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Re} s = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Re</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> to use computations with big-O statements instead of working with explicit bounds. (The code is updated <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts\">here</a>.)</p>",
        "id": 417019034,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705780967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> Hey, is your <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>n</mi></msub><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><msup><mi>n</mi><mrow><mo>−</mo><mi>s</mi></mrow></msup><mo>=</mo><mo>−</mo><msup><mi>ζ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_n \\Lambda(n)n^{-s}=-\\zeta&#x27;(s)/\\zeta(s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.071em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> anywhere I can use for PNT?</p>",
        "id": 425462921,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709883196
    },
    {
        "content": "<p>I will also need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>n</mi></msub><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><msup><mi>n</mi><mrow><mo>−</mo><mi>s</mi></mrow></msup><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_n \\mu(n) n^{-s} = 1/\\zeta(s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.071em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span>, if you have that. From that the rest of my lemma should be easy c.f. <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Convolution.20of.20mu.20and.20Lambda/near/425460936\">other thread</a></p>",
        "id": 425463078,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709883285
    },
    {
        "content": "<p>Oh sorry, I should've checked EulerProduct.</p>",
        "id": 425463596,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709883578
    },
    {
        "content": "<p>The plan is to get this into Mathlib soon-ish.</p>",
        "id": 425466089,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709884823
    },
    {
        "content": "<p>I'm trying to use your EulerProducts to do the proofs. Does <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>n</mi></msub><msub><mi>a</mi><mi>n</mi></msub><msup><mi>n</mi><mrow><mo>−</mo><mi>s</mi></mrow></msup><mo>=</mo><msub><mo>∑</mo><mi>n</mi></msub><msub><mi>b</mi><mi>n</mi></msub><msup><mi>n</mi><mrow><mo>−</mo><mi>s</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_n a_n n^{-s} = \\sum_n b_n n^{-s}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.071em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.071em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span></span> (as L-series, so <code>L a = L b</code>) imply <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><msub><mi>b</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n = b_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>?<br>\nLean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 425782088,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710084596
    },
    {
        "content": "<p>I want to prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Λ</mi><mo>∗</mo><mi>μ</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(\\Lambda * \\mu)(n) = \\mu(n)\\log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, which should follow straightaway from <code>LSeries.deriv</code>, <code>LSeries_vonMangoldt_eq_deriv_riemannZeta_div</code>, and some product rule stuff, but in the end I have to compare coefficients, and I'm wondering if that's easy.</p>",
        "id": 425782392,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710084872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Sum.20over.201.2Fp.20diverges/near/425782392\">said</a>:</p>\n<blockquote>\n<p>I want to prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Λ</mi><mo>∗</mo><mi>μ</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(\\Lambda * \\mu)(n) = \\mu(n)\\log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, which should follow straightaway from <code>LSeries.deriv</code>, <code>LSeries_vonMangoldt_eq_deriv_riemannZeta_div</code>, and some product rule stuff, but in the end I have to compare coefficients, and I'm wondering if that's easy.</p>\n</blockquote>\n<p>I can't speak for EulerProducts, but as long as both series have a non-trivial domain of convergence then the claim is true.  (Proof: if the claim fails, then <code>find</code> the first natural number <code>m</code> where <code>a m ≠ b m</code>.  Then show that <code>m^s * (L a s - L b s)</code> converges to the non-zero quantity <code>a m - b m</code> as <code>s</code> goes to infinity, a contradiction.)</p>\n<p>In any event, uniqueness of Dirichlet series is fundamental enough that it ought to go into Mathlib, in my opinion.</p>",
        "id": 425783107,
        "sender_full_name": "Terence Tao",
        "timestamp": 1710085478
    },
    {
        "content": "<p>I guess you can use mellin transforms and reduce to a claim about holomorphic functions having only one power series</p>",
        "id": 425783111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710085483
    },
    {
        "content": "<p>That <code>f ↦ L f</code> is injective on <code>f</code> with <code>abscissaOfAbsConv f &lt; ⊤</code> should certainly be included in the LSeries part of Mathlib (but it currently isn't, also not in EulerProducts).</p>",
        "id": 425783312,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710085672
    },
    {
        "content": "<p>It's <em>possible</em> that some of the Perron formula machinery developed at the PNT project may be able to get this injectivity cheaply, though aesthetically this would be a weird way to proceed.  <span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span>, what do you think?</p>",
        "id": 425783503,
        "sender_full_name": "Terence Tao",
        "timestamp": 1710085824
    },
    {
        "content": "<p>I didn’t know LSeries is already in Mathlib, that’s amazing</p>",
        "id": 425784436,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710086672
    },
    {
        "content": "<p>Some things are there; more is on the way.</p>",
        "id": 425784452,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710086706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Sum.20over.201.2Fp.20diverges/near/425783503\">said</a>:</p>\n<blockquote>\n<p>It's <em>possible</em> that some of the Perron formula machinery developed at the PNT project may be able to get this injectivity cheaply, though aesthetically this would be a weird way to proceed.  <span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span>, what do you think?</p>\n</blockquote>\n<p>Oh, sure! If the L-series <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>∑</mo><msub><mi>a</mi><mi>n</mi></msub><mi mathvariant=\"normal\">/</mi><msup><mi>n</mi><mi>s</mi></msup></mrow><annotation encoding=\"application/x-tex\">L(f,s)=\\sum a_n /n^s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span> converges absolutely for some half-plane <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">ℜ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Re(s)&gt;\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">ℜ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>,  then we can already evaluate the Perron-type integral: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>π</mi><mi>i</mi><mo stretchy=\"false\">)</mo><msub><mo>∫</mo><mrow><mo stretchy=\"false\">(</mo><mi>σ</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msub><mi>L</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mfrac><msup><mi>X</mi><mi>s</mi></msup><mrow><mi>s</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mfrac><mi>d</mi><mi>s</mi><mo>=</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>&lt;</mo><mi>X</mi></mrow></msub><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">1/(2\\pi i) \\int_{(\\sigma+1)}L(s) \\frac{X^s}{s (s+1)} ds = \\sum_{n&lt;X} a_n (1 - n / X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.4418em;vertical-align:-0.5308em;\"></span><span class=\"mord\">1/</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">πi</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1692em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5308em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.911em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7385em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span>. So if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> is the first index for which <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo mathvariant=\"normal\">≠</mo><msub><mi>b</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n \\ne b_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>=</mo><mi>m</mi><mo>+</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">X=m+1/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/2</span></span></span></span>. Then the sums <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>&lt;</mo><mi>X</mi></mrow></msub><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{n&lt;X} a_n (1 - n / X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>&lt;</mo><mi>X</mi></mrow></msub><msub><mi>b</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{n&lt;X} b_n (1 - n / X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> differ only on the last term; this is incompatible with  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>L</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo separator=\"true\">,</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(f,s)=L(g,s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span>... Should be pretty easy to formalize that, I think?...</p>",
        "id": 425802703,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1710102098
    }
]