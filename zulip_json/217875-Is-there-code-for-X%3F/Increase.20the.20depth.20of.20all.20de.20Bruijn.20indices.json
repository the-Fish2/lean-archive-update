[
    {
        "content": "<p>Is there a function for increasing all De Bruijn indices in an <code>Expr</code> by 1?</p>\n<p>I'm building a tactic that converts a goal from <code>?m</code> to <code>let a := ...; ?m</code>, so all indices in <code>?m</code> would have to go up by 1.</p>",
        "id": 433076091,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1713039970
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.liftLooseBVars#doc\">docs#Lean.Expr.liftLooseBVars</a> but there are also higher-level interfaces such as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.mkLetFVars#doc\">docs#Lean.Meta.mkLetFVars</a>.</p>\n<p>Does <code>?m</code> refer to <code>a</code> at all? Do you want <code>?m</code> to have <code>a</code> in the local context? If so, then you need other approaches.</p>",
        "id": 433077513,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713041317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Increase.20the.20depth.20of.20all.20de.20Bruijn.20indices/near/433077513\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.liftLooseBVars#doc\">docs#Lean.Expr.liftLooseBVars</a> but there are also higher-level interfaces such as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.mkLetFVars#doc\">docs#Lean.Meta.mkLetFVars</a>.</p>\n<p>Does <code>?m</code> refer to <code>a</code> at all? Do you want <code>?m</code> to have <code>a</code> in the local context? If so, then you need other approaches.</p>\n</blockquote>\n<p>It doesn't need to have <code>a</code> in the local context, but out of curiosity how should it be done if <code>?m</code> needs to refer to <code>a</code>? What I was thinking of is to just refer to <code>a</code> by <code>.deBruijnIndex 0</code></p>",
        "id": 433077732,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1713041532
    },
    {
        "content": "<p>I'm not really understanding what you're wanting to do. But, one thing to know is that there's a lot of API to avoid ever having to ever use <code>.bvar 0</code> terms.</p>\n<p>Could you give an example of what the tactic would do in some concrete scenario?</p>",
        "id": 433078538,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713042289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Increase.20the.20depth.20of.20all.20de.20Bruijn.20indices/near/433078538\">said</a>:</p>\n<blockquote>\n<p>I'm not really understanding what you're wanting to do. But, one thing to know is that there's a lot of API to avoid ever having to ever use <code>.bvar 0</code> terms.</p>\n<p>Could you give an example of what the tactic would do in some concrete scenario?</p>\n</blockquote>\n<p>I want to build a tactic that makes the <code>motive</code> in functions such as <code>Nat.brecOn</code> a separate goal, so the tactic would transform a metavariable <code>?0: target</code> into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">?</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.brecOn</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">zero</span> <span class=\"bp\">?</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">...</span>\n\n<span class=\"bp\">?</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">target</span>\n<span class=\"nv\">?zero:</span> <span class=\"bp\">?</span><span class=\"mi\">1</span> <span class=\"mi\">0</span>\n<span class=\"nv\">?succ:</span> <span class=\"bp\">...</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">?</span><span class=\"mi\">1</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>where <code>n</code> is the value for which we want to prove that the motive holds. The <code>Nat.brecOn</code> gives <code>?1 n</code> as the resultant type and this unifies with <code>?0</code>.</p>",
        "id": 433078777,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1713042549
    },
    {
        "content": "<p>I'm not sure how you can assign a <code>motive</code> so that this <code>Nat.brecOn</code> assignment is type correct (also, by the way, <code>Nat.brecOn</code> has only one minor premise, not two).</p>\n<p>Do you mean \"tactic\" like syntax in a <code>by</code> block, or do you mean \"tactic\" like a <code>Meta</code> tactic? If it's the first, could you give a concrete example of how the tactic would look like in practice?</p>",
        "id": 433080124,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713044020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Increase.20the.20depth.20of.20all.20de.20Bruijn.20indices/near/433080124\">said</a>:</p>\n<blockquote>\n<p>I'm not sure how you can assign a <code>motive</code> so that this <code>Nat.brecOn</code> assignment is type correct (also, by the way, <code>Nat.brecOn</code> has only one minor premise, not two).</p>\n<p>Do you mean \"tactic\" like syntax in a <code>by</code> block, or do you mean \"tactic\" like a <code>Meta</code> tactic? If it's the first, could you give a concrete example of how the tactic would look like in practice?</p>\n</blockquote>\n<p>The reason I want to use <code>let ...;</code> is so that the type correctness could depend on the value of the motive.</p>\n<p>An example would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">g1</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">proposition</span> <span class=\"n\">of</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|-</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>and when the tactic acts on this goal <code>?g1</code>, it produces 3 goals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">?</span><span class=\"n\">motive</span>\n<span class=\"bp\">|-</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">?</span><span class=\"n\">zero</span>\n<span class=\"bp\">|-</span> <span class=\"bp\">?</span><span class=\"n\">motive</span> <span class=\"mi\">0</span>\n<span class=\"bp\">?</span><span class=\"n\">succ</span>\n<span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|-</span> <span class=\"bp\">?</span><span class=\"n\">motive</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">?</span><span class=\"n\">motive</span> <span class=\"n\">m.succ</span>\n</code></pre></div>\n<p>and it assigns <code>?g1</code> to the value</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.recOn</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">motive</span><span class=\"o\">}</span> <span class=\"n\">n</span> <span class=\"bp\">?</span><span class=\"n\">zero</span> <span class=\"bp\">?</span><span class=\"n\">succ</span>\n</code></pre></div>\n<p>Would this be possible?</p>",
        "id": 433086713,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1713051015
    }
]