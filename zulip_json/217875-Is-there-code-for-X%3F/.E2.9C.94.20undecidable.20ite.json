[
    {
        "content": "<p>Hello, is there a version of <code>ite</code> that does not require the condition to be decidable? Neither the \"then\" nor the \"else\" terms are computable in my case, so I'd only ever use it in proofs (as a specification for another function) anyway</p>",
        "id": 433373928,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1713210694
    },
    {
        "content": "<p>you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Classical.html#Classical.propDecidable\">Classical.propDecidable</a> (or just <code>open Classical in ...</code>)</p>",
        "id": 433374481,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713210849
    },
    {
        "content": "<p>If you want to force it to always use <code>Classical.dec</code>, you can override the notation. I copied and adjusted the built-in macro here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">ClassicalIf</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">Lean.withRef</span> <span class=\"n\">c</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">let_mvar</span><span class=\"bp\">%</span> <span class=\"bp\">?</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">wait_if_type_mvar</span><span class=\"bp\">%</span> <span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"bp\">@</span><span class=\"n\">ite</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">mvar</span> <span class=\"o\">(</span><span class=\"n\">Classical.dec</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ClassicalIf</span>\n</code></pre></div>\n<p>Then you can do <code>open ClassicalIf in ...</code> for particular declarations or <code>open scoped ClassicalIf</code> more generally.</p>",
        "id": 433375097,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713211050
    },
    {
        "content": "<p>The change was <code>ite $mvar $t $e</code> to <code>@ite _ $mvar (Classical.dec _) $t $e</code>)</p>",
        "id": 433375216,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713211084
    },
    {
        "content": "<p>Adam's suggestion is very reasonable though and probably what you want.</p>",
        "id": 433375309,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713211117
    },
    {
        "content": "<p>oooh I need to manually opt into classical logic<br>\n(I only used lean 3 until today)</p>",
        "id": 433375382,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1713211141
    },
    {
        "content": "<p>What Kyle suggests would be a great approach if you have some project you're working on and you want something global.</p>",
        "id": 433375395,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713211146
    },
    {
        "content": "<p>Lean3 also had <code>open_locale classical</code></p>",
        "id": 433375442,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713211167
    },
    {
        "content": "<p>I added <code>open scoped Classical</code> to my file and that fixed it, thank you</p>",
        "id": 433375917,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1713211293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373970\">Aaron Bies</span> has marked this topic as resolved.</p>",
        "id": 433375942,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713211300
    },
    {
        "content": "<p>(Since you're coming from Lean 3, the new feature in Lean 4 is that instances can be <code>scoped</code>, which prevents them from being instances until the namespaces is <code>open</code>ed. If you do <code>open scoped ...</code> rather than <code>open ...</code> then it only activates instances, rather than also including all the names. The <code>open_locale</code> did something similar, but it was a bit less easy to use.)</p>",
        "id": 433376103,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713211347
    }
]