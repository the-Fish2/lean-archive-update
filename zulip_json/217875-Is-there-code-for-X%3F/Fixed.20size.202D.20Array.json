[
    {
        "content": "<p>I've been trying to make a fixed size 2D Array in Lean that I can write get/set functions for (for now I've hard coded the size to 4x4). My current solution uses the Array structure. I'm trying to provide proofs that the indexes are in bounds but I'm having issues with the second layer of indexing. For the example Grid I was able to get around this with <code>aesop</code> but that doesn't seem to work in the get function. My current proof for that should work but for some reason the proof terms don't match up. Is there something I can do to fix this or should I try a different structure instead?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Interval</span><span class=\"bp\">.</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">Defs</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Interval</span><span class=\"bp\">.</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">Nat</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Grid</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">grid</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)))</span>\n<span class=\"w\">  </span><span class=\"n\">hheight</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">grid</span><span class=\"bp\">.</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"w\">  </span><span class=\"n\">hwidth</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">grid</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">row</span><span class=\"bp\">.</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">g_test</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Grid</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">grid</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"o\">,</span><span class=\"w\">   </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">],</span>\n<span class=\"w\">            </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">],</span>\n<span class=\"w\">            </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">],</span>\n<span class=\"w\">            </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">]]</span>\n<span class=\"w\">  </span><span class=\"n\">hheight</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span>\n<span class=\"w\">  </span><span class=\"n\">hwidth</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">aesop</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Grid</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Grid</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">grid</span><span class=\"o\">[</span><span class=\"n\">row</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">hheight</span><span class=\"o\">]))[</span><span class=\"n\">col</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">  </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">is_lt</span><span class=\"w\"> </span><span class=\"n\">col</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">hwidth</span>\n\n<span class=\"w\">  </span><span class=\"c\">/-</span>\n<span class=\"cm\">  tactic 'apply' failed, failed to unify</span>\n<span class=\"cm\">    grid[?m.3886] ∈ grid</span>\n<span class=\"cm\">  with</span>\n<span class=\"cm\">    grid[row] ∈ grid</span>\n<span class=\"cm\">  -/</span>\n<span class=\"w\">  </span><span class=\"c1\">--apply g.grid.getElem?_mem</span>\n\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"o\">})</span>\n</code></pre></div>",
        "id": 448166201,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1719776908
    },
    {
        "content": "<p>The issue is that you are using a different instance for array membership than the one used in <code>getElem?_mem</code>. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">get_mem</span><span class=\"w\"> </span><span class=\"bp\">..⟩</span>\n</code></pre></div>",
        "id": 448166856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719777494
    }
]