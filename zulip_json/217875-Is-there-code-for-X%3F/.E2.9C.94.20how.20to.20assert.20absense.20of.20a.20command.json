[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">Scoped</span>\n\n<span class=\"w\">  </span><span class=\"n\">scoped</span><span class=\"w\"> </span><span class=\"n\">macro</span><span class=\"w\"> </span><span class=\"s2\">\"#greet\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"hello, world!\"</span><span class=\"o\">)</span>\n\n<span class=\"w\">  </span><span class=\"c1\">-- greet  command is visible</span>\n<span class=\"w\">  </span><span class=\"bp\">#</span><span class=\"n\">greet</span>\n\n<span class=\"kd\">end</span><span class=\"w\"> </span><span class=\"n\">Scoped</span>\n</code></pre></div>",
        "id": 447521065,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719505905
    },
    {
        "content": "<p>Using <code>#greet</code> outside the <code>Scoped</code> namespace will result in the error <code>unexpected token '#'; expected command</code>, which cannot be disabled with <code>#guard_msgs</code>.</p>",
        "id": 447521471,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719506031
    },
    {
        "content": "<p>I am writing Lean documentation and sometimes I want to make sure that a Name that is not recognised as a command or identifier is not actually recognised there.</p>",
        "id": 447523410,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719506597
    },
    {
        "content": "<p>what I want is such like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">``#</span><span class=\"n\">greet</span>\n<span class=\"w\">  </span><span class=\"c1\">-- run greet and fail</span>\n</code></pre></div>",
        "id": 447526996,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719507324
    },
    {
        "content": "<p>the easiest solution is: (but this is not ideal)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">Scoped</span>\n\n<span class=\"w\">  </span><span class=\"n\">scoped</span><span class=\"w\"> </span><span class=\"n\">macro</span><span class=\"w\"> </span><span class=\"s2\">\"greet\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"hello, world!\"</span><span class=\"o\">)</span>\n\n<span class=\"w\">  </span><span class=\"c1\">-- you can use greet command</span>\n<span class=\"w\">  </span><span class=\"n\">greet</span>\n\n<span class=\"kd\">end</span><span class=\"w\"> </span><span class=\"n\">Scoped</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check_failure</span><span class=\"w\"> </span><span class=\"n\">greet</span>\n</code></pre></div>",
        "id": 447530719,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719508122
    },
    {
        "content": "<p>This also fails.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">Scoped</span>\n\n<span class=\"w\">  </span><span class=\"n\">scoped</span><span class=\"w\"> </span><span class=\"n\">macro</span><span class=\"w\"> </span><span class=\"s2\">\"greet\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"hello, world!\"</span><span class=\"o\">)</span>\n\n<span class=\"w\">  </span><span class=\"c1\">-- you can use greet command</span>\n<span class=\"w\">  </span><span class=\"n\">greet</span>\n\n<span class=\"kd\">end</span><span class=\"w\"> </span><span class=\"n\">Scoped</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span>\n\n<span class=\"kd\">run_cmd</span><span class=\"w\"> </span><span class=\"n\">elabCommand</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">greet</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 447631230,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719540849
    },
    {
        "content": "<p>See <code>assert_not_exists</code> for declarations (not relevant for commands).</p>",
        "id": 447649013,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719547688
    },
    {
        "content": "<p>‘assert_not_exists #greet’ does not work.</p>",
        "id": 447651926,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719549297
    },
    {
        "content": "<p>Like I said, only for declarations, not commands.</p>",
        "id": 447663695,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719553706
    },
    {
        "content": "<p>(See usages in Mathlib.)</p>",
        "id": 447663728,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719553726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> Thank you. I find this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"s2\">\"#greet\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">Scoped</span>\n\n<span class=\"w\">  </span><span class=\"n\">scoped</span><span class=\"w\"> </span><span class=\"n\">macro</span><span class=\"w\"> </span><span class=\"s2\">\"#greet\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"hello, world!\"</span><span class=\"o\">)</span>\n\n<span class=\"w\">  </span><span class=\"c1\">-- greet  command is visible</span>\n<span class=\"w\">  </span><span class=\"bp\">#</span><span class=\"n\">greet</span>\n\n<span class=\"kd\">end</span><span class=\"w\"> </span><span class=\"n\">Scoped</span>\n\n<span class=\"sd\">/-- error: elaboration function for '«command#greet»' has not been implemented -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"n\">greet</span>\n</code></pre></div>",
        "id": 447935267,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719642378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 447935293,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719642400
    }
]