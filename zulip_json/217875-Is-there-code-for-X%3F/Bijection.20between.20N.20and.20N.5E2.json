[
    {
        "content": "<p>I am working to define refinement of partition given two partitions where partitions are function from N to set \\alpha. I have found such a bijection in the form of , and trying to prove associated theorems linv and rinv: </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Floor</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">pairing_function</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"m\">2</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">inverse_pairing_function</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">floor</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">linv</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">LeftInverse</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inverse_pairing_function</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">pairing_function</span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">rinv</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RightInverse</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inverse_pairing_function</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">pairing_function</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there some easy solution to the two theorems I mention, or is there some bijection with relative forward and backward functions and relative theorem about them being inverse of each other?</p>",
        "id": 445711281,
        "sender_full_name": "Pietro Lavino",
        "timestamp": 1718834992
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.pairEquiv#doc\">docs#Nat.pairEquiv</a> is one such bijection that already exists</p>",
        "id": 445711405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718835013
    },
    {
        "content": "<p>thanks!</p>",
        "id": 445712139,
        "sender_full_name": "Pietro Lavino",
        "timestamp": 1718835345
    },
    {
        "content": "<p>I didn't check; is it the same bijection?</p>",
        "id": 445712214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718835366
    },
    {
        "content": "<p>Ah, here's how to check</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n<span class=\"c1\">--- ...</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">pairing_function</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">![![0, 2, 5, 9, 14],</span>\n<span class=\"cm\">  ![1, 4, 8, 13, 19],</span>\n<span class=\"cm\">  ![3, 7, 12, 18, 25],</span>\n<span class=\"cm\">  ![6, 11, 17, 24, 32],</span>\n<span class=\"cm\">  ![10, 16, 23, 31, 40]]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 445712433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718835491
    },
    {
        "content": "<p>Your function does seem like it would be quite nice to have somewhere</p>",
        "id": 445712559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718835572
    },
    {
        "content": "<p>Why do you think it would be any better than what you sent as it already includes the information of them being inverses if each other?</p>",
        "id": 445713088,
        "sender_full_name": "Pietro Lavino",
        "timestamp": 1718835868
    },
    {
        "content": "<p>If all you need is <em>any</em> bijection, then the one I link is fine. It's at least conceivable that you want that specific bijection in some situations though!</p>",
        "id": 445721223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718840109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"710677\">@Pietro Lavino</span> you may want to see this article (Japanese) </p>\n<p><a href=\"https://zenn.dev/leanja/articles/cantor_pairing\">https://zenn.dev/leanja/articles/cantor_pairing</a></p>",
        "id": 445751229,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718854361
    },
    {
        "content": "<p>this article is on Cantor pairing function and its inverse!</p>",
        "id": 445751307,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718854396
    },
    {
        "content": "<p>Please ignore Japanese comments and just read code example.</p>",
        "id": 445751422,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718854450
    }
]