[
    {
        "content": "<p>Solving this <a href=\"https://dmoj.ca/problem/ccc20j2\">DMOJ Problem</a> involves iterating on a function until it reaches a constant threshold, and returning how many steps it took. This is my solution for it in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--</span>\n<span class=\"c1\">--    author:  bernborgess</span>\n<span class=\"c1\">--    problem: Epidemiology - lean-learn</span>\n<span class=\"c1\">--    created: 20.February.2024 11:30:33</span>\n<span class=\"c1\">--</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">IO</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getLine</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getStdin</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getLine</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trim</span>\n<span class=\"kd\">def</span> <span class=\"n\">readLn</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getLine</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">epidemic</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">N</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">S</span> <span class=\"bp\">&gt;</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">X</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">N</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">X</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">R</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">X</span>\n  <span class=\"k\">else</span> <span class=\"n\">epidemic</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">*</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">+</span><span class=\"n\">N</span><span class=\"bp\">*</span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">epidemic</span> <span class=\"n\">P</span> <span class=\"n\">N</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"n\">S</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"bp\">←</span> <span class=\"n\">readLn</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"bp\">←</span> <span class=\"n\">readLn</span>\n  <span class=\"k\">let</span> <span class=\"n\">R</span> <span class=\"bp\">←</span> <span class=\"n\">readLn</span>\n  <span class=\"n\">println</span> <span class=\"bp\">$</span> <span class=\"n\">epidemic</span> <span class=\"n\">P</span> <span class=\"n\">N</span> <span class=\"n\">R</span> <span class=\"mi\">0</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>It is a simple concept but I think may be useful for many iterating functions. Note that my <code>epidemic</code> function did not prove its termination properly, what I am trying to do next. Since the <code>S</code> value always increases it is certain that it will surpass the constant <code>P</code> eventually.</p>\n<p>However, my attempt at proving it is incomplete. This is the current work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">epidemic_terminates</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">N</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">&gt;</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">+</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">P</span>              <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">R</span>          <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">P</span>                  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt_imp_ge</span> <span class=\"n\">P</span> <span class=\"n\">S</span> <span class=\"n\">h1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span>                   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">not_eq_zero_imp_gt_zero</span> <span class=\"n\">P</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"n\">h2</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">R</span>                   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">not_eq_zero_imp_gt_zero</span> <span class=\"n\">P</span> <span class=\"n\">R</span> <span class=\"n\">P</span> <span class=\"n\">h3</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">R</span>               <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.mul_pos</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">R</span>           <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_add_of_pos_right</span> <span class=\"n\">h4</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P</span>           <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.sub_lt_right_of_lt_add</span> <span class=\"n\">ha</span> <span class=\"n\">h5</span>\n  <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">R</span> <span class=\"bp\">-</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"n\">S</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">tsub_lt_tsub_right_of_le</span> <span class=\"n\">hb</span> <span class=\"n\">h6</span>\n  <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">R</span> <span class=\"bp\">+</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.sub_sub</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">*</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h7</span>\n  <span class=\"k\">have</span> <span class=\"n\">h9</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">+</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h8</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h9</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>Note <code>ha</code> and <code>hb</code> that I could't prove. Can we finish this proof as is? Or even, can the decreasing measure be changed for another that is better to be proved? I am once again asking for your termination help! <span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span></p>",
        "id": 422680490,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708540084
    },
    {
        "content": "<p>As stated, I do not think that your result is true: if <code>P = S</code>, your conclusion seems to be <code>0 &lt; 0</code>.</p>",
        "id": 422682611,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708540934
    },
    {
        "content": "<p>Putting that assumption is, you can prove your result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">epidemic_terminates</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">N</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">&gt;</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hPS</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">==</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>  <span class=\"c1\">-- &lt;-- note the extra assumption</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">+</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_lt_sub_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">omega</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 422683396,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708541257
    },
    {
        "content": "<p>Very nice! Now I can just add an extra <code>else if S == P then X + 1</code> in the code.<br>\nThen I just need to convert <code>h : ¬(S == P) = true</code> to <code>S ≠ P</code></p>",
        "id": 422685221,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708541913
    },
    {
        "content": "<p>you can probably rewrite with <code>LawfulBeq.eq_of_beq</code></p>",
        "id": 422688152,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708543019
    },
    {
        "content": "<p>or <code>Nat.eq_of_beq_eq_true</code></p>\n<p>or just use <code>=</code> instead of <code>==</code> from the beginning</p>",
        "id": 422688431,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708543149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"671510\">@Bernardo Borges</span> I edited the code above to the shape of the hypothesis that you want.  <code>simp</code> takes care of the rewrite to a more idiomatic form.</p>",
        "id": 422688463,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708543168
    },
    {
        "content": "<p>Thank you both! <span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> I didn't know I could use <code>=</code> for the equality test, so that's good to know. The proof works now, but is there a way to extract the proof from Matlib, or prove without using it? I say it because it is not allowed in the DMOJ version of Lean <code>/tmp/tmpqqouf4qa/ccc20j2.lean:6:0: error: unknown package 'Mathlib'</code></p>",
        "id": 422692894,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708544504
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--</span>\n<span class=\"c1\">--    author:  bernborgess</span>\n<span class=\"c1\">--    problem: Epidemiology - lean-learn</span>\n<span class=\"c1\">--    created: 20.February.2024 11:30:33</span>\n<span class=\"c1\">--</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span> <span class=\"c1\">-- &lt;-- sadly I can't use it in DMOJ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">IO</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getLine</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getStdin</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getLine</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trim</span>\n<span class=\"kd\">def</span> <span class=\"n\">readLn</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getLine</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">epidemic</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">N</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">S</span> <span class=\"bp\">&gt;</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">X</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">X</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">X</span>\n  <span class=\"k\">else</span> <span class=\"n\">epidemic</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">*</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">+</span><span class=\"n\">N</span><span class=\"bp\">*</span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">epidemic</span> <span class=\"n\">P</span> <span class=\"n\">N</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"n\">S</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_lt_sub_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">omega</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"bp\">←</span> <span class=\"n\">readLn</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"bp\">←</span> <span class=\"n\">readLn</span>\n  <span class=\"k\">let</span> <span class=\"n\">R</span> <span class=\"bp\">←</span> <span class=\"n\">readLn</span>\n  <span class=\"n\">println</span> <span class=\"bp\">$</span> <span class=\"n\">epidemic</span> <span class=\"n\">P</span> <span class=\"n\">N</span> <span class=\"n\">R</span> <span class=\"mi\">0</span> <span class=\"n\">N</span>\n</code></pre></div>",
        "id": 422693241,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708544565
    },
    {
        "content": "<p>You can use this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">epidemic_terminates</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">N</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">&gt;</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hPS</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">==</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>  <span class=\"c1\">-- &lt;-- note the extra assumption</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">+</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P</span> <span class=\"bp\">-</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">beq_iff_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_lt_sub_left</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">Nat.ge_of_not_lt</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n  <span class=\"bp\">·</span> <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.add_zero</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.add_lt_add_left</span> <span class=\"o\">(</span><span class=\"n\">Nat.mul_pos</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">N</span>\n      <span class=\"bp\">·</span> <span class=\"n\">contradiction</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.succ_pos</span>\n    <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">R</span>\n      <span class=\"bp\">·</span> <span class=\"n\">contradiction</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.succ_pos</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 422695534,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708545388
    },
    {
        "content": "<p>Very nice! From this proof I also take a lot of things, for instance <code>‹_›</code> looks very useful for using the implicit assumptions. Also, I am trying to learn how to write proofs in such constructive ways, you used no <code>have</code>s</p>",
        "id": 422697367,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708546138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671510\">Bernardo Borges</span> has marked this topic as resolved.</p>",
        "id": 422698026,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708546405
    }
]