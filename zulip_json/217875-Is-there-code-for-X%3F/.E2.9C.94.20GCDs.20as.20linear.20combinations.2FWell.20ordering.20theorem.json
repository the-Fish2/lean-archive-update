[
    {
        "content": "<p>I'm writing a proof that requires the statement <code>(a b : ℤ) : ∃ s t : ℤ, a.gcd b = s * a + t * b</code>. I can't seem to find it in Mathlib so I'll have to prove it. However, the proof I know uses the Well-Ordering Theorem, and while I can find something related to Well orders on Nat (<code>Nat.lt.isWellOrder</code>), I'm not sure how to adapt it to the definition I'm used to (for every set of natural numbers, there is a minimal element).<br>\nIs there:</p>\n<ol>\n<li>A proof of the original statement in Mathlib?</li>\n<li>A proof that doesn't need the well-ordering theorem?</li>\n<li>A way to get the well ordering theorem I'm used to?</li>\n</ol>",
        "id": 445472175,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1718749510
    },
    {
        "content": "<ol>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.gcd_eq_gcd_ab#doc\">docs#Int.gcd_eq_gcd_ab</a></li>\n<li>I don't think there is a such a proof</li>\n<li><code>wellFounded_lt.min s hs</code> where <code>s : Set ℕ</code>, <code>hs : s.Nonempty</code> is the minimal element of <code>s</code>. See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WellFounded.min#doc\">docs#WellFounded.min</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=wellFounded_lt#doc\">docs#wellFounded_lt</a>.</li>\n</ol>",
        "id": 445472359,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718749619
    },
    {
        "content": "<p>Ah I must have missed that gcd one. Thanks for the help!</p>",
        "id": 445474209,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1718750640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"632788\">shortc1rcuit</span> has marked this topic as resolved.</p>",
        "id": 445655802,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718815251
    }
]