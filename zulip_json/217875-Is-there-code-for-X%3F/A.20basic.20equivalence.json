[
    {
        "content": "<p>I need the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Defs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">s.1</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x.1.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">⟩,</span> <span class=\"n\">x.1.2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x.1.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">⟩,</span> <span class=\"n\">x.1.2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The proof is so simple that I thought I could construct it from the results in <code>Mathlib.Logic.Equiv.Basic</code>, but I couldn't find a simple way of doing it. Am I missing something? Is it worth adding?</p>",
        "id": 437968727,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1715341426
    },
    {
        "content": "<p>This is quite close to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.subtypeProdEquivProd#doc\">docs#Equiv.subtypeProdEquivProd</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.subtypeProdEquivSigmaSubtype#doc\">docs#Equiv.subtypeProdEquivSigmaSubtype</a> but I don't think it follows trivially from either, so I think it would be good to add it.</p>",
        "id": 437970843,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1715342545
    },
    {
        "content": "<p>Yeah, I tried to use these two equivalences to get the result I wanted but I could not make it work.</p>",
        "id": 437971088,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1715342663
    },
    {
        "content": "<p>This one <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.subtypeSigmaEquiv#doc\">docs#Equiv.subtypeSigmaEquiv</a> is also very close.</p>",
        "id": 437971534,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1715342909
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12802\">#12802</a></p>",
        "id": 437988359,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1715350128
    }
]