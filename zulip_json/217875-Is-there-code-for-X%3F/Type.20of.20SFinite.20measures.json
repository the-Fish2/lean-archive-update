[
    {
        "content": "<p>How would I denote the type of SFinite measures on a monoid M? I'm interested in establishing that these form a MulZeroOneClass (or a related structure), but I cannot write <code>MulZeroOneClass (Measure M)</code>, as that would not use the restriction that the measures should be SFinite. Is there some way to restrict this to some prop? The following shows my idea, but I know that this is not the way to go, as SFiniteMeas is a set of measures here. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Constructions.Prod.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.MeasureSpace</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Measure</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SFiniteMeas</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Measure</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"bp\">|</span> <span class=\"n\">SFinite</span> <span class=\"n\">μ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableMul₂</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"o\">(</span><span class=\"n\">SFiniteMeas</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410648248,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704043550
    },
    {
        "content": "<p>If we're going to use more measure subtypes, then we may want to do the <code>FunLike</code> refactor for (outer) measures.</p>",
        "id": 410648833,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704044228
    },
    {
        "content": "<p>So you mean that it is better to wait until that is added? I'm fine with waiting a bit with adding this.</p>",
        "id": 410649053,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704044484
    },
    {
        "content": "<p>As a temporary solution, you may use <code>def SFiniteMeasure (α : Type*) [MeasurableSpace M] : Type _ := {μ // SFinite μ}</code></p>",
        "id": 410649173,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704044638
    },
    {
        "content": "<p>You can define a type of SFinite measures like that, and show some properties of it. But I am not sure that defining such a type is really useful. For example, we only defined a type for finite measures because we wanted to put a topology on the space of finite measures, and for everything else we just work on a measure together with the <code>IsFiniteMeasure</code> property.</p>\n<p>What makes you want a new type, instead of simply proving things about measures with the <code>SFinite</code> property?</p>",
        "id": 410649582,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1704045121
    },
    {
        "content": "<p>I just thought it would be nice to encode the basic properties of convolution of measures (has a 0, has a 1, acts as a multiplication) in something like a MulZeroOneClass, I didn't have a particular goal in mind yet. The reason for this is that in order to get the results that I currently have in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9372\">#9372</a>, you'd need to assume that the measures are SFinite; which is why I thought it would be nice to encode it in a type in the first place.</p>",
        "id": 410650068,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704045606
    },
    {
        "content": "<p>I think it is better that I don't think too much about these things at this point anyway and just focus on building some more results for convolutions.</p>",
        "id": 410650108,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1704045639
    }
]