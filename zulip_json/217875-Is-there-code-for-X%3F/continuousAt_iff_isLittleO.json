[
    {
        "content": "<p>Is this missing from the library? (It's easy to chain together, but is it worth adding separately?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">continuousAt_iff_isLittleO</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">ContinuousAt</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"bp\">ùìù</span> <span class=\"n\">z</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 411278454,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1704411209
    },
    {
        "content": "<p>(Of course more generally than ‚ÑÇ...)</p>",
        "id": 411278477,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1704411234
    },
    {
        "content": "<p>Also something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Asymptotics.tendsto_zero_iff_isLittleO</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedRing</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Filter.Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 411279020,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1704411551
    },
    {
        "content": "<p>I was looking for very similar statements just yesterday, so +1 from me!</p>",
        "id": 411350981,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704453255
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Asymptotics.isLittleO_one_iff#doc\">docs#Asymptotics.isLittleO_one_iff</a> do the trick?</p>",
        "id": 411361780,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1704457659
    },
    {
        "content": "<p>Argh... I wish <code>exact?</code> could've found it... :(</p>",
        "id": 411386735,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1704468250
    },
    {
        "content": "<p>How about the other one, is this worth adding?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">continuousAt_iff_isLittleO</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">ContinuousAt</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"bp\">ùìù</span> <span class=\"n\">z</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">Asymptotics.isLittleO_one_iff</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"bp\">ùìù</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Iff.symm</span> <span class=\"n\">tendsto_sub_nhds_zero_iff</span>\n</code></pre></div>",
        "id": 411387313,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1704468471
    },
    {
        "content": "<p>Is there a bug in this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Asymptotics.isLittleO_one_iff</span><span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Norm</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormOneClass</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"n\">f'</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What does <code>F</code> have to do with anything? The map <code>f'</code> goes from <code>Œ± ‚Üí E'</code>, the filter is on <code>Œ±</code>; why is it asking me about <code>F</code>?...</p>",
        "id": 411389255,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1704469203
    },
    {
        "content": "<p>That's <code>1 : F</code></p>",
        "id": 411389726,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704469379
    },
    {
        "content": "<p>if you click the source code you'll see it.</p>",
        "id": 411389752,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704469388
    },
    {
        "content": "<p>Ah, thanks. So I can set <code>F := E'</code> in applications... I guess that level of generality makes sense...</p>",
        "id": 411389904,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1704469449
    },
    {
        "content": "<p>That's also the reason <code>F</code> is an explicit argument (i.e., the RHS of the iff doesn't reference it).</p>",
        "id": 411389932,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704469465
    },
    {
        "content": "<p>So is this a good thing to add?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Asymptotics</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">continuousAt_iff_isLittleO</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedRing</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormOneClass</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">ContinuousAt</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">Asymptotics.isLittleO_one_iff</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Iff.symm</span> <span class=\"n\">tendsto_sub_nhds_zero_iff</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Asymptotics</span>\n</code></pre></div>",
        "id": 411390829,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1704469864
    },
    {
        "content": "<p>Looks good. I can't find it.</p>",
        "id": 411391729,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704470222
    },
    {
        "content": "<p>Potentially just use a generic constant instead of <code>1</code> for convenience (or add both versions).</p>",
        "id": 411392083,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704470362
    }
]