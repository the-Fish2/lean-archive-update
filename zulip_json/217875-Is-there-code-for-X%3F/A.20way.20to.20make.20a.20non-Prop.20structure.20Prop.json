[
    {
        "content": "<p>In the proof of Rubin's theorem, I have this awkward structure, where <code>IsAlgebraicallyDisjoint f g</code> means <code>∀ h, ¬Commute f h → BigThing g h</code> and where <code>BigThing</code> translates to \"there exists a pair <code>i₁, i₂</code> such that <code>i₁</code>, <code>i₂</code> and <code>⁅i₁, ⁅i₂, h⁆⁆</code> commute with <code>g</code> and <code>⁅i₁, ⁅i₂, h⁆⁆ ≠ 1</code>\".</p>\n<p>Obviously I can't just have one big equation with everything, but at the same time I can't see an easy way to split this relationship into multiples parts.<br>\nThe \"cleanest\" solution I had found so far was to create a separate structure for <code>BigThing</code>, which stores <code>i₁</code>, <code>i₂</code> and their properties.</p>\n<p>My issue is that <code>BigThing</code> is then not a Prop (it contains data), and so <code>IsAlgebraicallyDisjoint f g</code> isn't a Prop either, so I can't use it in <code>Iff</code> relationships, for instance. I know I'll never need to compute what's in this pair <code>i₁, i₂</code>.</p>\n<p>Is there a clean way to make <code>IsAlgebraicallyDisjoint</code> a Prop? Right now the best I can come up with is to have <code>∃ _ : BigThing g h, True</code></p>",
        "id": 416657243,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705615510
    },
    {
        "content": "<p>The typical way would be to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nonempty#doc\">docs#Nonempty</a>. Internally it would be exactly the same trick, but it has a nicer API</p>",
        "id": 416657703,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705615723
    },
    {
        "content": "<p>Another way is to create a <code>Prop</code>-values <code>IsBigThing g h i₁ i₂</code> and use <code>∀ h, ¬Commute f h → ∃ i₁ i₂, IsBigThing g h i₁ i₂</code>. The choice between 2 approaches depends on how you want to deal with API about <code>BigThing</code> do you want it to contain data or pass <code>i₁, i₂</code> as implicit arguments around?</p>",
        "id": 416663259,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705618470
    },
    {
        "content": "<p>E.g., if you're going to prove something assuming <code>(h : IsBigThing g h i₁ i₂) (h' : IsBigThing g h i₂ i₃)</code>, then it looks much better like this, not like <code>(a b : BigThing g h) (hab : a.i2 = b.i1)</code>.</p>",
        "id": 416663804,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705618734
    },
    {
        "content": "<p>I don't need to know about the contents of <code>BigThing</code> outside of any proof, really</p>",
        "id": 416666992,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705620275
    },
    {
        "content": "<p>Could you use an <code>imductive</code> with a single constructor rather than a structure? Then you can let it live in <code>Prop</code>.</p>",
        "id": 416763306,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705665505
    },
    {
        "content": "<p>Do you mean something different from using <code>structure A : Prop where ...</code> syntax? That's a Prop-valued structure.</p>",
        "id": 416763705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705665671
    },
    {
        "content": "<p>Oh right, I forgot that this isn't allowed if the fields aren't themselves Props</p>",
        "id": 416763744,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705665693
    },
    {
        "content": "<p>Right, that’s what I tried and found too. But</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">BigThing</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i1</span> <span class=\"n\">i2</span><span class=\"o\">,</span> <span class=\"bp\">…</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">BigThing</span>\n</code></pre></div>\n<p>does work and at least gives you pattern-matching syntax. Although not much is gained over</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">BigThing</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">i1</span> <span class=\"n\">i2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">…</span> <span class=\"bp\">\\</span><span class=\"n\">and</span> <span class=\"bp\">…</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I guess.</p>",
        "id": 416766913,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705667053
    },
    {
        "content": "<p><code>Nonempty</code> is exactly defined as a forgetful inductive type :)</p>",
        "id": 416832151,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705685672
    }
]