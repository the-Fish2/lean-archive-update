[
    {
        "content": "<p>i'd like to be able to talk about Primitivity of a group action as \"if the action preserves an equivalence relation, then it's top or bottom\". i know there is an ordering on relations, but that gives a bad value for Bottom (as that will be the relation that is always false, which is not an equivalence). i've taken a bit of a look in what there is and it seems to be the case that that currently <code>Equivalence r</code> would be more appropriately named <code>IsEquivalence r</code>. my guess would be that in order to make this ordering on equivalencerelations make sense, we need a proper type for equivalences on a type? maybe make a subtype for this?</p>\n<p>i'm guessing this can take these two shapes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Equivalence1</span> <span class=\"n\">where</span>\n  <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">all</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rel</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">all</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rel</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">rel</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">all</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">rel</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">rel</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">rel</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Equivalence2</span> <span class=\"o\">:</span> <span class=\"n\">CompleteSubLattice</span> <span class=\"o\">():=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- .... {r : T -&gt; T -&gt; Prop // IsEquivalence r}</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>any advice on how i should go about this?</p>\n<p>for reference, my current definition for <code>IsPrimitiveAction</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"bp\">Ω</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">PrimitiveActionClass</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">is_primitive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 438042277,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1715373112
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Setoid#doc\">docs#Setoid</a> has this lattice structure</p>",
        "id": 438053063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715378958
    },
    {
        "content": "<p>ahh, thanks!</p>",
        "id": 438053198,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1715379022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as resolved.</p>",
        "id": 438053209,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715379027
    }
]