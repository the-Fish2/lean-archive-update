[
    {
        "content": "<p>If <code>F : ℝ × ℝ → ℂ</code> is a function with <code>continuousOn F S</code> and <code>F_supp: F.support ⊆ S</code>, where <code>ST : S ⊆ T</code> and <code>T_comp : IsCompact T</code> (in fact, in my use case, <code>S</code> is open and <code>T</code> is its closure), is there a good way to conclude that <code>Integrable F</code>? Using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">integrableOn_iff_integrable_of_support_subset</span> <span class=\"n\">F_supp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div>\n<p>reduces this to <code>Integrable F S</code> (and I'm not sure how to proceed), while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">integrableOn_iff_integrable_of_support_subset</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">subset_trans</span> <span class=\"n\">F_supp</span> <span class=\"n\">ST</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n<span class=\"n\">refine</span> <span class=\"n\">ContinuousOn.integrableOn_compact</span> <span class=\"n\">T_comp</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div>\n<p>reduces it to <code>ContinuousOn F T</code> (and I think this might be false in general). Am I missing something?</p>",
        "id": 428183299,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1711042459
    },
    {
        "content": "<p>What about <code>F x = 1/x</code> if <code>x</code> is in <code>S = (0, 1)</code> and <code>0</code> elsewhere? It is continuous on <code>S</code>, zero outside, and yet it is not integrable.</p>",
        "id": 428184997,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1711043028
    },
    {
        "content": "<p>Ah I see, then I abstracted away too much. So how about this particular case?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.IntegralEqImproper</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">DeltaSpike</span> <span class=\"o\">(</span><span class=\"bp\">Ψ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Ψ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"bp\">Ψ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">supp</span><span class=\"bp\">Ψ</span> <span class=\"o\">:</span> <span class=\"bp\">Ψ.</span><span class=\"n\">support</span> <span class=\"bp\">⊆</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">diff</span><span class=\"bp\">Ψ</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"bp\">Ψ</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">εpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.re</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">DeltaSpike</span> <span class=\"bp\">Ψ</span> <span class=\"n\">ε</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">Function.uncurry</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">IntegrableOn</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"mi\">0</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Ioi</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">Ioc</span> <span class=\"mi\">0</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Icc</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Icc</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">T_comp</span> <span class=\"o\">:</span> <span class=\"n\">IsCompact</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">IsCompact.prod</span> <span class=\"n\">isCompact_Icc</span> <span class=\"n\">isCompact_Icc</span>\n  <span class=\"k\">have</span> <span class=\"n\">F_supp</span> <span class=\"o\">:</span> <span class=\"n\">F.support</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- this is not hard to show</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">integrableOn_iff_integrable_of_support_subset</span> <span class=\"n\">F_supp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 428209385,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1711052071
    },
    {
        "content": "<p>Not your question, but note that <code>(f : ℝ → ℂ := fun x ↦ DeltaSpike Ψ ε x)</code> is not the same as<br>\n<code>let f : ℝ → ℂ := fun x ↦ DeltaSpike Ψ ε x</code>, and you probably mean the latter.</p>",
        "id": 428210876,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711052618
    },
    {
        "content": "<p>I believe that the key is that <code>F</code> is bounded in <code>y</code> and integrable in <code>x</code>, so <code>MeasureTheory.integrable_prod_iff</code> could be used; I'm not sure how to prove its assumption <code>AEStronglyMeasurable F (Measure.prod volume volume)</code> though.</p>",
        "id": 428417352,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1711146060
    }
]