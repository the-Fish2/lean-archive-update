[
    {
        "content": "<p>i seem to recall reading that there is a tactic for this, but i can't find it...</p>\n<p>concretely, i'd like something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">hyp</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">∧</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">.</span> <span class=\"n\">save_goal_to_use_later</span> <span class=\"n\">name</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"n\">name</span>\n</code></pre></div>",
        "id": 432739996,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712851383
    },
    {
        "content": "<p>i found the tactic i was thinking of. it is <code>abstract</code>, but it seems to no longer be available in lean4? is there some equivalent to this?</p>",
        "id": 432742171,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712851993
    },
    {
        "content": "<p>alternatively, perhaps it might be nice to allow something along the lines of <code>have h1 : ⊢ := foo</code> such that the type of <code>h1</code> is the main goal, and the main goal is immediately closed afterwards?</p>",
        "id": 432742701,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712852167
    },
    {
        "content": "<p>I think the usual thing would be to write <code>have</code> earlier in the script before focusing on a subgoal like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">∧</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">name</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"n\">name</span>\n</code></pre></div>\n<p>I think it would make proofs less modular if the proof of one subgoal could add hypothesis to another, so I don't think <code>save_goal_to_use_later</code> would desired as a tactic</p>",
        "id": 432746468,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712853395
    },
    {
        "content": "<p>Also, keep in mind that in more complex examples, the two subgoals will have different local contexts, so a proof from one will not necessarily be usable in the other unless all of the hypothesis are reverted.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">bar_of_foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">hfoo</span>\n    <span class=\"n\">save_proof_for_later</span> <span class=\"n\">name</span>\n    <span class=\"c1\">-- what is the type of `name`? `Bar` because that's the goal? `Foo → Bar` because we revert all hypotheses?</span>\n    <span class=\"n\">exact</span> <span class=\"n\">bar_of_foo</span> <span class=\"n\">hfoo</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">name</span> <span class=\"c1\">-- if `name : Bar`, we can now prove `Bar` even without assuming `Foo`, which is unsound</span>\n</code></pre></div>",
        "id": 432746475,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712853399
    },
    {
        "content": "<p>The closest thing to what you're talking about that I can think of is the <code>extract_goal</code> tactic from mathlib which tells you what the statement should be for a lemma which exactly proves your current goal.</p>",
        "id": 432746657,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712853470
    },
    {
        "content": "<p>right... the main reason i'd like this kind of tactic over <code>have name:Foo := _</code> is that <code>Foo</code> is quite long, and also that i need to use this pattern multiple times in the same proof (with different values for Foo</p>",
        "id": 432747166,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712853626
    },
    {
        "content": "<p>Here's version with <code>refine</code> which doesn't require restating <code>Foo</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">hyp</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bar</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">∧</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">hyp</span> <span class=\"bp\">?</span><span class=\"n\">foo</span><span class=\"o\">⟩</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 432747688,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712853823
    },
    {
        "content": "<p>Or a version where <code>have</code> uses a metavariable</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">∧</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">name</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"n\">name</span>\n  <span class=\"c1\">-- ⊢ Foo</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 432748216,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712854021
    },
    {
        "content": "<p>The proposed <code>letm</code> tactic would also help here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ReallyLongProp</span> <span class=\"bp\">∧</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letm</span> <span class=\"bp\">?</span><span class=\"n\">Foo</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span> <span class=\"n\">using</span> <span class=\"bp\">⊢</span> <span class=\"c1\">-- we give `ReallyLongProp` the short name `Foo` using a pattern-matching version of `let`</span>\n  <span class=\"k\">have</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">name</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"n\">name</span>\n</code></pre></div>",
        "id": 432748651,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712854199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/using.20a.20proven.20goal.20in.20another.20goal/near/432748216\">said</a>:</p>\n<blockquote>\n<p>Or a version where <code>have</code> uses a metavariable</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">∧</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">name</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"n\">name</span>\n  <span class=\"c1\">-- ⊢ Foo</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>sadly this pattern seems to add a lot of lines</p>",
        "id": 432749145,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712854360
    },
    {
        "content": "<p>How about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">hyp</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bar</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"postpone\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\"=&gt;\"</span> <span class=\"n\">colGt</span> <span class=\"n\">proof</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">proof</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">∧</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">postpone</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">name</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"n\">name</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 432750933,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712854957
    },
    {
        "content": "<p>i think this has the same problem; for each goal you want to postpone, you have to add two lines: <code>postpone name =&gt;</code> and <code>. exact name</code></p>",
        "id": 432751414,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712855134
    },
    {
        "content": "<p>why is minimizing line count your goal?</p>",
        "id": 432751547,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712855164
    },
    {
        "content": "<p>i have to apply this pattern 9 times in the same proof...</p>",
        "id": 432751670,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712855208
    },
    {
        "content": "<p>I don't think you're going to get this in one line. Both lines here are providing information. The <code>exact name</code> line is necessary to show what the postponed goal should be, and the <code>postpone name =&gt;</code> line is necessary to show where the postponed goal should be scoped. If you omit the second piece of information, the only reasonable default is the very beginning of the proof, so you're going to end up needing to revert all hypotheses every time the tactic is used</p>",
        "id": 432752113,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712855368
    },
    {
        "content": "<p>I guess that's effectively what <code>abstract</code> did in lean 3, since it created an independent lemma each time it was used</p>",
        "id": 432752392,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712855463
    },
    {
        "content": "<p>i took a look at the metaprogramming book, and i think this is what i want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"have_goal \"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">goalType</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getMainTarget</span>\n  <span class=\"k\">let</span> <span class=\"n\">pr</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">v</span> <span class=\"n\">goalType</span>\n  <span class=\"n\">Lean.Elab.Tactic.closeMainGoal</span> <span class=\"n\">pr</span>\n  <span class=\"n\">Lean.Elab.Tactic.evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">all_goals</span> <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">goalType</span> <span class=\"o\">:=</span> <span class=\"n\">v</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 432756280,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712856989
    },
    {
        "content": "<p>it doesn't work yet...</p>",
        "id": 432756887,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712857239
    },
    {
        "content": "<p>How would <code>have_goal</code> work in your example? If you replaced <code>have name : Foo := sorry</code> with <code>have_goal := sorry</code>, then you have a problem because your goal is not <code>Foo</code>, it's <code>Foo ∧ Bar</code></p>",
        "id": 432756977,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712857286
    },
    {
        "content": "<p>you do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">∧</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">have_goal</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"n\">name</span>\n</code></pre></div>",
        "id": 432757172,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712857360
    },
    {
        "content": "<p>because you don't specialise the goal (with <code>.</code>), it should be able to add <code>name</code> to the context(s) for the other goal(s)</p>",
        "id": 432757277,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712857412
    },
    {
        "content": "<p>or at least i hope that's how it works</p>",
        "id": 432757311,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712857431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/using.20a.20proven.20goal.20in.20another.20goal/near/432746475\">said</a>:</p>\n<blockquote>\n<p>Also, keep in mind that in more complex examples, the two subgoals will have different local contexts, so a proof from one will not necessarily be usable in the other unless all of the hypothesis are reverted.</p>\n</blockquote>\n<p>i see what you mean now</p>",
        "id": 432758830,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712858062
    },
    {
        "content": "<p>my current WIP tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"have_goal \"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">goalType</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getMainTarget</span>\n  <span class=\"k\">let</span> <span class=\"n\">pr</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">v</span> <span class=\"n\">goalType</span>\n  <span class=\"n\">Lean.Elab.Tactic.closeMainGoal</span> <span class=\"n\">pr</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Lean.MVarId</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getGoals</span>\n  <span class=\"k\">let</span> <span class=\"n\">newGoals</span> <span class=\"bp\">←</span> <span class=\"n\">goals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.assert</span> <span class=\"n\">n.getId</span> <span class=\"n\">goalType</span> <span class=\"n\">pr</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mvarIdNew.intro1P</span>\n    <span class=\"n\">return</span> <span class=\"n\">mvarIdNew</span>\n  <span class=\"n\">Lean.Elab.Tactic.setGoals</span> <span class=\"n\">newGoals</span>\n</code></pre></div>",
        "id": 432760493,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712858693
    },
    {
        "content": "<p><code>mvarId.assert n.getId goalType pr</code> looks suspect to me -- how do you know <code>goalType</code> and <code>pr</code> are valid in each of the other goals?</p>\n<p>One solution would be to conditionally assert these hypotheses, checking that <code>goalType</code> and <code>pr</code> are type correct in the given <code>mvarId</code>'s context.</p>",
        "id": 432814720,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712886169
    },
    {
        "content": "<p>For that, there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MetavarContext.isWellFormed#doc\">docs#Lean.MetavarContext.isWellFormed</a></p>",
        "id": 432814854,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712886279
    },
    {
        "content": "<p>Would it make sense to have a <code>any_goals!</code> that does the same as <code>any_goals</code>, but tries the input tacticSeq on <em>all</em> goals, not just the ones in the scope of the current position?</p>",
        "id": 432835062,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712901918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/using.20a.20proven.20goal.20in.20another.20goal/near/432814854\">said</a>:</p>\n<blockquote>\n<p>For that, there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MetavarContext.isWellFormed#doc\">docs#Lean.MetavarContext.isWellFormed</a></p>\n</blockquote>\n<p>thanks! <del>this works, i think?</del> nope it doesn't</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"have_goal \"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">goalType</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getMainTarget</span>\n  <span class=\"k\">let</span> <span class=\"n\">pr</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">v</span> <span class=\"n\">goalType</span>\n  <span class=\"n\">Lean.Elab.Tactic.closeMainGoal</span> <span class=\"n\">pr</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Lean.MVarId</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getGoals</span>\n  <span class=\"k\">let</span> <span class=\"n\">newGoals</span> <span class=\"bp\">←</span> <span class=\"n\">goals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">mvarId.withContext</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.MonadLCtx.getLCtx</span>\n      <span class=\"k\">let</span> <span class=\"n\">goaltype_welformed</span> <span class=\"bp\">←</span> <span class=\"n\">MetavarContext.isWellFormed</span> <span class=\"n\">lctx</span> <span class=\"n\">pr</span>\n      <span class=\"k\">let</span> <span class=\"n\">expr_welformed</span> <span class=\"bp\">←</span> <span class=\"n\">MetavarContext.isWellFormed</span> <span class=\"n\">lctx</span> <span class=\"n\">pr</span>\n      <span class=\"k\">if</span> <span class=\"n\">goaltype_welformed</span> <span class=\"bp\">∧</span> <span class=\"n\">expr_welformed</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.assert</span> <span class=\"n\">n.getId</span> <span class=\"n\">goalType</span> <span class=\"n\">pr</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mvarIdNew.intro1P</span>\n        <span class=\"n\">return</span> <span class=\"n\">mvarIdNew</span>\n      <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">mvarId</span>\n  <span class=\"n\">Lean.Elab.Tactic.setGoals</span> <span class=\"n\">newGoals</span>\n</code></pre></div>\n<p>i'm not at all familiar with API for tactics (this  is the first tactic i ever wrote), so any suggestions for how to write this more cleanly are welcome</p>",
        "id": 432883600,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712921446
    },
    {
        "content": "<p>ok, new latest version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"have_goal \"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.getMainGoal</span>\n  <span class=\"k\">let</span> <span class=\"n\">goalType</span> <span class=\"bp\">←</span> <span class=\"n\">goal.getType</span> <span class=\"c1\">-- get the goal mvar and type</span>\n  <span class=\"n\">Tactic.evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"c1\">-- close the goal using the provided term</span>\n  <span class=\"k\">let</span> <span class=\"n\">pr</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"n\">Expr.mvar</span> <span class=\"n\">goal</span><span class=\"o\">)</span> <span class=\"c1\">-- grab the reduced form of the provided term</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Lean.MVarId</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.getGoals</span>\n  <span class=\"k\">let</span> <span class=\"n\">newGoals</span> <span class=\"bp\">←</span> <span class=\"n\">goals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"c1\">-- for each remaining goal,</span>\n    <span class=\"n\">mvarId.withContext</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n      <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">MetavarContext.isWellFormed</span> <span class=\"n\">lctx</span> <span class=\"n\">goalType</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">MetavarContext.isWellFormed</span> <span class=\"n\">lctx</span> <span class=\"n\">pr</span> <span class=\"k\">then</span> <span class=\"c1\">-- check if the provided term and goal type are valid</span>\n          <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.assert</span> <span class=\"n\">n.getId</span> <span class=\"n\">goalType</span> <span class=\"n\">pr</span>\n          <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mvarIdNew.intro1P</span> <span class=\"c1\">-- if so, add the term and type under the given name</span>\n          <span class=\"n\">return</span> <span class=\"n\">mvarIdNew</span>\n        <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">mvarId</span> <span class=\"c1\">-- otherwise, do nothing</span>\n      <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">mvarId</span>\n  <span class=\"n\">Tactic.setGoals</span> <span class=\"n\">newGoals</span> <span class=\"c1\">-- put back the goals</span>\n</code></pre></div>",
        "id": 432916614,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712932252
    },
    {
        "content": "<p>The only bug I see is <code>goaltype_welformed</code> has <code>pr</code> instead of <code>expr_welformed</code>.</p>\n<p>Here's it cleaned up a bit, along with a test:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"have_goal \"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">goalType</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n  <span class=\"k\">let</span> <span class=\"n\">pr</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">v</span> <span class=\"n\">goalType</span>\n  <span class=\"n\">closeMainGoal</span> <span class=\"n\">pr</span>\n  <span class=\"k\">let</span> <span class=\"n\">newGoals</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getGoals</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mvarId.withContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n    <span class=\"k\">let</span> <span class=\"n\">goaltype_welformed</span> <span class=\"bp\">←</span> <span class=\"n\">MetavarContext.isWellFormed</span> <span class=\"n\">lctx</span> <span class=\"n\">goalType</span>\n    <span class=\"k\">let</span> <span class=\"n\">expr_welformed</span> <span class=\"bp\">←</span> <span class=\"n\">MetavarContext.isWellFormed</span> <span class=\"n\">lctx</span> <span class=\"n\">pr</span>\n    <span class=\"k\">if</span> <span class=\"n\">goaltype_welformed</span> <span class=\"bp\">∧</span> <span class=\"n\">expr_welformed</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.assert</span> <span class=\"n\">n.getId</span> <span class=\"n\">goalType</span> <span class=\"n\">pr</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mvarIdNew.intro1P</span>\n      <span class=\"n\">return</span> <span class=\"n\">mvarIdNew</span>\n    <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">mvarId</span>\n  <span class=\"n\">setGoals</span> <span class=\"n\">newGoals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">∧</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">have_goal</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"n\">name</span>\n</code></pre></div>",
        "id": 432916947,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712932342
    },
    {
        "content": "<p>(Sorry, I didn't see that last message when I responded -- there was an internet issue.)</p>",
        "id": 432917113,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712932394
    },
    {
        "content": "<p>i changed it a bit because it didn't seem to try to match the term properly... in my concrete usecase, my term had metavariables apparently, but this works</p>",
        "id": 432917205,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712932423
    },
    {
        "content": "<p>and yes, i noticed the <code>goaltype_welformed</code> issue <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> copy-paste makes fools of us all</p>",
        "id": 432917371,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712932459
    },
    {
        "content": "<p>If you want metavariables in <code>v</code>, there's another solution. I'll look up the function to use.</p>",
        "id": 432917435,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712932479
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"have_goal \"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">::</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span> <span class=\"bp\">|</span> <span class=\"n\">throwNoGoalsToBeSolved</span>\n  <span class=\"k\">let</span> <span class=\"n\">goalType</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">pr</span><span class=\"o\">,</span> <span class=\"n\">prGoals</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermWithHoles</span> <span class=\"n\">v</span> <span class=\"n\">goalType</span> <span class=\"bp\">`</span><span class=\"n\">goal</span>\n  <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">occursCheck</span> <span class=\"n\">mvarId</span> <span class=\"n\">pr</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"</span><span class=\"err\">\\</span>\n<span class=\"s2\">    'have_goal' tactic failed, value{indentExpr pr}</span><span class=\"se\">\\n</span><span class=\"err\">\\</span>\n<span class=\"s2\">    depends on main goal metavariable {mkMVar mvarId}\"</span>\n  <span class=\"n\">mvarId.assign</span> <span class=\"n\">pr</span>\n  <span class=\"k\">let</span> <span class=\"n\">newGoals</span> <span class=\"bp\">←</span> <span class=\"n\">goals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mvarId.withContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">MetavarContext.isWellFormed</span> <span class=\"n\">lctx</span> <span class=\"n\">goalType</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span> <span class=\"n\">MetavarContext.isWellFormed</span> <span class=\"n\">lctx</span> <span class=\"n\">pr</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.assert</span> <span class=\"n\">n.getId</span> <span class=\"n\">goalType</span> <span class=\"n\">pr</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mvarIdNew.intro1P</span>\n      <span class=\"n\">return</span> <span class=\"n\">mvarIdNew</span>\n    <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">mvarId</span>\n  <span class=\"n\">setGoals</span> <span class=\"o\">(</span><span class=\"n\">prGoals</span> <span class=\"bp\">++</span> <span class=\"n\">newGoals</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">∧</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">have_goal</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"n\">name</span>\n</code></pre></div>",
        "id": 432919504,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712933092
    },
    {
        "content": "<p>thanks a lot for the feedback, this really helps!</p>",
        "id": 432924554,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712934516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as resolved.</p>",
        "id": 432924561,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712934519
    },
    {
        "content": "<p>I know it's a bit late, but I also needed to do this, and you can also use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">∧</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h₂</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">b</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"n\">h₂</span>\n</code></pre></div>",
        "id": 439137131,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715914802
    }
]