[
    {
        "content": "<p>Do we have any lemma to rewrite <code>IsROrC.ofReal</code> when applies to \\C?</p>",
        "id": 412582063,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705078011
    },
    {
        "content": "<p>I think not, although I'm curious where it came up that you need it.</p>",
        "id": 412601844,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705085361
    },
    {
        "content": "<p>Putting it immediately after <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.instIsROrCComplex#doc\">docs#Complex.instIsROrCComplex</a> makes sense.</p>",
        "id": 412602152,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705085488
    },
    {
        "content": "<p>I discussed this with <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and I argued that we should not even have to state this since all coercions between two types should syntactically be the same.</p>",
        "id": 412615157,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705091207
    },
    {
        "content": "<p>Understand: Don't write the lemma! Fix mathlib so that the coercions are not even different in the first place.</p>",
        "id": 412615244,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705091246
    },
    {
        "content": "<p>Don't write the lemma! Spend hours and hours fixing stuff instead and encourage ugly workarounds because few people actually have the time!</p>",
        "id": 412622612,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1705094628
    },
    {
        "content": "<p>In lean 3 the coercions were already the same</p>",
        "id": 412640539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705104549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, they're defeq, but in this case it's impossible for them to be <em>exactly</em> the same.</p>",
        "id": 412672031,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705121697
    },
    {
        "content": "<p>(unless you bring back <code>coe</code>)</p>",
        "id": 412672061,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705121722
    },
    {
        "content": "<p>Why? You can just not define <code>Complex.ofReal'</code> and do everything in terms of <code>IsROrC.ofReal</code>.</p>",
        "id": 412690547,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705136593
    },
    {
        "content": "<p>Hmm, does that work for the reals as well?</p>",
        "id": 412694744,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705140158
    },
    {
        "content": "<p>Or we eliminate both and use <code>algebraMap</code> everywhere</p>",
        "id": 412694780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705140185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/IsROrC.2EofReal.20.3D.20Complex.2EofReal'/near/412694744\">said</a>:</p>\n<blockquote>\n<p>Hmm, does that work for the reals as well?</p>\n</blockquote>\n<p>Technically, yes. It's the identity coercion. I wonder how it's not causing problems, actually. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 412695723,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705141001
    }
]