[
    {
        "content": "<p>Do we have that a short complex of chain complex is short exact if and only if all the rows are short exact? <br>\n#MWE is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Homology.HomologySequence</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Abelian</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ShortComplex</span> <span class=\"o\">(</span><span class=\"n\">ChainComplex</span> <span class=\"n\">C</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n      <span class=\"o\">(</span><span class=\"n\">A.map</span> <span class=\"o\">(</span><span class=\"n\">HomologicalComplex.eval</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">ComplexShape.down</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ShortExact</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">A.ShortExact</span> <span class=\"n\">where</span>\n  <span class=\"n\">exact</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mono_f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">intro</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"n\">h</span>\n    <span class=\"n\">ext</span> <span class=\"n\">n</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono_f.right_cancellation</span> <span class=\"o\">(</span><span class=\"n\">g.f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g'.f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">A.f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"n\">epi_g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">intro</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"n\">h</span>\n    <span class=\"n\">ext</span> <span class=\"n\">n</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">epi_g.left_cancellation</span> <span class=\"o\">(</span><span class=\"n\">g.f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g'.f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">A.g</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Or do we have a quick proof (provided that it is true in this generality)? Thanks! maybe cc <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span></p>",
        "id": 435919427,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1714348700
    },
    {
        "content": "<p><code>hA</code> should be constructed via <code>ShortComplex.map</code> and <code>HomologicalComplex.eval</code> instead.</p>",
        "id": 435920459,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714349481
    },
    {
        "content": "<p>Thanks, edited above</p>",
        "id": 435921098,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1714350124
    },
    {
        "content": "<p>Joël might have better answers, but I think it is fairly straight forward to construct the (Left/Right)HomologyData given the degree-wise homology data via <code>leftHomologyMapData</code> etc?<br>\nAnd I think it works for general homological complexes.</p>",
        "id": 435924881,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714352091
    },
    {
        "content": "<p>Yes, I agree. But I was hopping for some kind of category theory magic to avoid a detailed construction.</p>",
        "id": 435931464,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1714356966
    },
    {
        "content": "<p>in principle you could prove that the functors restricting to each row jointly reflects (co)limits, and we should have some general thing that lets you deduce exactness given such functors. But I suspect we don't have enough of this scaffolding to make it much easier than doing it directly.</p>",
        "id": 435943673,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714362192
    },
    {
        "content": "<p>This is not yet in mathlib, but it is in PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/11760\">#11760</a>, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/11760/files#diff-e5806ff97aa3945262a6b519469d54a7d06293899515dceb98e5df3ac18ce4d1R61-R62\">https://github.com/leanprover-community/mathlib4/pull/11760/files#diff-e5806ff97aa3945262a6b519469d54a7d06293899515dceb98e5df3ac18ce4d1R61-R62</a></p>",
        "id": 435953242,
        "sender_full_name": "Joël Riou",
        "timestamp": 1714365254
    },
    {
        "content": "<p>Thanks! Stealed.</p>",
        "id": 435954776,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1714366689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252627\">Jujian Zhang</span> has marked this topic as resolved.</p>",
        "id": 435954832,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714366729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671216\">Jujian Zhang</span> please review that PR if it is useful to you!</p>",
        "id": 435964601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714372104
    }
]