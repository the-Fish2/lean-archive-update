[
    {
        "content": "<p>What's an easy way to go from <code>F</code> being a primitive of <code>f</code> to <code>f</code> being holomorphic?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U_open</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F_prim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">):</span>\n    <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">F_differentiableOn</span> <span class=\"o\">:</span> <span class=\"n\">DifferentiableOn</span> <span class=\"n\">ℂ</span> <span class=\"n\">F</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"n\">hz</span> <span class=\"bp\">↦</span>\n   <span class=\"o\">(</span><span class=\"n\">F_prim</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">differentiableAt.differentiableWithinAt</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">DifferentiableOn.contDiffOn</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:=</span> <span class=\"n\">F_differentiableOn</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"n\">U_open</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"n\">hz</span>\n  <span class=\"c1\">-- this : ContDiffWithinAt ℂ 2 F U z</span>\n</code></pre></div>",
        "id": 409943968,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703543026
    },
    {
        "content": "<p>One solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U_open</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F_prim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">):</span>\n    <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">AnalyticOn</span> <span class=\"n\">ℂ</span> <span class=\"n\">F</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"n\">DifferentiableOn.analyticOn</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"n\">hz</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F_prim</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hasDerivWithinAt</span><span class=\"o\">⟩)</span> <span class=\"n\">U_open</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">AnalyticOn.differentiableOn</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">differentiableAt</span> <span class=\"o\">(</span><span class=\"n\">U_open.mem_nhds</span> <span class=\"n\">hz</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this.deriv.congr</span> <span class=\"n\">U_open</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"n\">hz</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">F_prim</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">deriv</span>\n</code></pre></div>",
        "id": 409946985,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703546546
    }
]