[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">Many.one</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Many.more</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">()</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Many.none</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">Many.union</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Many.none</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ys</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Many.more</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Many.more</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">()</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">union</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"o\">())</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">Many.bind</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">β</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Many.none</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">Many.none</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Many.more</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">union</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">bind</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"o\">())</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"n\">instMonadMany</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Monad</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Many.one</span>\n<span class=\"w\">  </span><span class=\"n\">bind</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Many.bind</span>\n\n<span class=\"c1\">-- how to get the implementation of `Functor` instance, or `Applicative` insatance?</span>\n\n<span class=\"c1\">-- The specific implementation cannot be known from this output message.</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Applicative.toFunctor</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"w\"> </span><span class=\"n\">Many</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">unknown constant 'Many.map'</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span><span class=\"w\"> </span><span class=\"n\">Many.map</span>\n</code></pre></div>",
        "id": 442009727,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1717306358
    },
    {
        "content": "<p>Have you tried to <code>#print</code> the instance?</p>",
        "id": 442009929,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717306532
    },
    {
        "content": "<p>I don't know the instance name of <code>Functor</code> for <code>Many</code></p>",
        "id": 442010008,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1717306603
    },
    {
        "content": "<p>That's why we have typeclass inference! Try <code>#print show Functor Many by infer_instance</code></p>",
        "id": 442010030,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717306647
    },
    {
        "content": "<p>No, try <code>#synth Functor Many</code>.</p>",
        "id": 442010110,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1717306707
    },
    {
        "content": "<p>That's what Asei tried above. It doesn't show you the body of the definition</p>",
        "id": 442010150,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717306747
    },
    {
        "content": "<p>Thank you! but I get an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">unexpected token 'show'; expected 'axioms', 'eqns', 'equations', identifier or string literal</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#print</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 442010157,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1717306753
    },
    {
        "content": "<p>Put brackets around? or do <code>#print (inferInstance : Functor Many)</code></p>",
        "id": 442010192,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717306780
    },
    {
        "content": "<p>still erorr (I tried this in Lean 4 playground)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">unexpected token '('; expected 'axioms', 'eqns', 'equations', identifier or string literal</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#print</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 442010305,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1717306843
    },
    {
        "content": "<p>oh no... This does not produce an error, but only useless output.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">instFunc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">infer_instance</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">def instFunc.{u_1} : Functor Many :=</span>\n<span class=\"cm\">inferInstance</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#print</span><span class=\"w\"> </span><span class=\"n\">instFunc</span>\n</code></pre></div>",
        "id": 442010349,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1717306912
    },
    {
        "content": "<p>Doesn't seem fantastic...</p>",
        "id": 442010403,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717306964
    },
    {
        "content": "<p>What info do you want to get? Can you click on <code>Applicative.toFunctor</code> to see the implicit arguments?</p>",
        "id": 442017710,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717313201
    },
    {
        "content": "<p>I want to get this information (which is an implementation of Functor class form Monad) automatically from Lean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">&lt;$&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">x.bind</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Many.one</span><span class=\"w\"> </span><span class=\"bp\">∘</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 442018295,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1717313604
    },
    {
        "content": "<p>Clicking on <code>Applicative.toFunctor</code> should point you to <code>Monad.toApplicative</code>, and going there you should see that the implementation is <code>map      f x := bind x (Function.comp pure f)</code>.</p>",
        "id": 442020261,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717315007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/specific.20implementation.20of.20Applicative.2FFunctor.20from.20Monad/near/442010150\">said</a>:</p>\n<blockquote>\n<p>That's what Asei tried above. It doesn't show you the body of the definition</p>\n</blockquote>\n<p>Sorry, try <code>#whnf (inferInstance : Functor Many)</code>!</p>",
        "id": 442020637,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1717315238
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">whnf</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">{ map := fun {α β} f x ↦ x.bind (Many.one ∘ f), mapConst := fun {α β} ↦ (fun f x ↦ x.bind (Many.one ∘ f)) ∘ const β }</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 442020920,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1717315448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / Miyahara Kō</span> Thank you!!</p>",
        "id": 442021849,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1717316118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 442021855,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717316123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as unresolved.</p>",
        "id": 442038651,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717325893
    },
    {
        "content": "<p>why this does not work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- missing implementation info</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Applicative.mk</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">whnf</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Applicative</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 442038734,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1717325935
    },
    {
        "content": "<p>This is because <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Applicative\"><code>Applicative</code></a> is an extended class.<br>\nTo see the implementation of <code>&lt;*&gt;</code>, Try <code>#whnf (inferInstance : Seq Many)</code>.</p>",
        "id": 442039276,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1717326194
    },
    {
        "content": "<p>I would really expect <code>#print</code> to be the tool to reach for when you want to know how something is defined.</p>",
        "id": 442073226,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717346713
    },
    {
        "content": "<p><code>pp.explicit true</code> will make <del>print</del> check behave here</p>",
        "id": 442106005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717362945
    },
    {
        "content": "<p>Or just click on <code>inferInstance</code> in the info view</p>",
        "id": 442106093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717362976
    },
    {
        "content": "<p>I usually use <code>#reduce instMonadMany.toSeq</code> in this case, but this will show you the unfolded result up to <code>Many.rec</code>.</p>",
        "id": 442197289,
        "sender_full_name": "nesken7777",
        "timestamp": 1717406815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> why <code>#print (inferInstance : Functor Many)</code> raise an error? (it says \"unexpected token\")</p>",
        "id": 443448923,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1717841437
    },
    {
        "content": "<p>You meant <code>#check</code></p>",
        "id": 443448949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717841465
    },
    {
        "content": "<p>why this <code>#print</code> fails?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">Many.one</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Many.more</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">()</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Many.none</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">Many.union</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Many.none</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ys</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Many.more</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Many.more</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">()</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">union</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"o\">())</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">Many.bind</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">β</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Many.none</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">Many.none</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Many.more</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">union</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">bind</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"o\">())</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"n\">instMonadMany</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Monad</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Many.one</span>\n<span class=\"w\">  </span><span class=\"n\">bind</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Many.bind</span>\n\n<span class=\"c1\">-- pass!!</span>\n<span class=\"k\">#check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">unexpected token '('; expected 'axioms', 'eqns', 'equations', identifier or string literal</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#print</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"w\"> </span><span class=\"n\">Many</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 443461276,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1717848151
    },
    {
        "content": "<p>Print expects a single name, not an expression</p>",
        "id": 443461319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717848193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> thanks!</p>",
        "id": 443461457,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1717848303
    }
]