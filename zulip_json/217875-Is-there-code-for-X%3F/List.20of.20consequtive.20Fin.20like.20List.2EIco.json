[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Ico#doc\">docs#List.Ico</a> gives a list of consecutive naturals. Given <code>a ≤ b ≤ c</code>, is there an equivalent to <code>List.Ico a b</code> but with type <code>List (Fin c)</code>?</p>",
        "id": 448128200,
        "sender_full_name": "Naruyoko",
        "timestamp": 1719761155
    },
    {
        "content": "<p>You can use <code>Finset.Ico</code>, but obviously that won't be a list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- {1, 2, 3}</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">Ico</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 448128646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719761309
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.finRange#doc\">docs#List.finRange</a> is a thing, you can probably start looking there...</p>",
        "id": 448129322,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719761703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- List (Fin ?_)</p>",
        "id": 448129626,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719761863
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Batteries/Data/Fin/Basic.html#Fin.list\">Fin.list</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Range.html#List.finRange\">List.finRange</a></p>",
        "id": 448129628,
        "sender_full_name": "loogle",
        "timestamp": 1719761864
    },
    {
        "content": "<p>it would appear that's about everything we have...</p>",
        "id": 448129650,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719761877
    },
    {
        "content": "<p>but you could certainly take inspiration from their definitions to make what you need</p>",
        "id": 448129721,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719761900
    },
    {
        "content": "<p>I guess you also need to watch out for the case when <code>b = c</code>, since then <code>(b : Fin c) = 0</code></p>",
        "id": 448130842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719762330
    },
    {
        "content": "<p>The definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.finRange#doc\">docs#List.finRange</a> looks promising.</p>",
        "id": 448131686,
        "sender_full_name": "Naruyoko",
        "timestamp": 1719763002
    },
    {
        "content": "<p>I got the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib.Data.List.Intervals</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">finIco</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">List.Ico</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pmap</span><span class=\"w\"> </span><span class=\"n\">Fin.mk</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">Nat.lt_of_lt_of_le</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">List.Ico.mem.mp</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt_succ</span><span class=\"w\"> </span><span class=\"n\">n.isLt</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span><span class=\"w\"> </span><span class=\"n\">finIco</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"k\">#reduce</span><span class=\"w\"> </span><span class=\"n\">finIco</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"k\">#reduce</span><span class=\"w\"> </span><span class=\"n\">finIco</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"k\">#reduce</span><span class=\"w\"> </span><span class=\"n\">finIco</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 448135571,
        "sender_full_name": "Naruyoko",
        "timestamp": 1719764710
    }
]