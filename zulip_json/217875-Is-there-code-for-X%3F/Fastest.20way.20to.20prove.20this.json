[
    {
        "content": "<p>What's the fastest way to prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vvv</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">v</span> <span class=\"bp\">%</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">r</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n    <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"bp\">%</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">r</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>The theorem looks so simple but apparently there's no theorem in the library for it.</p>",
        "id": 410409883,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1703841965
    },
    {
        "content": "<p>This is weirdly stated. Try <code>((Finset.range n).filter (· ≡ v [MOD n])).card</code> instead.</p>",
        "id": 410411563,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703843099
    },
    {
        "content": "<p>Or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.ModEq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Count</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vvv</span> <span class=\"o\">:</span> <span class=\"n\">n.count</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≡</span> <span class=\"n\">v</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">r</span><span class=\"o\">])</span> <span class=\"bp\">=</span>\n    <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"bp\">%</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">r</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410426177,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1703851943
    },
    {
        "content": "<p>This is what I should be proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.ModEq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Floor</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">filter_Ico_modEq_card</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">Finset.Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">r</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">⌈</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"bp\">⌉</span> <span class=\"bp\">-</span> <span class=\"bp\">⌈</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"bp\">⌉</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410429945,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1703854679
    },
    {
        "content": "<p>OK, I proved it. Can you make the proof shorter?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Floor</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Qify</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"c1\">-- ⌈(n - v) / r⌉</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">remb</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">↪</span> <span class=\"n\">ℤ</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">r</span>\n  <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"n\">mul_left_injective₀</span> <span class=\"n\">hr.ne.symm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Ico_map_eq_Ico_filter</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"bp\">⌈</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⌉</span> <span class=\"bp\">⌈</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⌉</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">remb</span> <span class=\"n\">hr</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">∣</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_map</span><span class=\"o\">,</span> <span class=\"n\">mem_Ico</span><span class=\"o\">,</span> <span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">forall_exists_index</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">d</span> <span class=\"n\">lb</span> <span class=\"n\">ub</span> <span class=\"n\">p</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">remb</span><span class=\"o\">,</span> <span class=\"n\">Function.Embedding.coeFn_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p</span>\n    <span class=\"n\">qify</span> <span class=\"n\">at</span> <span class=\"n\">lb</span> <span class=\"n\">hr</span>\n    <span class=\"n\">replace</span> <span class=\"n\">lb</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">div_le_iff</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">((</span><span class=\"n\">Int.le_ceil</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">lb</span><span class=\"o\">)</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">lb</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">lb</span>\n    <span class=\"n\">refine'</span> <span class=\"o\">⟨⟨</span><span class=\"n\">lb</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">Dvd.intro_left</span> <span class=\"n\">d</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">ub</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ub</span>\n    <span class=\"n\">qify</span> <span class=\"n\">at</span> <span class=\"n\">ub</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Int.ceil_le.mpr</span> <span class=\"o\">((</span><span class=\"n\">div_le_iff</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">ub</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">mem_Ico</span><span class=\"o\">,</span> <span class=\"n\">mem_map</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">lb</span> <span class=\"n\">ub</span> <span class=\"n\">v</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dvd_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">v</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n    <span class=\"n\">use</span> <span class=\"n\">d</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">remb</span><span class=\"o\">,</span> <span class=\"n\">Function.Embedding.coeFn_mk</span><span class=\"o\">]</span>\n    <span class=\"n\">subst</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">qify</span> <span class=\"n\">at</span> <span class=\"n\">lb</span> <span class=\"n\">hr</span>\n    <span class=\"n\">refine'</span> <span class=\"o\">⟨⟨</span><span class=\"n\">Int.ceil_le.mpr</span> <span class=\"o\">((</span><span class=\"n\">div_le_iff</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">lb</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">ub</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"o\">(</span><span class=\"n\">div_le_iff</span> <span class=\"n\">hr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">Int.ceil_le.mp</span> <span class=\"n\">ub</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">filter_Ico_dvd_card</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">∣</span> <span class=\"bp\">·</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">⌈</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⌉</span> <span class=\"bp\">-</span> <span class=\"bp\">⌈</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⌉</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Ico_map_eq_Ico_filter</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">card_map</span><span class=\"o\">,</span> <span class=\"n\">Int.card_Ico</span><span class=\"o\">,</span> <span class=\"n\">Int.toNat_eq_max</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 410502153,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1703902330
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9348\">#9348</a></p>",
        "id": 410519130,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1703919607
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=dvd_def#doc\">docs#dvd_def</a></p>",
        "id": 410530352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703930080
    },
    {
        "content": "<p>That's true by definition so you can <code>rintro lb ub \\&lt;d,p\\&gt;</code> at the beginning of the second case</p>",
        "id": 410531104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703930637
    },
    {
        "content": "<p>Your <code>remb</code> already exists</p>",
        "id": 410532791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703932133
    }
]