[
    {
        "content": "<p>Do we have these hiding anywhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">_root_.Lean.Expr.ofNatQ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_aα</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">AddMonoidWithOne</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">ne</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkRawNatLit</span> <span class=\"n\">n</span>\n    <span class=\"k\">have</span> <span class=\"n\">ne2</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkRawNatLit</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ne2</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"bp\">$</span><span class=\"n\">ne</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n    <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"bp\">$</span><span class=\"n\">ne2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Lean.Expr.ofIntQ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_aα</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">AddGroupWithOne</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Expr.ofNatQ</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">-$</span><span class=\"o\">(</span><span class=\"n\">Lean.Expr.ofNatQ</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Lean.Expr.ofRatQ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_aα</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">AddGroupWithOne</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_dα</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Div</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">q.den</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"n\">Lean.Expr.ofIntQ</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"n\">q.num</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.Expr.ofIntQ</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"n\">q.num</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.Expr.ofNatQ</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"n\">q.den</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 420799256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707570954
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Meta.NormNum.mkOfNat#doc\">docs#Mathlib.Meta.NormNum.mkOfNat</a> is close, but it only works for the first case, and (unecessarily) lives in <code>MetaM</code></p>",
        "id": 420799340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707571019
    }
]