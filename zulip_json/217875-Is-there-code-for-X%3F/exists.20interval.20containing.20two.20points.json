[
    {
        "content": "<p>I've found a need for the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">T</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"n\">t₀</span> <span class=\"bp\">-</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₀</span> <span class=\"bp\">+</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"n\">t₀</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"n\">t₀</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_neg</span> <span class=\"n\">ht</span><span class=\"o\">]</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">not_lt.mp</span> <span class=\"n\">ht</span><span class=\"o\">)]</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<ol>\n<li>Does it exist in mathlib in some form?</li>\n<li>If not, what's the best place to put it?</li>\n<li>Should it be stated more generally, e.g. for rationals, metric spaces, etc.?</li>\n</ol>",
        "id": 411855658,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704769078
    },
    {
        "content": "<p>I don't have any answers, but just wanted to note that you could do <code>|t - t₀| + 1</code> instead of <code>2 * |t - t₀| + 1</code></p>",
        "id": 411856672,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1704769764
    },
    {
        "content": "<p>shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.PseudoMetric</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">T</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Ioo</span> <span class=\"o\">(</span><span class=\"n\">t₀</span> <span class=\"bp\">-</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₀</span> <span class=\"bp\">+</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Real.ball_eq_Ioo</span><span class=\"o\">,</span> <span class=\"n\">Metric.mem_ball</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">|</span><span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"n\">t₀</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">,</span> <span class=\"n\">lt_add_of_pos_right</span> <span class=\"n\">_</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 411871645,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704780679
    },
    {
        "content": "<p>Where should such a lemma be located? What about versions for rationals and Euclidean spaces?</p>",
        "id": 411872955,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704781527
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.ball_eq_Ioo#doc\">docs#Int.ball_eq_Ioo</a> but not Rat.ball_eq_Ioo. For general metric space, what should be the statement? We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BoundedSpace#doc\">docs#BoundedSpace</a> and I recall seeing some discussion about the unbounded counterpart, but I can't find that now.</p>\n<p>One generalization is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Intervals.Group</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_Ioo_iff_abs_le</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Ioo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">abs_lt.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">and_comm.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">and_congr</span> <span class=\"n\">sub_lt_comm</span> <span class=\"n\">neg_lt_sub_iff_lt_add'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t₀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">T</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Ioo</span> <span class=\"o\">(</span><span class=\"n\">t₀</span> <span class=\"bp\">-</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₀</span> <span class=\"bp\">+</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_zero_lt</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">|</span><span class=\"n\">t₀</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">add_pos_of_nonneg_of_pos</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n    <span class=\"n\">mem_Ioo_iff_abs_le.mp</span> <span class=\"o\">(</span><span class=\"n\">lt_add_of_pos_right</span> <span class=\"n\">_</span> <span class=\"n\">hε</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>and it could go into the imported file. Actually you <a href=\"https://github.com/leanprover-community/mathlib4/blame/a6cf8f57f81f8f3bd96736335bc05d624e610f0e/Mathlib/Data/Set/Intervals/Group.lean#L136-L138\">ported that file</a> and there's a call for more API about symmetric intervals just above the lemma.</p>",
        "id": 411878241,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704784838
    },
    {
        "content": "<p>Do you know about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasSolidNorm#doc\">docs#HasSolidNorm</a> ?</p>",
        "id": 411885320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704788632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> could you clarify how this should help?</p>",
        "id": 411905992,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704796340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> At least for Euclidean space, the generalisation from the reals is that there exists a ball around <code>a</code> that also contains <code>b</code>.</p>\n<p>I do remember porting that file. Though I find the API around intervals generally lacking, I always hesitate to add anything because it usually means an explosion of lemmas for <code>Ioo</code>, <code>Icc</code>, <code>Ioc</code>, etc.</p>",
        "id": 411906850,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704796588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin (尹維晨)</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/exists.20interval.20containing.20two.20points/near/411905992\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> could you clarify how this should help?</p>\n</blockquote>\n<p>I don't know. But this is one way of relating the absolute value and the norm.</p>",
        "id": 411907824,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704796860
    },
    {
        "content": "<p>What's the use case of your lemma? Do you need the interval to be centered?</p>",
        "id": 411908139,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704796950
    },
    {
        "content": "<p>I'm asking because this is a bit of a weird lemma.</p>",
        "id": 411908283,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704796992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"677093\">Kamila Szewczyk</span> has marked this topic as resolved.</p>",
        "id": 411931743,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704805755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"100006\">Notification Bot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20exists.20interval.20containing.20two.20points/near/411931743\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"677093\">Kamila Szewczyk</span> has marked this topic as resolved.</p>\n</blockquote>\n<p>Sorry! I was trying to move to a different topic, i am not very good with zulip.</p>",
        "id": 411931826,
        "sender_full_name": "Kamila Szewczyk",
        "timestamp": 1704805786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"677093\">Kamila Szewczyk</span> has marked this topic as unresolved.</p>",
        "id": 411931850,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704805796
    }
]