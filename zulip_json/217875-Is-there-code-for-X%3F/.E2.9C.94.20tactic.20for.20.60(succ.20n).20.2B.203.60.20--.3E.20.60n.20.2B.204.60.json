[
    {
        "content": "<p>I'm lazy. Is there a tactic that does the same as the rewrite below, i.e. rewriting all <code>pred</code>, <code>succ</code> to <code>- 1</code>, <code>+ 1</code>, collecting numbers and \"simplifying\"? <code>simp</code> wouldn't do it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 436861201,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714734084
    },
    {
        "content": "<p><code>norm_num</code>, maybe</p>",
        "id": 436862403,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714734574
    },
    {
        "content": "<p>It does the <code>add_assoc</code> step but nothing with <code>succ</code>, and nothing with <code>1 + 3</code>.</p>",
        "id": 436862805,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714734734
    },
    {
        "content": "<p>Hmm, I thought it would</p>",
        "id": 436863213,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714734943
    },
    {
        "content": "<p>Can you use <code>eval_tac%</code> somehow?</p>",
        "id": 436863782,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714735211
    },
    {
        "content": "<p>Let me find what it is called exactly.</p>",
        "id": 436863803,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714735221
    },
    {
        "content": "<p><code>eval_expr%</code>, though I'm on mobile and cannot test...</p>",
        "id": 436863961,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714735289
    },
    {
        "content": "<p><code>eval_tac%</code> and <code>eval_expr%</code> give me both <code>unknown tactic</code></p>",
        "id": 436864282,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714735412
    },
    {
        "content": "<p><code>import Mathlib.Tactic.Eval</code>?</p>",
        "id": 436864338,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714735434
    },
    {
        "content": "<p>Something like <code>have : bad = eval% bad := by norm_num</code>?</p>",
        "id": 436864488,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714735491
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">Mathlib.Tactic.Eval'</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Eval.lean</span>\n</code></pre></div>",
        "id": 436864537,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714735513
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Meta.elabEvalExpr#doc\">docs#Mathlib.Meta.elabEvalExpr</a></p>",
        "id": 436864617,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714735560
    },
    {
        "content": "<p>Old Mathlib?</p>",
        "id": 436864694,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714735584
    },
    {
        "content": "<p>Oh, it's <code>eval%</code> alone.  The expr bit is for the internal function only.</p>",
        "id": 436865207,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714735809
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">b614ff1d12bc</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">No</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">download</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">4159</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">152</span> <span class=\"n\">ms</span>\n</code></pre></div>\n<p>Hmm, wasn't that the command to update?</p>",
        "id": 436865296,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714735858
    },
    {
        "content": "<p>Did you <code>git pull</code> before?</p>",
        "id": 436865373,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714735888
    },
    {
        "content": "<p>Careful that the cache may be corrupted</p>",
        "id": 436865398,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714735898
    },
    {
        "content": "<p>(The current version is 4.8)</p>",
        "id": 436865508,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714735938
    },
    {
        "content": "<p>I do <code>git pull</code> in the mathlib folder when I do PRs. Does this interfer with the cache?</p>",
        "id": 436865614,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714736002
    },
    {
        "content": "<p>It modifies the files that therefore need to be rebuilt.  The cache is untouched by the pull, but is no longer valid.</p>",
        "id": 436865748,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714736062
    },
    {
        "content": "<p><code>lake exe cache get</code> fetches the remote cache that best fits your local files.</p>",
        "id": 436865817,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714736102
    },
    {
        "content": "<p>Oh, you should merge master into your branch, of course!</p>",
        "id": 436865983,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714736171
    },
    {
        "content": "<p>Alternatively, you may just get away with checking out <code>Mathlib/Tactic/Eval.lean</code>...</p>",
        "id": 436866056,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714736203
    },
    {
        "content": "<p>Its imports are relatively minimal that your local version is probably good enough for it.</p>",
        "id": 436866120,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714736229
    },
    {
        "content": "<p><code>eval%</code> wouldn't work here because there's a free variable</p>",
        "id": 436866737,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714736476
    },
    {
        "content": "<p><code>simp</code> has some basic support for natural number arithmetic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">arith</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span>\n  <span class=\"c1\">-- ⊢ x = n + 4</span>\n</code></pre></div>",
        "id": 436866910,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714736559
    },
    {
        "content": "<p>Ah! Many thanks. I guess calling simp this way is not expensive, i.e., can be used in mathlib code?</p>",
        "id": 436882348,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714742483
    },
    {
        "content": "<p>Or better <code>simp (config := {arith := true}) only</code> in that case?</p>",
        "id": 436882836,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714742634
    },
    {
        "content": "<p>And then, I found <code>simp_arith</code>. So many things to find...</p>",
        "id": 436886584,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714743859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707242\">Ralf Stephan</span> has marked this topic as resolved.</p>",
        "id": 436896587,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714746954
    }
]