[
    {
        "content": "<p>Do we have something similar to this? If not, where should this go? My proof uses <code>Nat.isCoprime_iff_coprime</code> so it cannot go too high in the import hierarchy, and <code>find_home!</code> suggests <code>Mathlib.Analysis.Normed.Field.Basic</code> which is absurd. Maybe someone can come up with a better proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pow_mem_range_pow_of_coprime</span> <span class=\"o\">{</span><span class=\"n\">G₀</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommGroupWithZero</span> <span class=\"n\">G₀</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">m.Coprime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span> <span class=\"bp\">→</span> <span class=\"n\">G₀</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span> <span class=\"bp\">→</span> <span class=\"n\">G₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.isCoprime_iff_coprime.mpr</span> <span class=\"n\">hmn</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">Nat.coprime_zero_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hmn</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hmn</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">id</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">ha'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha'</span><span class=\"o\">,</span> <span class=\"n\">zero_pow_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">pos_iff_ne_zero</span><span class=\"o\">]⟩</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">l</span>\n    <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zpow_one</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">e</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zpow_ofNat</span><span class=\"o\">,</span> <span class=\"n\">mul_zpow</span><span class=\"o\">,</span> <span class=\"n\">zpow_add₀</span> <span class=\"n\">ha'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zpow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zpow_mul</span><span class=\"o\">,</span> <span class=\"n\">zpow_ofNat</span><span class=\"o\">,</span> <span class=\"n\">zpow_mul</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">zpow_ofNat</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">]⟩</span>\n</code></pre></div>",
        "id": 410792468,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1704168945
    },
    {
        "content": "<p>And also, do we have the submonoid/subgroupwithzero <code>Set.range (· ^ n : G₀ → G₀)</code>?</p>",
        "id": 410792620,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1704169085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60pow_mem_range_pow_of_coprime.60/near/410792620\">said</a>:</p>\n<blockquote>\n<p>And also, do we have the submonoid/subgroupwithzero <code>Set.range (· ^ n : G₀ → G₀)</code>?</p>\n</blockquote>\n<p>AFAICS, no</p>",
        "id": 410793720,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704170328
    },
    {
        "content": "<p>As for the original lemma, should we have this version?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_eq_pow_of_pow_eq_pow_of_coprime</span> <span class=\"o\">{</span><span class=\"n\">G₀</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommGroupWithZero</span> <span class=\"n\">G₀</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">m.Coprime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 410793868,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704170480
    },
    {
        "content": "<p>It's probably equivalent to your lemma but looks a bit more detailed to me.</p>",
        "id": 410793883,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704170512
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submonoid.powers#doc\">docs#Submonoid.powers</a></p>",
        "id": 410834933,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704196445
    },
    {
        "content": "<p>Oh, sorry, wrong side!</p>",
        "id": 410834966,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704196475
    },
    {
        "content": "<p>I wonder if it is reasonable to move <code>Nat.gcd_eq_gcd_ab</code> (and the Extended Euclidean algorithm) from <code>Mathlib.Data.Int.GCD</code> to <code>Mathlib.Data.Nat.GCD.Basic</code> so that <code>Mathlib.Algebra.GroupPower.Lemmas</code> can import the latter?</p>",
        "id": 411181769,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1704371849
    },
    {
        "content": "<p>Please don't touch!</p>",
        "id": 411182156,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704372003
    },
    {
        "content": "<p><a href=\"https://tqft.net/mathlib4files/Algebra/GroupPower/Lemmas\">file#Algebra/GroupPower/Lemmas</a> will stop existing after <a href=\"https://github.com/leanprover-community/mathlib4/pull/9411\">#9411</a></p>",
        "id": 411182284,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704372045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60pow_mem_range_pow_of_coprime.60/near/410793868\">said</a>:</p>\n<blockquote>\n<p>As for the original lemma, should we have this version?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_eq_pow_of_pow_eq_pow_of_coprime</span> <span class=\"o\">{</span><span class=\"n\">G₀</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommGroupWithZero</span> <span class=\"n\">G₀</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">m.Coprime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>One way to prove this lemma, by the way, is to invoke <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.gcd_eq_gcd_ab#doc\">docs#Int.gcd_eq_gcd_ab</a> and set <code>c</code> equal to <code>a ^ (Int.gcdA n m) * b ^ (Int.gcdB n m)</code> and doing a little bit of exponent algebra.</p>",
        "id": 411277698,
        "sender_full_name": "Terence Tao",
        "timestamp": 1704410746
    }
]