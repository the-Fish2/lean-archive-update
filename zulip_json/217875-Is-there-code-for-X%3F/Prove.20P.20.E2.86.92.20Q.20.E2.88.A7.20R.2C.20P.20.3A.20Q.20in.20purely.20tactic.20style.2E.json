[
    {
        "content": "<p>Hello, I am making an automated theorem prover, that uses Lean. To keep things simple, I would like to completely avoid term style proofs (that use tactics such as have, show, exact...). However, I came across problem: I am not able to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span>\n</code></pre></div>\n<p>Is it possible to do in purely tactic style, without using tactics such as have, show, exact and preferaby without any theorems?</p>",
        "id": 434600683,
        "sender_full_name": "Richard Dudek",
        "timestamp": 1713716039
    },
    {
        "content": "<p><code>by simp [*]</code> works</p>",
        "id": 434601042,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713716369
    },
    {
        "content": "<p>Thanks for your answer. Although this can prove this specific example, it can fail at more complex proofs so it does not solve my problem. Is there a general way of manually proving statements in the form I presented?</p>",
        "id": 434601616,
        "sender_full_name": "Richard Dudek",
        "timestamp": 1713716833
    },
    {
        "content": "<p><code>tauto</code>?</p>",
        "id": 434602157,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713717315
    },
    {
        "content": "<p>I don't know why, but this tactic is not recognized by my installation of Lean. Also, I am interested in exploring non-automated proofs. Is there any way of proving this statement using only \"simple/elementary\" tactics?</p>",
        "id": 434602927,
        "sender_full_name": "Richard Dudek",
        "timestamp": 1713718050
    },
    {
        "content": "<p><code>have</code> and <code>exact</code> are pretty elementary tactics.. Here is a version using <code>apply</code>, but maybe you'll say it uses a theorem? You have an <code>∧</code> in your hypotheses so it seems reasonable to expect you'll need some theorems characterizing that symbol.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.left</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h1</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 434603722,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713718797
    },
    {
        "content": "<p>I would say this is a more straightforward elementary tactic proof but it uses <code>have</code> and <code>exact</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hq</span>\n</code></pre></div>",
        "id": 434603820,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713718859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"711578\">Richard Dudek</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Prove.20P.20.E2.86.92.20Q.20.E2.88.A7.20R.2C.20P.20.3A.20Q.20in.20purely.20tactic.20style.2E/near/434602927\">said</a>:</p>\n<blockquote>\n<p>I don't know why, but this tactic is not recognized by my installation of Lean</p>\n</blockquote>\n<p>The <code>tauto</code> tactic is from mathlib. You might need to add an <code>import</code> to the top of your file or <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#using-mathlib4-as-a-dependency\">set up mathlib as a dependency</a>. If you've set up mathlib this should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 434604233,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713719237
    },
    {
        "content": "<p>I appreciate your answer. I have tried the second way, but it still has some problems. However, The first way looks like it should work. Thanks for your effort.</p>",
        "id": 434605433,
        "sender_full_name": "Richard Dudek",
        "timestamp": 1713720334
    },
    {
        "content": "<p>I wanted to avoid allowing my code to combine assumptions, without looking at goal, because then it starts proving unnecessary statements and they amount grows rapidly.</p>",
        "id": 434605643,
        "sender_full_name": "Richard Dudek",
        "timestamp": 1713720532
    },
    {
        "content": "<p>What's your goal? Do you want to write meta code that solves this kind of goal? Autogenerate a proof via some API? Something else?</p>",
        "id": 434608966,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713723838
    },
    {
        "content": "<p>I am writing code in Python that should be able to solve any goal of supported form (so far propositional logic) using axioms. I basically rewrote tiny part of Lean into Python and made BFS to search all possible proofs of specified form. It has managet to solve most of levels in game <a href=\"https://adam.math.hhu.de/#/g/trequetrum/lean4game-logic\">A Lean Intro to Logic (hhu.de)</a> (redux worlds only), but it struggles with levels 5 and 7 of ↔ World. Aside from goals that need special theorems or manipulation with assumptions, it works pretty well.</p>",
        "id": 434611355,
        "sender_full_name": "Richard Dudek",
        "timestamp": 1713726011
    }
]