[
    {
        "content": "<p>Do we have tactics that handle something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Complex.cpow_neg_eq_inv_pow_ofReal_pos</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- exact? fails</span>\n  <span class=\"c1\">-- apply? junk</span>\n  <span class=\"c1\">-- rw? suggests `rw [cpow_neg]`</span>\n  <span class=\"c1\">-- simp? no progress</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Or must it be done \"by hand\"?... If I take the suggestion of <code>rw?</code>, then I still need:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Complex.cpow_inv_ofReal_pos</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">^</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- exact? fails</span>\n  <span class=\"c1\">-- apply? junk</span>\n  <span class=\"c1\">-- rw? junk</span>\n  <span class=\"c1\">-- simp? no progress</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Should things like this be added to Mathlib?... Thanks!</p>",
        "id": 422849811,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708617708
    },
    {
        "content": "<p>\"by hand\" kind of works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Complex.cpow_neg_eq_inv_pow_ofReal_pos</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">arg</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">Real.pi</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Complex.arg_ofReal_of_nonneg</span> <span class=\"n\">ha.le</span><span class=\"o\">,</span> <span class=\"n\">Real.pi_ne_zero.symm</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Complex.cpow_eq_pow</span><span class=\"o\">,</span> <span class=\"n\">cpow</span><span class=\"o\">,</span> <span class=\"n\">ofReal_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">ha.ne.symm</span><span class=\"o\">,</span> <span class=\"bp\">↓</span><span class=\"n\">reduceIte</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">inv_eq_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Complex.log_inv</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 422852623,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708618511
    },
    {
        "content": "<p>Indeed, but is quite painful, no? Could tactics be developed to make it more reasonable? (Alternatively, add a bunch of things like this to the API...?)</p>",
        "id": 422854686,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708619098
    },
    {
        "content": "<p>What would the scope be of a tactic that can solve this?</p>",
        "id": 422856880,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708619664
    },
    {
        "content": "<p>This just sounds like API lemmas to me</p>",
        "id": 422856974,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708619693
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">toto</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"n\">Real.log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Complex.cpow_eq_pow</span><span class=\"o\">,</span> <span class=\"n\">Complex.cpow</span><span class=\"o\">,</span> <span class=\"n\">hx.ne.symm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Complex.ofReal_log</span> <span class=\"n\">hx.le</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Complex.cpow_neg_eq_inv_pow_ofReal_pos</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_cast</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toto</span> <span class=\"n\">_</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">toto</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"n\">ha</span><span class=\"o\">)]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 422857849,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708619921
    },
    {
        "content": "<p>One might like to turn <code>toto</code>  into a <code>@[simp]</code> lemma ? It does not turn the second proof into <code>by simp [ha]</code> because <code>simp</code> wants to revert the <code>norm_cast</code>.</p>",
        "id": 422858436,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708620111
    },
    {
        "content": "<p>But this works and looks better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">toto</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">(</span><span class=\"n\">Real.log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Complex.cpow_eq_pow</span><span class=\"o\">,</span> <span class=\"n\">Complex.cpow</span><span class=\"o\">,</span> <span class=\"n\">hx.ne.symm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Complex.ofReal_log</span> <span class=\"n\">hx.le</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Complex.cpow_neg_eq_inv_pow_ofReal_pos</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_cast</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">toto</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">inv_pos.mpr</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">Real.log_inv</span><span class=\"o\">,</span> <span class=\"n\">ofReal_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 422858798,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708620213
    },
    {
        "content": "<p><code>rw_search</code> kind of works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Complex.cpow_neg_eq_inv_pow_ofReal_pos</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cpow_neg</span><span class=\"o\">,</span> <span class=\"n\">Complex.inv_cpow</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">slitPlane_arg_ne_pi</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(it finds the first <code>rw</code> term, the second one I moogled, and the <code>exact</code> I <code>exact?</code>ed)</p>\n<p>I wonder why it didn't find the second <code>rw</code> term. Does it consider <code>rw</code> lemmas that generate side conditions?</p>",
        "id": 422858986,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708620264
    },
    {
        "content": "<p>Ah, that's cool. <code>apply?</code> finds the second step:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Complex.cpow_neg_eq_inv_pow_ofReal_pos'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cpow_neg</span><span class=\"o\">]</span> <span class=\"c1\">-- from rw_search</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">inv_cpow</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">?</span><span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"c1\">-- from apply?</span>\n  <span class=\"n\">exact</span> <span class=\"n\">slitPlane_arg_ne_pi</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"c1\">-- from exact?</span>\n</code></pre></div>",
        "id": 422859971,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708620568
    },
    {
        "content": "<p>Now having intrusive thoughts about how well a deep q learning based <code>rw_search</code> would perform vs the current Levenshtein edit distance based one <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 422861553,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708621050
    }
]