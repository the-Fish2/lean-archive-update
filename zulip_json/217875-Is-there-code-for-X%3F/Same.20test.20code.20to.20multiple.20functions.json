[
    {
        "content": "<p>I am working on a translation of haskell 99 into Lean.<br>\n<a href=\"https://github.com/lean-ja/lean99\">https://github.com/lean-ja/lean99</a></p>\n<p>Each question has a test code attached to it, so that the test passes if the <code>sorry</code> is replaced by the correct implementation.<br>\nI sometimes want to present more than one example solution to a problem, but I am faced with the problem that it is difficult to use the test code all over again.</p>\n<p>Is there a way to use the same test code for <code>S1.f</code> and <code>S2.f</code> when there are functions <code>f</code> with the same name in different namespaces <code>S1</code> and <code>S2</code>?</p>",
        "id": 429902305,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711557344
    },
    {
        "content": "<p>Write your test code as a function that takes in <code>f</code> as input?</p>",
        "id": 429911486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711560243
    },
    {
        "content": "<blockquote>\n<p>Write your test code as a function that takes in f as input?</p>\n</blockquote>\n<p>That way, I end up having to write as much test code as there are functions, don't I?</p>\n<p>In one piece of code, I want to test all functions for a given test case.</p>",
        "id": 429912754,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711560661
    },
    {
        "content": "<blockquote>\n<p>That way, I end up having to write as much test code as there are functions, don't I?</p>\n</blockquote>\n<p>You will need to write a new testbench for every <em>specification</em> of the function, but not for every implementation of that specification.</p>",
        "id": 429913581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711560955
    },
    {
        "content": "<p>I think your question would be much clearer with a mwe; what do you mean by \"function\"? What do you mean by \"test code\"?</p>",
        "id": 429913676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711560979
    },
    {
        "content": "<p>I see that the test cases are written like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">rotate</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>One thing is you can write this as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">guard</span> <span class=\"n\">rotate</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which checks that this condition evaluates to true.</p>",
        "id": 429922203,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711564074
    },
    {
        "content": "<p>If you want to parameterize your tests so that you can give multiple implementations (like Eric's suggestion), here's how I might do that (though I might set up some helper functions/macros to print error messages for the individual failing tests):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test_rotate</span> <span class=\"o\">(</span><span class=\"n\">rotate</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">rotate</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">])</span>\n  <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">rotate</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">])</span>\n  <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">rotate</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">])</span>\n  <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">rotate</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n\n<span class=\"bp\">#</span><span class=\"n\">guard</span> <span class=\"n\">test_rotate</span> <span class=\"n\">rotate</span>\n<span class=\"bp\">#</span><span class=\"n\">guard</span> <span class=\"n\">test_rotate</span> <span class=\"n\">other_rotate</span>\n</code></pre></div>",
        "id": 429922773,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711564262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thank you.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">S1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myLast</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">myLast</span> <span class=\"n\">as</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">S1</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">S2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myLast</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">l.reverse</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">head</span><span class=\"bp\">?</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">S2</span>\n\n<span class=\"c1\">-- The following codes are for test</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">myLast</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">myLast</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">myLast</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">myLast</span> <span class=\"o\">[</span><span class=\"sc\">'x'</span><span class=\"o\">,</span> <span class=\"sc\">'y'</span><span class=\"o\">,</span> <span class=\"sc\">'z'</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"sc\">'z'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 430066810,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711632383
    },
    {
        "content": "<p>Above is the MWE, can I test <code>S1.myLast</code> and <code>S2.myLast</code> at the same time?</p>",
        "id": 430067003,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711632447
    },
    {
        "content": "<p>Here's the lowest-tech solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"#mytests \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n    <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n    <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n    <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"o\">[</span><span class=\"sc\">'x'</span><span class=\"o\">,</span> <span class=\"sc\">'y'</span><span class=\"o\">,</span> <span class=\"sc\">'z'</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"sc\">'z'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">mytests</span> <span class=\"n\">S1.myLast</span>\n</code></pre></div>",
        "id": 430071034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711633759
    }
]