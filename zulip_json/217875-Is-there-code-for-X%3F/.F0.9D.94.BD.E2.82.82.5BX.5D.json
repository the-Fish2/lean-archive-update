[
    {
        "content": "<p>Hello, is there an implementation of the polynomial ring <code>ùîΩ‚ÇÇ[X]</code> in Mathlib4 that runs very fast for direct computation? For example, I want a proof of <code>(X^4 + 1)(X^8 + X^4 + 1) = X^12 + 1</code> by <code>rfl</code> or <code>decide</code> to succeed in almost no time. Thank you.</p>\n<p>(I tried <code>Polynomial</code> but it seems that it doesn't work...)</p>",
        "id": 438127100,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1715453240
    },
    {
        "content": "<p>Does <code>ring</code> work?</p>",
        "id": 438127567,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1715453840
    },
    {
        "content": "<p>Polynomial is the implementation, but is not designed for computation. I've seen a number of people here on zulip with interest in polynomial algorithms, but nothing has materialised as far as I know</p>",
        "id": 438127630,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715453912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.F0.9D.94.BD.E2.82.82.5BX.5D/near/438127567\">said</a>:</p>\n<blockquote>\n<p>Does <code>ring</code> work?</p>\n</blockquote>\n<p>Nope; it asks for <code>ring_nf</code>. I thought it'd work after something like <code>rw [‚Üê sub_eq_zero]; ring_nf</code> but apparently it doesn't work either. At least not if I use <code>Polynomial</code>.</p>",
        "id": 438127822,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1715454173
    },
    {
        "content": "<p>MWE? <code>ring</code> should work here</p>",
        "id": 438127999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715454419
    },
    {
        "content": "<p>or rather, <code>ring</code> would work if it wasn't a modular equality</p>",
        "id": 438128032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715454471
    },
    {
        "content": "<p>but you can still prove <code>(X^4 + 1)*(X^8 + X^4 + 1) = X^12 + 1 + 2*(X^8 + X^4)</code> by <code>ring</code> and then rewrite with <code>2 = 0</code></p>",
        "id": 438128122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715454560
    },
    {
        "content": "<p>you can probably also get <code>linear_combination</code> to do it in one go (from the hypothesis <code>2 = 0</code>)</p>",
        "id": 438128136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715454588
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Polynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">random</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring_nf</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>The third point is a good point, but I wanted to avoid that. I haven't tried <code>linear_combination</code>.</p>",
        "id": 438128284,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1715454733
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.CharP.Two</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Polynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">random</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">CharTwo.two_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 438129580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715456166
    },
    {
        "content": "<p>I see; thanks!</p>\n<p>The import reminds me that I forgot to update mathlib <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 438129735,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1715456389
    },
    {
        "content": "<p>You can use <code>‚äï i : ‚Ñï, R</code> for computable polynomials where <code>rfl</code> / <code>decide</code> is fast (enough)</p>",
        "id": 438130956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715457691
    },
    {
        "content": "<p>I just realized that I already made one that turns out to be fast enough with <code>decide</code>, using <code>Finset ‚Ñï</code>. It's just that expressing the polynomials as usual makes it slower, instead I had to write down the corresponding finite set (e.g. if I want to write down <code>X^4 + 1</code>, using something like <code>ofFinset {0, 4}</code> will actually make it fast enough).</p>\n<p>I think it might also work for monoid algebras <code>ùîΩ‚ÇÇ[M]</code>, but I'm not that interested in generalizing it for now.</p>\n<p>I still have to fill out some <code>sorry</code>s, but should I share it?</p>",
        "id": 438134360,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1715461363
    },
    {
        "content": "<p>I don't know what you have in mind, so feel free to ignore my comment, but finset are not ordered, while coefficients of polynomials are.</p>",
        "id": 438139093,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1715467168
    },
    {
        "content": "<p>And if you plan to use lists, you have the problem that <code>1+X+0*X^2</code> is the same as <code>1+X</code></p>",
        "id": 438139107,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1715467193
    },
    {
        "content": "<p>If you needed a fast implementation of this ring, you could use <code>Nat</code> with <code>^^^</code> for addition and non-carrying-base-2-multiplication for the multiplication.</p>\n<p>There's a good amount of work ahead of you however. Here's it partially done.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Polynomials with ùîΩ‚ÇÇ coefficients, with a fast implementation.</span>\n<span class=\"sd\">Notation `ùîΩ‚ÇÇ[X]`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">F2X</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">F2X</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"ùîΩ‚ÇÇ[X]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F2X</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">ofNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"o\">}</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">ofInt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">Int.natMod</span> <span class=\"n\">n</span> <span class=\"mi\">2</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">F2X.ofNat</span> <span class=\"n\">n</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">p.data</span> <span class=\"bp\">^^^</span> <span class=\"n\">q.data</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">F2X.add</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">id</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">F2X</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">p</span> <span class=\"n\">prec</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Nat.digits</span> <span class=\"mi\">2</span> <span class=\"n\">p.data</span>\n      <span class=\"bp\">|&gt;.</span><span class=\"n\">mapIdx</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">if</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">none</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"s2\">\"1\"</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"s2\">\"X\"</span>\n        <span class=\"k\">else</span> <span class=\"n\">some</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"X^{i}\"</span><span class=\"o\">)</span>\n      <span class=\"bp\">|&gt;.</span><span class=\"n\">filterMap</span> <span class=\"n\">id</span>\n      <span class=\"bp\">|&gt;.</span><span class=\"n\">reverse</span>\n      <span class=\"bp\">|&gt;</span> <span class=\"n\">String.intercalate</span> <span class=\"s2\">\" + \"</span>\n      <span class=\"bp\">|&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">prec</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">s</span> <span class=\"k\">else</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({s})\"</span> <span class=\"c1\">-- simple precedence handling</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mulCore</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">acc</span>\n  <span class=\"k\">else</span> <span class=\"n\">F2X.mulCore</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"bp\">^^^</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">F2X.mulCore</span> <span class=\"n\">p.data</span> <span class=\"n\">q.data</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">F2X.mul</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">natPow</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">F2X.natPow</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">NatPow</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">F2X.natPow</span><span class=\"o\">‚ü©</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span>\n<span class=\"c1\">-- X^2 + X</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- X^2 + 1</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n<span class=\"c1\">-- X^3 + X^2 + X + 1</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span>\n<span class=\"c1\">-- X^4 + 1</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span>\n<span class=\"c1\">-- X^5 + X^4 + X + 1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- instant</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">neg_eq</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">ext'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.data</span> <span class=\"bp\">=</span> <span class=\"n\">q.data</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">data_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">data_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">data_X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">data_add</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"n\">p.data</span> <span class=\"bp\">^^^</span> <span class=\"n\">q.data</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ofNat_zero</span> <span class=\"o\">:</span> <span class=\"n\">F2X.ofNat</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ofNat_one</span> <span class=\"o\">:</span> <span class=\"n\">F2X.ofNat</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ofNat_succ_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F2X.ofNat</span> <span class=\"n\">n.succ.succ</span> <span class=\"bp\">=</span> <span class=\"n\">F2X.ofNat</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">F2X.ofNat</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">mk.injEq</span><span class=\"o\">]</span>\n  <span class=\"n\">omega</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ofNat_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F2X.ofNat</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"n\">F2X.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">F2X.ext'</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">F2X.ofNat</span><span class=\"o\">]</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mod_two_eq_zero_or_one</span> <span class=\"n\">n</span>\n    <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_xor</span><span class=\"o\">,</span> <span class=\"n\">Nat.xor_self</span><span class=\"o\">]</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.succ_mod_two_eq_one_iff.mpr</span> <span class=\"n\">h</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.succ_mod_two_eq_zero_iff.mpr</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ofInt_zero</span> <span class=\"o\">:</span> <span class=\"n\">F2X.ofInt</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ofInt_one</span> <span class=\"o\">:</span> <span class=\"n\">F2X.ofInt</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">zero_mul</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">xor_one_div_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^^^</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">xor_one_mod_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^^^</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">mulCore_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F2X.mulCore</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">acc</span> <span class=\"bp\">=</span> <span class=\"n\">F2X.mulCore</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"bp\">^^^</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strongInductionOn</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">m</span> <span class=\"n\">acc</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">F2X.mulCore</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">simp</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">)</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.xor_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span><span class=\"bp\">!</span> <span class=\"mi\">1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.xor_comm</span><span class=\"o\">]</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">add_one_mul</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">m</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">q</span>\n  <span class=\"n\">apply</span> <span class=\"n\">F2X.ext'</span>\n  <span class=\"n\">unfold_projs</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">F2X.mul</span><span class=\"o\">,</span> <span class=\"n\">ofNat_one</span><span class=\"o\">]</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">F2X.mulCore</span>\n  <span class=\"n\">split</span>\n  <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">F2X.add</span><span class=\"o\">,</span> <span class=\"n\">data_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.xor_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">F2X.mulCore</span><span class=\"o\">,</span> <span class=\"n\">F2X.add</span><span class=\"o\">]</span>\n  <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">F2X.add</span><span class=\"o\">,</span> <span class=\"n\">data_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.xor_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_xor</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">‚ä¢</span>\n    <span class=\"n\">split</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">F2X.mulCore</span><span class=\"o\">]</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F2X.mulCore_eq</span><span class=\"o\">]</span>\n      <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F2X.mulCore_eq</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">xor_one_div_two</span><span class=\"o\">,</span> <span class=\"n\">Nat.xor_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">congr</span><span class=\"bp\">!</span> <span class=\"mi\">1</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">xor_one_mod_two</span><span class=\"o\">]</span>\n      <span class=\"n\">obtain</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mod_two_eq_zero_or_one</span> <span class=\"n\">n</span>\n      <span class=\"bp\">¬∑</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_mod_two_eq_one_iff.mpr</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"bp\">¬∑</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_mod_two_eq_zero_iff.mpr</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"bp\">ùîΩ‚ÇÇ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">F2X.ext'</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">F2X.ext'</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">F2X.ext'</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.xor_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">F2X.ext'</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.xor_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">nsmul</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">F2X.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span>\n  <span class=\"n\">zsmul</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">F2X.ofInt</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span>\n  <span class=\"n\">nsmul_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">F2X.zero_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ofNat_succ</span><span class=\"o\">,</span> <span class=\"n\">F2X.add_one_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">zsmul_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">F2X.zero_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">zsmul_succ'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zsmul_neg'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">F2X.natPow</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n  <span class=\"n\">npow_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">npow_succ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n</div></div>\n<p>Examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span>\n<span class=\"c1\">-- X^2 + X</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- X^2 + 1</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n<span class=\"c1\">-- X^3 + X^2 + X + 1</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span>\n<span class=\"c1\">-- X^4 + 1</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span>\n<span class=\"c1\">-- X^5 + X^4 + X + 1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- instant</span>\n</code></pre></div>",
        "id": 438141865,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715471263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Your example works. However, if I move that example of <code>(X^4 + 1)(X^8 + X^4 + 1) = X^12 + 1</code> after the commutative ring instance (i.e. after everything), <code>rfl</code> strangely exceeds maximum recursion depth for me. What is happening here?</p>",
        "id": 438143039,
        "sender_full_name": "Gian Cordana Sanjaya",
        "timestamp": 1715472556
    },
    {
        "content": "<p>The ring instance was missing the <code>npow</code> field (added it)</p>",
        "id": 438143216,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715472774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.F0.9D.94.BD.E2.82.82.5BX.5D/near/438130956\">said</a>:</p>\n<blockquote>\n<p>You can use <code>‚äï i : ‚Ñï, R</code> for computable polynomials where <code>rfl</code> / <code>decide</code> is fast (enough)</p>\n</blockquote>\n<p>To elaborate on this thought:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span> <span class=\"n\">DirectSum</span> <span class=\"k\">in</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">ComputablePolynomial</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">‚®Å</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">R</span>\n<span class=\"kd\">notation</span> <span class=\"n\">R</span> <span class=\"s2\">\"[X]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ComputablePolynomial</span> <span class=\"n\">R</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">ComputablePolynomial.X</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">DirectSum.of</span> <span class=\"n\">_</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n<span class=\"kn\">open</span> <span class=\"n\">ComputablePolynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">random</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 438215100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715551172
    }
]