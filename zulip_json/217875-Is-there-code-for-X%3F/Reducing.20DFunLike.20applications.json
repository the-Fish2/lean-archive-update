[
    {
        "content": "<p>I have this MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">SchwartzMap</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ùì¢</span><span class=\"o\">(</span><span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">‚ü©</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>After the <code>simp</code> call, the goal looks like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">smooth'</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ãØ</span><span class=\"o\">,</span> <span class=\"n\">decay'</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ãØ</span> <span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>but I was expecting <code>simp</code> to close it (and <code>rfl</code> does, as do <code>change x = x</code> and the like). How do I tell simp to reduce this?</p>",
        "id": 430756924,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712052987
    },
    {
        "content": "<p>Adding this above,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">toSchwartz_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">SchwartzMap.mk</span> <span class=\"n\">f</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>makes it work, but I can't figure if this is filling a hole in the <code>SchwartzMap</code> API or introducing a footgun defeating the point of <code>DFunLike</code>...</p>",
        "id": 430868779,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712090082
    },
    {
        "content": "<p>The missing lemma is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">SchwartzMap.mk</span> <span class=\"n\">f</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 430872184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712091418
    },
    {
        "content": "<p>(<code>[norm_cast]</code>!)</p>",
        "id": 430872425,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1712091525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Reducing.20DFunLike.20applications/near/430872184\">said</a>:</p>\n<blockquote>\n<p>The missing lemma is</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">SchwartzMap.mk</span> <span class=\"n\">f</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This does not reduce:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">SchwartzMap</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">SchwartzMap.mk</span> <span class=\"n\">f</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ùì¢</span><span class=\"o\">(</span><span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">‚ü©</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 430894660,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712102560
    }
]