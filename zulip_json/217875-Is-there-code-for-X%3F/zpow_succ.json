[
    {
        "content": "<p>Where is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zpow_succ</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 424576656,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709527265
    },
    {
        "content": "<p>ugh, <code>(mul_self_zpow g x).symm</code>, okay</p>",
        "id": 424576694,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709527310
    },
    {
        "content": "<p>Seems weird to be missing this?</p>",
        "id": 424576706,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709527321
    },
    {
        "content": "<p>A little, but <code>succ</code> is slightly weird terminology to use for <code>Int</code>, right? I know we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.succ#doc\">docs#Int.succ</a>, but I mean that we would normally use <code>add_one</code>.</p>",
        "id": 424578005,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709528174
    },
    {
        "content": "<p>Sure, <code>zpow_add_one</code> is fine.</p>",
        "id": 424578318,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709528429
    },
    {
        "content": "<p>I guess that lemma isn't very confluent with <code>zpow_add</code>? Should the RHS by <code>g ^ x * g</code>?</p>",
        "id": 424578495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709528570
    },
    {
        "content": "<p>Sorry, have you missed <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=zpow_add_one#doc\">docs#zpow_add_one</a> ?</p>",
        "id": 424578515,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1709528588
    },
    {
        "content": "<p>Yes! :-)</p>",
        "id": 424578708,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709528718
    },
    {
        "content": "<p>Lol, I feel justified.</p>",
        "id": 424579147,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1709529011
    }
]