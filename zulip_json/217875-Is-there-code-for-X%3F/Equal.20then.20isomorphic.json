[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Sylow</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Cycle.Concrete</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Subgroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.PresentedGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">QuotientGroup</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">first_isomorphism_theorem</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">f.ker</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"n\">f.range</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ProdCylic</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">H.Normal</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">K.Normal</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Disjoint</span> <span class=\"n\">H</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">H.index</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">K.index</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n <span class=\"k\">have</span> <span class=\"n\">fSurj</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Function.Surjective</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"n\">x2</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">projH</span> <span class=\"o\">:=</span> <span class=\"n\">QuotientGroup.mk'_surjective</span> <span class=\"n\">H</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">at</span> <span class=\"n\">projH</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">projH</span> <span class=\"n\">x1</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hx1'</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">projK</span> <span class=\"o\">:=</span> <span class=\"n\">QuotientGroup.mk'_surjective</span> <span class=\"n\">K</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">at</span> <span class=\"n\">projK</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">projK</span> <span class=\"n\">x2</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hx2'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">MonoidHom.prod_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"n\">y</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hx1'</span><span class=\"o\">,</span><span class=\"bp\">←</span><span class=\"n\">hx2'</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n <span class=\"k\">have</span> <span class=\"n\">KerCap</span> <span class=\"o\">:</span> <span class=\"n\">f.ker</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"bp\">⊓</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">MonoidHom.ker_prod</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">QuotientGroup.ker_mk'</span><span class=\"o\">,</span><span class=\"n\">QuotientGroup.ker_mk'</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n <span class=\"k\">have</span> <span class=\"n\">KerCapBot</span> <span class=\"o\">:</span> <span class=\"n\">f.ker</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">KerCap</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h.eq_bot</span>\n    <span class=\"n\">done</span>\n <span class=\"k\">have</span> <span class=\"n\">fImage</span> <span class=\"o\">:</span> <span class=\"n\">f.range</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n <span class=\"k\">have</span> <span class=\"n\">FirstIso</span> <span class=\"o\">:=</span> <span class=\"n\">first_isomorphism_theorem</span> <span class=\"n\">f</span>\n <span class=\"k\">have</span> <span class=\"n\">KerTrivial</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.quotientMulEquivOfEq</span> <span class=\"n\">KerCapBot</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n <span class=\"k\">have</span> <span class=\"n\">GBot</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">QuotientGroup.quotientBot.symm</span>\n  <span class=\"n\">done</span>\n <span class=\"k\">have</span> <span class=\"n\">concatenation</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">G</span><span class=\"bp\">⧸</span><span class=\"n\">MonoidHom.ker</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">MulEquiv.trans</span> <span class=\"n\">GBot</span> <span class=\"n\">KerTrivial</span>\n  <span class=\"n\">done</span>\n <span class=\"k\">have</span> <span class=\"n\">finalIso</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">MonoidHom.range</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">MulEquiv.trans</span> <span class=\"n\">concatenation</span> <span class=\"n\">FirstIso</span>\n  <span class=\"n\">done</span>\n <span class=\"k\">have</span> <span class=\"n\">fImageIso</span> <span class=\"o\">:</span> <span class=\"n\">f.range</span> <span class=\"bp\">≃*</span> <span class=\"o\">((</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n <span class=\"k\">have</span> <span class=\"n\">finalIso</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"o\">((</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">MulEquiv.trans</span> <span class=\"n\">finalIso</span> <span class=\"n\">fImageIso</span>\n  <span class=\"n\">done</span>\n <span class=\"n\">exact</span> <span class=\"n\">finalIso</span>\n</code></pre></div>\n<p>My problem is the followinf. I should know that f.range = ((G ⧸ H) × (G ⧸ K)) (this is because I previously proved that f is surjective). and I want a proof that f.range ≃* ((G ⧸ H) × (G ⧸ K))  to use exact MulEquiv.trans, but I'm unable to find on <a href=\"http://moogle.ai\">moogle.ai</a> for example the proof of the fact that equal implies isomorphic in this case, anyone does know how to solve this problem? <br>\nAny help would be appreciated.</p>",
        "id": 409717416,
        "sender_full_name": "brokkilisoup",
        "timestamp": 1703338041
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulEquiv.subgroupCongr#doc\">docs#MulEquiv.subgroupCongr</a></p>",
        "id": 409717627,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703338226
    },
    {
        "content": "<p>This one was not super easy to find. I was expecting something like <code>Subgroup.equivOfEq</code>.</p>",
        "id": 409717657,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703338262
    },
    {
        "content": "<p>although I assume that by <code>f.range = (G ⧸ H) × (G ⧸ K)</code> you mean <code>f.range = ⊤</code>. You will find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.topEquiv#doc\">docs#Subgroup.topEquiv</a> useful.</p>",
        "id": 409717743,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703338325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Equal.20then.20isomorphic/near/409717743\">ha scritto</a>:</p>\n<blockquote>\n<p>although I assume that by <code>f.range = (G ⧸ H) × (G ⧸ K)</code> you mean <code>f.range = ⊤</code>. You will find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.topEquiv#doc\">docs#Subgroup.topEquiv</a> useful.</p>\n</blockquote>\n<p>But should I prove than that (G ⧸ H) × (G ⧸ K) = ⊤ or Lean does know it some how? because f being surjective is f.range = (G ⧸ H) × (G ⧸ K)</p>",
        "id": 409841473,
        "sender_full_name": "brokkilisoup",
        "timestamp": 1703451141
    },
    {
        "content": "<p>That statement is essentially meaningless in lean because <code>f.range</code> is a set and the product is a type.</p>",
        "id": 409849713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703460064
    },
    {
        "content": "<p>A type can have a subset whose elements are the entire type though, that's what <code>\\top</code> is.</p>",
        "id": 409849730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703460110
    },
    {
        "content": "<p>As Kevin says, there's a difference between <code>(G ⧸ H) × (G ⧸ K)</code> (a type) and <code>⊤ : Subgroup ((G ⧸ H) × (G ⧸ K))</code> (a term).</p>",
        "id": 409883529,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703488888
    }
]