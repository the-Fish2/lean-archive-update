[
    {
        "content": "<p>By a (vertical) section of a set <code>a : Set X \\times Y</code>, I mean a set of the form <code>{y : Y | (x,y) \\in a}</code> for some <code>x : X</code>.  </p>\n<p>Is there a good way to talk about these? I have been using <code>a.curry x</code> and it sometimes works as desired, but gives me some issues. For example I'm not sure how to fix the following error. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mem_curry</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">a.curry</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- failed to synthesize instance Membership β (β → Prop)</span>\n</code></pre></div>",
        "id": 436776439,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1714683771
    },
    {
        "content": "<p>This spelling is bound to bring pain on you.</p>",
        "id": 436776723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714683919
    },
    {
        "content": "<p>It is violating the abstraction barrier of the definition of <code>Set</code>.</p>",
        "id": 436776754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714683938
    },
    {
        "content": "<p>Did you try simply using <code>Prod.mk x ⁻¹' a</code>?</p>",
        "id": 436776935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714684021
    },
    {
        "content": "<p>You can write it like this too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mem_curry</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Set.mem_preimage</span>\n</code></pre></div>",
        "id": 436777144,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714684113
    },
    {
        "content": "<p>This has some nice symmetry:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Set.mem_preimage</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Set.mem_preimage</span>\n</code></pre></div>",
        "id": 436777270,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714684181
    },
    {
        "content": "<p>Oh yes, <code>(x, ·) ⁻¹' a</code> definitely reads better than <code>Prod.mk x ⁻¹' a</code> and has the nice benefit of working just as well with the right-hand set.</p>",
        "id": 436777306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714684201
    },
    {
        "content": "<p>Yeah, I mean this symmetry.</p>",
        "id": 436777380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714684217
    },
    {
        "content": "<p>Oh, the parentheses of a pair also counts as parentheses surrounding <code>·</code>? That's pretty neat</p>",
        "id": 436777500,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714684278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Sections.20of.20a.20set.20in.20a.20product/near/436777270\">said</a>:</p>\n<blockquote>\n<p>This has some nice symmetry:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Set.mem_preimage</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Set.mem_preimage</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks! I will probably switch to this</p>",
        "id": 436777756,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1714684419
    },
    {
        "content": "<p>BTW, <code>by rfl</code> works in stead of <code>Set.mem_preimage</code> for the proof, but <code>rfl</code> doesn't.</p>",
        "id": 436778168,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1714684583
    },
    {
        "content": "<p>Oh, that's because <code>rfl</code> is for Eq. You can use <code>Iff.rfl</code> here too.</p>",
        "id": 436778979,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714685001
    },
    {
        "content": "<p>(or <code>.rfl</code>)</p>",
        "id": 436779300,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714685148
    },
    {
        "content": "<p>thanks again</p>",
        "id": 436780284,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1714685592
    }
]