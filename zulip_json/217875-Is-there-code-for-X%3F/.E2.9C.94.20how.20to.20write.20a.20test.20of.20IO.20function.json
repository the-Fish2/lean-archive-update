[
    {
        "content": "<p>I'm working on <a href=\"https://github.com/lean-ja/lean99\">Lean 99</a>, which is lean translation of Haskell 99.</p>\n<p>I provide test codes for each question. The users implement the function so that the test code passes.</p>\n<p>However, with regard to Problem 23, I no longer know how to prepare the test code. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\"># Problem 23</span>\n<span class=\"cm\">Extract a given number of randomly selected elements from a list.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rndSelect</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"n\">List.range</span> <span class=\"n\">n</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">index</span> <span class=\"bp\">←</span> <span class=\"n\">IO.rand</span> <span class=\"mi\">0</span> <span class=\"bp\">$</span> <span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n    <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"o\">::</span> <span class=\"n\">result</span>\n  <span class=\"n\">pure</span> <span class=\"n\">result</span>\n\n<span class=\"c1\">-- The following codes are test cases</span>\n\n<span class=\"c1\">-- error!! how to implement?</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">rndSelect</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">rndSelect</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 428181409,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711041845
    },
    {
        "content": "<p>Oh, why does this error happen...?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rndSelect</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">index</span> <span class=\"bp\">←</span> <span class=\"n\">IO.rand</span> <span class=\"mi\">0</span> <span class=\"bp\">$</span> <span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n    <span class=\"k\">let</span> <span class=\"n\">previous</span> <span class=\"bp\">←</span> <span class=\"n\">rndSelect</span> <span class=\"n\">l</span> <span class=\"n\">n</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"o\">::</span> <span class=\"n\">previous</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">(kernel) declaration has free variables '_eval'</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"n\">rndSelect</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 428183404,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711042498
    },
    {
        "content": "<p>The error happens because you didn't specify <code>α</code></p>",
        "id": 428190247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711044925
    },
    {
        "content": "<p>The error message could certainly be better</p>",
        "id": 428190283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711044937
    },
    {
        "content": "<p>One answer to your question is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"n\">Lean.Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">rndSelect</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 428191031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711045219
    },
    {
        "content": "<p>If you want the test-case to be a proof though, then you probably want to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RandT#doc\">docs#RandT</a> instead</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Control.Random</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\"># Problem 23</span>\n<span class=\"cm\">Extract a given number of randomly selected elements from a list.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rndSelect</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RandT</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"n\">List.range</span> <span class=\"n\">n</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">←</span> <span class=\"n\">Random.randBound</span> <span class=\"n\">ℕ</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"o\">::</span> <span class=\"n\">result</span>\n  <span class=\"n\">pure</span> <span class=\"n\">result</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SatisfiesM</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rndSelect</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">RandT</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 428192148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711045604
    },
    {
        "content": "<p>By far the easiest way to write this proof would be to change <code>rndSelect </code> to return an appropriate subtype in the first place</p>",
        "id": 428192796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711045829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thank you very much.</p>\n<blockquote>\n<p>By far the easiest way to write this proof would be to change rndSelect  to return an appropriate subtype in the first place</p>\n</blockquote>\n<p>What do you mean by appropriate subtype?</p>",
        "id": 428330826,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711114444
    },
    {
        "content": "<p>Make the return type be a subtype that contains everything you could possibly want to know about it</p>",
        "id": 428332091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711114869
    },
    {
        "content": "<p>In this case, \"is a subset of the original list and has length <code>n</code>\"</p>",
        "id": 428332139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711114887
    },
    {
        "content": "<p>my final solution is here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rndSelect</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- The following code is a test case and you should not change it.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runTest</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"bp\">←</span> <span class=\"n\">rndSelect</span> <span class=\"n\">l</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">check</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">check</span> <span class=\"o\">:=</span> <span class=\"n\">check</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">result.length</span> <span class=\"bp\">==</span> <span class=\"n\">n</span>\n  <span class=\"n\">check</span> <span class=\"o\">:=</span> <span class=\"n\">check</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">result.all</span> <span class=\"n\">l.contains</span>\n  <span class=\"k\">if</span> <span class=\"n\">check</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"ok!\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">IO.throwServerError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"failed: rndSelect {l} {n} = {result}\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">runTest</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">runTest</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">runTest</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">runTest</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"mi\">12</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">runTest</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">5200</span><span class=\"o\">)</span> <span class=\"mi\">1897</span>\n</code></pre></div>",
        "id": 429406458,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711373832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 429406940,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711373904
    },
    {
        "content": "<p>Are you sure you want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.throwServerError#doc\">docs#IO.throwServerError</a> ?</p>",
        "id": 429409678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711374320
    },
    {
        "content": "<p>I want to make an error when the test fails</p>",
        "id": 429409970,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711374363
    },
    {
        "content": "<p>I'm pretty sure that's internal API for the Lean server</p>",
        "id": 429410316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711374416
    },
    {
        "content": "<p>You want <code>throw &lt;| .userError _</code></p>",
        "id": 429410447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711374441
    },
    {
        "content": "<p>(they're the same in the end, but you're not writing a Lean server so shouldn't be asking to throw server errors!)</p>",
        "id": 429410520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711374456
    }
]