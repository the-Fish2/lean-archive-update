[
    {
        "content": "<p>I think this is not in mathlib4 and could be useful. Also, if someone can help me to simplify the proof... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.MonoidLocalization</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span>  <span class=\"n\">Submonoid.LocalizationMap.map_units₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid.LocalizationMap</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">f.toMap</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">f.toMap</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">CanLift.prf</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">hr</span>\n        <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">f.map_units</span> <span class=\"n\">a</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MonoidHom.map_mul</span> <span class=\"o\">(</span><span class=\"n\">f.toMap</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">exact</span> <span class=\"n\">isUnit_of_mul_isUnit_right</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 419070020,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1706716250
    },
    {
        "content": "<p>A little:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.MonoidLocalization</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span>  <span class=\"n\">Submonoid.LocalizationMap.map_units₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid.LocalizationMap</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">f.toMap</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">f.map_units</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MonoidHom.map_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">exact</span> <span class=\"n\">isUnit_of_mul_isUnit_right</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 419072515,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706716905
    },
    {
        "content": "<p>I really don't understand how to get an element  <code>a : S</code> from and element <code>b : M</code> such that <code>b  ∈ S</code>.</p>",
        "id": 419072879,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1706716979
    },
    {
        "content": "<p>That's <code>⟨_, hr⟩</code></p>",
        "id": 419073184,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706717042
    },
    {
        "content": "<p><code>S</code> treated as a type is \"just\" a subtype, which is a pair of an element and a proof that the element is in <code>S</code></p>",
        "id": 419073326,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706717074
    },
    {
        "content": "<p>And how can extract what I call <code>hr</code> without a <code>let</code>or <code>obtain</code>? I am sure this can be written more succinctly</p>",
        "id": 419077621,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1706718252
    },
    {
        "content": "<p>You could do <code>have := f.map_units ⟨_, hy.choose_spec⟩</code> but I would keep the <code>let</code>. Maybe you could take another look at the places you use this lemma, though, and see if there's a better way to phrase it</p>",
        "id": 419079389,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706718797
    },
    {
        "content": "<p>Note it's generally preferable to split <code>(hy: ∃ r, r * y ∈ S)</code> into two arguments <code>r</code> and <code>hry : r * y ∈ S</code></p>",
        "id": 419086840,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1706721228
    },
    {
        "content": "<p>I am not sure what you mean. In the theorem, who is r is irrelevant (only its existence matters).</p>",
        "id": 419093316,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1706723332
    },
    {
        "content": "<p>That's true but it's easier to supply arguments like <code>r hry</code> than <code>⟨r, hry⟩</code>, so splitting makes the theorem easier to use. So don't be surprised if reviewers ask you to split it when you PR it.</p>",
        "id": 419093939,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1706723514
    },
    {
        "content": "<p>But if your condition is something <code>hy : y ∈ S.saturation</code> then there's no point splitting it.<br>\n(where <code>y ∈ S.saturation</code> is defeq to <code>∃ r, r * y ∈ S</code>)</p>",
        "id": 419094190,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1706723581
    },
    {
        "content": "<p>Yes, that was what I was thinking on doing.</p>",
        "id": 419094434,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1706723649
    }
]