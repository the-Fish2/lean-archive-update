[
    {
        "content": "<p>Looking at <a href=\"https://github.com/leanprover-community/mathlib4/pull/12536\">#12536</a> by <span class=\"user-mention\" data-user-id=\"492938\">@Matias Heikkil√§</span> convinced me it is time to fix our universe issues in the Stone-Cech universal property. Working on this I got side-tracked by the fact we don‚Äôt seem to have the reflection of topological spaces into T2 spaces (by reflection I mean a functor that is left-adjoint to the inclusion functor). We do have something called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=separationQuotient#doc\">docs#separationQuotient</a> whose name is not so great since we have at least half a dozen separation axioms in Mathlib and this name does not tell which separation is achieved. And it is not the one I want here (we could argue that T2 is the most common separation axiom and it should get the separationQuotient name, but being explicit is also nice). </p>\n<p>So I built the T2 one <a href=\"https://github.com/leanprover-community/mathlib4/blob/7ddd7cc5afef2be7a04aec97f039da5540e2b445/Mathlib/Topology/Separation.lean#L1469-L1532\">here</a>. So far everything is in one place, including twenty lines above that have nothing to do with separation. Before moving things to their proper home, I‚Äôd be interested in reading comments about this. People who may want to comment include <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> and <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>.</p>",
        "id": 439134042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715912691
    },
    {
        "content": "<p>One weird lemma is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Continuous.disjoint_nhds_of_different_image</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">‚àò</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxx'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"n\">f</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x'</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">disjoint_nhds_nhds.mpr</span> <span class=\"n\">hxx'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"k\">have</span> <span class=\"n\">d‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">comap</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">tendsto_iff_comap.mp</span> <span class=\"n\">hg.continuousAt</span>\n  <span class=\"k\">have</span> <span class=\"n\">d‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">comap</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x'</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">tendsto_iff_comap.mp</span> <span class=\"n\">hg.continuousAt</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">disjoint_comap</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"n\">d‚ÇÅ</span> <span class=\"n\">d‚ÇÇ</span>\n</code></pre></div>\n<p>that is simply the common part of two proofs that I had. Of course the formulation is silly, the map <code>f</code> could simply be replace by <code>g ‚àò k</code> in the statement. But somehow it makes the lemma easier to apply. Also one could ask that <code>g</code> is continuous only at <code>k x</code> and <code>k x'</code>, and weaken the T2 assumption on <code>Y</code> to talk only about <code>f x</code> and <code>f x'</code>. But again it would make the lemma harder to use for its two intended applications. But I still feel bad about this so don‚Äôt hesitate to find a nicer way to solve the proof duplication issue.</p>",
        "id": 439134550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715913033
    },
    {
        "content": "<p>What do you suggest about migration?</p>\n<ul>\n<li>For R1 spaces, two setoids are equivalent, and I think that we should have it as a theorem.</li>\n<li>Which defeq do we use for uniform spaces, metric spaces etc?</li>\n<li>Who does the migration?</li>\n</ul>",
        "id": 439134633,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715913090
    },
    {
        "content": "<p>I‚Äôm not sure we need to migrate anything.</p>",
        "id": 439134716,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715913128
    },
    {
        "content": "<p>Maybe the other construction is useful too since in general they are different.</p>",
        "id": 439134735,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715913148
    },
    {
        "content": "<p>Currently, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SeparationQuotient#doc\">docs#SeparationQuotient</a> (a.k.a. T0 quotient) is used for uniform spaces, metric spaces etc. Do you want to use the new construction for uniform spaces? If yes, then we need to migrate.</p>",
        "id": 439134791,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715913194
    },
    {
        "content": "<p>Definitely still a lean newbie, but as a general topology researcher, I can say that if I came across \"separation quotient\" in the literature I'd react with <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> and look up how it was defined, but \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">T_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> quotient\" is quite natural.</p>",
        "id": 439134825,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1715913237
    },
    {
        "content": "<p>As for your lemma, <code>subst f</code> gets you to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.disjoint#doc\">docs#Filter.Tendsto.disjoint</a></p>",
        "id": 439134901,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715913278
    },
    {
        "content": "<p>Yes, I think we can have names <code>t0Quotient</code> and <code>t2Quotient</code>, but I understand that using <code>t0Quotient</code> with a uniform space would read weird.</p>",
        "id": 439134960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715913329
    },
    {
        "content": "<p>What do you think about <code>KolmogorovQuotient</code>? <a href=\"https://en.wikipedia.org/wiki/Kolmogorov_space#The_Kolmogorov_quotient\">https://en.wikipedia.org/wiki/Kolmogorov_space#The_Kolmogorov_quotient</a></p>",
        "id": 439135079,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715913395
    },
    {
        "content": "<p>Is there a useful description for the equivalence relation behind <code>T2Quotient</code> that doesn't use global structure? Something in terms of <code>nhds</code> filters?</p>",
        "id": 439135258,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715913498
    },
    {
        "content": "<p>Indeed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Continuous.disjoint_nhds_of_different_image</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">‚àò</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxx'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"n\">f</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x'</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Tendsto.disjoint</span>  <span class=\"n\">hg.continuousAt</span> <span class=\"o\">(</span><span class=\"n\">disjoint_nhds_nhds.mpr</span> <span class=\"n\">hxx'</span><span class=\"o\">)</span> <span class=\"n\">hg.continuousAt</span>\n</code></pre></div>\n<p>is much shorter, and probably sufficiently short to be inlined in my two use cases. So this issue is solved.</p>",
        "id": 439135370,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715913580
    },
    {
        "content": "<p>I don‚Äôt know any other description of this equivalence relation.</p>",
        "id": 439135412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715913602
    },
    {
        "content": "<p>I googled a bit and only found more complicated descriptions (including taking a transfinite number of quotients instead of one‚Ä¶).</p>",
        "id": 439135503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715913644
    },
    {
        "content": "<p>Is it the transitive closure of \"nhds aren't disjoint\"?</p>",
        "id": 439135537,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715913663
    },
    {
        "content": "<p>Or this is not enough?</p>",
        "id": 439135558,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715913673
    },
    {
        "content": "<p>I think it‚Äôs not enough. But I‚Äôm sure Steven will tell us.</p>",
        "id": 439135583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715913694
    },
    {
        "content": "<p>By the way, Steven, you may also have something to contribute to the original goal which was to improve our construction of the Stone-Cech compactification. Do you know a direct construction that stay within general topology (so does not involve real numbers in particular) but has no size issue? By size issue I mean things like taking quotients by an equivalence relation involving all compact Hausdorff spaces like we currently do <a href=\"https://github.com/leanprover-community/mathlib4/blob/b6cc5394d8cb9203e29724f04d35fbcdf24b785a/Mathlib/Topology/StoneCech.lean#L231-L236\">here</a>. I have an idea to do that, but maybe there is something ‚Äúwell-known‚Äù.</p>",
        "id": 439136086,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715914057
    },
    {
        "content": "<p>I will read answers tomorrow because it is bed time now.</p>",
        "id": 439136161,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715914094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/T2.20quotient/near/439135079\">said</a>:</p>\n<blockquote>\n<p>What do you think about <code>KolmogorovQuotient</code>? <a href=\"https://en.wikipedia.org/wiki/Kolmogorov_space#The_Kolmogorov_quotient\">https://en.wikipedia.org/wiki/Kolmogorov_space#The_Kolmogorov_quotient</a></p>\n</blockquote>\n<p>This is also standard, but if there's both a T0 and T2 quotient, having similar names might be better UX</p>",
        "id": 439263284,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1715966332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/T2.20quotient/near/439136086\">said</a>:</p>\n<blockquote>\n<p>By the way, Steven, you may also have something to contribute to the original goal which was to improve our construction of the Stone-Cech compactification. Do you know a direct construction that stay within general topology (so does not involve real numbers in particular) but has no size issue? By size issue I mean things like taking quotients by an equivalence relation involving all compact Hausdorff spaces like we currently do <a href=\"https://github.com/leanprover-community/mathlib4/blob/b6cc5394d8cb9203e29724f04d35fbcdf24b785a/Mathlib/Topology/StoneCech.lean#L231-L236\">here</a>. I have an idea to do that, but maybe there is something ‚Äúwell-known‚Äù.</p>\n</blockquote>\n<p>I'll look into this and get back</p>",
        "id": 439267790,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1715968303
    },
    {
        "content": "<p>What exactly is the problem with the current set-up? It seems that we still get <code>def StoneCech : Type u :=...</code> if <code>(Œ± : Type u) [TopologicalSpace Œ±]</code>.</p>",
        "id": 439268830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715968675
    },
    {
        "content": "<p>Thanks Steven. Kevin, the issue is with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=stoneCechExtend#doc\">docs#stoneCechExtend</a>. Note how Œ± and Œ≥ live in the same universe.</p>",
        "id": 439284634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715976193
    },
    {
        "content": "<p>So we have a universal property for the Stone-Cech compactification that is not universal across universes. Will I dare writing we need an inter-universal Stone-Cech compactification?</p>",
        "id": 439284910,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715976341
    },
    {
        "content": "<p>I feel like I'm about to say something silly, but doesn't any continuous map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>‚Üí</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f : X \\to Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> are compact Hausdorff factor through some compact Hausdorff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>Y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">‚Ä≤</mo></msup></mrow><annotation encoding=\"application/x-tex\">Y&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚Ä≤</span></span></span></span></span></span></span></span></span></span></span></span> which lives in the same universe as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> ? E.g because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Setoid.quotientKerEquivRange#doc\">docs#Setoid.quotientKerEquivRange</a> would upgrade to an homeomorphism thanks to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.homeoOfEquivCompactToT2#doc\">docs#Continuous.homeoOfEquivCompactToT2</a> ? Where does this fail ?</p>",
        "id": 439293545,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1715981004
    },
    {
        "content": "<p>The theorem only applies if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is compact, and I guess you don't know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>Y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">‚Ä≤</mo></msup></mrow><annotation encoding=\"application/x-tex\">Y&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚Ä≤</span></span></span></span></span></span></span></span></span></span></span></span> is compact?</p>",
        "id": 439293894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715981212
    },
    {
        "content": "<p>Well if you take it as a quotient of a compact space it is compact for sure ?</p>",
        "id": 439294084,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1715981323
    },
    {
        "content": "<p>Oh maybe I've not understood what you're doing. Let me go through it step by step. We have alpha (non-compact, universe u) and are trying to prove that any map from alpha to Y (compact, universe v) extends to a map from alpha-compactified to Y. What is your X?</p>",
        "id": 439294232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715981416
    },
    {
        "content": "<p>X is alpa-compactified</p>",
        "id": 439294312,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1715981467
    },
    {
        "content": "<p>Ah</p>",
        "id": 439294335,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1715981486
    },
    {
        "content": "<p>Ok</p>",
        "id": 439294343,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1715981488
    },
    {
        "content": "<p>But my argument still says that, in the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=stoneCechSetoid#doc\">docs#stoneCechSetoid</a>, one could choose any universe for the target spaces, right ?</p>",
        "id": 439294659,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1715981644
    },
    {
        "content": "<p>I don't properly understand what's going on here. It seems to me that the relation might depend on the target universe. For example if v &lt; u and you define the relationship to be that for all gamma of type v and for all maps from alpha to gamma etc etc, then there simply might not be enough maps to get the correct relation. As a toy example, imagine there's a universe whose type are just the finite types (this isn't quite a universe, but it's not far from one and it's a good toy model). Then you don't get too many interesting maps from alpha to gamma and so r might change?</p>",
        "id": 439294979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715981875
    },
    {
        "content": "<p>We don't want the setoid to depend on an extra universe parameter.</p>",
        "id": 439294980,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715981876
    },
    {
        "content": "<p>In other words without changing any definition: take<code>X</code> as <code>Ultrafilter alpha</code> and <code>f'</code> as <code>Ultrafilter.extend f</code> where <code>f : alpha -&gt; Y</code> is our original map. Now the question is does <code>f'</code> factor through the map <code>Ultrafilter alpha -&gt; alpha-compactified</code>, and my claim is yes because everything is compact T2 so I can assume <code>f'</code> lands in the same universe as <code>Ultrafilter alpha</code> (i.e the universe of <code>alpha</code>).</p>",
        "id": 439295119,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1715981946
    },
    {
        "content": "<p>Can you formalize this?</p>",
        "id": 439295154,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715981976
    },
    {
        "content": "<p>I can do it tomorrow yes. There may well be a stupid mistake somewhere of course (and indeed the fact that it works even when making the universe <em>smaller</em> sounds a bit weird...)</p>",
        "id": 439295280,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1715982041
    },
    {
        "content": "<p>I considered deducing the inter-universal version from the version we have. In principle it should be doable. But it would feel pretty ugly to me. It would feel nicer to have a construction that do not involving universes at all.</p>",
        "id": 439295729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715982318
    },
    {
        "content": "<p>Most (all?) my knowledge on the subject comes from the Wikipedia page. All constructions there either involve the product of all compact T2 spaces or real numbers...</p>",
        "id": 439295929,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715982437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/T2.20quotient/near/439136086\">said</a>:</p>\n<blockquote>\n<p>Do you know a direct construction that stay within general topology (so does not involve real numbers in particular) but has no size issue? </p>\n</blockquote>\n<p>I would be tempted to say that C-star algebra theory is just noncommutative general topology, so the spectrum construction is indeed staying inside topology <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 439296157,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1715982579
    },
    {
        "content": "<p>Is <code>Ultrafilter alpha</code> compact T2? Does it even have a topology?</p>",
        "id": 439296631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715982846
    },
    {
        "content": "<p>Yes it is</p>",
        "id": 439296650,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1715982860
    },
    {
        "content": "<p>I should try to finish my idea. I have some preliminary work at <a href=\"https://github.com/leanprover-community/mathlib4/blob/599d37eb6b393fae6564e634a9ac7d715aa255ca/Mathlib/Topology/StoneCech.lean#L248-L249\">https://github.com/leanprover-community/mathlib4/blob/599d37eb6b393fae6564e634a9ac7d715aa255ca/Mathlib/Topology/StoneCech.lean#L248-L249</a>. At first I thought that would be the right definition. I proved the universal property but then I realized that I didn‚Äôt know how to prove that it is T2. That‚Äôs why my new plan became to build <code>t2Quotient</code>. I‚Äôm not super happy about this since it would be a three steps construction, but I thought that <code>t2Quotient</code> was worth having anyway.</p>",
        "id": 439296673,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715982886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/T2.20quotient/near/439296631\">said</a>:</p>\n<blockquote>\n<p>Is <code>Ultrafilter alpha</code> compact T2? Does it even have a topology?</p>\n</blockquote>\n<p>It‚Äôs the Stone Cech compactification of alpha with the discrete topology.</p>",
        "id": 439296711,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1715982918
    },
    {
        "content": "<p>That being said, maybe that thinking about <code>t2Quotient</code> made be better at proving things are T2 and I‚Äôll be able to finish the proof now.</p>",
        "id": 439297043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715983163
    },
    {
        "content": "<p>No, I had something stupid in mind. I‚Äôm back to my previous strategy.</p>",
        "id": 439297648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715983488
    },
    {
        "content": "<p>I think Anatole's approach works without changing the definition of the compactification? If v is too small then you probably can't make the definition of the compactification using v but it still seems to satisfy the universal property</p>",
        "id": 439300099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715984967
    },
    {
        "content": "<p>I have to admit that in my \"day job\" I mostly think about ultrafilters when X is discrete (and most counterexamples I need are subspaces thereof). When I do deal with other compactifications I like to use maps into $[0,1]$ (or just the universal property). So I'm derusting a bit on the other characterizations, and may have a more clever idea next week when I'm back in the office and can get to my copy of Walker. </p>\n<p>But, another characterization one might consider (if it makes formalization easier) is the product described at <a href=\"https://math.stackexchange.com/a/2958720\">https://math.stackexchange.com/a/2958720</a>: each factor corresponds to each possible continuous map from the space into a compact Hausdorff space. To make this a set and not a class, observe that the cardinality of compact Hausdorff spaces that have a particular space mapped into a dense subset is bounded above (by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><msup><mn>2</mn><mrow><mi mathvariant=\"normal\">‚à£</mi><mi>X</mi><mi mathvariant=\"normal\">‚à£</mi></mrow></msup></msup></mrow><annotation encoding=\"application/x-tex\">2^{2^{|X|}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0397em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0397em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9667em;\"><span style=\"top:-2.9667em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5357em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚à£</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mtight\">‚à£</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> I think?) so we need only index over maps into those spaces.</p>",
        "id": 439301480,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1715985868
    },
    {
        "content": "<p>This kind of cardinality bound is part of what I‚Äôm trying to avoid.</p>",
        "id": 439302085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715986294
    },
    {
        "content": "<p>I finished the 3 steps approach I had in mind and it indeed builds a model with the really universal universal property, as can be seen <a href=\"https://github.com/leanprover-community/mathlib4/blob/4a0e47e708125ca5693c62f551d0f03086c0d0a2/Mathlib/Topology/StoneCech.lean#L409-L459\">here</a>.</p>",
        "id": 439302283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715986419
    },
    {
        "content": "<p>In that version of the file there are three variations: StoneCech is the original one, with its problematic construction (I mean problematic only because we like to be crazy with universe polymorphism). Then StoneCech' is my optimistic version from before I thought about proving it was T2. And StoneCech'' is the T2 quotient of the previous one. It satisfies the universal property with any target space in any universe and its definition does not involve any universe juggling. Of course I could cleanup all this, but I‚Äôll wait a bit to see whether anyone comes up with a smarter way.</p>",
        "id": 439302557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715986584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/T2.20quotient/near/439135583\">said</a>:</p>\n<blockquote>\n<p>I think it‚Äôs not enough. But I‚Äôm sure Steven will tell us.</p>\n</blockquote>\n<p>Unlike the T0 quotient, the \"non-disjoint neighborhoods relation\" corresponding to T2 is not transitive. But it's true that if you take the equivalence relation generated by it (the intersection of all equivalence relations containing it, equivalently, its transitive closure) then that quotient will be T2. Whether that's the same or not as your definition is not clear to me yet.</p>",
        "id": 439305184,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1715988391
    },
    {
        "content": "<p>How do I show that the quotient by the transitive closure of this relation is T2?</p>",
        "id": 439305915,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715988979
    },
    {
        "content": "<p>If you take the \"universal algebra\" point of view that compact Hausdorff spaces are algebras for the ultrafilter monad, then you know exactly what you have to do: If <code>X</code> is any compact Hausdorff space and <code>r</code> is a relation on <code>X</code>, you need to \"close up\" <code>r</code> to get the analogue of a congruence relation for the ultrafilter monad. The \"operations\" interpreted topologically are just the map <code>Ultrafilter X -&gt; X</code> sending <code>F</code> to the (unique) limit of <code>F</code> on <code>X</code>. To \"close it up\" I think it suffices to take the inductive relation generated by <code>r</code> and limits of <code>F</code> and <code>G</code> whenever <code>F</code> and <code>G</code> are ultrafilters which have the same pushforward in <code>X/(closure of r)</code>. Now you can apply this to <code>X = Ultrafilter alpha</code> and <code>r</code> the relation saying that two ultrafilters are identified if they have a common limit on <code>alpha</code> (this is Patrick's <code>StoneCech'</code>). </p>\n<p>Note that since quotients of compact spaces are compact, the quotient of <code>X/r</code> which agrees with the quotient by the \"closed up\" <code>r</code> is the same as the t2 quotient of <code>X/r</code>.</p>",
        "id": 439306360,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715989422
    },
    {
        "content": "<p>Now, in the case of <code>Ultrafilter alpha</code>, the \"limit\" map <code>Ultrafilter (Ultrafilter alpha) -&gt; Ultrafilter alpha</code> is the monadic <code>join</code>. So it's possible to write down the closed up relation directly as an inductive relation without referring to limits.</p>",
        "id": 439306541,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715989581
    },
    {
        "content": "<p>Well, now that I wrote that out, I realized that it won't be possible to write down the inductive relation as above since one has to consider the quotient by the inductive relation in a hypothesis of one of the constructors. But it's possible there's another way to write down the condition without referring to the quotient.</p>",
        "id": 439307242,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715990342
    },
    {
        "content": "<p>Another approach is to take the infimum over all equivalence relations satisfying that condition and implied by <code>r</code>.</p>",
        "id": 439307427,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715990455
    },
    {
        "content": "<p>So, if I got it right, the following setoid should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">stoneCechSetoid</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">Ultrafilter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚®Ö</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">Ultrafilter</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span>\n  <span class=\"bp\">‚®Ö</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Ultrafilter</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"bp\">‚àß</span> <span class=\"n\">G</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S.r</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n  <span class=\"bp\">‚®Ö</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Ultrafilter</span> <span class=\"o\">(</span><span class=\"n\">Ultrafilter</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S.r</span> <span class=\"o\">(</span><span class=\"n\">joinM</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">joinM</span> <span class=\"n\">G</span><span class=\"o\">)),</span>\n    <span class=\"n\">S</span>\n</code></pre></div>\n<p>But this is a mess. So it's probably just easier to use the t2quotient :)</p>",
        "id": 439308116,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715990983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/T2.20quotient/near/439305915\">said</a>:</p>\n<blockquote>\n<p>How do I show that the quotient by the transitive closure of this relation is T2?</p>\n</blockquote>\n<p>I had sketched a proof but it had an oversight. I asked the question at <a href=\"https://math.stackexchange.com/questions/4918434/what-is-a-t-2-quotient\">https://math.stackexchange.com/questions/4918434/what-is-a-t-2-quotient</a> and may self-answer, but it's getting late and if I don't I'd expect someone else will by the morning.</p>",
        "id": 439319317,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1716001601
    },
    {
        "content": "<p>Turns out the answer is \"you can't\" - the process must be repeated inductively.</p>",
        "id": 439322455,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1716004808
    },
    {
        "content": "<p>This thesis seems to be a decent overview: <a href=\"https://math.leidenuniv.nl/scripties/BachVanMunster.pdf\">https://math.leidenuniv.nl/scripties/BachVanMunster.pdf</a></p>",
        "id": 439322647,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1716004948
    },
    {
        "content": "<p>Once you have a quotient of X that works in a universe u, and if your target Y  is a space in universe v, you can take the image Y' of X in Y, which will be u-small (because it is equivalent to a set quotient of X), take an u-representative and work from there.</p>",
        "id": 439325211,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1716007707
    },
    {
        "content": "<p>Antoine, this has been proposed several times already, but it feels cleaner to have a direct definition that does not depend on universes.</p>",
        "id": 439360252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716043529
    },
    {
        "content": "<p>Since we want <code>t2Quotient</code> anyway, I guess I will clean up my approach and PR it.</p>",
        "id": 439360341,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716043610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/116395-maths/topic/T2.20quotient/near/439325211\">said</a>:</p>\n<blockquote>\n<p>Once you have a quotient of X that works in a universe u, and if your target Y  is a space in universe v, you can take the image Y' of X in Y, which will be u-small (because it is equivalent to a set quotient of X), take an u-representative and work from there.</p>\n</blockquote>\n<p>I was about to say \"oh yes, this is obviously nicer, I just wanted compactness in order to use the quotient topology rather than just inducing the topology\", but then decided I wanted to start formalizing first, and it's not as easy as it seems. I just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/13010\">#13010</a> as a draft with this approach (but I agree that Patrick's solution is probably nicer). Here are the subtleties I encountered along the way.</p>\n<ol>\n<li>\n<p>After reading Antoine's message, I was going to ignore the construction details and just deduce the polymorphic universal property from the existing one, but then realized it didn't work, because if you start from a noncompact <code>Œ±</code> then the range of <code>f</code> is not necessarily closed, so in order to factor through a <em>compact</em> space in the lower universe one needs to build something which is in bijection with the <em>closure</em> of the range, not just the range. This would require the cardinality bound mentioned above, which I definitely didn't want to formalize. However, since <code>Ultrafilter Œ±</code> is compact, this doesn't rule out showing that if two ultrafilters are equivalent for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=stoneCechSetoid#doc\">docs#stoneCechSetoid</a>, then they actually satisfy the equality you want independently of the universe of the target. And indeed this works.</p>\n</li>\n<li>\n<p>The relation in <code>stoneCechSetoid</code> does not take into account all maps from <code>Ultrafilter Œ±</code> to compact spaces, only those which are extensions of continuous maps from <code>Œ±</code>, so we need to check that the new map that we obtain instead of <code>Ultrafilter.extend f</code> can still be written in this way. This is indeed true by density of <code>Œ±</code> in <code>Ultrafilter Œ±</code>, and by the fact that the new target space is compact hence its (quotient) topology is the same as the topology induced by the original target space.</p>\n</li>\n</ol>",
        "id": 439362336,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1716045362
    },
    {
        "content": "<p>I think that if we had some general API for algebras and their quotients for (type theoretic) monads then the approach I mentioned could be reasonable. But right now I agree the t2quotient approach would be the cleanest</p>",
        "id": 439364166,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1716047003
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/13061\">#13061</a> with the part that we want in any case: the construction of the largest T2 quotient of a space. I did not change anything that already existed. <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 439611563,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716223448
    },
    {
        "content": "<p>The file length linter complains‚Ä¶</p>",
        "id": 439614186,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716224327
    },
    {
        "content": "<p>You can add an exception</p>",
        "id": 439625192,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716228175
    },
    {
        "content": "<p>I know, but I‚Äôm meant to feel bad doing so.</p>",
        "id": 439625447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716228253
    },
    {
        "content": "<p>The main drawback of this guilt inducing system is that it pushes to split files and add content in the same PR.</p>",
        "id": 439626011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716228475
    },
    {
        "content": "<p>I think you should just add the exception</p>",
        "id": 439626301,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1716228592
    },
    {
        "content": "<p>I hate the file length linter because it doesn't tell you how to ignore it. Just as with <code>shake</code>, there should be a command to run to automatically ignore the suggestion of the file length linter.</p>",
        "id": 439626465,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1716228643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/T2.20quotient/near/439626011\">said</a>:</p>\n<blockquote>\n<p>The main drawback of this guilt inducing system is that it pushes to split files and add content in the same PR.</p>\n</blockquote>\n<p>... and that random contributors are tasked with splitting files rather than people who actually understand the file structure (eg me with algebraic order theory)</p>",
        "id": 439626580,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1716228694
    },
    {
        "content": "<p>We already have a <code>Topology/Separation</code> folder, with a single file. The obvious split here is given by numbering, gathering the T and R versions. So we would have <code>Topology/Separation/T0R0.lean</code>, <code>Topology/Separation/T1R1.lean</code> etc‚Ä¶</p>",
        "id": 439626584,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716228696
    },
    {
        "content": "<p>(although in that specific case I trust the random contributor actually knows the file structure pretty well <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 439626727,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1716228744
    },
    {
        "content": "<p>Actually that file was already an exception‚Ä¶</p>",
        "id": 439627628,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716229125
    },
    {
        "content": "<p>After three attempts, I managed to setup the new exception.</p>",
        "id": 439666396,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716234026
    },
    {
        "content": "<p>I have a WIP that improves regular+2ndCount implies normal to just regular+Lindelof. Part of why it's a WIP is because I hadn't found time to learn the right way to satisfy the file size limit. I'm also interested in contributing perfectly normal and completing the chain to show metrizable implies perfectly normal.</p>\n<p>The separation file seems quite large; it'd be nice to see it factored out.</p>",
        "id": 439720420,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1716259862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"468051\">@Steven Clontz</span>, if you link to the PR someone can walk you through satisfying the file size limit.</p>",
        "id": 439721266,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716260295
    },
    {
        "content": "<p>Note that <code>R1</code> corresponds to <code>T2</code></p>",
        "id": 439721294,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1716260307
    },
    {
        "content": "<p>I think that we also should move all defs to a single file.</p>",
        "id": 439721326,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1716260330
    },
    {
        "content": "<p>Thx <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> - ran a workshop a week ago, in another this week... Once this has come and gone I'll clean up the WIP and request such help (barring a refactor that makes file size moot).</p>",
        "id": 439721548,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1716260418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/T2.20quotient/near/439721326\">said</a>:</p>\n<blockquote>\n<p>I think that we also should move all defs to a single file.</p>\n</blockquote>\n<p>What would be the gain here? Having definitions but no lemmas seems not very useful. We sometimes do that with definitions that can be used for programming without proving, but this does not apply here.</p>",
        "id": 439813902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716297127
    },
    {
        "content": "<p>I disagree here. I would like the <code>.Defs</code> / <code>.Basic</code> split that we have in the algebra hierarchy to continue <em>much</em> further into Mathlib. My experience has been that it really helps with reducing unnecessary imports. Definitions don't have to be used for programming: often they are just used for more definitions.</p>",
        "id": 439917315,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716330018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/116395-maths/topic/T2.20quotient/near/439625192\">said</a>:</p>\n<blockquote>\n<p>You can add an exception</p>\n</blockquote>\n<p>I'm working on another PR for <code>Separation.lean</code> at <a href=\"https://github.com/leanprover-community/mathlib4/pull/13176\">#13176</a> and would like to know how this is done as I've also hit the upper limit.</p>\n<p>(I think the file was obscenely long before I made it worse, but figure that refactor shou;dn't be mixed up in my work.)</p>",
        "id": 441824666,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1717197345
    },
    {
        "content": "<p>(maybe it's moot - when I merged master, the linter stopped complaining)</p>",
        "id": 441825202,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1717197592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/T2.20quotient/near/439626465\">said</a>:</p>\n<blockquote>\n<p>I hate the file length linter because it doesn't tell you how to ignore it. Just as with <code>shake</code>, there should be a command to run to automatically ignore the suggestion of the file length linter.</p>\n</blockquote>\n<p>This command is called <code>./scripts/update-style-exceptions.py</code>. Granted, it only becomes the most useful when coupled with that file being updated weekly (so it's generally up-to-date).</p>\n<p>That said, if you find this too annoying: I'm happy to write a separate executable just for the file length in Lean. Ping me again in three weeks :-)</p>",
        "id": 442104891,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717362349
    },
    {
        "content": "<p>Whatever you do, please include it in the error message! We don't want anyone splitting a file because they have no idea that there is an alternative.</p>",
        "id": 442109408,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1717364969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Your wish was granted, the <code>rewriteMichael</code> tactic got bored enough to implement this sooner. <a href=\"https://github.com/leanprover-community/mathlib4/pull/13623\">#13623</a> implements nicer output on \"file too long\" errors, including a new Lean command to fix the error, and a suggestion how to add it (in a fine-grained way). Testing (to see I didn't miss anything) and reviewing welcome - this depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/13620\">#13620</a> for rewriting the check in Lean.</p>",
        "id": 443447281,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717839987
    },
    {
        "content": "<p>I am sorry I neglected this discussion for a long time, but I just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/14108\">#14108</a> with the two-step construction of the inter-universal Stone-ƒåech compactification.</p>",
        "id": 446756639,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1719280653
    }
]