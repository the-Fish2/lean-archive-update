[
    {
        "content": "<p>Is there a way to infer  <code>Module ‚Ñù M</code> from <code>IsROrC R</code> and <code>Module R M</code>? </p>\n<p>This might be XY problem, what I really want is to write an integral of a function to a normed space over <code>R</code>. Maybe I should write everywhere both <code>[NormedSpace R Y]</code> and  <code>[NormedSpace ‚Ñù Y]</code>? I don't like that but it is a solution.</p>\n<p>mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">variable</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasureSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">R</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">failed to synthesize instance</span>\n<span class=\"cm\">  NormedSpace ‚Ñù Y</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">‚à´</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">‚à´</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 420463928,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707400899
    },
    {
        "content": "<p>The standard solution is indeed to add a <code>[NormedSpace ‚Ñù Y]</code> in the context. In applications, though, you can derive explicitly the real normed space structure from the <code>R</code>-normed space structure, but it's not something that can be done by typeclass inference because it couldn't guess the <code>R</code>. Note that, in concrete applications, you won't have anything to do because a complex normed space structure automatically yields a real one.</p>",
        "id": 420467885,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1707402020
    },
    {
        "content": "<p>You <em>could</em> write that instance, but you don't want to, as it will lead to diamonds. What you probably want instead is <code>[NormedSpace ‚Ñù Y]</code> along with an <code>[IsScalarTower ‚Ñù R Y]</code> instance.</p>",
        "id": 420468206,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707402123
    },
    {
        "content": "<p>(Side note: in Mathlib we generally use <code>ùïú</code> or <code>K</code> for the argument to <code>IsROrC</code>, but of course you can do what you want.)</p>",
        "id": 420468466,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707402195
    },
    {
        "content": "<p>Ok makes sense.</p>\n<p>The thing is I'm doing something heretical. I'm writing programs and at the end of the day when I want to run the program I choose <code>R=Float</code> + inconsistend axiom <code>IsROrC Float</code>. So in addition I should add an instance <code>Module Float X ‚Üí Module ‚Ñù X</code>.</p>",
        "id": 420469351,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707402445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/infer.20.60Module.20.E2.84.9D.20M.60.20from.20.60Module.20R.20M.60/near/420468466\">said</a>:</p>\n<blockquote>\n<p>(Side note: in Mathlib we generally use <code>ùïú</code> or <code>K</code> for the argument to <code>IsROrC</code>, but of course you can do what you want.)</p>\n</blockquote>\n<p>Yeah I know but it breaks emacs :( it does not like unicode characters like <code>ùïú</code> and it breaks parsing/lsp. I would be interested if someone knows how to fix that.</p>",
        "id": 420469592,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707402531
    },
    {
        "content": "<p>Well, <code>K</code> still works. That's what is used throughout the <code>Data.IsROrC.Basic</code> (or whatever the first file is). But I have no idea about the emacs problem. I've historically used emacs for everything, but now I only use VS Code for Lean.</p>",
        "id": 420469941,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707402622
    },
    {
        "content": "<p>I should invest some time to set up VS Code properly but overcoming muscle memory is hard :/</p>",
        "id": 420470659,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707402829
    },
    {
        "content": "<p>The lsp-mode encoding issue is being worked around at <a href=\"https://github.com/leanprover/lean4/pull/2646\">lean4#2646</a>, but I think that is on hold for the moment</p>",
        "id": 420472092,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1707403260
    },
    {
        "content": "<p>There's also an eglot version of lean4-mode, which doesn't support semantic highlighting but doesn't suffer from encoding issues</p>",
        "id": 420472221,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1707403309
    }
]