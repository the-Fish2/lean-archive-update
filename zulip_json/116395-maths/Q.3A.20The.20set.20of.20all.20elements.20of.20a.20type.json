[
    {
        "content": "<p>For any type <code>α</code>, I can talk about sets of the type  — ie. <code>Set α</code>.</p>\n<p>Say I have <code>t : Set α</code> such that  <code>∀(a:α), a ∈ t</code>,<br>\nDoes <code>t</code> have a name in type/set theory?</p>",
        "id": 417327822,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1705962784
    },
    {
        "content": "<p>Perhaps \"the universal set (of α)\"? For example: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Init/Set.html#Set.univ\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Init/Set.html#Set.univ</a></p>",
        "id": 417328242,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1705963036
    },
    {
        "content": "<p>Isn't that a type rather then a set?</p>",
        "id": 417328769,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1705963313
    },
    {
        "content": "<p><code>t : {_a : α | True}</code> is a proof that the type in inhabited, not the set of all elements of <code>α</code>?</p>",
        "id": 417328880,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1705963358
    },
    {
        "content": "<p><code>t : Set {_a : α | True}</code> is almost just <code>t : Set α</code>... I think</p>",
        "id": 417329196,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1705963507
    },
    {
        "content": "<p><code>Set.univ</code> is a term of type <code>Set \\alpha</code>, not a type.</p>",
        "id": 417330052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705963830
    },
    {
        "content": "<p>Are you perhaps thinking of subtype notation?  <code>{x : α // p x}</code> gives you a type (intuitively - really it's dependent pairs) inhabited by the things of type  α that satisfy p.</p>",
        "id": 417330274,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1705963907
    },
    {
        "content": "<p><code>t : {_a : α | True}</code> doesn't make sense because <code>{_a : α | True}</code> is a term, not a type. Similarly <code>t : Set {_a : α | True}</code> doesn't make sense because <code>Set</code> wants to eat a type and you've given it a term. If these things are compiling in Lean then it's because Lean is inserting coercions, which are going to be muddying the water if you're trying to figure out what's going on under the hood.</p>",
        "id": 417330423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705963946
    },
    {
        "content": "<p>Yeah, I was thinking of Subtype notation. You're right.</p>",
        "id": 417332093,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1705964561
    },
    {
        "content": "<p>Follow up question, is there any machinery to automate the proof that a user defined inductive type is a <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fintype/Basic.html#Main-declarations\">Fintype</a>?</p>\n<p>That might be a hard problem. You'd need it to be a non-recursive inductive where every constructor uses only Fintypes as well.</p>",
        "id": 417336003,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1705966454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"664276\">@Treq</span>, but in that easy case, just write <code>deriving Fintype</code> after the structure.</p>",
        "id": 417337035,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705966974
    },
    {
        "content": "<p>If you ever need to add additional assumptions, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/DeriveFintype.html\">the module that defines <code>deriving Fintype</code></a> also provides <code>derive_fintype% T</code>, which you can use inside an <code>instance</code> with the additional instance arguments, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"bp\">...</span><span class=\"n\">arguments...</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 417351326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705973288
    }
]