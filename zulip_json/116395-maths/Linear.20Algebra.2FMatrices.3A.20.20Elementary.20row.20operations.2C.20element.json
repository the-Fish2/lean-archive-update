[
    {
        "content": "<p>Hi!</p>\n<p>I checked the list of undergraduate mathematics missing in mathlib and these seems to not be in mathlib yet. I would like to start contributing to mathlib and was wondering how to start? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  (I'm not really sure where to ask)</p>\n<p>Would implementing gaussian elimination or defining elementary matrices and proving that they are invertible be a good start? (I checked to the best of my ability to see if they are in mathlib and they aren't there ...I think)</p>",
        "id": 444896830,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1718477743
    },
    {
        "content": "<p>There are some things in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/Transvection.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/Transvection.html</a></p>",
        "id": 444909862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718485149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Linear.20Algebra.2FMatrices.3A.20.20Elementary.20row.20operations.2C.20element/near/444909862\">said</a>:</p>\n<blockquote>\n<p>There are some things in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/Transvection.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/Transvection.html</a></p>\n</blockquote>\n<p>For instance is defining a property like IsRowEchelonForm, IsDiagonal, IsTriangularizable, and so forth of interest? These aren't defined per se... but I imagine there mioght be a reason for this(?)</p>\n<p>I've seen that there are theorems similar to gaussian elimination, but state it as the existence of elementary matrices that multiply to such and such, instead of as an algorithm. I imagine this distinction does not matter to mathlib?</p>\n<p>Otherwise, I was looking at the Permutation matrices folder and I think it would be fun to formalise the following result on the characteristic polynomial of the permutation matrices</p>\n<p>write the permutation <code>g</code> as a product of disjoint cycles <code>c_r</code></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>g</mi><mo>=</mo><msub><mi>c</mi><mn>1</mn></msub><msub><mi>c</mi><mn>2</mn></msub><mo>…</mo><msub><mi>c</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">g = c_1 c_2 \\ldots c_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>where </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>c</mi><mi>r</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>e</mi><msub><mn>1</mn><mi>r</mi></msub></msub><msub><mi>e</mi><msub><mn>2</mn><mi>r</mi></msub></msub><mo>…</mo><msub><mi>e</mi><msub><mi>m</mi><mi>r</mi></msub></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c_r = (e_{1_r} e_{2_r} \\ldots e_{m_r})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0001em;vertical-align:-0.2501em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>then </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>p</mi><mrow><mi>ρ</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∏</mo><mi>r</mi><mi>k</mi></munderover><mo stretchy=\"false\">(</mo><msup><mi>x</mi><msub><mi>m</mi><mi>r</mi></msub></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p_{\\rho(g)}(x) = \\prod_{r}^{k} (x^{m_r} - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ρ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0861em;vertical-align:-1.25em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8361em;\"><span style=\"top:-1.9em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.25em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span></p>",
        "id": 445177373,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1718642535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634542\">Alex Brodbelt</span> <a href=\"#narrow/stream/116395-maths/topic/Linear.20Algebra.2FMatrices.3A.20.20Elementary.20row.20operations.2C.20element/near/445177373\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Linear.20Algebra.2FMatrices.3A.20.20Elementary.20row.20operations.2C.20element/near/444909862\">said</a>:</p>\n<blockquote>\n<p>There are some things in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/Transvection.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/Transvection.html</a></p>\n</blockquote>\n<p>For instance is defining a property like IsRowEchelonForm, IsDiagonal, IsTriangularizable, and so forth of interest? These aren't defined per se... but I imagine there might be a reason for this(?)</p>\n</blockquote>\n<p>I think the reason is that Mathlib is very much biased towards abstract stuff. So matrices are far behind linear maps. But I think those definitions would be welcome.</p>",
        "id": 445215881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718655007
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.diagonal#doc\">docs#Matrix.diagonal</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.scalar#doc\">docs#Matrix.scalar</a> exist.</p>",
        "id": 445215981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718655041
    },
    {
        "content": "<p>Of course that's not exactly the same as an <code>IsDiagonal</code> or <code>IsScalar</code> predicate.</p>",
        "id": 445216154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718655122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634542\">Alex Brodbelt</span> <a href=\"#narrow/stream/116395-maths/topic/Linear.20Algebra.2FMatrices.3A.20.20Elementary.20row.20operations.2C.20element/near/445177373\">said</a>:</p>\n<blockquote>\n<p>I've seen that there are theorems similar to gaussian elimination, but state it as the existence of elementary matrices that multiply to such and such, instead of as an algorithm. I imagine this distinction does not matter to mathlib?</p>\n</blockquote>\n<p>This is a subtle question. It depends what you call an algorithm. You could implement a function computing Gaussian elimination assuming the coefficients are in a computable field, and then prove this function does its job. I think it would already be nice. But it would sit in some slightly uncomfortable intermediate land between having an abstract result like the one we already have and an <em>efficient</em> verified implementation. The later would be a lot more work and very dependent on what you want to do with this efficient implementation.</p>",
        "id": 445216408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718655230
    },
    {
        "content": "<p>We also already have an <em>unverified</em> implementation that is maybe efficient, inside <code>linarith</code></p>",
        "id": 445481883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718755282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Linear.20Algebra.2FMatrices.3A.20.20Elementary.20row.20operations.2C.20element/near/445481883\">said</a>:</p>\n<blockquote>\n<p>We also already have an <em>unverified</em> implementation that is maybe efficient, inside <code>linarith</code></p>\n</blockquote>\n<p>interesting! I figure this is not quite a good first challenge to start with though <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span>  - I'd be curious to try though</p>",
        "id": 447735051,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1719572675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Linear.20Algebra.2FMatrices.3A.20.20Elementary.20row.20operations.2C.20element/near/445215881\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"634542\">Alex Brodbelt</span> <a href=\"#narrow/stream/116395-maths/topic/Linear.20Algebra.2FMatrices.3A.20.20Elementary.20row.20operations.2C.20element/near/445177373\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Linear.20Algebra.2FMatrices.3A.20.20Elementary.20row.20operations.2C.20element/near/444909862\">said</a>:</p>\n<blockquote>\n<p>There are some things in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/Transvection.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/Transvection.html</a></p>\n</blockquote>\n<p>For instance is defining a property like IsRowEchelonForm, IsDiagonal, IsTriangularizable, and so forth of interest? These aren't defined per se... but I imagine there might be a reason for this(?)</p>\n</blockquote>\n<p>I think the reason is that Mathlib is very much biased towards abstract stuff. So matrices are far behind linear maps. But I think those definitions would be welcome.</p>\n</blockquote>\n<p>I'm happy to see this comment, because I had been wondering about this. I have a good amount of matrix stuff in my repo regarding row space, column space, rank, and linear independence for indexed sets of vectors such as the rows/columns of a matrix. See <a href=\"https://github.com/apnelson1/Matroid/blob/main/Matroid/ForMathlib/LinearAlgebra/Matrix/Rowspace.lean\">this file</a>, for instance. It gets as far as proving that the rank of a transposed matrix is equal to the rank, and unlike the mathlib version works over arbitrary fields and infinite row/column sets. </p>\n<p>But I've been hesitant to start PRing that kind of stuff because it is all too 'plebeian' -  my perception is that it goes against the grain of the way mathlib does things. </p>\n<p>I think there are many parts of mathematics that need to view matrices as concrete objects rather than special cases of linear operators (eg coding theory, optimization, matroids, algebraic graph theory), and if you are in those areas, what is available in mathlib is awkward. Specifically, if the indexing sets for rows and columns of a matrix are semantically relevant, modding out by change of co-ordinates needs to be handled with care. </p>\n<p>Would anyone that is au fait with mathlib linear algebra be able to take a quick look at that linked file and tell me if making PRs from that sort of stuff is worth the effort?</p>",
        "id": 447854078,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1719602617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Linear.20Algebra.2FMatrices.3A.20.20Elementary.20row.20operations.2C.20element/near/445215881\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"634542\">Alex Brodbelt</span> <a href=\"#narrow/stream/116395-maths/topic/Linear.20Algebra.2FMatrices.3A.20.20Elementary.20row.20operations.2C.20element/near/445177373\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Linear.20Algebra.2FMatrices.3A.20.20Elementary.20row.20operations.2C.20element/near/444909862\">said</a>:</p>\n<blockquote>\n<p>There are some things in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/Transvection.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/Transvection.html</a></p>\n</blockquote>\n<p>For instance is defining a property like IsRowEchelonForm, IsDiagonal, IsTriangularizable, and so forth of interest? These aren't defined per se... but I imagine there might be a reason for this(?)</p>\n</blockquote>\n<p>I think the reason is that Mathlib is very much biased towards abstract stuff. So matrices are far behind linear maps. But I think those definitions would be welcome.</p>\n</blockquote>\n<p>It's quite silly predicate... but this is not in mathlib, so could be nice to have? Makescertain theorem lemmas and theorems more readable</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">IsDiagonal</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">diagonal</span><span class=\"w\"> </span><span class=\"n\">d</span>\n</code></pre></div>",
        "id": 447969994,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1719662245
    },
    {
        "content": "<p>Probably <code>i \\ne j -&gt; M i j = 0</code> is easier to work with? Not sure, maybe it doesn't matter much (one will be the definition, another a theorem).</p>",
        "id": 447986732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719673915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Linear.20Algebra.2FMatrices.3A.20.20Elementary.20row.20operations.2C.20element/near/447986732\">said</a>:</p>\n<blockquote>\n<p>Probably <code>i \\ne j -&gt; M i j = 0</code> is easier to work with? Not sure, maybe it doesn't matter much (one will be the definition, another a theorem).</p>\n</blockquote>\n<p>I'm not sure how to golf the reverse implication... but here is my attempt</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">IsDiagonal_iff</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsDiagonal</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">⟨</span>\n<span class=\"w\">    </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MeqD</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">inej</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MeqD</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">diagonal_apply_ne</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">inej</span><span class=\"o\">],</span>\n<span class=\"w\">    </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">by_cases</span><span class=\"w\"> </span><span class=\"n\">hij</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">hij</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">diagonal_apply_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">diagonal_apply_ne</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">hij</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">hij</span><span class=\"bp\">⟩</span>\n<span class=\"w\">  </span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 448107219,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1719747476
    },
    {
        "content": "<p>Certainly mathlib should have <code>M ∈ Set.range diagonal ↔ ∀ i j : n, i ≠ j → M i j = 0 :=</code></p>",
        "id": 448107645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719747738
    },
    {
        "content": "<p>I'm not sure we need an <code>IsDiagonal</code> predicate, because there is a whole family of <code>IsFoo</code> definitions which we can skip by using <code>∈ Set.range foo</code></p>",
        "id": 448107700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719747783
    },
    {
        "content": "<p>(for instance we have no <code>IsNat</code> or <code>IsRat</code> etc, and use <code>Set.range Nat.cast</code> and <code>Set.range Rat.cast</code> instead)</p>",
        "id": 448107719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719747811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Linear.20Algebra.2FMatrices.3A.20.20Elementary.20row.20operations.2C.20element/near/448107700\">said</a>:</p>\n<blockquote>\n<p>I'm not sure we need an <code>IsDiagonal</code> predicate, because there is a whole family of <code>IsFoo</code> definitions which we can skip by using <code>∈ Set.range foo</code></p>\n</blockquote>\n<p>Ah I see... fun to do nonetheless, how is decision of when to make a predicate made?</p>",
        "id": 448107931,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1719747994
    },
    {
        "content": "<p>Every definition comes with a cost. It wraps up code into a new declaration which won't be unfolded by default, and so either all your proofs have <code>unfold my_declaration</code> in ( or you do it the correct way and write lots of API lemmas making your definition useful. So you have to have a correspondingly good argument for the existence of your definition in order to justify this work.</p>",
        "id": 448112188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719751521
    },
    {
        "content": "<p>i'm curious, how does making a macro/abbreviation fit into this?</p>",
        "id": 448112739,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719751976
    },
    {
        "content": "<p>Those are \"problematic\" for a different reason; lean can see through them (one model for what <code>abbreviation foo := bar</code> means is \"humans are weak and don't understand bar, so whenever it shows up in the infoview print it as foo, and let them talk about foo, but really it's not actually there, it's just bar\"), but I've heard an argument saying that they decrease readability: experts who know exactly what bar means understand it immediately, and might not know what foo is.</p>",
        "id": 448116812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719755344
    },
    {
        "content": "<p>For what is worth, I introduced the <code>abbrev</code>s <code>PosMulMono</code> and friends, thinking that they were an improvement and managed to convince Floris, even though his reaction was \"I'd rather not\".  Now, I regret them being there!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 448117407,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719755835
    },
    {
        "content": "<p>They were helpful for me recently because I wanted to do a calculation in WithBot (Multiplicative Int) but half the lemmas didn't fire, but because of that packaging it was easy to work out exactly what I needed to do to make them fire. See <a href=\"https://github.com/leanprover-community/mathlib4/pull/13090\">#13090</a> . It was only after that PR that I actually discovered that they were <code>abbrev</code>s!</p>",
        "id": 448122619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719758438
    },
    {
        "content": "<p>Ok, I'm glad that they are helpful then!</p>",
        "id": 448124843,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719759683
    }
]