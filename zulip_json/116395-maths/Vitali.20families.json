[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span>,</p>\n<p>I'm comparing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=VitaliFamily#doc\">docs#VitaliFamily</a> to the definition of a Vitali relation in <a href=\"https://link.springer.com/book/10.1007/978-3-642-62010-2\">Geometric Measure Theory</a>. I see a few differences:</p>\n<ul>\n<li>Federer requires <code>∀ x, ∀ s ∈ setsAt x, x ∈ s</code>;</li>\n<li>I can't find the \"nonempty interior\" assumption in Federer's definition;</li>\n<li>I can't find the \"measurable set\" assumption in Federer's definition though he might assume it without saying</li>\n</ul>",
        "id": 412733144,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705171938
    },
    {
        "content": "<p>What were the reasons for the changes? I'm mostly interested in the first one: are there any examples when we can't assume <code>∀ x, ∀ s ∈ setsAt x, s ∈ nhds x</code> instead of <code>nonempty_interior</code>?</p>",
        "id": 412733221,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705172032
    },
    {
        "content": "<p>Or even <code>∀ x, HasBasis (nhds x) (⋅ ∈ setsAt x) id</code> instead of <code>nontrivial</code> and <code>nonempty_interior</code></p>",
        "id": 412733414,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705172179
    },
    {
        "content": "<p>Are there any Vitali families we should care about besides those coming from Vitali and Besicovitch covering theorems?</p>",
        "id": 412733488,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705172252
    },
    {
        "content": "<p>Also, is there a name for \"Vitali family + ∀ ε &gt; 0, any set of measure zero admits covering by elements of total measure &lt;ε\"?</p>",
        "id": 412733561,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705172312
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>: I want to generalize some theorems you prove in `Function/Jacobian' to the following settings:</p>\n<ul>\n<li><code>μ</code> is a measure, <code>ν</code> is an outer measure (for me, the most interesting case is <code>OuterMeasure.comap _ _</code>);</li>\n<li>we have a Vitali family <code>v</code> with the additional axiom above; note that both Vitali and Besicovitch theorems can give this for an outer regular measure;</li>\n<li>we have an upper estimate on <code>liminf (fun s ↦ ν (s ∩ t) / μ (s ∩ t)) f.filterAt</code> at all points of a set <code>t</code>.</li>\n</ul>\n<p>Instead of the second assumption, we can require that <code>ν</code> is absolutely continuous w.r.t. <code>μ</code> and prove it provided that we have the second assumption.</p>",
        "id": 412733848,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705172575
    },
    {
        "content": "<p>Why do I want this:</p>\n<ul>\n<li>this way the <code>Jacobian</code> file will apply more general theorems;</li>\n<li>I want to generalize <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.addHaar_image_eq_zero_of_det_fderivWithin_eq_zero#doc\">docs#MeasureTheory.addHaar_image_eq_zero_of_det_fderivWithin_eq_zero</a> to <code>f : E → F</code> and the <code>findim ℝ E</code>-dimensional Hausdorff measure in the codomain (which may be infinitely dimensional)</li>\n</ul>",
        "id": 412734100,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705172797
    },
    {
        "content": "<p>BTW, am I right that this version of Sard's theorem was first proved by Moreira in 2001 (Hausdorff measures and the Morse-Sard theorem)?</p>",
        "id": 412734150,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705172857
    },
    {
        "content": "<p>It's Theorem 3.3 in that paper.</p>",
        "id": 412734206,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705172889
    },
    {
        "content": "<p>Or this was known before?</p>",
        "id": 412734244,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705172936
    },
    {
        "content": "<p>One more question: if we require <code>∀ s in setsAt x, x ∈ s</code>, should we switch <code>covering</code> to output <code>g : α → Set α</code> and <code>t : Set α</code> instead of a set in <code>α × Set α</code>?</p>",
        "id": 412734570,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705173272
    },
    {
        "content": "<p>About the condition <code>∀ x, ∀ s ∈ setsAt x, x ∈ s</code>, we had it in a first version, and then we removed it because it was too restrictive: it is not satisfied by some families coming from the Vitali covering theorem, with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">setsAt</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">IsClosed</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"n\">closedBall</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">closedBall</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>In particular, balls of the form <code>B (y, r)</code> with <code>d (x, y) \\le 10 r</code> belong to this Vitali family, while they don't contain <code>x</code>. And this is important for applications we already have in mathlib.</p>",
        "id": 412734609,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1705173325
    },
    {
        "content": "<p>Thank you! Probably, this difference should be documented somewhere.</p>",
        "id": 412734666,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705173397
    },
    {
        "content": "<p>For the two other conditions (nonempty interior, measurable sets), I don't remember exactly but I think they were needed for some proofs. Nonempty interior ensures that a disjoint subfamily is countable (as the topology is second-countable), which is needed for many measure estimates. Measurable set is used all over the place.</p>",
        "id": 412734774,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1705173505
    },
    {
        "content": "<p>About measurable set: I guess, Federer assumes this without mentioning.</p>",
        "id": 412734825,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705173576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Vitali.20families/near/412733561\">said</a>:</p>\n<blockquote>\n<p>Also, is there a name for \"Vitali family + ∀ ∃ &gt; 0, any set of measure zero admits covering by elements of total measure &lt;ε\"?</p>\n</blockquote>\n<p>Not that I know of. Feel free to invent one! All interesting Vitali families I know will satisfy this condition, so maybe we could even add it to the definition (or try to derive it from an easier to check property?)</p>",
        "id": 412734905,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1705173662
    },
    {
        "content": "<p>If we add this to the definition, then we'll lose a nice property \"a subfamily of a Vitaly family with <code>nontrivial</code> property is a Vitaly family\"</p>",
        "id": 412735251,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705174012
    },
    {
        "content": "<p>Let me call this <code>StrongVitaliFamily</code></p>",
        "id": 412735280,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705174038
    },
    {
        "content": "<p>What about this version of Sard's theorem? Did you see it somewhere else?</p>",
        "id": 412736316,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705175220
    },
    {
        "content": "<p>One more question: what do you think about giving definition of <code>VitaliFamily</code> in terms of filters? Something like (not tested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">VitaliFamily</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">filterAt</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Filter</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"n\">neBot</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">NeBot</span> <span class=\"o\">(</span><span class=\"n\">filterAt</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">eventually_measurableSet</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">filterAt</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span>\n  <span class=\"n\">le_smallSets</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">filterAt</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smallSets</span>\n  <span class=\"n\">covering</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃ᶠ</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">filterAt</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">t.Countable</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">t.PairwiseDisjoint</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"bp\">⋃</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>In fact, I made 1 more modification here: instead of asking for a nonempty interior, I ask for <code>t.Countable</code> in the last axiom. AFAICS, we have this in both cases (Vitali and Besicovitch) and this is closer to the source material. Also, this way we can remove <code>[SecondCountableTopology α]</code> assumptions from some lemmas.</p>",
        "id": 416842315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705688978
    },
    {
        "content": "<p>I don't know if there is any <code>VitaliFamily</code> in the sense of this definition that does not require a <code>(Pseudo)MetricSpace</code> structure.</p>",
        "id": 416842569,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705689052
    },
    {
        "content": "<p>I've just realized that <code>VitaliFamily</code> only needs <code>[TopologicalSpace X] [MeasurableSpace X] (f : Filter X)</code>, where <code>f = ae μ</code> and <code>MeasurableSpace</code> is needed for <code>measurableSet : ∀ x : X, ∀ s ∈ setsAt x, MeasurableSet s</code> only.</p>",
        "id": 442099251,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1717359450
    }
]