[
    {
        "content": "<p>In order to formalise the Kelley-Meka bound on Roth numbers, I have developed discrete Fourier analysis in <a href=\"https://github.com/YaelDillies/LeanAPAP\">LeanAPAP</a>. The project has come far enough along and enough prerequisites have been upstreamed to mathlib that it is time to think about how discrete analysis should look like in mathlib.</p>",
        "id": 425779236,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710082180
    },
    {
        "content": "<p>Here is what LeanAPAP currently contains (see <a href=\"https://github.com/YaelDillies/LeanAPAP/tree/master/LeanAPAP/Prereqs\">this folder</a>, I will update the list as PRs get opened and merged):</p>\n<ul>\n<li><code>NNRat.cast</code>, the canonical embedding from <code>ℚ≥0</code> to any semifield (<a href=\"https://github.com/leanprover-community/mathlib4/pull/11203\">#11203</a>)</li>\n<li><code>Finset.dens</code>, the density of a finset inside its ambient type (<a href=\"https://github.com/leanprover-community/mathlib4/pull/11243\">#11243</a>)</li>\n<li><a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=Finset.expect#doc\">LeanAPAP#Finset.expect</a>, the compact normalisation variant of <code>Finset.sum</code></li>\n<li>Precomposition operators, like translation, dilation, conjugation-negation (<a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=translate#doc\">LeanAPAP#translate</a>, <a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=dilate#doc\">LeanAPAP#dilate</a>, <a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=conjneg#doc\">LeanAPAP#conjneg</a>)</li>\n<li>Orthogonality of characters of finite abelian groups (<a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=AddChar.complexBasis#doc\">LeanAPAP#AddChar.complexBasis</a> and theorems around it)</li>\n<li>Pontryagin duality for finite abelian groups (<a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=AddChar.doubleDualEquiv#doc\">LeanAPAP#AddChar.doubleDualEquiv</a>)</li>\n<li>Discrete and compact Lp-norms (<a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=lpNorm#doc\">LeanAPAP#lpNorm</a>, <a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=nlpNorm#doc\">LeanAPAP#nlpNorm</a>)</li>\n<li>Discrete and compact convolution (<a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=conv#doc\">LeanAPAP#conv</a>, <a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=dconv#doc\">LeanAPAP#dconv</a>)</li>\n<li>Discrete and compact Fourier transform (<a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=dft#doc\">LeanAPAP#dft</a>, <a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=cft#doc\">LeanAPAP#cft</a>)</li>\n<li>The Marcinkiewicz-Zygmund inequality (<a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=complex_marcinkiewicz_zygmund#doc\">LeanAPAP#complex_marcinkiewicz_zygmund</a>)</li>\n<li>Rudin's inequality (<a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=rudin_ineq#doc\">LeanAPAP#rudin_ineq</a>)</li>\n<li>Chang's lemma (<a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=chang#doc\">LeanAPAP#chang</a>)</li>\n<li>Almost periodicity (<a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=AlmostPeriodicity.linfty_almost_periodicity#doc\">LeanAPAP#AlmostPeriodicity.linfty_almost_periodicity</a>)</li>\n<li>Bohr sets (<a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=BohrSet#doc\">LeanAPAP#BohrSet</a>)</li>\n</ul>",
        "id": 425779245,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710082192
    },
    {
        "content": "<p>Here are some design decisions I made:</p>\n<ul>\n<li>I set everything up without measure theory. This means that all I'm dealing with are finite sums.</li>\n<li>I defined everything twice, once using the discrete normalisation, once using the compact normalisation. Nowadays, additive combinatorics mostly uses the convention that physical space is compact and frequency space is discrete, but not everyone agrees.</li>\n<li>I use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddChar#doc\">docs#AddChar</a> instead of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PontryaginDual#doc\">docs#PontryaginDual</a> to avoid assuming that my spaces have a topology.</li>\n</ul>",
        "id": 425779298,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710082208
    },
    {
        "content": "<p>Some things are great the way I set them up:</p>\n<ul>\n<li>Lemmas have no measurability or continuity side conditions.</li>\n<li>Imports are pretty light as the heaviest thing I need is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.log#doc\">docs#Real.log</a>. In particular, no measure theory is required.</li>\n</ul>",
        "id": 425779310,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710082225
    },
    {
        "content": "<p>Some are less great:</p>\n<ul>\n<li>I had to duplicate everything in the discrete normalisation to also have them in the compact normalisation.</li>\n<li>My definitions don't handle discrete-but-infinite or compact-but-infinite spaces.</li>\n</ul>",
        "id": 425779320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710082238
    },
    {
        "content": "<p>Here are some questions that need answering:</p>\n<ul>\n<li>Are we happy with the discrete vs continuous duplication?</li>\n<li>Do we want the Lp-norms to be defined over more general spaces using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum#doc\">docs#tsum</a> and integration? </li>\n<li>Should we use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddChar#doc\">docs#AddChar</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PontryaginDual#doc\">docs#PontryaginDual</a> ?</li>\n</ul>",
        "id": 425779326,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710082245
    },
    {
        "content": "<p>Some people that will want to have a say are <span class=\"user-mention\" data-user-id=\"458865\">@Thomas Bloom</span>, <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span>, <span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span>, <span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>.</p>",
        "id": 425779332,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710082252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, special mention to you for the precomposition operators (I can already hear you say \"They are just the action of <code>DomMulAct Gᵐᵒᵖ</code> on <code>G</code>\")</p>",
        "id": 425779436,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710082331
    },
    {
        "content": "<p>I'd certainly argue strongly that rather than having special definitions for things like Lp-norms, convolution, etc in the discrete case, we should unify these with the existing material in the Mathlib analysis / measure-theory libraries. Yes, this will mean the files end up importing more of the existing hierarchy, but I don't see why that is a bad thing in itself; and eventually, we'll hopefully have things like Marcinkiewicz–Zygmund proved in their natural generality (which is much broader than discrete abelian groups) and we can just specialise them to the discrete case for the combinatorial applications.</p>",
        "id": 425781019,
        "sender_full_name": "David Loeffler",
        "timestamp": 1710083564
    },
    {
        "content": "<p><a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=lpNorm#doc\">LeanAPAP#lpNorm</a> could perhaps just be <code>notation</code>,</p>",
        "id": 425781210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710083743
    },
    {
        "content": "<p>Orthogonality (and even orthonormality) of characters of general finite groups is already in mathlib ,so you didn't need to do it again in the abelian case, you just had to import a whole bunch of category theory instead.</p>",
        "id": 425781679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710084196
    },
    {
        "content": "<p>Where?</p>",
        "id": 425781758,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710084253
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RepresentationTheory/Character.html#FdRep.char_orthonormal\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/RepresentationTheory/Character.html#FdRep.char_orthonormal</a></p>",
        "id": 425781775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710084280
    },
    {
        "content": "<p>Not sure that deducing the finite abelian case from <em>that</em> is much easier than doing it from scratch... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 425781834,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710084350
    },
    {
        "content": "<p>Yeah this was the main reason I mentioned it (that and the fact that I think this is an interesting discussion point)</p>",
        "id": 425781889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710084377
    },
    {
        "content": "<p>As for:</p>\n<blockquote>\n<ul>\n<li>Lemmas have no measurability or continuity side conditions,</li>\n</ul>\n</blockquote>\n<p>Why would they? Any function on a finite set is continuous and Borel measurable for the discrete topology, and integrable for any locally finite measure, and mathlib knows this perfectly well (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=discrete_of_t1_of_finite#doc\">docs#discrete_of_t1_of_finite</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=continuous_of_discreteTopology#doc\">docs#continuous_of_discreteTopology</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=measurable_of_finite#doc\">docs#measurable_of_finite</a>, etc). So if you want to use some general result from the measure-theory library in your discrete setting, any continuity / measurability conditions in the general case should be pretty effortless to tick off (and if not, then this is a gap in the API which should be fixed, not a reason to reinvent the wheel).</p>",
        "id": 425782197,
        "sender_full_name": "David Loeffler",
        "timestamp": 1710084709
    },
    {
        "content": "<p>I agree with David: in a world where we all have infinite time, I see no reason not to go directly to the case of abelian locally compact groups (e.g  by following Bourbaki, Théories Spectrales). I think most of the things lacking will be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> as a convolution algebra, as well as some facts about (commutative but non-unital) Banach algebras, but this is all standard material that needs to make its way into Mathlib eventually.</p>\n<p>EDIT: Thinking about it again, I realize I significantly underestimated some things here, e.g we would need some form of Young inequality, and generally way more results about convolution.</p>",
        "id": 425783117,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1710085492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/116395-maths/topic/Discrete.20analysis/near/425782197\">said</a>:</p>\n<blockquote>\n<p>if you want to use some general result from the measure-theory library in your discrete setting, any continuity / measurability conditions in the general case should be pretty effortless to tick off</p>\n</blockquote>\n<p>That's true, but let me list you the ways in which you could \"tick off\" such a side condition:</p>\n<ul>\n<li>It's in a <code>rw</code> call and you fill in the side condition immediately. In practice, it is verbose and a bit wonky (on top of being annoying to write in the first place). See eg <a href=\"https://github.com/teorth/pfr/blob/66e620ab5bddbe4c10eac21b050fb82c637bf032/PFR/WeakPFR.lean#L323-L332\">https://github.com/teorth/pfr/blob/66e620ab5bddbe4c10eac21b050fb82c637bf032/PFR/WeakPFR.lean#L323-L332</a> in PFR.</li>\n<li>It's in a <code>rw</code> call and you leave the side condition to the end. This is nice looking, except for the fact that you always have a bunch of goals hanging around, and some tactic calls at the end to handle them.</li>\n<li>It's in a <code>simp</code> call and the corresponding lemma is a simp lemma. That works great, except that the lemma being simp might incur a general performance penalty for all simp calls with the same type of side condition.</li>\n<li>It's in a <code>simp</code> call and the corresponding lemma isn't a simp lemma. Then again having to include the lemma in every simp call looks a bit wonky</li>\n</ul>",
        "id": 425783756,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710086070
    },
    {
        "content": "<p>We certainly do perform additive combinatorics on some infinite discrete groups, such as the integers, as well as some infinite compact groups, such as the unit circle, and of course locally compact groups such as the reals that are neither discrete nor compact.  So long-term we would eventually want to generalize much of the Fourier side of this subject beyond the finite case.  </p>\n<p>A few months ago there was a similar discussion within <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Should.20there.20be.20a.20ProbabilitySpace.20class.3F\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Should.20there.20be.20a.20ProbabilitySpace.20class.3F</a> as to whether to set up discrete probability in a way that allows users (in say theoretical computer science) not familiar with the subtleties of measure theory to just go ahead and use these tools off the shelf.  I have no strong opinion either way, as long as there are lots of helper lemmas that, for instance, relate both the compact Fourier transform and the discrete Fourier transform to the general locally compact abelian Fourier transform (when the latter becomes available in Mathlib), or to relate compact and discrete notions of L^p norms etc. to each other.  I guess the main question is that of timing: do we push the restricted versions of these tools first and worry about refactoring them to special cases of a more general version later, or do we insist on doing the general version first?  Mathematically I don't see a strong case either way, so it comes down to Mathlib's policy preferences I think.</p>",
        "id": 425784324,
        "sender_full_name": "Terence Tao",
        "timestamp": 1710086575
    },
    {
        "content": "<p>Here I see three reasonable non-mutually exclusive solutions:</p>\n<ul>\n<li>My current one</li>\n<li>Make some tactics like <code>measurability</code> or <code>continuity</code> auto-params in the relevant lemmas. Hopefully that's nice, but again it will incur an extra cost for every use of this lemma, and possibly lead to confusing error messages when users expect the side condition to appear, but instead the auto-param tactic tries to fill it and fails.</li>\n<li>Make a copy of every general theory lemma in a <code>Discrete</code> namespace, with all measurability/continuity/integrability side conditions stripped off. I find this a very attractive option, because it also lets us state things in more domain-specific terms, eg by using finite sums rather than integrals. It also solves the next problem, which I am about to explain.</li>\n</ul>",
        "id": 425784532,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710086777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/116395-maths/topic/Discrete.20analysis/near/425782197\">said</a>:</p>\n<blockquote>\n<p>Any function on a finite set is continuous and Borel measurable for the discrete topology, and integrable for any locally finite measure, and mathlib knows this perfectly well</p>\n</blockquote>\n<p>I am being provocative, but no it doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--   TopologicalSpace α</span>\n</code></pre></div>",
        "id": 425784563,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710086818
    },
    {
        "content": "<p>My point is that to even <em>talk</em> about continuity and measurability I need to assume the existence of extra data on all relevant spaces, and also assume that that data is trivial (every set is open/measurable...). This is a pain, when all you want to talk about is functions between finite types and finite sums.</p>",
        "id": 425784725,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710086960
    },
    {
        "content": "<p>If we had a <code>Discrete</code> namespace with copies of general theory lemmas to the finite case, we would be able to nicely get rid of all these <code>[Topological Space α] [DiscreteTopology α]</code> and <code>[MeasurableSpace α] [DiscreteMeasurableSpace α]</code> assumptions by locally (to the files putting lemmas in the <code>Discrete</code> namespace) having instances of the form <code>Finite α → TopologicalSpace α</code>, <code>Finite α → DiscreteTopology α</code>.</p>",
        "id": 425784923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710087132
    },
    {
        "content": "<blockquote>\n<p>My point is that to even talk about continuity and measurability I need to assume the existence of extra data on all relevant spaces, and also assume that that data is trivial (every set is open/measurable...)</p>\n</blockquote>\n<p>Isn't this exactly what <code>local instance</code> is for?</p>",
        "id": 425784937,
        "sender_full_name": "David Loeffler",
        "timestamp": 1710087160
    },
    {
        "content": "<p>That's still burden on the user.</p>",
        "id": 425784968,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710087189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/116395-maths/topic/Discrete.20analysis/near/425784937\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>My point is that to even talk about continuity and measurability I need to assume the existence of extra data on all relevant spaces, and also assume that that data is trivial (every set is open/measurable...)</p>\n</blockquote>\n<p>Isn't this exactly what <code>local instance</code> is for?</p>\n</blockquote>\n<p>This yields basically unusable statements, what if you end up with a topology which is discrete but not definitionally ?</p>",
        "id": 425785062,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1710087261
    },
    {
        "content": "<p>I think I would be okay with the <code>Discrete</code> namespace. What I don't want is to have duplicated proofs just for the sake of not importing topology.</p>",
        "id": 425785105,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1710087305
    },
    {
        "content": "<p>Not quite, Anatole, because I assume David is referring to uses of lemmas within the proofs.</p>",
        "id": 425785112,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710087316
    },
    {
        "content": "<p>Ah, right. But how do you even state lemmas involving the Fourier transform if you don't have any ambient topology then?</p>",
        "id": 425785246,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1710087437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/116395-maths/topic/Discrete.20analysis/near/425784324\">said</a>:</p>\n<blockquote>\n<p>I guess the main question is that of timing: do we push the restricted versions of these tools first and worry about refactoring them to special cases of a more general version later, or do we insist on doing the general version first? </p>\n</blockquote>\n<p>Personally, I have already spent a significant proportion of the past eight months on this project and people are starting to need discrete analysis in mathlib (eg <span class=\"user-mention\" data-user-id=\"690858\">@Daniel Weber</span>, David himself). So I would be more than happy to get my stuff as it is now in mathlib and worry about generalising later.</p>",
        "id": 425785254,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710087445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Discrete.20analysis/near/425785246\">said</a>:</p>\n<blockquote>\n<p>Ah, right. But how do you even state lemmas involving the Fourier transform if you don't have any ambient topology then?</p>\n</blockquote>\n<p>Yep, good point... So in that case we will also need the discrete Fourier transform as a definition. If we <em>define</em> it as the general Fourier transform according to the discrete topology, then it's probably fine.</p>",
        "id": 425785361,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710087534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Discrete.20analysis/near/425785254\">said</a>:</p>\n<blockquote>\n<p>So I would be more than happy to get my stuff as it is now in mathlib and worry about generalising later.</p>\n</blockquote>\n<p>I should also add that the amount of material I would add to mathlib is tiny compared to what would be needed for the general case, so the choice is really between:</p>\n<ul>\n<li>Have people add some random lemmas about my tiny discrete analysis API until someone comes along and generalises it all in two years time</li>\n<li>Have no discrete analysis at all for the coming two years</li>\n</ul>",
        "id": 425785514,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710087691
    },
    {
        "content": "<p>This isn't very relevant, but is the contrapositive of <a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=expect_le#doc\">LeanAPAP#expect_le</a> and <a href=\"https://yaeldillies.github.io/LeanAPAP/docs/find/?pattern=le_expect#doc\">LeanAPAP#le_expect</a> anywhere? It's a common form of the probabilistic method, so it might be worth adding it</p>",
        "id": 425786106,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1710088258
    }
]