[
    {
        "content": "<p>I am a bit confused with the typeclasses relative to the objects in the title.</p>\n<ul>\n<li>\n<p>My impression is that a topological ring gives rise to a uniform add group, but mathlib doesn't seem to agree, for things don't work well in the absence an explicit <code>[UniformAddGroup R]</code></p>\n</li>\n<li>\n<p>What is the proper way to enter typeclasses relative to such objects: all three of them?</p>\n</li>\n</ul>",
        "id": 429258323,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711321505
    },
    {
        "content": "<p>My guess is that topological add group to uniform add group gives some kind of typeclass loop so it might be there as a def but not an instance (in lean 3 these loops were deadly)</p>",
        "id": 429258980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711322008
    },
    {
        "content": "<p>Yes you need all three of them.</p>",
        "id": 429275726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711334760
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 429290225,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711344524
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformGroup#doc\">docs#UniformGroup</a> is a nice typeclass that corresponds to the case where both, left and right, uniformities on the group coincide, which is the case, eg, when the group is commutative. In general, there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalGroup.toUniformSpace#doc\">docs#TopologicalGroup.toUniformSpace</a> to define the right uniformity, but how should one proceed if one needed to work with the left one?</p>",
        "id": 429311921,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711354103
    },
    {
        "content": "<p>If I understand things correctly, the right uniformity is characterized by the fact that the right translations are uniformly continuous, the left uniformity by the fact that the left translations are uniformly continuous, and the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformGroup#doc\">docs#UniformGroup</a> case is the stronger assumption that the multiplication is uniformly continuous (wrt to both variables at the same time). (I wonder whether it is implied by the conjunction of the first two?)</p>",
        "id": 429312360,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711354269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/116395-maths/topic/Uniform.20spaces.2C.20uniform.20add.20groups.2C.20and.20topological.20rings/near/429311921\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformGroup#doc\">docs#UniformGroup</a> is a nice typeclass that corresponds to the case where both, left and right, uniformities on the group coincide, which is the case, eg, when the group is commutative. In general, there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalGroup.toUniformSpace#doc\">docs#TopologicalGroup.toUniformSpace</a> to define the right uniformity, but how should one proceed if one needed to work with the left one?</p>\n</blockquote>\n<p>We do not have it yet. I've had some loose plans about it for a while, but nothing concrete yet. Do you need something in particular?</p>",
        "id": 429312761,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711354408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Uniform.20spaces.2C.20uniform.20add.20groups.2C.20and.20topological.20rings/near/429258980\">said</a>:</p>\n<blockquote>\n<p>My guess is that topological add group to uniform add group gives some kind of typeclass loop so it might be there as a def but not an instance (in lean 3 these loops were deadly)</p>\n</blockquote>\n<p>Here it's not only a loop problem, it's a defeq problem. There is extra data in <code>UniformSpace</code>, so if we had an instance <code>TopologicalRing -&gt; UniformSpace</code> we'd end up with non-defeq uniformities.</p>",
        "id": 429313527,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711354709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/116395-maths/topic/Uniform.20spaces.2C.20uniform.20add.20groups.2C.20and.20topological.20rings/near/429312360\">said</a>:</p>\n<blockquote>\n<p>If I understand things correctly, the right uniformity is characterized by the fact that the right translations are uniformly continuous, the left uniformity by the fact that the left translations are uniformly continuous</p>\n</blockquote>\n<p>I'm never sure about the side, but the key point is that the right uniformity in mathlib is the right uniformity according to Bourbaki (a lot of books reverse the conventions)</p>",
        "id": 429313740,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711354784
    },
    {
        "content": "<p>That's cool. I have no plan in particular, I'm just trying to evaluate power series, using density of polynomials. mathlib and the computer on one lap, Bourbaki on the other one, and I try to ask myself at each page what does what correspond to?</p>",
        "id": 429316618,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711355694
    }
]