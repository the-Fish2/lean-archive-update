[
    {
        "content": "<p>We have the fact that a continous function on a rectangular box has a Riemann integral, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/BoxIntegral/Integrability.html#MeasureTheory.ContinuousOn.hasBoxIntegral\">MeasureTheory.ContinuousOn.hasBoxIntegral</a>. However, by a theorem of Lebesgue-Vitali, <a href=\"https://en.wikipedia.org/wiki/Riemann_integral#Integrability\">see Wikipedia</a>, to have a Riemann integral, it is enough that is continuous almost everywhere. What would be the easiest way to prove this in Mathlib? The proof on Wikipedia uses oscillation and I do not think we have that.</p>",
        "id": 435160159,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1713955184
    },
    {
        "content": "<p>PS. I need this result for the connection between points counting in ‚Ñ§-lattices and volume: Let <code>s</code> be  a bounded, measurable subset of <code>‚Ñù^d</code> with zero-measure frontier. Let <code>L</code> be a ‚Ñ§-lattice in <code>‚Ñù^d</code> and denote by <code>N(c)</code> denote the number of points in <code>s ‚à© c‚Åª¬π ‚Ä¢ L</code>, then <code>N(c) / c^d ‚Üí volume s / covolume L</code>. The above result is the only missing ingredient.</p>",
        "id": 435160689,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1713955421
    },
    {
        "content": "<p>Bumping this since we probably really need it for a project in number theory.</p>",
        "id": 436047860,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714397881
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"110050\">@S√©bastien Gou√´zel</span> knows a strategy?</p>",
        "id": 436047965,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714397901
    },
    {
        "content": "<p>Correct me if I'm wrong, but the fact that oscillation isn't in Mathlib doesn't seem like a major impediment. I don't think we need much more about it than this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.BoxIntegral.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BoxIntegral</span> <span class=\"n\">Topology</span> <span class=\"n\">EMetric</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The oscillation of `f` at `x`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">oscillation</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚®Ö</span> <span class=\"n\">S</span> <span class=\"bp\">‚àà</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">diam</span> <span class=\"n\">S</span>\n\n<span class=\"sd\">/-- The oscillation of `f` at `x` is 0 whenever `f` is continuous at `x`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">oscillation_zero_of_continuousAt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousAt</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">oscillation</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.le_of_forall_pos_le_add</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">intro</span> <span class=\"n\">Œµ</span> <span class=\"n\">hŒµ</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ball</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œµ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ball_mem_nhds</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">hŒµ</span><span class=\"o\">])</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">biInf_le</span> <span class=\"n\">diam</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">le_of_le_of_eq</span> <span class=\"n\">diam_ball</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.mul_div_cancel'</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span>\n\n<span class=\"c1\">-- Used in the proof of Lebesgue-Vitali</span>\n<span class=\"c1\">-- See proof at https://en.wikipedia.org/wiki/Riemann_integral#Integrability</span>\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Box</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">oscillation</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â•</span> <span class=\"n\">Œµ</span> <span class=\"o\">}</span> <span class=\"bp\">‚à©</span> <span class=\"o\">(</span><span class=\"n\">Box.Icc</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">isCompact_X</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Box</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsCompact</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">f</span> <span class=\"n\">I</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">I.isCompact_Icc.of_isClosed_subset</span> <span class=\"o\">(</span><span class=\"n\">IsClosed.inter</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">I.isCompact_Icc.isClosed</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isClosed_iff_clusterPt</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_iInf</span>\n  <span class=\"n\">intro</span> <span class=\"n\">S</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_iInf</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hS</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">U_open</span><span class=\"o\">,</span> <span class=\"n\">aU</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.mem_nhds_iff.1</span> <span class=\"n\">hS</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">diam_mono</span> <span class=\"o\">(</span><span class=\"n\">Set.image_subset_iff.2</span> <span class=\"n\">hU</span><span class=\"o\">))</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">clusterPt_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">bU</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">U_open.mem_nhds</span> <span class=\"n\">aU</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Filter.mem_principal_self</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">Set.mem_setOf.1</span> <span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">biInf_le</span> <span class=\"n\">diam</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_of_superset</span> <span class=\"o\">(</span><span class=\"n\">U_open.mem_nhds</span> <span class=\"n\">bU</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.subset_preimage_image</span> <span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Of course, that's not to imply that formalizing the rest of the proof would be easy...</p>",
        "id": 436383293,
        "sender_full_name": "James Sundstrom",
        "timestamp": 1714530905
    },
    {
        "content": "<p>Thanks a lot! That could be very useful. At the moment, I am still considering which proof is better suited for formalization. I have found a suspiciously short proof in some French course notes that I am still trying to parse</p>",
        "id": 436511433,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1714573810
    },
    {
        "content": "<p>Did you still need this? The code could probably use some cleanup, but it works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.BoxIntegral.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BoxIntegral</span> <span class=\"n\">Topology</span> <span class=\"n\">EMetric</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Box</span> <span class=\"n\">Œπ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"‚Ñù‚Åø\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span>\n\n<span class=\"sd\">/-- The oscillation of `f` at `x`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">oscillation</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù‚Åø</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù‚Åø</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚®Ö</span> <span class=\"n\">S</span> <span class=\"bp\">‚àà</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">diam</span> <span class=\"n\">S</span>\n\n<span class=\"sd\">/-- The oscillation of `f` at `x` is 0 whenever `f` is continuous at `x`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">oscillation_zero_of_continuousAt</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù‚Åø</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù‚Åø</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousAt</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">oscillation</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.le_of_forall_pos_le_add</span> <span class=\"k\">fun</span> <span class=\"n\">Œµ</span> <span class=\"n\">hŒµ</span> <span class=\"n\">_</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ball</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œµ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ball_mem_nhds</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">hŒµ</span><span class=\"o\">])</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">biInf_le</span> <span class=\"n\">diam</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">le_of_le_of_eq</span> <span class=\"n\">diam_ball</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.mul_div_cancel'</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span>\n\n<span class=\"sd\">/-- If `oscillation f x &lt; Œµ` at every `x` in a compact set `K`, then there exists `Œ¥ &gt; 0` such</span>\n<span class=\"sd\">that the oscillation of `f` on `Metric.ball x Œ¥` is less than `Œµ` for every `x` in `K`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">uniform_oscillation_of_compact</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚Ñù‚Åø</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù‚Åø</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">oscillation</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÉ</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">diam</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">Metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">Œ¥</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù‚Åø</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">r</span> <span class=\"bp\">‚àß</span> <span class=\"n\">diam</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">Metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"n\">S_open</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isOpen_iff_nhds</span><span class=\"o\">]</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ar</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">‚ü©</span> <span class=\"n\">t</span> <span class=\"n\">ht</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.mem_nhds_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ar</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ht</span>\n    <span class=\"n\">use</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">diam_mono</span> <span class=\"o\">(</span><span class=\"n\">Set.image_mono</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"n\">hz</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">ha</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.mem_ball</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">dist_triangle</span> <span class=\"n\">z</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">S_cover</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">‚äÜ</span> <span class=\"bp\">‚ãÉ</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">oscillation</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"n\">hK</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">oscillation</span><span class=\"o\">,</span> <span class=\"n\">Filter.mem_map</span><span class=\"o\">,</span> <span class=\"n\">iInf_lt_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hn‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r0</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">Metric.mem_nhds_iff.1</span> <span class=\"n\">hn‚ÇÅ</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"o\">‚ü®</span><span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">r0</span><span class=\"o\">]‚ü©,</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">div_two_lt_of_pos</span> <span class=\"n\">r0</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">diam_mono</span> <span class=\"o\">(</span><span class=\"n\">Set.image_subset_iff.2</span> <span class=\"n\">hr</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hn‚ÇÇ</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">S_antitone</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">r‚ÇÅ</span> <span class=\"n\">r‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">r‚ÇÅ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">r‚ÇÇ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span> <span class=\"n\">r‚ÇÇ</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">S</span> <span class=\"n\">r‚ÇÅ</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">r‚ÇÅ</span> <span class=\"n\">r‚ÇÇ</span> <span class=\"n\">hr</span> <span class=\"n\">x</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ar‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">‚ü©</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">hr</span> <span class=\"n\">ar‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">‚ü©</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">K</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">S</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">Tb</span><span class=\"o\">,</span> <span class=\"n\">Tfin</span><span class=\"o\">,</span> <span class=\"n\">hT</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">comp.elim_finite_subcover_image</span> <span class=\"n\">S_open</span> <span class=\"n\">S_cover</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">T_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">T.Nonempty</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">use</span> <span class=\"n\">Tfin.isWF.min</span> <span class=\"n\">T_nonempty</span><span class=\"o\">,</span> <span class=\"n\">Tb</span> <span class=\"o\">(</span><span class=\"n\">Tfin.isWF.min_mem</span> <span class=\"n\">T_nonempty</span><span class=\"o\">)</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">Set.mem_iUnion.1</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_iUnion</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">S_antitone</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Set.IsWF.min_le</span> <span class=\"n\">Tfin.isWF</span> <span class=\"n\">T_nonempty</span> <span class=\"n\">hr.1</span><span class=\"o\">))</span> <span class=\"n\">hr.2</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.not_nonempty_iff_eq_empty</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">T_nonempty</span>\n      <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">one_pos</span><span class=\"o\">,</span> <span class=\"n\">subset_trans</span> <span class=\"n\">hT</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">T_nonempty</span><span class=\"o\">])</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">Œ¥</span><span class=\"o\">,</span> <span class=\"n\">Œ¥0</span><span class=\"o\">,</span> <span class=\"n\">hŒ¥</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n  <span class=\"n\">use</span> <span class=\"n\">Œ¥</span><span class=\"o\">,</span> <span class=\"n\">Œ¥0</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">xK</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Œ¥a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hŒ¥</span> <span class=\"n\">xK</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">diam_mono</span> <span class=\"o\">(</span><span class=\"n\">Set.image_mono</span> <span class=\"o\">(</span><span class=\"n\">Metric.ball_subset_ball</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">Œ¥a</span><span class=\"o\">))))</span> <span class=\"n\">ha</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">Prepartition</span> <span class=\"n\">Set</span> <span class=\"n\">Classical</span>\n\n<span class=\"sd\">/-- A function that is bounded and a.e. continuous on a box `I` is integrable on `I`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">integrable_of_bounded_and_ae_continuous</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">IntegrationParams</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Box</span> <span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù‚Åø</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">Box.Icc</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">‚Ñù‚Åø</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">IsLocallyFiniteMeasure</span> <span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·µê</span> <span class=\"n\">x</span> <span class=\"bp\">‚àÇ</span><span class=\"n\">Œº</span><span class=\"o\">,</span> <span class=\"n\">ContinuousAt</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Integrable</span> <span class=\"n\">I</span> <span class=\"n\">l</span> <span class=\"n\">f</span> <span class=\"n\">Œº.toBoxAdditive.toSMul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">integrable_iff_cauchy_basis.2</span> <span class=\"k\">fun</span> <span class=\"n\">Œµ</span> <span class=\"n\">Œµ0</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">_</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">exists_pos_mul_lt</span> <span class=\"n\">Œµ0</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Œº.toBoxAdditive</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">Œµ‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">Œµ‚ÇÅ0</span><span class=\"o\">,</span> <span class=\"n\">hŒµ‚ÇÅ</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hC</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">C0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚â•</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">swap</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">BoxIntegral.Box.nonempty_coe</span> <span class=\"n\">I</span>\n    <span class=\"n\">exact</span> <span class=\"n\">False.elim</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">C0</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hC</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Box.coe_subset_Icc</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">exists_pos_mul_lt</span> <span class=\"n\">Œµ0</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">Œµ‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">Œµ‚ÇÇ0</span><span class=\"o\">,</span> <span class=\"n\">hŒµ‚ÇÇ</span><span class=\"o\">‚ü©</span>\n  <span class=\"k\">have</span> <span class=\"n\">Œµ‚ÇÇ0'</span><span class=\"o\">:</span> <span class=\"n\">ENNReal.ofReal</span> <span class=\"n\">Œµ‚ÇÇ</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">not_le_of_gt</span> <span class=\"n\">Œµ‚ÇÇ0</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.ofReal_eq_zero.1</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">Box.Icc</span> <span class=\"n\">I</span> <span class=\"bp\">|</span> <span class=\"bp\">¬¨</span> <span class=\"n\">ContinuousAt</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"n\">ŒºD</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span> <span class=\"n\">D</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v_ae</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">Filter.eventually_iff_exists_mem.1</span> <span class=\"n\">hc</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq_of_le_of_not_lt</span> <span class=\"o\">(</span><span class=\"n\">le_of_le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">Œº.mono</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">xv</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">hx.2</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"n\">x</span> <span class=\"n\">xv</span><span class=\"o\">))</span>\n                                <span class=\"o\">(</span><span class=\"n\">mem_ae_iff.1</span> <span class=\"n\">v_ae</span><span class=\"o\">))</span> <span class=\"n\">ENNReal.not_lt_zero</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">UD</span><span class=\"o\">,</span> <span class=\"n\">Uopen</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">Set.exists_isOpen_lt_add</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Œº</span> <span class=\"n\">D</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">‚ä§</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ŒºD</span><span class=\"o\">])</span> <span class=\"n\">Œµ‚ÇÇ0'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ŒºD</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hU</span>\n  <span class=\"k\">have</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">IsCompact</span> <span class=\"o\">(</span><span class=\"n\">Box.Icc</span> <span class=\"n\">I</span> <span class=\"bp\">\\</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">I.isCompact_Icc.of_isClosed_subset</span> <span class=\"o\">(</span><span class=\"n\">I.isCompact_Icc.isClosed.sdiff</span> <span class=\"n\">Uopen</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.diff_subset</span> <span class=\"n\">_</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">Box.Icc</span> <span class=\"n\">I</span> <span class=\"bp\">\\</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">oscillation</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.ofReal</span> <span class=\"n\">Œµ‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">oscillation</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ENNReal.ofReal_pos.2</span> <span class=\"n\">Œµ‚ÇÅ0</span>\n    <span class=\"n\">apply</span> <span class=\"n\">oscillation_zero_of_continuousAt</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">hx.1</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hx.2</span> <span class=\"bp\">‚àò</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">UD</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r0</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">uniform_oscillation_of_compact</span> <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.ofReal</span> <span class=\"n\">Œµ‚ÇÅ</span><span class=\"o\">)</span> <span class=\"n\">this</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">‚ü®</span><span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">half_pos</span> <span class=\"n\">r0</span><span class=\"o\">‚ü©,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">c‚ÇÅ</span> <span class=\"n\">c‚ÇÇ</span> <span class=\"n\">œÄ‚ÇÅ</span> <span class=\"n\">œÄ‚ÇÇ</span> <span class=\"n\">h‚ÇÅ</span> <span class=\"n\">h‚ÇÅp</span> <span class=\"n\">h‚ÇÇ</span> <span class=\"n\">h‚ÇÇp</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">_</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dist_eq_norm</span><span class=\"o\">,</span> <span class=\"n\">integralSum_sub_partitions</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h‚ÇÅp</span> <span class=\"n\">h‚ÇÇp</span><span class=\"o\">,</span> <span class=\"n\">BoxAdditiveMap.toSMul_apply</span><span class=\"o\">,</span>\n    <span class=\"bp\">‚Üê</span> <span class=\"n\">smul_sub</span><span class=\"o\">]</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">œÄ‚ÇÅ.toPrepartition</span> <span class=\"bp\">‚äì</span> <span class=\"n\">œÄ‚ÇÇ.toPrepartition</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">boxes</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Box</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">J</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">J.toSet</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">Finset.sum_sdiff</span> <span class=\"o\">(</span><span class=\"n\">Finset.filter_subset</span> <span class=\"n\">p</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">add_halves</span> <span class=\"n\">Œµ</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">ŒºI_lt_top</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Œº.mono</span> <span class=\"n\">I.coe_subset_Icc</span><span class=\"o\">)</span> <span class=\"n\">I.isCompact_Icc.measure_lt_top</span>\n  <span class=\"k\">have</span> <span class=\"n\">ŒºJ_ne_top</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">J</span> <span class=\"bp\">‚àà</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">Œº</span> <span class=\"n\">J</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">‚ä§</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">lt_top_iff_ne_top.1</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">lt_of_le_of_lt</span>\n                      <span class=\"o\">(</span><span class=\"n\">Œº.mono</span> <span class=\"o\">(</span><span class=\"n\">Prepartition.le_of_mem'</span> <span class=\"n\">_</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span><span class=\"o\">))</span> <span class=\"n\">ŒºI_lt_top</span>\n  <span class=\"k\">have</span> <span class=\"n\">union</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">S</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">‚ãÉ</span> <span class=\"n\">J</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">J.toSet</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">I.toSet</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">S</span> <span class=\"n\">hS</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">iUnion_subset_iff.2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">J</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">iUnion_subset_iff.2</span> <span class=\"k\">fun</span> <span class=\"n\">hJ</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">le_of_mem'</span> <span class=\"n\">_</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"n\">hJ</span><span class=\"o\">))</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">norm_add_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">¬∑</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">J</span> <span class=\"bp\">‚àà</span> <span class=\"n\">B</span> <span class=\"bp\">\\</span> <span class=\"n\">B.filter</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">Œº.toBoxAdditive</span> <span class=\"n\">J</span> <span class=\"bp\">‚Ä¢</span>\n      <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">œÄ‚ÇÅ.infPrepartition</span> <span class=\"n\">œÄ‚ÇÇ.toPrepartition</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tag</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n      <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">œÄ‚ÇÇ.infPrepartition</span> <span class=\"n\">œÄ‚ÇÅ.toPrepartition</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tag</span> <span class=\"n\">J</span><span class=\"o\">))</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œº.toBoxAdditive</span> <span class=\"n\">J</span> <span class=\"bp\">*</span> <span class=\"n\">Œµ‚ÇÅ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_smul</span><span class=\"o\">,</span> <span class=\"n\">Œº.toBoxAdditive_apply</span><span class=\"o\">,</span> <span class=\"n\">Real.norm_of_nonneg</span> <span class=\"n\">ENNReal.toReal_nonneg</span><span class=\"o\">]</span>\n      <span class=\"n\">refine</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">ENNReal.toReal_nonneg</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">‚àâ</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_sdiff</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_filter</span><span class=\"o\">,</span> <span class=\"n\">not_and</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hJ</span>\n        <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Set.not_subset</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hJ.2</span> <span class=\"n\">hJ.1</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xJ</span><span class=\"o\">,</span> <span class=\"n\">xnU</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n      <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">Box.Icc</span> <span class=\"n\">I</span> <span class=\"bp\">\\</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n        <span class=\"o\">‚ü®</span><span class=\"n\">Box.coe_subset_Icc</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">le_of_mem'</span> <span class=\"n\">_</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_sdiff.1</span> <span class=\"n\">hJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">xJ</span><span class=\"o\">,</span> <span class=\"n\">xnU</span><span class=\"o\">‚ü©</span>\n      <span class=\"k\">have</span> <span class=\"n\">JB</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">‚àà</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_sdiff.1</span> <span class=\"n\">hJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n      <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">œÄ‚ÇÅ.infPrepartition</span> <span class=\"n\">œÄ‚ÇÇ.toPrepartition</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tag</span> <span class=\"n\">J</span> <span class=\"bp\">‚àà</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n        <span class=\"n\">Metric.closedBall_subset_ball</span> <span class=\"o\">(</span><span class=\"n\">div_two_lt_of_pos</span> <span class=\"n\">r0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Metric.mem_closedBall_comm.1</span> <span class=\"bp\">&lt;|</span>\n            <span class=\"n\">h‚ÇÅ.isSubordinate.infPrepartition</span> <span class=\"n\">œÄ‚ÇÇ.toPrepartition</span> <span class=\"n\">J</span> <span class=\"n\">JB</span> <span class=\"o\">(</span><span class=\"n\">Box.coe_subset_Icc</span> <span class=\"n\">xJ</span><span class=\"o\">))</span>\n      <span class=\"k\">have</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">œÄ‚ÇÇ.infPrepartition</span> <span class=\"n\">œÄ‚ÇÅ.toPrepartition</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tag</span> <span class=\"n\">J</span> <span class=\"bp\">‚àà</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">refine</span> <span class=\"n\">Metric.closedBall_subset_ball</span> <span class=\"o\">(</span><span class=\"n\">div_two_lt_of_pos</span> <span class=\"n\">r0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Metric.mem_closedBall_comm.1</span> <span class=\"bp\">&lt;|</span>\n            <span class=\"n\">h‚ÇÇ.isSubordinate.infPrepartition</span> <span class=\"n\">œÄ‚ÇÅ.toPrepartition</span> <span class=\"n\">J</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Box.coe_subset_Icc</span> <span class=\"n\">xJ</span><span class=\"o\">))</span>\n        <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">BoxIntegral.TaggedPrepartition.mem_infPrepartition_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">edist_le_ofReal</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">Œµ‚ÇÅ0</span><span class=\"o\">),</span> <span class=\"n\">dist_eq_norm</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_sdiff.1</span> <span class=\"n\">hJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">using</span>\n        <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">edist_le_diam_of_mem</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">hz</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">norm_sum_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">Finset.sum_le_sum</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">Finset.sum_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">trans</span> <span class=\"n\">Œº.toBoxAdditive</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">Œµ‚ÇÅ</span><span class=\"bp\">;</span> <span class=\"n\">swap</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff'</span> <span class=\"n\">two_pos</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hŒµ‚ÇÅ</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_le_mul_right</span> <span class=\"n\">Œµ‚ÇÅ0</span><span class=\"o\">,</span> <span class=\"n\">Measure.toBoxAdditive_apply</span><span class=\"o\">]</span>\n      <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ENNReal.toReal_mono</span> <span class=\"o\">(</span><span class=\"n\">lt_top_iff_ne_top.1</span> <span class=\"n\">ŒºI_lt_top</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Œº.mono</span> <span class=\"bp\">&lt;|</span>\n          <span class=\"n\">union</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Finset.sdiff_subset</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">B.filter</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">ENNReal.toReal_sum</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">Finset.tsum_subtype</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">swap</span>\n      <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">ŒºJ_ne_top</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_sdiff.1</span> <span class=\"n\">hJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.toReal_mono</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ne_of_lt</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Œº.mono</span> <span class=\"bp\">&lt;|</span>\n        <span class=\"n\">union</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Finset.sdiff_subset</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">B.filter</span> <span class=\"n\">p</span><span class=\"o\">)))</span> <span class=\"n\">ŒºI_lt_top</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">Eq.symm</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"n\">refine</span> <span class=\"n\">measure_biUnion</span> <span class=\"o\">(</span><span class=\"n\">Finset.countable_toSet</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">J</span> <span class=\"n\">_</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">J.measurableSet_coe</span><span class=\"o\">)</span>\n      <span class=\"n\">intro</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"n\">J'</span> <span class=\"n\">hJ'</span> <span class=\"n\">hJJ'</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pairwiseDisjoint</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_sdiff.1</span> <span class=\"n\">hJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_sdiff.1</span> <span class=\"n\">hJ'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hJJ'</span>\n  <span class=\"bp\">¬∑</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">J</span> <span class=\"bp\">‚àà</span> <span class=\"n\">B.filter</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">Œº.toBoxAdditive</span> <span class=\"n\">J</span> <span class=\"bp\">‚Ä¢</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">œÄ‚ÇÅ.infPrepartition</span> <span class=\"n\">œÄ‚ÇÇ.toPrepartition</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tag</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n        <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">œÄ‚ÇÇ.infPrepartition</span> <span class=\"n\">œÄ‚ÇÅ.toPrepartition</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tag</span> <span class=\"n\">J</span><span class=\"o\">))</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œº.toBoxAdditive</span> <span class=\"n\">J</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">J</span> <span class=\"n\">_</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_smul</span><span class=\"o\">,</span> <span class=\"n\">Œº.toBoxAdditive_apply</span><span class=\"o\">,</span> <span class=\"n\">Real.norm_of_nonneg</span> <span class=\"n\">ENNReal.toReal_nonneg</span><span class=\"o\">,</span> <span class=\"n\">two_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">norm_sub_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hC</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">TaggedPrepartition.tag_mem_Icc</span> <span class=\"n\">_</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">norm_sum_le_of_le</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">Finset.sum_mul</span><span class=\"o\">,</span> <span class=\"n\">Measure.toBoxAdditive_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">ENNReal.toReal_sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">ŒºJ_ne_top</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">B.filter_subset</span> <span class=\"n\">p</span> <span class=\"n\">hJ</span><span class=\"o\">))]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚àë</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">B.filter</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Œº</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toReal</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œµ‚ÇÇ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">ENNReal.toReal_ofReal</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">Œµ‚ÇÇ0</span><span class=\"o\">)]</span>\n      <span class=\"n\">refine</span> <span class=\"n\">ENNReal.toReal_mono</span> <span class=\"n\">ENNReal.ofReal_ne_top</span> <span class=\"o\">(</span> <span class=\"n\">le_of_lt</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hU</span><span class=\"o\">)</span>\n      <span class=\"n\">trans</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span> <span class=\"n\">J</span> <span class=\"bp\">‚àà</span> <span class=\"n\">B.filter</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n      <span class=\"bp\">¬∑</span> <span class=\"n\">apply</span> <span class=\"n\">le_of_eq</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">Finset.tsum_subtype</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">measure_biUnion</span> <span class=\"o\">(</span><span class=\"n\">B.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">countable_toSet</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">J</span> <span class=\"n\">_</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">J.measurableSet_coe</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n        <span class=\"n\">intro</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"n\">J'</span> <span class=\"n\">hJ'</span> <span class=\"n\">hJJ'</span>\n        <span class=\"n\">exact</span> <span class=\"n\">pairwiseDisjoint</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">B.filter_subset</span> <span class=\"n\">p</span> <span class=\"n\">hJ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B.filter_subset</span> <span class=\"n\">p</span> <span class=\"n\">hJ'</span><span class=\"o\">)</span> <span class=\"n\">hJJ'</span>\n      <span class=\"bp\">¬∑</span> <span class=\"n\">apply</span> <span class=\"n\">Œº.mono</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">iUnion_subset_iff</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_filter.1</span> <span class=\"n\">hJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">this</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">mul_nonneg_iff_of_pos_left</span> <span class=\"n\">two_pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">C0</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 439256657,
        "sender_full_name": "James Sundstrom",
        "timestamp": 1715963393
    },
    {
        "content": "<p>Yes, I still need this. In fact, I was slowly working on it but I was quite far from it. Thank you very much!  Do you have plan to PR that?</p>",
        "id": 439257184,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1715963606
    },
    {
        "content": "<p>I can give it a shot. I've never actually contributed anything before, so I'll have to figure out what I'm doing there.</p>",
        "id": 439261941,
        "sender_full_name": "James Sundstrom",
        "timestamp": 1715965731
    },
    {
        "content": "<p>Yes yes, PRit!! Don't worry if it's in the final form</p>",
        "id": 439262162,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1715965825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"514924\">@James Sundstrom</span> I sent you an invitation to the github userid in your profile. Maybe just start by adding it to <code>Mathlib.Analysis.BoxIntegral.Basic</code>? You should make a PR from a branch (so clone the project locally, make a branch, push and then PR) rather than a fork. That way we get CI running on it. And I third the opinion that you should PR it :-)</p>",
        "id": 439262344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715965913
    },
    {
        "content": "<p>In any case, I can help you with the PR if you want</p>",
        "id": 439281886,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1715974698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> Thanks! I made the PR.</p>",
        "id": 439385860,
        "sender_full_name": "James Sundstrom",
        "timestamp": 1716070095
    },
    {
        "content": "<p>If it's ready for review, can you label it <code>awaiting-review</code> <span class=\"user-mention\" data-user-id=\"514924\">@James Sundstrom</span></p>",
        "id": 439390917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716075938
    },
    {
        "content": "<p>Oh, I stupidly assumed that would be the default state. Thanks again.</p>",
        "id": 439393032,
        "sender_full_name": "James Sundstrom",
        "timestamp": 1716078328
    },
    {
        "content": "<p>OK it's now on the <a href=\"https://bit.ly/3cKk3ld\">#queue</a> :-)</p>",
        "id": 439393482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716078809
    },
    {
        "content": "<p>Great! I‚Äôll try to have a look later today</p>",
        "id": 439413058,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1716098560
    }
]