[
    {
        "content": "<p>I have formalized some results In Lean about stable matchings and the <a href=\"https://en.wikipedia.org/wiki/Gale%E2%80%93Shapley_algorithm\">Gale-Shapley algorithm</a> at <a href=\"https://github.com/hwatheod/galeshapley-lean\">this repo</a>. It has the basic results (the algorithm produces a stable matching, and it is proposer optimal), as well as some more advanced results found in <a href=\"https://www.mat.univie.ac.at/~slc/opapers/s23dumont.pdf\">Dumont's paper</a> (in French).</p>\n<p>This is an unusual (?) case where the foundations of the theory depend on an algorithm. Indeed, I don't know of any other way to show that a stable matching always exists. So proving the results required implementing the algorithm in Lean and proving invariants about it. Then I had to develop some utilities to be able to study an algorithm step by step. I needed to be able to write lemmas that say, if the algorithm reaches some state, then some other state happens next, or has happened sometime earlier, or will happen sometime later. I couldn't find any existing such tools in Mathlib.</p>\n<p>The basic version of the algorithm uses <code>choose</code> to achieve maximum generality in the proofs, but I also included a computable version of the algorithm that can run in Lean. I actually made 2 implementations of computable versions, but <a href=\"https://github.com/hwatheod/galeshapley-lean/blob/main/GaleShapley/Compute/BasicAlt.lean\">one of them</a> is very slow at a small case (n=4) for reasons I don't fully understand yet. </p>\n<p>Is this worth PR to mathlib? How much more work would it be?</p>",
        "id": 441074406,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1716913456
    },
    {
        "content": "<p>Nice job! This is definitely worth including in mathlib, although I can't tell you how much work it would be without seeing your code</p>",
        "id": 441078732,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716915099
    },
    {
        "content": "<p>The code is at <a href=\"https://github.com/hwatheod/galeshapley-lean\">https://github.com/hwatheod/galeshapley-lean</a></p>",
        "id": 441099357,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1716923563
    },
    {
        "content": "<p>Okay, it will take... a while <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 441103121,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716925091
    },
    {
        "content": "<p>But you can certainly try! Learn by doing, as they say. And if you get bored of PRing, one of us can take over.</p>",
        "id": 441103170,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716925126
    },
    {
        "content": "<p>Put it on a wiki :)</p>",
        "id": 441108821,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716927599
    },
    {
        "content": "<p>Perhaps the computational component can be PRd to Batteries first? (or in parallel)</p>",
        "id": 441110283,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1716928209
    },
    {
        "content": "<p>Why batteries? Gale Shapley is a strictly <del>mathematical</del> theoretical result</p>",
        "id": 441110326,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716928232
    },
    {
        "content": "<p>It's even harder to get reviews in batteries than mathlib. I recommend to stick to mathlib</p>",
        "id": 441111451,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716928736
    },
    {
        "content": "<p>Further I don't see any computational benefit for the typical programmer from an implementation of Gale Shapley. Batteries is to Lean what boost is to C++.</p>",
        "id": 441112935,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716929402
    },
    {
        "content": "<p>Yes, this does not sound suitable for batteries in its current state. Algorithms in batteries are meant to be run first and proved second</p>",
        "id": 441128714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716937656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/116395-maths/topic/Gale-Shapley.20algorithm.20formalization/near/441111451\">said</a>:</p>\n<blockquote>\n<p>It's even harder to get reviews in batteries than mathlib. I recommend to stick to mathlib</p>\n</blockquote>\n<p>This is also very true. It's much easier to review something for batteries that has already gone through mathlib's review process, plus there is some order of magnitude more eyeballs in general in the mathlib queue (although t-meta PRs are still pretty slow, since all the mathlib meta reviewers got hired away...)</p>",
        "id": 441129056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716937820
    }
]