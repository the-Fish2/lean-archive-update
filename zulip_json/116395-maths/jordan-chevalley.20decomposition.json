[
    {
        "content": "<p>Afaik we don't have the Jordan-Chevalley decomposition of a linear operator. I think we have all the prerequisites. We should have this, so that we can say that \"linear algebra\" is done. See <a href=\"https://github.com/leanprover-community/mathlib/issues/4973\">#4973</a>.</p>",
        "id": 216323830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605087246
    },
    {
        "content": "<p>I was a bit perplexed that I needed to go to wikipedia to know you need to \"have linear algebra done\". It turns out France uses a different name for this. @confused French people: Johan means Dunford decomposition.</p>",
        "id": 216332791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1605093398
    },
    {
        "content": "<p>It's rare to see the French calling something by a different name which isn't the name of a French person -- apparently Nelson Dunford was an American.</p>",
        "id": 216333619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605094027
    },
    {
        "content": "<p>Yes, this is extremely confusing.</p>",
        "id": 216333727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1605094101
    },
    {
        "content": "<p>It seems like you missed a big chance there...</p>",
        "id": 216336181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605095787
    },
    {
        "content": "<blockquote>\n<p>Cette décomposition a été démontrée une première fois en 1870 par Camille Jordan, puis dans les années 1950 par Claude Chevalley dans le contexte de la théorie des groupes algébriques. Dans le monde francophone, elle est parfois attribuée à tort à Nelson Dunford, dont les travaux sont postérieurs à ceux de Chevalley.</p>\n</blockquote>",
        "id": 216336245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605095841
    },
    {
        "content": "<p>Too late.</p>",
        "id": 216336904,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1605096269
    },
    {
        "content": "<p>I now need this decomposition. Is there any chance I can nerdsnipe someone into doing it?</p>",
        "id": 411199874,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1704379126
    },
    {
        "content": "<p>To improve my chances, I have done some of the early boring work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Perfect</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Sublattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.EigenSpace.Basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Jordan-Chevalley-Dunford decomposition of a linear operator (additive version)</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">LinearMap</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">invariantSubspace</span> <span class=\"o\">:</span> <span class=\"n\">Sublattice</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">MapsTo</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">p</span><span class=\"o\">}</span>\n  <span class=\"n\">supClosed'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.mem_sup.mp</span> <span class=\"n\">hx</span>\n    <span class=\"n\">exact</span> <span class=\"n\">map_add</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">▸</span> <span class=\"n\">Submodule.add_mem_sup</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"n\">hz</span><span class=\"o\">)</span>\n  <span class=\"n\">infClosed'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span> <span class=\"n\">hx.1</span><span class=\"o\">,</span> <span class=\"n\">hq</span> <span class=\"n\">hx.2</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">invariantSubspace</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">injective_coeSubmodule</span> <span class=\"o\">:</span>\n    <span class=\"n\">Injective</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.invariantSubspace</span> <span class=\"bp\">→</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instTop</span> <span class=\"o\">:</span> <span class=\"n\">Top</span> <span class=\"n\">f.invariantSubspace</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">⊤</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">mem_univ</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instBot</span> <span class=\"o\">:</span> <span class=\"n\">Bot</span> <span class=\"n\">f.invariantSubspace</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">⊥</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hx</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSupSet</span> <span class=\"o\">:</span> <span class=\"n\">SupSet</span> <span class=\"n\">f.invariantSubspace</span> <span class=\"n\">where</span>\n  <span class=\"n\">sSup</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">sSup</span> <span class=\"o\">{(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">},</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Subtype.exists</span><span class=\"o\">,</span> <span class=\"n\">exists_and_right</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">SetLike.mem_coe</span><span class=\"o\">,</span>\n      <span class=\"n\">Submodule.mem_sSup</span><span class=\"o\">,</span> <span class=\"n\">mem_setOf_eq</span><span class=\"o\">,</span> <span class=\"n\">forall_exists_index</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"bp\">⊢</span>\n    <span class=\"n\">intro</span> <span class=\"n\">q</span> <span class=\"n\">hq</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">q.comap</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">p.comap</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">hp'</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">hp</span> <span class=\"bp\">&lt;|</span><span class=\"n\">Submodule.comap_mono</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hq</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">hp'</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instInfSet</span> <span class=\"o\">:</span> <span class=\"n\">InfSet</span> <span class=\"n\">f.invariantSubspace</span> <span class=\"n\">where</span>\n  <span class=\"n\">sInf</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">sInf</span> <span class=\"o\">{(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">},</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">-</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Subtype.exists</span><span class=\"o\">,</span> <span class=\"n\">exists_and_right</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">mem_setOf_eq</span><span class=\"o\">,</span> <span class=\"n\">iInter_exists</span><span class=\"o\">,</span>\n      <span class=\"n\">mem_iInter</span><span class=\"o\">,</span> <span class=\"n\">Submodule.sInf_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"bp\">⊢</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"n\">hp'</span> <span class=\"bp\">↦</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">hp'</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_sup</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">f.invariantSubspace</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">⊔</span> <span class=\"bp\">↑</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_inf</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">f.invariantSubspace</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊓</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">⊓</span> <span class=\"bp\">↑</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sSup_coe_toSubmodule</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">f.invariantSubspace</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">sSup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sSup</span> <span class=\"o\">{(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sSup_coe_toSubmodule'</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">f.invariantSubspace</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">sSup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sSup_coe_toSubmodule</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Set.image</span><span class=\"o\">,</span> <span class=\"n\">sSup_image</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sInf_coe_toSubmodule</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">f.invariantSubspace</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">sInf</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sInf</span> <span class=\"o\">{(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sInf_coe_toSubmodule'</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">f.invariantSubspace</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">sInf</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨅</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sInf_coe_toSubmodule</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Set.image</span><span class=\"o\">,</span> <span class=\"n\">sInf_image</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instCompleteLattice</span> <span class=\"o\">:</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">f.invariantSubspace</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">invariantSubspace.injective_coeSubmodule</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">completeLattice</span>\n      <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coe_sup</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coe_inf</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sSup_coe_toSubmodule'</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sInf_coe_toSubmodule'</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">invariantSubspace</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">abbrev</span> <span class=\"n\">IsSemisimple</span> <span class=\"o\">:=</span> <span class=\"n\">ComplementedLattice</span> <span class=\"n\">f.invariantSubspace</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">PerfectField</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">semisimpleComponent</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- Data</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nilpotentComponent</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">f.semisimpleComponent</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">semisimpleComponent.IsSemisimple</span> <span class=\"o\">:</span> <span class=\"n\">f.semisimpleComponent.IsSemisimple</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- Prop</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nilpotentComponent.IsNilpotent</span> <span class=\"o\">:</span> <span class=\"n\">IsNilpotent</span> <span class=\"n\">f.nilpotentComponent</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- Prop</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Commute_semisimple_nilpotent</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">f.semisimpleComponent</span> <span class=\"n\">f.nilpotentComponent</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- Prop</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">semisimple_add_nilpotent_eq_self</span> <span class=\"o\">:</span> <span class=\"n\">f.semisimpleComponent</span> <span class=\"bp\">+</span> <span class=\"n\">f.nilpotentComponent</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">add_sub_cancel'_right</span> <span class=\"o\">(</span><span class=\"n\">semisimpleComponent</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">LinearMap</span>\n</code></pre></div>",
        "id": 411199926,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1704379144
    },
    {
        "content": "<p>Note that the work in the unmerged <a href=\"https://github.com/leanprover-community/mathlib/pull/18289\">!3#18289</a> has some overlap with your <code>invariantSubspace</code></p>",
        "id": 411208819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704381844
    },
    {
        "content": "<p>Thanks! I probably won't be returning to this for a week or so and the first thing to do would be to PR the invariant submodule stuff, so I'll make sure to look at <a href=\"https://github.com/leanprover-community/mathlib/pull/18289\">!3#18289</a> if / when I get to that.</p>",
        "id": 411209275,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1704381979
    },
    {
        "content": "<p>Oliver pointed out this paper <a href=\"https://arxiv.org/abs/2205.05432\">https://arxiv.org/abs/2205.05432</a> to me; Theorem 7 seems to be a relatively short proof of the theorem. Note that perfectness of K is assumed (implicitly) -- see the paragraph above the statement of the theorem. The other approach is to first prove it for alg closed fields and then descend using Galois theory but this is probably harder work.</p>",
        "id": 411348757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704452374
    },
    {
        "content": "<p>I agree that it is probably easier to avoid the Galois descent argument. Looking now I am slightly surprised to find that Bourbaki do take this route though (and of course prove something slightly stronger):<br>\n<a href=\"/user_uploads/3121/mQlCj_kog0wDQ5M_L1oDyBKc/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/g2FUzXl5TauY10wPVQQ6fKX3/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/mQlCj_kog0wDQ5M_L1oDyBKc/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/mQlCj_kog0wDQ5M_L1oDyBKc/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/g2FUzXl5TauY10wPVQQ6fKX3/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/g2FUzXl5TauY10wPVQQ6fKX3/image.png\"></a></div>",
        "id": 411351363,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1704453442
    },
    {
        "content": "<p>I suspect that the proof described in Geck's paper will generalise to show this Theorem 9.1 of Bourbaki. The key fact Geck needs is that the char poly of the matrix divides some power of a poly defined over the ground field and which has distinct roots in the alg closure. Do we have the function on a UFD which sends something nonzero to a product of its irreducible factors?  (e.g. sends 9 to 3, sends 12 to 6 etc)</p>",
        "id": 411360573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704457016
    },
    {
        "content": "<p>If it exists, I hope it is called <code>radical</code>?</p>",
        "id": 411360671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704457080
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsRadical#doc\">docs#IsRadical</a> (relevant) and then the radical of an ideal <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.radical#doc\">docs#Ideal.radical</a></p>",
        "id": 411361151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704457322
    },
    {
        "content": "<p>Geck taught me basic abstract algebra! He is a great teacher and I'm confident his papers are probably very clear so let's try this!</p>",
        "id": 411368716,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704461019
    },
    {
        "content": "<p>My impression is that the idea is due to Chevalley, and it was written up by Geck very clearly because Geck wasn't happy with the literature, plus they take the opportunity to discuss its practicality as an algorithm for decomposing a concrete matrix.</p>",
        "id": 411371151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704462134
    },
    {
        "content": "<p>It is indeed due to Chevalley, in his <em>Theory of Lie groups</em> and was revived by various people, comprising Couty et al. But these authors consider the case where the characteristic polynomial is split in the ground field; the general case is treated by Geck (and I had treated it in my Algebra lecture notes independently) — one just needs to assume that the irreducible factors of the minimal polynomial are separable (Geck states it less clearly, I believe).</p>",
        "id": 411400524,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704473764
    },
    {
        "content": "<p>I have already implemented the Newton part.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Nilpotent</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Identities</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Derivative</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Nat.self_sub_two_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_le</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ'</span><span class=\"o\">,</span> <span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.add_le_add</span> <span class=\"n\">ih</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.one_le_two_pow</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sub_eval_isNilpotent_of_isNilpotent_sub</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">P.eval</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">P.eval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">cj</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">evalSubFactor</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Commute.isNilpotent_mul_right</span> <span class=\"o\">(</span><span class=\"n\">Commute.all</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eval_isNilpotent_of_isNilpotent_sub</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">P.eval</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">P.eval</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_sub_cancel'_right</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">a</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">b</span> <span class=\"n\">P</span><span class=\"o\">)]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Commute.isNilpotent_add</span> <span class=\"o\">(</span><span class=\"n\">Commute.all</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">sub_eval_isNilpotent_of_isNilpotent_sub</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eval_isUnit_of_isNilpotent_sub</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">P.eval</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">P.eval</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_sub_cancel'_right</span> <span class=\"o\">(</span><span class=\"n\">P.eval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P.eval</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ha.choose_spec</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Commute.IsNilpotent.add_isUnit</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Commute.all</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha.choose_spec</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sub_eval_isNilpotent_of_isNilpotent_sub</span> <span class=\"n\">hb</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The Newton iteration of P -/</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">newton_iterate</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">P.eval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Ring.inverse</span> <span class=\"o\">((</span><span class=\"n\">P.derivative.eval</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- The condition for the Newton iteration to hold -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">newton_ih</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">P.eval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">P.derivative.eval</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">newton_series</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">P.eval</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">//</span> <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)}</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">IsNilpotent.zero</span><span class=\"o\">]⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">newton_iterate</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">newton_series</span> <span class=\"n\">ha</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">newton_iterate</span><span class=\"o\">,</span> <span class=\"n\">sub_sub</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sub_sub</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Commute.isNilpotent_sub</span> <span class=\"o\">(</span><span class=\"n\">Commute.all</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">newton_series</span> <span class=\"n\">ha</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Commute.isNilpotent_mul_left</span> <span class=\"o\">(</span><span class=\"n\">Commute.all</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"n\">apply</span> <span class=\"n\">eval_isNilpotent_of_isNilpotent_sub</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">newton_series</span> <span class=\"n\">ha</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eval_newton_div</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">newton_ih</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">P.eval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">P.eval</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">newton_series</span> <span class=\"n\">ha.1</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">newton_series</span><span class=\"o\">,</span> <span class=\"n\">dvd_refl</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">newton_series</span><span class=\"o\">,</span> <span class=\"n\">newton_iterate._eq_1</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_mul_eq_neg_mul</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">binomExpansion</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">newton_series</span> <span class=\"n\">ha.1</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">newton_series</span> <span class=\"n\">ha.1</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">P</span> <span class=\"bp\">*</span> <span class=\"n\">Ring.inverse</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">newton_series</span> <span class=\"n\">ha.1</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">derivative</span> <span class=\"n\">P</span><span class=\"o\">)))</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">dvd_add</span>\n    <span class=\"n\">convert</span> <span class=\"n\">dvd_zero</span> <span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">Ring.inverse_mul_cancel</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">add_right_neg</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eval_isUnit_of_isNilpotent_sub</span> <span class=\"n\">ha.2</span> <span class=\"o\">(</span><span class=\"n\">newton_series</span> <span class=\"n\">ha.1</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Dvd.dvd.mul_left</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">neg_pow</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">even_two</span><span class=\"o\">,</span> <span class=\"n\">Even.neg_pow</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Dvd.dvd.mul_right</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ'</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pow_dvd_pow_of_dvd</span> <span class=\"n\">hk</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">newton_exists_unique</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">newton_ih</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">IsNilpotent</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">eval</span> <span class=\"n\">b</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exists_unique_of_exists_of_unique</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">-- Existence</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">P.eval</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">newton_series</span> <span class=\"n\">ha.1</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">newton_series</span> <span class=\"n\">ha.1</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">newton_series</span> <span class=\"n\">ha.1</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha.1</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zero_dvd_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">Nat.self_sub_two_pow</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eval_newton_div</span> <span class=\"n\">ha</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">-- Uniqueness</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span>\n    <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">binomExpansion</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_sub_cancel'_right</span><span class=\"o\">,</span> <span class=\"n\">hc.2</span><span class=\"o\">,</span> <span class=\"n\">hb.2</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hu</span>\n    <span class=\"n\">apply</span> <span class=\"n\">symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">IsUnit.smul_eq_zero</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hu</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hu</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb'</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">derivative</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">eval_isUnit_of_isNilpotent_sub</span> <span class=\"n\">ha.2</span> <span class=\"n\">hb.1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hb'.choose_spec</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Commute.IsNilpotent.add_isUnit</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Commute.all</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Commute.isNilpotent_mul_right</span> <span class=\"o\">(</span><span class=\"n\">Commute.all</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_sub_sub_cancel_right</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Commute.isNilpotent_sub</span> <span class=\"o\">(</span><span class=\"n\">Commute.all</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hc.1</span> <span class=\"n\">hb.1</span>\n</code></pre></div>",
        "id": 411402670,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704474540
    },
    {
        "content": "<p>Using Antoine's code above, I now I have a PR which establishes the Jordan-Chevalley decomposition: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10295\">#10295</a></p>",
        "id": 420072820,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1707233392
    },
    {
        "content": "<p>A little more work is required in order to establish uniqueness (the only missing piece is that a sum of commuting semisimple endomorphims is semisimple).</p>",
        "id": 420073074,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1707233450
    },
    {
        "content": "<p>I've delegated <a href=\"https://github.com/leanprover-community/mathlib4/pull/10284\">#10284</a></p>",
        "id": 420076424,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707234392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/jordan-chevalley.20decomposition/near/420073074\">said</a>:</p>\n<blockquote>\n<p>A little more work is required in order to establish uniqueness (the only missing piece is that a sum of commuting semisimple endomorphims is semisimple).</p>\n</blockquote>\n<p>How do you wish to prove this? The proof I teach is not so nice, it uses the relation of semisimple with diagonalizabilty over the algebraic closure and uses a bit of Galois theory… It probably doesn't hold in general. (Take multiplications by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>T</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>S</mi><mi>p</mi></msup><mo>−</mo><mi>a</mi><mo separator=\"true\">,</mo><msup><mi>T</mi><mi>p</mi></msup><mo>−</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k[S,T]/(S^p-a, T^p-b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a, b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> are elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> which are not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-th powers (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, a field of characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>), I think both of them are semisimple, but their sum is not if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a+b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-th power… )</p>",
        "id": 420203787,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707295744
    },
    {
        "content": "<p>I don't have a strategy in mind. Once I finish some review, I'm going to study my application and see if I need the uniqueness just to double check I need it (hard to imagine I don't but just possible) and then think about proof strategies. Thanks for the outline above.</p>",
        "id": 420205316,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1707296398
    },
    {
        "content": "<p>Further suggestions welcome!</p>",
        "id": 420205484,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1707296446
    },
    {
        "content": "<p>Are there cases where it is really simpler? Characteristic 0? Algebraically closed?</p>",
        "id": 420205516,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707296462
    },
    {
        "content": "<p>I don't know but skimming <a href=\"https://mathoverflow.net/questions/115273/sum-of-commuting-semisimple-operators\">https://mathoverflow.net/questions/115273/sum-of-commuting-semisimple-operators</a> suggests perfect field might be a reasonable assumption.</p>",
        "id": 420206024,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1707296644
    },
    {
        "content": "<p>(Back in 2012 this sort of question was allowed on MO.)</p>",
        "id": 420206118,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1707296675
    },
    {
        "content": "<p>What's your application?</p>",
        "id": 420218959,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707301035
    },
    {
        "content": "<p>I want to show that elements of a Cartan subalgebra are semisimple (subject to appropriate hypotheses).</p>",
        "id": 420219462,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1707301217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/jordan-chevalley.20decomposition/near/420206118\">said</a>:</p>\n<blockquote>\n<p>(Back in 2012 this sort of question was allowed on MO.)</p>\n</blockquote>\n<p>/me feels nostalgic for MO in 2012.</p>",
        "id": 420239040,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707308325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/jordan-chevalley.20decomposition/near/420206024\">said</a>:</p>\n<blockquote>\n<p>I don't know but skimming <a href=\"https://mathoverflow.net/questions/115273/sum-of-commuting-semisimple-operators\">https://mathoverflow.net/questions/115273/sum-of-commuting-semisimple-operators</a> suggests perfect field might be a reasonable assumption.</p>\n</blockquote>\n<p>Yes, as I said, I think it is false in general (the example I gave should work), and if the field is perfect, then the semisimple elements are diagonalizable over its separable closure. There, you have commuting diagonalizable operators, so their sum is diagonalizable, and this implies semisimplicity over the ground field. This is how Chevalley does in his <em>Theory of Lie groups</em>.</p>",
        "id": 420353439,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707344571
    },
    {
        "content": "<p>(And uniqueness can be checked over the separable closure.)</p>",
        "id": 420353504,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707344610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/116395-maths/topic/jordan-chevalley.20decomposition/near/420203787\">said</a>:</p>\n<blockquote>\n<p>It probably doesn't hold in general. (Take multiplications by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>T</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mi>S</mi><mi>p</mi></msup><mo>−</mo><mi>a</mi><mo separator=\"true\">,</mo><msup><mi>T</mi><mi>p</mi></msup><mo>−</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k[S,T]/(S^p-a, T^p-b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a, b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> are elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> which are not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-th powers (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, a field of characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>), I think both of them are semisimple, but their sum is not if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a+b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-th power… )</p>\n</blockquote>\n<p>So semistability is not stable under field extensions?! I had never realised this (I really never think about nonperfect fields...)</p>",
        "id": 420355190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707345462
    },
    {
        "content": "<p>Well, it is <em>semi</em>stable...</p>",
        "id": 420355370,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707345552
    },
    {
        "content": "<p>No, semisimplicity is not stable under field extensions!</p>",
        "id": 420358026,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707347010
    },
    {
        "content": "<p>(That's why there is the notion of “geometrically semisimple”.)</p>",
        "id": 420358064,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707347028
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/questions/421263/semi-simplicity-over-commutative-algebras-over-non-algebraically-closed-fields#comment1082469_421276\">This comment</a> inspired me to produce the following conceptual proof that doesn't require passing to the algebraic closure. Suppose that we have commuting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-linear operators <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X,Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> acting on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is a perfect field, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is semisimple as a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span>-module and also as a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>Y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[Y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span></span></span></span>-module, and is finite-dimensional over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>. The minimal polynomial of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a separable polynomial, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">⟨</mo><mi>p</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">k[X]/\\langle p\\rangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">⟩</span></span></span></span> is a product of separable extensions, and the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span>-action on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> factors through it. </p>\n<p><a href=\"/user_uploads/3121/BRv1CwujOOrhEUnrdAZtQKvR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BRv1CwujOOrhEUnrdAZtQKvR/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/BRv1CwujOOrhEUnrdAZtQKvR/image.png\"></a></div>",
        "id": 420410786,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707382029
    },
    {
        "content": "<p>Similarly the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>Y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[Y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span></span></span></span>-action on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> factors through a product of fields, so the action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[X,Y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span></span></span></span> (and therefore of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>+</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X+Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">XY</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, etc.) on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> factors through the tensor product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">⟨</mo><mi>p</mi><mo stretchy=\"false\">⟩</mo><msub><mo>⊗</mo><mi>k</mi></msub><mi>k</mi><mo stretchy=\"false\">[</mo><mi>Y</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">⟨</mo><mi>q</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">k[X]/\\langle p\\rangle\\otimes_k k[Y]/\\langle q\\rangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">⟩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">⟩</span></span></span></span>, which is a finite-dimensional commutative <a href=\"https://math.stackexchange.com/q/3452743/12932\">reduced</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-algebra, so it is a finite product of fields (may require some work of <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> on artinian rings) and therefore a semisimple ring, so every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">⟨</mo><mi>p</mi><mo stretchy=\"false\">⟩</mo><msub><mo>⊗</mo><mi>k</mi></msub><mi>k</mi><mo stretchy=\"false\">[</mo><mi>Y</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">⟨</mo><mi>q</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">k[X]/\\langle p\\rangle\\otimes_k k[Y]/\\langle q\\rangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">⟩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">⟩</span></span></span></span>-<a href=\"https://math.stackexchange.com/q/2055190/12932\">module is semisimple</a>, in particular <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>.</p>\n<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is infinite-dimensional I think we can decompose it into a direct sum of finite-dimensional <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[X,Y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span></span></span></span>-submodules, so we should still be able to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>+</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X+Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">XY</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> etc. act semisimply.</p>",
        "id": 420410800,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707382039
    },
    {
        "content": "<p>Of course, one does not need the full separable closure, the extension generated by the roots is sufficient. But still, one needs Galois theory to go down.</p>",
        "id": 420416962,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707384412
    },
    {
        "content": "<p>Here are some basic missing pieces in the direction of my approach (two sorries left); haven't got to the main argument yet.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.SimpleModule</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Artinian</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IsSimpleModule</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">IsSimpleModule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">span_singleton_eq_top</span> <span class=\"o\">:</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">R</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">eq_bot_or_eq_top</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">h.le</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Submodule.mem_span_singleton_self</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">LinearMap</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">toSpanSingleton_surjective</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"o\">(</span><span class=\"n\">toSpanSingleton</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">range_eq_top</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">span_singleton_eq_range</span><span class=\"o\">,</span> <span class=\"n\">span_singleton_eq_top</span> <span class=\"n\">hm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ker_toSpanSingleton_isMaximal</span> <span class=\"o\">:</span> <span class=\"n\">Ideal.IsMaximal</span> <span class=\"o\">(</span><span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"n\">toSpanSingleton</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ideal.isMaximal_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">isSimpleModule_iff_isCoatom</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">quotKerEquivOfSurjective</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toSpanSingleton_surjective</span> <span class=\"n\">hm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">IsPrincipal</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">IsSimpleModule.nontrivial</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_ne</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">⟨⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">span_singleton_eq_top</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isSimpleModule_iff_quot_maximal</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsSimpleModule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">I.IsMaximal</span> <span class=\"bp\">∧</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">coatom</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">equiv</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">IsSimpleModule.nontrivial</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n    <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_ne</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ker_toSpanSingleton_isMaximal</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n      <span class=\"o\">⟨(</span><span class=\"n\">quotKerEquivOfSurjective</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toSpanSingleton_surjective</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">convert</span> <span class=\"n\">congr</span> <span class=\"n\">equiv</span><span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">isSimpleModule_iff_isCoatom</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">IsSimpleModule</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">IsSemisimpleRing</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">IsSemisimpleModule</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n\n<span class=\"c1\">-- not needed</span>\n<span class=\"c1\">-- instance [IsSemisimpleRing R] [IsSemisimpleRing S] : IsSemisimpleRing (R × S) := sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">IsSemisimpleRing</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsSemisimpleRing</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">RingEquiv.isSemisimpleRing</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsSemisimpleRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsSemisimpleRing</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">RingHomInvPair.of_ringEquiv</span> <span class=\"n\">e</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">RingHomInvPair.of_ringEquiv</span> <span class=\"n\">e.symm</span>\n  <span class=\"o\">(</span><span class=\"n\">Submodule.orderIsoMapComap</span> <span class=\"n\">e.toSemilinearEquiv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">complementedLattice</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IsSemisimpleModule.congr</span> <span class=\"o\">[</span><span class=\"n\">IsSemisimpleModule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsSemisimpleModule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Submodule.orderIsoMapComap</span> <span class=\"n\">e.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">complementedLattice</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">IsSemisimpleModule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsSemisimpleModule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">compl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_isCompl</span> <span class=\"n\">N</span>\n  <span class=\"bp\">.</span><span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">N.quotientEquivOfIsCompl</span> <span class=\"n\">P</span> <span class=\"n\">compl</span><span class=\"o\">)</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsSemisimpleRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsSemisimpleModule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- use isSemisimpleModule_of_isSemisimpleModule_submodule'</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">IsSemisimpleRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsSemisimpleModule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.quotKerEquivOfSurjective</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Finsupp.total_id_surjective</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Ring</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">CommRing</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IsArtinianRing.of_finite</span> <span class=\"o\">[</span><span class=\"n\">IsArtinianRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module.Finite</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsArtinianRing</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"n\">isArtinian_of_tower</span> <span class=\"n\">R</span> <span class=\"n\">isArtinian_of_fg_of_artinian'</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">annihilator</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">annihilator</span>\n\n<span class=\"c1\">-- TODO: generalize to `I ≤ annihilator R M`</span>\n<span class=\"kn\">open</span> <span class=\"n\">DistribMulAction</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">annihilator</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.lift</span> <span class=\"o\">(</span><span class=\"n\">toAddMonoidHom</span> <span class=\"n\">M</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">change</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">r'</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sub_smul</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Submodule.mem_annihilator.mp</span> <span class=\"o\">((</span><span class=\"n\">Submodule.quotientRel_r_def</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">zero_smul</span> <span class=\"n\">_</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"n\">one_smul</span> <span class=\"n\">_</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">add_smul</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">mul_smul</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">toAddMonoidHom</span> <span class=\"n\">M</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">toAddMonoidHom</span> <span class=\"n\">M</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">annihilator</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨⟩</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">mul_smul</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">surj</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"c1\">-- can't switch order</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">submoduleEquiv</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">Submodule</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">N</span> <span class=\"k\">with</span>\n    <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">algebraMap_smul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">N.smul_mem</span> <span class=\"o\">}</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.restrictScalars</span> <span class=\"n\">R</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IsSemisimpleModule.iff_of_isScalarTower</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsSemisimpleModule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">↔</span> <span class=\"n\">IsSemisimpleModule</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">submoduleEquiv</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">complementedLattice_iff</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">surj</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IsSemisimpleModule.quot_annihilator_iff</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsSemisimpleModule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">↔</span> <span class=\"n\">IsSemisimpleModule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">annihilator</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IsSemisimpleModule.iff_of_isScalarTower</span> <span class=\"n\">Quotient.surjective_Quotient_mk''</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CommRing</span>\n</code></pre></div>",
        "id": 420865456,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707633069
    },
    {
        "content": "<p>I usuall like overkill proofs, but here are the two useful results that mathlib should know, for an endomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> of a finite dimensional <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>-vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> :</p>\n<ul>\n<li>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is an extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>u</mi><mi>L</mi></msub></mrow><annotation encoding=\"application/x-tex\">u_L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is semi-simple, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> is semi-simple. The converse holds if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is separable. </li>\n<li>The minimal polynomial of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> is separable (has distinct roots in an algebraic closure) if and only if  there exists a <em>separable</em> extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>u</mi><mi>L</mi></msub></mrow><annotation encoding=\"application/x-tex\">u_L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is diagonalizable. </li>\n</ul>\n<p>(This is essentially how Chevalley proves the result requested by <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>  in his book, <em>Théorie des groupes de Lie, II</em>, Hermann, 1968, chapter I, §8, <a href=\"https://archive.org/details/theoriedesgroupe0000chev\">https://archive.org/details/theoriedesgroupe0000chev</a>)</p>",
        "id": 420883299,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707651526
    },
    {
        "content": "<p>Another approach would formalize Bourbaki's chapter on <em>Semisimple modules and rings</em> (it has just been translated into English…) and study the tensor product of semisimple modules. That would certainly be an excellent thing to do, but I'm afraid one can't do that in mathlib until one has a fairly flexible way to talk about left and right modules.</p>",
        "id": 420883561,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707651811
    },
    {
        "content": "<p>Yeah those two facts would be nice to have. But we would also need the simultaneous diagonalizability result (if both operators are diagonalizable) to use the approach. What's the best way to formalize diagonalizability? Each simple submodule of <code>Module.AEval' f</code> is of dimension 1 (where <code>f</code> is the operator)? You might need to define isotypic components to get the result.</p>\n<p>Systematically formalizing Bourbaki might be nice, but we're in the commutative setting here. I think the basic facts about semisimple rings/modules above pretty much suffice for the current purpose. BTW, The book I learned noncommutative algebra from in graduate school is Lorenz's <a href=\"https://link.springer.com/book/10.1007/978-0-387-72488-1\">Algebra II</a> and I think it's a very nice reference.</p>\n<p>A fact I'll need once or twice is that a finite-dimensional commutative reduced algebra over a field is a product of fields and hence semisimple, which already follows from the Chinese remainder theorem <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.quotientInfRingEquivPiQuotient#doc\">docs#Ideal.quotientInfRingEquivPiQuotient</a> together with the fact that the intersection of maximal ideals is the nilradical due to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsArtinianRing.isMaximal_of_isPrime#doc\">docs#IsArtinianRing.isMaximal_of_isPrime</a> (which is Jujian's prior work; it doesn't depend on anything not yet in mathlib).</p>\n<p>BTW I already killed the second sorry above, and for the first sorry I want to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule.orderIsoMapComap#doc\">docs#Submodule.orderIsoMapComap</a> but annoyingly LinearEquiv(Class) requires an InvPair of RingHoms, when one surjective RingHom already suffices. (I want to show that the action of <code>∀ i, R i</code> on <code>R i</code> factors through <code>R i</code>, so <code>R i</code> being a semisimple <code>R i</code>-module implies it is also semisimple as a <code>∀ i, R i</code>-module.)</p>\n<p>I also figured out an easy way to show <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">⟨</mo><mi>p</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>q</mi><mo stretchy=\"false\">(</mo><mi>Y</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⟩</mo><mo>=</mo><mi>R</mi><mo stretchy=\"false\">[</mo><mi>Y</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">⟨</mo><mi>q</mi><mo stretchy=\"false\">(</mo><mi>Y</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">k[X,Y]/\\langle p(X),q(Y)\\rangle = R[Y]/\\langle q(Y)\\rangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)⟩</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)⟩</span></span></span></span> is reduced, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>=</mo><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">⟨</mo><mi>p</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">R=k[X]/\\langle p(X)\\rangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)⟩</span></span></span></span> (no tensor products anymore!). We just need to show q <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsRadical#doc\">docs#IsRadical</a> in R[Y], and we already know q is separable in k[Y] (squarefree + perfect), so its image in any extension is separable, and hence squarefree; we know that squarefree implies IsRadical in a DecompositionMonoid (<a href=\"https://github.com/leanprover-community/mathlib4/pull/10327\">#10327</a>), and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is indeed a decomposition monoid, being reduced and hence a product of fields, since p is squarefree.</p>\n<p>The last missing piece is that the minimal polynomial of a semisimple module is squarefree, but that should be easy. (In general the minimal polynomial of a finite sup of submodules is the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.lcm#doc\">docs#Finset.lcm</a> of the individual minimal polynomials, and we should prove squarefree_lcm.)</p>",
        "id": 420908365,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707673382
    },
    {
        "content": "<p>I had proved this last missing piece when <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> asked for a proof of Jordan Chevalley.</p>",
        "id": 420931741,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707694904
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/05aefb7aeea1fb8defd124e67376acde0f0aa7e7/Mathlib/LinearAlgebra/Jordan.lean#L246\">https://github.com/leanprover-community/mathlib4/blob/05aefb7aeea1fb8defd124e67376acde0f0aa7e7/Mathlib/LinearAlgebra/Jordan.lean#L246</a></p>",
        "id": 420931876,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707695032
    },
    {
        "content": "<p>My proof, however, is not the one you suggest, which is better.</p>",
        "id": 420932123,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707695241
    },
    {
        "content": "<p>To state diagonalizability: one has eigenspaces and it suffices to say that the space is the direct sum of its eigenspaces, and its equivalent to the minimal polynomial to be split and separable. <br>\nThe simultaneous diagonalizability of two commuting diagonalizable endomorphisms follows from the fact that the eigenspaces of the first one are stable by the second one, whose resriction is diagonalizable (by the criterion on minimal polynomials).</p>",
        "id": 420932639,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707695682
    },
    {
        "content": "<p>My approach is now successful, PR'd as <a href=\"https://github.com/leanprover-community/mathlib4/pull/10808\">#10808</a>. I've been able to deduce <code>minpoly_squarefree_of_isSemisimple</code> easily from the general fact that the annihilator of a semisimple module must be a radical ideal. The PR can be split into multiple parts but I refrain from doing so without an explicit request.</p>",
        "id": 423761005,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1709105528
    },
    {
        "content": "<p>That PR description is very nice! I'll review asap</p>",
        "id": 423761684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709105888
    },
    {
        "content": "<p>It is true that it could have been split, but having just read it, the many additions make sense and the bulk of the work is in two parts only.</p>",
        "id": 423765031,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709107610
    }
]