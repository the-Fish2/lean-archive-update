[
    {
        "content": "<p>Hi there, hopefully this is in the right place as I'm currently new to both Lean and the Zulip chat. I am trying to define a structure, see below, and at one point I want a direct sum composition of a normed space T. Here's the thing: I want T, as well as the \\tau_i, to all be normed complete vector spaces in addition to just k-modules. But I am super stuck on how to declare them as such. Does this need to be done in a variable format? Definitely missing something fundamental here - thank you!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span>\n  <span class=\"o\">(</span><span class=\"n\">NormedField</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">model_space</span> <span class=\"n\">where</span>\n  <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ModuleCat</span> <span class=\"n\">k</span>\n  <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"n\">T</span>\n  <span class=\"n\">normed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">NormedSpace</span> <span class=\"n\">τ</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I guess optimally I would define T as a NormedSpace in the first place - how would I do that?</p>",
        "id": 410654606,
        "sender_full_name": "Noam Kantor",
        "timestamp": 1704050585
    },
    {
        "content": "<p>Syntax note:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span>\n  <span class=\"o\">(</span><span class=\"n\">NormedField</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>is defining <em>three</em> variables: <code>NormedField</code>, <code>k</code>, and a <code>Ring k</code> instance. You want <code>[NormedField k]</code> there for a typeclass argument, or perhaps <code>(inst : NormedField k)</code> if you really do want an explicit argument. This is a small gotcha with a difference between how different sorts of binder types are parsed.</p>",
        "id": 410655009,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704051046
    },
    {
        "content": "<p>Ah, thank you for the tip!</p>",
        "id": 410655310,
        "sender_full_name": "Noam Kantor",
        "timestamp": 1704051373
    },
    {
        "content": "<p>It's very unlikely that a countably infinite direct sum of complete normed spaces will be complete. Can you explain a bit more clearly the mathematical thing you're trying to do?</p>",
        "id": 410655337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704051423
    },
    {
        "content": "<p>Sorry - I don't want T to be a Banach space, just each of the T_i. I am early on in my lean journey and want to formalize the definition of a regularity struture: <br>\n<a href=\"/user_uploads/3121/gn735sICmkyA4FM__2gkAlwv/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/gn735sICmkyA4FM__2gkAlwv/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/gn735sICmkyA4FM__2gkAlwv/image.png\"></a></div>",
        "id": 410655451,
        "sender_full_name": "Noam Kantor",
        "timestamp": 1704051567
    },
    {
        "content": "<p>Do things go better if you make <code>T</code> (as well as <code>k</code>) a parameter, along with the typeclasses? Perhaps then <code>T</code> needn't be a field.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">k</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ModelSpace</span> <span class=\"n\">where</span>\n  <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"n\">T</span>\n  <span class=\"n\">normed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">NormedSpace</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410655583,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704051714
    },
    {
        "content": "<p>Indeed they do, thank you! What tells me that I need to make T a NACG in addition to a NormedSpace?</p>",
        "id": 410655873,
        "sender_full_name": "Noam Kantor",
        "timestamp": 1704052003
    },
    {
        "content": "<p>Mostly just the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NormedSpace#doc\">docs#NormedSpace</a>, which has <code>SeminormedAddCommGroup</code> as a typeclass argument. (I looked at the definition of <code>NormedSpace</code> in \"Mathlib.Analysis.NormedSpace.Basic.lean\", having started by grepping Mathlib for \"NormedSpace\". Probably there are better tools than <code>grep</code>, but I'm too lazy to learn them.)</p>",
        "id": 410656153,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704052278
    },
    {
        "content": "<p>Got it - thanks so much!</p>",
        "id": 410657487,
        "sender_full_name": "Noam Kantor",
        "timestamp": 1704053573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/116395-maths/topic/Confusion.20using.20multiple.20classes/near/410655583\">said</a>:</p>\n<blockquote>\n<p>Do things go better if you make <code>T</code> (as well as <code>k</code>) a parameter, along with the typeclasses? Perhaps then <code>T</code> needn't be a field.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">k</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ModelSpace</span> <span class=\"n\">where</span>\n  <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"n\">T</span>\n  <span class=\"n\">normed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">NormedSpace</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is still a bad approach because it puts two unrelated module structures on <code>τ i</code></p>",
        "id": 410680265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704075210
    },
    {
        "content": "<p>You can in fact just remove <code>normed</code>; lean already knows that submodules of a normed space are normed (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule.normedSpace#doc\">docs#Submodule.normedSpace</a>)</p>",
        "id": 410680523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704075382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"677363\">NK</span> has marked this topic as resolved.</p>",
        "id": 410780045,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704159967
    }
]