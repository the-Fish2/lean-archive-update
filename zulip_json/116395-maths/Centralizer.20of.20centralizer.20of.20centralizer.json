[
    {
        "content": "<p>I just noticed <a href=\"https://github.com/leanprover-community/mathlib4/pull/13492\">#13492</a> in <a class=\"stream\" data-stream-id=\"116290\" href=\"/#narrow/stream/116290-rss\">#rss</a> (the PR was made when I was asleep and I didn't get to it this morning before it was merged). Seems to me that \"centralizer\" is a Galois connection with itself (possibly with an ^op somewhere; smaller things have bigger centralizers) and that this PR could  have used such functionality? For example the headline result just looks like it could be a special case of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GaloisConnection.u_l_u_eq_u#doc\">docs#GaloisConnection.u_l_u_eq_u</a> . Or does the op mean that it would be too much of a kerfuffle to use this machinery?</p>",
        "id": 442492901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717495898
    },
    {
        "content": "<p>The \"<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GaloisConnection#doc\">docs#GaloisConnection</a> is too much of a kerfuffle for my use case\" is countered by \"Use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ClosureOperator#doc\">docs#ClosureOperator</a>\" instead</p>",
        "id": 442503750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717499505
    },
    {
        "content": "<p>But it isn't a closure operator, is it? You don't have <code>C^2 = C</code>. How does that golf <code>C^3 = C</code>?</p>",
        "id": 442504129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717499610
    },
    {
        "content": "<p>I think Kevin's claim might work in theory. But I'm not sure whether the op will mess up the practice.</p>",
        "id": 442504265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717499646
    },
    {
        "content": "<p>Isn't <code>C^2</code> a closure operator then?</p>",
        "id": 442504339,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717499672
    },
    {
        "content": "<p>It is. But how does that give you <code>C^3 = C</code>?</p>",
        "id": 442504390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717499694
    },
    {
        "content": "<p>I guess that only helps you with <code>C^4 = C</code></p>",
        "id": 442504426,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717499705
    },
    {
        "content": "<p>I don't think <code>C^4 = C</code> is true in general. <code>C^n</code> doesn't stabilise. It alternates.</p>",
        "id": 442504666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717499795
    },
    {
        "content": "<p>There is even the <a href=\"https://en.wikipedia.org/wiki/Double_centralizer_theorem\">Double centralizer theorem</a>.</p>",
        "id": 442513686,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717502719
    },
    {
        "content": "<p>It gives you C^4=C^2 :-)</p>",
        "id": 442532913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717508545
    },
    {
        "content": "<p>Double centralizer says \"sometimes, C^2=id\". Like some Galois connections satisfy l(u x)=x.</p>",
        "id": 442533110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717508601
    },
    {
        "content": "<p>I don't think the double centralizer forms a Galois connection with itself?</p>",
        "id": 442533300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717508651
    },
    {
        "content": "<p><code>doubleCentralizer s ⊆ t ↔ s ⊆ doubleCentralizer t</code> sounds like nonsense to me</p>",
        "id": 442533410,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717508688
    },
    {
        "content": "<p>No, in the same way that l composed with u doesn't form a Galois connection with itself usually. But C : subrings -&gt; subrings^op might form a Galois connection with C^op : subrings^op -&gt; subrings.</p>",
        "id": 442533471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717508708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> if you restrict to <code>s,t</code> in the subspace of things that are centralizers, then your claim becomes true.</p>",
        "id": 442533704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717508769
    },
    {
        "content": "<p><code>s ⊆ doubleCentralizer t ↔ t ⊆ doubleCentralizer s</code>? I guess that's actually true, yeah, since both sides mean \"All elements of <code>s</code> commute with all elements of <code>t</code>\"</p>",
        "id": 442533723,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717508776
    },
    {
        "content": "<p><del>That's <code>Iff.rfl</code>, right?</del></p>",
        "id": 442533799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717508801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Centralizer.20of.20centralizer.20of.20centralizer/near/442533704\">said</a>:</p>\n<blockquote>\n<p>if you restrict to <code>s,t</code> in the subspace of things that are centralizers, then your claim becomes true.</p>\n</blockquote>\n<p>Yeah but that's too weak of a statement</p>",
        "id": 442533826,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717508808
    },
    {
        "content": "<p>Sorry, edited</p>",
        "id": 442533864,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717508820
    },
    {
        "content": "<p>If my hunch about centraliser being a Galois connection with itself is true, then s subset doubleCentralizer t will mean something like Centralizer s superset Centralizer t (which isn't symmetric)</p>",
        "id": 442534264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717508936
    },
    {
        "content": "<p>It's a very easy proof to begin with, so \"too much of a kerfuffle to use this machinery\" sounds about right!</p>",
        "id": 442565483,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1717516738
    },
    {
        "content": "<p>The argument for it is that you get access to all of the other lemmas too, but the <code>op</code> is worrying me. </p>\n<p>I once developed a theory of contravariant functors explicitly and it was fun and nice, you could do things like \"composite of a covariant and contravariant functor is contravariant\" etc, there were no ops at all. So one could argue that another approach is to develop the theory of contravariant Galois connections (for example the original Galois connection, sending a subset of a Galois group to the subfield it fixes and a subset of the big field to the subgroup which fixes it pointwise) in an op-free manner and then there would be no excuse not to refactor :-) But I am not minded to do that unless there's a bigger application.</p>",
        "id": 442566629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717516981
    },
    {
        "content": "<p>“<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GaloisConnection#doc\">docs#GaloisConnection</a> is too much of a kerfuffle for my use case” seems very unlikely to ever hold. Galois connections have almost no kerfuffle overhead (by contrast to bringing category theory to a formalization for instance).</p>",
        "id": 442585255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717522219
    },
    {
        "content": "<p>The overhead here is just ^op, because it's a coGalois connection.</p>",
        "id": 442585709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717522348
    },
    {
        "content": "<p>I also think it would also make sense to have an API for Galois nnections (lol) because they have the extra feature of being entirely symmetric, which would be nice to have reflected in the API, and also because there are a bunch of examples. I also think we lack API about the fact that any Galois connection decomposes as closure operators both ways and an order isomorphism.</p>",
        "id": 443756465,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1718021567
    },
    {
        "content": "<p>I mean we have all the mathematical results, but we need some glue to actual <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderIso#doc\">docs#OrderIso</a></p>",
        "id": 443757582,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1718021909
    }
]