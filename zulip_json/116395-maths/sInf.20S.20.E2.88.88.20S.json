[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ConditionallyCompleteLinearOrder</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">hSn</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hSb</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">BddBelow</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">sInf</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">exact?</span>\n</code></pre></div>\n<p>Am I missing an assumption?</p>",
        "id": 440292998,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716460026
    },
    {
        "content": "<p>Yes, that the order is locally finite</p>",
        "id": 440293089,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716460073
    },
    {
        "content": "<p>I probably shouldn't've used <code>sInf</code> in the first place.<br>\nI want to say that an affine map on a nonempty compact set has a minimum (and do something with it).<br>\nWhich (noncomputable) function should I call to say \"minimum\" here?</p>",
        "id": 440295436,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716460993
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.choose#doc\">docs#Classical.choose</a> ?</p>",
        "id": 440295560,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716461043
    },
    {
        "content": "<p>I mean for the \"minimum\" part. My choice of <code>sInf</code> or <code>iInf</code> was probably wrong.</p>",
        "id": 440295793,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716461146
    },
    {
        "content": "<p>I mean <code>sInf</code>/<code>iInf</code> <em>is</em> the correct function?</p>",
        "id": 440295952,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716461192
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCompact.exists_isMinOn#doc\">docs#IsCompact.exists_isMinOn</a> is what I need.</p>",
        "id": 440296221,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716461305
    },
    {
        "content": "<p>In your setup it’s probably easier to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=sInf#doc\">docs#sInf</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCompact.sInf_mem#doc\">docs#IsCompact.sInf_mem</a>. But note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCompact.exists_isMinOn#doc\">docs#IsCompact.exists_isMinOn</a> is mathematically stronger because it needs no completeness assumption on the ambient order, e.g it holds even for compact subsets of the rationals (which are quite rare, granted)</p>",
        "id": 440323827,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1716471194
    }
]