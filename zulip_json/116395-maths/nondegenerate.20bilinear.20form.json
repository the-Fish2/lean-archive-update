[
    {
        "content": "<p>In PR <a href=\"https://github.com/leanprover-community/mathlib/pull/5814\">#5814</a> I defined nondegenerate bilinear forms to be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nondegenerate</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>As <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> pointed out this is not a symmetric definitionsince we can easily have defined it to be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nondegenerate</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p><a href=\"http://pub.math.leidenuniv.nl/~luijkrmvan/linalg2/2015/LinAlg2-2015.pdf\">Here</a> (section 8.3) we have some definition of a symmetric version. Is this a better solution or should we keep it asymmetric as we have done for left cosets?</p>",
        "id": 229116307,
        "sender_full_name": "Jason KY.",
        "timestamp": 1615053555
    },
    {
        "content": "<p>Thank you for starting the discussion, Jason!  Specifically, the lecture notes Jason linked are an example of someone choosing to define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nondegenerate</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 229116492,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615053712
    },
    {
        "content": "<p>(In finite dimension these definitions are all equivalent.)</p>",
        "id": 229116614,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615053800
    },
    {
        "content": "<p>Is this concept useful in the infinite-dimensional setting? I have only ever seen it being used in the finite-dimensional case in which case it doesn't matter</p>",
        "id": 229117852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615054821
    },
    {
        "content": "<p>Related to this discussion; I was able to relax some of the lemmas in <a href=\"https://github.com/leanprover-community/mathlib/issues/5814\">#5814</a> to not require degeneracy, in <a href=\"https://github.com/leanprover-community/mathlib/issues/9465\">#9465</a>. <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span>, are there downstream generalizations you can think of to continue from this point?</p>",
        "id": 255576117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633009527
    },
    {
        "content": "<p>eg perhaps <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quadratic_form.equivalent_one_neg_one_weighted_sum_squared\">docs#quadratic_form.equivalent_one_neg_one_weighted_sum_squared</a> should permit zeros too</p>",
        "id": 255576415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633009650
    },
    {
        "content": "<p>But then we'd need to replace <code>units K</code> with <code>with_zero (units K)</code> or similar, which probably is annoying</p>",
        "id": 255576572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633009706
    },
    {
        "content": "<p>Thanks for the PR! It looks very good. For the generalization, I did think about permitting zeros but you are right that we will need <code>with_zero (units K)</code> which is annoying. The proof will go as follows, we show that every symmetric quadratic form can be restricted onto the largest subspace on which it is nondegenerate and we can obtain a sum of squares for that restriction. Then by <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/bilinear_form.html#bilin_form.restrict_nondegenerate_iff_is_compl_orthogonal\">this lemma</a> we have the complement of that subspace is orthogonal and so the quadratic form agrees with the sum of squares on the whole space.</p>",
        "id": 255581815,
        "sender_full_name": "Jason KY.",
        "timestamp": 1633011486
    },
    {
        "content": "<p>So I think the only \"hard\" part is to lift the restricted sum of squares to the whole space which introduces zeros but I don't believe it to be too tough.</p>",
        "id": 255581991,
        "sender_full_name": "Jason KY.",
        "timestamp": 1633011541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/nondegenerate.20bilinear.20form/near/229117852\">said</a>:</p>\n<blockquote>\n<p>Is this concept useful in the infinite-dimensional setting? I have only ever seen it being used in the finite-dimensional case in which case it doesn't matter</p>\n</blockquote>\n<p>Wikipedia briefly discusses the infinite-dimensional case: <a href=\"https://en.wikipedia.org/wiki/Degenerate_bilinear_form#Infinite_dimensions\">https://en.wikipedia.org/wiki/Degenerate_bilinear_form#Infinite_dimensions</a></p>\n<p>Our current definition in mathlib (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.Nondegenerate#doc\">docs#LinearMap.Nondegenerate</a>) is what wiki calls <em>weakly nondegenerate</em>.<br>\nI would be happy to know whether people think we should adapt our definitions.</p>",
        "id": 440134640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716395750
    },
    {
        "content": "<p>Friends of mine who have thought about rewriting a book on bilinear forms have two notions:</p>\n<ul>\n<li>nondegenerate</li>\n<li>invertible</li>\n</ul>\n<p>each of them in two guises, left and right.</p>\n<p>Explicitly, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mspace></mspace><mspace width=\"0.1111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333em\"/><mi>M</mi><mo>×</mo><mi>N</mi><mo>→</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">\\phi \\colon M \\times N \\to R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a bilinear form, nondegenerate means that the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>→</mo><mrow><mi mathvariant=\"normal\">H</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi>N</mi><mo separator=\"true\">,</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">M \\to \\mathrm{Hom}(N,R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Hom</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span> defined by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>↦</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>↦</mo><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m\\mapsto (n\\mapsto \\phi(m,n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span> is injective; and invertible means that is is an bijective. I can't tell for sure whether this is left or right, though.</p>",
        "id": 440238694,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1716433946
    },
    {
        "content": "<p>Mathlib has left/right separating as names for the injectivity statements</p>",
        "id": 440247718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716439626
    },
    {
        "content": "<p>In analysis I think people mostly use left/right separating</p>",
        "id": 440888490,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1716828003
    }
]