[
    {
        "content": "<p>Attempting to solve this goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">Set.Iio</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">atBot</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">tendsto_neg_atTop_iff</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">div_eq_inv_mul</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">div_neg</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.mul_atTop</span> <span class=\"n\">h'</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">tendsto_nhdsWithin_of_tendsto_nhds</span> <span class=\"bp\">?</span><span class=\"n\">hf.h</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"o\">⦃</span><span class=\"n\">U</span><span class=\"o\">⦄</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span>\n      <span class=\"n\">ring</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Filter.Tendsto.inv_tendsto_zero</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nhdsWithin</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.inf</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.mul</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.add</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">tendsto_neg</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">tendsto_const_nhds</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.add</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.add</span>\n          <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">sq</span><span class=\"o\">]</span>\n            <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.mul</span>\n            <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"o\">⦃</span><span class=\"n\">U</span><span class=\"o\">⦄</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n          <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"o\">⦃</span><span class=\"n\">U</span><span class=\"o\">⦄</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">tendsto_const_nhds</span>\n    <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">tendsto_principal_principal.mpr</span> <span class=\"bp\">?</span><span class=\"n\">h₂.a</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_Ioi</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n        <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h21'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n          <span class=\"k\">have</span> <span class=\"n\">h21''</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">neg_lt_iff_pos_add</span><span class=\"o\">]</span>\n          <span class=\"k\">calc</span>\n            <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>At the very end it gives me a strange, unintended statement in the infoview saying - 1 \\le  -2, but (-1/2)*2 should evaluate to -1. Why does this happen?</p>",
        "id": 433089342,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1713054044
    },
    {
        "content": "<p>Using the tactic \"norm_num\" instead of the last \"ring\" gives a goal of False as well.</p>",
        "id": 433089456,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1713054180
    },
    {
        "content": "<p>I believe it originates from how Lean handles stuff. If I put the following command into Lean:<br>\n<code>#eval (2)*(-1/2)</code><br>\nI obtain the -2 in the infoview. Can someone explain why?</p>",
        "id": 433089968,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1713054670
    },
    {
        "content": "<p>Oh wait nevermind. I figured it out. It's because Lean is evaluating (-1/2) as -1 because the 1 and 2 are int types.</p>",
        "id": 433090078,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1713054790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> has marked this topic as resolved.</p>",
        "id": 433090081,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713054793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> has marked this topic as unresolved.</p>",
        "id": 433108025,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713075717
    },
    {
        "content": "<p>Yes, this is a really annoying foot-gun, that division of number literals such as <code>-1 / 2</code> is interpreted as Nat or Int division by default (I've been bitten by that a good few times). I wonder if there's a way of switching this off?</p>\n<p>By the way, in your example you can get to the final goal rather more quickly as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">tendsto_principal_principal.mpr</span> <span class=\"bp\">?</span><span class=\"n\">h₂.a</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_Ioi</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mul_pos</span>\n      <span class=\"bp\">·</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- [proves 0 &lt; -x + 1]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">nlinarith</span> <span class=\"c1\">-- [proves 0 &lt; x ^ 2 + x + 1]</span>\n</code></pre></div>\n<p>It's a pity that the automated inequality tactics aren't quite strong enough to prove <code>0 &lt; (-x + 1) * (x ^ 2 + x + 1)</code> in one go.</p>",
        "id": 433109189,
        "sender_full_name": "David Loeffler",
        "timestamp": 1713076769
    },
    {
        "content": "<p>In Sage, one gets used to writing <code>QQ(1)/2</code>. What would be the equivalent in Lean?</p>",
        "id": 433118037,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713085330
    },
    {
        "content": "<p><code>(1/2 : ℚ)</code></p>",
        "id": 433118298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713085618
    },
    {
        "content": "<p>note that the type ascription should go on the outside because type inference mainly proceeds from outside in, unlike in Sage</p>",
        "id": 433118384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713085690
    },
    {
        "content": "<blockquote>\n<p>because type inference mainly proceeds from outside in</p>\n</blockquote>\n<p>Isn't this untrue in Lean 4 thanks to thinks like <code>binop%</code> and <code>HDiv</code>? Generally this is true, but for arithmetic operators the rule is reversed</p>",
        "id": 433120197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713087389
    },
    {
        "content": "<p>Which is often confusing, because <code>Finset.sum</code> is not considered an arithmetic operator, so the casting rules are not the same as they are for <code>+</code></p>",
        "id": 433120213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713087412
    },
    {
        "content": "<p>it's complicated</p>",
        "id": 433120319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713087492
    },
    {
        "content": "<p>but for the most basic case I would say that it is outside-in even for arithmetic operators:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"c1\">-- fun x y =&gt; ↑x + ↑y : Nat → Nat → Int</span>\n</code></pre></div>",
        "id": 433120374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713087583
    },
    {
        "content": "<p>Yeah, to first approximation it's outside-in, and it's wrong to say that \"the rule is reversed\".</p>\n<p>Basic operation: it locates the entire tree of arithmetic expressions (the ones that participate in the <code>binop%</code>/<code>unop%</code>/<code>rightact%</code>/etc protocol), elaborates each leaf without an expected type, computes a type that everything can coerce to (the \"maximal type\"), then drops coercions at the leaves wherever they're needed. Just like for the Lean 3 \"outside-in\" description, coercions are at the leaves, but unlike pure \"outside-in\", (1) leaves can influence the type of the entire expression and (2) coercions can't be dropped <em>inside</em> the leaves, since elaboration is already completed.</p>\n<p>If it weren't expensive, the way it could work instead is, rather than inserting coercions at leaves, is to re-elaborate each leaf with the computed maximal type. That would let the types propagate coercions deeper into subexpressions, like <code>Finset.sum</code>.</p>",
        "id": 433157307,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713121640
    },
    {
        "content": "<p>Maybe there's a more explicitly bidirectional elaboration algorithm for elaboration in general, where stage 1 calculates expected types (during which the <code>binop%</code>/etc. protocol figures out a maximal type to the best of its ability) and during stage 2 it elaborates with these computed expected types.</p>",
        "id": 433157538,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713121830
    },
    {
        "content": "<p>Kyle's explanation is hard for me to follow because I don't know what <code>binop%</code> is (is this something I should ever be typing as a user? Because I don't think I ever typed it). The lean 3 algorithm was very easy to understand and also very predictable. Now I can never predict, I just write some code and then inspect how it was elaborated.</p>",
        "id": 433159406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713123435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> That's definitely not meant to be an explanation for a general audience, but rather one for someone who's looked at definitions of <code>+</code>/<code>-</code>/etc. in the Init module and hasn't read the elaboration code for <code>binop%</code>, etc.</p>\n<p>Here's a quickly written introductory explanation (could be better, but hopefully it helps):</p>\n<p>Arithmetic operations (like <code>+</code>, <code>-</code>, <code>*</code>, <code>^</code>, etc.) are specially handled during elaboration. Entire arithmetic expressions are handled at once. Working with an example, <code>x + (y + 2) * f z</code> is an arithmetic expression with <em>leaf expressions</em> <code>x</code>, <code>y</code>, <code>2</code>, and <code>f z</code>. Recall that the elaboration process make use of an optional expected type (this expected type is only a hint, not a requirement). First, each leaf expression is elaborated <em>without</em> an expected type. Second, it figures out the <em>maximal type</em> for the whole arithmetic expression by combining its expected type along with the resulting types of each leaf expression -- it combines pairs of types by seeing which of the two can be coerced into the other. Third, it commits to this maximal type by inserting coercions at each leaf node when necessary.</p>\n<p>The purpose of this algorithm is that arithmetic operations are <em>heterogeneous</em> (they do not require both arguments to have the same type, and furthermore the result can have a type that's different from the arguments), and that means elaboration gets stuck in many common cases without hints (these inserted coercions). For example, <code>x + n</code> would fail with <code>x : Real</code> and <code>n : Nat</code> since it would look for a <code>HAdd Real Nat _</code> instance. Instead, the algorithm hints that it should use <code>(n : Nat) : Real</code>, and it finds the homogeneous <code>HAdd Real Real Real</code> instance.</p>",
        "id": 433160318,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713124418
    },
    {
        "content": "<p>You can also look at the source, which has <a href=\"https://github.com/leanprover/lean4/blob/1c20b5341956fb77fcf2c2601e64075e51d5f858/src/Lean/Elab/Extra.lean#L83\">module docs</a> and at RFC <a href=\"https://github.com/leanprover/lean4/pull/2854\">lean4#2854</a>, which has a partial explanation of this elaborator.</p>",
        "id": 433160494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713124570
    },
    {
        "content": "<p>But the key is that Lean 4 has <code>HAdd</code> rather than just <code>Add</code>, and that causes some issues, since it no longer can propagate the expected type toward the arguments.</p>\n<p>On the other hand, now there are certain Lean 3 issues that this new one <em>doesn't</em> have, in particular both <code>n + z</code> and <code>z + n</code> succeed in elaboration with <code>n : Nat</code> and <code>z : Int</code>. In Lean 3, the first would fail and the second would succeed, but now both succeed.</p>",
        "id": 433160535,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713124625
    },
    {
        "content": "<p>It still makes a difference performance-wise:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- 387</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- 44</span>\n<span class=\"k\">#check</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>As you can see from the trace, Lean spends some time in figuring out that there is no coercion from <code>ℤ</code> to <code>ℕ</code> in the first case...</p>",
        "id": 433167897,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713131441
    }
]