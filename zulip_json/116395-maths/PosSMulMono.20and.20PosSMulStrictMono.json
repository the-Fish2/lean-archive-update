[
    {
        "content": "<p>Among implication here<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/12613ba84831f5fad339756384c2779b07a1dc8d/Mathlib/Algebra/Order/Module/Defs.lean#L53\">https://github.com/leanprover-community/mathlib4/blob/12613ba84831f5fad339756384c2779b07a1dc8d/Mathlib/Algebra/Order/Module/Defs.lean#L53</a><br>\nI cannot find any path from <code>PosSMulMono</code> to <code>PosSMulStrictMono</code>.<br>\nIf I assume <code>NoZeroSMulDivisors</code> shouldn't <code>PosSMulMono</code> and <code>PosSMulStrictMono</code> be equivalent?<br>\nI'm not sure whether my brain is buggy or the list is incomplete.</p>",
        "id": 445174475,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718641728
    },
    {
        "content": "<p>You are right that this implication holds. I don't think it should be an instance though, as it would very clearly loop</p>",
        "id": 445214976,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718654699
    },
    {
        "content": "<p>Thanks for confirming!</p>\n<p>Should the section <code>## Implications</code> contain only the implications for which Mathlib provides an instance? Or can I add info about <code>PosSMulMono</code> -&gt; <code>PosSMulStrictMono</code> as well?</p>\n<p>BTW cannot the typeclass-inference algorithm perform graph search instead of tree search? Is it because, for some non-<code>Prop</code> classes, we need to infer multiple instances of the same type?</p>",
        "id": 445222755,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718657455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/PosSMulMono.20and.20PosSMulStrictMono/near/445222755\">said</a>:</p>\n<blockquote>\n<p>Should the section <code>## Implications</code> contain only the implications for which Mathlib provides an instance? Or can I add info about <code>PosSMulMono</code> -&gt; <code>PosSMulStrictMono</code> as well?</p>\n</blockquote>\n<p>You certainly should add information about non-instances</p>",
        "id": 445223168,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718657618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/PosSMulMono.20and.20PosSMulStrictMono/near/445222755\">said</a>:</p>\n<blockquote>\n<p>cannot the typeclass-inference algorithm perform graph search instead of tree search?</p>\n</blockquote>\n<p>It can, but it seems the current loop detection algorithm is quite lenient (hence loops when it should not)</p>",
        "id": 445223300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718657655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/PosSMulMono.20and.20PosSMulStrictMono/near/445223168\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/PosSMulMono.20and.20PosSMulStrictMono/near/445222755\">said</a>:</p>\n<blockquote>\n<p>Should the section <code>## Implications</code> contain only the implications for which Mathlib provides an instance? Or can I add info about <code>PosSMulMono</code> -&gt; <code>PosSMulStrictMono</code> as well?</p>\n</blockquote>\n<p>You certainly should add information about non-instances</p>\n</blockquote>\n<p>All right! I'm adding it to my TODO list with high priority.</p>",
        "id": 445223896,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718657921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/PosSMulMono.20and.20PosSMulStrictMono/near/445223300\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/PosSMulMono.20and.20PosSMulStrictMono/near/445222755\">said</a>:</p>\n<blockquote>\n<p>cannot the typeclass-inference algorithm perform graph search instead of tree search?</p>\n</blockquote>\n<p>It can, but it seems the current loop detection algorithm is quite lenient (hence loops when it should not)</p>\n</blockquote>\n<p>OK, I'll take it as a technical debt.</p>",
        "id": 445223950,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718657948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/PosSMulMono.20and.20PosSMulStrictMono/near/445223168\">said</a>:</p>\n<blockquote>\n<p>You certainly should add information about non-instances</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13931\">#13931</a></p>",
        "id": 445353112,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718716147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/PosSMulMono.20and.20PosSMulStrictMono/near/445223950\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/PosSMulMono.20and.20PosSMulStrictMono/near/445223300\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/PosSMulMono.20and.20PosSMulStrictMono/near/445222755\">said</a>:</p>\n<blockquote>\n<p>cannot the typeclass-inference algorithm perform graph search instead of tree search?</p>\n</blockquote>\n<p>It can, but it seems the current loop detection algorithm is quite lenient (hence loops when it should not)</p>\n</blockquote>\n<p>OK, I'll take it as a technical debt.</p>\n</blockquote>\n<p>This is <a href=\"#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/440371144\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Ways.20to.20speed.20up.20Mathlib/near/440371144</a>. It may also appear in any mixin even in the case of no loop.</p>",
        "id": 445362348,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1718718658
    }
]