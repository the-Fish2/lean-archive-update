[
    {
        "content": "<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X, Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> be spaces, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f: X \\to Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> be a map, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">F</mi><mo>⊆</mo><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathscr{F} \\subseteq \\mathcal{P}(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.836em;vertical-align:-0.136em;\"></span><span class=\"mord mathscr\" style=\"margin-right:0.13634em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> be a filter on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>. I am confused about three(?) different definitions of the pushforward filter <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mo>∗</mo></msub><mi mathvariant=\"script\">F</mi></mrow><annotation encoding=\"application/x-tex\">f_*\\mathscr{F}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8944em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1757em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathscr\" style=\"margin-right:0.13634em;\">F</span></span></span></span> I saw.</p>\n<p>In <a href=\"https://arxiv.org/pdf/1910.12320.pdf\">https://arxiv.org/pdf/1910.12320.pdf</a>, it defines <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mo>∗</mo></msub><mi mathvariant=\"script\">F</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>A</mi><mo>⊆</mo><mi>Y</mi><mo>:</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">f_*\\mathscr{F} = \\{A \\subseteq Y : f^{-1}(A) \\in \\mathscr{F}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8944em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1757em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathscr\" style=\"margin-right:0.13634em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathscr\" style=\"margin-right:0.13634em;\">F</span><span class=\"mclose\">}</span></span></span></span>.</p>\n<p>In Mathlib, it defines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n  <span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">F.sets</span>\n</code></pre></div>\n<p>Which is extremely confusing: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mo>∗</mo></msub><mi mathvariant=\"script\">F</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>S</mi><mo>↦</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_*\\mathscr{F} = (S \\mapsto f^{-1}(S))^{-1}(\\mathscr{F})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8944em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1757em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathscr\" style=\"margin-right:0.13634em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathscr\" style=\"margin-right:0.13634em;\">F</span><span class=\"mclose\">)</span></span></span></span>??</p>\n<p>In my naive mind, it should simply be defined as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mo>∗</mo></msub><mi mathvariant=\"script\">F</mi><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>⊆</mo><mi>Y</mi><mo>:</mo><mi>A</mi><mo>∈</mo><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">f_*\\mathscr{F} = f(\\mathscr{F}) = \\{f(A) \\subseteq Y : A \\in \\mathscr{F}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8944em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1757em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathscr\" style=\"margin-right:0.13634em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathscr\" style=\"margin-right:0.13634em;\">F</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathscr\" style=\"margin-right:0.13634em;\">F</span><span class=\"mclose\">}</span></span></span></span>, or in Lean language, simply <code>f ' F.sets</code>. What goes wrong?</p>",
        "id": 435140220,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713948231
    },
    {
        "content": "<p>Your definition is not a filter!</p>",
        "id": 435140629,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713948368
    },
    {
        "content": "<p>pawoegkapwoekhawkepap right. Can I take the filter closure of it then? (Is it then just equivalent)</p>",
        "id": 435140731,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713948418
    },
    {
        "content": "<p>I believe so. Try to prove it!</p>",
        "id": 435140785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713948438
    },
    {
        "content": "<p>Thanks &lt;3</p>",
        "id": 435140812,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713948450
    },
    {
        "content": "<p>I guess note for self and others stumbling here, the Mathlib definition and the paper definition is equivalent, because</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>A</mi><mo>:</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>A</mi><mo>:</mo><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">g</mi><mi mathvariant=\"normal\">e</mi></mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">g</mi><mi mathvariant=\"normal\">e</mi></mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\{A : f^{-1}(A) \\in \\mathscr{F}\\} = \\{A : (\\mathrm{preimage}(f))(A) \\in \\mathscr{F}\\} = (\\mathrm{preimage}(f))^{-1}(\\mathscr{F})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathscr\" style=\"margin-right:0.13634em;\">F</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathrm\">preimage</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">))</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathscr\" style=\"margin-right:0.13634em;\">F</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathrm\">preimage</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathscr\" style=\"margin-right:0.13634em;\">F</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>And I guess the advantage of Mathlib's definition is that it's purely set theoretical? It's just preimages and images of functions and that's way easy to deal within, rather than some ugly <code>filter</code> on <code>Y</code> that a naive implementation of the paper's definition would require.</p>",
        "id": 435142166,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713948889
    },
    {
        "content": "<p>It's not images, it's just preimages, which are much easier to work with than images (images have an \"exists\" in).</p>",
        "id": 435155551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713953268
    },
    {
        "content": "<p>Thanks! never noticed that</p>",
        "id": 435164750,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713957036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Confusing.20definition.20of.20filter.20pushforwards/near/435140785\">said</a>:</p>\n<blockquote>\n<p>I believe so. Try to prove it!</p>\n</blockquote>\n<p>It's either false or I can't prove it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">GenerateSets</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">F.sets</span><span class=\"o\">)</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h'</span> <span class=\"n\">h'</span> <span class=\"n\">S'</span> <span class=\"n\">T'</span> <span class=\"n\">hT'</span> <span class=\"n\">hST'</span> <span class=\"n\">S'</span> <span class=\"n\">S'</span> <span class=\"n\">T'</span> <span class=\"n\">hS'</span> <span class=\"n\">hT'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mem_image</span> <span class=\"bp\">..</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h'</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hy₁</span><span class=\"o\">,</span> <span class=\"n\">hy₂</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mem_image</span> <span class=\"bp\">..</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hy₂</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">sets_of_superset</span> <span class=\"n\">_</span> <span class=\"n\">hy₁</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">univ_mem</span>\n  <span class=\"bp\">·</span> <span class=\"n\">cases'</span> <span class=\"n\">subset_iff_ssubset_or_eq.mp</span> <span class=\"n\">hST'</span> <span class=\"k\">with</span> <span class=\"n\">h'</span> <span class=\"n\">h'</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">aux</span> <span class=\"n\">_</span> <span class=\"n\">hT'</span> <span class=\"c\">/-</span><span class=\"cm\"> well-foundedness problem -/</span>\n      <span class=\"n\">exact</span> <span class=\"n\">map.proof_1</span> <span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"n\">h'</span> <span class=\"n\">hST'</span>\n    <span class=\"bp\">·</span> <span class=\"n\">subst</span> <span class=\"n\">h'</span>\n      <span class=\"n\">exact</span> <span class=\"n\">S'</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I cannot prove the third and fourth case after inducting on <code>h</code>, because one constructor of GeneratingSet is given by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">superset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">GenerateSets</span> <span class=\"n\">g</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">GenerateSets</span> <span class=\"n\">g</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>Of which I cannot induct over since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">⊂</span></span></span></span> is not well-founded (I think that's the correct terminology). In other words, there exists (infinite) sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> where there exists an infinite decreasing chain of sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>⊃</mo><msub><mi>T</mi><mn>1</mn></msub><mo>⊃</mo><msub><mi>T</mi><mn>2</mn></msub><mo>⊃</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">T \\supset T_1 \\supset T_2 \\supset \\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.313em;\"></span><span class=\"minner\">⋯</span></span></span></span></p>",
        "id": 435203628,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713969095
    },
    {
        "content": "<p>(The other direction holds!)</p>",
        "id": 435203667,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713969106
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Filter.map_eq_generate_image_sets</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">generate</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"bp\">·</span> <span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">F.sets</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_generate_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"n\">image_mem_map</span> <span class=\"n\">hs</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_map</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">↦</span> <span class=\"n\">mem_generate_of_mem</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 435228564,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713975493
    },
    {
        "content": "<p>wtf <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I will take a look</p>",
        "id": 435228872,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713975598
    },
    {
        "content": "<p>I guess <code>Filter</code> are much more well-behaved than I thought and I should use more of its API :)</p>",
        "id": 435229139,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713975664
    },
    {
        "content": "<p>By the way, this isn't really the reason you should think of <code>Filter.map</code> as the generalization of the idea of the \"image\" of a set. The real reason is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.map_principal#doc\">docs#Filter.map_principal</a>.</p>",
        "id": 435229141,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713975665
    },
    {
        "content": "<p>And the reason we define <code>Filter.map</code> as we do, instead of via <code>Filter.generate</code> is for the reason Kevin mentioned: it's much easier to work with preimages than with images.</p>",
        "id": 435229363,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713975734
    },
    {
        "content": "<p>If you've never done it before, you should spend 10 minutes and prove that preimages commute with the usual set operations. Then see why some fail for images. This is an exercise I give all my students in introductory proof courses.</p>",
        "id": 435229559,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713975795
    },
    {
        "content": "<p>Is this what it means to be functorial? Or am I confusing this with other notions</p>",
        "id": 435229656,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713975830
    },
    {
        "content": "<p>There are some functors in play here, but my guess is you're probably confusing this with other contexts in which you've seen the word \"functorial\". This <a href=\"https://math.stackexchange.com/questions/915417/right-adjoint-to-the-inverse-image-functor\">Stack Exchange</a> post has a brief description of some of the relevant bits.</p>",
        "id": 435230423,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713976079
    },
    {
        "content": "<p>Do you know how to view any poset as a category?</p>",
        "id": 435230524,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713976115
    },
    {
        "content": "<p>Do you just treat set elements as objects and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\leq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span></span></span></span> as \"edges\" (morphisms)?</p>",
        "id": 435230641,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713976163
    },
    {
        "content": "<p>But yeah I'm not too familiar with category theory. It's on my TODO list... <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 435230691,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713976186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span> It occurred to me that this is really a statement about filter bases, and so we should have the API to prove it even more simply. And indeed we do!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">generate</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"bp\">·</span> <span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">F.sets</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">F.basis_sets.map</span> <span class=\"n\">f</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">eq_generate</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">generate</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">G.sets</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">G.basis_sets.comap</span> <span class=\"n\">f</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">eq_generate</span>\n</code></pre></div>",
        "id": 435237924,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713978938
    },
    {
        "content": "<p>I'm rapidly learning a huge amount of Filter API suddenly hahahaha</p>",
        "id": 435238168,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713979026
    },
    {
        "content": "<p>thanks</p>",
        "id": 435238172,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1713979027
    },
    {
        "content": "<p>Another way of looking at this is just that the statement that  <code>F = generate s</code> just means that the sets <code>s</code> form a filter basis for <code>F</code>.</p>",
        "id": 435238205,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713979046
    },
    {
        "content": "<p>which is just:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">HasBasis</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">F.sets</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">F.basis_sets.map</span> <span class=\"n\">f</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">HasBasis</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">G.sets</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">G.basis_sets.comap</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 435238616,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713979212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/Confusing.20definition.20of.20filter.20pushforwards/near/435238205\">said</a>:</p>\n<blockquote>\n<p>Another way of looking at this is just that the statement that  <code>F = generate s</code> just means that the sets <code>s</code> form a filter basis for <code>F</code>.</p>\n</blockquote>\n<p>Well, only when <code>s</code> is a filter basis. But indeed the general results are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.HasBasis.map#doc\">docs#Filter.HasBasis.map</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.HasBasis.comap#doc\">docs#Filter.HasBasis.comap</a></p>",
        "id": 435607684,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1714144962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Confusing.20definition.20of.20filter.20pushforwards/near/435607684\">said</a>:</p>\n<blockquote>\n<p>Well, only when <code>s</code> is a filter basis.</p>\n</blockquote>\n<p>Indeed, that's what I should have said.</p>",
        "id": 435627731,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714151410
    }
]