[
    {
        "content": "<p>Hello! I am trying to prove that if T is a closed subset of S and S is a closed subset of X. I suspect this has already been done, but I cannot find it. The real reason that I am trying to do this is because it illustrates what my real question is. Here is what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">closed_of_closed_implies_closed</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">↑</span><span class=\"n\">S</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Of course, this is not what I am supposed to do, since the second IsClosed T is supposed to assert that T : Set X is closed, but really it is saying that T : Set ↑S is closed (which is what the hypothesis says). From what I understand, a term of type Set ↑S  is a term of type Set X along with a proof that T \\subset S. I would like to know if there is some way to refer to the \"underlying\" term T : Set X, or more generally if I am going down the wrong path here.</p>",
        "id": 423169720,
        "sender_full_name": "Panagiotis Angelinos",
        "timestamp": 1708781221
    },
    {
        "content": "<p>so your question is \"what is the right return type\"?</p>",
        "id": 423170253,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708781630
    },
    {
        "content": "<p>you could possibly try making the arguments to the second <code>IsClosed T</code> more explicit, possibly along the lines of <code>@IsClosed X _ T</code>?</p>",
        "id": 423170404,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708781751
    },
    {
        "content": "<p>or possibly <code>@IsClosed X _ (T:Set X)</code>?</p>",
        "id": 423170570,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708781869
    },
    {
        "content": "<p>Sorry,  I am very new to this, and I don't know what you mean by \"return type\". The <code>@IsClosed</code> bit helped though, since there seems to have been some change in the tactics state. I'll see if I can make this work, thanks!</p>",
        "id": 423170830,
        "sender_full_name": "Panagiotis Angelinos",
        "timestamp": 1708782040
    },
    {
        "content": "<p>Well, this helped a lot! It seems to work, and in particular it helped me find the existing Lean code that proves it already! It also shows how to deal with my problem. Here's the code snippet for posterity.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">IsClosed.trans</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">isClosed_induced_iff.mp</span> <span class=\"n\">ht</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">hs'</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subtype.image_preimage_coe</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hs.inter</span> <span class=\"n\">hs'</span>\n</code></pre></div>",
        "id": 423171149,
        "sender_full_name": "Panagiotis Angelinos",
        "timestamp": 1708782299
    },
    {
        "content": "<p>For the record, it could be golfed down to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">IsClosed.trans'</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">hs.closedEmbedding_subtype_val.isClosedMap</span> <span class=\"n\">t</span> <span class=\"n\">ht</span>\n</code></pre></div>",
        "id": 423184272,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708791182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"693314\">Panagiotis Angelinos</span> <a href=\"#narrow/stream/116395-maths/topic/a.20closed.20subset.20of.20a.20closed.20subset.20is.20closed.20.28type.20problems.29/near/423169720\">said</a>:</p>\n<blockquote>\n<p>From what I understand, a term of type Set ↑S  is a term of type Set X along with a proof that T \\subset S.</p>\n</blockquote>\n<p>This is not correct.</p>",
        "id": 423188856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708794495
    },
    {
        "content": "<p>A term of type <code>↑S</code> is a term <code>x</code> of type <code>X</code> along with a proof that <code>x \\in S</code>, but this doesn't generalise to <code>Set ↑S</code>.</p>",
        "id": 423189273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708794852
    },
    {
        "content": "<p><code>x \\in S</code>, not <code>x \\in X</code>.</p>",
        "id": 423194385,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708799713
    },
    {
        "content": "<p>Fixed -- thanks</p>",
        "id": 423200119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708805111
    }
]