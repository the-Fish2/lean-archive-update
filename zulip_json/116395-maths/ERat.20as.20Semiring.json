[
    {
        "content": "<p>I want to define <code>ERat</code> (i.e., extended rational numbers) for my project (not for Mathlib).<br>\nAddition on <code>EReal</code> defined so that <code>⊥ + ⊤ = ⊤ + ⊥ = ⊥</code> in Mathlib.<br>\nWhat would go wrong if I defined addition on <code>ERat </code> so that <code>⊥ + ⊤ = ⊤ + ⊥ = 0</code> in my project?<br>\nI would like <code>ERat</code> to form a Semiring.<br>\nIt cannot be a Ring because it is not even a CancelAddCommMonoid.<br>\nIn my use case, I am not going to use <code>[-∞, ∞]</code>, only <code>(-∞, ∞]</code>.<br>\nHowever, the definition must be done for <code>[-∞, ∞]</code> because <code>(-∞, ∞]</code> would not even allow Mul.<br>\nSo I am going to do <code>[-∞, ∞]</code> and define multiplication the same way <code>EReal</code> does.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">ERat</span> <span class=\"bp\">→</span> <span class=\"n\">ERat</span> <span class=\"bp\">→</span> <span class=\"n\">ERat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⊥</span><span class=\"o\">,</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⊤</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⊥</span><span class=\"o\">,</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⊥</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⊥</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"bp\">⊥</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"bp\">⊤</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⊥</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⊤</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"bp\">⊤</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"bp\">⊥</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"bp\">⊤</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"bp\">⊥</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"bp\">⊥</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"bp\">⊤</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>My addition would also have to be defined manually, not using <code>deriving</code>.<br>\nI am not sure if something will go wrong.<br>\nCan you see a problem right away?<br>\nI will never define exponentiation&amp;friends on my <code>ERat</code>.</p>\n<p>TLDR:<br>\nI want to define <code>ERat</code> that forms a Semiring. Can it be done?<br>\nI think I should define <code>⊥ + ⊤ = ⊤ + ⊥ = 0</code>. Is there a catch?</p>",
        "id": 430756371,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712052762
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Semiring#doc\">docs#Semiring</a></p>",
        "id": 430756722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712052908
    },
    {
        "content": "<p>Why do you want <code>ERat</code>?</p>",
        "id": 430756872,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712052967
    },
    {
        "content": "<p>I can see a use for <code>ENNRat</code>, namely represent literals in <code>ENNReal</code>, but I can't see a use for <code>ERat</code>, just as I can't see a use for <code>EReal</code>.</p>",
        "id": 430756982,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712053011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430756872\">said</a>:</p>\n<blockquote>\n<p>Why do you want <code>ERat</code>?</p>\n</blockquote>\n<p>In one point, I want to take a common denominator of all finite values in my Mutliset.</p>",
        "id": 430757041,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712053035
    },
    {
        "content": "<p>Apparently semirings are associative. I highly doubt that <code> ⊥ + ⊤ = ⊤ + ⊥ = 0</code> can ever be made associative, because with your conventions <code>(⊥ + ⊤) + 37 = 37</code> but no sensible convention could have <code>⊥ + (⊤ + 37) = 37</code>. The philosophy that we have with EReal is that Top is \"error\" and Bot is \"even worse error\", and then associativity remains true because you can never go back from errors. If you want errors to add up to non-error answers then I suspect you're always going to have problems with associativity.</p>",
        "id": 430757140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712053074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430757140\">said</a>:</p>\n<blockquote>\n<p>Apparently semirings are associative. I highly doubt that <code> ⊥ + ⊤ = ⊤ + ⊥ = 0</code> can ever be made associative, because with your conventions <code>(⊥ + ⊤) + 37 = 37</code> but no sensible convention could have <code>⊥ + (⊤ + 37) = 37</code>. The philosophy that we have with EReal is that Top is \"error\" and Bot is \"even worse error\", and then associativity remains true because you can never go back from errors. If you want errors to add up to non-error answers then I suspect you're always going to have problems with associativity.</p>\n</blockquote>\n<p>Thank you for pointing out! I didn't notice!</p>",
        "id": 430757310,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712053126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430757041\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430756872\">said</a>:</p>\n<blockquote>\n<p>Why do you want <code>ERat</code>?</p>\n</blockquote>\n<p>In one point, I want to take a common denominator of all finite values in my Mutliset.</p>\n</blockquote>\n<p>How is that related to <code>ERat</code>? On what type is your multiset?</p>",
        "id": 430757802,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712053320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430757802\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430757041\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430756872\">said</a>:</p>\n<blockquote>\n<p>Why do you want <code>ERat</code>?</p>\n</blockquote>\n<p>In one point, I want to take a common denominator of all finite values in my Mutliset.</p>\n</blockquote>\n<p>How is that related to <code>ERat</code>? On what type is your multiset?</p>\n</blockquote>\n<p>Ah, sorry for confusion. I was answering why I wanted <code>ERat</code> at opposed to <code>EReal</code>. You probably wondered why I was using <code>ERat</code> as opposed to <code>ENNRat</code>. In the pen-and-paper version, the values in my multisets are rational with some infinities (always positive infinity, but finite values can be negative).</p>",
        "id": 430758503,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712053591
    },
    {
        "content": "<p>So what's the common denominator supposed to be?</p>",
        "id": 430758572,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712053623
    },
    {
        "content": "<p>Isn't it valued in <code>ℕ∞</code>?</p>",
        "id": 430758601,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712053634
    },
    {
        "content": "<p>Nope. Product of denominators of all finite values.</p>",
        "id": 430758658,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712053659
    },
    {
        "content": "<p>Can you give an example where it's not <code>ℕ∞</code>-valued?</p>",
        "id": 430758841,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712053711
    },
    {
        "content": "<p>I discussed the topic with my supervisor.<br>\nHere I write only a high-level summary of my use case...</p>\n<p>We need to perform these operations:<br>\n<code>A *ᵥ x</code> aka <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⋅</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">A \\cdot x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span><br>\n<code>c ⬝ᵥ x</code> aka <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>c</mi><mi mathvariant=\"normal\">⊤</mi></msup><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">c^\\top x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span></span></span></span><br>\nWe need to meet the following criteria:<br>\nThe possible values inside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> have to include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{ -1, 0, 1 \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>.<br>\nThe possible values inside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> have to include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> (-\\infty, \\infty] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span>.<br>\nThe possible values inside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> have to include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [0, 1] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>.<br>\nWe need to enforce that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> contains rational values only.<br>\nOrdering has to be defined in the same sense as in textbook math.</p>\n<p>Conclusion:</p>\n<p>For simplicity,<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> will have values in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> (-\\infty, \\infty) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span></span></span></span>,<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> will have values in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> [0, \\infty) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span></span></span></span>,<br>\nand so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⋅</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">A \\cdot x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> will have values in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> (-\\infty, \\infty) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span></span></span></span>.<br>\nThe only option is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> has values in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> (-\\infty, \\infty] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span>,<br>\ntherefore <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>c</mi><mi mathvariant=\"normal\">⊤</mi></msup><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">c^\\top x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">⊤</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span></span></span></span> will have values in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> (-\\infty, \\infty] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p>Everything will be expressed using (extended/restricted) rationals.<br>\nFor <code>A *ᵥ x</code> we will upgrade <code>x</code> to be over <code>ℚ</code> instead of over <code>NNRat</code>, so we can reuse the existing <code>*ᵥ</code> definition.<br>\nFor <code>c ⬝ᵥ x</code> we will have to write new definitions:<br>\nFirst we need a custom multiplication of type <code>WithTop ℚ → NNRat → WithTop ℚ</code>.<br>\nThen we define a custom dot product that uses the custom multiplication together with standard <code>+</code> on <code>WithTop ℚ</code>.<br>\nThen we rebuild API for our dot product.</p>\n<p>If you see any flaw in the plan above, please, point it out. I will be very thankful for it!</p>",
        "id": 430801683,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712067752
    },
    {
        "content": "<p>The other option is to define everything over <code>ERat</code> and separately prove that <code>c ⬝ᵥ x</code> will never be <code>⊥</code> in the settings above.<br>\nUnfortunately, I still need to rebuild a lot of API myself because <code>ERat</code> cannot even form <code>NonUnitalNonAssocSemiring</code>.</p>",
        "id": 430804257,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712068503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430756982\">said</a>:</p>\n<blockquote>\n<p>I can see a use for <code>ENNRat</code>, namely represent literals in <code>ENNReal</code>, but I can't see a use for <code>ERat</code>, just as I can't see a use for <code>EReal</code>.</p>\n</blockquote>\n<p>You need <code>EReal</code> when you want to take infima or suprema of arbitrary sets of real numbers (e.g., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LSeries.abscissaOfAbsConv#doc\">docs#LSeries.abscissaOfAbsConv</a> is naturally an <code>EReal</code>).</p>",
        "id": 430841823,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712079641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430756371\">said</a>:</p>\n<blockquote>\n<p>I think I should define <code>⊥ + ⊤ = ⊤ + ⊥ = 0</code>.</p>\n</blockquote>\n<p>It doesn't help at all!<br>\nWe get <code>0 = ⊥ + ⊤ = 2*⊥ + (-1)*⊥ ≠ (2 - 1) * ⊥ = 1 * ⊥ = ⊥</code> hence distributivity is dead.</p>",
        "id": 430848464,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712082018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430757140\">said</a>:</p>\n<blockquote>\n<p>Top is \"error\" and Bot is \"even worse error\"</p>\n</blockquote>\n<p>What you described is the semantics of <code>Option</code> that (2x) underlies the type <code>EReal</code> (I know that you know, but I still wanted to point it out).<br>\nHowever, the semantics of <code>EReal</code> is different because multiplication by <code>-1</code> gets you from one \"error\" to the other; therefore, I'd say there are two distinct special values rather than \"errors\".<br>\nI think <code>EReal</code> captures more of the concept of infinity and less of the concept of \"error\".</p>",
        "id": 430849944,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712082588
    },
    {
        "content": "<p>I think the point of addition on <code>EReal</code> is that it is defined precisely so that the natural exponential map from <code>EReal</code> to <code>ENNReal</code> is an additive-to-multiplicative isomorphism of monoids.</p>",
        "id": 430876863,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712093250
    },
    {
        "content": "<p>Is there a good reason why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.mulVec#doc\">docs#Matrix.mulVec</a> requires <code>[NonUnitalNonAssocSemiring α]</code> despite <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.dotProduct#doc\">docs#Matrix.dotProduct</a> requiring <code>[Mul α] [AddCommMonoid α]</code> only?</p>",
        "id": 430938921,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712130606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430938921\">said</a>:</p>\n<blockquote>\n<p>Is there a good reason why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.mulVec#doc\">docs#Matrix.mulVec</a> requires <code>[NonUnitalNonAssocSemiring α]</code> despite <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.dotProduct#doc\">docs#Matrix.dotProduct</a> requiring <code>[Mul α] [AddCommMonoid α]</code> only?</p>\n</blockquote>\n<p>Have you tried replacing the assumption and using Aesop/apply wherever the proof breaks? Writing something that actually systematically replaces every assumption by weaker assumptions and checking if the proof still holds up is on my to-do list, once I’ve worked through the meta-programming book.</p>",
        "id": 430944725,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712132466
    },
    {
        "content": "<p>What I've been doing this morning is to copy those definitions into my project, change it to <code>[Mul α] [AddCommMonoid α]</code> and reprove lemmas about \"matrix times vector\" on demand. It seems to work right now. However, if it is desirable to have the weaker assumptions in Mathlib, I can try to change it in place and PR the change to Mathlib.</p>",
        "id": 430946973,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712133180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430801683\">said</a>:</p>\n<blockquote>\n<p>We need to meet the following criteria:<br>\nThe possible values inside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> have to include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{ -1, 0, 1 \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>.<br>\nThe possible values inside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> have to include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> (-\\infty, \\infty] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span>.<br>\nThe possible values inside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> have to include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [0, 1] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>.</p>\n</blockquote>\n<p>Okay, but <em>why</em> do you need this?</p>",
        "id": 430952447,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712134575
    },
    {
        "content": "<p>There is a framework for constraint satisfaction&amp;optimization called General-Valued Constraint Satisfaction Problems that works with this setting:<br>\n<a href=\"/user_uploads/3121/_1vobE2JrBC3lYkZ-hTfBArQ/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/mspruwl5BUpMjad7ZlqxHZrp/image.png\">image.png</a><br>\nEssentially, infinity is a hard constraint and rational values are soft constraints that we want to minimize.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_1vobE2JrBC3lYkZ-hTfBArQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/_1vobE2JrBC3lYkZ-hTfBArQ/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/mspruwl5BUpMjad7ZlqxHZrp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/mspruwl5BUpMjad7ZlqxHZrp/image.png\"></a></div>",
        "id": 430953580,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712134879
    },
    {
        "content": "<p>Okay but do you actually need <em>algebra</em> on extended rationals?</p>",
        "id": 430953797,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712134930
    },
    {
        "content": "<p>Lean version: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Combinatorics/Optimization/ValuedCSP.html#ValuedCSP</a></p>",
        "id": 430953831,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712134938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430953797\">said</a>:</p>\n<blockquote>\n<p>Okay but do you actually need <em>algebra</em> on extended rationals?</p>\n</blockquote>\n<p>To simplify things. I want to say \"minimize this sum\" instead of \"make sure none of these values is infinity, then coerce them to rationals under the assumption, then minimize the sum\".</p>",
        "id": 430954258,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712135072
    },
    {
        "content": "<p>I strongly suspect you will find the latter approach less painful</p>",
        "id": 430954360,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712135105
    },
    {
        "content": "<p>Your current approach involves redoing most of mathlib's algebra library in the case you have some infinities lying around. The other approach only involves redefining what it means to minimise a goal.</p>",
        "id": 430954862,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712135230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430954862\">said</a>:</p>\n<blockquote>\n<p>Your current approach involves redoing most of mathlib's algebra library in the case you have some infinities lying around. The other approach only involves redefining what it means to minimise a goal.</p>\n</blockquote>\n<p>IMO \"minimize this sum\" is a nice abstraction that works on paper. I would like to make it work in Lean as well. Note that in VCSP theory there is never negative infinity and there is never a multiplication between a negative number and infinity. In theory I have an ill-defined structure because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> (-\\infty, \\infty] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> isn't closed under multiplication and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [-\\infty, \\infty] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> isn't distributive, but in practice it works as if it was a semiring because the \"dangerous\" operations are never performed. However, can it be formalized?</p>",
        "id": 430958769,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712136331
    },
    {
        "content": "<p>So you have values and you have weights, right?</p>",
        "id": 430959305,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712136494
    },
    {
        "content": "<p>Then can you try simply not having values and weights be in the same type?</p>",
        "id": 430959421,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712136530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430952447\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430801683\">said</a>:</p>\n<blockquote>\n<p>We need to meet the following criteria:<br>\nThe possible values inside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> have to include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{ -1, 0, 1 \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>.<br>\nThe possible values inside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> have to include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> (-\\infty, \\infty] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span>.<br>\nThe possible values inside <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> have to include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [0, 1] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>.</p>\n</blockquote>\n<p>Okay, but <em>why</em> do you need this?</p>\n</blockquote>\n<p>I want to define a pseudoLP as an abstraction that is faithfully translated to LP. I have non-negative variables and my objective function can have some infinities (but no negative infinities). It can be straightforwardly translated to LP (restrict variables that come with infinity coefficient to be zero and kick out the term out of the sum), but I want to perform all algebra over pseudoLP.</p>",
        "id": 430959713,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712136612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430959421\">said</a>:</p>\n<blockquote>\n<p>Then can you try simply not having values and weights be in the same type?</p>\n</blockquote>\n<p>This is what I've been considering here. For example <code>(A x : Rat)</code> and <code>(c : ERat)</code> could work but then <code>c ⬝ᵥ x</code> needs to be over <code>ERat</code> as well.</p>",
        "id": 430960198,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712136738
    },
    {
        "content": "<p>I want to reuse existing definitions of <code>A *ᵥ x</code> and <code>c ⬝ᵥ x</code> which kinda forces me to do everything over the same type and separately prove that negative infinities will never arise and so on.</p>",
        "id": 430960511,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712136832
    },
    {
        "content": "<p>Wait, I thought you didn't want to multiply infinities by negative values? So you can't possibly allow <code>(w : Rat) • (v : ERat)</code></p>",
        "id": 430960524,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712136835
    },
    {
        "content": "<p><code>(w : NNRat) • (v : ERat)</code> would be fine</p>",
        "id": 430960638,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712136862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430960524\">said</a>:</p>\n<blockquote>\n<p>Wait, I thought you didn't want to multiply infinities by negative values? So you can't possibly allow <code>(w : Rat) • (v : ERat)</code></p>\n</blockquote>\n<p>Yeah, I got it wrong. As per my older post, if I went in the heterogeneous direction, I'd probably declare <code>(x : NNRat)</code> and <code>(A : Matrix _ _ Rat)</code> and <code>(c : ERat)</code>.</p>",
        "id": 430960873,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712136946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430960638\">said</a>:</p>\n<blockquote>\n<p><code>(w : NNRat) • (v : ERat)</code> would be fine</p>\n</blockquote>\n<p>The problem is that the existing definition <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.dotProduct#doc\">docs#Matrix.dotProduct</a> doesn't allow mixing types, hence I consider doing it all over <code>ERat</code> and separately proving that <code>A *ᵥ x</code> is finite and that <code>c ⬝ᵥ x</code> is nonnegative (or at least does not contain negative infinity).</p>",
        "id": 430961309,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712137062
    },
    {
        "content": "<p>Okay but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.dotProduct#doc\">docs#Matrix.dotProduct</a> is a stupid wrapper for something more general, right? Why forcing you to use it?</p>",
        "id": 430961561,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712137112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430961561\">said</a>:</p>\n<blockquote>\n<p>Okay but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.dotProduct#doc\">docs#Matrix.dotProduct</a> is a stupid wrapper for something more general, right? Why forcing you to use it?</p>\n</blockquote>\n<p>Because there is a lot of API in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.dotProduct#doc\">docs#Matrix.dotProduct</a> and so on.</p>",
        "id": 430961731,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712137163
    },
    {
        "content": "<p>And because my pseudoLP is nicely readable despite of being ill-defined.</p>",
        "id": 430961910,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712137214
    },
    {
        "content": "<p>Again, non-problems</p>",
        "id": 430961963,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712137231
    },
    {
        "content": "<p>The \"lot of API in terms of <code>Matrix.dotProduct</code>\" is just a bunch of wrappers around <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum#doc\">docs#Finset.sum</a> lemmas</p>",
        "id": 430962046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712137256
    },
    {
        "content": "<p><code>∑ i, w i • v i</code> is all around in mathlib</p>",
        "id": 430962089,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712137273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430946973\">said</a>:</p>\n<blockquote>\n<p>However, if it is desirable to have the weaker assumptions in Mathlib, I can try to change it in place and PR the change to Mathlib.</p>\n</blockquote>\n<p>Should I take your <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> opinion as \"no\" regarding the potential refactor of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matric.mulVec#doc\">docs#Matric.mulVec</a> from <code>[NonUnitalNonAssocSemiring α]</code> to <code>[Mul α] [AddCommMonoid α]</code> as I was considering above?</p>",
        "id": 430964360,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712137941
    },
    {
        "content": "<p>That' s a \"no\" indeed, since what you seem to really want is not even that but rather <code>[SMul α β] [AddCommMonoid β]</code></p>",
        "id": 430964707,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712138032
    },
    {
        "content": "<p>If we forget about my use case for a minute, what is best for Mathlib?</p>",
        "id": 430964856,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712138071
    },
    {
        "content": "<p>Not have <code>Matric.mulVec</code> as a <code>def</code></p>",
        "id": 430965006,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712138116
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.dotProduct#doc\">docs#Matrix.dotProduct</a> uses <code>[Mul α] [AddCommMonoid α]</code> which is like halfway towards the general version.</p>",
        "id": 430965071,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712138140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430965006\">said</a>:</p>\n<blockquote>\n<p>Not have <code>Matric.mulVec</code> as a <code>def</code></p>\n</blockquote>\n<p>Would <code>Matric.mulVec</code> and <code>Matrix.dotProduct</code> be better as <code>abbrev</code>? Or not present in Mathlib at all?</p>",
        "id": 430965434,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712138237
    },
    {
        "content": "<p>As notation, I would say</p>",
        "id": 430965458,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712138248
    },
    {
        "content": "<p>Also, if you only use multiplication in particular cases , it may mean you require a module structure rather than a ring structure.</p>",
        "id": 430986458,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712145725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/ERat.20as.20Semiring/near/430938921\">said</a>:</p>\n<blockquote>\n<p>Is there a good reason why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.mulVec#doc\">docs#Matrix.mulVec</a> requires <code>[NonUnitalNonAssocSemiring α]</code> despite <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.dotProduct#doc\">docs#Matrix.dotProduct</a> requiring <code>[Mul α] [AddCommMonoid α]</code> only?</p>\n</blockquote>\n<p>I think it's just for conciseness; the second generality is pretty useless anyway, as the product isn't well-behaved at all</p>",
        "id": 431610830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712354461
    },
    {
        "content": "<p>Is the generality of <code>[NonUnitalNonAssocSemiring α]</code> as opposed to <code>[Semiring α]</code> useful?</p>\n<p>In any case, I redefined <code>Matrix.mulVec</code> and <code>Matrix.vecMul</code> locally so that they require only <code>[Mul α] [AddCommMonoid α]</code> in the same manner as <code>Matrix.dotProduct</code> does.</p>",
        "id": 433537390,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1713278224
    },
    {
        "content": "<p>Regarding non-unital semirings: sure. I'll want to consider matrices with entries in a (non-unital) C⋆-algebra acting on vectors of elements in that algebra. For example see: <a href=\"https://en.wikipedia.org/wiki/Hilbert_C*-module#C*-algebras\">https://en.wikipedia.org/wiki/Hilbert_C*-module#C*-algebras</a> (this doesn't mention the action of matrices, but you can imagine it's there).</p>",
        "id": 433549746,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713281408
    }
]