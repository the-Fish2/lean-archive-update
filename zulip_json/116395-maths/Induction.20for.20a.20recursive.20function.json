[
    {
        "content": "<p>Hi, I have a function defined like this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">condition</span> <span class=\"k\">then</span>\n       <span class=\"n\">output</span>\n    <span class=\"k\">else</span>\n       <span class=\"k\">let</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Rat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">c</span> <span class=\"n\">i</span>\n       <span class=\"n\">foo</span> <span class=\"n\">c'</span>\n</code></pre></div>\n<p>This terminates because at least one element is being set to 0 at every iteration and we started with n elements. When the ci's are all zero it actually satisfies <code>condition</code>.<br>\nI want to prove a theorem about <code>foo</code>. Say I already proved termination. Is there a theorem that would let me simply reason about the <code>output</code> with the assumption <code>condition</code> in the context because when it terminates, that's what is outputted?</p>",
        "id": 423232393,
        "sender_full_name": "Harun Khan",
        "timestamp": 1708837202
    },
    {
        "content": "<p>I don't think there is a general theorem for this because it requires an analysis of the whole function to see that all of the other return paths are recursive calls. Here is how you could prove a theorem like this in a simplified example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Output</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">condition</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">condition_zero</span> <span class=\"o\">:</span> <span class=\"n\">condition</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Output</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n   <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">condition</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n      <span class=\"n\">output</span> <span class=\"n\">n</span>\n   <span class=\"k\">else</span>\n      <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">condition_zero</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">n'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo_spec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">output</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">unfold</span> <span class=\"n\">foo</span>\n   <span class=\"n\">split</span>\n   <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n   <span class=\"bp\">·</span> <span class=\"c1\">-- In the `false` case, we appeal to `foo_spec` inductively, using the same termination argument used to define `foo`.</span>\n     <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">condition_zero</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">foo_spec</span> <span class=\"n\">n'</span>\n</code></pre></div>",
        "id": 423236049,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1708841051
    },
    {
        "content": "<p>Oh that's really nice! I see you index by <code>n</code>.</p>",
        "id": 423236197,
        "sender_full_name": "Harun Khan",
        "timestamp": 1708841258
    }
]