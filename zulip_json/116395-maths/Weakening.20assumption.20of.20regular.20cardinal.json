[
    {
        "content": "<p>Hi, I was wondering if it is possible to weaken the assumption <code>hc</code> in <code>`card_iUnion_lt_iff_forall_of_isRegular</code> in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Cofinality#doc\">docs#Cofinality</a>, to something like <code>(hc : ℵ₀ ≤ c) </code></p>\n<p>Phrased in terms of a MWE, I wish to replace <code>(hc : c.IsRegular)</code> in <code>card_iUnion_lt_iff_forall_of_isRegular</code> by a strictly weaker assumption (as weak as possible) in <code>card_iUnion_lt_iff_forall_of_isRegular2</code>. I'm certainly willing to assume <code>(hc : ℵ₀ ≤ c) </code></p>\n<p>This is the crucial element because of which I needed <code>Cardinal.IsRegular</code> in multiple occasions in <code>CardinalInterFilter</code> and I'm running into the same issue for <code>κ</code>-Lindelöf spaces,  so I wanted to ensure that this assumption is in fact minimal. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Cofinality</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Cardinal</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">card_iUnion_lt_iff_forall_of_isRegular</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c.IsRegular</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hι</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">ι</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">card_lt_of_card_iUnion_lt</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk_sUnion_le</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Cardinal.mul_lt_of_lt</span> <span class=\"n\">hc.aleph0_le</span>\n    <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">Cardinal.mk_range_le</span> <span class=\"n\">hι</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Cardinal.iSup_lt_of_isRegular</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">Cardinal.mk_range_le</span> <span class=\"n\">hι</span><span class=\"o\">)</span>\n  <span class=\"n\">simpa</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">card_iUnion_lt_iff_forall_of_isRegular2</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">ℵ₀</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hι</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">ι</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">card_lt_of_card_iUnion_lt</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">apply</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 432895682,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712925778
    },
    {
        "content": "<p>I'd just try to prove the statement from basic properties on cardinals : the cardinal of a union of ≤ c many sets of cardinalities ≤ c' is ≤ c * c'.</p>",
        "id": 433022826,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712991683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/116395-maths/topic/Weakening.20assumption.20of.20regular.20cardinal/near/433022826\">said</a>:</p>\n<blockquote>\n<p>I'd just try to prove the statement from basic properties on cardinals : the cardinal of a union of ≤ c many sets of cardinalities ≤ c' is ≤ c * c'.</p>\n</blockquote>\n<p>Yes, but how do I do pass from strict inequality to weak inequalities? That’d require finding some largest cardinal smaller than k. Is that possible/do we have this?</p>",
        "id": 433023061,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712991927
    },
    {
        "content": "<p>Yes the point is that we want a strict inequality</p>",
        "id": 433025023,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1712993890
    },
    {
        "content": "<p>The following works to go down to a lower cardinality, let me check if I can simplify the proof!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">small_card</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Exists.intro</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">partialOrder.proof_1</span> <span class=\"bp\">#↑</span><span class=\"n\">S</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hS</span>\n</code></pre></div>",
        "id": 433039850,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713007871
    },
    {
        "content": "<p>This lemma doesn’t help much since you could always take <code>k</code> to be the cardinal of <code>S</code>, right ?</p>",
        "id": 433041851,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1713009950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Weakening.20assumption.20of.20regular.20cardinal/near/433041851\">said</a>:</p>\n<blockquote>\n<p>This lemma doesn’t help much since you could always take <code>k</code> to be the cardinal of <code>S</code>, right ?</p>\n</blockquote>\n<p>Yes, that’s true, and I guess taking a supremum might be problematic…</p>",
        "id": 433042112,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713010090
    },
    {
        "content": "<p>I’m not super fluent with cardinal arithmetics, but thinking a bit about it, I think your original statement is <em>equivalent</em> to being regular, so I don’t see how you could get rid of the assumption</p>",
        "id": 433042120,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1713010105
    },
    {
        "content": "<p>yes, I think you are right. I guess I'll need to just accept that we repeatedly need that assumption in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11800\">#11800</a> (and the follow-up <a href=\"https://github.com/leanprover-community/mathlib4/pull/12087\">#12087</a> which I haven't put up for review yet) which is a pity, as it makes some instances impossible (as they would require this assumption).</p>",
        "id": 433042840,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713010912
    },
    {
        "content": "<p>Is this really an issue ? If so then you could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fact#doc\">docs#Fact</a> to make it instance-usable</p>",
        "id": 433044098,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1713012194
    },
    {
        "content": "<p>Thanks, I'll try that for <a href=\"https://github.com/leanprover-community/mathlib4/pull/12087\">#12087</a>, I don't think I've had to drop instances in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11800\">#11800</a> yet.</p>",
        "id": 433044234,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713012325
    },
    {
        "content": "<p>I've done this (= use Fact for instances) for <a href=\"https://github.com/leanprover-community/mathlib4/pull/12087\">#12087</a> now, I think that one is ready for review once <a href=\"https://github.com/leanprover-community/mathlib4/pull/11800\">#11800</a> merges!</p>",
        "id": 434518093,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1713632528
    }
]