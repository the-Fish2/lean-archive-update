[
    {
        "content": "<p>Do we have the kronecker symbol somewhere in mathlib (I mean, <code>δ R i j</code> which is equal to <code>(1 : R)</code> if <code>i = j</code>, and <code>(0 : R)</code> otherwise)?</p>",
        "id": 250102854,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1629456380
    },
    {
        "content": "<p>Pretty sure not. I was tempted to introduce it once but didn't have the enthusiasm to use it everywhere it could be.</p>",
        "id": 250103162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629456626
    },
    {
        "content": "<p>I am doing some elementary linear algebra with matrices, and it would prove pretty useful there!</p>",
        "id": 250103602,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1629457009
    },
    {
        "content": "<p>I think it's a great idea.</p>",
        "id": 250104050,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629457361
    },
    {
        "content": "<p>If we had square brackets to spare I'd love if we could just write <code>[P]</code> for <code>if P then 1 else 0</code>, and then write <code>[i = j]</code> for the Kronecker delta. Maybe that's too hard notationally.</p>",
        "id": 250104101,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629457423
    },
    {
        "content": "<p>But I would happily endorse introducing it somewhere, and leaving it to later to use in the rest of the library.</p>",
        "id": 250104117,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629457440
    },
    {
        "content": "<p>It's sometimes spelled using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.update\">docs#function.update</a>, <code>δ i j = function.update 0 i 1 j</code></p>",
        "id": 250104161,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629457446
    },
    {
        "content": "<p>Terse, but not super readable. :-)</p>",
        "id": 250104193,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629457498
    },
    {
        "content": "<p>I feel like if anything it could just be notation for <code>ite</code>, because there's enough API there</p>",
        "id": 250104225,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629457529
    },
    {
        "content": "<p>Or even <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.single\">docs#pi.single</a><code> i 1 j</code>, apparently</p>",
        "id": 250104240,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629457540
    },
    {
        "content": "<p>After reading this topic, I'm confused that I couldn't make any of the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> work in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">invalid universe level, ?u.2023 is not greater than 0</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">Function.update</span> <span class=\"mi\">0</span> <span class=\"n\">i</span> <span class=\"mi\">1</span> <span class=\"n\">j</span>\n\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  Pi.single i 1 j</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m.213 j : Type ?u.210</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  R : Type u_2</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">δ'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">i</span> <span class=\"mi\">1</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mapToOne</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  Pi.single i ?m.2610 j</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m.2582 j : Type ?u.2579</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  R : Type u_2</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">δ''</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">i</span> <span class=\"n\">mapToOne</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 439428073,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716114695
    },
    {
        "content": "<p>Signatures like <code>[(i : I) → Zero (f i)]</code> confuses me, I don't know how to make it happy.</p>",
        "id": 439428195,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716114825
    },
    {
        "content": "<p>It is also <code>Set.indicator {i} 1 j</code></p>",
        "id": 439428783,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1716115413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/116395-maths/topic/kronecker.20symbol/near/439428783\">said</a>:</p>\n<blockquote>\n<p>It is also <code>Set.indicator {i} 1 j</code></p>\n</blockquote>\n<p>Thanks, I'm getting this, but in this case one expects a computable version?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">failed to compile definition, consider marking it as 'noncomputable' because it depends on 'Set.indicator', and it does not have executable code</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">δ'''</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">Set.indicator</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"mi\">1</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 439429314,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716115961
    },
    {
        "content": "<p>The solution doesn't generalize to <a href=\"https://en.wikipedia.org/wiki/Kronecker_delta#generalized_Kronecker_delta\">the generalized Kronecker delta</a> too.</p>",
        "id": 439430907,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716117615
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 439431776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716118526
    },
    {
        "content": "<p>As does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">i</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 439431801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716118557
    },
    {
        "content": "<p>Ah, thanks, the fix seems to be in a similar spirit as <a href=\"#narrow/stream/113489-new-members/topic/Different.20behavior.20with.20identical.20types\">this topic</a>.</p>",
        "id": 439432019,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716118741
    }
]