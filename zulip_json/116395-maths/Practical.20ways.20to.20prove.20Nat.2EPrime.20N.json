[
    {
        "content": "<p>I'm thinking about finding practical ways to get Nat.Prime N (for N a given prime number) from a relatively small certificate of primality, and I'm not sure what the current state of the art is.</p>\n<p>I'm looking into trying to generate Nat.Prime N from a factorization of N-1 and primitive root, but just going to ask to see if anyone has other more practical (smaller certificates/more efficient verification) ideas.</p>\n<p>Other methods I have checked:<br>\n<code>norm_num</code> doesn't seem to work well for 3-digit primes, but I coded the following simple proof which basically does trial division up to the square root, which seems to work up to 4-digit primes.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">101</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.Prime</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">irreducible_iff.mpr</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hp</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"n\">generalizing</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hb</span> <span class=\"k\">else</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">Or.resolve_left</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"n\">mul_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_not_le</span> <span class=\"n\">ha</span><span class=\"o\">))</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_contra</span><span class=\"bp\">!</span> <span class=\"n\">hla</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_le_mul</span> <span class=\"n\">hla</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hla</span> <span class=\"n\">ha</span><span class=\"o\">),</span> <span class=\"n\">hp</span><span class=\"o\">]</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">a</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">repeat</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Dvd.intro</span> <span class=\"n\">b</span> <span class=\"n\">hp.symm</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 426083527,
        "sender_full_name": "Clarence Chew",
        "timestamp": 1710235263
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">101</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>just works.</p>",
        "id": 426085407,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710236043
    },
    {
        "content": "<p>Ah sorry, you want a better proof?</p>",
        "id": 426085480,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710236066
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">408643</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>still works on my computer</p>",
        "id": 426085613,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710236129
    },
    {
        "content": "<p>I have a working but unpolished implementation of automatic generation and verification of pratt certificates here: <a href=\"https://github.com/leanprover-community/mathlib4/blob/6439ce3f194a2acd309af6831d753e560c46bcf6/Mathlib/NumberTheory/LucasPrimality.lean#L567\">https://github.com/leanprover-community/mathlib4/blob/6439ce3f194a2acd309af6831d753e560c46bcf6/Mathlib/NumberTheory/LucasPrimality.lean#L567</a></p>",
        "id": 426085762,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1710236186
    },
    {
        "content": "<p>Strange, oh well, guess I didn't do my testing properly. The limit on my computer seems to be between 6 and 7 digits.</p>",
        "id": 426107081,
        "sender_full_name": "Clarence Chew",
        "timestamp": 1710244015
    },
    {
        "content": "<p>That aside, thanks for the reference to Pratt certificates.</p>",
        "id": 426110442,
        "sender_full_name": "Clarence Chew",
        "timestamp": 1710245235
    }
]