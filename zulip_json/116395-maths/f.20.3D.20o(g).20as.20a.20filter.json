[
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>: I want to have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">‚Ñú</mi><mi>z</mi><mo>‚Üí</mo><mo>+</mo><mi mathvariant=\"normal\">‚àû</mi></mrow><annotation encoding=\"application/x-tex\">\\Re z \\to +\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">‚Ñú</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span><span class=\"mord\">‚àû</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">‚Ñë</mi><mi>z</mi><mo>=</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">‚Ñú</mi><mi>z</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Im z =o((\\Re z)^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">‚Ñë</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">((</span><span class=\"mord\">‚Ñú</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> as a filter. Clearly, it's <code>comap re atTop ‚äì l</code> for some <code>l</code>. To define <code>l</code>, I have two choices:</p>\n<ul>\n<li>define <code>Filter.isLittleO : Filter (‚Ñù √ó ‚Ñù)</code> as <code>‚®Ö c &gt; 0, ùìü  {(x, y) | abs x ‚â§ c * abs y}</code> and take <code>comap</code> under <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">‚Ñú</mi><mi>z</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">‚Ñë</mi><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(z)=((\\Re z)^2, \\Im z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">‚Ñú</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">‚Ñë</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">‚Ñú</mi><mi>z</mi><mo separator=\"true\">,</mo><msqrt><mrow><mi mathvariant=\"normal\">‚à£</mi><mi mathvariant=\"normal\">‚Ñë</mi><mi>z</mi><mi mathvariant=\"normal\">‚à£</mi></mrow></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(z)=(\\Re z, \\sqrt{|\\Im z|})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.24em;vertical-align:-0.305em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">‚Ñú</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.935em;\"><span class=\"svg-align\" style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\">‚à£‚Ñë</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">‚à£</span></span></span><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.28em\" viewBox=\"0 0 400000 1296\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.305em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>;</li>\n<li>define <code>Filter.isLittleO (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) : Filter Œ±</code> as <code>‚®Ö c &gt; 0, ùìü  {(x, y) | ‚Äñf x‚Äñ ‚â§ c * ‚Äñg y‚Äñ}</code></li>\n</ul>\n<p>With the first approach, I get 1 filter (and use <code>comap</code> if needed). With the second approach, I get a family of filters indexed by <code>Œ±</code>, <code>f</code>, and <code>g</code>. What would you recommend?</p>",
        "id": 439140127,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715916617
    },
    {
        "content": "<p>I would tend towards the second option for usability, but I'm not sure how strong that argument is</p>",
        "id": 439153684,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1715924571
    },
    {
        "content": "<p>I would tend to something like the first one, but would consider 1) having it for topological fields or rings, 2) removing absolute values, 3) passing through a o(1) filter if possible.</p>",
        "id": 439155831,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715925942
    },
    {
        "content": "<p>What exactly do you suggest?</p>",
        "id": 439155949,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715925986
    },
    {
        "content": "<p>Comap the o(1) by Im(z)/Re(z¬≤), for example</p>",
        "id": 439161681,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715928690
    },
    {
        "content": "<p>I want to avoid division.</p>",
        "id": 439163742,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715929533
    },
    {
        "content": "<p>Otherwise I would comap <code>nhds 0</code></p>",
        "id": 439163762,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715929542
    },
    {
        "content": "<p>OTOH, I can do exactly this for my goal, and postpone adding a more general definition until someone needs it.</p>",
        "id": 439163897,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715929592
    },
    {
        "content": "<p>I mean, define the filter as <code>comap (fun z =&gt; im z / (re z) ^ 2) (nhds 0)</code>. Since I have <code>re z -&gt; ‚àû</code> anyway, it doesn't make any difference.</p>",
        "id": 439164031,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715929649
    }
]