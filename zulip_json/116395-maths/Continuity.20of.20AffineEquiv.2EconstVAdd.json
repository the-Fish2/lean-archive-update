[
    {
        "content": "<p>I'd like to construct a bi-continuous affine equivalence from <code>constVAdd</code>, but am stuck at proving continuity. The root cause seems to me that <code>constVAdd</code> is defined in terms of <code>VAdd</code>, whereas usual continuity statements are for standard addition. Any ideas how to bridge that gap?</p>\n<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ContinuousAffineEquiv.foo</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">P₁</span> <span class=\"n\">V₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">V₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddTorsor</span> <span class=\"n\">V₁</span> <span class=\"n\">P₁</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">P₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">V₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousAdd</span> <span class=\"n\">V₁</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V₁</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">AffineEquiv.constVAdd</span> <span class=\"n\">k</span> <span class=\"n\">P₁</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- this is the standard proof, used e.g. in `Homeomorph.add_Left v`</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Continuous.add</span> <span class=\"o\">(</span><span class=\"n\">continuous_const</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"n\">continuous_id</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"k\">show</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">v</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">x</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 426202523,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710273556
    },
    {
        "content": "<p>Broader context, to un-#xy: <code>AmpleSet.lean</code> in sphere-eversion defines what an \"ample\" subset of e.g. a real vector space is. This includes two lemmas, about ample sets being invariant under <code>ContinuousLinearEquiv</code>s and affine translations. Proving invariant under continuous affine equivalences generalises and unifies both --- this requires showing <code>constVAdd</code> induces a continuous affine equivalence.</p>",
        "id": 426202528,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710273560
    },
    {
        "content": "<p>Are you looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=continuous_const_vadd_iff#doc\">docs#continuous_const_vadd_iff</a> ?</p>",
        "id": 426210474,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710276800
    },
    {
        "content": "<p>You definitely need some hypothesis about the topology on the torsor for this to be true; the MWE above gives the torsor a completely arbitrary topology that might be unrelated to the addition operation or to the topology on the module. (A <code>NormedAddTorsor</code> certainly has good enough topological properties but is also stronger than needed for them.)</p>",
        "id": 426239623,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1710292517
    },
    {
        "content": "<p>We have a class for exactly this: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousConstVAdd#doc\">docs#ContinuousConstVAdd</a></p>",
        "id": 426245853,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710295966
    },
    {
        "content": "<p>Thank you for the input; this was exactly what I needed!</p>",
        "id": 426393111,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710351086
    }
]