[
    {
        "content": "<p>Here is my first attempt at writing an <code>#adaptation_note</code> command. Since we basically want to</p>\n<ul>\n<li>record a free form comment</li>\n<li>make sure that there are no typos in the keyword \"adaptation_note\"<br>\nI think the implementation can be very simple.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#adaptation_note \"</span> <span class=\"n\">str</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"bp\">#</span><span class=\"n\">adaptation_note</span> <span class=\"s2\">\"This is a test\"</span>\n</code></pre></div>",
        "id": 436277013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714485207
    },
    {
        "content": "<p>If we want to leave this in after a version bump, I think we want a term elaborator and a tactic elaborator too</p>",
        "id": 436278724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714485693
    },
    {
        "content": "<p>Aah, good point</p>",
        "id": 436279092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714485777
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#adaptation_note \"</span> <span class=\"n\">str</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#adaptation_note \"</span> <span class=\"n\">str</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"EOF\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#adaptation_note \"</span> <span class=\"n\">str</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"bp\">#</span><span class=\"n\">adaptation_note</span> <span class=\"s2\">\"This is a test\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">#</span><span class=\"n\">adaptation_note</span> <span class=\"s2\">\"This is a test\"</span> <span class=\"n\">EOF</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">#</span><span class=\"n\">adaptation_note</span> <span class=\"s2\">\"This is a test\"</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 436280509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714486181
    },
    {
        "content": "<p>How do I get rid of the <code>EOF</code> hack?</p>",
        "id": 436280544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714486191
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#adaptation_note \"</span> <span class=\"n\">str</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#adaptation_note \"</span> <span class=\"n\">str</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"n\">ppLine</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#adaptation_note \"</span> <span class=\"n\">str</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"bp\">#</span><span class=\"n\">adaptation_note</span> <span class=\"s2\">\"This is a test\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">#</span><span class=\"n\">adaptation_note</span> <span class=\"s2\">\"This is a test\"</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">#</span><span class=\"n\">adaptation_note</span> <span class=\"s2\">\"This is a test\"</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 436280784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714486250
    },
    {
        "content": "<p>You don't need to parse a <code>term</code></p>",
        "id": 436280807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714486261
    },
    {
        "content": "<p>What do you mean by that?</p>",
        "id": 436280908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714486288
    },
    {
        "content": "<p>Ooh, you mean that you are using the <code>str</code> syntax category</p>",
        "id": 436281223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714486378
    },
    {
        "content": "<p>Good!</p>",
        "id": 436281247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714486384
    },
    {
        "content": "<p>Should every adaptation note be linked to an issue (cc <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span>)?</p>",
        "id": 436282011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714486598
    },
    {
        "content": "<p>It would be neat to make this work as <code>#adaptation_note /- This is a test -/</code></p>",
        "id": 436286952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714488005
    },
    {
        "content": "<p>Are comments a syntax category? (Not at lean atm)</p>",
        "id": 436287427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714488157
    },
    {
        "content": "<p>I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Command</span>\n<span class=\"kd\">@[</span><span class=\"n\">command_parser</span><span class=\"o\">,</span> <span class=\"n\">tactic_parser</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">adaptationNote</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span>\n  <span class=\"s2\">\"#adaptation_note\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"n\">withAntiquot</span> <span class=\"o\">(</span><span class=\"n\">mkAntiquot</span> <span class=\"s2\">\"comment\"</span> <span class=\"bp\">`</span><span class=\"n\">comment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"s2\">\"/-\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">commentBody</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\"-/\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it didn't quite work. <code>docComment</code> certainly is, which maybe is easier</p>",
        "id": 436288936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714488564
    },
    {
        "content": "<p>Here's a hack: use the trailing whitespace that's part of the syntax!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">registerTraceClass</span> <span class=\"bp\">`</span><span class=\"n\">adaptationNote</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"#adaptation_note\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">original</span> <span class=\"o\">(</span><span class=\"n\">trailing</span> <span class=\"o\">:=</span> <span class=\"n\">trailing</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"o\">:=</span> <span class=\"n\">tk.getTailInfo</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Could not extract trailing text\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">trailing</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">trailing.splitOn</span> <span class=\"s2\">\"/-\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Could not find '/-' after command\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">trailing</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">trailing.splitOn</span> <span class=\"s2\">\"-/\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Could not find '-/' after command\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">trailing</span> <span class=\"o\">:=</span> <span class=\"n\">trailing</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">dropWhile</span> <span class=\"n\">Char.isWhitespace</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">dropRightWhile</span> <span class=\"n\">Char.isWhitespace</span>\n  <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">adaptationNote</span><span class=\"o\">]</span> <span class=\"s2\">\"Adaptation note: {trailing}\"</span>\n</code></pre></div>\n<p>Then, importing this (which you need to do to activate the trace class)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.adaptationNote</span> <span class=\"n\">true</span>\n\n<span class=\"sd\">/-- info: [adaptationNote] Adaptation note: hi -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">adaptation_note</span> <span class=\"c\">/-</span><span class=\"cm\"> hi -/</span>\n</code></pre></div>",
        "id": 436295844,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714490294
    },
    {
        "content": "<p>Can you easily adapt that to a tactic and term elab as well?</p>",
        "id": 436313341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714495377
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">registerTraceClass</span> <span class=\"bp\">`</span><span class=\"n\">adaptationNote</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">commentBody</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Substring</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Substring</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">s</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s.splitOn</span> <span class=\"s2\">\"/-\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s.splitOn</span> <span class=\"s2\">\"-/\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">return</span> <span class=\"n\">s.trim</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getTailCommentBody</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">original</span> <span class=\"o\">(</span><span class=\"n\">trailing</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"o\">:=</span> <span class=\"n\">stx.getTailInfo</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">commentBody</span><span class=\"bp\">?</span> <span class=\"n\">s</span>\n  <span class=\"n\">return</span> <span class=\"n\">b.toString</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reportAdaptationNote</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Meta.Tactic.TryThis.Suggestion</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">getTailCommentBody</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"n\">stx0'</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">updateTrailing</span> <span class=\"s2\">\"/- comment -/\"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span>\n      <span class=\"k\">let</span> <span class=\"n\">stx'</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">stx.setArg</span> <span class=\"mi\">0</span> <span class=\"n\">stx0'</span><span class=\"o\">)</span>\n      <span class=\"n\">Meta.Tactic.TryThis.addSuggestion</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"n\">stx'</span> <span class=\"o\">(</span><span class=\"n\">origSpan</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span>\n      <span class=\"n\">throwError</span> <span class=\"s2\">\"Must be followed by a /- comment -/\"</span>\n  <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">adaptationNote</span><span class=\"o\">]</span> <span class=\"s2\">\"{b}\"</span>\n  <span class=\"n\">return</span>\n\n<span class=\"sd\">/-- Command version of it -/</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#adaptation_note\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">reportAdaptationNote</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">command</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- Tactic version of it -/</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#adaptation_note\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">reportAdaptationNote</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- Term version of it -/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">adaptationNoteTermStx</span><span class=\"o\">)</span> <span class=\"s2\">\"#adaptation_note\"</span> <span class=\"n\">ppSpace</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">term_elab</span> <span class=\"n\">adaptationNoteTermStx</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">adaptationNoteTermElab</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Term.TermElab</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">adaptation_note</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">reportAdaptationNote</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">))</span>\n    <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.throwUnsupportedSyntax</span>\n</code></pre></div>\n</div></div>",
        "id": 436358828,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714513440
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">adaptation_note</span>  <span class=\"c\">/-</span><span class=\"cm\"> comment -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">#</span><span class=\"n\">adaptation_note</span>  <span class=\"c\">/-</span><span class=\"cm\"> comment -/</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">#</span><span class=\"n\">adaptation_note</span>  <span class=\"c\">/-</span><span class=\"cm\"> comment -/</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 436358917,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714513477
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/PV08OvVY4YJLFxfZCE4BM_9j/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/s9kRm_wF0v5HrnVrnxAkuOeu/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/__sxVSZTqcVSOJFVg3g8JsoC/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PV08OvVY4YJLFxfZCE4BM_9j/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/PV08OvVY4YJLFxfZCE4BM_9j/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/s9kRm_wF0v5HrnVrnxAkuOeu/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/s9kRm_wF0v5HrnVrnxAkuOeu/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/__sxVSZTqcVSOJFVg3g8JsoC/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/__sxVSZTqcVSOJFVg3g8JsoC/image.png\"></a></div>",
        "id": 436359014,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714513540
    },
    {
        "content": "<p><code>#adaptation_note</code> could alternatively take an actual <code>docstring</code>, rather than a comment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#adaptation_note\"</span> <span class=\"n\">Lean.Parser.Command.docComment</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span>\n\n<span class=\"bp\">#</span><span class=\"n\">adaptation_note</span> <span class=\"sd\">/-- hi -/</span>\n</code></pre></div>",
        "id": 436362205,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714515170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/428973-nightly-testing/topic/.23adaptation_note/near/436282011\">said</a>:</p>\n<blockquote>\n<p>Should every adaptation note be linked to an issue (cc <span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span>)?</p>\n</blockquote>\n<p>Yes, but:</p>\n<ul>\n<li>sometimes the right course of action is instead to delete the adaptation note (some are non-actionable, and just record changes that we aren't going to undo)</li>\n</ul>",
        "id": 436365604,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714517070
    },
    {
        "content": "<p>I like this #adaptation_note stuff, but I'm not going to treat it as a blocker for merging or making releases: we can always switch over on <code>master</code> if need be.</p>",
        "id": 436365658,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714517113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> thanks! Do you want to pr, or shall I do it?</p>",
        "id": 436421175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714536521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> the downside is that it's less uniform and harder to copy-paste/move around between the command version and the tactic version</p>",
        "id": 436423370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714536587
    },
    {
        "content": "<p>Btw, we should test that multiline comments work</p>",
        "id": 436424406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714536617
    },
    {
        "content": "<p>Multiline comments should work</p>",
        "id": 436491051,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714566326
    },
    {
        "content": "<p>If you want a docstring version of all of them, there's this too:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">registerTraceClass</span> <span class=\"bp\">`</span><span class=\"n\">adaptationNote</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reportAdaptationNote</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Meta.Tactic.TryThis.Suggestion</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">doc</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getOptional</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n    <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">adaptationNote</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Lean.TSyntax.getDocString</span> <span class=\"o\">⟨</span><span class=\"n\">doc</span><span class=\"o\">⟩)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">logError</span> <span class=\"s2\">\"Must be followed by a /-- comment -/\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">trailing</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">original</span> <span class=\"o\">(</span><span class=\"n\">trailing</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">..</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getTailInfo</span> <span class=\"k\">then</span> <span class=\"n\">s</span> <span class=\"k\">else</span> <span class=\"n\">default</span>\n    <span class=\"k\">let</span> <span class=\"n\">doc</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.node2</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Command.docComment</span> <span class=\"o\">(</span><span class=\"n\">mkAtom</span> <span class=\"s2\">\"/--\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkAtom</span> <span class=\"s2\">\"comment -/\"</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- Optional: copy the original whitespace after the `#adaptation_note` token to after the docstring comment</span>\n    <span class=\"k\">let</span> <span class=\"n\">doc</span> <span class=\"o\">:=</span> <span class=\"n\">doc.updateTrailing</span> <span class=\"n\">trailing</span>\n    <span class=\"k\">let</span> <span class=\"n\">stx'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">stx'</span> <span class=\"o\">:=</span> <span class=\"n\">stx'.setArg</span> <span class=\"mi\">0</span> <span class=\"n\">stx'</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">unsetTrailing</span>\n    <span class=\"k\">let</span> <span class=\"n\">stx'</span> <span class=\"o\">:=</span> <span class=\"n\">stx'.setArg</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">mkNullNode</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">doc</span><span class=\"o\">])</span>\n    <span class=\"n\">Meta.Tactic.TryThis.addSuggestion</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">stx'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">origSpan</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Command version of it -/</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#adaptation_note \"</span> <span class=\"o\">(</span><span class=\"n\">docComment</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">reportAdaptationNote</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- Tactic version of it -/</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#adaptation_note \"</span> <span class=\"o\">(</span><span class=\"n\">docComment</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">reportAdaptationNote</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- Term version of it -/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">adaptationNoteTermStx</span><span class=\"o\">)</span> <span class=\"s2\">\"#adaptation_note \"</span> <span class=\"o\">(</span><span class=\"n\">docComment</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">term_elab</span> <span class=\"n\">adaptationNoteTermStx</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">adaptationNoteTermElab</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Term.TermElab</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">adaptation_note</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">reportAdaptationNote</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">))</span>\n    <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.throwUnsupportedSyntax</span>\n</code></pre></div>\n</div></div>",
        "id": 436491075,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714566346
    },
    {
        "content": "<p>Thanks. PR'd as</p>\n<blockquote>\n<p>chore(Tactic): command/tactic/term elaborator for adaptation notes <a href=\"https://github.com/leanprover-community/mathlib4/pull/12662\">#12662</a></p>\n</blockquote>",
        "id": 437046951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714851758
    },
    {
        "content": "<p>I just went through mathlib and switched all current adaptation notes to the new command.<br>\nI did not try to audit if all changes are still needed. PRs as a dependency on <a href=\"https://github.com/leanprover-community/mathlib4/pull/12662\">#12662</a>.</p>",
        "id": 437098180,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714903191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> Thanks for that! I just kicked <a href=\"https://github.com/leanprover-community/mathlib4/pull/12662\">#12662</a> on the queue</p>",
        "id": 437201994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714977316
    },
    {
        "content": "<p>And I just sent the replacement PR to bors.</p>",
        "id": 437223080,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714986538
    }
]