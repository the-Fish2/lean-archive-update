[
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2793\">lean#2793</a> fixes <a href=\"https://github.com/leanprover/lean4/pull/2736\">lean#2736</a>, a bug reported a while back by <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>.</p>\n<p>The change means that <code>rw [f]</code> is now interpreted as <code>rw [@f]</code>, and this means makes inference of implicit arguments slightly weaker.</p>\n<p>All through the linear algebra library we find errors like \"can't synthesize <code>Ring ?R</code>\", and we solve this by changing <code>rw [my_lemma]</code> to either <code>rw [my_lemma ..]</code> (which effectively restores the old behaviour) or <code>rw [my_lemma (R := R)]</code> (which is presumably what people encountering this error will do!)</p>\n<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/8076\">#8076</a> for the Mathlib diff.</p>\n<p>I would like to feedback about how we think Mathlib users will cope with this change.</p>\n<p>Secondarily, I'm happy to hear opinions on whether I should fix these errors as <code>rw [my_lemma ..]</code> or <code>rw [my_lemma (R := R)]</code>.</p>\n<p>The baseline plan is to merge this as is.</p>",
        "id": 446378108,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719123472
    },
    {
        "content": "<p>Changing to <code>rw [(my_lemma)]</code> presumably also fixes this?</p>",
        "id": 446378735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719124025
    },
    {
        "content": "<p>That was the approach we used during the port to fix <code>simp</code>. I think we finally eliminated the last of these <code>()</code>s in <code>simp</code> /<code>simp_rw</code> after a recent lean bump, so it feels like a bit of a shame for this behavior to reappear elsewhere</p>",
        "id": 446379287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719124467
    },
    {
        "content": "<p>Perhaps I'm missing something, but it appears this doesn't fix the root cause as described by <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2736\">#2736</a>? I'm also curious why the example as I reported it succeeds with this change, but the <code>rw [my_lemma]</code> example fails?</p>",
        "id": 446389425,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719130713
    },
    {
        "content": "<p>I think the <code>rw [(my_lemma)]</code> looks really awful and hard to explain to beginners.</p>",
        "id": 446419918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1719150033
    },
    {
        "content": "<p>I'm not sure <code>rw [my_lemma ..]</code> is any better, especially in the cases where the number of <code>_</code>s inserted by the <code>..</code> is zero</p>",
        "id": 446436442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719158936
    },
    {
        "content": "<p>There's already precedent for the <code>(my_lemma)</code> weirdness in <code>#check (my_lemma)</code></p>",
        "id": 446436683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719159012
    },
    {
        "content": "<p>(I should probably tweak my comment on <a href=\"https://github.com/leanprover/lean4/pull/2736\">lean4#2736</a>: this isn’t <em>necessarily</em> an “issue with” typeclass synthesis in elaboration per se, but is at least an issue <em>arising from</em> how ordinary typeclass synthesis is used in <code>rw</code>.)</p>\n<p>I feel like handling of typeclass instance arguments in <code>rw</code> along the lines of “synthesize if we can, but if we can’t, don’t error and instead try to obtain the instance arguments by unification with rewritten subexpressions” might be the best of both worlds. (E.g. some sort of <code>Term.withMaybeSynthesizing</code> combinator, after not insisting on synthesis during initial elaboration.)</p>\n<p>But I haven’t looked closely at this again (or the new errors), so I can’t say if this would actually be a viable approach.</p>",
        "id": 446449889,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1719164929
    },
    {
        "content": "<p>It is too complicated to ask that the spec of <code>rw</code> is \"try <code>rw [@lemma]</code>, and then try <code>rw[lemma ..]</code>, and see which one works better\".</p>",
        "id": 446488852,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719186874
    },
    {
        "content": "<p>I'd prefer the discussion here be restricted to \"can we merge <a href=\"https://github.com/leanprover/lean4/pull/2793\">lean#2793</a>?\".</p>",
        "id": 446488915,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719186939
    },
    {
        "content": "<p>I would like to. Despite the cost of the changes in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8076\">#8076</a> (which are not actually <em>that</em> many!), I like the increase in predictability.</p>",
        "id": 446488989,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719186977
    },
    {
        "content": "<p>I agree that there are not that many failures, so I can live with merging it.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/428973-nightly-testing/topic/RFC.20regarding.20adaptions.20for.20lean.232793/near/446488989\">said</a>:</p>\n<blockquote>\n<p>I would like to. Despite the cost of the changes in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8076\">#8076</a> (which are not actually <em>that</em> many!), I like the increase in predictability.</p>\n</blockquote>\n<p>In what way is the predictability increased? In what cases would it fail before? In what cases does it fail now? I don't really understand the difference between before and after this fix.</p>\n<p>In my proposal I was not asking for \"try <code>rw [@foo]</code>, and then try <code>rw [foo ..]</code>\", but to see if there is a change that is the best of both worlds (something like \"try type-class inference/auto-param inference both before and after matching with the goal\"). It won't be as simple as that, but I don't actually know in what cases it would fail before/now...</p>\n<p>If you want to restrict the discussion to \"can we merge this PR\" then the answer is clearly \"yes, after you fix the CI issues in the mathlib PR\". I thought that the question \"is this PR desirable\" would also be part of the discussion.</p>",
        "id": 446538505,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719214452
    },
    {
        "content": "<p>Btw, I ok with merging that PR as-is. I just expect that very soon we'll get a new issue \"<code>rw [foo]</code> fails, but <code>rw [foo ..]</code> works\".</p>",
        "id": 446542081,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719215273
    },
    {
        "content": "<p>No, no, I want to know \"is this desirable\".</p>",
        "id": 446544862,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719216194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/428973-nightly-testing/topic/RFC.20regarding.20adaptions.20for.20lean.232793/near/446538505\">said</a>:</p>\n<blockquote>\n<p>In what way is the predictability increased? In what cases would it fail before? In what cases does it fail now? I don't really understand the difference between before and after this fix.</p>\n</blockquote>\n<p>Same here, I failed to parse the relevant discussions</p>",
        "id": 446546614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719216801
    },
    {
        "content": "<p>I don't think we can answer that without knowing in what situations <code>rw [@foo]</code> fails vs <code>rw [foo ..]</code> fails (and is that the same as <code>rw [(foo)]</code>?).<br>\nMy guess is that is has to do with the order of operations: things like \"will it already fire type-class inference during elaboration, before matching against the goal\". But there are probably more subtle issues.</p>",
        "id": 446588703,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719228109
    }
]