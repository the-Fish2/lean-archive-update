[
    {
        "content": "<p>I'm going to again put up a bullet list of things people could work on in this PR.</p>",
        "id": 427010268,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710652083
    },
    {
        "content": "<ul>\n<li>Mathlib.MeasureTheory.Covering.Vitali: a  undiagnosed simp failure.</li>\n</ul>",
        "id": 427010363,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710652103
    },
    {
        "content": "<ul>\n<li>Failure in <code>Mathlib.Data.Rel</code>, where it seems like <code>attribute [eqns flip_def] flip</code> is no longer working.</li>\n<li><code>Mathlib.Control.Fold</code> is affected by the same issue.</li>\n<li><code>Mathlib.Data.DFinsupp.WellFounded</code> too.</li>\n</ul>\n<p>Finding a minimal example of this problem with <code>@[eqns]</code> seems like a priority: whether the fix belongs in <code>Mathlib.Tactic.Eqns</code> or needs to go upstream.</p>",
        "id": 427011697,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710652471
    },
    {
        "content": "<ul>\n<li>Mathlib.LinearAlgebra.QuadraticForm.Basic, simp failure?</li>\n</ul>",
        "id": 427012135,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710652593
    },
    {
        "content": "<ul>\n<li>\n<p>Mathlib.Geometry.Euclidean.Inversion.Calculus: a problem with <code>simp (config := { unfoldPartialApp := true })</code> not firing. This may well be due to a bug: a minimization here would be extremely helpful.</p>\n</li>\n<li>\n<p>Mathlib.Combinatorics.SimpleGraph.Regularity.Increment: seems to have the same problem.</p>\n</li>\n<li>\n<p>Mathlib.Probability.Martingale.Upcrossing: same</p>\n</li>\n<li>\n<p>Mathlib.Data.Nat.Bitwise: same</p>\n</li>\n</ul>",
        "id": 427014724,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710653293
    },
    {
        "content": "<p>Okay, besides those we now have a build.</p>",
        "id": 427016945,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710653903
    },
    {
        "content": "<p>Oh, is eqns the reason <code>simp [flip]</code> and some others no longer work?</p>",
        "id": 427059308,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710665869
    },
    {
        "content": "<p>Or - that it used to work at all</p>",
        "id": 427059505,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710665915
    },
    {
        "content": "<p>Yes.</p>",
        "id": 427067499,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710668157
    },
    {
        "content": "<p>I've marked <code>Covering.Vitali</code> and <code>QuadraticForm.Basic</code> as done, but they are only done lamely: add an extra rw, and leave an adaptation note hoping that someone will try to minimize later.</p>",
        "id": 427069914,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710668833
    },
    {
        "content": "<p>The following seems to be a minimization of the <code>unfoldPartialApp</code> problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">300</span><span class=\"o\">)</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">300</span><span class=\"o\">)</span> <span class=\"n\">One.toOfNat1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">200</span><span class=\"o\">)</span> <span class=\"n\">One.ofOfNat1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">match_pattern</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">match_pattern</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddZeroClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">AddZeroClass</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bit0_zero</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">add_zero</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bit</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"n\">bit1</span> <span class=\"n\">bit0</span>\n\n<span class=\"c1\">-- This is `Nat.bit_mod_two` from `Mathlib.Data.Nat.Bitwise`.</span>\n<span class=\"c1\">-- Here it works fine:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">bit</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">unfoldPartialApp</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bit</span><span class=\"o\">,</span> <span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_two</span><span class=\"o\">,</span> <span class=\"n\">Bool.cond_eq_ite</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mod</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Now prove one more theorem</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bit1_zero</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">bit0_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Now try again:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">bit</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">unfoldPartialApp</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bit</span><span class=\"o\">,</span> <span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_two</span><span class=\"o\">,</span> <span class=\"n\">Bool.cond_eq_ite</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- This time, `bit1` has not been unfolded!</span>\n  <span class=\"c1\">-- Somehow, the mere presence of `bit1_zero` (not even as a `simp` lemma) inhibits this.</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mod</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 427074223,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710670003
    },
    {
        "content": "<p>(Very happy if someone could take a look at that to see if it looks like a reasonable diagnosis.)</p>",
        "id": 427074863,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710670176
    },
    {
        "content": "<p>If so, the remaining big task is minimizing the change in behaviour with <code>@[eqns]</code>.</p>",
        "id": 427074956,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710670201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/428973-nightly-testing/topic/.2311437.2C.20adaptations.20for.20.60nightly-2024-03-16.60/near/427074956\">said</a>:</p>\n<blockquote>\n<p>If so, the remaining big task is minimizing the change in behaviour with <code>@[eqns]</code>.</p>\n</blockquote>\n<p><code>import Std.Data.Array.Lemmas</code> breaks it</p>",
        "id": 427229395,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710711610
    },
    {
        "content": "<p>Specifically, importing any file that uses <code>rw [flip]</code></p>",
        "id": 427231025,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710712040
    },
    {
        "content": "<p>Minimized: <a href=\"https://github.com/Ruben-VandeVelde/eqns/commit/a6479f5956cb25cb0f2e7779486eb9b84ecd71e5\">https://github.com/Ruben-VandeVelde/eqns/commit/a6479f5956cb25cb0f2e7779486eb9b84ecd71e5</a></p>",
        "id": 427232800,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710712501
    },
    {
        "content": "<p>Interesting. What is going on with <code>Rel.extracted_2</code>?</p>",
        "id": 427233305,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710712637
    },
    {
        "content": "<p>It is not directly affecting anything, but somehow its presence is blocking <code>simp</code>?</p>",
        "id": 427233468,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710712678
    },
    {
        "content": "<p>And it is essential that it is in a separate file, not Main?</p>",
        "id": 427233574,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710712696
    },
    {
        "content": "<p>If you move it into Main before the <code>attribute [eqns flip_def] flip</code> line, you get \"There already exist stored eqns for 'flip'; registering new equations will not have the desired effect.\"; if you put it after, <code>simp</code> still works</p>",
        "id": 427233891,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710712784
    },
    {
        "content": "<p>If <code>Rel.extracted_2</code> (please ignore the name) uses <code>simp</code> rather than <code>rw</code>, everything works too</p>",
        "id": 427234177,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710712849
    },
    {
        "content": "<p>I fixed another <code>simp says</code>, but now I'm off</p>",
        "id": 427236957,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710713577
    },
    {
        "content": "<p>Thanks very much for the minimization! That's super useful.</p>",
        "id": 427237310,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710713660
    },
    {
        "content": "<p>In the minimization, if you comment out <code>import Eqns.Dep</code> in Main then <code>simp [flip]</code> works again.</p>\n<p>It looks like what's going on is that <a href=\"https://github.com/leanprover/lean4/commit/173b95696129f5efeac9d2cd5a83a724c48cf7ae#diff-de283883f4b6c0a4cd9efb141b441237e22e3856fda5d4a569c18c84e74ed6c7R147\">this line</a> of Leo's commit causes it to see that there are already equation lemmas so it doesn't need to regenerate anything. The <code>rw [flip]</code> in <code>Eqns.Dep</code> generates the equation theorems, so that causes <code>@[eqns]</code> to from then on have no effect.</p>\n<p>I guess a way to override equation theorems is to define your own <code>eq_1</code> through <code>eq_n</code> yourself immediately after the definition. (Well, maybe that's not allowed without some metaprogramming, since now <code>eq_1</code> is a reserved name.)</p>",
        "id": 427253940,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710718087
    },
    {
        "content": "<p>I've removed <code>@[eqns]</code> from <code>flip</code> for now.</p>",
        "id": 427273955,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710723416
    },
    {
        "content": "<p>Things seem to work for <code>comp</code>, but this is possibly very fragile!</p>",
        "id": 427274017,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710723432
    },
    {
        "content": "<p>I'm confused. What is failing exactly? Is <code>eqns</code> failing to override the equation lemma, or is <code>simp</code> pre-generating it or something?</p>",
        "id": 427276730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710724141
    },
    {
        "content": "<p>Once equation lemmas are generated (as detected by <code>eq_1</code> through <code>eq_n</code> exist in the environment) then equation generator functions are no longer called.</p>\n<p>The <code>flip</code> equation lemmas happen to be generated before the <code>eqns</code> attribute is added, so it's too late. The equation generator function that <code>eqns</code> defines is not called, so it can't supply the list of user equation lemmas.</p>",
        "id": 427281599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710725404
    },
    {
        "content": "<p>I see, so the issue is that <code>flip</code> was defined upstream</p>",
        "id": 427281763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710725440
    },
    {
        "content": "<p>(So try to avoid using the <code>Function.comp</code> equation lemmas in Std in the meantime!)</p>",
        "id": 427281809,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710725451
    },
    {
        "content": "<p>I think <code>eqns</code> could work around this by removing the existing equation lemmas from the extension first?</p>",
        "id": 427281905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710725474
    },
    {
        "content": "<p>That doesn't seem like it would work: <code>alreadyGenerated?</code> looks at the environment itself</p>",
        "id": 427282184,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710725555
    },
    {
        "content": "<p>oh, is <code>eqnsExt</code> not persistent?</p>",
        "id": 427282316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710725587
    },
    {
        "content": "<p>I didn't think so, but it'd be worth you double checking</p>",
        "id": 427282703,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710725687
    },
    {
        "content": "<p>If it's not, then the problem is that module 1 defines <code>flip</code>, module 2 imports module 1 and adds the <code>eqns</code> attribute, module 3 imports module 1 and generates an equation lemma, and then module 4 imports modules 2 and 3 and now the <code>eqns</code> lemmas are not used</p>",
        "id": 427283107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710725796
    },
    {
        "content": "<p>It would definitely help if this was a supported use case</p>",
        "id": 427283112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710725797
    },
    {
        "content": "<p>Changing equation lemmas well after the fact?</p>",
        "id": 427283236,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710725826
    },
    {
        "content": "<p>changing them at all</p>",
        "id": 427283307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710725844
    },
    {
        "content": "<p>maybe it suffices to just upstream <code>flip_def</code> and call it <code>flip.eq_1</code></p>",
        "id": 427283555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710725909
    },
    {
        "content": "<p>The short-term plan is</p>\n<ol>\n<li>leave all <code>@[eqns]</code> attributes in mathlib that are fine (the ones that add them immediately after the definition)</li>\n<li>remove the one for <code>flip</code> since it's already poisoned, and cautiously move forward with leaving <code>Function.comp</code>'s</li>\n</ol>\n<p>Mid-term: figure out what adding user equation lemmas should look like, and get core support.</p>",
        "id": 427283872,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710725994
    },
    {
        "content": "<p>There's a little obstruction to defining <code>flip.eq_1</code>, which is that <code>eq_1</code> is now a reserved name.</p>",
        "id": 427284010,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710726018
    },
    {
        "content": "<p>(I mean defining it using <code>theorem</code>)</p>",
        "id": 427284071,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710726031
    },
    {
        "content": "<p>I thought I successfully petitioned to get an option for that</p>",
        "id": 427284107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710726039
    },
    {
        "content": "<p>You might have, but I don't know -- I'm <em>really</em> distracted with getting through the end of the quarter with my teaching.</p>",
        "id": 427284221,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710726076
    },
    {
        "content": "<p>I don't see any evidence of it in <a href=\"https://github.com/leanprover/lean4/pull/3675\">lean4#3675</a></p>",
        "id": 427284897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710726229
    },
    {
        "content": "<p>Something that's currently sketchy about <code>@[eqns]</code> is that if the user equation lemmas need to unfold the definition, they have to be <em>very</em> careful not to use the equation lemmas, since then the generated equation lemmas permanently become the equation lemmas.</p>",
        "id": 427285431,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710726362
    },
    {
        "content": "<p>That part of the protocol in <code>Lean.Meta.getEqnsFor?</code> needs to be worked out to support user equation lemmas properly.</p>",
        "id": 427285705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710726427
    },
    {
        "content": "<p>Maybe if <code>eqns</code> is in core, <code>Lean.Meta.getEqnsFor?</code> just needs to look into the extension for user equation lemmas before calling <code>alreadyGenerated?</code></p>",
        "id": 427286041,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710726501
    },
    {
        "content": "<p>another option would be a tag attribute on the original definition like <code>@[custom_eqns]</code> which suppresses the usual equation lemma generation or otherwise signals that we want to override the existing ones</p>",
        "id": 427286672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710726668
    },
    {
        "content": "<p>being able to override the equations instead of just intercepting the original generation is useful though because of your point - we may want to use the built in equation lemmas while proving the new lemmas</p>",
        "id": 427287001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710726748
    },
    {
        "content": "<p>It looks like due to limited bandwidth right now on several fronts, it will at least be late in the week before core changes can happen here. So hopefully it will be okay to proceed with the short-term plan outlined by Kyle above.</p>",
        "id": 427287415,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710726852
    },
    {
        "content": "<p>Okay, this is now green. Still TODO</p>\n<ul>\n<li>For now, we need to rename the <code>.def</code> definitions that are colliding with reserved names. Hopefully this can be changed again soon in Lean, but there is limited bandwidth this week for such changes and I'd prefer to get back in sync.</li>\n<li>There are problems with <code>simp (config := { unfoldPartialApp := true })</code>, that Leo is looking at (but see above, limited bandwidth: perhaps we merge these with notes?)</li>\n<li>Search for <code>FIXME.*nightly</code> and deal with the remaining problems!</li>\n</ul>",
        "id": 427326516,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710736504
    },
    {
        "content": "<p>Happy to have help with these!</p>",
        "id": 427444301,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710761481
    },
    {
        "content": "<p>For reference, this seems to be the list of outstanding FIXMEs</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Mathlib/Geometry/Euclidean/Inversion/Calculus.lean\n<span class=\"m\">91</span>:<span class=\"w\">    </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing\n\nMathlib/CategoryTheory/CofilteredSystem.lean\n<span class=\"m\">188</span>:<span class=\"w\">    </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing:<span class=\"w\"> </span>Why<span class=\"w\"> </span>does<span class=\"w\"> </span>simp<span class=\"w\"> </span>no<span class=\"w\"> </span>longer<span class=\"w\"> </span>unfold<span class=\"w\"> </span>Subtype.map?\n<span class=\"m\">195</span>:<span class=\"w\">    </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing:<span class=\"w\"> </span>Why<span class=\"w\"> </span>does<span class=\"w\"> </span>simp<span class=\"w\"> </span>no<span class=\"w\"> </span>longer<span class=\"w\"> </span>unfold<span class=\"w\"> </span>Subtype.map?\n<span class=\"m\">281</span>:<span class=\"w\">    </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing:<span class=\"w\"> </span>Why<span class=\"w\"> </span>does<span class=\"w\"> </span>simp<span class=\"w\"> </span>no<span class=\"w\"> </span>longer<span class=\"w\"> </span>unfold<span class=\"w\"> </span>Subtype.map?\n<span class=\"m\">288</span>:<span class=\"w\">    </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing:<span class=\"w\"> </span>Why<span class=\"w\"> </span>does<span class=\"w\"> </span>simp<span class=\"w\"> </span>no<span class=\"w\"> </span>longer<span class=\"w\"> </span>unfold<span class=\"w\"> </span>Subtype.map?\n\nMathlib/Combinatorics/SimpleGraph/Regularity/Increment.lean\n<span class=\"m\">109</span>:<span class=\"w\">  </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing\n\nMathlib/Data/Polynomial/Degree/TrailingDegree.lean\n<span class=\"m\">70</span>:--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing:<span class=\"w\"> </span>this<span class=\"w\"> </span>was<span class=\"w\"> </span>called<span class=\"w\"> </span><span class=\"sb\">`</span>def<span class=\"sb\">`</span>.\n\nMathlib/Data/Polynomial/Eval.lean\n<span class=\"m\">501</span>:--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing:<span class=\"w\"> </span>this<span class=\"w\"> </span>was<span class=\"w\"> </span>called<span class=\"w\"> </span><span class=\"sb\">`</span>def<span class=\"sb\">`</span>.\n\nMathlib/Analysis/Asymptotics/Asymptotics.lean\n<span class=\"m\">194</span>:--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing:<span class=\"w\"> </span>this<span class=\"w\"> </span>was<span class=\"w\"> </span>called<span class=\"w\"> </span><span class=\"sb\">`</span>def<span class=\"sb\">`</span>.\n\nMathlib/MeasureTheory/Group/FundamentalDomain.lean\n<span class=\"m\">685</span>:<span class=\"w\">  </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing\n\nMathlib/Probability/StrongLaw.lean\n<span class=\"m\">147</span>:<span class=\"w\">    </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing\n<span class=\"m\">165</span>:<span class=\"w\">      </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing\n\nMathlib/Probability/Martingale/Upcrossing.lean\n<span class=\"m\">682</span>:<span class=\"w\">    </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing\n\nMathlib/Data/Nat/Bitwise.lean\n<span class=\"m\">84</span>:<span class=\"w\">  </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing:<span class=\"w\"> </span>used<span class=\"w\"> </span><span class=\"sb\">`</span>ite_apply<span class=\"sb\">`</span><span class=\"w\"> </span>instead<span class=\"w\"> </span>of<span class=\"w\"> </span><span class=\"sb\">`</span><span class=\"o\">(</span>config<span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>unfoldPartialApp<span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"w\"> </span><span class=\"o\">})</span><span class=\"sb\">`</span>\n<span class=\"m\">98</span>:<span class=\"w\">  </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing:<span class=\"w\"> </span>used<span class=\"w\"> </span><span class=\"sb\">`</span>ite_apply<span class=\"sb\">`</span><span class=\"w\"> </span>instead<span class=\"w\"> </span>of<span class=\"w\"> </span><span class=\"sb\">`</span><span class=\"o\">(</span>config<span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>unfoldPartialApp<span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"w\"> </span><span class=\"o\">})</span><span class=\"sb\">`</span>\n\nMathlib/Data/DFinsupp/WellFounded.lean\n<span class=\"m\">228</span>:<span class=\"w\">        </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing:<span class=\"w\"> </span>Why<span class=\"w\"> </span>does<span class=\"w\"> </span>simp<span class=\"w\"> </span>no<span class=\"w\"> </span>longer<span class=\"w\"> </span>unfold<span class=\"w\"> </span>Function.swap?\n\nMathlib/LinearAlgebra/QuadraticForm/Basic.lean\n<span class=\"m\">1250</span>:<span class=\"w\">    </span>--<span class=\"w\"> </span>FIXME<span class=\"w\"> </span>nightly-testing\n</code></pre></div>",
        "id": 427636041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710834639
    },
    {
        "content": "<p>It looks like the unfoldPartialApp issue won't be fixed this week.</p>",
        "id": 427651404,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710840817
    },
    {
        "content": "<p>I suggest we turn all these FIXMEs into workarounds, even if lame, with adaptation notes.</p>",
        "id": 427651449,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710840839
    },
    {
        "content": "<p>But the PR passes CI, right?</p>",
        "id": 427654464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710841921
    },
    {
        "content": "<p>So we only need the adaptation notes</p>",
        "id": 427654514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710841927
    },
    {
        "content": "<p>I think it still has <code>sorry</code>s!</p>",
        "id": 427654732,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710842001
    },
    {
        "content": "<p>Maybe I'm wrong though, I haven't looked at this PR for a day or two.</p>",
        "id": 427654781,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710842020
    },
    {
        "content": "<p>Then it can't have a <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> could it?</p>",
        "id": 427655115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710842159
    },
    {
        "content": "<p>We don't cache sorries: so even though the noisy linter will complain about a sorry, on the next build there is an olean present for that file, so no warning is emitted, so CI is happy.</p>",
        "id": 427655315,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710842224
    },
    {
        "content": "<p>I've been hit by this issue very often when testing CI...</p>",
        "id": 427655425,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710842268
    },
    {
        "content": "<p>We could add a CI step that imports Mathlib and checks the whole environment for uses of sorry.</p>",
        "id": 427655539,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710842297
    },
    {
        "content": "<p>I think we should!</p>",
        "id": 427655569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710842308
    },
    {
        "content": "<p>Yes, I would be in favour of that: it is confusing that, once there are oleans, then all the tests that would have failed in the building process \"wrongly\" succeed.</p>",
        "id": 427655671,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710842354
    },
    {
        "content": "<p>Is there some way that I can do the opening of these bump PRs, but without it then being my responsibility to finish the PR? I think this PR has stalled for two days because Ruben had a query, and then I haven't looked at it.</p>",
        "id": 427819297,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710886020
    },
    {
        "content": "<p>I think there are just too many people busy with too many things. And these changes in Lean are \"flooding\" onto us in rapid succession.</p>",
        "id": 427845423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710903616
    },
    {
        "content": "<p>Okay, I think this PR is ready to go. Thanks <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> for all your work on this one. </p>\n<p>CI is running just now after I merged <code>master</code>-&gt;<code>bump/v4.80</code> -&gt; <code>bump/nightly-2024-03-16</code> -&gt; <code>bump/nightly-2024-03-18</code> -&gt; <code>nightly-testing</code> (this is the overhead we incur from falling behind! :-).</p>\n<p>If someone could delegate that would be lovely.</p>",
        "id": 428051912,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710991710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span aria-label=\"peace sign\" class=\"emoji emoji-270c\" role=\"img\" title=\"peace sign\">:peace_sign:</span></p>",
        "id": 428065620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711003415
    },
    {
        "content": "<p>Merged.</p>",
        "id": 428239135,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711066717
    }
]