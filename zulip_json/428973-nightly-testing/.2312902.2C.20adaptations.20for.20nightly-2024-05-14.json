[
    {
        "content": "<p>This is ready to go. Some of the changes are backported to master in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12906\">#12906</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/12905\">#12905</a>.</p>\n<p>There are quite a few adaptation notes here, so I hope someone will be able to take a look and decide whether they are happy!</p>\n<p>The main underlying change here is <a href=\"https://github.com/leanprover/lean4/pull/4119\">lean#4119</a>, which fixed a number of typeclass search bugs. In particular, it fixed a caching bug (the <code>synthPendingDepth</code> was being ignored during caching, resulting in both false positive and false negatives). For the false positives (i.e. things that synthesis was finding that it really shouldn't have been!), we've had to introduce <code>set_option maxSynthPendingDepth 2 in</code> in places. These are all explained with <code>#adaptation_notes</code>.</p>\n<p>There's also <a href=\"https://github.com/leanprover/lean4/pull/4061\">lean#4061</a>, which makes well-founded definitions irreducible by default. This helps avoid some horrible run-away unfoldings, and was surprisingly un-painful to Mathlib to (credit to <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> for discovering this!) There are some minor adaptations still required, however.</p>",
        "id": 438555949,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715686267
    },
    {
        "content": "<p>Zulip tip: always repeat limited things from the topic in the message, else they can't be clicked on conveniently</p>",
        "id": 438557570,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715686974
    },
    {
        "content": "<p>You mean the PR number? There's an icon that looks up an <span aria-label=\"upper right\" class=\"emoji emoji-2197\" role=\"img\" title=\"upper right\">:upper_right:</span> in the title bar that opens it.</p>",
        "id": 438559168,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715687561
    },
    {
        "content": "<p>I've heard that it's not there in the zulip app, but I don't use it myself</p>",
        "id": 438560178,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715687953
    },
    {
        "content": "<p>Yes, on the mobile app it is not clickable.</p>",
        "id": 438561415,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715688372
    },
    {
        "content": "<p>(Or at least, I do not know how to click it.)</p>",
        "id": 438561478,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715688398
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/12902\">#12902</a>, there is the new option to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxSynthPendingDepth</span> <span class=\"mi\">2</span> <span class=\"k\">in</span>\n</code></pre></div>\n<p>to solve instance issues that were failing previously. This is absolutely great. To take an example which is not in the PR, in <code>Analysis.Distribution.SchwartzSpace</code>, there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">decay_smul_aux</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ùì¢</span><span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚Äñ</span><span class=\"n\">x</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">iteratedFDeriv</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">=</span>\n      <span class=\"bp\">‚Äñ</span><span class=\"n\">c</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">x</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">iteratedFDeriv</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">‚Äñ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">c</span><span class=\"bp\">‚Äñ</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">iteratedFDeriv_const_smul_apply</span> <span class=\"o\">(</span><span class=\"n\">f.smooth</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">norm_smul</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">iteratedFDeriv</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">‚áë</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>where the last rewrite of <code>norm_smul</code> is because there is <code>‚Äñc ‚Ä¢ iteratedFDeriv ‚Ñù n (‚áëf) x‚Äñ</code> in the goal at this point. Weirdly enough, just <code>rw [norm_smul]</code> does not work, you need to provide its arguments. I have been bitten several times by this, where a naive <code>rw [norm_smul]</code> or <code>simp [norm_smul]</code> fails. </p>\n<p>Now, we have a workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxSynthPendingDepth</span> <span class=\"mi\">2</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">decay_smul_aux</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ùì¢</span><span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚Äñ</span><span class=\"n\">x</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">iteratedFDeriv</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">=</span>\n      <span class=\"bp\">‚Äñ</span><span class=\"n\">c</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">x</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">iteratedFDeriv</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">‚Äñ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">c</span><span class=\"bp\">‚Äñ</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">iteratedFDeriv_const_smul_apply</span> <span class=\"o\">(</span><span class=\"n\">f.smooth</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">norm_smul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>works just fine, without the explicit arguments.</p>\n<p>I'm not claiming I understand what <code>maxSynthPendingDepth</code> is doing (in fact, I don't, and I would be very happy to have an explanation of what is going on in this example). But this makes me wonder if we shouldn't just activate <code>set_option maxSynthPendingDepth 2</code> all over mathlib, for the sake of predictibility, even if this comes with a (small?) performance cost. Otherwise, experts will learn that, when a simp is failing for mysterious reasons, one should try <code>set_option maxSynthPendingDepth 2</code> as a magical incantation that might solve things, but newcomers will never be able to find this.</p>",
        "id": 438566016,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1715689961
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/12902\">#12902</a> one of the changes is to fix the proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=hasFTaylorSeriesUpToOn_succ_iff_right#doc\">docs#hasFTaylorSeriesUpToOn_succ_iff_right</a> in <code>Mathlib/Analysis/Calculus/ContDiff/Defs.lean</code> by making the proof three lines longer. A different fix would have been to just add <code>set_option maxSynthPendingDepth 2</code> at the top. A third option is to fix the proof but then add <code>set_option maxSynthPendingDepth 2</code> anyway. I profiled these choices: </p>\n<p>Add maxSynthPendingDepth 2: 51K heartbeats, 1.9 seconds</p>\n<p>Fix the proof (i.e. what's currently in the PR): 78K heartbeats and 2.8 seconds</p>\n<p>Fix the proof as in the PR and then add <code>set_option maxSynthPendingDepth 2</code> anyway: 63K heartbeats, 2.2 seconds</p>\n<p>My conclusion is that adding <code>set_option maxSynthPendingDepth 2</code> is both less disruptive and faster (indeed the proposed fix in the PR makes the proof take 50% longer to compile). But is it thought of as a code smell?</p>",
        "id": 438625138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715708903
    },
    {
        "content": "<p>No. I don‚Äôt think so. Kim wanted something that worked on master also. I didn‚Äôt even think about just upping the depth limit. </p>\n<p>I‚Äôd be fine with suggestion 1 being the change.</p>",
        "id": 438628202,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715710163
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"110050\">@S√©bastien Gou√´zel</span> suggested, we  should test globally upping the limit and see the fallout.</p>",
        "id": 438628464,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715710287
    },
    {
        "content": "<p>For what it is worth, I would also be in favour of setting the limit to 2 globally.</p>",
        "id": 438632023,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715711785
    },
    {
        "content": "<p>As far as I understand, this limit becomes relevant in situations where you say \"I'm (s)multiplying by 0, so I should get 0\", except that for Lean all these 0s have to be chased around various layers of typeclasses.</p>\n<p>Is this a reasonable summary of what is going on?</p>",
        "id": 438632030,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715711787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/428973-nightly-testing/topic/.2312902.2C.20adaptations.20for.20nightly-2024-05-14/near/438632023\">said</a>:</p>\n<blockquote>\n<p>For what it is worth, I would also be in favour of setting the limit to 2 globally.</p>\n</blockquote>\n<p>(i.e. testing it, wishfully thinking that it is an improvement!)</p>",
        "id": 438632297,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715711889
    },
    {
        "content": "<p>To me, the canonical example is taking like the 4th dual of a vector space</p>",
        "id": 438632417,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715711932
    },
    {
        "content": "<p>It might be 3rd</p>",
        "id": 438632746,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715712071
    },
    {
        "content": "<p>There should be a slowdown in mathlib, see <a href=\"https://github.com/leanprover/lean4/pull/4114\">lean#4114</a> which was replaced by <a href=\"https://github.com/leanprover/lean4/pull/4119\">lean#4119</a> to avoid the slowdown. But if the slowdown is not too big we might consider it as acceptable.</p>",
        "id": 438635505,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1715713126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/nested.20linear.20map.20norm.20failure/near/423230257\">said</a>:</p>\n<blockquote>\n<p>I am not sure why we get depth &gt; 0 after 4 copies of <code>k</code> and not less (or more?)</p>\n</blockquote>\n<p>It was 4.</p>",
        "id": 438637612,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715714030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">S√©bastien Gou√´zel</span> <a href=\"#narrow/stream/428973-nightly-testing/topic/.2312902.2C.20adaptations.20for.20nightly-2024-05-14/near/438635505\">said</a>:</p>\n<blockquote>\n<p>There should be a slowdown in mathlib, see <a href=\"https://github.com/leanprover/lean4/pull/4114\">lean#4114</a> which was replaced by <a href=\"https://github.com/leanprover/lean4/pull/4119\">lean#4119</a> to avoid the slowdown. But if the slowdown is not too big we might consider it as acceptable.</p>\n</blockquote>\n<p>Kim already did the run comparison?</p>",
        "id": 438639668,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715714746
    },
    {
        "content": "<p><a href=\"http://speed.lean-fro.org/mathlib4/compare/74df3d57-7d3a-4c8a-870b-ed5b8ccd5802/to/e7b27246-a3e6-496a-b552-ff4b45c7236e?hash2=fd58d1bdbcaeb92b91d2d047c4a4d4572fda2162\">http://speed.lean-fro.org/mathlib4/compare/74df3d57-7d3a-4c8a-870b-ed5b8ccd5802/to/e7b27246-a3e6-496a-b552-ff4b45c7236e?hash2=fd58d1bdbcaeb92b91d2d047c4a4d4572fda2162</a></p>",
        "id": 438639688,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715714754
    },
    {
        "content": "<p>Yeah, that should be a fair comparison</p>",
        "id": 438640814,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715715155
    },
    {
        "content": "<p>I'm really confused about the claim that <code>Mathlib.Algebra.Module.PID</code> is 105.3B instructions slower. The file takes about 14 seconds to compile with or without <code>set_option maxSynthPendingDepth 2</code></p>",
        "id": 438643148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715715985
    },
    {
        "content": "<p>The benchmark server is just sitting idle right now...</p>",
        "id": 438643362,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715716066
    },
    {
        "content": "<p>Yes, that's the comparison I ran, from which I concluded setting it globally was unacceptable.</p>",
        "id": 438674742,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715727467
    },
    {
        "content": "<p>If it is acceptable after all, that's great!</p>",
        "id": 438674758,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715727476
    },
    {
        "content": "<p>I propose:</p>\n<ul>\n<li>in the remaining places <a href=\"https://github.com/leanprover-community/in/pull/12902\">in#12902</a> where we've changed the proof, but <code>set_option</code> would actually suffice instead (and possibly be faster!) we either switch to using <code>set_option</code>, or otherwise leave a detailed commented explaining that it can be used</li>\n<li>we merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/12902\">#12902</a> into <code>bump/v4.9.0</code> otherwise as is</li>\n<li>we then conduct further benchmarking of <code>set_option maxSynthPendingDepth 2</code> globally in Mathlib<ul>\n<li>possibly minimizing the slowdowns and seeing if there are solutions</li>\n<li>if overall it is fine, requesting the increase upstream (if there is no performance objection from Mathlib, at the FRO we're very happy to set it higher)</li>\n</ul>\n</li>\n</ul>",
        "id": 438675186,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715727649
    },
    {
        "content": "<p>(I do want to get <a href=\"https://github.com/leanprover-community/mathlib4/pull/12902\">#12902</a> in <em>before</em> all the performance discussion however, as once these PRs queue up, life become difficult.)</p>",
        "id": 438675255,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715727677
    },
    {
        "content": "<p>It‚Äôs fine as is to me or with the changes Kevin suggested.</p>",
        "id": 438677898,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715728738
    },
    {
        "content": "<p>I wasn't objecting to the PR as it stands, I was just trying to understand something about this new option.</p>",
        "id": 438678599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715729043
    },
    {
        "content": "<p>Delegated to give flexibility. I think we are all painting the new knob here. I think bumping the limit is the way to go on the two identified locations</p>",
        "id": 438678927,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715729185
    },
    {
        "content": "<p>Is <a href=\"#narrow/stream/113488-general/topic/unification.20problem.20in.20rw\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/unification.20problem.20in.20rw</a> to that <code>maxSynthPendingDepth</code> thing?</p>",
        "id": 438728274,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1715751856
    }
]