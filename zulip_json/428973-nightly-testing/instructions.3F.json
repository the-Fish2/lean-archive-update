[
    {
        "content": "<p>My understanding of what's going on here is that the FRO has decided that they need to move fast and break things when developing lean, and one of the things which they will break is mathlib. This means that occasionally there needs to be some work done to bump mathlib to lean master, and that the previous set-up (one thread in <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a> plus the interminable warning thread in one of the private streams) was too inconvenient to manage all this well, now we've understood the size of the problem.</p>\n<p>Keeping mathlib up to date with core lean is a really important job and it seems to me that it's turning out to be a big job (perhaps unsurprisingly) which needs frequent attention. I thank Scott heartily for what he's done so far keeping the show on the road but he can't do this forever, we need him writing more game-changing stuff like <code>omega</code>, not fixing lemmas in random parts of the library he never normally goes in.</p>\n<p>I'm still stuck in teaching hell until the beginning of April but one thing which has really struck me with reading the old thread is that I'm just confused about the actual details of what's happening. When I have teaching off my back and when I'm maintaining my own repo which will need to keep up with mathlib, I will need to be much more engaged with this process. So I'm hoping that someone will somewhere write some kind of explanation of the typical scenario (mathlib doesn't compile with some nightly) and then exactly which branches users like me are supposed to be pushing or not pushing to, and how we can help rather than (a) hinder or (b) redo work which has already been done. </p>\n<p>I definitely think a stream for this is a step in the right direction.</p>",
        "id": 426277757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710316568
    },
    {
        "content": "<p>There's two or three relevant branches at any point:</p>\n<ul>\n<li>There's a bump/v4.x.x branch which is supposed to work at all times, and which will become a PR into master when v4.x.x is released</li>\n<li>There's a nightly-testing branch which is automatically updated every day to run against the latest nightly, and will therefore often break. We try to fix errors here as they come in, but we don't always finish before new breakage comes in from the automated bump</li>\n<li>There is sometimes a bump/nightly-YYYY-MM-DD branch with a PR <em>into bump/v4.x.x</em>; this is how bump/v4.x.x is kept up to date. Unlike nightly-testing, this is locked to a specific nightly, so we have some hope to get it passing CI even if there's new nightlies that break mathlib some more.</li>\n</ul>\n<p>We should focus either on the bump/nightly-YYYY-MM-DD branch, if there is an active one, and on nightly-testing if there isn't one</p>",
        "id": 426280300,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710317632
    },
    {
        "content": "<p>Further, I'm hoping that 90% of the time the <code>bump/nightly-YYYY-MM-DD</code> branch will not actually need much work after the branch has been created. It will be created once <code>nightly-testing</code> is already working, and all that needs to be done is  a little review and merging.</p>",
        "id": 426280600,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710317744
    },
    {
        "content": "<p>However, in the 10% of the time when Lean is moving too fast for us, the problem is going to be that <code>nightly-testing</code> will move on to a <em>new</em> nightly before we've finished catching up with the previous one. We can either do the Red Queen's race: \"Now, here, you see, it takes all the running you can do, to keep in the same place.\", and continue working on <code>nightly-testing</code>, <em>or</em> we can create a <code>bump/nightly-YYYY-MM-DD</code> branch that still needs work, and that branch will not be bumped to further nightlies.</p>",
        "id": 426280890,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710317864
    },
    {
        "content": "<p>So what is the workflow for \"I've had a hard day at work, I fancy doing some lean this evening, I have an hour, how can I help\"? That's the situation I'll find myself in. Or \"I'm at work, I can't face reading emails, I'm eating lunch at my desk and I have ten minutes to try and be helpful\"?</p>",
        "id": 426280906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710317872
    },
    {
        "content": "<p>Getting there. :-)</p>",
        "id": 426280931,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710317882
    },
    {
        "content": "<p>The two main pieces of written instruction available at present are:</p>\n<ul>\n<li><a href=\"#narrow/stream/345428-mathlib-reviewers/topic/bump.20PRs/near/422136792\">https://leanprover.zulipchat.com/#narrow/stream/345428-mathlib-reviewers/topic/bump.20PRs/near/422136792</a> (Caveat: it doesn't explain that sometimes a <code>bump/nightly-YYYY-MM-DD</code> will exist that still needs work, and if that is the case we should prioritize fixing that ahead of working on <code>nightly-testing</code>)</li>\n<li><a href=\"https://leanprover-community.github.io/contribute/tags_and_branches.html\">https://leanprover-community.github.io/contribute/tags_and_branches.html</a>, a more detailed background on how the version tags and branches currently operate.</li>\n</ul>\n<p>Neither of these sources is final! If you think we can be doing things differently and better, please make it happen. :-)</p>",
        "id": 426281317,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710318011
    },
    {
        "content": "<p>So, additional to what's explained in those sources, I would say the main task list is:</p>\n<ul>\n<li>If there is a <code>bump/nightly-YYYY-MM-DD</code> PR branch pointing at a <code>bump/v4.X.0</code> branch, getting that ready for review / reviewed is the highest priority. (It's clear we need a better automatic indicator of whether such a PR exists right now!)</li>\n<li>Such PR branches are aiming at \"<code>master</code> quality\". Any FIXMEs need to be resolved. It's fine to write an <code>Adaptation note: nightly-YYYY-MM-DD. &lt;Explanation goes here&gt;</code>, but this should be detailed enough that someone can pick it up later without much context.</li>\n<li>When there is such a branch, it's always okay to merge it into <code>nightly-testing</code>.</li>\n<li>When there isn't such a branch, or you know there are problems in <code>nightly-testing</code> from even more recent nightlies than such a branch is on, you can work on <code>nightly-testing</code>!</li>\n<li>This is a lower quality branch. It's nice to get this running asap, even if this means putting sorries. But please make sure they are annotated clearly so we can find them. I have been writing <code>FIXME nightly-testing</code>.</li>\n<li>Usually I do a first pass, fixing the easy stuff, and sorrying the hard stuff. Then I start writing in this thread asking for help on the harder stuff. (Big stuff can have a new thread. If there's a bunch of smaller stuff, just individual posts in the main thread for that nightly are fine. One post per problem, please, so people can use emojis to claim and release work.)</li>\n<li>Anytime <code>nightly-testing</code> is working or near to working, we need to create a new <code>bump/nightly-YYYY-MM-DD</code> branch:<ul>\n<li>Checkout <code>bump/v4.X.0</code>, merge <code>master</code>, and push.</li>\n<li><code>checkout -b bump/nightly-YYYY-MM-DD</code></li>\n<li><code>git merge --squash nightly-testing</code></li>\n<li>resolve conflicts if there are any</li>\n<li><code>git push</code></li>\n<li>open a PR from this branch, making sure to set the target branch to <code>bump/v4.X.0</code>.</li>\n</ul>\n</li>\n</ul>\n<p>and that gets us back to the start of the cycle. :-)</p>",
        "id": 426282442,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710318462
    },
    {
        "content": "<p>And note also: when <code>nightly-testing</code> is first moved to a new nightly, it's worth checking if there are any relevant <code>lean-pr-testing-XXXX</code> branches with existing adaptation work. Ideally, we would post about the existence of such branches ahead of time on this stream for visibility.</p>\n<p>Maybe a good way to say this is that a very early step of dealing with any seriously broken <code>nightly-testing</code> is to go to <a href=\"https://github.com/leanprover/lean4-nightly/releases\">https://github.com/leanprover/lean4-nightly/releases</a>, see which Lean commits were part of that nightly, and then post in a thread here that we expect lean4#XXXX and or lean4#YYYY to be the sources of problems. This is a good moment to check for existing <code>lean-pr-testing-XXXX</code> branches and merge them.</p>",
        "id": 426282964,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710318664
    },
    {
        "content": "<p>Finally, all these instructions also hold for Std, except that usually it has fewer, easier, problems. So typically it is safe to not pay any attention to Std, unless on Mathlib's <code>nightly-testing</code> branch you are getting failures in Std. If that's happening, apply this whole routine to Std, and then make sure to  run <code>lake update std</code> after you've pushed to Std's <code>nightly-testing</code>.</p>",
        "id": 426283361,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710318810
    },
    {
        "content": "<p>And also that most people can't push to Std branches</p>",
        "id": 426284194,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710319155
    },
    {
        "content": "<p>Oh, hmm. Okay, if I'm on holiday make PRs to fix Std, and/or recruit <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>!</p>",
        "id": 426284747,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710319368
    },
    {
        "content": "<p>(Maybe the bot should also post to a thread in the <a class=\"stream\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4\">#std4</a> stream?)</p>",
        "id": 426285079,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710319495
    }
]