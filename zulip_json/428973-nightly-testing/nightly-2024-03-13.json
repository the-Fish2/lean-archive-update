[
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3579\">lean4#3579</a> should land in nightly-2024-03-13. This adds <code>@[simp]</code> to <code>Nat.succ_eq_add_one</code>.</p>\n<p>There is a fair bit of Mathlib fallout, but it is mostly nice. The changes required are on the <code>lean-pr-testing-3579</code> branch. This can be merged in <code>nightly-testing</code> when <code>nightly-2024-03-13</code> arrives.</p>",
        "id": 426263212,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710308229
    },
    {
        "content": "<p>nightly-2024-03-13 has landed, and I've merged the <code>lean-pr-testing-3579</code> branches into <code>nightly-testing</code> on both Std and Mathlib.</p>\n<p>Whether that builds remains to be seen!</p>",
        "id": 426280168,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710317581
    },
    {
        "content": "<p>Also landed in <code>nightly-2024-03-13</code> is a fancy new canonicalizer from Leo, that he's hooked out to <code>omega</code>. The recent regression with <code>omega</code> no longer identifying atoms up to defeq should now be fixed!</p>",
        "id": 426280283,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710317627
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11353\">#11353</a> is the adaptation PR for <code>nightly-2024-03-13</code>.</p>",
        "id": 426291340,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710321681
    },
    {
        "content": "<p>I've created <a href=\"https://github.com/leanprover-community/mathlib4/issues/11357\">https://github.com/leanprover-community/mathlib4/issues/11357</a> to track an outstanding issue which seems very likely to be a Lean bug. If anyone would like to try minimizing this to a no imports example we can try to get it fixed.</p>",
        "id": 426313446,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710328785
    },
    {
        "content": "<p>I think besides:</p>\n<ul>\n<li>this issue</li>\n<li>merging <a href=\"https://github.com/leanprover-community/mathlib4/pull/11353\">#11353</a> after it passes CI</li>\n<li>dealing with any <code>Adaptation notes</code></li>\n</ul>\n<p>we are otherwise caught up on nightly releases.</p>",
        "id": 426313740,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710328890
    },
    {
        "content": "<p>The simp issue appears to be already present on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Hom.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupPower.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">uM</span> <span class=\"n\">uN</span> <span class=\"n\">uP</span> <span class=\"n\">uQ</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uM</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uN</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uP</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uQ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">MonoidHom.commMonoid</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">CommMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_pow</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"n\">npow_zero</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">npow_succ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"n\">MonoidHom.commGroup</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommGroup</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n      <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_pow</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n    <span class=\"n\">npow_zero</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">npow_succ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">Inv.inv</span>\n    <span class=\"n\">div</span> <span class=\"o\">:=</span> <span class=\"n\">Div.div</span>\n    <span class=\"n\">div_eq_mul_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">mul_left_inv</span>\n    <span class=\"n\">zpow</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n        <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n    <span class=\"n\">zpow_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">zpow_succ'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">ext</span> <span class=\"n\">x</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zpow_add_one</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"c1\">-- \"unexpected bound variable #0\"</span>\n    <span class=\"n\">zpow_neg'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so it's not clear to me why it's relevant to nightly-testing.</p>",
        "id": 426443102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710372318
    },
    {
        "content": "<p>Great, thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>. If you want to do anything more towards updating the issue at <a href=\"https://github.com/leanprover-community/mathlib4/pull/11357\">#11357</a> to reflect this, and/or minimizing, please do! At whatever point you finish, let me know and I'll see if I can continue.</p>",
        "id": 426443222,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710372416
    },
    {
        "content": "<p>It's pretty fragile though: e.g. removing the <code>MonoidHom.commMonoid</code> instance or the universes makes the bug vanish</p>",
        "id": 426443240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710372425
    },
    {
        "content": "<p>It's bedtime here, I'll tinker around for bit longer and post on the issue when I give up.</p>",
        "id": 426443260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710372456
    },
    {
        "content": "<p>OK I'm done -- I got essentially nowhere. I updated the issue.</p>",
        "id": 426447586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710375796
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 426447596,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710375814
    },
    {
        "content": "<p>I was surprised that I got <code>simp only [mul_comm]</code> to hang Lean -- maybe the same issue?</p>",
        "id": 426447937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710376116
    },
    {
        "content": "<p>Minimized Mathlib free example in the issue. Please confirm on your machine!</p>",
        "id": 426454150,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710379885
    },
    {
        "content": "<p>Confirmed!</p>",
        "id": 426455856,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710381414
    }
]