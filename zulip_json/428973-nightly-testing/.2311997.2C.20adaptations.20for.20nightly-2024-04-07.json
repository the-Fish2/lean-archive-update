[
    {
        "content": "<p>I've just created a new PR to <code>bump/v4.8.0</code>. I'm hoping on a plane soon, so apologies if I'm not quick to respond to reviews --- please to feel free to push directly to the branch!!!</p>\n<p>As I've written in the PR description, there's a lot going on here, and work remains to be done, so please be patient with the mistakes, and help out if you can! There are changes to over 300 files here.</p>\n<p>If you see changes that could be made on <code>master</code> directly, you're very welcome to make those (I'll try to do some as well). And please ping me on such PRs, so I can merge them asap. After merging, we then need to merge <code>master</code> into <code>bump/v4.8.0</code> again, which I think only maintainers can do.</p>",
        "id": 431855268,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712550863
    },
    {
        "content": "<p>We are still seeing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">reviewdog</span><span class=\"o\">:</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"n\">get</span> <span class=\"n\">diff</span><span class=\"o\">:</span> <span class=\"n\">GET</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">api.github.com</span><span class=\"bp\">/</span><span class=\"n\">repos</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pulls</span><span class=\"bp\">/</span><span class=\"mi\">11997</span><span class=\"o\">:</span> <span class=\"mi\">406</span> <span class=\"n\">Sorry</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">diff</span> <span class=\"n\">exceeded</span> <span class=\"n\">the</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">files</span> <span class=\"o\">(</span><span class=\"mi\">300</span><span class=\"o\">)</span><span class=\"bp\">.</span> <span class=\"n\">Consider</span> <span class=\"n\">using</span> <span class=\"bp\">'</span><span class=\"n\">List</span> <span class=\"n\">pull</span> <span class=\"n\">requests</span> <span class=\"n\">files'</span> <span class=\"n\">API</span> <span class=\"n\">or</span> <span class=\"n\">locally</span> <span class=\"n\">cloning</span> <span class=\"n\">the</span> <span class=\"n\">repository</span> <span class=\"n\">instead.</span> <span class=\"o\">[{</span><span class=\"n\">Resource</span><span class=\"o\">:</span><span class=\"n\">PullRequest</span> <span class=\"n\">Field</span><span class=\"o\">:</span><span class=\"n\">diff</span> <span class=\"n\">Code</span><span class=\"o\">:</span><span class=\"n\">too_large</span> <span class=\"n\">Message</span><span class=\"o\">:}]</span>\n</code></pre></div>\n<p>errors.</p>\n<p>I don't actually know who set up reviewdog. Could someone help me locate that person, or otherwise summon help here? We may need to just disable it if it can't cope here.</p>",
        "id": 431855413,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712550936
    },
    {
        "content": "<p>If I understand correctly, <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> added reviewdog support in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6569\">#6569</a></p>",
        "id": 431877684,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1712561394
    },
    {
        "content": "<p>The reviewdog set up was made with this sort of situation in mind to some extent, and I don't think it's necessary to disable reviewdog. The process is as follows: due to <a href=\"https://github.com/leanprover-community/mathlib4/blob/b8145adda2a744f3a646ee93f5daa05a4855da73/bors.toml\">https://github.com/leanprover-community/mathlib4/blob/b8145adda2a744f3a646ee93f5daa05a4855da73/bors.toml</a> bors should still merge even if review dog step fails, as long as the build steps work. Reviewdog will not run on draft PRs, so PRs where reviewdog failing is annoying (and we want a nice green tick) can be developed in draft mode, and then made non-draft and merged when ready to merge. Let me know if there is something I'm missing here (maybe the queue will ignore such PRs?).</p>",
        "id": 431907375,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1712567786
    },
    {
        "content": "<p>I've been working on this PR, and managed to reduce the diff significantly, and it would be good to get some eyes on this one soon.</p>\n<p>Outstanding issues (separate posts so we can use emojis to indicate work):</p>",
        "id": 433631921,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713316856
    },
    {
        "content": "<ul>\n<li>It looks like there was a bad merge involving material about homogeneous polynomials. We'll have to track down the relevant PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/7609\">#7609</a>) and cherry-pick it on to bump/v4.8.0, or revert the changes on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11997\">#11997</a>.</li>\n</ul>",
        "id": 433631926,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713316862
    },
    {
        "content": "<ul>\n<li>Changes to <code>Mathlib/Algebra/Category/Ring/Limits.lean</code> and <code>Mathlib/AlgebraicGeometry/Pullbacks.lean</code> that could do with another set of eyes. Can we backport these changes? Are they even necessary?</li>\n</ul>",
        "id": 433631936,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713316867
    },
    {
        "content": "<ul>\n<li>Some other minor changes in category theory files that I think are fine, but if someone wants to investigate that's also okay: <code>Mathlib/CategoryTheory/Limits/Shapes/Kernels.lean</code>, <code>Mathlib/CategoryTheory/Limits/Shapes/KernelPair.lean</code>, <code>Mathlib/CategoryTheory/Limits/Shapes/Products.lean</code>, <code>Mathlib/CategoryTheory/Limits/Shapes/Pullbacks.lean</code>.</li>\n</ul>",
        "id": 433631941,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713316872
    },
    {
        "content": "<ul>\n<li><code>test/Lint.lean</code> is now noisy because of <a href=\"#narrow/stream/348111-std4/topic/.23guard_msgs.20doesn't.20silence.20warnings/near/423534679\">this</a>.</li>\n</ul>",
        "id": 433631944,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713316876
    },
    {
        "content": "<ul>\n<li><code>rw?</code> no longer uses <code>MVarId.applyRefl</code> to close goals after rewriting, so it is not as capable on <code>Iff</code> goals. For now the relevant test is commented out. I'm fine with leaving this for later, but wouldn't mind a +1.</li>\n</ul>",
        "id": 433631949,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713316880
    },
    {
        "content": "<ul>\n<li>Quite a few timeouts, mostly minor. (Although many simpNF timeouts where I haven't attempted to measure how bad they are.) Currently these are just labelled with an \"adaptation note\". I have some local fixes that I'll start applying to this branch later today, but far from all of the timeouts! Options here:<ul>\n<li>More ad-hocs improvements to proofs to reduce the reliance on defeq, and hence the exposure to the change in behaviour (help welcome!)</li>\n<li>More effort into minimising some of these, to see if we can come up with a convincing case that the defeq algorithm needs to be changed again. (I put a fair bit of effort into this, without much success. Others are welcome to try further?)</li>\n<li>Updating the \"adapation notes\" to also have a tracking issue. (Help welcome if someone is keen to do this. If in the end the conclusion is that the defeq algorithm isn't going to be changed further, such an issue is just noise, so I'm unsure the best path here.)</li>\n<li>Just deciding to merge as is.</li>\n</ul>\n</li>\n</ul>",
        "id": 433631953,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713316882
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12195\">#12195</a> is a backport to master of a timeout fix</p>",
        "id": 433634318,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713318887
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12198\">#12198</a> is another backport of a speedup in FourierTransformDeriv</p>",
        "id": 433638642,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713322122
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12199\">#12199</a> is another backport of a speedup in FieldTheory/NormalClosure</p>",
        "id": 433639403,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713322681
    },
    {
        "content": "<p>One egregious slow-down is in <code>Spec.locallyRingedSpaceMap</code>, but it's such an egregiously evil <code>erw</code> that I can't fault the IsDefEq algorithm for changing behaviour.</p>\n<p>We're doing a rewrite where the \"surface expression\" matches exactly: we're rewriting a <code>(PresheafedSpace.stalkMap (sheafedSpaceMap f) p) a</code>. However the implicit arguments differ signficantly. In the expression we're trying to rewrite it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">DFunLike.coe</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">locallyRingedSpaceObj</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">stalk</span> <span class=\"o\">((</span><span class=\"n\">sheafedSpaceMap</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">→+*</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">locallyRingedSpaceObj</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">stalk</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">locallyRingedSpaceObj</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">stalk</span> <span class=\"o\">((</span><span class=\"n\">sheafedSpaceMap</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"n\">p</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">locallyRingedSpaceObj</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">stalk</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"n\">RingHom.instFunLike</span> <span class=\"o\">(</span><span class=\"n\">PresheafedSpace.stalkMap</span> <span class=\"o\">(</span><span class=\"n\">sheafedSpaceMap</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">locallyRingedSpaceObj</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">stalk</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>while the lemma we're rewriting by says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">DFunLike.coe</span> <span class=\"o\">((</span><span class=\"n\">structureSheaf</span> <span class=\"bp\">↑</span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">presheaf.stalk</span> <span class=\"o\">((</span><span class=\"n\">PrimeSpectrum.comap</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">structureSheaf</span> <span class=\"bp\">↑</span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">presheaf.stalk</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">((</span><span class=\"n\">forget</span> <span class=\"n\">CommRingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">structureSheaf</span> <span class=\"bp\">↑</span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">presheaf.stalk</span> <span class=\"o\">((</span><span class=\"n\">PrimeSpectrum.comap</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">CommRingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">structureSheaf</span> <span class=\"bp\">↑</span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">presheaf.stalk</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">ConcreteCategory.instFunLike</span>\n  <span class=\"o\">(</span><span class=\"n\">PresheafedSpace.stalkMap</span> <span class=\"o\">(</span><span class=\"n\">sheafedSpaceMap</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">CommRingCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">structureSheaf</span> <span class=\"bp\">↑</span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">presheaf.stalk</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I've been trying to do some <code>dsimp</code>ing to massage these to be closer, but without success so far. I hope it is possible, however. If <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>, <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span>, or <span class=\"user-mention\" data-user-id=\"384542\">@Justus Springer</span> (or anyone else interested in algebraic geometry <code>erw</code>s :-) were tempted to have look that would be great.</p>\n<p>No need to work on the nightly-testing branch. The ideal goal is to not need the <code>erw</code>. Alternatively, wrap the declaration in <code>count_heartbeats in</code>, and try to get the heartbeats count down by doing some <code>dsimp</code> ahead of the <code>erw</code> (possibly on the lemma, as well as on the hypothesis).</p>",
        "id": 433696871,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713341161
    },
    {
        "content": "<p>Anyone interested in diagnosing some typeclass search problems?</p>\n<p>On <code>master</code>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">AddMonoidHomClass</span> <span class=\"o\">(</span><span class=\"n\">AddGroupSeminorm</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>takes about 19000 heartbeats to produce <a href=\"https://gist.githubusercontent.com/semorrison/47b4723c30a95f62762eb058ff85ec57/raw/2b41f5a8a4b97a09f28babbad6d20682d34d56b9/gistfile1.txt\">before</a>, while on <code>nightly-testing</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">40000</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">AddMonoidHomClass</span> <span class=\"o\">(</span><span class=\"n\">AddGroupSeminorm</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>takes about 29000 heartbeats to produce <a href=\"https://gist.githubusercontent.com/semorrison/5acf7a8399747d54a273b7bf3972456b/raw/7961344b9594850585f617220c822979570ca19d/gistfile1.txt\">after</a>.</p>\n<p>If anyone would like to trawl through those and try to identify an interesting difference, that would be great. :-)</p>",
        "id": 433704017,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713343476
    },
    {
        "content": "<p>All I can say is that the very first step (trying <code>ContinuousAddMonoidHomClass.toAddMonoidHomClass</code> is very wrong</p>",
        "id": 433737145,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713354903
    },
    {
        "content": "<p>Could I have a quick review/delegation on <a href=\"https://github.com/leanprover-community/mathlib4/pull/12214\">#12214</a>?</p>\n<p>Once that lands, a maintainer should cherry-pick <a href=\"https://github.com/leanprover-community/mathlib4/pull/12214\">#12214</a> and the following commits to bump/v4.8.0:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>73db0f61af75ed7d4e208652a05293d3c43ea81d\ncbacc654281a03c6041d8e75e72364024f4052e6\n08a6c1de3b1c35b5d520097c00a0bd4b241b8571\n22f7e6fcc3a3c2370d4cab6880ba4a7c458f8284\nd200a39db19637ac52bd2e0736758151e924362d\n</code></pre></div>\n<p>and then I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/11997\">#11997</a> is good to go</p>",
        "id": 433745124,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713357294
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12214\">#12214</a> landed, so that's now:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>73db0f61af75ed7d4e208652a05293d3c43ea81d\ncbacc654281a03c6041d8e75e72364024f4052e6\n08a6c1de3b1c35b5d520097c00a0bd4b241b8571\n22f7e6fcc3a3c2370d4cab6880ba4a7c458f8284\nd200a39db19637ac52bd2e0736758151e924362d\ne4721ccdbd69b0124f1c947b821033ae422b4789\n</code></pre></div>",
        "id": 433762307,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713361857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/428973-nightly-testing/topic/.2311997.2C.20adaptations.20for.20nightly-2024-04-07/near/433762307\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12214\">#12214</a> landed, so that's now:</p>\n<p><div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>73db0f61af75ed7d4e208652a05293d3c43ea81d\ncbacc654281a03c6041d8e75e72364024f4052e6\n08a6c1de3b1c35b5d520097c00a0bd4b241b8571\n22f7e6fcc3a3c2370d4cab6880ba4a7c458f8284\nd200a39db19637ac52bd2e0736758151e924362d\ne4721ccdbd69b0124f1c947b821033ae422b4789\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> sounds like you've got 7 minutes left before the meeting to cherry-pick some changes :)</p>",
        "id": 433873085,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713387187
    },
    {
        "content": "<p>I'll do them now, thanks!</p>",
        "id": 433893968,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713398831
    },
    {
        "content": "<p>Done, and then merged bump/v4.8.0 -&gt; bump/nightly-2024-04-07 -&gt; bump/nightly-2024-04-14 -&gt; nightly-testing.</p>",
        "id": 433894484,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713399204
    },
    {
        "content": "<p>If we're reading to merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/11997\">#11997</a>, that would be great. I'm going to continue looking at the timeouts now.</p>",
        "id": 433894728,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713399395
    },
    {
        "content": "<p>Various further progress:</p>\n<ul>\n<li>The timeout in <code>Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat.Monoidal</code> was latent and ready to bite us anyway: it's improved by an additional dsimp lemma in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12233\">#12233</a>, which hopefully we can merge and backport.</li>\n<li>In every case where we need to add <code>nolint simpNF</code> that I've looked at (about 2/3rds of them so far), the slowness in typeclass search was already there, and just got a little worse. I've created 7 mathlib issue for these under the label <a href=\"https://github.com/leanprover-community/mathlib4/issues?q=is%3Aopen+label%3Aslow-typeclass-synthesis+sort%3Aupdated-desc\"><code>slow-typeclass-synthesis</code></a>. We should add this label to our meta-list of lists of technical debt, and get on with life. :-)</li>\n</ul>",
        "id": 433913969,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713413812
    },
    {
        "content": "<p>I merged <a href=\"https://github.com/leanprover-community/mathlib4/pull/12233\">#12233</a></p>",
        "id": 433949721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713421794
    },
    {
        "content": "<p>I'm happy with <a href=\"https://github.com/leanprover-community/mathlib4/pull/11997\">#11997</a> otherwise</p>",
        "id": 433958624,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713423302
    },
    {
        "content": "<p>Ok, so one more cherry-pick, and then we're done? <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> ?</p>",
        "id": 433986503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713427237
    },
    {
        "content": "<p>I left two comments</p>",
        "id": 433988692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713427983
    },
    {
        "content": "<p>I've hit merge. Unfortunately at this point I don't know why <code>test/euclid.lean</code> is slower. It makes me sad too. :-(</p>",
        "id": 433996970,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713429700
    },
    {
        "content": "<p>Does bors merge into bump branches?</p>",
        "id": 433997781,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713429934
    },
    {
        "content": "<p>Hmm, I think so, but you're right we usually do this by hand. It's been a while. :-)</p>",
        "id": 433997885,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713429964
    },
    {
        "content": "<p>merged by hand. probably should have updated the PR description first, but I guess it will be squashed anyway later.</p>",
        "id": 433998001,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713430012
    }
]