[
    {
        "content": "<p>Hopefully a topic like this is appropriate for this stream—my intention is that this topic could be used for any issues with the way nightly testing interacts with Lean PR testing. (If this is out of scope, please feel free to move it, though.)</p>",
        "id": 426925766,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710627339
    },
    {
        "content": "<p>The issue that motivated me is: when <code>nightly-testing</code> is already broken, the bot labels lean4 PRs with <code>breaks-mathlib</code>, and includes a message saying that the PR breaks mathlib.</p>\n<p>In the case that nightly-testing is already broken, would it be possible for the bot to</p>\n<ol>\n<li>not label it <code>breaks-mathlib</code> (nor <code>builds-mathlib</code>)</li>\n<li>use a different message clarifying the situation in the comment, e.g. \"<code>nightly-testing</code> is currently broken\"</li>\n<li>re-run automatically when <code>nightly-testing</code> is fixed (maybe this last step already happens?)</li>\n</ol>\n<p>(I'm guessing we still want to run CI in the first place, in case the lean4 PR is meant to be a patch that fixes issues in nightly-testing!)</p>",
        "id": 426926045,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710627678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>, if the automation is labelling anything with <code>break-mathlib</code> because of existing problems separate from the Lean PR, that is a bug and needs a report.</p>",
        "id": 426932413,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710630350
    },
    {
        "content": "<p>Note Lean PRs are <em>never</em> tested against <code>nightly-testing</code> directly.</p>",
        "id": 426932550,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710630375
    },
    {
        "content": "<p>Instead:</p>\n<ul>\n<li>whenever <code>nightly-testing</code> first goes green on a given nightly, we create a Mathlib tag <code>nightly-testing-YYYY-MM-DD</code></li>\n<li>and update Lean's <code>nightly-with-mathlib</code> branch to point at the Lean nightly for that date</li>\n<li><em>if</em> the base of a Lean PR is <code>nightly-with-mathlib</code>, then we generate a Mathlib branch <code>lean-pr-testing-XXXX</code> from the corresponding <code>nightly-testing-YYYY-MM-DD</code></li>\n<li>however if the base is some other commit, we don't attempt to test against Mathlib and instead post a message to the Lean PR saying that you need to rebase on <code>nightly-with-mathlib</code> if you want Mathlib testing.</li>\n</ul>",
        "id": 426932894,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710630477
    },
    {
        "content": "<p>The combination of these rules means that any <code>breaks-mathlib</code> tag <em>should</em> be a real breakage caused by that PR.</p>",
        "id": 426933011,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710630496
    },
    {
        "content": "<p>Ah, ok. This occurred on <a href=\"https://github.com/leanprover/lean4/pull/3698\">lean4#3698</a>, which should be a very small change; some of the errors were even style linting errors. Could you please verify that this is erroneously labeled?</p>",
        "id": 426933315,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710630582
    },
    {
        "content": "<p>(And, if so, where should I file the bug?)</p>",
        "id": 426933616,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710630655
    },
    {
        "content": "<p>Yup, something is definely wrong there. The Lean CI status messages clearly identify that this PR is based off <code>nightly-2024-03-16</code>, yet over on Mathlib <code>nightly-testing-2024-03-16</code> doesn't exist.</p>",
        "id": 426933945,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710630740
    },
    {
        "content": "<p>Thus, according to the rules I said above, I thought this means that Mathlib CI simply shouldn't run.</p>",
        "id": 426934014,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710630758
    },
    {
        "content": "<p><del>Just making sure: you didn't manually create a <code>lean-pr-testing-3698</code> branch at Mathlib?</del></p>\n<p>The git log shows that leanprover-community-mathlib4-bot created the <code>lean-pr-testing-3698</code> branch.</p>",
        "id": 426934111,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710630784
    },
    {
        "content": "<p><del>(I see it’s struck through, but just to confirm: nope, it was automatic :) )</del> Oops, the git log message hadn’t come through. (Or my scroll state was locked? Zulip went a bit funky.)</p>",
        "id": 426935114,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710631058
    },
    {
        "content": "<p>It looks like <a href=\"https://github.com/leanprover/lean4/actions/runs/8310595327/job/22743278264\">https://github.com/leanprover/lean4/actions/runs/8310595327/job/22743278264</a> is the relevant CI job that did this.</p>",
        "id": 426935467,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631149
    },
    {
        "content": "<blockquote>\n<p>The merge base of this PR coincides with the nightly release<br>\n... but Mathlib does not yet have a 'nightly-testing-2024-03-16' tag.<br>\n... and Std has a 'nightly-testing-2024-03-16' tag.</p>\n</blockquote>\n<p>seems correct.</p>",
        "id": 426935564,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631185
    },
    {
        "content": "<p>Ahha!</p>",
        "id": 426935839,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631249
    },
    {
        "content": "<p>Logic error here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>            <span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"s2\">\"$MATHLIB_REMOTE_TAGS\"</span> <span class=\"o\">]]</span><span class=\"bp\">;</span> <span class=\"k\">then</span>\n              <span class=\"n\">echo</span> <span class=\"s2\">\"... and Mathlib has a 'nightly-testing-$MOST_RECENT_NIGHTLY' tag.\"</span>\n              <span class=\"n\">MESSAGE</span><span class=\"bp\">=</span><span class=\"s2\">\"\"</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">echo</span> <span class=\"s2\">\"... but Mathlib does not yet have a 'nightly-testing-$MOST_RECENT_NIGHTLY' tag.\"</span>\n              <span class=\"n\">MESSAGE</span><span class=\"bp\">=</span><span class=\"s2\">\"- ❗ Mathlib CI can not be attempted yet, as the </span><span class=\"err\">\\</span><span class=\"s2\">`nightly-testing-$MOST_RECENT_NIGHTLY</span><span class=\"err\">\\</span><span class=\"s2\">` tag does not exist there yet. We will retry when you push more commits. If you rebase your branch onto </span><span class=\"err\">\\</span><span class=\"s2\">`nightly-with-mathlib</span><span class=\"err\">\\</span><span class=\"s2\">`, Mathlib CI should run now.\"</span>\n            <span class=\"n\">fi</span>\n\n            <span class=\"n\">STD_REMOTE_TAGS</span><span class=\"bp\">=</span><span class=\"s2\">\"$(git ls-remote https://github.com/leanprover/std4.git nightly-testing-\"</span><span class=\"bp\">$</span><span class=\"n\">MOST_RECENT_NIGHTLY</span><span class=\"s2\">\")\"</span>\n\n            <span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"s2\">\"$STD_REMOTE_TAGS\"</span> <span class=\"o\">]]</span><span class=\"bp\">;</span> <span class=\"k\">then</span>\n              <span class=\"n\">echo</span> <span class=\"s2\">\"... and Std has a 'nightly-testing-$MOST_RECENT_NIGHTLY' tag.\"</span>\n              <span class=\"n\">MESSAGE</span><span class=\"bp\">=</span><span class=\"s2\">\"\"</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">echo</span> <span class=\"s2\">\"... but Std does not yet have a 'nightly-testing-$MOST_RECENT_NIGHTLY' tag.\"</span>\n              <span class=\"n\">MESSAGE</span><span class=\"bp\">=</span><span class=\"s2\">\"- ❗ Std CI can not be attempted yet, as the </span><span class=\"err\">\\</span><span class=\"s2\">`nightly-testing-$MOST_RECENT_NIGHTLY</span><span class=\"err\">\\</span><span class=\"s2\">` tag does not exist there yet. We will retry when you push more commits. If you rebase your branch onto </span><span class=\"err\">\\</span><span class=\"s2\">`nightly-with-mathlib</span><span class=\"err\">\\</span><span class=\"s2\">`, Std CI should run now.\"</span>\n            <span class=\"n\">fi</span>\n</code></pre></div>",
        "id": 426935865,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631255
    },
    {
        "content": "<p>The presence of the Std nightly-testing-2024-03-16 tag overrides the failure message about Mathlib not having a nightly-test-2024-03-16 tag.</p>",
        "id": 426935993,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631297
    },
    {
        "content": "<p>I think this can be fixed just by moving the entire second <code>if</code> statement inside the positive branch of the first <code>if</code>.</p>",
        "id": 426936187,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631341
    },
    {
        "content": "<p>Is this logic also responsible for telling me what to try to rebase onto initially? (I just used the commits it suggested.) And is there something I could currently rebase onto which would cause CI to run?</p>",
        "id": 426937020,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710631578
    },
    {
        "content": "<p>Yes. If you can't rebase onto <code>nightly-with-mathlib</code>, then there is a bug.</p>",
        "id": 426937129,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631608
    },
    {
        "content": "<p>We should only ever be updating Lean's <code>nightly-with-mathlib</code> branch to a nightly if there are green <code>nightly-testing-YYYY-MM-DD</code> branches for that nightly on both Std and Mathlib.</p>",
        "id": 426937243,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631643
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3700\">#3700</a> should fix this.</p>",
        "id": 426937602,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/428973-nightly-testing/topic/Lean.20PR.20testing.20via.20nightly-with-mathlib/near/426937129\">said</a>:</p>\n<blockquote>\n<p>Yes. If you can't rebase onto <code>nightly-with-mathlib</code>, then there is a bug.</p>\n</blockquote>\n<p>Now, is this also the case here? What did you rebase onto?</p>",
        "id": 426937647,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631746
    },
    {
        "content": "<p>I think the advice message with SHAs in <a href=\"https://github.com/leanprover/lean4/pull/3698#issuecomment-2002134358\">https://github.com/leanprover/lean4/pull/3698#issuecomment-2002134358</a> is likely wrong, too.</p>",
        "id": 426937943,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631814
    },
    {
        "content": "<p>I'm not really sure why we are advising a rebase onto a SHA. Rebasing onto <code>nightly-with-mathlib</code> is the only thing that ever makes sense.</p>",
        "id": 426938069,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631857
    },
    {
        "content": "<p>This was added in <a href=\"https://github.com/leanprover/lean4/pull/3417\">lean4#3417</a></p>",
        "id": 426938276,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span></p>",
        "id": 426938327,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710631926
    },
    {
        "content": "<p>Right, I simply used the SHAs suggested, not nightly-with-mathlib!</p>",
        "id": 426938511,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710631973
    },
    {
        "content": "<p>Yes, it suggests rebasing onto <code>NIGHTLY_SHA</code>, which is the SHA of the most recent nightly release in your branch. That's just irrelevant, and should be <code>nightly-with-mathlib</code>.</p>",
        "id": 426938842,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710632065
    },
    {
        "content": "<p>I'll make this change, but wait until <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> can take a look to confirm I'm not missing something.</p>",
        "id": 426938916,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710632085
    },
    {
        "content": "<p>Just for the record, what’s the easiest way to rebase onto <code>nightly-with-mathlib</code> from a fork? (I’m sure there must be a better way than copying the sha from github.com…)</p>",
        "id": 426939313,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710632203
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3701\">lean4#3701</a></p>",
        "id": 426939488,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710632252
    },
    {
        "content": "<p>I would just <code>git checkout nightly-with-mathlib</code> to be honest.</p>",
        "id": 426939639,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710632291
    },
    {
        "content": "<p>Thanks very much for reporting these problems!</p>",
        "id": 426939784,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710632332
    },
    {
        "content": "<p>There is an obvious tension in our current setup</p>\n<ul>\n<li>the more we can test changes to Lean against Mathlib before they land, the easier it is to keep Mathlib up to date (and then this in turn makes it easier to test changes, because <code>nightly-with-mathlib</code> is fresh!)</li>\n<li>but testing against Mathlib adds a lot of friction to Lean development</li>\n</ul>",
        "id": 426940066,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710632408
    },
    {
        "content": "<p>Hmm, if I <code>git checkout nightly-with-mathlib</code>, I get that the pathspec did not match any file(s) known to git. (Also, would this be something I do before every rebase-onto?)</p>",
        "id": 426940285,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710632474
    },
    {
        "content": "<p>Hmm...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"k\">with</span><span class=\"bp\">-</span><span class=\"n\">mathlib</span>\n<span class=\"n\">Switched</span> <span class=\"n\">to</span> <span class=\"n\">branch</span> <span class=\"bp\">'</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"k\">with</span><span class=\"bp\">-</span><span class=\"n\">mathlib'</span>\n<span class=\"n\">Your</span> <span class=\"n\">branch</span> <span class=\"n\">is</span> <span class=\"n\">up</span> <span class=\"n\">to</span> <span class=\"n\">date</span> <span class=\"k\">with</span> <span class=\"bp\">'</span><span class=\"n\">origin</span><span class=\"bp\">/</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"k\">with</span><span class=\"bp\">-</span><span class=\"n\">mathlib'.</span>\n</code></pre></div>",
        "id": 426940550,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710632537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/428973-nightly-testing/topic/Lean.20PR.20testing.20via.20nightly-with-mathlib/near/426939784\">said</a>:</p>\n<blockquote>\n<p>Thanks very much for reporting these problems!</p>\n</blockquote>\n<p>Thanks very much for being so responsive about them! :)</p>",
        "id": 426940578,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710632545
    },
    {
        "content": "<p>Is that on a fork?</p>",
        "id": 426940623,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710632565
    },
    {
        "content": "<p>I don't think you should have to do this multiple times. Once you have a tracking branch for <code>nightly-with-mathlib</code>, I think it should be sufficient to <code>git fetch &amp;&amp; git rebase -i origin/nightly-with-mathlib</code>.</p>",
        "id": 426940665,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710632578
    },
    {
        "content": "<p>(And in my experience VSCode is running <code>git fetch</code> often enough that it isn't needed.)</p>",
        "id": 426940753,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710632602
    },
    {
        "content": "<p>Oh, do I have to make <code>nightly-with-testing</code> in my fork as well (or something like that)?</p>",
        "id": 426940996,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710632670
    },
    {
        "content": "<p>Hmm, it looks like my fork is <code>origin</code>, while the lean4 repo is <code>upstream</code>. But I can’t seem to checkout or rebase onto <code>upstream/nightly-with-mathlib</code>:</p>",
        "id": 426942447,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710633071
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lean4<span class=\"w\"> </span>▸<span class=\"w\"> </span>git<span class=\"w\"> </span>rebase<span class=\"w\"> </span>upstream/nightly-with-mathlib\nfatal:<span class=\"w\"> </span>invalid<span class=\"w\"> </span>upstream<span class=\"w\"> </span><span class=\"s1\">'upstream/nightly-with-mathlib'</span>\nlean4<span class=\"w\"> </span>▸<span class=\"w\"> </span>git<span class=\"w\"> </span>checkout<span class=\"w\"> </span>upstream/nightly-with-mathlib\nerror:<span class=\"w\"> </span>pathspec<span class=\"w\"> </span><span class=\"s1\">'upstream/nightly-with-mathlib'</span><span class=\"w\"> </span>did<span class=\"w\"> </span>not<span class=\"w\"> </span>match<span class=\"w\"> </span>any<span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span>known<span class=\"w\"> </span>to<span class=\"w\"> </span>git\n</code></pre></div>",
        "id": 426942574,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710633106
    },
    {
        "content": "<p>The nice thing about SHA's is that everyone can agree on them, and they're always accessible :) (The not-so-nice thing is that the instructions become outdated if <code>nightly-with-mathlib</code> progresses.)</p>",
        "id": 426942963,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710633223
    },
    {
        "content": "<p>Ok, it looks like I have to manually fetch <code>upstream</code>—VS code doesn’t keep that updated by default.</p>",
        "id": 426943658,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710633417
    },
    {
        "content": "<p><del>Though now I get:</del></p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lean4<span class=\"w\"> </span>▸<span class=\"w\"> </span>git<span class=\"w\"> </span>rebase<span class=\"w\"> </span>0b01ceb3bb3334fd6c2f3b24996646046722c62a<span class=\"w\"> </span>--onto<span class=\"w\"> </span>nightly-with-testing\nfatal:<span class=\"w\"> </span>Does<span class=\"w\"> </span>not<span class=\"w\"> </span>point<span class=\"w\"> </span>to<span class=\"w\"> </span>a<span class=\"w\"> </span>valid<span class=\"w\"> </span>commit<span class=\"w\"> </span><span class=\"s1\">'nightly-with-testing'</span>\n</code></pre></div>\n<p><del>(for whatever variation of <code>nightly-with-testing</code> ( <code>upstream/</code>, <code>origin/</code>) I try)</del> Ok, that's because my brain turns <code>mathlib</code> into <code>testing</code>. :)</p>",
        "id": 426944042,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710633518
    },
    {
        "content": "<p>Ok, all good!</p>",
        "id": 426944953,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710633750
    },
    {
        "content": "<p>Thanks for all the help—I've now rebased <a href=\"https://github.com/leanprover/lean4/pull/3698\">lean4#3698</a> onto <code>nightly-with-mathlib</code>. I guess we'll see what happens!</p>",
        "id": 426946877,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710634256
    },
    {
        "content": "<p>Re: <a href=\"https://github.com/leanprover/lean4/pull/3701\">lean4#3701</a>, is <code>origin/nightly-with-mathlib</code> always the right thing to suggest, especially if <code>origin</code> is usually the fork? Does that depend on keeping the branch on the fork in sync with upstream?</p>",
        "id": 426947248,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710634357
    },
    {
        "content": "<p>It hadn't occurred to me that people didn't always use <code>origin</code> for the original repository. :-)</p>",
        "id": 426959464,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710637846
    },
    {
        "content": "<p>So yes, it is wrong.</p>",
        "id": 426959509,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710637860
    },
    {
        "content": "<p>This seems hard to give a reliable suggestion for without using a SHA...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">fetch</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4.git</span> <span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"k\">with</span><span class=\"bp\">-</span><span class=\"n\">mathlib</span>\n<span class=\"n\">git</span> <span class=\"n\">rebase</span> <span class=\"n\">FETCH_HEAD</span>\n</code></pre></div>\n<p>would work?</p>",
        "id": 426961199,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710638328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/428973-nightly-testing/topic/Lean.20PR.20testing.20via.20nightly-with-mathlib/near/426959464\">said</a>:</p>\n<blockquote>\n<p>It hadn't occurred to me that people didn't always use <code>origin</code> for the original repository. :-)</p>\n</blockquote>\n<p>I think github recommends you use <code>origin</code> for your personal fork and <code>upstream</code> for the main repo</p>",
        "id": 426976428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710642700
    },
    {
        "content": "<p>I'd like to report a minor bug in the message produced by the PR testing automation: in <a href=\"https://github.com/leanprover/lean4/pull/3973\">lean4#3973</a>, the message says</p>\n<blockquote>\n<p>Mathlib branch <a href=\"https://github.com/leanprover-community/mathlib4/compare/nightly-testing...lean-pr-testing-3973\">lean-pr-testing-3973</a> built against this PR, but linting failed. (2024-04-23 01:08:08) <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8793038884\">View Log</a></p>\n</blockquote>\n<p>However, it seems that it both failed to build <em>and</em> failed to lint. (Maybe Mathlib CI used to only lint if the build had succeeded, so a failed lint was at least an indication of a successful build?)</p>",
        "id": 434898268,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713844852
    },
    {
        "content": "<p>Thanks, I thought I'd fixed that one, will look again. The underlying problem is that Mathlib now runs lint even when the build fails, and the reporting logic has not caught up yet.</p>",
        "id": 434902270,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713847549
    }
]