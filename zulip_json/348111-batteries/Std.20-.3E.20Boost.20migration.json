[
    {
        "content": "<p>We're making plans for the rename of Std to Boost. W'd like to do it shortly after the release of <code>v4.8.0-rc1</code>. <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> is going to make some changes to <code>lake</code> to help the transition, ensuring that there are custom error messages explaining what to do when updating.</p>\n<p>An important question that w'd like to put open to Mario / the @admin team / Boost contributors is whether to leave <code>boost</code> in the <code>leanprover</code> organization or migrate it to the <code>leanprover-community</code> organization.</p>\n<p>We've checked that in either case (i.e. <code>leanprover/std4</code> -&gt; <code>leanprover/boost</code> or <code>leanprover-community/boost</code>) the redirects that Github sets up will mean that repositories using <code>v4.7.0</code> or earlier will still find the dependency, so as far as we can tell there is no user-experience difference between the two. (And indeed we think this is still the case even if it is done in two steps, at different times.) There will of course be user experience problems when people update their repositories, and this is what Mac will work on to make smoother.</p>\n<p>My recommendation is to move it <code>leanprover-community/boost</code> in a single step. I think this best reflects:</p>\n<ul>\n<li>its open development model</li>\n<li>that the FRO isn't responsible for it</li>\n<li>and that future responsibility for its management ultimately lands with @admin team, rather than the Lean FRO.</li>\n</ul>\n<p>There are still a bunch of open questions about boost (does it need additional maintainers? could it be split into smaller packages? should parts of it be folded back into Aesop/ProofWidgets/Mathlib? etc), but I'd prefer that we address those questions separately from the migration process, or at least afterwards, in particular because these are questions for the maintainers and the admin team, rather than the FRO.</p>",
        "id": 435086994,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713918339
    },
    {
        "content": "<p>I'm inclined to agree that it should move to leanprover-community</p>",
        "id": 435090792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713921348
    },
    {
        "content": "<p>(Although there are some weird and surprising repos in the leanprover org...)</p>",
        "id": 435090853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713921398
    },
    {
        "content": "<p>Before we do that though, I'd like to get the bikeshed out of the way and poll people's opinions on the name. Is Boost actually a good choice? (For those who don't know, <a href=\"https://www.boost.org/\">Boost</a> is the name of a popular C++ megapackage with a relatively open development model, not unlike mathlib. So it's not a bad name, quite on-the-nose as it were, although it might have a bit <em>too</em> much brand recognition, resulting in confusion and SEO difficulties.)</p>",
        "id": 435091175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713921711
    },
    {
        "content": "<p>/poll What should the \"mathlib for CS\" library be called?<br>\nBoost<br>\nStd2<br>\nMore<br>\nExtra<br>\nPlus<br>\nProglib</p>",
        "id": 435091387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713921889
    },
    {
        "content": "<p>What about \"Bolster\"?</p>",
        "id": 435102214,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713929234
    },
    {
        "content": "<p>Should we use a word associated with getting fatter? Or muscle? I'm thinking what is a natural addition to lean.</p>",
        "id": 435103864,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713930348
    },
    {
        "content": "<p>Re: muscle: \"Flex\"? (Also connotes \"greater flexibility\" thanks to all the extra functionality.)</p>",
        "id": 435104735,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713930931
    },
    {
        "content": "<p>Another (unrelated) option I'll throw into the mix is \"Amp\" (as in amplify, like boost), which is nice and short.</p>",
        "id": 435104855,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1713931006
    },
    {
        "content": "<p>Is everything in <code>Std</code> namespaces/ imports going to change too?</p>",
        "id": 435118012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713939622
    },
    {
        "content": "<blockquote>\n<p>There will of course be user experience problems when people update their repositories, and this is what Mac will work on to make smoother.</p>\n</blockquote>\n<p>I take that to be a 'yes'</p>",
        "id": 435119491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713940376
    },
    {
        "content": "<p>this will be the biggest deprecation/rename job we've ever attempted (assuming we don't just transition cold-turkey), and it's working at a level we historically have not had good support for (import renames and <code>require</code> renames)</p>",
        "id": 435119854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713940550
    },
    {
        "content": "<p>I'd love it if Boost v1 could just populate the Std import namespace with files which produce a warning telling you to change your imports</p>",
        "id": 435120154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713940672
    },
    {
        "content": "<p>Yes, the import renames we're not going to be able to help with. <code>require</code> Mac is working on.</p>",
        "id": 435120155,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713940672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/Std.20-.3E.20Boost.20migration/near/435120154\">said</a>:</p>\n<blockquote>\n<p>I'd love it if Boost v1 could just populate the Std import namespace with files which produce a warning telling you to change your imports</p>\n</blockquote>\n<p>That's a good idea, and there's no obstacle to doing that.</p>",
        "id": 435120238,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713940695
    },
    {
        "content": "<p>and then we add Std for real at the same time as removing those shims</p>",
        "id": 435120299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713940718
    },
    {
        "content": "<p>(just a heads up that I will shortly disappear from this thread for about 72 hours)</p>",
        "id": 435120335,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713940735
    },
    {
        "content": "<p>I think the current obstacle is that packages can't populate multiple top level namespaces?</p>",
        "id": 435120390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713940761
    },
    {
        "content": "<p>unless boost actually has a package in it named <code>Std</code>, which would conflict with the nascent <code>Std</code> library in core during the transition</p>",
        "id": 435120461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713940802
    },
    {
        "content": "<p>i tried to click in the poll to no avail, so i'm manually voting batteries. boost seo interferes and bad memories of boost</p>",
        "id": 435490933,
        "sender_full_name": "Alok Singh",
        "timestamp": 1714093984
    },
    {
        "content": "<p>The leanest kind of <a href=\"https://en.wikipedia.org/wiki/List_of_battery_sizes\">cylindrical battery</a> appears to be AAAA. One could name the library LeAAAAn, or Le4An for short.</p>",
        "id": 435495830,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1714097386
    },
    {
        "content": "<p><code>LeAAAAn</code>is how i feel when something is missing in the standard library</p>",
        "id": 435603583,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1714143634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/Std.20-.3E.20Boost.20migration/near/435086994\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> is going to make some changes to <code>lake</code> to help the transition, ensuring that there are custom error messages explaining what to do when updating.</p>\n</blockquote>\n<p>The draft for the improved error message for a mismatched require (i.e., <code>require std from &lt;boost&gt;</code>) is up at <a href=\"https://github.com/leanprover/lean4/pull/3999\">lean4#3999</a>. However, from this thread, it sounds like there might be more Lake magic desired here to assist with this transition. Feel free to suggest additional changes!</p>",
        "id": 435676905,
        "sender_full_name": "Mac Malone",
        "timestamp": 1714177865
    },
    {
        "content": "<p>What's the plan for lakefiles which currently download std from leanprover/std4, which at some point will start downloading an entirely different library called std?</p>",
        "id": 435689874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714191135
    },
    {
        "content": "<p>Or will the new std live at a 4-less url, which avoids this issue?</p>",
        "id": 435689927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714191210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> The new Std will live in core and not in a separate repoisotry, so that should hopefully avoid the issue.</p>",
        "id": 435690962,
        "sender_full_name": "Mac Malone",
        "timestamp": 1714192297
    },
    {
        "content": "<p>Okay, it seems that <code>Boost</code> / <code>Batteries</code> / <code>Amp</code> are the only viable candidates. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, will you decide how this is going to be decided (you decide, another polll between those three, whatever). If it's possible to have a final decision on this asap that would be lovely. :-)</p>",
        "id": 435836842,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714284900
    },
    {
        "content": "<p>Okay <span class=\"user-mention\" data-user-id=\"*\">@stream</span>, let's have a runoff election: Please vote for only one this time.</p>",
        "id": 435837417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714285142
    },
    {
        "content": "<p>/poll What should the \"mathlib for CS\" library be called?<br>\nBoost<br>\nBatteries<br>\nAmp</p>",
        "id": 435837437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714285148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> Can you set the time limit?</p>",
        "id": 435837565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714285199
    },
    {
        "content": "<p>I think <time datetime=\"2024-04-29T13:00:00Z\">2024-04-29T23:00:00+10:00</time> or thereabouts should be fine.</p>\n<p>The dependency here is that Mac will need a moment to push a commit to Lake that knows about the new name, in time for v4.8.0-rc1, and I'm hoping that if all goes well (i.e. better than expected right now!) we can be cutting v.4.8.0-rc1 from the nightly that lands at <time datetime=\"2024-04-30T08:00:00Z\">2024-04-30T18:00:00+10:00</time> or so.</p>",
        "id": 435837968,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714285341
    },
    {
        "content": "<p>(Is it too late to suggest that only people who've ever contributed to Std in some way (or at least explicitly used it??) vote?) (edit, whatever, too difficult to set a criterion...)</p>",
        "id": 435838703,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714285826
    },
    {
        "content": "<p>It's too bad none of those are searchable :)</p>",
        "id": 435844272,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714289574
    },
    {
        "content": "<p>I really think that making it unsearchable is not great, as much as I like the name Boost otherwise</p>",
        "id": 435844996,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1714290178
    },
    {
        "content": "<p>I don't think it will be a major issue, you'll still be able to find it via \"lean boost\" or something</p>",
        "id": 435845029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714290215
    },
    {
        "content": "<p>\"std\" is of course similarly unsearchable</p>",
        "id": 435845116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714290271
    },
    {
        "content": "<p>Maybe we could pick a combination that doesn't already have a lot of hits in a search? I see that \"lean boost\" is dominated by health supplements, <a href=\"https://www.google.com/search?q=lean+boost\">https://www.google.com/search?q=lean+boost</a>.</p>",
        "id": 435854725,
        "sender_full_name": "Phil de Joux",
        "timestamp": 1714298295
    },
    {
        "content": "<p>As short as \"std\" we could use \"too\". It has meaning too if we pun \"lean to\" as \"lean too\";</p>\n<blockquote>\n<p>A lean-to is a type of simple structure originally added to an existing building with the rafters \"leaning\" against another wall. Free-standing lean-to structures are generally used as shelters.</p>\n</blockquote>",
        "id": 435856025,
        "sender_full_name": "Phil de Joux",
        "timestamp": 1714298963
    },
    {
        "content": "<p><code>Too</code> isn't great for speaking aloud, in terms of ambiguity</p>",
        "id": 435864929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714301989
    },
    {
        "content": "<p>Silly question (or one discussed elsewhere) I'm sure but is \"Mathlib for CS\" a description of Std today, of its aspirations, or of neither and I'm reading too much into \"CS\"? Specifically today Std is a sort of \"missing\" programming standard library is it not? Is it aspiring to be a CS formalization project?</p>",
        "id": 435877815,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714313846
    },
    {
        "content": "<p>From my understanding it's supposed to rather be Maths ∩ CS ?</p>",
        "id": 435877924,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714313941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/348111-std4/topic/Std.20-.3E.20Boost.20migration/near/435877815\">said</a>:</p>\n<blockquote>\n<p>Silly question (or one discussed elsewhere) I'm sure but is \"Mathlib for CS\" a description of Std today, of its aspirations, or of neither and I'm reading too much into \"CS\"? Specifically today Std is a sort of \"missing\" programming standard library is it not? Is it aspiring to be a CS formalization project?</p>\n</blockquote>\n<p>I am not sure that makes sense for CS. Unlike math, CS is distributed too broadly from a conceptual point of view for a single unified library to make sense. I am guessing calling it \"Mathlib for CS\" signifies the maintenance strategy going forward.</p>",
        "id": 435878527,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714314490
    },
    {
        "content": "<p>Does this mean that abstract CS like \"formal grammars\" or \"complexity theory\" is in scope? My understanding was that it was not for theoretical CS, but for things which are actually executed (and lemmas about them).</p>",
        "id": 435879146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714315046
    },
    {
        "content": "<p>From Leo's message I got the following:</p>\n<ol>\n<li>The new Std is meant to support Lean the programming language.</li>\n<li>Batteries/Boost is a community maintained version of this new Std with extra features (like boost for CPP)</li>\n</ol>\n<p>This suggests it will contain libraries for basic data structures and utilities of the kind rust's standard library has.</p>",
        "id": 435879460,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714315265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/348111-std4/topic/Std.20-.3E.20Boost.20migration/near/435877924\">said</a>:</p>\n<blockquote>\n<p>From my understanding it's supposed to rather be Maths ∩ CS ?</p>\n</blockquote>\n<p>According to Thorsten Altenkirch that's type theory^^</p>",
        "id": 435879926,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1714315410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/348111-std4/topic/Std.20-.3E.20Boost.20migration/near/435879460\">said</a>:</p>\n<blockquote>\n<p>From Leo's message I got the following:</p>\n<ol>\n<li>The new Std is meant to support Lean the programming language.</li>\n<li>Batteries/Boost is a community maintained version of this new Std with extra features (like boost for CPP)</li>\n</ol>\n<p>This suggests it will contain libraries for basic data structures and utilities of the kind rust's standard library has.</p>\n</blockquote>\n<p>The new std inside of Lean will contain stuff that you would expect from a programming language + enough theory that you can do proofs over datastructures and such.</p>\n<p>The scope of batteries/boost/amp is basically up to the maintainer team of it.</p>",
        "id": 435880241,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1714315611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/348111-std4/topic/Std.20-.3E.20Boost.20migration/near/435844996\">said</a>:</p>\n<blockquote>\n<p>I really think that making it unsearchable is not great, as much as I like the name Boost otherwise</p>\n</blockquote>\n<p>Note that <code>batteries</code> is also a name of one of the OCaml alternative standard libraries: <a href=\"https://ocaml-batteries-team.github.io/batteries-included/hdoc2/\">https://ocaml-batteries-team.github.io/batteries-included/hdoc2/</a> so it's not like this name will not lead to search engine confusion either</p>",
        "id": 435880289,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1714315674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/348111-std4/topic/Std.20-.3E.20Boost.20migration/near/435879146\">said</a>:</p>\n<blockquote>\n<p>Does this mean that abstract CS like \"formal grammars\" or \"complexity theory\" is in scope? My understanding was that it was not for theoretical CS, but for things which are actually executed (and lemmas about them).</p>\n</blockquote>\n<p>This is my understanding / intention as well. Theoretical CS is in scope only insofar as it is useful for proving theorems about executable functions with practical application (e.g. automata theory used for correctness proofs of a regex engine). My guess is that theoretical CS for its own sake is better suited for mathlib (e.g. the <code>Computability/</code> folder), because it benefits more from having access to / contributing to the rest of the mathematical infrastructure there.</p>",
        "id": 435944970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714362641
    },
    {
        "content": "<p>Got it, OK, then it's me reading too much into \"CS\" then it sounds like, I don't personally generally consider programming to be part of CS and basically always assume it means theoretical but sounds like if anything that certainly is not what was intended. While I'm at it with the silly ones, what is the reason <code>Std</code> isn't a good name (personally I like it better than any of the others in the poll).</p>",
        "id": 435951353,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714364705
    },
    {
        "content": "<p>I do too. :( Short answer: FRO wants that for themselves</p>",
        "id": 435951493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714364742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, on the assumption that the outcome of the poll above doesn't change in the next 8 hours or so, are you happy if I get the ball rolling with <code>batteries</code>?</p>",
        "id": 435952632,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714365051
    },
    {
        "content": "<p>yes</p>",
        "id": 435952681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714365077
    },
    {
        "content": "<p>Will this stream also be renamed? Or do we start a new one?</p>",
        "id": 435963579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714371614
    },
    {
        "content": "<p>Renaming sounds best. The stream description is quite clear that it is about the github repo and should move with it</p>",
        "id": 435973409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714375294
    },
    {
        "content": "<p>For the foreseeable future I'm guessing we can just use <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> for questions and suggestions regarding the new std</p>",
        "id": 435973689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714375400
    },
    {
        "content": "<p>Is the new GitHub repo going to be <code>/batteries</code>, <code>/batteries4</code>, <code>/Batteries</code>, ...?</p>",
        "id": 435977086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714376681
    },
    {
        "content": "<p><code>batteries</code></p>",
        "id": 435977209,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714376718
    },
    {
        "content": "<p>I think it's safe to drop the 4</p>",
        "id": 435977216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714376720
    },
    {
        "content": "<p>What's the reasoning for batteries again?</p>",
        "id": 435977225,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714376725
    },
    {
        "content": "<p>\"<a href=\"https://en.wikipedia.org/wiki/Batteries_Included\">batteries included</a>\"</p>",
        "id": 435977250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714376733
    },
    {
        "content": "<p>it's a set phrase used to suggest the \"full featured\" version of a thing as opposed to the minimalistic version</p>",
        "id": 435977425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714376780
    },
    {
        "content": "<blockquote>\n<p>\"Batteries included\" (slang), in a product usability (mostly in software) it states that the product comes together with all possible parts required for full usability</p>\n</blockquote>",
        "id": 435977738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714376902
    },
    {
        "content": "<p>And there is precedent for the name in ocaml, right?</p>",
        "id": 435977770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714376915
    },
    {
        "content": "<p>wikipedia also mentions it as \"the motto of the python programming language\" although that sounds like [citation needed] to me</p>",
        "id": 435977875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714376955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/Std.20-.3E.20Boost.20migration/near/435977250\">said</a>:</p>\n<blockquote>\n<p>\"<a href=\"https://en.wikipedia.org/wiki/Batteries_Included\">batteries included</a>\"</p>\n</blockquote>\n<p>Though arguably Std is now the included batteries, and <code>batteries</code> are explicitly only the batteries that core decides not to include</p>",
        "id": 435980019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714377714
    },
    {
        "content": "<p>Initially, I really can't imagine a standard-ish library with such a long (&gt; 5 characters) and plural name, until seeing <code>ocaml-batteries-team/batteries-included</code>, <code>open Batteries</code>, and <code>Bat*</code> types in OCaml.</p>\n<p>Now I can see future projects depending on \"Lean with batteries\".</p>",
        "id": 435981186,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714378119
    },
    {
        "content": "<p>I quite like <code>Amp</code> for the brevity</p>",
        "id": 435981300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714378159
    },
    {
        "content": "<p>Me too, but I think the decision has been made and it's going to be <code>batteries</code></p>",
        "id": 436021058,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1714390810
    },
    {
        "content": "<p>It is short for another thing too from an unfortunate area that Lean already has a name collision with. Boost also but from a fictional universe. No one that I know of is doing batteries.</p>",
        "id": 436024972,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714391963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/348111-std4/topic/Std.20-.3E.20Boost.20migration/near/435880289\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/348111-std4/topic/Std.20-.3E.20Boost.20migration/near/435844996\">said</a>:</p>\n<blockquote>\n<p>I really think that making it unsearchable is not great, as much as I like the name Boost otherwise</p>\n</blockquote>\n<p>Note that <code>batteries</code> is also a name of one of the OCaml alternative standard libraries: <a href=\"https://ocaml-batteries-team.github.io/batteries-included/hdoc2/\">https://ocaml-batteries-team.github.io/batteries-included/hdoc2/</a> so it's not like this name will not lead to search engine confusion either</p>\n</blockquote>",
        "id": 436025762,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1714392185
    },
    {
        "content": "<p>Less obtuse: AMPhetamines. Boost is slang for that in cyberpunk.</p>",
        "id": 436026551,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714392426
    },
    {
        "content": "<p>Though then we can make the \"lack of <code>Amp</code> set <code>Mathlib</code> back a month\" joke</p>",
        "id": 436027115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714392587
    },
    {
        "content": "<p>There are many jokes to be made down this path.</p>",
        "id": 436027308,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714392627
    },
    {
        "content": "<p>Let's not.</p>",
        "id": 436027364,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714392644
    },
    {
        "content": "<p>My point, yes</p>",
        "id": 436027412,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714392655
    },
    {
        "content": "<p>My impression of English slang as a second language speaker is that any word or turn of phrase will acquire alternative meanings sooner or later. It seems to be a hopeless task to try and anticipate every possible alternative meaning. Same goes for google searches.</p>",
        "id": 436031637,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714393841
    },
    {
        "content": "<p>Probably encouraging users to start searches with <code>leanprover</code> instead of <code>lean</code> is enough to resolve most search issues</p>",
        "id": 436031826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714393896
    },
    {
        "content": "<p>Just like <code>golang</code> instead of <code>go</code></p>",
        "id": 436031849,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714393902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/Std.20-.3E.20Boost.20migration/near/435837968\">said</a>:</p>\n<blockquote>\n<p>The dependency here is that Mac will need a moment to push a commit to Lake that knows about the new name, in time for v4.8.0-rc1, and I'm hoping that if all goes well (i.e. better than expected right now!) we can be cutting v.4.8.0-rc1 from the nightly that lands at <time datetime=\"2024-04-30T08:00:00Z\">2024-04-30T18:00:00+10:00</time> or so.</p>\n</blockquote>\n<p>I have updated <a href=\"https://github.com/leanprover/lean4/pull/3999\">lean4#3999</a> (the special eroor message) to be name agnostic, so deciding on a name is no longer a prerequisite to the merge. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 436035675,
        "sender_full_name": "Mac Malone",
        "timestamp": 1714394865
    },
    {
        "content": "<p>Follow up: In which release will this update be applied. I just noticed that the github-actions bot published release 4.8.0-rc1</p>",
        "id": 436684070,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714653553
    },
    {
        "content": "<p>But there are no notes yet, whence the question</p>",
        "id": 436684107,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714653570
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3999\">lean4#3999</a> landed in v4.8.0-rc1.</p>",
        "id": 436792528,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714692743
    },
    {
        "content": "<p>I have opened <a href=\"https://github.com/leanprover/std4/pull/780\">std4#780</a>, which attempts the rename to batteries.</p>",
        "id": 436826117,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714718484
    },
    {
        "content": "<p>I'd like to merge <a href=\"https://github.com/leanprover/std4/pull/780\">std4#780</a>, effect the transfer/rename, and then work on whatever cleanup is needed, soon. Ideally this would start at about <time datetime=\"2024-05-06T04:00:00Z\">2024-05-06T14:00:00+10:00</time>. Happy to delay by up to a day if anyone wants to be on hand to help put out fires. :-)</p>",
        "id": 437091863,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714897487
    },
    {
        "content": "<p>I'm going to be traveling tomorrow so delaying sounds good</p>",
        "id": 437092011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714897574
    },
    {
        "content": "<p>When is good?</p>",
        "id": 437098680,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714903655
    },
    {
        "content": "<p>I'll be on a regular schedule starting <time datetime=\"2024-05-07T07:00:00Z\">2024-05-07T09:00:00+02:00</time></p>",
        "id": 437131102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714921908
    },
    {
        "content": "<p>you can do it before then but I may or may not be around for firefighting</p>",
        "id": 437131300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714921950
    },
    {
        "content": "<p>Okay, I will start a bit before that, but then be out roughly <time datetime=\"2024-05-07T07:00:00Z\">2024-05-07T17:00:00+10:00</time> - <time datetime=\"2024-05-07T11:00:00Z\">2024-05-07T21:00:00+10:00</time> !</p>",
        "id": 437186106,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714966103
    },
    {
        "content": "<p><span aria-label=\"start\" class=\"emoji emoji-1f3c1\" role=\"img\" title=\"start\">:start:</span></p>",
        "id": 437376080,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715055404
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/leanprover/std4/pull/780\">std4#780</a> is back up to date, and I've hit merge.</p>\n<p>Off to do the transfer/rename.</p>",
        "id": 437376379,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715055633
    },
    {
        "content": "<p>Okay, done.</p>",
        "id": 437376531,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715055760
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4\">https://github.com/leanprover/std4</a> successfully redirects to <a href=\"https://github.com/leanprover-community/batteries\">https://github.com/leanprover-community/batteries</a></p>",
        "id": 437376568,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715055783
    },
    {
        "content": "<p>My local checkout of std continues to work (fetch/pull/push) without changing the URL.</p>",
        "id": 437376625,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715055836
    },
    {
        "content": "<p><code>main</code> (with all the renames) was automatically merged into <code>nightly-testing</code>, and that still builds.</p>",
        "id": 437376677,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715055857
    },
    {
        "content": "<p>I tried running <code>lake update</code> in <code>aesop</code>, and received:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">update</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">:</span> <span class=\"n\">updating</span> <span class=\"n\">repository</span> <span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std'</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"bp\">'</span><span class=\"mi\">56</span><span class=\"n\">d2e4ee226603eb6b90b05f6b944bde42672cd5'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">the</span> <span class=\"bp\">'</span><span class=\"n\">std'</span> <span class=\"n\">package</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">renamed</span> <span class=\"n\">to</span> <span class=\"bp\">'</span><span class=\"n\">batteries'</span> <span class=\"n\">and</span> <span class=\"n\">moved</span> <span class=\"n\">to</span> <span class=\"n\">the</span>\n<span class=\"bp\">'</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community'</span> <span class=\"n\">organization</span><span class=\"bp\">;</span> <span class=\"n\">downstream</span> <span class=\"n\">packages</span> <span class=\"n\">which</span> <span class=\"n\">wish</span> <span class=\"n\">to</span>\n<span class=\"n\">update</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">new</span> <span class=\"n\">std</span> <span class=\"n\">should</span> <span class=\"n\">replace</span>\n\n  <span class=\"n\">require</span> <span class=\"n\">std</span> <span class=\"k\">from</span>\n    <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/std4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n\n<span class=\"k\">in</span> <span class=\"n\">their</span> <span class=\"n\">Lake</span> <span class=\"n\">configuration</span> <span class=\"n\">file</span> <span class=\"k\">with</span>\n\n  <span class=\"n\">require</span> <span class=\"n\">batteries</span> <span class=\"k\">from</span>\n    <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover-community/batteries\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">aesop</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">batteries'</span> <span class=\"n\">was</span> <span class=\"n\">required</span> <span class=\"n\">as</span> <span class=\"bp\">'</span><span class=\"n\">std'</span>\n</code></pre></div>",
        "id": 437376767,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715055961
    },
    {
        "content": "<p>This looks great, thanks <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>!</p>",
        "id": 437376813,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715055970
    },
    {
        "content": "<p>After making that change, and running <code>lake update</code> then <code>lake build</code>, we get a million errors, because at present there's nothing we do to help with updating imports.</p>",
        "id": 437376888,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715056034
    },
    {
        "content": "<p>I've just done a replacement of <code>s/^import Std\\.//import Batteries./</code>.</p>",
        "id": 437377005,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715056105
    },
    {
        "content": "<p>Next there are various <code>open</code> statements, e.g. <code>open Std (BinomialHeap)</code>.</p>",
        "id": 437377021,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715056121
    },
    {
        "content": "<p>Acutally only one, and the tests seem to work, so I've opened <a href=\"https://github.com/leanprover-community/aesop/pull/132\">https://github.com/leanprover-community/aesop/pull/132</a> moving <code>aesop</code> to <code>batteries</code>.</p>",
        "id": 437377188,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715056217
    },
    {
        "content": "<p>Similarly <a href=\"https://github.com/leanprover-community/ProofWidgets4/pull/56\">https://github.com/leanprover-community/ProofWidgets4/pull/56</a> for ProofWidgets. In fact ProofWidgets barely uses batteries at all -- one import in one demo, apparently.</p>",
        "id": 437377382,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715056428
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/import-graph/pull/6\">https://github.com/leanprover-community/import-graph/pull/6</a> for the <code>import-graph</code> repository (upstream of mathlib)</p>",
        "id": 437377744,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715056689
    },
    {
        "content": "<p>Cutting a <code>v0.0.36</code> release for ProofWidgets now.</p>",
        "id": 437377775,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715056728
    },
    {
        "content": "<p>(Until that is available, I can't update Mathlib, as we'll get Batteries via the direct <code>require</code>, and the old Std via ProofWidgets.)</p>",
        "id": 437377888,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715056837
    },
    {
        "content": "<p>But it's ready now. :-)</p>",
        "id": 437377927,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715056866
    },
    {
        "content": "<p>(... working on mathlib ...)</p>",
        "id": 437378492,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715057367
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12720\">#12720</a> is building locally; if someone could review and/or delegate that would be great!</p>",
        "id": 437378605,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715057454
    },
    {
        "content": "<p>Curiously <code>ToFormat</code> and <code>format</code> are in the <code>Std</code> namespace!</p>",
        "id": 437378766,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715057605
    },
    {
        "content": "<p>Yes, some of the things in the Std namespace are defined in core for some reason</p>",
        "id": 437386215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715063282
    },
    {
        "content": "<p><code>Std.Range</code> too is a bit weird</p>",
        "id": 437386267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715063290
    },
    {
        "content": "<p>Can someone change the description of the GitHub repository from \"Standard Library for Lean 4\" to 'The \"batteries included\" extended library for Lean 4'?</p>",
        "id": 437386540,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1715063449
    },
    {
        "content": "<p>Shall we rename this stream? I suspect it will break links.</p>",
        "id": 437386941,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715063693
    },
    {
        "content": "<p>Perhaps we can create a new stream for Batteries and leave this stream for Std.</p>",
        "id": 437387575,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1715064014
    },
    {
        "content": "<p>If the link redirects to batteries, then older projects would also have to watch out right?</p>",
        "id": 437389768,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1715065151
    },
    {
        "content": "<p>I could have an older project I share with a colleague, and suddenly lake might complain that when running cache or update it cannot find std</p>",
        "id": 437389863,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1715065204
    },
    {
        "content": "<p>I think the complaint is a warning not an error</p>",
        "id": 437390096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715065311
    },
    {
        "content": "<p>If you need to update, you will need to change URLs. Otherwise, as far as I'm aware at present, you don't need to do anything.</p>",
        "id": 437390244,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715065389
    },
    {
        "content": "<p>I am running into what seem to be cache-related issues (while updating loogle, so all a bit special), but it seems that <code>cache</code> needs to be be told about <code>batteries</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO this should be generated automatically from the information in `lakefile.lean`.</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">CacheM.getContext</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">CacheM.Context</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">root</span> <span class=\"bp\">←</span> <span class=\"n\">CacheM.mathlibDepPath</span>\n  <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"o\">[</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"Mathlib\"</span><span class=\"o\">,</span> <span class=\"n\">root</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"Archive\"</span><span class=\"o\">,</span> <span class=\"n\">root</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"Counterexamples\"</span><span class=\"o\">,</span> <span class=\"n\">root</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"Aesop\"</span><span class=\"o\">,</span> <span class=\"n\">LAKEPACKAGESDIR</span> <span class=\"bp\">/</span> <span class=\"s2\">\"aesop\"</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"Std\"</span><span class=\"o\">,</span> <span class=\"n\">LAKEPACKAGESDIR</span> <span class=\"bp\">/</span> <span class=\"s2\">\"std\"</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"Cli\"</span><span class=\"o\">,</span> <span class=\"n\">LAKEPACKAGESDIR</span> <span class=\"bp\">/</span> <span class=\"s2\">\"Cli\"</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"ProofWidgets\"</span><span class=\"o\">,</span> <span class=\"n\">LAKEPACKAGESDIR</span> <span class=\"bp\">/</span> <span class=\"s2\">\"proofwidgets\"</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"Qq\"</span><span class=\"o\">,</span> <span class=\"n\">LAKEPACKAGESDIR</span> <span class=\"bp\">/</span> <span class=\"s2\">\"Qq\"</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"ImportGraph\"</span><span class=\"o\">,</span> <span class=\"n\">LAKEPACKAGESDIR</span> <span class=\"bp\">/</span> <span class=\"s2\">\"importGraph\"</span><span class=\"o\">)</span>\n  <span class=\"o\">]⟩</span>\n</code></pre></div>\n<p>in <code>Cache/IO.lean</code>. Is this already on the right radar? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>’s most likely?</p>",
        "id": 437398670,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715068467
    },
    {
        "content": "<p>yes, that list needs to reflect any change in the contents of lake-manifest.json</p>",
        "id": 437398777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715068505
    },
    {
        "content": "<p>hopefully that was in the mathlib std bump?</p>",
        "id": 437398902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715068545
    },
    {
        "content": "<p>No, doesn’t look like it.</p>",
        "id": 437398999,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715068564
    },
    {
        "content": "<p>4 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/batteries.20vs.2E.20cache\">#general &gt; batteries vs. cache</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 437399139,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715068623
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12725\">#12725</a>, expedited merging appreciated</p>",
        "id": 437399700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715068832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/Std.20-.3E.20Boost.20migration/near/437386941\">said</a>:</p>\n<blockquote>\n<p>Shall we rename this stream? I suspect it will break links.</p>\n</blockquote>\n<p>I would hope that the \"348111\" component is a stream ID preventing that but I haven't tried</p>",
        "id": 437399729,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715068841
    },
    {
        "content": "<p><a href=\"#narrow/stream/348111-foobar\">https://leanprover.zulipchat.com/#narrow/stream/348111-foobar</a></p>",
        "id": 437399912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715068907
    },
    {
        "content": "<p><a href=\"#narrow/stream/348111-foobar/topic/Std.20-.3E.20Boost.20migration\">https://leanprover.zulipchat.com/#narrow/stream/348111-foobar/topic/Std.20-.3E.20Boost.20migration</a></p>",
        "id": 437400028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715068936
    },
    {
        "content": "<p><a href=\"#narrow/stream/348111-foobar/topic/Std.20-.3E.20Boost.20migration/near/437399729\">https://leanprover.zulipchat.com/#narrow/stream/348111-foobar/topic/Std.20-.3E.20Boost.20migration/near/437399729</a></p>",
        "id": 437400055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715068950
    },
    {
        "content": "<p>all three kinds of links seem to work</p>",
        "id": 437400102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715068966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/Std.20-.3E.20Boost.20migration/near/437399700\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12725\">#12725</a>, expedited merging appreciated</p>\n</blockquote>\n<p>On the queue, even though CI wasn't done yet</p>",
        "id": 437400522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715069119
    },
    {
        "content": "<p>There are some more updates in Mathlib renaming Std -&gt; Batteries in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12727\">#12727</a>.</p>",
        "id": 437430611,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715080761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"Batteries\"</p>",
        "id": 437447530,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715086646
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Batteries/Tactic/Alias.html#Batteries.Tactic.Alias.AliasInfo\">Batteries.Tactic.Alias.AliasInfo</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Batteries/Tactic/Alias.html#Batteries.Tactic.Alias.alias\">Batteries.Tactic.Alias.alias</a>, and <a href=\"https://loogle.lean-lang.org/?q=%22Batteries%22\">1499 more</a></p>",
        "id": 437447535,
        "sender_full_name": "loogle",
        "timestamp": 1715086647
    },
    {
        "content": "<p>is anyone else getting a 404 with broken CSS from that link?</p>",
        "id": 437447749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715086710
    },
    {
        "content": "<p>Yeah the docs are broken because the build process refers to <code>Std:docs</code>, I'll fix it</p>",
        "id": 437448115,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715086814
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4_docs/actions/runs/8985851449/job/24680647885\">https://github.com/leanprover-community/mathlib4_docs/actions/runs/8985851449/job/24680647885</a> so once a hoskinson machine feels like running this we'll have proper docs</p>",
        "id": 437451761,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715087900
    },
    {
        "content": "<p>but it looks like the 404 page is also broken independently of this</p>",
        "id": 437451947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715087957
    },
    {
        "content": "<p>Right, to be honest I don't even know how we end up at this specific 404 page. doc-gen does generate a 404.html but it is placed at the root of the project. The 404 mechanism of github pages does not appear to be redirecting to this page but instead dynamically grabbing it from 404.html and displaying it at this point??</p>\n<p>The reason that the CSS is messed up is that the page is rendered at some path but the CSS is stored at the root path and the HTML has no way to know how to refer to the root path like this (in particular because we wanted to be able to host the entire thing at arbitrary subpaths so it's not like we can just statically refer to <code>domain/style.css</code> if you check the requests you will see it is trying to load <code>./style.css</code> as <code>404.html</code> knows it is at the root so the CSS should be accessible but isn't because github pages doesn't redirect me) </p>\n<p>I'm not going to invest the time to fix this right now as 404s cannot happen (if doc-gen is bug free) while browsing the website and also not with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FooBarFoo#doc\">docs#FooBarFoo</a> (as the JS in the search logic correctly redirects to 404.html) THe only way to trigger this is to statically refer to some path that doesn't exist like above.</p>",
        "id": 437454815,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715088812
    },
    {
        "content": "<p>(Like Loogle would :-))</p>",
        "id": 437462605,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715090925
    },
    {
        "content": "<p>All three links that the loogle bot posted look fine to me.</p>",
        "id": 437493560,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1715101071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/348111-batteries/topic/Std.20-.3E.20Boost.20migration/near/437493560\">said</a>:</p>\n<blockquote>\n<p>All three links that the loogle bot posted look fine to me.</p>\n</blockquote>\n<p>They do because I fixed the website, mario is right that they were broken before</p>",
        "id": 437499449,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715103387
    },
    {
        "content": "<p>To see what mario saw check out e.g.: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Batteries/Tactic/foobarlala\">https://leanprover-community.github.io/mathlib4_docs/Batteries/Tactic/foobarlala</a></p>",
        "id": 437499486,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715103409
    },
    {
        "content": "<p>What should be doing the <code>chore: bump to nightly-2024-05-07</code> commit at batteries, and is it still working?<br>\n<a href=\"https://github.com/leanprover-community/batteries/commits/nightly-testing\">https://github.com/leanprover-community/batteries/commits/nightly-testing</a></p>",
        "id": 437528916,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715115094
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/batteries/blob/main/.github/workflows/nightly_bump_toolchain.yml\"><code>.github/workflows/nightly_bump_toolchain.yml</code></a></p>",
        "id": 437541978,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715120668
    },
    {
        "content": "<p>And indeed the repository_owner field needs updating.</p>",
        "id": 437542019,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715120690
    },
    {
        "content": "<p><code>nightly_merge_master.yml</code> has the same problem.</p>",
        "id": 437542199,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715120788
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/785\">std4#785</a></p>",
        "id": 437543885,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715121673
    },
    {
        "content": "<p>Or rather: <a href=\"https://github.com/leanprover-community/batteries/pull/785\">batteries#785</a></p>",
        "id": 437544687,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715122060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> This looks like a migration-related issue: <a href=\"https://github.com/leanprover/lean4/actions/runs/8986538224/job/24682889193\">https://github.com/leanprover/lean4/actions/runs/8986538224/job/24682889193</a></p>",
        "id": 437574868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715142891
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4108\">lean#4108</a></p>",
        "id": 437575751,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715143613
    },
    {
        "content": "<p>Don't know if this qualifies as an issue, I just did a global replacement of <code>import Std</code> to <code>import Batteries</code> of &lt;10 affected Lean files in a project with one Lean file with such import open, then Lean LSP server crashed:</p>\n<p><a href=\"/user_uploads/3121/H7WzYwsXq2ZVrHpALkdxHcPF/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/H7WzYwsXq2ZVrHpALkdxHcPF/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/H7WzYwsXq2ZVrHpALkdxHcPF/image.png\"></a></div>",
        "id": 437970079,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715342175
    },
    {
        "content": "<p>we'll need a replication to do something about that</p>",
        "id": 437970214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715342249
    },
    {
        "content": "<p>Yeah, but I have little idea about how to replicate that or gather more information locally in this situation. (Although I can reproduce this stably locally)</p>",
        "id": 437970824,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715342533
    },
    {
        "content": "<p>Can I turn some options on to have more debug log or similar? (Debugging this might belong to another topic though)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>VSCode log</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Watchdog error: cannot find open document 'file:///a_file_that_is_not_open_in_vscode.lean'<br>\n[Error - 8:26:25 PM] Client Lean 4: connection to server is erroring. Shutting down server.<br>\n[Error - 8:26:25 PM] Sending document notification textDocument/didSave failed.<br>\nError: write EPIPE<br>\n    at WriteWrap.onWriteComplete [as oncomplete] (node:internal/stream_base_commons:94:16)<br>\n[Error - 8:26:25 PM] Request textDocument/codeAction failed.<br>\n  Message: Cannot call write after a stream was destroyed<br>\n  Code: -32099 <br>\n[Error - 8:26:25 PM] Connection to server got closed. Server will not be restarted.<br>\n[Error - 8:26:25 PM] Stopping server failed<br>\n  Message: Cannot call write after a stream was destroyed<br>\n  Code: -32099 <br>\n[Error - 8:26:25 PM] Stopping server failed<br>\n  Message: Cannot call write after a stream was destroyed<br>\n  Code: -32099</p>\n</div></div>",
        "id": 437971316,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715342795
    },
    {
        "content": "<p>You can click on the \"Show Output\" button to see more information (hopefully)</p>",
        "id": 437972438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715343363
    },
    {
        "content": "<p>(this is not a migration issue per se, it's most likely a server/lake issue caused by removing or changing olean files while they are still open)</p>",
        "id": 437972543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715343426
    },
    {
        "content": "<p>I thought <code>Std</code> stood for _Standard_ as in \"Standard Library\". What is the meaning of <code>Boost</code>?</p>",
        "id": 437989439,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1715350513
    },
    {
        "content": "<ul>\n<li>Boost: it gives you a leg up, a boost, over the standard library (see also <a href=\"https://www.boost.org/\">prior art</a>)</li>\n<li>Batteries: It's the 'batteries included' version of the standard library (see also <a href=\"https://ocaml-batteries-team.github.io/batteries-included/hdoc2/\">prior art</a>)</li>\n</ul>",
        "id": 437989749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715350609
    },
    {
        "content": "<p>The batteries repo should be pinned in the leanprover-community landing page (just like std4 was pinned in the leanprover landing page).</p>",
        "id": 438504062,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1715664825
    },
    {
        "content": "<p>Done</p>",
        "id": 438513331,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715670464
    },
    {
        "content": "<p>What was done and where?</p>",
        "id": 438649127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715718020
    },
    {
        "content": "<p>The leanprover-community organization page <a href=\"https://github.com/leanprover-community\">https://github.com/leanprover-community</a> has some \"pinned\" repositories. I removed mathport, and added batteries, aesop, and proofwidgets (snap editorial decision, <em>very</em> happy if a community process overrides it!)</p>",
        "id": 438676991,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715728393
    }
]