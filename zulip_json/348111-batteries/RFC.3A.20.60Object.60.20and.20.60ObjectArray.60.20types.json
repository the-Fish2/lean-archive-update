[
    {
        "content": "<p>I'm cleaning up some old stuff and I found something that I occasionally find useful and might be better off in Batteries.</p>\n<p>The <code>Object</code> type is a wrapper for a value of any type. It's handy to store values of heterogenous type.</p>\n<p>Here is a simplistic example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span><span class=\"w\"> </span><span class=\"n\">NatOrString</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">isNat</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bool</span>\n<span class=\"w\">  </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Object</span>\n<span class=\"w\">  </span><span class=\"n\">type_eq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">isNat</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">val.type</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">val.type</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">String</span>\n</code></pre></div>\n<p>Of course, <code>Sum Nat String</code> works just fine for this type, but you get the idea...</p>\n<p>A better use case is <code>ObjectArray</code> which implements arrays with items of different types. The type information is stored in a function, which gives more flexibility how to actually store the type info (e.g. an array, a list, a fixed pattern, etc.). As a result, a limited set of functions are implemented. For example, append  needs slightly different implementation depending on how the type info is actually implemented since that leads to different ways of appending the type info.</p>\n<p>Here is some sample code using <code>ObjectArray</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ObjectArray</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Float</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"foo\"</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">1415</span>\n</code></pre></div>\n<p>Full code is at <a href=\"https://github.com/leanprover-community/batteries/pull/812\">batteries#812</a></p>",
        "id": 440896963,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716832053
    },
    {
        "content": "<p>There  were previous discussions about such dependent arrays (often called <code>DArray</code>). Would be great to have them! For example for flattened associative arrays, packing keys and values directly in a single array.</p>\n<p>In your code the universe parameters are implicit, but I assume that your <code>DArray</code> does incur a universe bump, because <code>Object</code> does?</p>",
        "id": 440897623,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716832377
    },
    {
        "content": "<p>Yes, there is universe a bump because the implementation uses <code>Object</code>. Annoying but hard to fix.</p>",
        "id": 440898063,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716832595
    },
    {
        "content": "<p>The only way I know how to fix the universe bump issue is to fiddle with lean internals. That wouldn't fit well in Batteries but I could be done in core.</p>",
        "id": 440899435,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716833279
    },
    {
        "content": "<p>There's a lot of <a href=\"#narrow/search/darray\">discussion around <code>DArray</code></a>. Too much to summarize here. In any case, <code>ObjectArray</code> is not the ideal implementation for <code>DArray</code>.</p>",
        "id": 440900788,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716833966
    },
    {
        "content": "<p>If you can provide a list of types as a parameter to Object, you can use them without a version bump</p>",
        "id": 440902318,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1716834746
    },
    {
        "content": "<p>Universe bump*</p>",
        "id": 440902352,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1716834766
    },
    {
        "content": "<p>So have a list of all possible types that may occur inside the array, and pass that as a parameter everywhere. And then instead of storing Type, you store the index into that array</p>",
        "id": 440902549,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1716834863
    },
    {
        "content": "<p>Is this <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Dynamic#doc\">docs#Dynamic</a> ?</p>",
        "id": 440908348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716837883
    },
    {
        "content": "<p>It's not the same as <code>Dynamic</code> since there is no name for <code>type i</code>.</p>\n<p>However, I implemented a <code>Union</code> type and used it to make <span class=\"user-mention\" data-user-id=\"416280\">@Max Nowak üêâ</span>'s idea work. This is now in <a href=\"https://github.com/leanprover-community/batteries/pull/813\">batteries#813</a>.</p>\n<p><code>DArray</code> without the universe bump is accomplished!</p>",
        "id": 440920863,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716844348
    },
    {
        "content": "<p>Isn't <code>Union</code> just <code>Sigma</code>?</p>",
        "id": 440921070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716844470
    },
    {
        "content": "<p>Yes, I just realized that! <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> Long day... I'll fix that <del>tomorrow</del> today.</p>",
        "id": 440921583,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716844728
    },
    {
        "content": "<p>I think it's also not as good (runtime-wise) as my original unsafe-happy implementation of DArray because it has an additional indirection in each element of the array, since each cell now needs to store its index</p>",
        "id": 440921653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716844776
    },
    {
        "content": "<p>Yeah I think the suggestion I gave is not a good idea. It was merely a way to circumvent the universe bump.</p>",
        "id": 440921898,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1716844898
    },
    {
        "content": "<p>Yes. My hacked C-implementation also doesn't need to store indices like that. But this will work for now until core implements the right way.</p>",
        "id": 440921978,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716844927
    },
    {
        "content": "<p>I figured out a way to avoid storing indices without actually going down to C... It's terrifyingly unsafe though!</p>",
        "id": 440928439,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716848572
    },
    {
        "content": "<p>The approach with Object doesn‚Äôt seem so bad to me. All you need is knowledge of which index has which type. If I have ‚Äúforall i, arr[i].type = String‚Äù for example I would know the shape of each cell. This knowledge can be in Prop. This wouldn‚Äôt need unsafe either. But I‚Äôm not a maintainer and have barely dedicated any thought to this, so maybe ignore me.</p>",
        "id": 440928743,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1716848764
    },
    {
        "content": "<p>Actually I don‚Äôt know any of the design goals behind this, so definitely ignore me.</p>",
        "id": 440928874,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1716848862
    },
    {
        "content": "<p>The major drawback of the <code>Object</code> type is the universe bump. This makes it unusable in lots of places we would like to have it</p>",
        "id": 440930567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716849877
    },
    {
        "content": "<p>The current <a href=\"https://github.com/leanprover-community/batteries/pull/813\">batteries#813</a> avoids the universe bump and avoids actually storing indices. The latter part needs some stress testing but it seems to work fine so far...</p>",
        "id": 440930736,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716849963
    },
    {
        "content": "<p>Actually, since the type definition of <code>DArray</code> is now just a model for the kernel to digest, it might be even easier to define it as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span><span class=\"w\"> </span><span class=\"n\">DArray</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Œ±</span><span class=\"w\"> </span><span class=\"n\">i</span>\n</code></pre></div>\n<p>The actual implementation would still work as it does now, but the proofs would be even easier, I think.</p>",
        "id": 440933154,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716851188
    },
    {
        "content": "<p>That doesn't seem to work... I think it's because overriding <code>DArray.get</code> doesn't actually override the structure projection.</p>",
        "id": 440935062,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716852268
    },
    {
        "content": "<p>Yeah, that's it. It works fine if I use an inductive instead:</p>",
        "id": 440935659,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716852658
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span><span class=\"w\"> </span><span class=\"n\">DArray</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"n\">Œ±</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 440935681,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716852672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">Fran√ßois G. Dorais</span> <a href=\"#narrow/stream/348111-batteries/topic/RFC.3A.20.60Object.60.20and.20.60ObjectArray.60.20types/near/440935062\">said</a>:</p>\n<blockquote>\n<p>That doesn't seem to work... I think it's because overriding <code>DArray.get</code> doesn't actually override the structure projection.</p>\n</blockquote>\n<p>is this a known bug/feature..? maybe another place the compiler should emit a warning</p>",
        "id": 440939310,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1716855149
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/batteries/pull/813\">batteries#813</a> looks pretty nice now but it's not ready yet. The recursors need to be reimplemented for <code>match</code> to work... That could take a while. Anyone know the minimal set of recursors that need to be redone?</p>",
        "id": 440941039,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716856350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/348111-batteries/topic/RFC.3A.20.60Object.60.20and.20.60ObjectArray.60.20types/near/440939310\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119741\">Fran√ßois G. Dorais</span> <a href=\"#narrow/stream/348111-batteries/topic/RFC.3A.20.60Object.60.20and.20.60ObjectArray.60.20types/near/440935062\">said</a>:</p>\n<blockquote>\n<p>That doesn't seem to work... I think it's because overriding <code>DArray.get</code> doesn't actually override the structure projection.</p>\n</blockquote>\n<p>is this a known bug/feature..? maybe another place the compiler should emit a warning</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/pull/2292\">lean4#2292</a></p>",
        "id": 440942669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716857543
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> , that PR is an easy fix to a year old bug in the old compiler which you self-assigned a while ago, and it's blocking \"extern type\" style APIs like <code>DArray</code> here</p>",
        "id": 440942898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716857719
    },
    {
        "content": "<p>It looks like <code>recOn</code> and <code>casesOn</code> are enough to make <code>match</code> work properly. It's time for some more serious testing...</p>",
        "id": 440947640,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716860755
    },
    {
        "content": "<p>After a bit of rest, I cleaned up <a href=\"https://github.com/leanprover-community/batteries/pull/813\">batteries#813</a> and it is now ready for community review.</p>",
        "id": 441026767,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716898561
    },
    {
        "content": "<p>I found <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s <a href=\"https://github.com/leanprover-community/batteries/tree/darray\">earlier work</a> (I don't know why I didn't look for that sooner!) and I started stealing some useful stuff <span aria-label=\"pirate flag\" class=\"emoji emoji-1f3f4-200d-2620\" role=\"img\" title=\"pirate flag\">:pirate_flag:</span></p>\n<p>I want to keep this PR from blowing up, so I'll leave a lot for follow-up work. For example, <code>foldl</code>, <code>foldr</code> and <code>forIn</code> are almost surely better left to the near future than this PR.</p>\n<p>I reluctantly added <code>push</code> and <code>pop</code>. Having the types specified by a function makes these (and <code>append</code>) a dependent type purgatory. I think these are better off in follow-up work where the type specification has a specific representation.</p>",
        "id": 441095363,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1716921835
    },
    {
        "content": "<p>The follow-up PR <a href=\"https://github.com/leanprover-community/batteries/pull/815\">batteries#815</a> now has <code>foldlM</code>, <code>foldrM</code>, <code>map</code> and even a <code>ForIn</code> instance so that <code>for ... do</code> can be used to loop over dependent arrays.</p>",
        "id": 441360602,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1717035374
    }
]