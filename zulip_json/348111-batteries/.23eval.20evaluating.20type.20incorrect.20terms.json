[
    {
        "content": "<p>One thing I noticed about the Array API : The index operations that use <code>get_elem_tactic</code> don't seem to care when an out of bounds index is presented, and simply execute the C functions leading to out of bounds errors or some junk values. So, what is the point of having that proof argument in the first place?</p>",
        "id": 440460604,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716537923
    },
    {
        "content": "<p>Because you can only call them if you indeed prove that there is no out of bounds access happening.</p>",
        "id": 440460926,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716538054
    },
    {
        "content": "<p>Then why does this crash happen instead of the typechecker telling me to stop?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">]</span>\n\n\n<span class=\"c1\">-- #eval ex[6] -- uncomment this line to crash the editor or get junk values</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">get_elem_tactic</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"c1\">-- again crash</span>\n</code></pre></div>",
        "id": 440461601,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716538334
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover/lean4/pull/1697\">lean4#1697</a> and <a href=\"https://github.com/leanprover/lean4/pull/2252\">lean4#2252</a></p>",
        "id": 440462193,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1716538625
    },
    {
        "content": "<p>Note that this is only an issue with <code>#eval</code>, trying to actually compile a Lean file containing such an invalid access will error as expected.</p>",
        "id": 440462410,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1716538725
    },
    {
        "content": "<p>okay. Something like <code>#eval (\"string\" : Nat)</code> still stops at the typecheck. It is only for proofs that <code>#eval</code> chooses to ignore typechecking (or more specifically add <code>sorryAx</code>) and proceed.</p>",
        "id": 440462977,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716538950
    },
    {
        "content": "<p>It would nice if the editor showed this was happening (by adding yellow lines to warn that <code>sorry</code> is being used), at least when the editor doesn't crash and just spits out junk values.</p>",
        "id": 440463366,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716539102
    },
    {
        "content": "<p>If this is used with <code>set</code> that can cause arbitrary memory corruption, can it? Seems pretty severe, imagine some blog post about that reaching hacker news.</p>",
        "id": 440482074,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716546651
    },
    {
        "content": "<p>8 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-batteries/topic/RFC.3A.20Arrays.20with.20fixed.20length\">#batteries &gt; RFC: Arrays with fixed length</a> by <span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span>.</p>",
        "id": 440482197,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716546713
    },
    {
        "content": "<p>Or does the eval interpreter implement the unsafe array primitives safely?</p>",
        "id": 440482332,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716546755
    },
    {
        "content": "<p>There are other ways to corrupt memory such as unsafe array ops. What's strange about this is that the functions ask me for a proof and ignore it if I can't prove the obligation by using sorry.</p>",
        "id": 440491480,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716550486
    }
]