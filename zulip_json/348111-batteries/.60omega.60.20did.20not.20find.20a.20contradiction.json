[
    {
        "content": "<p>When we get a result such as <code>omega</code> did not find a contradiction, how should we read this? This error message is quizzical to me:</p>\n<p><a href=\"/user_uploads/3121/0FEbI8RabOUfjBbN3xcA_8Qd/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0FEbI8RabOUfjBbN3xcA_8Qd/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0FEbI8RabOUfjBbN3xcA_8Qd/image.png\"></a></div>",
        "id": 410305952,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703775937
    },
    {
        "content": "<p>(the numbers 2 and 23 are relevant in my context, so they seem like sensible things to seee)</p>",
        "id": 410306052,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703775964
    },
    {
        "content": "<p>I think it says something like </p>\n<blockquote>\n<p>The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>×</mo><msub><mi>x</mi><mn>1</mn></msub><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>23</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">1× x_1 \\in [2,23]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">23</span><span class=\"mclose\">]</span></span></span></span>.</p>\n</blockquote>\n<p>but that’s not very useful if it doesn't tell you what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is.</p>",
        "id": 410308673,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703777138
    },
    {
        "content": "<p>The <code>omega</code> tactic works by assuming that the goal is false and then attempts to find a numerical contradiction with this and other hypotheses. If it finds a contradiction, then the goal must be a logical consequences of the other hypotheses. In this case it did not find a contradiction, so it can't say anything about the goal.</p>",
        "id": 410308787,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1703777186
    },
    {
        "content": "<p>(Try it with a goal that's actually true!)</p>",
        "id": 410308845,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1703777218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/348111-std4/topic/.60omega.60.20did.20not.20find.20a.20contradiction/near/410308845\">said</a>:</p>\n<blockquote>\n<p>(Try it with a goal that's actually true!)</p>\n</blockquote>\n<p>the goal is true, I proved it with <code>nlinarith</code> a little bit later :)</p>",
        "id": 410310134,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703777833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/348111-std4/topic/.60omega.60.20did.20not.20find.20a.20contradiction/near/410308673\">said</a>:</p>\n<blockquote>\n<p>I think it says something like </p>\n<blockquote>\n<p>The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>×</mo><msub><mi>x</mi><mn>1</mn></msub><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>23</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">1× x_1 \\in [2,23]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">23</span><span class=\"mclose\">]</span></span></span></span>.</p>\n</blockquote>\n<p>but that’s not very useful if it doesn't tell you what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is.</p>\n</blockquote>\n<p>ahh, I see, and when I see something similar with more than one of these, then there's more variables still in <code>omega</code>'s context?</p>",
        "id": 410310445,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703777971
    },
    {
        "content": "<p>Oh! I see, what part you were asking about now! This representation of the failed problem is not easy to read. Sounds like you should file an issue.</p>",
        "id": 410311689,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1703778550
    },
    {
        "content": "<p>Yeah, I saw that output and my immediate reaction was that this is way too obfuscated and the pretty printer needs work, especially since it prints this even without any special debugging options</p>",
        "id": 410321980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703784232
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/hC5WrAPvOcNeboVR2lbM_AjC/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hC5WrAPvOcNeboVR2lbM_AjC/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hC5WrAPvOcNeboVR2lbM_AjC/image.png\"></a></div><p>This error is even less helpful... (<code>omega</code> seems to like having constants on the left, <code>2 * b</code> works)</p>",
        "id": 410345497,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703800206
    },
    {
        "content": "<p><code>example (b : ℕ) (h : b = 1 ^ 2) : b = 1 := by omega</code> - it also doesn't seem to like powers; I'm very whelmed.</p>",
        "id": 410345774,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703800442
    },
    {
        "content": "<p>The fact that <code>omega</code> doesn't like <code>b * 2</code> is obviously a problem, and I'll fix it.</p>\n<p>However <code>1 ^ 2</code> is out of scope for omega.</p>",
        "id": 411091193,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704320481
    },
    {
        "content": "<p>I will also make the \"explanations\" given when <code>omega</code> does not find a contradiction clearer. The main change will just be to not provide any explanation, but then to have multiple levels of tracing for users who want to understand what it tried.</p>",
        "id": 411091372,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704320598
    },
    {
        "content": "<p>yes, I was unaware of the fact that it wasn't expected to do any powers till today - many thanks Scott!</p>",
        "id": 411091607,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704320742
    },
    {
        "content": "<p><a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/A.20simple.20result.20that.20.60omega.60.20fails.20to.20prove\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/A.20simple.20result.20that.20.60omega.60.20fails.20to.20prove</a> there was also some discussion here - hope you had a nice holiday :)</p>",
        "id": 411091731,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704320807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/.60omega.60.20did.20not.20find.20a.20contradiction/near/411091193\">said</a>:</p>\n<blockquote>\n<p>However <code>1 ^ 2</code> is out of scope for omega.</p>\n</blockquote>\n<p>This in particular seems really unfortunate. I can see why - <code>norm_num</code> is not available - but can <code>omega</code> have a hook that can be set to <code>norm_num</code> so that <code>omega</code> in mathlib gets superpowered?</p>",
        "id": 411092562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704321318
    },
    {
        "content": "<p>This trick is used in <code>ring</code>: <code>Mathlib.Tactic.Ring.Basic</code> defines the <code>ring1</code> tactic, and then <code>Mathlib.Tactic.Ring.RingNF</code> adds the <code>ring_nf</code> tactic and also adds itself to a hook defined by <code>ring1</code> so that <code>ring1</code> will use <code>ring_nf</code> if it fails to clean up the goal</p>",
        "id": 411092735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704321431
    },
    {
        "content": "<p>We can also separately look into upstreaming <code>norm_num</code></p>",
        "id": 411092844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704321497
    },
    {
        "content": "<p>I worry that it will make it quite slow too though - whenever I have gotten <code>omega</code> to work, I've been very impressed by its speed, whilst <code>norm_num</code> is not often fast - I don't know if the same holds for <code>norm_num1</code> though.</p>",
        "id": 411093286,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704321767
    },
    {
        "content": "<p>Extensibility of <code>omega</code> is definitely something we need to look into.</p>",
        "id": 411131298,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704346519
    },
    {
        "content": "<p>The <code>* 2</code> vs <code>2 *</code> issue is fixed in <a href=\"https://github.com/leanprover/std4/pull/504\">std4#504</a>.</p>",
        "id": 411131311,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704346535
    },
    {
        "content": "<p>Another example where extensibilty would be nice is that <code>omega</code> has special handling for case splitting on <code>Int.natAbs</code>, but once we arrive in Mathlib and use the <code>Abs</code> typeclass, <code>omega</code> no longer knows how to deal with that.</p>",
        "id": 411131643,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704346837
    },
    {
        "content": "<p><code>example (x y z : ℕ) (h : 5 * x + 48 * y + 49 * z = 92) : False := by omega</code> fails; is this one of the cases where we need the shadows?</p>",
        "id": 418863328,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706628636
    },
    {
        "content": "<p>Eric, I liked your example and here is a consequence of it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- omega  -- fails</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span> <span class=\"c1\">-- change `y = 1` to `y = 2` and `omega` fails</span>\n  <span class=\"n\">omega</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 418878952,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706632941
    },
    {
        "content": "<p>Yes, this would need shadows! :-) Thanks for the motivation to resume work on them. Did this come up in the wild?</p>",
        "id": 418929569,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706652919
    },
    {
        "content": "<p>Indeed, was just working on some random problem and hoped I didn't have to do the tedium myself :b</p>",
        "id": 418934782,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706655257
    },
    {
        "content": "<p>Really? Such strange coefficients 48, 49, 92, I wasn't expecting anyone to actually meet such numbers in the wild. Or is this an IMO problem, and they are weirdly determined by the current year? :-)</p>",
        "id": 418937214,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706656311
    },
    {
        "content": "<p>I have a couple examples that I'd like omega to discharge but it doesn't.  The first involves <code>min</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"n\">min</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- The omega check fails unless I explicitly introduce this</span>\n  <span class=\"c1\">--have q : min j k ≤ j := Nat.min_le_left j k</span>\n  <span class=\"n\">omega</span>\n</code></pre></div>\n<p>The second is perhaps a bug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Omega can directly discharge this</span>\n<span class=\"c1\">--  have _ : i ≥ j - 1 := by omega</span>\n  <span class=\"c1\">-- But if I hide formula behind a constant, it fails:</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n  <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 419179638,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1706767307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> mentioned that he had a <code>omega</code> failing test case in a meeting today</p>",
        "id": 419180330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706767707
    },
    {
        "content": "<p>re: <code>min</code>, we can inexpensively add the facts <code>min a b &lt;= a</code> and <code>min a b &lt;= b</code> whenever we encounter a <code>min</code> atom.</p>\n<p>We <em>could</em> add also the disjunction <code>min a b = a \\or min a b = b</code>, but this (just like natural subtraction) then causes case splits (as usual, <code>omega</code> will try for a contradiction without the disjunction, and if that fails try again in both branches). Perhaps I'll add an option (defaulting to splitting <code>min</code>?) to control this.</p>",
        "id": 419182173,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706769043
    },
    {
        "content": "<p>In a similar vein, we do not split on <code>Int.natAbs</code>. There I was more hesitant to implement something, because Mathlib uses a typeclass mediated <code>abs</code>, and there isn't a simple way to have <code>omega</code> aware of this.</p>",
        "id": 419182492,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706769258
    },
    {
        "content": "<p>I guess we could upstream just the bare minimum of the typeclass itself to Std?</p>",
        "id": 419182527,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706769284
    },
    {
        "content": "<p>A more radical thing would be to have <code>omega</code> react whenever it encounters a <code>if</code> atom, adding the disjunction</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then to handle <code>min</code> we would just rewrite by <code>min_def</code>.</p>",
        "id": 419183828,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706770210
    },
    {
        "content": "<p>We could check that <code>P</code> is actually a fact that <code>omega</code> recognises before adding the disjunction. (Although implementing that might require some spaghetti... The atom recogniser can't see the outer recogniser...)</p>",
        "id": 419184009,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706770339
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/575\">std4#575</a> enables:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.natAbs</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 419190560,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706773885
    },
    {
        "content": "<p>I'm blanking on this: surely there is a <code>Expr \\to MetaM Expr</code> that checks if the input is a let-bound fvar and if so replaces it with its value, and otherwise returns the input...?</p>",
        "id": 419193066,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706775063
    },
    {
        "content": "<p>not that I know of</p>",
        "id": 419195252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706775876
    },
    {
        "content": "<p>that would just be something like: check it is <code>.fvar fv</code>, if so look up <code>fv</code> in <code>getLCtx</code> and use the <code>value?</code> on the <code>LocalDecl</code></p>",
        "id": 419195375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706775926
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/1d8cf38ff9163eed6f6c0e73a9119afea7b0d9be/src/Lean/Meta/Tactic/Simp/Main.lean#L78-L84\">https://github.com/leanprover/lean4/blob/1d8cf38ff9163eed6f6c0e73a9119afea7b0d9be/src/Lean/Meta/Tactic/Simp/Main.lean#L78-L84</a></p>",
        "id": 419195602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706776012
    },
    {
        "content": "<p>Is it feasible when traversing the local context to identify free <code>Nat/Int</code> variables and adding facts from that?</p>\n<p>e.g., <code>l = j - i</code> from <code>lit l = j - i</code> in the above example?</p>",
        "id": 419353395,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1706830658
    },
    {
        "content": "<p>What Mario said is how Mathlib's <code>unfold_lets</code> tactic works. <a href=\"https://github.com/leanprover-community/mathlib4/blob/618b0bbdbd3b4e83be57fd241d86bfa17d284ff5/Mathlib/Tactic/DefEqTransformations.lean#L91-L102\">https://github.com/leanprover-community/mathlib4/blob/618b0bbdbd3b4e83be57fd241d86bfa17d284ff5/Mathlib/Tactic/DefEqTransformations.lean#L91-L102</a> (That one recursively unfolds fvars.)</p>",
        "id": 419355379,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706831556
    },
    {
        "content": "<p>This is fixed in <a href=\"https://github.com/leanprover/std4/pull/578\">std4#578</a>.</p>",
        "id": 419662846,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707015206
    }
]