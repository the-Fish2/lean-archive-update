[
    {
        "content": "<p>It's been suggested that I try a reorganization in Std to make it possible to use <code>omega</code> earlier, e.g. in <code>Std.Data.Int.Lemmas</code>, or even earlier. Because <code>omega</code> needs various lemmas about <code>Nat</code> and <code>Int</code>, this would involve some annoying reorganization.</p>\n<p>I just did a little experiment, and determined that I currently need about 1/4 of <code>Std.Data.Int.Lemmas</code> in <code>omega</code> (presumably this could be shrunk: this is just the fraction that can't be deleted with breaking something).</p>\n<p>I worried it would be pretty unsatisfactory to split <code>Std.Data.Int.Lemmas</code> into two files solely on the criterion \"does <code>omega</code> want this\"...</p>\n<p>An alternative would be to copy and paste that 1/4 of <code>Std.Data.Int.Lemmas</code> into a private namespace inside <code>omega</code>, and not worry about the duplication. Not ideal either!</p>",
        "id": 413074017,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705376501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, any thoughts?</p>",
        "id": 413074038,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705376520
    },
    {
        "content": "<p>I think splitting big files is a good idea, big files (especially if there is a significant difference in prerequisites between the top half and the bottom half) are a major contributing factor to unnecessary imports, and even if all the theorems are independent it's a good idea to split files for additional parallelism</p>",
        "id": 413074305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705376666
    },
    {
        "content": "<p>Okay, maybe I will hack at <code>Std.Data.Int.Lemmas</code> for a bit more.</p>",
        "id": 413074384,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705376713
    },
    {
        "content": "<p>although one can conversely argue that this would add <code>Omega</code> as a big additional dependency of half of <code>Std.Data.Int.Lemmas</code></p>",
        "id": 413074508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705376773
    },
    {
        "content": "<p>Yes...</p>",
        "id": 413074573,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705376814
    },
    {
        "content": "<p>I can't wait for us to be able to ship precompiled omega just like we ship precompiled simp</p>",
        "id": 413074612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705376841
    },
    {
        "content": "<p>For now I will just see if I can find any reasonable splits, without actually importing <code>omega</code> anywhere new.</p>",
        "id": 413074615,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705376842
    },
    {
        "content": "<p>If you want that then I would be copy-pasting what I need out of Std into omega.</p>",
        "id": 413074679,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705376880
    },
    {
        "content": "<p>what is \"that\"?</p>",
        "id": 413074750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705376907
    },
    {
        "content": "<p>oh you mean that if we precompiled omega in a separate library then half of Std.Data.Int.Lemmas would also be in that lib</p>",
        "id": 413074822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705376962
    },
    {
        "content": "<p>Yes.</p>",
        "id": 413074862,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705376984
    },
    {
        "content": "<p>ultimately I think we want to just precompile all of std</p>",
        "id": 413074877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705376992
    },
    {
        "content": "<p>Definitely.</p>",
        "id": 413074942,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705377006
    },
    {
        "content": "<p>so I won't make a big fuss about using omega in std</p>",
        "id": 413074990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705377038
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/534\">std4#534</a> is my initial attempt at a split of <code>Std.Data.Int.Lemmas</code>, but doesn't involve <code>omega</code> at all yet.</p>",
        "id": 413080870,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705381033
    },
    {
        "content": "<p>(ooh, great milestone, 534 is the best siteswap)</p>",
        "id": 413081130,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705381221
    },
    {
        "content": "<p>what's this reference?</p>",
        "id": 413081183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705381269
    },
    {
        "content": "<p><a href=\"https://juggle.fandom.com/wiki/534\">https://juggle.fandom.com/wiki/534</a></p>",
        "id": 413081310,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705381358
    },
    {
        "content": "<p>\"siteswaps\" is the bijection between (certain) juggling patterns and S_n x N^n.</p>",
        "id": 413081360,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705381402
    },
    {
        "content": "<p>And 534 is \"the best\" because it is fairly difficult but learnable by mortals, but possibly no one would have ever thought to try it without knowing this bijection first. :-)</p>",
        "id": 413081480,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705381502
    },
    {
        "content": "<p>What's the situation with precompiled tactics etc at the current moment?</p>",
        "id": 415975794,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1705480398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/reorganization.20for.20.60omega.60/near/413074612\">said</a>:</p>\n<blockquote>\n<p>I can't wait for us to be able to ship precompiled omega just like we ship precompiled simp</p>\n</blockquote>\n<p>Does this affect dependency considerations, or is it just a really-nice-to-have tangent?</p>",
        "id": 416476245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705540656
    },
    {
        "content": "<p>It lowers the cost of having dependencies. <code>Lean</code> itself is a pretty big dependency and the only reason we can use it (mostly) freely is because it is precompiled</p>",
        "id": 416488716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705548392
    }
]