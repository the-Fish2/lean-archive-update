[
    {
        "content": "<p>There are plenty of library search tools moving to Std. This one is older and not as sophisticated as newer search tools but it's a freebie at this time: it doesn't depend on anything properly Mathlib so moving it is basically just moving one file from Mathlib to Std.</p>",
        "id": 419190706,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1706773944
    },
    {
        "content": "<p>For good UX, it depends on having a pre-computed index, and the whole concept of these index file works well within mathlib, but doesn't easily clearly scale to a multi-package world.  The tactics that are being moved to omega either have mathlib-specific hacks (not great), or could be sped up to not need a precomputed cache (like <code>exact?</code>). I think this needs a solution first.</p>\n<p>(Related thread: <a href=\"#narrow/stream/113488-general/topic/Loogle.20is.20live!/near/417982759\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Loogle.20is.20live!/near/417982759</a>)</p>",
        "id": 419232586,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706789296
    },
    {
        "content": "<p>Why does precomputed cache = mathlib-specific hack?</p>",
        "id": 419232910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706789404
    },
    {
        "content": "<p>just make the API to add a precomputed cache generic</p>",
        "id": 419232972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706789425
    },
    {
        "content": "<p>The std4 code no longer mentions mathlib in the file path, but at least in the coments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Once we reach Mathlib, and have `cache` available,</span>\n<span class=\"sd\">we may still want to load a precomputed cache for `exact?` from a `.olean` file.</span>\n\n<span class=\"sd\">This makes no sense here in Std, where there is no caching mechanism.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">cachePath</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">sp</span> <span class=\"bp\">←</span> <span class=\"n\">searchPathRef.get</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">buildPath</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">sp</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"n\">buildPath</span> <span class=\"bp\">/</span> <span class=\"s2\">\"LibrarySearch.extra\"</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">path.pathExists</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">path</span>\n  <span class=\"n\">return</span> <span class=\"s2\">\".lake\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"build\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"lib\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"LibrarySearch.extra\"</span>\n</code></pre></div>",
        "id": 419233202,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706789521
    },
    {
        "content": "<p>I think that path should not be hardcoded</p>",
        "id": 419233366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706789583
    },
    {
        "content": "<p>Even then: <br>\nLoading such a cache file only really makes sense when it was created for a root module (like <code>Mathlib</code>) that imports everything you care about. This exists in mathlib, but as soon as I am working in my own little project, that imports packages A, B and C, then which index could exist, and built by whom?</p>",
        "id": 419233440,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706789617
    },
    {
        "content": "<p>built by you</p>",
        "id": 419233468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706789632
    },
    {
        "content": "<p>obviously we also need an interface to make it easy for people to build their own cache</p>",
        "id": 419233594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706789672
    },
    {
        "content": "<p>So no cloud-built indexes (for the packages where you have some kind of cloud cache for oleans) at all?</p>",
        "id": 419233624,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706789684
    },
    {
        "content": "<p>if there is also a method to use an existing cache (which mathlib uses), then you will benefit from that</p>",
        "id": 419233719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706789723
    },
    {
        "content": "<p>It seems to not degrade wrt the mathlib experience, but scale to multiple packages, we’d need something like “for every package known to lake, look for an index, load that, efficiently merge them, and then amend the index for everything not covered”</p>",
        "id": 419233756,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706789746
    },
    {
        "content": "<p>I'm not going to suggest that because it sounds like work but if you want to do it go ahead</p>",
        "id": 419233931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706789817
    },
    {
        "content": "<p>mathlib + more and built from scratch are the main use cases we need to worry about for now</p>",
        "id": 419233986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706789844
    },
    {
        "content": "<p>FWIW: I would prefer moving and _then_ improving. I think that is a good policy for things that are in the wrong place. Of course, whether this is in the wrong place is debatable.</p>",
        "id": 419233991,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1706789847
    },
    {
        "content": "<p>and as far as a MVP, I think \"cache file with path provided downstream\" and \"built from scratch\" suffice</p>",
        "id": 419234149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706789896
    },
    {
        "content": "<p>Even “mathlib + more” doesn’t work well with the current approach: It finds the mathlib index, loads it and now you won’t find anything from the “more” set</p>",
        "id": 419234150,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706789899
    },
    {
        "content": "<p>which is to say, no \"more\"</p>",
        "id": 419234175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706789913
    },
    {
        "content": "<p>Fair enough… do we have an idea for a mechanism to find a suitable cache file?</p>",
        "id": 419234246,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706789947
    },
    {
        "content": "<p>but I think it's not too hard to implement \"more\", you go over the environment and for everything not in mathlib you add it to the discrimination tree</p>",
        "id": 419234257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706789952
    },
    {
        "content": "<p><code>initialize : Option FilePath &lt;- pure none</code>?</p>",
        "id": 419234308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706789971
    },
    {
        "content": "<p>So users manually set the file path?</p>",
        "id": 419234365,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706789989
    },
    {
        "content": "<p>Or does every package set the filepath, and the last one wins? (not too bad actually)</p>",
        "id": 419234465,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706790015
    },
    {
        "content": "<p>Since we already use the first component of the module name to more or less identify the package, another approach could be to look through</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">P.extra</span> <span class=\"bp\">|</span> <span class=\"n\">P.M.M</span> <span class=\"k\">in</span> <span class=\"n\">imported</span> <span class=\"n\">module</span> <span class=\"n\">names</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and then a little bit of logic to pick the “best” one if multiple ones are found…</p>",
        "id": 419234711,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706790120
    },
    {
        "content": "<p>That's how $PATH works in shell, except that you have a choice to modify the path if you need to.</p>",
        "id": 419234831,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1706790157
    },
    {
        "content": "<p>for this MVP, there is at most one file path, i.e. either mathlib's extra file or nothing</p>",
        "id": 419234858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790167
    },
    {
        "content": "<p>so there would be exactly one instance of setting it, in an early mathlib file</p>",
        "id": 419234910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790192
    },
    {
        "content": "<p>That’s mathlib specific again, isn’t it? I thought we are trying to find a MVP that isn't mathlib-specific?</p>",
        "id": 419234911,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706790192
    },
    {
        "content": "<p>Ah, you are looking for a mechainsm that isn’t inherently mathlib-specific, but would (initially) only used by mathlib?</p>",
        "id": 419234973,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706790225
    },
    {
        "content": "<p>this isn't mathlib specific in the sense that std doesn't have to directly refer to a file in mathlib's file hierarchy</p>",
        "id": 419234980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790228
    },
    {
        "content": "<p>and it means someone could have a not-mathlib, although I doubt that really happens in practice</p>",
        "id": 419235089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790267
    },
    {
        "content": "<p>this is following on <span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> 's point that we should get a basic version out without regressions and work to something more general later</p>",
        "id": 419235170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790306
    },
    {
        "content": "<p>As long as we doubt that there is little point moving those tactics that don’t have good UX (i.e. are too slow) without an index, though, aren’t they?</p>",
        "id": 419235185,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706790311
    },
    {
        "content": "<p>I guess that depends on whether nothing or something that’s slow is worse :-)</p>",
        "id": 419235266,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706790344
    },
    {
        "content": "<p>Even without an index it's okay, users can just call <code>#find</code> once at the top of the file, or <code>init_find_index</code> or something</p>",
        "id": 419235268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790344
    },
    {
        "content": "<p>or put that in an upstream file</p>",
        "id": 419235279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790350
    },
    {
        "content": "<p>that's the \"from scratch\" workflow</p>",
        "id": 419235361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790370
    },
    {
        "content": "<p>Yeah, or keep a separate tab open where you just use <code>#find</code> without having to change imports too often. Fair enough.</p>",
        "id": 419235466,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706790405
    },
    {
        "content": "<p>you can just import everything when preparing the index</p>",
        "id": 419235507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790422
    },
    {
        "content": "<p>in fact, ideally <code>#find</code> would be able to index files that aren't even imported</p>",
        "id": 419235628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790462
    },
    {
        "content": "<p>but maybe that's too sci-fi</p>",
        "id": 419235657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790473
    },
    {
        "content": "<p>BTW, are we taking about moving the <code>#find</code> from mathlib, or importing the <code>#find</code> provided by the Loogle library? (I originally wanted to replace <code>#find</code> in mathlib, but then never got all relevant PRs merged, and now it’s in a library.)</p>",
        "id": 419235758,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706790502
    },
    {
        "content": "<p>uh... are they not the same?</p>",
        "id": 419235830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790537
    },
    {
        "content": "<p>No, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6363\">https://github.com/leanprover-community/mathlib4/pull/6363</a> got never merged</p>",
        "id": 419235896,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706790563
    },
    {
        "content": "<p>And, in a way, any project can already import loogle as a library dependency and have (that) <code>#find</code> without needing mathlib; it’s not std, but still closer to that goal. (This isn’t done a lot yet and may have rough edges, but in principle should be possible.)</p>",
        "id": 419236077,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706790624
    },
    {
        "content": "<p>looks like you are the one who closed the PR</p>",
        "id": 419236182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790664
    },
    {
        "content": "<p>Right, I am not blaming anyone here!</p>",
        "id": 419236541,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706790796
    },
    {
        "content": "<p>But as we all agree, this isn’t mathlib specific functionality.</p>",
        "id": 419236619,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706790827
    },
    {
        "content": "<p>well it will have to be reviewed at some point, and TBH mathlib has a lot more bandwidth for that than std</p>",
        "id": 419236733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790859
    },
    {
        "content": "<p>does <code>#find</code> use the same cache as library_search?</p>",
        "id": 419236905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790930
    },
    {
        "content": "<p>or are there two caches in there</p>",
        "id": 419236968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706790960
    },
    {
        "content": "<p><code>#loogle</code>  (to disambiguate with the old <code>#find</code> that Sebastian wrote) uses it’s own cache with different data structures</p>",
        "id": 419237041,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706790981
    },
    {
        "content": "<p>is mathlib generating this cache?</p>",
        "id": 419237105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791010
    },
    {
        "content": "<p>No. (But it could, of course, should it depend on <code>Loogle</code>)</p>",
        "id": 419237162,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706791038
    },
    {
        "content": "<p>so that means that adding <code>#loogle</code> to mathlib would increase the download size of mathlib significantly?</p>",
        "id": 419237266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791078
    },
    {
        "content": "<p>how much?</p>",
        "id": 419237337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791091
    },
    {
        "content": "<p>~230MB uncompressed<br>\n(The suffix-trie for the name matching taking most space, the constant-map was I think much smaller)</p>",
        "id": 419237383,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706791110
    },
    {
        "content": "<p>hm, I'm sure we can do better but it's not important for the MVP</p>",
        "id": 419238152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791394
    },
    {
        "content": "<p>I would encourage you to get this into mathlib first</p>",
        "id": 419238230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791424
    },
    {
        "content": "<p>Yes, I’m not claiming exhaustive reaping of low hanging fruit there</p>",
        "id": 419238250,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706791433
    },
    {
        "content": "<p>this will resolve a lot of the logistical issues</p>",
        "id": 419238321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791448
    },
    {
        "content": "<p>By copying the code, or by <code>require</code> the library?</p>",
        "id": 419238333,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706791451
    },
    {
        "content": "<p>copying the code I think</p>",
        "id": 419238427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791479
    },
    {
        "content": "<p>require the library is also an option for mathlib but I'm not sure it will address the logistical issues</p>",
        "id": 419238526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791522
    },
    {
        "content": "<p>because when it moves to std it will be closer to a \"copy the code\" situation</p>",
        "id": 419238601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791553
    },
    {
        "content": "<p>how is loogle currently handling the generation of the index?</p>",
        "id": 419238792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791607
    },
    {
        "content": "<p>doesn't mathlib need to be imported for that?</p>",
        "id": 419238826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791618
    },
    {
        "content": "<p>Is there someone interested in co-owning that code? I would prefer to keep at least the code that runs the loogle service separate, for easier iteration, so maybe someone who actually wants to use it in mathlib can help maintain that copy?</p>",
        "id": 419238845,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706791628
    },
    {
        "content": "<p>you want it to be separate from the version in std as well?</p>",
        "id": 419238926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791657
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">echo</span> <span class=\"s2\">\"Replace toolchain by mathlib's\"</span>\n<span class=\"n\">curl</span> <span class=\"bp\">-</span><span class=\"n\">L</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">raw.githubusercontent.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">cat</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">rm</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">manifest.json</span>\n\n<span class=\"n\">echo</span> <span class=\"s2\">\"Updating lake\"</span>\n<span class=\"kn\">export</span> <span class=\"n\">LOOGLE_SECCOMP</span><span class=\"bp\">=</span><span class=\"n\">true</span>\n<span class=\"n\">lake</span> <span class=\"n\">update</span>\n<span class=\"n\">cat</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">manifest.json</span>\n\n<span class=\"n\">echo</span> <span class=\"s2\">\"Fetching mathlib cache\"</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n\n<span class=\"n\">echo</span> <span class=\"s2\">\"Building loogle\"</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"n\">loogle</span>\n\n<span class=\"n\">echo</span> <span class=\"s2\">\"Building mathlib cache\"</span>\n<span class=\"n\">lake</span> <span class=\"n\">exec</span> <span class=\"n\">loogle</span> <span class=\"c1\">--write-index ./.lake/build/lib/LoogleMathlibCache.extra</span>\n</code></pre></div>",
        "id": 419238956,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706791665
    },
    {
        "content": "<p>It can also be built mathlib-style, using <code>#runCmd</code>, but since I am anyways building a CLI this is faster, as it runs in compiled code.</p>",
        "id": 419239070,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706791695
    },
    {
        "content": "<p>I don't see a thing in that script that adds mathlib to the lakefile</p>",
        "id": 419239277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791782
    },
    {
        "content": "<blockquote>\n<p>you want it to be separate from the version in std as well?</p>\n</blockquote>\n<p>I did not think much about that yet; I guess I was waiting first for an answer to the question of ergonomic (lake-managed? reservoir-cloud-build caches) precomputed indexes; to me that seems a prerequisite</p>",
        "id": 419239419,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706791834
    },
    {
        "content": "<p>I think the <code>#find</code> in std should be agnostic to cache distribution methods</p>",
        "id": 419239522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791874
    },
    {
        "content": "<p>It’s already in the lakefile; although I’d probably separate that out into a “loogle-deploy” package so that the loogle lakefile itself doesn’t have to, once people want to import the loogle package</p>",
        "id": 419239543,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706791882
    },
    {
        "content": "<p>right, my point being that mathlib can't <code>require</code> loogle if loogle requires mathlib</p>",
        "id": 419239614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791909
    },
    {
        "content": "<p>Luckily, Loogle the library doesn't, and I can change that when and if mathlib wants to import Loogle.</p>",
        "id": 419239783,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706791964
    },
    {
        "content": "<p>You will still want the loogle library of course, for the web stuff</p>",
        "id": 419239803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706791974
    },
    {
        "content": "<p>but I think the core logic of <code>#find</code> should move out of the loogle package and into std</p>",
        "id": 419239871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706792005
    },
    {
        "content": "<p>and I want it to go via mathlib because otherwise I don't think it will be reviewed and tested well enough</p>",
        "id": 419240007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706792055
    },
    {
        "content": "<p>mathlib is one of the primary clients of <code>#find</code></p>",
        "id": 419240042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706792073
    },
    {
        "content": "<p>No objections. Does anyone here want to help with that?</p>",
        "id": 419240135,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706792119
    },
    {
        "content": "<p>in the short term the fact that loogle imports mathlib already means that it won't even break or need duplication in the interim</p>",
        "id": 419240194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706792144
    },
    {
        "content": "<p>I think you are probably going to have to be the one taking point on this</p>",
        "id": 419240294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706792172
    },
    {
        "content": "<p>since you are the maintainer of the loogle library</p>",
        "id": 419240323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706792184
    },
    {
        "content": "<p>but well, if someone volunteers then that's great</p>",
        "id": 419240399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706792213
    },
    {
        "content": "<p>it doesn't seem like a major priority, so it's fine by me if this just sits until you or me or someone else has the time to take it on</p>",
        "id": 419240704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706792340
    },
    {
        "content": "<p>Agreed</p>",
        "id": 419240797,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706792382
    },
    {
        "content": "<p>I’m just a bit hesitant because I personally find (heh) I don’t need it as <code>#find</code>, as the web interface scratches all the itches I have, and completely egoistically it’s more fun to work on code that I can just push to. So my intrinsic motivation to get it into mathlib isn’t that high, and I’d prefer to support someone who actually wants to use it.</p>",
        "id": 419241214,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706792519
    },
    {
        "content": "<p>I'm trying to get my metaprogramming up to scratch, and I think I'm one of Loogle's most prolific (ab)users - I'm happy to help out; I assume most of this would be modularising and porting to mathlib? I can fully understand wanting to keep it in a state of being able to edit easily - iteration within Mathlib is not fun.</p>",
        "id": 419242020,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706792803
    },
    {
        "content": "<p>yes, this file and dependencies: <a href=\"https://github.com/nomeata/loogle/blob/master/Loogle/Find.lean\">https://github.com/nomeata/loogle/blob/master/Loogle/Find.lean</a> (the main <code>Loogle</code> is the CLI). If you want to see that through to become <code>Mathlib.Tactic.Find</code>, that’d be great!  I think it’s ok if they go out of sync temporarily; I can copy back improvements to keep the diff smaller.</p>",
        "id": 419243606,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706793379
    },
    {
        "content": "<blockquote>\n<p>and completely egoistically it’s more fun to work on code that I can just push to</p>\n</blockquote>\n<p>This is probably obvious and goes without saying, but this is unfortunately mutually exclusive with getting it into std</p>",
        "id": 419244628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706793715
    },
    {
        "content": "<p>if it's still changing rapidly or experimental, it should not be moved to std yet, although you can still iterate in mathlib without too much friction as long as you allow for enough lead time</p>",
        "id": 419244986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706793830
    },
    {
        "content": "<p>(the initial commit is the hardest PR, bugfixes to existing tactics are relatively easier to review)</p>",
        "id": 419245301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706793944
    },
    {
        "content": "<p>Even with a #find implementation in std or mathlib it could still be that  <a href=\"http://loogle.lean-fro.org\">loogle.lean-fro.org</a> runs on a copy of the code, or a non-merged PR, so I there is probably cake to be had and eaten too.</p>",
        "id": 419246402,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706794293
    },
    {
        "content": "<p>sure, if you want to do that it's fine as well</p>",
        "id": 419248621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706794986
    }
]