[
    {
        "content": "<p>I translated a computable algorithm and proof of its correctness for depth first search from a paper I found in Isabelle. I'm planning on using it for the epsilon closure of nondeterministic state machines. If it may be of use, it is currently <a href=\"https://github.com/pthomas505/FOL/blob/ae37dcd7ee645231934d453ee6afed12c34bdbbc/FOL/Computing/DFS.lean\">here</a>.</p>",
        "id": 439481437,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716168337
    },
    {
        "content": "<p>What is your model for graphs?</p>",
        "id": 439723471,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1716261487
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">  The adjacency list representation of a graph.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Graph</span>\n  <span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"bp\">×</span> <span class=\"n\">Node</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 439729169,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716265241
    },
    {
        "content": "<p>Is that what you mean?</p>",
        "id": 439729238,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716265310
    },
    {
        "content": "<p>If a pair of nodes is in the list, then there is a directed edge from the first node to the second node.</p>",
        "id": 439730384,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716266245
    },
    {
        "content": "<p>This allows for groups of nodes that are not connected to other groups of nodes. So the algorithm is basically to find the list of nodes that are all connected to a given list of nodes by some directed path.</p>",
        "id": 439733800,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716268838
    },
    {
        "content": "<p>Once Vector is merged, I would like to suggest the following for finite graphs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"o\">(</span><span class=\"n\">dataType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">dataType</span>  <span class=\"n\">n</span>\n     <span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">Array</span>  <span class=\"bp\">&lt;|</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 439764582,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716281930
    },
    {
        "content": "<p>What does <code>(Array  &lt;| Fin n)</code> mean?</p>",
        "id": 440765740,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716780123
    },
    {
        "content": "<p>What would the advantage be of this representation? (not saying there isn't one, just trying to understand)</p>",
        "id": 440771282,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716784597
    },
    {
        "content": "<p><code>a &lt;| b x</code> is a different way of writing <code>a (b x)</code> that doesn't require balancing parens. Some people prefer <code>a &lt;| b &lt;| c &lt;| d x</code> to <code>a (b (c (d x)))</code></p>",
        "id": 440771989,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1716785122
    },
    {
        "content": "<p>A lot of syntactic items/notation have hover docs btw, including this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Haskell</span><span class=\"bp\">-</span><span class=\"n\">like</span><span class=\"w\"> </span><span class=\"n\">pipe</span><span class=\"w\"> </span><span class=\"n\">operator</span><span class=\"w\"> </span><span class=\"bp\">&lt;|.</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">means</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">parses</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"kn\">precedence</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">means</span><span class=\"w\"> </span><span class=\"n\">that</span>\n<span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">interpreted</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">rather</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 440772221,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1716785233
    },
    {
        "content": "<p>I see. So this would be an array of natural numbers each of which is less than <code>n</code>?</p>",
        "id": 440772562,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716785455
    },
    {
        "content": "<p>And then a vector of length <code>n</code> consisting of those?</p>",
        "id": 440772732,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716785594
    },
    {
        "content": "<p>I guess I'm not sure what this means as a representation.</p>",
        "id": 440772859,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716785687
    },
    {
        "content": "<p>Oh, is it <a href=\"https://en.wikipedia.org/wiki/Adjacency_matrix\">https://en.wikipedia.org/wiki/Adjacency_matrix</a>?</p>",
        "id": 440773104,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716785880
    },
    {
        "content": "<p>Oh sorry, I thought you were specifically asking about the syntax. Yes, it's an adjacency list. My guess is that the use of <code>Fin n</code> is just to show that the indices are all in-bounds as part of the type.</p>",
        "id": 440773819,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1716786299
    },
    {
        "content": "<p>No, you were right, thank you. I was first asking about the syntax, and then trying to understand the semantics.</p>",
        "id": 440773981,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1716786383
    },
    {
        "content": "<p>The structure represents a graph of n vertices in adjacency list form (except I use arrays)</p>",
        "id": 440808769,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716800534
    },
    {
        "content": "<p>The array entries are of type <code>Fin n</code> to indicate that the neighbours are also vertices. Also, I can use them as indices of adj_arr with no extra effort</p>",
        "id": 440809030,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716800625
    },
    {
        "content": "<p>I am currently using the name <code>FinGraph</code> for this structure.</p>",
        "id": 440813176,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716801893
    },
    {
        "content": "<p>Just wanted to add that for a different reason, I implemented an adjacency list based multigraph called fingraph with DFS and BFS: <a href=\"https://github.com/Shreyas4991/DGAlgorithms/blob/model_PN_shreyas/DGAlgorithms/Models/Fingraph.lean\">https://github.com/Shreyas4991/DGAlgorithms/blob/model_PN_shreyas/DGAlgorithms/Models/Fingraph.lean</a></p>\n<p>Note : The decreasing_by proofs for the auxiliary functions are long, but I suspect these can be shortened.</p>",
        "id": 443310406,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717770730
    }
]