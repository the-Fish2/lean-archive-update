[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/348111-std4/topic/RFC.3A.20Arrays.20with.20fixed.20length/near/430166031\">said</a>:</p>\n<blockquote>\n<p>I think this is common enough that it could go in Lean itself.  I discussed the homogenous case with Scott yesterday since it was useful for a formalization of AES.  Here's a link to that <a href=\"https://github.com/joehendrix/lean-aes/blob/main/AES/Vec.lean\">implementation</a> if folks are interested and AES using it is <a href=\"https://github.com/joehendrix/lean-aes/blob/main/AES/Spec.lean\">here</a>.</p>\n</blockquote>\n<p>I'm not sure about it being \"common enough to go in Lean\" because it is mainly restricted to software verification contexts, but I also very much dislike the implication that common things should be going in lean just because they are common, because this is the beginning of the end for std.</p>",
        "id": 430166990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711662456
    },
    {
        "content": "<p>Indeed, there's been a lot of movement from Std to Init, and I think this is a good thing for most users for a few reasons.</p>\n<ul>\n<li>If you switch to using a nightly, then you have less fishing for finding the right branch to use.</li>\n<li>Fewer imports for tactics and definitions</li>\n<li>Importing Std modules don't change meaning of syntax or normal forms (e.g., core now uses same Integer division as Std/Mathlib).  It also has much of the same Bool/Prop normal forms as Std and Mathlib.</li>\n</ul>\n<p>It is of course possible to keep consistent normal forms across repos, but past experience has shown that's difficult.</p>",
        "id": 430168245,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711663129
    },
    {
        "content": "<p><a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/430166990\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4/topic/RFC.3A.20Arrays.20with.20fixed.20length\">#std4 &gt; RFC: Arrays with fixed length</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 430168602,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711663318
    },
    {
        "content": "<p><a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/430168245\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4/topic/RFC.3A.20Arrays.20with.20fixed.20length\">#std4 &gt; RFC: Arrays with fixed length</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 430168679,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711663346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/430168245\">said</a>:</p>\n<blockquote>\n<p>Importing Std modules don't change meaning of syntax or normal forms (e.g., core now uses same Integer division as Std/Mathlib). It also has much of the same Bool/Prop normal forms as Std and Mathlib.</p>\n</blockquote>\n<p>This is mainly a problem caused by the current Lean contribution rules though. When it's not possible to change upstream, downstream finds a workaround. No one likes that solution but moving parts of the downstream to upstream will not solve the problem.</p>",
        "id": 430185954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711674446
    },
    {
        "content": "<p>If you are saying that now that upstream is more responsive we won't need to use workarounds in downstream then that's great, but it's not motivation to move anything beyond the workaround itself. Moving more than that will create more opportunities for downstream to get stuck because upstream took ownership of things it isn't prepared to maintain</p>",
        "id": 430186172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711674612
    },
    {
        "content": "<p>One problematic move was upstreaming <code>@[ext]</code> while it had major issues <a href=\"https://github.com/leanprover/lean4/pull/3643\">lean4#3643</a> (formerly <a href=\"https://github.com/leanprover/std4/pull/618\">std4#618</a>). Luckily, I found time to migrate this issue so it's not forgotten. It was on my back burner to try to fix it in Std, it is not high priority enough for me to try to fix it in core.</p>",
        "id": 430187112,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1711675283
    },
    {
        "content": "<blockquote>\n<p>Fewer imports for tactics and definitions</p>\n</blockquote>\n<p>There is also a possible undesirable side effect of this, which is that more projects will feel compelled to use <code>prelude</code> to stop importing too much due to the growing scope of <code>Init</code>. Already this has happened for the <code>Lean</code> package, which uses it to avoid unnecessary build dependencies. Downstream projects usually aren't building <code>Init</code> so this is less of an issue, but there is still a build cost for having all the modules in scope and initialized, an impact on autocomplete performance etc. Basically all the reasons why people don't like <code>import Mathlib</code> also apply to <code>import Init</code> in a world where <code>Init</code> tries to eat everything.</p>",
        "id": 430188059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711676159
    },
    {
        "content": "<p>One possibility (but probably a bad idea?) is to have Std within core in a similar way that Lake is in core.</p>",
        "id": 430195107,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1711681721
    },
    {
        "content": "<p>Following up on Mario's comment. I have been under the impression that Lean 4 core developers wanted to keep Init very small (after lessons from Lean 2 and Lean 3). Has this changed?</p>",
        "id": 430195708,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1711682277
    },
    {
        "content": "<p>After the last (or next to last?) community meeting, I got the feeling that Leo wanted more components to be stable rather than small. (I'm thinking about some comments about the algebra hierarchy in Mathlib.)</p>",
        "id": 430195968,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1711682481
    },
    {
        "content": "<p>Keeping Init small is still a goal, but we also want good consistent normal forms of core types across Init, Std, and Mathlib.</p>\n<p>Mario, if you are concerned about <code>Init</code> size, we could dig into the details.  Could you elaborate on how that's impacting your work and post some more specific numbers comparing the size of the environment after <code>import Init</code> and <code>import Mathlib</code>?</p>",
        "id": 430285004,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711731145
    },
    {
        "content": "<blockquote>\n<p>Keeping Init small is still a goal, but we also want good consistent normal forms of core types across Init, Std, and Mathlib.</p>\n</blockquote>\n<p>As I've already said, the way to solve this is for Init, Std, and Mathlib to <em>agree</em> on what those normal forms are, and the way for that to happen is for the various maintainer groups to <em>talk to each other</em> about what the plans and problems are. As far as I am aware no concern of this form has been directly brought up with the mathlib maintainer team for consideration.</p>",
        "id": 430316346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711745421
    },
    {
        "content": "<p>You simply cannot unilaterally solve the problem by moving code around, you will just cause the problem to pop up somewhere else if the projects aren't on the same page.</p>",
        "id": 430316451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711745485
    },
    {
        "content": "<p>Moving things between projects can potentially make the problem worse, as moving something upstream is saying \"the normal form cannot be in terms of anything that is now downstream\"</p>",
        "id": 430320777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711747992
    },
    {
        "content": "<p><span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span> this was a major problem / reason we needed to upstream <code>NatCast</code></p>",
        "id": 430336361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711757861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/430316451\">said</a>:</p>\n<blockquote>\n<p>You simply cannot unilaterally solve the problem by moving code around, you will just cause the problem to pop up somewhere else if the projects aren't on the same page.</p>\n</blockquote>\n<p>What can't I do and why?  Many more terms with <code>Bool</code> and <code>Prop</code> now have consistent normal forms in Lean, Std and Mathlib after <a href=\"https://github.com/leanprover/lean4/pull/3508\">lean4#3508</a>.  That was largely achieved by upstreaming lemmas + additional fixes.</p>\n<p>Are there problems with that PR that I should be aware of?  There will eventually be similar compatibility change for <code>Nat</code>/<code>Int</code> with <a href=\"https://github.com/leanprover/lean4/pull/3562\">lean4#3562</a> and then other theories.</p>",
        "id": 430337609,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711758643
    },
    {
        "content": "<blockquote>\n<p>What can't I do and why? Many more terms with Bool and Prop now have consistent normal forms in Lean, Std and Mathlib after <a href=\"https://github.com/leanprover/lean4/pull/3508\">lean4#3508</a>. That was largely achieved by upstreaming lemmas + additional fixes.</p>\n</blockquote>\n<p>If you make a change that a downstream project disagrees with, it may \"overrule\" you and introduce different normal forms in order to solve downstream problems caused by your changes. I'm not saying that happened in this case, but the way to ensure it doesn't happen is to be open and communicative about what you are changing and why so that we can find a common solution which solves things for everyone rather than helping one project while hurting another.</p>",
        "id": 430338606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711759276
    },
    {
        "content": "<p>The situation with Int division was basically this: core had a definition of integer division which turned out to be really untenable for mathlib, and we needed to do something about it and core was not helping. So we ended up just overriding the definition downstream, first in mathlib and then upstreamed to std after it started getting the integer division lemmas and came to the same realization as mathlib regarding the untenability of using C-style division in most lemmas.</p>",
        "id": 430338827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711759438
    },
    {
        "content": "<p>This is a problem that would have been solved if the respective maintainer teams were on the same page. They eventually came around, which is why this division now lives in core where it should be. But in almost every case where you see \"differing normal forms\" that have been put there on purpose, you can trace the core of the issue down to a communications breakdown</p>",
        "id": 430339059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711759568
    },
    {
        "content": "<p>This is one of the reasons that when I hear \"My project is to improve the consistency of normal forms\" which does <em>not</em> involve going around and talking to lots of people, I get nervous, because that's exactly the prerequisite for coming up with a solution that will actually work and won't be \"overruled\" later</p>",
        "id": 430339282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711759723
    },
    {
        "content": "<blockquote>\n<p>Are there problems with that PR that I should be aware of?</p>\n</blockquote>\n<p>I see that you made <code>simp</code> much more aggressively classical than before, making use of <code>Classical.foo</code> lemmas even when <code>Decidable.foo</code> lemmas could be used to similar effect (such that classical simping can be controlled by <code>open Classical</code>). This makes me sad, I was trying to avoid that, but I'm not really able to keep arguing on this point.</p>",
        "id": 430339840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711760068
    },
    {
        "content": "<p>(what's worse, making them global simps in core means no one can override it in downstream projects without local un-simp-ing every time)</p>",
        "id": 430339902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711760109
    },
    {
        "content": "<p>For something that is changing simp normal forms, I'm surprised it was not tested against mathlib before merging. How could you know if you made a good change without such a test? There are also no mathlib maintainers among the reviews. So from a procedural standpoint I would say that it has some warning signs. I would have liked to have a discussion about these changes in terms of what is changing and why; the PR itself is quite vague about the changes and you have to read the diff to actually see these things.</p>",
        "id": 430341151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711760937
    },
    {
        "content": "<p>Why do you assume that it was tested against Mathlib?</p>",
        "id": 430342175,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711761529
    },
    {
        "content": "<p>Isn't Scott a Mathlib maintainer?</p>",
        "id": 430342214,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711761550
    },
    {
        "content": "<p>Indeed, the increased use of classical was because Mathlib made those choices.</p>",
        "id": 430342253,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711761590
    },
    {
        "content": "<p>I am sorry that you are disappointed in my results and how the work was performed.</p>",
        "id": 430342364,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711761645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/430342175\">said</a>:</p>\n<blockquote>\n<p>Why do you assume that it was tested against Mathlib?</p>\n</blockquote>\n<p>(I assume you missed a negation here.) The mathlib CI bot doesn't appear to have succeeded, and there is no comment on the post saying you tested it against mathlib.</p>",
        "id": 430342580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711761783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/430342253\">said</a>:</p>\n<blockquote>\n<p>Indeed, the increased use of classical was because Mathlib made those choices.</p>\n</blockquote>\n<p>That was deliberately left as part of mathlib, along with the <code>foo</code> lemmas aliasing <code>Classical.foo</code>. Std was more agnostic about it.</p>",
        "id": 430342761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711761896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/430342364\">said</a>:</p>\n<blockquote>\n<p>I am sorry that you are disappointed in my results and how the work was performed.</p>\n</blockquote>\n<p>The real question is whether it is acceptable for me to submit a PR reverting some of this. It's perfectly alright if we don't get things right on the first try, but the real issue is that core is super-scary for anyone not in the FRO to contribute to, so I don't know whether I should just despair on improvements at this point.</p>",
        "id": 430342975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711762055
    },
    {
        "content": "<p>Honestly I don't have enough information about what you did to be disappointed in the results. It was just not a topic of discussion at any point so I don't have a basis for understanding what in it is important. I just remarked on a few things I noticed while looking over it just now.</p>",
        "id": 430343658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711762497
    },
    {
        "content": "<p>Sure, if you have changes, you can submit PRs or propose them here.  It would be helpful to me if you update and rerun the normal form tester with just Init and then <code>import Mathlib\".  It currently lives in </code>tests/playground/bool_exhaust_test.lean` until it is more polished.</p>",
        "id": 430350618,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711767968
    },
    {
        "content": "<p>What is the normal form tester exactly?</p>",
        "id": 430352236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711769813
    },
    {
        "content": "<p>I can't answer for Joe, but he did recently develop lots of \"tactic checking\" tools. As far as I am aware, the current pinnacle is an extremely thorough check of <code>Bool</code> simps. I really enjoyed glimpsing at these developments after Joe shared a link to me. Which brings us back to the core problem: why weren't these developments announced more broadly? I agree with Mario that there is indeed a serious communication issue.</p>",
        "id": 430379524,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1711795866
    },
    {
        "content": "<p>FWIW: I don't think the FRO nor the community are to blame here. I think good communication is an issue that needs to be resolved from both sides, in different ways. I hope that both the FRO and the community will propose ideas to fix this issue.</p>",
        "id": 430380195,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1711796434
    },
    {
        "content": "<p>If I recall correctly, this was discussed at the last community meeting.  The testing framework still needs additional development prior to more widespread usage on other theories in my opinion.   It's not intentionally kept secret, but it just needs to be better.</p>",
        "id": 430433840,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711847677
    },
    {
        "content": "<p>Regarding communication: </p>\n<ul>\n<li>The monthly community meetings are available online. In the last one, we discussed the Std refactoring: <a href=\"https://www.youtube.com/watch?v=vb1pPkG9e-8\">https://www.youtube.com/watch?v=vb1pPkG9e-8</a>.<div class=\"youtube-video message_inline_image\"><a data-id=\"vb1pPkG9e-8\" href=\"https://www.youtube.com/watch?v=vb1pPkG9e-8\"><img src=\"https://uploads.zulipusercontent.net/bb2c1e748da6581dff4915f8ea7c16678d257d5f/68747470733a2f2f692e7974696d672e636f6d2f76692f76623170506b4739652d382f64656661756c742e6a7067\"></a></div></li>\n<li>The Lean FRO public events are available here: <a href=\"https://lean-fro.org/events/\">https://lean-fro.org/events/</a>. Note that we have weekly office hours.</li>\n<li>Our roadmap is available online: <a href=\"https://lean-fro.org/about/roadmap/\">https://lean-fro.org/about/roadmap/</a></li>\n</ul>",
        "id": 430859779,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1712086470
    },
    {
        "content": "<p>The road map and community meetings are great but they are mostly the FRO telling users what they are working on. I think Mario meant communication in the other direction, from users to the FRO. The office hours are not really about the same thing, from what I saw. They are also really nice, but mostly about teaching how to use Lean.</p>",
        "id": 431563133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712334516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <br>\nHalf of the community meetings led by the FRO are dedicated to Q&amp;A sessions, where users are encouraged to ask questions and discuss their issues. Several FRO members also attend the community meetings organized by the Mathlib maintainers. Regarding the office hours, we clarified in the last announcement (<a href=\"#narrow/stream/113488-general/topic/Office.20hours/near/431167910\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Office.20hours/near/431167910</a>) that questions about Lean, Std, and the roadmap are welcome. Additionally, several FRO members are very active here on Zulip.</p>",
        "id": 431567283,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1712335891
    },
    {
        "content": "<p>All this is great, and you know I am very grateful. But moving many things from Std to Core was still a major decision that, as far as I can see, was not discussed at all with users and Std maintainers before being implemented. So I can understand that Mario is a bit worried. This decision was well explained after the fact but not discussed a priori (unless I missed some discussion). And allowing users to ask questions during meetings or office hours does not help with this. How could we know that we should have asked: do you plan to move Std to Core?</p>",
        "id": 431570241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712336867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <br>\nThank you for your feedback. I acknowledge that the transition from Std to Core was a significant move and not one that was taken lightly. I want to clarify that <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span>  did notify Mario before the changes were initiated and prior to the broader community announcement. At the FRO, we were fully committed to ensuring that Mathlib would be properly patched during the process. We are currently exploring strategies to minimize future disruptions for Mathlib users. Additionally, we are dedicated to making Lean a successful mainstream programming language with a diverse user base.</p>",
        "id": 431575205,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1712338700
    },
    {
        "content": "<p>I was indeed notified that some tactics were going to move, not really in a way which invited discussion but more of a \"heads up this is happening\". I have to admit that the scale turned out to be much bigger than I expected and now there isn't much left within the original purview of Std from what I can tell. Most of the things on Joe's original Std roadmap are now in an uncertain position and I don't know what will remain. Perhaps future announcements will clarify matters here, but I certainly haven't gotten the impression that I have any say over the contents of those announcements.</p>",
        "id": 431641086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712380202
    },
    {
        "content": "<p>For reference, the old roadmap I can find is</p>\n<blockquote>\n<p>The Standard Library consists of</p>\n<ul>\n<li>Declarations and lemmas on basic types.</li>\n<li>Common data structures with operations and lemmas.</li>\n<li>Type classes and other abstractions</li>\n<li>Operating system operations</li>\n<li>Tactics and commands<ul>\n<li>Manipulation and cleanup tactics</li>\n<li>Highly automated finishing tactics </li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 431655352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712393390
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Type classes and other abstractions</li>\n</ul>\n</blockquote>\n<p>sounds ultravague</p>",
        "id": 431658739,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712396584
    },
    {
        "content": "<p>Dear all,</p>\n<p>First and foremost, I want to express my deepest gratitude for the exceptional work you have all contributed to the Lean project. Your dedication and expertise have been instrumental.</p>\n<p>We are at a pivotal moment in the evolution of our project, and I need to share some significant changes that will impact our path forward. After thorough consideration and discussions, we have decided to rename the current Std library to Boost. This change will allow us to realign the library with its evolving nature and community expectations. The Boost library will be a space where experimental and incomplete ideas can flourish, providing a platform for innovation and exploration without the constraints imposed on the core libraries. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  has already discussed this decision with <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> .</p>\n<p>In parallel, we will create a new Std library, more in line with the standard libraries of mainstream programming languages. Its scope has already been shared in the last community meeting. This new Std will house essential functionality, ensuring a coherent and high-quality foundation for Lean users across various domains, including mathematics, software development and verification, and AI.</p>\n<p>We acknowledge and respect that within our community, there are diverse opinions about the development model. While some community members prefer the Bazaar style, which encourages a more decentralized and open approach, we have observed that this model has negatively affected productivity in our past experiments. Therefore, we will continue using the Cathedral model for the core Lean repository and the new Std to ensure a consistent and efficient development process. This decision comes with the responsibility of maintaining Lean's core integrity and ensuring it meets the broader community's needs effectively.</p>\n<p>I want to assure you that the autonomy of the Boost library will be respected, and its maintainers will have significant freedom in its development and direction. The distinction between Std and Boost will enable us to cater to the different needs and expectations within our community without compromising the overall user experience.</p>\n<p>The decision to transition pieces of Std to the core repository was driven by the necessity to enhance the user experience, particularly for those not utilizing Mathlib. We also wanted to streamline development and address the dispersion of key functionalities across various packages, which has led to inconsistencies and inefficiencies.</p>\n<p>We are committed to supporting Mathlib and ensuring its seamless integration with every Lean 4 release. Our continuous efforts to reduce compilation times per million lines of code are a testament to this commitment. Our goal is to provide a seamless, efficient, and enjoyable experience for all Lean users, regardless of their field.</p>\n<p>I understand that changes of this magnitude can be surprising and may lead to uncertainties. I want to open a line of dialogue for any concerns or suggestions you may have. Your input is invaluable, and while the strategic direction is a responsibility that I bear, it is essential that it resonates with and supports the community's goals and needs. Please free to use our weekly office hours and community meetings to ask questions.</p>\n<p>Thank you for your ongoing commitment to the Lean project. I look forward to navigating these changes together and building a stronger, more vibrant community around our shared passion for Lean.</p>\n<p>Best,<br>\nLeo</p>",
        "id": 431696248,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1712429191
    },
    {
        "content": "<p>Just to clarify: who will be the maintainers of Std and who will be the maintainers of Boost?</p>",
        "id": 431696648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1712429453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks for asking. The new Std will be maintained by the Lean FRO. Boost will be maintained by the community.</p>",
        "id": 431696887,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1712429623
    },
    {
        "content": "<p>I fear that in the coming years we'll find ourselves discovering poor design decisions that are much harder if not impossible to fix because they're baked into the core language rather than in an independently versioned std library. I hope I'm wrong, though</p>",
        "id": 431700429,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712432506
    },
    {
        "content": "<p>Another big downside of eagerly upstreaming things from Std (or soon-to-be-boost) to core is that development metaphor aside, the contribution barrier is far higher from a technical standpoint for the latter. If I check out the std repo, the vscode extension does all the work and I can just write lean code. If I checkout core then I have to build a lean binary before I can do anything.</p>",
        "id": 431701146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712433117
    },
    {
        "content": "<p>A cathedral model with such high barriers to contribute is likely to create the bazaar model anyway.</p>",
        "id": 431701397,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1712433244
    },
    {
        "content": "<p>eg the lemma names. Recently I have been littering mathlib with <code>-- TODO: Fix name in Std</code>. Should I rather be writing <code>-- TODO: Get over it</code>?</p>",
        "id": 431701434,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712433271
    },
    {
        "content": "<p>(the above is of course a problem solvable in other ways (like a nix cache?), but I haven't seen it raised yet)</p>",
        "id": 431701601,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712433382
    },
    {
        "content": "<p>I think a development model like this does already exist in other languages and works to produce acceptable results. E.g. in Rust where you have to fiddle with x.py etc. to get a libstd environment set up but the stdlib is pretty great. There is also of course C++ with its libstdc++ and boost (which this is obviously alluding to)</p>",
        "id": 431701679,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1712433465
    },
    {
        "content": "<p>Leo's message didn't mention much about upstreaming to core, right? So maybe we should split into two threads...</p>",
        "id": 431702259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1712433975
    },
    {
        "content": "<p>Yes, I guess there are two points of discussion here:</p>\n<ul>\n<li>What determines the line between core and the library-formerly-known-as-Std? Is anything definitely out of scope for upstreaming?</li>\n<li>What's going on with the old vs new roadmap for Std, which seems to have completely diverged (I think the boost/std split answers this one)</li>\n</ul>",
        "id": 431705307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712437322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/431701434\">said</a>:</p>\n<blockquote>\n<p>eg the lemma names. Recently I have been littering mathlib with <code>-- TODO: Fix name in Std</code>. Should I rather be writing <code>-- TODO: Get over it</code>?</p>\n</blockquote>\n<p>The intentional is that the current contents of Std will largely move to Boost (with the exception of List/Array lemmas, which will be upstreamed, and HashMap, which <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> is beginning significant new work on).</p>\n<p>So these TODOs should mostly change to \"Fix name in Boost\". If they affect List/Array lemmas, then please make the PR to Lean if they've already moved. Name changes that require discussion should wait (we don't want to be drawn into bikesheds about names; my hope is that when verso is done and documentation efforts begin in earnest, we can appoint <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> as the core naming czar, empowered to unilaterally fix names. :-), but I'll merge obvious fixes.</p>",
        "id": 431709352,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712441207
    },
    {
        "content": "<p>The new <code>Std</code> will actually be largely, perhaps even completely, empty for a while! We want to make room for the FRO developed library, and want to alert everyone to our intention to develop this, sooner rather than later.</p>",
        "id": 431709433,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712441298
    },
    {
        "content": "<p>Is the \"new Std\" roadmap available anywhere in non-video format? (I know it came up in the meeting, but unlike the original roadmap, the slides don't seem to be google-indexed)</p>",
        "id": 431709481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712441396
    },
    {
        "content": "<p>Nope. :-)</p>",
        "id": 431709752,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712441640
    },
    {
        "content": "<p>If I understand correctly, the current <em>content</em> of Std will be split.<br>\nEssentials will go to Lean.<br>\nNon-essentials will go to Boost.</p>\n<p>What will be the content of the new Std then?</p>",
        "id": 431917040,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712569505
    },
    {
        "content": "<p>It's in the slides of the latest monthly meeting, which I believe was recorded</p>",
        "id": 431951948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712577636
    },
    {
        "content": "<p>Question: Will <code>lake update</code> smoothly handle this transition when it happens?</p>",
        "id": 431978420,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1712585068
    },
    {
        "content": "<p>The main effect of the latest bump is that some imports like <code>Std.Tactic.RCases</code> are no longer necessary. If you get an error about a missing file after a bump try just deleting the import</p>",
        "id": 431991965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712588320
    },
    {
        "content": "<p>Is there a summary of those moved tactics somewhere?<br>\nI will update my table: <a href=\"https://github.com/madvorak/lean3-tactic-lean4\">https://github.com/madvorak/lean3-tactic-lean4</a></p>",
        "id": 432000881,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712589987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/431709352\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/431701434\">said</a>:</p>\n<blockquote>\n<p>eg the lemma names. Recently I have been littering mathlib with <code>-- TODO: Fix name in Std</code>. Should I rather be writing <code>-- TODO: Get over it</code>?</p>\n</blockquote>\n<p>The intentional is that the current contents of Std will largely move to Boost (with the exception of List/Array lemmas, which will be upstreamed, and HashMap, which <span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> is beginning significant new work on).</p>\n<p>So these TODOs should mostly change to \"Fix name in Boost\". If they affect List/Array lemmas, then please make the PR to Lean if they've already moved. Name changes that require discussion should wait (we don't want to be drawn into bikesheds about names; my hope is that when verso is done and documentation efforts begin in earnest, we can appoint <span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> as the core naming czar, empowered to unilaterally fix names. :-), but I'll merge obvious fixes.</p>\n</blockquote>\n<p>FYI <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> , building on Mario's invariants I had verified a sufficient number of HashMap functions to build verified software on top of. The basic model is in <a href=\"https://github.com/leanprover/std4/pull/279\">std4#279</a>, and on my hard drive I have all the proofs using that model. I will assume that this is no longer relevant given the move, but if you would still like the proofs then please let me know and I can PR the rest.</p>",
        "id": 432081193,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1712617247
    },
    {
        "content": "<p>We have both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.HashMap#doc\">docs#Std.HashMap</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.HashMap#doc\">docs#Lean.HashMap</a>. Are there any differences? If no, then should we delete the <code>Std</code> one?</p>",
        "id": 432399396,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1712722482
    },
    {
        "content": "<p>The original reason for the split is because the lean one doesn't prove correctness and also wants the flexibility to change without affecting Std consumers.</p>",
        "id": 432399732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712722645
    }
]