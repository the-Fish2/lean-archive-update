[
    {
        "content": "<p>In <code>Std.Data.List.Init.Lemmas</code> we <a href=\"https://github.com/leanprover/std4/blob/main/Std/Data/List/Init/Lemmas.lean#L18C1-L18C1\">add</a> the <code>@[simp]</code> attribute to a lot of definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">get</span> <span class=\"n\">reverseAux</span> <span class=\"n\">eraseIdx</span> <span class=\"n\">map</span> <span class=\"n\">join</span> <span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">findSome</span><span class=\"bp\">?</span>\n  <span class=\"n\">replace</span> <span class=\"n\">elem</span> <span class=\"n\">lookup</span> <span class=\"n\">drop</span> <span class=\"n\">take</span> <span class=\"n\">foldl</span> <span class=\"n\">foldr</span> <span class=\"n\">zipWith</span> <span class=\"n\">unzip</span> <span class=\"n\">range.loop</span> <span class=\"n\">enumFrom</span>\n  <span class=\"n\">intersperse</span> <span class=\"n\">isPrefixOf</span> <span class=\"n\">isEqv</span> <span class=\"n\">dropLast</span> <span class=\"n\">iota</span> <span class=\"n\">mapM.loop</span> <span class=\"n\">mapA</span> <span class=\"n\">List.forM</span> <span class=\"n\">forA</span> <span class=\"n\">filterAuxM</span>\n  <span class=\"n\">filterMapM.loop</span> <span class=\"n\">List.foldlM</span> <span class=\"n\">firstM</span> <span class=\"n\">anyM</span> <span class=\"n\">allM</span> <span class=\"n\">findM</span><span class=\"bp\">?</span> <span class=\"n\">findSomeM</span><span class=\"bp\">?</span> <span class=\"n\">forIn.loop</span> <span class=\"n\">forIn'.loop</span>\n  <span class=\"n\">concat_eq_append</span> <span class=\"n\">append_assoc</span>\n</code></pre></div>\n<p>Is this really a good idea? I thought that we had decided <em>not</em> to put <code>@[simp]</code> on declarations like these, as it makes for unpredictable unfolding.</p>",
        "id": 390695679,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1694602150
    },
    {
        "content": "<p>The example where I've recently been annoyed by this reduced to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">relaxedAutoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">List.zip</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">List.zip</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- simp made no progress, since we haven't added @[simp] yet</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">List.foldl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">List.zip</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">List.zip</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.foldl</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Goal is now:</span>\n  <span class=\"c1\">-- ⊢ List.foldl f (f x (a, b)) (List.zipWith Prod.mk as bs) = f (List.foldl f x (List.zip as bs)) (a, b)</span>\n  <span class=\"c1\">-- Note that `List.zip` has been replaced with `List.zipWith Prod.mk`!</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 390695857,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1694602209
    },
    {
        "content": "<p>It would be some work to undo these attributes, but I think it might be a good idea.</p>",
        "id": 390695909,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1694602229
    },
    {
        "content": "<p>The work in Std is not terrible: <a href=\"https://github.com/leanprover/std4/pull/260\">std4#260</a>. No idea yet how Mathlib copes or otherwise.</p>",
        "id": 390720450,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1694610705
    },
    {
        "content": "<p>The corresponding Mathlib PR is now at <a href=\"https://github.com/leanprover-community/mathlib4/pull/7134\">#7134</a>, but it has a sorry that I would be happy to have help with.</p>",
        "id": 390732281,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1694614167
    },
    {
        "content": "<p>I can have a look</p>",
        "id": 390735436,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1694615016
    },
    {
        "content": "<p>Which sorry do you mean, the one in <code>mapIdx_eq_enum_map</code>?</p>",
        "id": 390735739,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1694615094
    },
    {
        "content": "<p>Awesome, thanks!</p>",
        "id": 390736570,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1694615334
    },
    {
        "content": "<p>Most of them seem to be bad ideas, and have been removed slowly. Specifically, putting <code>@[simp]</code> on a non-recursive function defined by pattern matching has different behavior in lean 3 and lean 4 and the lean 4 behavior is undesirable. Maybe some day this will be fixed, but for now we have to write all the equation lemmas we actually want to be <code>@[simp]</code> here by hand</p>",
        "id": 390782442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694630848
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2042\">lean4#2042</a> is the tracking issue for that behavior change, presumably <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>ing it if you care is worth something</p>",
        "id": 390790513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694634193
    },
    {
        "content": "<p>Unrelated to previously discussed <code>@[simp]</code> attributes: <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, what do you think about adding <code>@[simp]</code> to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.length_pos#doc\">docs#List.length_pos</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.drop_eq_nil_iff_le#doc\">docs#List.drop_eq_nil_iff_le</a> (and possibly changing assumptions <code>length l &gt; 0</code> to <code>l ≠ []</code> in other lemmas)?</p>",
        "id": 435098523,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713927128
    },
    {
        "content": "<p>That sounds okay to me, although the proof is in the quality of the mathlib bump PR</p>",
        "id": 435098960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713927383
    },
    {
        "content": "<p>Why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.headD_eq_head%3F#doc\">docs#List.headD_eq_head?</a> is a simp lemma in this direction?</p>",
        "id": 435818587,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714278979
    },
    {
        "content": "<p>With this lemma, we can never have <code>headD</code> in a <code>simp</code> normal form. In fact, I would reverse LHS with RHS.</p>",
        "id": 435818627,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714279023
    },
    {
        "content": "<p>It means <code>headD</code> is never a simp normal form, so theorems don't have to be stated about it</p>",
        "id": 435818649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714279028
    },
    {
        "content": "<p>There is a bit of combinatorial multiplication of <code>foo? / foo! / foo / fooD / fooI</code> definitions for lots of partial functions</p>",
        "id": 435818829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714279097
    },
    {
        "content": "<p>and we don't want to have to write out the <code>foo?</code> API 4-5 times</p>",
        "id": 435818936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714279142
    },
    {
        "content": "<p>Is there a uniform rule that applies to all <code>foo</code>s?</p>",
        "id": 435818993,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714279164
    },
    {
        "content": "<p>BTW, <code>fooI</code> is usually defeq <code>foo!</code></p>",
        "id": 435819038,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714279180
    },
    {
        "content": "<p>usually <code>fooD a = foo?.getD a</code> and <code>fooI = foo?.getD default</code></p>",
        "id": 435819094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714279202
    },
    {
        "content": "<p>and <code>foo!</code> and <code>fooI</code> are defeq</p>",
        "id": 435819186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714279217
    },
    {
        "content": "<p>the relationship between <code>foo?</code> and <code>foo</code> (the latter being a proof-taking function) depends on how the hypothesis is stated</p>",
        "id": 435819362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714279265
    },
    {
        "content": "<p>Is there a rule about <code>simp</code>-normal form that applies to many <code>foo</code>s?</p>",
        "id": 435819413,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714279280
    },
    {
        "content": "<p>I'm not sure we have a consistent rule in all cases, but I think it is reasonable to try to avoid <code>fooD</code> in favor of <code>Option.getD</code></p>",
        "id": 435819603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714279326
    },
    {
        "content": "<p>E.g., we simplify <code>headD</code> but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.getD_eq_get%3F#doc\">docs#List.getD_eq_get?</a> is not a <code>simp</code> lemma.</p>",
        "id": 435819685,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714279351
    },
    {
        "content": "<p>maybe it should be?</p>",
        "id": 435819835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714279392
    },
    {
        "content": "<p>It's in core. I have no opinion here, other than predictable <code>simp</code>-normal forms are better than unpredictable.</p>",
        "id": 435820286,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714279511
    },
    {
        "content": "<p>I don't think the FRO will disagree on that point</p>",
        "id": 435820412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714279546
    },
    {
        "content": "<p>On \"predictable is better than unpredictable\" or \"<code>fooD</code> vs <code>Option.getD (foo? ..)</code>\"?</p>",
        "id": 435820759,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714279635
    },
    {
        "content": "<p>The former. The latter I don't expect people to have much opinion on but you can use the former as a justification for it</p>",
        "id": 435823019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714280222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> I replied in <a href=\"https://github.com/leanprover/std4/pull/769\">std4#769</a></p>",
        "id": 436281212,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714486373
    },
    {
        "content": "<p>I won't be able to do anything Std/Mathlib-related in the next 10-12h.</p>",
        "id": 436281356,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714486424
    }
]