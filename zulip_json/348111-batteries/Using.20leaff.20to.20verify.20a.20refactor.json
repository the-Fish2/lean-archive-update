[
    {
        "content": "<p>I'm trying to use leaff to check that <a href=\"https://github.com/leanprover/std4/pull/646\">std4#646</a> does not introduce any unintended functional changes.<br>\nRunning it locally gives an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"bp\">.</span><span class=\"n\">olean</span> <span class=\"n\">file</span> <span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">likely</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">Lean</span> <span class=\"n\">version</span> <span class=\"n\">mismatch</span>\n        <span class=\"n\">you</span> <span class=\"n\">may</span> <span class=\"n\">wish</span> <span class=\"n\">to</span> <span class=\"n\">disable</span> <span class=\"n\">CHECK_OLEAN_VERSION</span> <span class=\"bp\">/</span> <span class=\"n\">LEAN_CHECK_OLEAN_VERSION</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">Lean</span> <span class=\"n\">build</span><span class=\"o\">,</span>\n        <span class=\"n\">or</span> <span class=\"n\">manually</span> <span class=\"n\">adjust</span> <span class=\"n\">the</span> <span class=\"n\">Lean</span> <span class=\"n\">version</span> <span class=\"n\">used</span> <span class=\"kd\">by</span> <span class=\"n\">Leaff</span> <span class=\"n\">and</span> <span class=\"n\">hope</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">best</span>\n</code></pre></div>\n<p>Indeed, std is using <code>v4.6.0-rc1</code>, while leaff uses <code>v4.5.0-rc1</code>. I tried to let leaff use 4.6 as well, but that didn't work.<br>\nHow do I actually disable <code>CHECK_OLEAN_VERSION</code>? I tried a few variations of</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">CHECK_OLEAN_VERSION</span><span class=\"o\">=</span><span class=\"nb\">false</span><span class=\"w\"> </span>./runleaf<span class=\"w\"> </span>Std<span class=\"w\"> </span>../std4<span class=\"w\"> </span>../std4-main\n</code></pre></div>\n<p>But all gave the same error as before</p>",
        "id": 421442033,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1707916418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span> The notice about setting <code>CHECK_OLEAN_VERSION</code> is for custom builds of Lean form th source. There is no way to disable <code>CHECK_OLEAN_VERSION</code> in a release version of Lean. This is for good reason, as oleans from different toolchains are highly unlikely to be compatible and will likely cause a segfault if loaded across versions. The only tried and true way to solve this is to have Leaff update to use v4.6.0-rc1 as well (i.e., potentially bug <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> ).</p>",
        "id": 421573962,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707968122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> , the Leaff README instructions don't work for me.</p>\n<p>I was hoping that cloning, <code>lake build</code>, and <code>./runleaff.sh Mathlib ../test-mathlib2/ ../test-mathlib/</code> would do something, but this doesn't configure the <code>mathlib=on</code> flag properly. Could you update the README with instructions that work from a clean clone?</p>",
        "id": 421621477,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707991943
    },
    {
        "content": "<p>After irreproducibly fiddling, I did get something to happen, but only:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"n\">reference</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">tree</span><span class=\"o\">:</span> <span class=\"n\">d9ba3f07499769fc5730aea4be84298a2c13ff61</span>\n</code></pre></div>",
        "id": 421621553,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707991975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> is it definitely always true that the olean format will change every time lean changes versions. As the message is meant to imply building with that flag is experimental, and I never properly tried but I'd have imagined that some lean version bumps or commits to lean master wouldn't actually change the olean format, so with the above caveat emptor it might be worth a shot.</p>",
        "id": 421625934,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1707993623
    },
    {
        "content": "<p>To be clear building here means rebuilding lean itself not leaff</p>",
        "id": 421625979,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1707993640
    },
    {
        "content": "<p>It changes relatively rarely (it depends a bit on which parts of the olean file you actually inspect) but there are no guarantees and if it does change, access is undefined behavior</p>",
        "id": 421630912,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707995409
    },
    {
        "content": "<p>Ok indeed that was my impression. I'd imagine that the extension diffs are more likely to fault than the declarations so maybe an option to disable those would be helpful</p>",
        "id": 421635694,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1707997485
    },
    {
        "content": "<p>Right, I've submitted a PR to leaff that bumps the lean version. That seemed easier than messing with a custom lean build and hoping that things don't break <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 421637595,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1707998286
    },
    {
        "content": "<p>And now I get:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&gt;<span class=\"w\"> </span>./runleaff.sh<span class=\"w\"> </span>Std<span class=\"w\"> </span>../std4<span class=\"w\"> </span>../std4-main\nuncaught<span class=\"w\"> </span>exception:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>package<span class=\"w\"> </span><span class=\"s1\">'Std'</span>\n</code></pre></div>\n<p>Am I doing something wrong, or did I break something with the version bump?</p>\n<p>I also tried <code>std</code> instead of <code>Std</code>, no luck there either</p>",
        "id": 421638450,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1707998590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span> did you run lake build in both std4 and std4-main</p>",
        "id": 421649926,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1708002495
    },
    {
        "content": "<p>Does your username or the directory that everything is in have spaces in?</p>",
        "id": 421650005,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1708002520
    },
    {
        "content": "<p>Thanks for the pr will try and review shortly</p>",
        "id": 421650069,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1708002540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/348111-std4/topic/Using.20leaff.20to.20verify.20a.20refactor/near/421649926\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> did you run lake build in both std4 and std4-main</p>\n</blockquote>\n<p>I did not, I didn't know this was a requirement. After I built them, it now works <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 421654196,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1708003933
    },
    {
        "content": "<p>Ok great! I'll try and update the instructions to make that clearer</p>",
        "id": 421661516,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1708006330
    },
    {
        "content": "<p>I took the liberty of opening a PR to add a sentence to the readme: <a href=\"https://github.com/alexjbest/leaff/pull/8\">https://github.com/alexjbest/leaff/pull/8</a></p>",
        "id": 421664027,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1708006941
    },
    {
        "content": "<p>Also, when leaff reports that a type has changed, is there some way to make it print the old and new types as well, for manual comparison?</p>",
        "id": 421664178,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1708006983
    },
    {
        "content": "<p>Amazing, thanks, merged. It can't currently but that is one of the features I'm hoping to add next. It shouldn't be too hard so hopefully can get to it soone</p>",
        "id": 421722963,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1708024356
    }
]