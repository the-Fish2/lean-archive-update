[
    {
        "content": "<p>I can't make sense of this error message. I don't know if this is a std or a core issue. I'm still in the process of minimizing but this is sufficiently self-contained for others to help investigate.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ASCII</span>\n\n<span class=\"sd\">/-- Uppercase letter -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">isUpper</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">65</span> <span class=\"bp\">≤</span> <span class=\"n\">c.toNat</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c.toNat</span> <span class=\"bp\">≤</span> <span class=\"mi\">90</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isUpper_iff</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ASCII.isUpper</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"mi\">65</span> <span class=\"bp\">≤</span> <span class=\"n\">c.toNat</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c.toNat</span> <span class=\"bp\">≤</span> <span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"sd\">/-- Convert to lowercase -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">toLower</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">isUpper</span> <span class=\"n\">c</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c.toNat</span> <span class=\"bp\">+</span> <span class=\"mi\">32</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">256</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"o\">⟨</span><span class=\"n\">c.val</span><span class=\"bp\">+</span><span class=\"mi\">32</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_isUpper_toLower</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">isUpper</span> <span class=\"o\">(</span><span class=\"n\">toLower</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">isUpper_iff</span><span class=\"o\">,</span> <span class=\"n\">toLower</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">UInt8.toNat</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">omega</span>\n  <span class=\"bp\">·</span> <span class=\"n\">omega</span>\n</code></pre></div>\n<p>The theorem gives me this out-of-the-blue error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">of_decide_eq_true</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">65</span> <span class=\"bp\">≤</span> <span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"mi\">65</span> <span class=\"bp\">≤</span> <span class=\"mi\">32</span>\n</code></pre></div>\n<p>I can't figure out where this <code>of_decide_eq_true</code> application is coming from.</p>",
        "id": 437059527,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714864904
    },
    {
        "content": "<p>I've tried a bunch of things, eliminating omega and split doesn't change anything.</p>",
        "id": 437059707,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714865099
    },
    {
        "content": "<p>Simp fiddling doesn't do much either.</p>",
        "id": 437059734,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714865135
    },
    {
        "content": "<p>note, 65 is <code>(default : Char).toNat</code></p>",
        "id": 437060050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714865490
    },
    {
        "content": "<p>although it also appears in isUpper_iff so maybe not completely out of the blue</p>",
        "id": 437060121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714865555
    },
    {
        "content": "<p>These are <code>UInt8</code> not <code>Char</code>.</p>",
        "id": 437060140,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714865582
    },
    {
        "content": "<p>The <a href=\"https://github.com/fgdorais/lean4-ascii/blob/da4641d503f089dfdbab0d491bc4315184afb079/ASCII/Lemmas.lean#L85\">code this comes from works fine in v4.7.0</a>, so the arithmetic is good. There's just no place where the question whether <code>65 ≤ 32</code> actually occurs in the code (with the expected answer true).</p>",
        "id": 437060257,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714865744
    },
    {
        "content": "<p>minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">65</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">32</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 437061550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714867255
    },
    {
        "content": "<p>Can't get smaller than that! Probably not std then. Not sure what to file in core though.</p>",
        "id": 437062066,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714867721
    },
    {
        "content": "<p>the <code>Simproc.le_add_ge</code> in the proof term points right to the offending line</p>",
        "id": 437062107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714867770
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4065\">lean4#4065</a></p>",
        "id": 437062291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714867936
    },
    {
        "content": "<p>As always, thanks for the help Mario!</p>",
        "id": 437062419,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714868058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Out of curiosity and to sharpen my own skills, how did you diagnose this?</p>",
        "id": 437062958,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714868632
    },
    {
        "content": "<p>before or after the minimization?</p>",
        "id": 437063007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714868651
    },
    {
        "content": "<p>Both?</p>",
        "id": 437063016,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714868662
    },
    {
        "content": "<p>The minimization was obtained by isolating which tactic was producing the kernel error</p>",
        "id": 437063041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714868683
    },
    {
        "content": "<p>That was simp. I think I got that far on my own.</p>",
        "id": 437063074,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714868724
    },
    {
        "content": "<p>(Not efficiently though!)</p>",
        "id": 437063086,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714868743
    },
    {
        "content": "<p>more specifically, it was the second simp in the first branch before the omega</p>",
        "id": 437063088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714868747
    },
    {
        "content": "<p>I had also figured out the problematic branch. That was easy.</p>",
        "id": 437063148,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714868775
    },
    {
        "content": "<p>to isolate that, we just state the goal beforehand as an example and run simp on it, run <code>simp only</code> and remove everything unneeded, then simplify the goal itself until the problematic behavior doesn't occur</p>",
        "id": 437063176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714868807
    },
    {
        "content": "<p>I also simplified the definition of <code>isUpper</code> to just the first conjunct</p>",
        "id": 437063217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714868858
    },
    {
        "content": "<p>OK. This is a great tip! I will use that going forward.</p>",
        "id": 437063241,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714868882
    },
    {
        "content": "<p>after the minimization, the proof term (using <code>by?</code>) is small enough to be able to locate the ill-typed subterm</p>",
        "id": 437063302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714868937
    },
    {
        "content": "<p>Ah! <code>by?</code> is new to me, I haven't learned how to use it. This is great!</p>",
        "id": 437063392,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714869015
    },
    {
        "content": "<p>and then <code>Nat.Simproc.le_add_ge</code>, being a lemma used by a proof producing program, is used only once in the code, on line 279 of BuiltinSimprocs.lean, so we just have to audit the arithmetic reasoning here and the issue is that <code>mkGENat yo x</code> flips the arguments twice (they are passed in reverse order and <code>mkGE</code> also flips the arguments) instead of once</p>",
        "id": 437063449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714869106
    },
    {
        "content": "<p>you can also use <code>show_term by</code> instead of <code>by?</code></p>",
        "id": 437063541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714869189
    },
    {
        "content": "<p>This is incredibly helpful! Thank you very much Mario!</p>",
        "id": 437063619,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714869260
    },
    {
        "content": "<p>Thanks for this. I've merged, and also cherry-picked it on to <code>releases/v4.8.0</code> so in the (likely) event of an <code>rc2</code> it will arrive there too.</p>",
        "id": 437089316,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714895238
    }
]