[
    {
        "content": "<p>Do we have a command to print discrimination keys? I've been using the following based on <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">discrKey</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">DiscrTree.Key</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">type</span>\n  <span class=\"k\">match</span> <span class=\"n\">type.eq</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DiscrTree.mkPath</span> <span class=\"n\">lhs</span> <span class=\"n\">simpDtConfig</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unexpected kind of 'simp' theorem{indentExpr type}\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#discr_tree_key\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Command.liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">discrKey</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">key</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">key.format</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#discr_tree_key\"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Command.liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">id.getId</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">discrKey</span> <span class=\"n\">info.type</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">key</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">key.format</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"discr_tree_key\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"k\">let</span> <span class=\"n\">keys</span> <span class=\"bp\">←</span> <span class=\"n\">discrKey</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">e.getType</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{keys.map fun key =&gt; key.format}\"</span>\n</code></pre></div>",
        "id": 439906866,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716326173
    },
    {
        "content": "<p>If not, is this something desired in batteries? I know that incoming core changes will avoid mapping over format.</p>",
        "id": 439907253,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716326348
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4208\">lean4#4208</a> is what you mean by that last sentence, right? That discriminations tree keys will have a nice pretty printer?</p>",
        "id": 439910621,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716327535
    },
    {
        "content": "<p>I would be very happy to have this in batteries, and even happier to have it in Lean itself. This is super useful for diagnosing problems.</p>\n<p>Putting it in Lean requires jumping through an extra hoop to set up built-in syntax. If someone could even do that, amazing, but I'm also happy to modify a PR that just contains the non-built-in setup.</p>",
        "id": 439925843,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716333636
    },
    {
        "content": "<p>It would be also useful to have an option for simp that:</p>\n<ul>\n<li>prints out the discrimination tree key when simp searches for candidate theorems to apply</li>\n<li>prints out discrimination tree key of lhs when you mark theorem with simp attribute</li>\n</ul>",
        "id": 440024841,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1716359876
    },
    {
        "content": "<p>These are probably best done via issues rather than PRs. (But yes, both of these are needed.)</p>",
        "id": 440025874,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716360468
    },
    {
        "content": "<p>Right now I can't use one of my 4 local copies of mathlib because I just keep that code sitting in an open buffer so I would be happy to use this again. </p>\n<p>What is the hoop to set up built-in syntax?</p>",
        "id": 440076386,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716379466
    },
    {
        "content": "<p>If we are listing desirable things for the future, the generated keys for instances is also useful to know on occasion.</p>",
        "id": 440076593,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716379541
    },
    {
        "content": "<p>You just need to define the syntax in the appropriate file, using <code>Init/Tactics.lean</code>, and then use the <code>@[builtin_command_elab]</code> attribute when you set up the implementation. For the commands discussed above, I don't think any <code>update-stage0</code> shenanigans would be required.</p>",
        "id": 440077467,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716379812
    },
    {
        "content": "<p>Can I be lazy and ask you to point me to your favorite example?</p>",
        "id": 440077569,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716379856
    },
    {
        "content": "<p>It's ok to say no :)</p>",
        "id": 440077649,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716379885
    },
    {
        "content": "<p>Ok, nevermind. I stopped being lazy</p>",
        "id": 440078773,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716380269
    },
    {
        "content": "<p>Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">builtin_command_elab</span><span class=\"w\"> </span><span class=\"n\">guardCmd</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">evalGuardCmd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span><span class=\"bp\">.</span><span class=\"n\">CommandElab</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span><span class=\"bp\">.</span><span class=\"n\">liftTermElabM</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">elabTermEnsuringType</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mkConst</span><span class=\"w\"> </span><span class=\"ss\">``Bool</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">instantiateMVars</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mvars</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getMVars</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">mvars</span><span class=\"bp\">.</span><span class=\"n\">isEmpty</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">unsafe</span><span class=\"w\"> </span><span class=\"n\">evalExpr</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mkConst</span><span class=\"w\"> </span><span class=\"ss\">``Bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">      </span><span class=\"n\">unless</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"n\">throwError</span><span class=\"w\"> </span><span class=\"s2\">\"expression{indentExpr e}</span><span class=\"se\">\\n</span><span class=\"s2\">did not evaluate to `true`\"</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">      </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">logUnassignedUsingErrorInfos</span><span class=\"w\"> </span><span class=\"n\">mvars</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">throwUnsupportedSyntax</span>\n</code></pre></div>\n<p>from <code>src/Lean/Elab/Tactic/Guard.lean</code>, and <code>syntax (name := guardCmd) \"#guard \" term : command</code> in <code>src/Init/Guard.lean</code>.</p>",
        "id": 440078884,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716380297
    },
    {
        "content": "<p>The point is that even though the implementation of <code>#guard</code> is not in the prelude, after rebuilding stage0 you nevertheless get to use it in the prelude. (The magic of bootstrapping.)</p>",
        "id": 440079004,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716380348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> Sorry for the delay <a href=\"https://github.com/leanprover/lean4/pull/4447\">lean#4447</a>. Draft form because I’m sure you’ll have some good examples to add to the test file.</p>",
        "id": 444537712,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718304833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> I listed you as an author (and of course misspelled your name <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> ) Let me know your thoughts.</p>",
        "id": 444538611,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718305113
    },
    {
        "content": "<p>Looks good to me. I'm just wondering if the tactic should fail if you provide term that is not of the form <code>_ = _ </code>(current behavior) or it should print a key of the whole expression. You might want to use it to debug typeclass synthesis too where you do not have expression of the form <code>_ = _</code>. Also a special support for <code>_ ↔ _</code> might be desirable. But it is plenty useful in the form it is already, so these are just suggestions for potential improvements.</p>",
        "id": 445139361,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1718632854
    }
]