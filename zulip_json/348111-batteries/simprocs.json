[
    {
        "content": "<p>simprocs have landed in lean4:nightly-2024-01-10, and the adaptation PR for Std is at <a href=\"https://github.com/leanprover/std4/pull/496\">std4#496</a>.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span>, it would be great if this can be reviewed asap as there are corresponding PRs for aesop <a href=\"https://github.com/leanprover-community/aesop/pull/93\">https://github.com/leanprover-community/aesop/pull/93</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/9500\">#9500</a> waiting on it.</p>",
        "id": 412093659,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704877233
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 412100191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704879505
    },
    {
        "content": "<p>what's the vision for simprocs? The example given in the release note seems not that noteworthy.</p>",
        "id": 412123037,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704886875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> They let you apply arbitrary kinds of transformations before or after descending into sub-terms. There are many more kinds of transformations you might want to do beyond just rewriting with lemmas.</p>",
        "id": 412191919,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704908924
    },
    {
        "content": "<p>It looks like core also has a couple extra examples: <a href=\"https://github.com/leanprover/lean4/blob/30693a2daefba3bb57432546bc5ef30669cf0a17/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/Core.lean\">https://github.com/leanprover/lean4/blob/30693a2daefba3bb57432546bc5ef30669cf0a17/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/Core.lean</a></p>\n<p>These take <code>if a then b else c</code>, simplify <code>a</code>, see if it's <code>True</code> or <code>False</code>, and then reduce immediately to either <code>b</code> or <code>c</code>. That's an optimization you can't do with just simp lemmas.</p>",
        "id": 412192044,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704908992
    },
    {
        "content": "<p>One simproc I have had in my back pocket for 4+ years is simplifying <code>\\forall x0 ... y ... xn, A1 -&gt; ... -&gt; y = e -&gt; An -&gt; B</code> to <code>\\forall x0 ... xn, (A1 -&gt; ... -&gt; An -&gt; B)[e/y]</code></p>",
        "id": 412205840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704914844
    },
    {
        "content": "<p>we have a few simple cases of this as simp lemmas but in general you need some logic to do it right</p>",
        "id": 412205992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704914909
    },
    {
        "content": "<p>See also the classic <a href=\"https://github.com/leanprover/lean3/wiki/Simplifier-Features\">https://github.com/leanprover/lean3/wiki/Simplifier-Features</a></p>",
        "id": 412223079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704922481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/simprocs/near/412205840\">said</a>:</p>\n<blockquote>\n<p>One simproc I have had in my back pocket for 4+ years is simplifying <code>\\forall x0 ... y ... xn, A1 -&gt; ... -&gt; y = e -&gt; An -&gt; B</code> to <code>\\forall x0 ... xn, (A1 -&gt; ... -&gt; An -&gt; B)[e/y]</code></p>\n</blockquote>\n<p>Note that we'll need similar functions for <code>∃</code> with <code>∧</code> and <code>iSup</code>/<code>iUnion</code>/<code>iInf</code>/<code>iInter</code>.</p>",
        "id": 412226304,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704923963
    },
    {
        "content": "<p>(I guess, you know this better than me but let it be here in the chat history)</p>",
        "id": 412226361,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704923991
    }
]