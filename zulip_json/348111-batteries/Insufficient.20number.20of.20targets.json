[
    {
        "content": "<p>I tried to do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">data</span> <span class=\"n\">using</span> <span class=\"n\">String.utf8InductionOn</span>\n</code></pre></div>\n<p>but I got <code>insufficient number of targets for 'String.utf8InductionOn'</code>. I don't know what this error message means. Is this supported at all?</p>",
        "id": 419710379,
        "sender_full_name": "Robin Green",
        "timestamp": 1707063775
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 419715081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707067599
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.String.Lemmas</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Substring</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ch</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">ch</span> <span class=\"k\">then</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">missing_char_count_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Substring.Valid</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">word.contains</span> <span class=\"n\">ch</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">count</span> <span class=\"n\">word</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">==</span> <span class=\"n\">ch</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">word</span>\n  <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">mk</span> <span class=\"n\">str</span> <span class=\"n\">startPos</span> <span class=\"n\">stopPos</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">str</span>\n      <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">mk</span> <span class=\"n\">data</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">induction</span> <span class=\"n\">data</span> <span class=\"n\">using</span> <span class=\"n\">String.utf8InductionOn</span>\n</code></pre></div>",
        "id": 419721106,
        "sender_full_name": "Robin Green",
        "timestamp": 1707072036
    },
    {
        "content": "<p>I don't think <code>String.utf8InductionOn</code> is compatible with the <code>induction</code> tactic</p>",
        "id": 419722867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707073474
    },
    {
        "content": "<p>you have to just call it directly</p>",
        "id": 419722876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707073485
    },
    {
        "content": "<p>which looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>          <span class=\"n\">apply</span> <span class=\"n\">String.utf8InductionOn</span>\n            <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">data</span> <span class=\"n\">startPos</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">Substring.contains</span> <span class=\"o\">⟨⟨</span><span class=\"n\">data</span><span class=\"o\">⟩,</span> <span class=\"n\">startPos</span><span class=\"o\">,</span> <span class=\"n\">stopPos</span><span class=\"o\">⟩</span> <span class=\"n\">ch</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"bp\">→</span>\n              <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">⟨⟨</span><span class=\"n\">data</span><span class=\"o\">⟩,</span> <span class=\"n\">startPos</span><span class=\"o\">,</span> <span class=\"n\">stopPos</span><span class=\"o\">⟩</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">ch</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"n\">data</span> <span class=\"n\">startPos</span> <span class=\"n\">stopPos</span>\n</code></pre></div>",
        "id": 419723057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707073640
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> , it would be nice to get the <code>induction using</code> parser to support more theorems in std/mathlib with <code>inductionOn</code> in the name - the lean 4 rules are more restrictive than lean 3 and mostly don't work at all when the motive has multiple targets</p>",
        "id": 419725349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707075622
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.utf8InductionOn#doc\">docs#String.utf8InductionOn</a></p>",
        "id": 419728241,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707078356
    },
    {
        "content": "<p>Oh, because the motive takes two parameters?</p>",
        "id": 419728310,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707078390
    },
    {
        "content": "<p>On the phone right now. But does <code>induction data,  startPos using String.utf8InductionOn (p := stopPos)</code> not work?</p>",
        "id": 419728510,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707078579
    },
    {
        "content": "<p>No - now I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">introN'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">insufficient</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">binders</span>\n<span class=\"n\">case</span> <span class=\"n\">p</span>\n<span class=\"n\">ch</span> <span class=\"o\">:</span> <span class=\"n\">Char</span>\n<span class=\"n\">startPos</span> <span class=\"n\">stopPos</span> <span class=\"o\">:</span> <span class=\"n\">String.Pos</span>\n<span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">String.PosLean</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>Though I'm having fun with the full power of using <code>apply</code> directly <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 419728739,
        "sender_full_name": "Robin Green",
        "timestamp": 1707078758
    },
    {
        "content": "<p>That's probably <a href=\"https://github.com/leanprover/lean4/issues/3212\">https://github.com/leanprover/lean4/issues/3212</a>. So it's not much missing</p>",
        "id": 419728884,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707078899
    },
    {
        "content": "<p>But yes, at some point it's easier to use apply or refine rather than fighting the induction tactic :-)</p>",
        "id": 419728950,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707078954
    },
    {
        "content": "<p>Oh, and you can work around <a href=\"https://github.com/leanprover-community/mathlib4/pull/3212\">#3212</a> by <code>revert</code>’ing yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.String.Lemmas</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Substring</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ch</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">ch</span> <span class=\"k\">then</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">missing_char_count_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Substring.Valid</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">word.contains</span> <span class=\"n\">ch</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">count</span> <span class=\"n\">word</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">==</span> <span class=\"n\">ch</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">word</span>\n  <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">mk</span> <span class=\"n\">str</span> <span class=\"n\">startPos</span> <span class=\"n\">stopPos</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">str</span>\n      <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">mk</span> <span class=\"n\">data</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">revert</span> <span class=\"n\">v</span>\n          <span class=\"n\">induction</span> <span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"n\">startPos</span> <span class=\"n\">using</span> <span class=\"n\">String.utf8InductionOn</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">stopPos</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 419731568,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707081225
    },
    {
        "content": "<p>It considers the <code>(p := stopPos)</code> a syntax error now, but it does appear to generate some subgoals if I remove that part</p>",
        "id": 419732040,
        "sender_full_name": "Robin Green",
        "timestamp": 1707081538
    },
    {
        "content": "<p>You are probably on 4.5.0; it works already on <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a>; this is a new feature I added recently.</p>",
        "id": 419732071,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707081580
    },
    {
        "content": "<p>But yes, you can omit it, and then use <code>exact p</code> as the first “case” instead</p>",
        "id": 419732095,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707081602
    }
]