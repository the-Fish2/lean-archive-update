[
    {
        "content": "<p>I realized that both Nat.lt_succ and Nat.lt_succ_iff denote the theorem <code>m &lt; succ n ↔ m ≤ n</code>. Is this intended? (I'd expect something like <code>m&lt;succ m</code> as Nat.lt_succ, with Nat.lt_succ_iff unchanged)</p>",
        "id": 443128384,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1717697929
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.lt_succ_self#doc\">docs#Nat.lt_succ_self</a></p>",
        "id": 443142264,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1717701753
    },
    {
        "content": "<p>Thanks. (I'll leave this open for a while since I still am not sure if it is intended to have this lemma twice in batteries)</p>",
        "id": 443144882,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1717702617
    },
    {
        "content": "<p>It looks like Std had <code>lt_succ_iff</code>, then <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> renamed it to <code>lt_succ</code> in <a href=\"https://github.com/leanprover-community/batteries/commit/23f8577169c049e6eb472a0354c11b9b934b4282\">https://github.com/leanprover-community/batteries/commit/23f8577169c049e6eb472a0354c11b9b934b4282</a> and <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> added <code>lt_succ_iff</code> back in <a href=\"https://github.com/leanprover-community/batteries/commit/a88cd10b11dc5741c7be3c06a2a8e798dc07fdcf\">https://github.com/leanprover-community/batteries/commit/a88cd10b11dc5741c7be3c06a2a8e798dc07fdcf</a> , and then they got upstreamed to core together in <a href=\"https://github.com/leanprover/lean4/pull/3391\">https://github.com/leanprover/lean4/pull/3391</a></p>",
        "id": 443145747,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717702880
    },
    {
        "content": "<p>I'd say we should pick one and deprecate the other</p>",
        "id": 443145832,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717702910
    },
    {
        "content": "<p>Personally I agree with Sven and always am mildly annoyed that <code>Nat.lt_succ</code> is not <code>n &lt; succ n</code></p>",
        "id": 443145935,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717702940
    },
    {
        "content": "<p>If it was still in batteries, I guess one could make a PR. Does core require an rfc or something?</p>",
        "id": 443146203,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717703035
    },
    {
        "content": "<p>/poll What should Nat.lt_succ be?<br>\nAs currently, an alias for Nat.lt_succ_iff<br>\nAn alias for Nat.lt_succ_self<br>\nJust deprecated</p>",
        "id": 443147304,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1717703355
    },
    {
        "content": "<p>I also thik we should just not have <code>Nat.lt_succ_self</code> (but only <code>Nat.lt_succ</code>). We don't have <code>Nat.le_succ_self</code></p>",
        "id": 443147675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717703424
    },
    {
        "content": "<p>I think <code>Nat.lt_succ_iff</code> is also bad, it should be <code>Nat.lt_succ_iff_le</code>. Saving extra three characters is not worth the ambiguity.</p>",
        "id": 443188672,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1717722783
    },
    {
        "content": "<p>Proposal:</p>\n<ul>\n<li><code>Nat.lt_add_one: n &lt; n + 1</code></li>\n<li><code>Nat.lt_succ : n &lt; succ n</code> (but hope it is rarely used? investigate later whether it could even be deprecated in terms of <code>Nat.lt_add_one</code>)</li>\n<li><code>Nat.lt_succ_self</code> becomes a deprecated alias for <code>Nat.lt_succ</code></li>\n<li><code>Nat.lt_add_one_iff_le : n &lt; m + 1 \\iff n \\le m</code></li>\n<li><code>Nat.lt_succ_iff_le</code> (as above)</li>\n<li><code>Nat.lt_suff_iff</code> becomes a deprecated alias.</li>\n</ul>",
        "id": 443197222,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717729065
    },
    {
        "content": "<p>What ambiguity, though? What else would be on the right hand side? </p>\n<p>Also, do we have the same lemmas for Int or some typeclass that should match?</p>",
        "id": 443212506,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717737179
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.lt_succ_iff#doc\">docs#Nat.lt_succ_iff</a> goes together with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.succ_le_iff#doc\">docs#Nat.succ_le_iff</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Order.lt_succ_iff#doc\">docs#Order.lt_succ_iff</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Order.succ_le_iff#doc\">docs#Order.succ_le_iff</a></p>",
        "id": 443212614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717737263
    }
]