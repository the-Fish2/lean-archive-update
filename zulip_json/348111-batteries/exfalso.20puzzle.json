[
    {
        "content": "<p>Is it possible to solve a goal with the <code>exfalso</code> tactic?</p>",
        "id": 416030687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705499079
    },
    {
        "content": "<p>I claim yes</p>",
        "id": 416033966,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705499986
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">â†’</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exfalso</span>\n</code></pre></div>\n</div></div>",
        "id": 416037548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705500972
    },
    {
        "content": "<p>Is this a bug in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Tactic.tacticExfalso#doc\">docs#Std.Tactic.tacticExfalso</a> ? Should it use <code>refine False.elim ?_</code> instead of <code>apply False.elim</code>?</p>",
        "id": 416045405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705502928
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/540\">std4#540</a>, assuming the answer is yes</p>",
        "id": 416045848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705503035
    },
    {
        "content": "<p>Of course this was a student in my class who discovered this (with precisely Mario's example, which is an early problem in my course notes), and then asked me how the proof worked, and initially I was like \"...\"</p>",
        "id": 416051398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705504454
    },
    {
        "content": "<p>Personally I think that this behaviour is fine. It's no more or less confusing than <code>apply</code> already is (i.e. that it might apply an unexpected number of arguments).</p>",
        "id": 416471498,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705538390
    },
    {
        "content": "<p><code>apply</code> is indeed confusing, but I don't think other tactics should inherit this confusion by leaking implementation details if it's easy to avoid that</p>",
        "id": 416474634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705539640
    },
    {
        "content": "<p>It's certainly a very minor bug, since the only way this can cause confusion is by unexpectedly solving things</p>",
        "id": 416474682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705539668
    },
    {
        "content": "<p>unexpectedly solving things is bad for tactics that use <code>exfalso</code> as a component and have some expectation of what it does</p>",
        "id": 416488418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705548296
    },
    {
        "content": "<p>It certainly confused the undergraduate who had only started using lean a few days before and had been told it would change the goal to <code>False</code>.</p>",
        "id": 416505466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705559211
    }
]