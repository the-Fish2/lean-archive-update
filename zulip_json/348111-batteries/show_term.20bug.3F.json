[
    {
        "content": "<p>Is the following known: show_term producing a term which doesn't seem to work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Rat.Lemmas</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">show_term</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- Try this: Eq.refl (1 + 1)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  Eq.refl (1 + 1)</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  1 + 1 = 1 + 1 : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  1 + 1 = 2 : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 411541738,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704578618
    },
    {
        "content": "<p>Update: It seems that this is not so much a <code>show_term</code> issue, as an issue that the tactic <code>rfl</code> can check defeq of <strong>irreducible</strong> things even though the term proof <code>rfl</code> would fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Int2</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Int2</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">irreducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Int2.add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int2</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a.val</span>  <span class=\"bp\">+</span> <span class=\"n\">b.val</span>  <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Int2.add</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Int2</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  rfl</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Int2.add 1 1 = Int2.add 1 1 : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Int2.add 1 1 = 2 : Prop</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Int2.add</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Int2</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">eq_refl</span> <span class=\"c1\">-- works</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">def foo : Int2.add 1 1 = 2 :=</span>\n<span class=\"cm\">Eq.refl (Int2.add 1 1)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 411547462,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704584355
    },
    {
        "content": "<p>This behaviour is rather surprising to me, but maybe one of the devs can explain whether it is intended behaviour.</p>",
        "id": 411547488,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704584399
    },
    {
        "content": "<p>Further update: it looks like this is the raison d'être of the Mathlib <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/IrreducibleDef.html\">irreducible_def</a> command, which I had never appreciated before.  Should that command perhaps be upstreamed so that <code>Rat.add</code> can be defined with <code>irreducible_def</code>?</p>",
        "id": 411549384,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704586218
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.IrreducibleDef</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n\n<span class=\"n\">irreducible_def</span> <span class=\"n\">Rat.add'</span> <span class=\"o\">:=</span> <span class=\"n\">Rat.add</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Rat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Rat.add'</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 411549752,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704586440
    },
    {
        "content": "<p>Also: should <code>show_term</code> include a test that the term produced indeed elaborates (and print a warning message if it doesn't)?</p>",
        "id": 411550378,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704586782
    },
    {
        "content": "<p>This is expected behavior. Although it is rare, in general terms produced by tactics don't necessarily re-check in the elaborator, they are supposed to be valid for the kernel and that ignores <code>@[irreducible]</code> annotations</p>",
        "id": 411855282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704768821
    },
    {
        "content": "<p>You can address this by using <code>by with_unfolding_all exact</code> before the proof</p>",
        "id": 411855373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704768869
    }
]