[
    {
        "content": "<p>I'd like to move some more material about basic operations on <code>List</code> and <code>Array</code> from Std/Boost up to the <code>lean4</code> repository. My initial proposal is:</p>\n<ul>\n<li>Upstream <code>Std/Data/List | Array/Init/Lemmas.lean</code>, which have no prerequisites and are about basic operations.</li>\n<li>Initially don't touch <code>Std/Data/List | Array/Basic.lean</code>, which add many new operations.</li>\n<li>Next, upstream the subset of <code>Std/Data/List | Array/Lemmas.lean</code> which are only in terms of operations already in <code>lean4</code>.</li>\n<li>Later, I would like to upstream the list operations <code>mapIdx</code> / <code>findIdx</code> / <code>indexOf</code> / <code>count</code> (and hence possibly Std/Data/List/Count.lean), and the array operations <code>attach</code> and <code>join</code>, but this would require some review of their API first, and possibly more work to complete it.</li>\n<li>Otherwise, the new definitions and their theorems should stay in Boost, although in future we may want to do a case-by-case review of definitions to promote.</li>\n</ul>\n<p>Some of these files have ancient \"Authors:\" lines that don't accurately reflect later contributions, so I'm happy to take (here or via DM) suggestions for additions. Similarly I'm happy to make additions to CODEOWNERS here.</p>",
        "id": 434879041,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713834511
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3975\">lean4#3975</a> implements the first bullet point above, but I'll wait on merging until people have had time to see the above.</p>",
        "id": 434881255,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713835892
    },
    {
        "content": "<p>One point worth noting is that you can't really 'upstream <code>Std/Data/List/Init/Lemmas.lean</code>' (or it's non init version for that matter), in the sense that it accrues new lemmas slowly and even if you empty it out it will fill back up again later</p>",
        "id": 434881453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713836036
    },
    {
        "content": "<p>But I agree that it's reasonable to upstream the lemmas that are there, and I would also like to see e.g. <code>List.attach</code> upstream, as it would solve some dependency issues in std</p>",
        "id": 434881578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713836121
    },
    {
        "content": "<p>I think for the most part it shouldn't cause difficulties to upstream lemmas from Std.Data.List.Basic, except possibly if we want to change the names later</p>",
        "id": 434881724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713836218
    },
    {
        "content": "<blockquote>\n<p>Next, upstream the subset of <code>Std/Data/List | Array/Lemmas.lean</code> which are only in terms of operations already in <code>lean4</code>.</p>\n</blockquote>\n<p>This is a pretty big list, it should probably be broken down into smaller pieces</p>",
        "id": 434882139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713836493
    },
    {
        "content": "<p>Is it possible to do this kind of upstreaming on an as-needed basis? The trouble with \"all lemmas only about concepts in core\" is that this is an unbounded list which gets added to all the time. If the list was a bit more goal directed it wouldn't have this property</p>",
        "id": 434882484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713836696
    },
    {
        "content": "<p>In particular, you will never be able to have \"all the lemmas in one place\"</p>",
        "id": 434882659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713836792
    },
    {
        "content": "<p>Yes, I agree. But we can try. :-)</p>",
        "id": 434882670,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713836802
    },
    {
        "content": "<p>I'll look again at <code>List.attach</code>, I agree it is super useful and warrants upstreaming.</p>",
        "id": 434882700,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713836824
    },
    {
        "content": "<p>FLT is a lemma only about concepts in core</p>",
        "id": 434882727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713836842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/upstreaming.20of.20List.2FArray.20material/near/434882139\">said</a>:</p>\n<blockquote>\n<p>This is a pretty big list, it should probably be broken down into smaller pieces</p>\n</blockquote>\n<p>I'll try to make a PR shortly with a proposal for what this might look like.</p>",
        "id": 434882769,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713836866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/upstreaming.20of.20List.2FArray.20material/near/434882727\">said</a>:</p>\n<blockquote>\n<p>FLT is a lemma only about concepts in core</p>\n</blockquote>\n<p>Sure, but ... I think that's a bit of a strawman. :-) My basic target is \"specification lemmas, simp lemmas for ext/operation combinations, lemmas describing pairwise interactions of basic operations\". If you see me moving stuff that is more like FLT than that description, please slam on the brakes!</p>",
        "id": 434882965,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713836991
    },
    {
        "content": "<p>Oh, another thing which should be upstreamed is <code>setTR</code> and other tail-recursive csimp lemmas for definitions in core</p>",
        "id": 434884168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713837669
    },
    {
        "content": "<p>I think these are mostly already done?</p>",
        "id": 434885097,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713838197
    },
    {
        "content": "<p>Do you want it in Lean core or in the new Std library you're going to create? I'm a bit concerned about extra difficulties with fixing bugs in these files. Now I can clone <code>std4</code> repo, fix a small bug, then quickly open a pr (e.g., <a href=\"https://github.com/leanprover/std4/pull/758\">std4#758</a> is about material in <code>Data/List/Lemmas</code>). If it will go to Lean, then it will be much harder to prepare a PR (e.g., my personal laptop is good enough to quickly compile Std but isn't good enough to build Lean).</p>",
        "id": 435097997,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713926855
    },
    {
        "content": "<p>We're working on this. We want to build as much as possible of the <code>lean4</code> repository with <code>lake</code>. But I acknowledge it is harder at present.</p>",
        "id": 435100918,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713928469
    },
    {
        "content": "<p>Sorry about the delay on this. I have a proposed PR up at <a href=\"https://github.com/leanprover/lean4/pull/4059\">lean4#4059</a>.</p>",
        "id": 436813705,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714708891
    }
]