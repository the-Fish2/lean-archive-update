[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, any objections to upstreaming <code>Lean.ppConst</code> from <code>Std.Lean.Delaborator</code>? The <code>rw?</code> tactic should be using it (via TryThis.addRewriteSuggestion). If there's any where else you know it should be used upstreamed I can try to include those at the same time.</p>",
        "id": 433208346,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713161904
    },
    {
        "content": "<p>No objections. Looking at uses of <code>.ofPPFormat</code> in std I also see some cases where we want a version of <code>ppSignature</code> which produces a message data (and possibly linking the constant); it would be nice to not ever have to write <code>.ofPPFormat</code> in usage code and upstream what we need to make the existing cases in std / mathlib work</p>",
        "id": 433208843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713162135
    },
    {
        "content": "<p>looks like <code>elabCheckCore</code> in core also has a use of <code>.ofPPFormat</code></p>",
        "id": 433209167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713162266
    },
    {
        "content": "<p>oh in fact it's a buggy use, it should really have <code>tagAppFn</code> enabled like the analogous use of <code>ppSignature</code> in std</p>",
        "id": 433209292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713162316
    },
    {
        "content": "<p>which strengthens the argument for having a dedicated function for it</p>",
        "id": 433209332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713162339
    },
    {
        "content": "<p>(In general, I think we should treat anything in the <code>Std.Lean</code> subfolder as \"approved for moving upstream\", because it is explicitly intended as a staging ground for such move)</p>",
        "id": 433232102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713170094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, is <a href=\"https://github.com/leanprover/lean4/pull/3911\">lean4#3911</a> close enough to what you had in mind here?</p>",
        "id": 433246809,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713174796
    }
]