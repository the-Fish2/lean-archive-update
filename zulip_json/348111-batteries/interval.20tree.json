[
    {
        "content": "<p>Is there by any chance an existing implementation of an <a href=\"https://en.wikipedia.org/wiki/Interval_tree\">interval tree</a> that someone has done? I have an open source project for work where I need to create a local in memory time series cache library that I am considering this for. If not, I'm currently writing algorithms on top of <code>Batteries.RBSet</code>. I need to end up with code in C or Rust, but maybe I can translate it over to Rust when I am done. (I'm not sure I understand the API for interfacing to C, or if it is stable enough?)</p>",
        "id": 441303177,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717011173
    },
    {
        "content": "<p>Multiple things:</p>\n<ol>\n<li>I don't think anyone has implemented an interval tree but I think it's certainly a simple enough structure such that it could be done soon.</li>\n<li>Am I understanding correctly that you are using Lean for a work project that needs to interface with other code?</li>\n<li>The C API has not significantly changed since I started doing Lean a couple of years ago, I'd say it's pretty stable.</li>\n</ol>",
        "id": 441303655,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717011374
    },
    {
        "content": "<ol start=\"2\">\n<li>It is for a work project, but I think all or most of our code is open source. This will be a library that will be used by code written in Rust.</li>\n</ol>",
        "id": 441304257,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717011628
    },
    {
        "content": "<p>Code that needs a time series cache.</p>",
        "id": 441304430,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717011714
    },
    {
        "content": "<p>Part of the approach is to assume that all of the intervals in the tree are disjoint, so that should make it simpler.</p>",
        "id": 441304547,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717011762
    },
    {
        "content": "<p>But that means that inserts will have to maintain the disjointness property.</p>",
        "id": 441304698,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717011833
    },
    {
        "content": "<p>I'm starting with sorting the intervals in the <code>RBSet</code> by the starting time, and then writing algorithms to traverse the underlying tree to do the various operations.</p>",
        "id": 441304920,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717011942
    },
    {
        "content": "<p>For the C API I have found<br>\n<a href=\"https://lean-lang.org/lean4/doc/dev/ffi.html\">https://lean-lang.org/lean4/doc/dev/ffi.html</a><br>\nand<br>\n<a href=\"https://github.com/leanprover/lean4/tree/master/src/lake/examples/reverse-ffi\">https://github.com/leanprover/lean4/tree/master/src/lake/examples/reverse-ffi</a><br>\nIs there more out there?</p>",
        "id": 441305647,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717012334
    },
    {
        "content": "<p><a href=\"https://github.com/tydeu/lean4-alloy\">https://github.com/tydeu/lean4-alloy</a> is pretty nice</p>",
        "id": 441306257,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717012676
    },
    {
        "content": "<p>\"Alloy is a Lean 4 library that allows one to embed external FFI code (currently just C) directly within Lean\"<br>\nIf I understand correctly, I think I want to go the other way around.</p>",
        "id": 441306721,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717012871
    },
    {
        "content": "<p>You can also write normal C code in Lean with it and don't have to care about all of the linking and compilation setup when interacting with the lean part of your code</p>",
        "id": 441308367,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717013571
    },
    {
        "content": "<p>I see. Unfortunately I don't think they will be willing to take that approach. I also forgot that it will need to be called from Python, so I need to make a Python binding to the C code.</p>",
        "id": 441309264,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717013873
    },
    {
        "content": "<p>not sure if this helps, but i'm currently working on a CapnProto implementation for Lean, which would allow for some more complex typesafe interfaces between Lean and Rust/Python</p>",
        "id": 441316959,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1717016525
    },
    {
        "content": "<p>That is interesting. How would that work? Would the Lean code be in a separate running process that handles RPC calls?</p>",
        "id": 441320772,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717017964
    },
    {
        "content": "<p>I see this, but I don't know enough about FFI to understand it in this context</p>\n<p>Inter-language communication: Calling C++ code from, say, Java or Python tends to be painful or slow. With Cap’n Proto, the two languages can easily operate on the same in-memory data structure.</p>",
        "id": 441320931,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717018039
    },
    {
        "content": "<p>Yeah; I think if you could get Lean and Rust code linked together, you could just pass the buffer with the capnproto message to a Lean FFI endpoint (maybe using <a href=\"https://github.com/digama0/lean-sys\">lean-sys</a> to properly construct a <code>ByteArray</code> object for the Lean runtime) and have it operate directly on there.</p>",
        "id": 441342486,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1717026272
    },
    {
        "content": "<p>but that's a lot of engineering effort if you're just looking for an interval tree implementation!</p>",
        "id": 441342626,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1717026329
    },
    {
        "content": "<p>Yeah, that might be more than I have time to figure out. Thank you though.</p>",
        "id": 441343487,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717026632
    }
]