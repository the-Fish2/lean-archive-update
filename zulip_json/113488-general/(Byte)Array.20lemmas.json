[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/github.20permission/near/428255365\">said</a>:</p>\n<blockquote>\n<p>Could you say more about these lemmas? Generally I'd prefer lemmas about <code>Array</code> and <code>ByteArray</code> go as high as possible (i.e. Lean or Std).</p>\n</blockquote>\n<p>Something like this <code>(s1 + s2 ≤ a.size) →\n  (e2 + s1 ≤ e1) → (e1 ≤ a.size) →\n  (a.extract s1 e1).extract s2 e2 = a.extract (s1 + s2) (s1 + e2) </code> to show that extract twice is equal to extract once with some shift. And the lemma to prove this in my path.</p>",
        "id": 428257294,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1711080285
    },
    {
        "content": "<p>Could you please PR such lemmas direct to the lean4 repo? Please feel free to ping me when they need review.</p>",
        "id": 428257350,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711080355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/github.20permission/near/428257350\">said</a>:</p>\n<blockquote>\n<p>Could you please PR such lemmas direct to the lean4 repo? Please feel free to ping me when they need review.</p>\n</blockquote>\n<p>So I shall fork the lean4 and then PR that from my fork? Where should it place?</p>",
        "id": 428257428,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1711080403
    },
    {
        "content": "<p>Yes, that's right.</p>",
        "id": 428257433,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711080413
    },
    {
        "content": "<p>Hopefully these lemmas could go in <code>Init/Data/Array/Lemmas.lean</code>, in a section <code>/-! # extract -/</code>.</p>",
        "id": 428257479,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711080455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/github.20permission/near/428257479\">said</a>:</p>\n<blockquote>\n<p>Hopefully these lemmas could go in <code>Init/Data/Array/Lemmas.lean</code>, in a section <code>/-! # extract -/</code>.</p>\n</blockquote>\n<p>I have set up the env. But I found I developed it with some tactic provided by Mathlib. How can I change my code in such a low level lib like init. Is there any advice?</p>",
        "id": 428267629,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1711088768
    },
    {
        "content": "<p>Which tactics? Can you give me a link to your code?</p>",
        "id": 428269931,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711090340
    },
    {
        "content": "<p>We can put the code somewhere lower if the use of Mathlib tactics makes a big difference, but I'd prefer to make sure we can't easily remove them first.</p>",
        "id": 428269997,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711090381
    },
    {
        "content": "<p>8 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/github.20permission\">#mathlib4 &gt; github permission</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 428270219,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711090532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.28Byte.29Array.20lemmas/near/428269997\">said</a>:</p>\n<blockquote>\n<p>We can put the code somewhere lower if the use of Mathlib tactics makes a big difference, but I'd prefer to make sure we can't easily remove them first.</p>\n</blockquote>\n<p><a href=\"https://gist.github.com/JiechengZhao/d5dcafd2e34c38703c2e2d7bdcc4c4bd\">https://gist.github.com/JiechengZhao/d5dcafd2e34c38703c2e2d7bdcc4c4bd</a> This is my code, it works before but full of errors now when I pasted it in. I am fixing and rearranging it. I found <code>rw</code> works different and <code>nth_rw</code> is missing.</p>",
        "id": 428274422,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1711093078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.28Byte.29Array.20lemmas/near/428269931\">said</a>:</p>\n<blockquote>\n<p>Which tactics? Can you give me a link to your code?</p>\n</blockquote>\n<p>Sorry, the <code>rw</code> should be the same and it is <code>simp</code> caused the problem. <code>simp</code> used some lemma in <code>mathlib</code> automatically, and in init it works less and then the following <code>rw</code> failed. I think there is a <code>simp</code> like tactic can print out all the lemmas it used, what is that?</p>",
        "id": 428278456,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1711095011
    },
    {
        "content": "<p>simp?</p>",
        "id": 428278499,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711095043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.28Byte.29Array.20lemmas/near/428278499\">said</a>:</p>\n<blockquote>\n<p>simp?</p>\n</blockquote>\n<p>Yes, <code>simp</code>, It will automatically use any <code>@[simp]</code> lemma in mathlib. And this blocks me.</p>",
        "id": 428278641,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1711095119
    },
    {
        "content": "<p><code>simp?</code> is the command that tells you what simp lemmas <code>simp</code> used. :-)</p>",
        "id": 428278714,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711095136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.28Byte.29Array.20lemmas/near/428278714\">said</a>:</p>\n<blockquote>\n<p><code>simp?</code> is the command that tells you what simp lemmas <code>simp</code> used. :-)</p>\n</blockquote>\n<p>Understood. Thank you.</p>",
        "id": 428278764,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1711095174
    },
    {
        "content": "<p>Okay, this code is not ready to go in the lean4 repo. Perhaps you can put some small parts of it in a PR to mathlib for some review? I don't really want it going in mathlib, but it needs cleanup first and that's how you might get it.</p>",
        "id": 428278872,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711095226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.28Byte.29Array.20lemmas/near/428278872\">said</a>:</p>\n<blockquote>\n<p>Okay, this code is not ready to go in the lean4 repo. Perhaps you can put some small parts of it in a PR to mathlib for some review? I don't really want it going in mathlib, but it needs cleanup first and that's how you might get it.</p>\n</blockquote>\n<p>I think so. It is not a piece of neat and clean code yet. Could you give me an invitation to the mathlib4. We can review it there first.</p>",
        "id": 428279347,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1711095426
    },
    {
        "content": "<p>Okay, invitation sent!</p>",
        "id": 428285293,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711097836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250110\">@ZHAO Jiecheng</span>, here's a suggestion.</p>\n<p>Could you make an initial PR that just shows the final theorems you want (or you use <code>proof_wanted</code>: look in Std for examples)? (i.e. without the proofs or all the intermediate lemmas).</p>",
        "id": 428285706,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711097989
    },
    {
        "content": "<p>From this, we can work out what is actually needed, and then work backwards from there.</p>",
        "id": 428285736,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711098000
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span>, since the Array part has been added, let's talk about the ByteArray part. There are two points to it:</p>\n<ol>\n<li>\n<p>To speed up the calculation, the append operator in ByteArray is defined via <code>copeslice</code>. However, most proof utilities come from Array and List. So, I added an <code>append_to_data_append</code> theorem to connect them. Shall we put it in <code>std</code> or <code>lean</code>. <a href=\"https://gist.github.com/JiechengZhao/d5dcafd2e34c38703c2e2d7bdcc4c4bd#file-arraytools-lean-L253\">https://gist.github.com/JiechengZhao/d5dcafd2e34c38703c2e2d7bdcc4c4bd#file-arraytools-lean-L253</a></p>\n</li>\n<li>\n<p>When I write something, I feel it is common to pad zeros to a ByteArray. So, I also added some tools about it. But I am not sure if there are some better practices. <a href=\"https://gist.github.com/JiechengZhao/d5dcafd2e34c38703c2e2d7bdcc4c4bd#file-arraytools-lean-L81\">https://gist.github.com/JiechengZhao/d5dcafd2e34c38703c2e2d7bdcc4c4bd#file-arraytools-lean-L81</a></p>\n</li>\n</ol>",
        "id": 434259502,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713486611
    },
    {
        "content": "<p>Sorry, large gists take a long time to read and work out what you're wanting to do. Could you give a briefer summary here?</p>",
        "id": 434263562,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713489368
    },
    {
        "content": "<ol>\n<li>Add this to somewhere</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ByteArray.append_eq_data_append</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">}:</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">a.data</span> <span class=\"bp\">++</span> <span class=\"n\">b.data</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Add some utils like this:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ByteArray.zeros</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">double_until</span> <span class=\"n\">n</span> <span class=\"o\">{</span><span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]:</span> <span class=\"n\">ByteArray</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">extract</span> <span class=\"mi\">0</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ByteArray.zeros_get_zero</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ByteArray.zeros</span> <span class=\"n\">n</span><span class=\"o\">)[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zeros_size</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ByteArray.zeros_size</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zeros</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 434263975,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713489645
    },
    {
        "content": "<p>Should the first one not be <code>(a ++ b).data = ...</code>?</p>",
        "id": 434264030,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713489693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.28Byte.29Array.20lemmas/near/434264030\">said</a>:</p>\n<blockquote>\n<p>Should the first one not be <code>(a ++ b).data = ...</code>?</p>\n</blockquote>\n<p>They should be the same. However, I think when you rewrite something in ByteArray, <code>(a ++ b)</code> would be more convenient to use because there is no need to rewrite the ByteArray to Array first.</p>",
        "id": 434264208,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713489840
    },
    {
        "content": "<p>I'm skeptical that it would even be a good idea to rewrite by <code>append_eq_data_append</code> as written.</p>",
        "id": 434264691,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713490198
    },
    {
        "content": "<p>For your second point, there is no <code>double_until</code>, so I presume you are suggesting adding a bunch of other stuff. Start with that?</p>",
        "id": 434264854,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713490303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.28Byte.29Array.20lemmas/near/434264691\">said</a>:</p>\n<blockquote>\n<p>I'm skeptical that it would even be a good idea to rewrite by <code>append_eq_data_append</code> as written.</p>\n</blockquote>\n<p>Any suggestion about how to apply lemmas in Array to ByteArray? I saw <code>append_eq_data_append</code> in Array and List. I usually use that in my proofs, but if there is a more smart tactic, please tell me.</p>",
        "id": 434265105,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713490485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/.28Byte.29Array.20lemmas/near/434264854\">said</a>:</p>\n<blockquote>\n<p>For your second point, there is no <code>double_until</code>, so I presume you are suggesting adding a bunch of other stuff. Start with that?</p>\n</blockquote>\n<p>Alright. Should I add that to Mathlib first?</p>",
        "id": 434265245,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713490588
    },
    {
        "content": "<p>Sure, open a PR, or describe here.</p>",
        "id": 434265782,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713491005
    },
    {
        "content": "<p>Could you link the existing <code>append_eq_data_append</code>? I can't find it.</p>",
        "id": 434265895,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713491084
    },
    {
        "content": "<p>double util looks like this, it simply flatten the current bytearray and truncate it to the desired length. :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ByteArray.double_until</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">d.size</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"n\">d.size</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">d</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">ByteArray.size</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">ByteArray.size</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">size_append_eq</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_add_eq</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_lt</span>\n        <span class=\"n\">exact</span> <span class=\"n\">tsub_pos_iff_not_le.mpr</span> <span class=\"n\">hd</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">size_append_eq</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h</span>\n      <span class=\"n\">double_until</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">this</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d.size</span>\n</code></pre></div>",
        "id": 434265985,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713491152
    },
    {
        "content": "<p>Both of your <code>have</code>s can finish by <code>omega</code> a few steps earlier, I think. :-)</p>",
        "id": 434266199,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713491313
    },
    {
        "content": "<p>I'd like to be a bit more convinced of the end uses of these utilities first before adding them to the core Lean API. Either lets discuss that, or perhaps send these to Std for now.</p>",
        "id": 434266264,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713491395
    },
    {
        "content": "<p>Sorry, the <code>append_eq_data_append</code> is a lemma I wrapped for convenience. The original version is here. It looks like what you suggested: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Array/Lemmas.html#Array.appendList_data\">https://leanprover-community.github.io/mathlib4_docs/Init/Data/Array/Lemmas.html#Array.appendList_data</a></p>",
        "id": 434266360,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713491472
    },
    {
        "content": "<p>Okay, yeah, I am unconvinced by the usefulness of your new versions.</p>",
        "id": 434266402,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713491508
    },
    {
        "content": "<p>Here is why I introduce <code>zeros</code> in my implementation of a memory: when you retrieve something from memory but exceed the current size, the result is padded with zeros to ensure the <code>get</code> function returns the desired size of content. When you set something to memory but the current memory is too short, the ByteArray is extended to the desired length first. I guess this would be common for people wanting to mimic memory in Lean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Memory</span> <span class=\"o\">:=</span> <span class=\"n\">ByteArray</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Memory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get_helper</span> <span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">:</span> <span class=\"n\">Memory</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span>\n  <span class=\"n\">data.extract</span> <span class=\"n\">offset</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"bp\">+</span> <span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"bp\">++</span>\n    <span class=\"n\">ByteArray.zeros</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"bp\">-</span> <span class=\"n\">data.size</span><span class=\"o\">)</span> <span class=\"n\">size</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Memory</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"n\">U256</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span>\n  <span class=\"n\">get_helper</span> <span class=\"n\">data</span> <span class=\"n\">offset.val</span> <span class=\"n\">size.val</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">set_helper</span> <span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">:</span> <span class=\"n\">Memory</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">target_size</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Memory</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">value_</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">value.size</span> <span class=\"bp\">&lt;</span> <span class=\"n\">target_size</span>\n    <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"bp\">++</span> <span class=\"n\">ByteArray.zeros</span> <span class=\"o\">(</span><span class=\"n\">target_size</span> <span class=\"bp\">-</span> <span class=\"n\">value.size</span><span class=\"o\">))</span>\n    <span class=\"k\">else</span> <span class=\"n\">value</span>\n  <span class=\"k\">let</span> <span class=\"n\">data_</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">self.size</span> <span class=\"bp\">&lt;</span> <span class=\"n\">offset</span> <span class=\"bp\">+</span> <span class=\"n\">target_size</span>\n    <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"bp\">++</span> <span class=\"n\">ByteArray.zeros</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"bp\">+</span> <span class=\"n\">target_size</span> <span class=\"bp\">-</span> <span class=\"n\">self.size</span><span class=\"o\">))</span>\n    <span class=\"k\">else</span> <span class=\"n\">self</span>\n  <span class=\"n\">value_.copySlice</span> <span class=\"mi\">0</span> <span class=\"n\">data_</span> <span class=\"n\">offset</span> <span class=\"n\">target_size</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">:</span> <span class=\"n\">Memory</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"o\">:</span> <span class=\"n\">U256</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">target_size</span><span class=\"o\">:</span> <span class=\"n\">U256</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Memory</span> <span class=\"o\">:=</span>\n  <span class=\"n\">set_helper</span> <span class=\"n\">self</span> <span class=\"n\">offset.val</span> <span class=\"n\">value</span> <span class=\"n\">target_size.val</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Memory</span>\n</code></pre></div>",
        "id": 434267872,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713492513
    },
    {
        "content": "<p>I guess you are right, almost no reference of <code>appendList_data</code> in mathlib and std.</p>",
        "id": 434268603,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713492972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> <a href=\"#narrow/stream/113488-general/topic/.28Byte.29Array.20lemmas/near/434267872\">said</a>:</p>\n<blockquote>\n<p>when you retrieve something from memory but exceed the current size, the result is padded with zeros to ensure the <code>get</code> function returns the desired size of content. When you set something to memory but the current memory is too short, the ByteArray is extended to the desired length first.</p>\n</blockquote>\n<p>For this use case I would suggest adding an <code>Array.resize</code> function with the same specification as Rust's <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.resize\"><code>Vec::resize</code></a>. Then you would use <code>ByteArray.resize data (max data.size idx) 0</code> to extend with <code>0</code>s if the index is out of bounds.</p>",
        "id": 434270157,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713494009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/113488-general/topic/.28Byte.29Array.20lemmas/near/434270157\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> <a href=\"#narrow/stream/113488-general/topic/.28Byte.29Array.20lemmas/near/434267872\">said</a>:</p>\n<blockquote>\n<p>when you retrieve something from memory but exceed the current size, the result is padded with zeros to ensure the <code>get</code> function returns the desired size of content. When you set something to memory but the current memory is too short, the ByteArray is extended to the desired length first.</p>\n</blockquote>\n<p>For this use case I would suggest adding an <code>Array.resize</code> function with the same specification as Rust's <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.resize\"><code>Vec::resize</code></a>. Then you would use <code>ByteArray.resize data (max data.size idx) 0</code> to extend with <code>0</code>s if the index is out of bounds.</p>\n</blockquote>\n<p>Yes, repeating only zeros in a byteArray may not be very common. Resizing an array is a better idea, especially if you can assign a different default value.</p>\n<p>I will add my current code to a PR first. Though it is not we want now but we can start there.</p>",
        "id": 434271428,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713494773
    },
    {
        "content": "<p>For the use case of creating an array of all 0s, is there a reason to construct such an array by doubling? It seems like it would be better to have a function <code>Array.replicate</code> which is analogous to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.replicate#doc\">docs#List.replicate</a> and constructs the array via repeated applications of <code>Array.push</code></p>",
        "id": 434271917,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713495130
    },
    {
        "content": "<p>I expect doubling to have much worse performance as it has to create new allocations at each iteration. <code>Array.push</code> can re-use the same allocation, especially if you start with <code>Array.mkEmpty n</code> to set the appropriate initial capacity</p>",
        "id": 434272068,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713495262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/113488-general/topic/.28Byte.29Array.20lemmas/near/434271917\">said</a>:</p>\n<blockquote>\n<p>For the use case of creating an array of all 0s, is there a reason to construct such an array by doubling? It seems like it would be better to have a function <code>Array.replicate</code> which is analogous to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.replicate#doc\">docs#List.replicate</a> and constructs the array via repeated applications of <code>Array.push</code></p>\n</blockquote>\n<p>I want to take advantage of <code>copySlice</code> which is written in C, but I think you've convinced me a bit that this is not a good idea.</p>",
        "id": 434272364,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713495370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> <span class=\"user-mention\" data-user-id=\"500038\">@Timo Carlin-Burns</span> You convince me that this code might be useless, and I will not go ahead. Thank you for your time.</p>",
        "id": 434280230,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1713500857
    },
    {
        "content": "<p>Sorry for the discouraging response. Designing the APIs for these basic datatypes takes a while. Looking forward to further contributions!</p>",
        "id": 434280316,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713500918
    }
]