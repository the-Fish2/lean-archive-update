[
    {
        "content": "<p>Hi, beginner question:</p>\n<p>I have hypothesis <code>h: p</code> and I want to apply <code>not_not.mpr</code> to get <code>\\not \\not p</code>. When I true <code>by apply not_not.mpr at h</code>, I get <code>unexpected token 'at'</code>. How do I use the <code>apply</code> tactic at a hypothesis?</p>",
        "id": 447312993,
        "sender_full_name": "Viliam Vadocz",
        "timestamp": 1719430471
    },
    {
        "content": "<p>Please provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 447313080,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719430500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Classical</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">not_not</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Obviously, this is impossible to prove, but it shows the error.</p>",
        "id": 447313839,
        "sender_full_name": "Viliam Vadocz",
        "timestamp": 1719430648
    },
    {
        "content": "<p>What you are trying to do here is called forward reasoning, this is not what <code>apply</code> is for, <code>apply</code> is for backwards reasoning. What this means is that if you have a goal <code>Q</code> and a lemma <code>P -&gt; Q</code> then applying that lemma changes your goal to <code>P</code>. What you can do for example is use <code>have h2 := not_not.mpr h</code> or if you wish to get rid of <code>h</code>: <code>replace h := not_not.mpr h</code> Note that you can optionally specifiy a type annotation like so: <code>have name : type := proof</code></p>",
        "id": 447314680,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719430806
    },
    {
        "content": "<p>It works if you add <code>import Mathlib</code>, though</p>",
        "id": 447315178,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719430926
    },
    {
        "content": "<p>Thanks, that answers my question.</p>",
        "id": 447315380,
        "sender_full_name": "Viliam Vadocz",
        "timestamp": 1719430977
    },
    {
        "content": "<p>Henrik: I recall a few months ago Kevin asked for forward reasoning with apply on hypothesis and this was added</p>",
        "id": 447317787,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719431543
    },
    {
        "content": "<p>Added to Mathlib it seems yeah, I don't keep up with the tactics that are developed there as much.</p>",
        "id": 447317973,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719431593
    },
    {
        "content": "<p>But I really dislike the way it works because it intuitively renames the wrong hypothesis</p>",
        "id": 447318002,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719431599
    },
    {
        "content": "<p>I just use <code>replace</code> or <code>specialize</code></p>",
        "id": 447318062,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719431614
    },
    {
        "content": "<p><code>specialize</code> is way more intuitive than <code>apply at</code> because I am clearly just instantiating a general hypothesis with specific parameters</p>",
        "id": 447318458,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719431717
    },
    {
        "content": "<p>Hoards of mathematicians disagree with you. In fact I'm surprised you don't find it intuitive -- mathematicians find <code>apply at</code> very intuitive, this is a standard step for them. In contrast they find <code>apply</code> extremely unintuitive. I know this from lots of NNG feedback.</p>",
        "id": 447352680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719443287
    },
    {
        "content": "<p>Kevin I don't find the normal <code>apply</code> on a goal unintuitive. But if I have a hypothesis <code>ha : a</code> and <code>hab : a -&gt; b</code> then <code>apply hab at ha</code> leaves me with <code>ha : b</code>.</p>",
        "id": 447353058,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719443529
    },
    {
        "content": "<p>This messes with my naming scheme</p>",
        "id": 447353075,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719443540
    },
    {
        "content": "<p>whereas if it was <code>hab : b</code> I would be less confused because now I have applied the specific argument <code>ha</code> and now I have the specialized hypothesis</p>",
        "id": 447353171,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719443606
    },
    {
        "content": "<p>See the states below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hab</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">hab</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"c1\">-- see state here</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hab</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">specialize</span><span class=\"w\"> </span><span class=\"n\">hab</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\">  </span><span class=\"c1\">-- see state here</span>\n</code></pre></div>",
        "id": 447353182,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719443616
    },
    {
        "content": "<p>I assure you I am a novice at this type theory business.</p>",
        "id": 447353259,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719443649
    },
    {
        "content": "<p><code>specialize</code> is just applying a function to its arguments. That's easy.</p>",
        "id": 447353555,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719443833
    },
    {
        "content": "<p>I see your point!</p>",
        "id": 447354793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719444231
    },
    {
        "content": "<p>I would find it more intuitive if the syntax was <code>apply ha at hab</code> and this changed <br>\n<code>hab : a -&gt; b</code> to <code>hab : b</code></p>",
        "id": 447355164,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719444335
    },
    {
        "content": "<p>Yes, this was the point I got from your messages.</p>",
        "id": 447355422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719444402
    },
    {
        "content": "<p>Is it really worth it to change this behaviour for all those NNG users and confuse them when I can use <code>specialize</code> and apply a full sequence of arguments at a hypothesis instead of using <code>apply</code>?</p>",
        "id": 447355673,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719444477
    },
    {
        "content": "<p>I haven't heard anybody else complain about this</p>",
        "id": 447355758,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719444492
    },
    {
        "content": "<p>Here's a quick and dirty version of this change with examples</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">macro</span><span class=\"w\"> </span><span class=\"s2\">\"apply \"</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"s2\">\" at \"</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">specialize</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hab</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">specialize</span><span class=\"w\"> </span><span class=\"n\">hab</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"c1\">-- see state here</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hab</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hab</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hab</span>\n</code></pre></div>",
        "id": 447356409,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719444719
    },
    {
        "content": "<p><code>specialize</code> clearly has a brevity advantage</p>",
        "id": 447356494,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719444737
    },
    {
        "content": "<p>The issue I guess is that mathematicians don't tend to think of a proof as a function and in NNG4 we try to move away from that idea.</p>",
        "id": 447358022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719445384
    },
    {
        "content": "<p>If you like the behaviour of <code>apply at</code> that I show above, then I can make a <code>PR</code> to change it. Or we could do a poll. I am skeptical of making changes to tutorial relevant tactics when I don't see anybody else complaining about it or expressing opinions</p>",
        "id": 447358447,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719445633
    },
    {
        "content": "<p>Yeah I removed the suggestion to PR a change about 30 seconds after suggesting it but it seems you saw it anyway :-)</p>",
        "id": 447358554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719445697
    },
    {
        "content": "<p>I prefer my version of <code>apply at</code> even more for longer chains of implications or \\foralls because I consistently retain one name for the hypothesis (in this case <code>hab</code>) that I am moving forward on.</p>",
        "id": 447358627,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719445745
    },
    {
        "content": "<p>otherwise it is a confusing mess of names, which are both hard to find in the infoview when writing big proofs and look confusing in the proof script once the proof is done.</p>",
        "id": 447358694,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719445798
    },
    {
        "content": "<p>I think it is better to keep them as they are. <code>apply hab at ha</code> renames <code>ha</code> to the result, <code>specialize hab ha</code> renames <code>hab</code> to the result, both might be useful depending on context</p>",
        "id": 447359029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719445984
    },
    {
        "content": "<p>I think the motivation for the <code>apply at</code> behavior is that <code>hab</code> may not be a variable in the context at all but rather a global theorem, in which case renaming it doesn't make sense</p>",
        "id": 447359103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719446041
    },
    {
        "content": "<p>also <code>at h</code> generally names a hypothesis in the context that may be rewritten</p>",
        "id": 447359176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719446062
    },
    {
        "content": "<p>That makes sense. I think I would find <code>apply at </code> less painful if the hypothesis didn't move around in the proof state. In a large proof it's like playing hide and seek with my hypotheses. Not moving the hypotheses around would still mess with my naming scheme but at least I won't lose track of the name change so easily. But again that could just be me and people might prefer seeing the latest hypothesis they are working on appear closer to the goal</p>",
        "id": 447359578,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719446313
    },
    {
        "content": "<p>Anyway, I am happy with <code>specialize</code> so this is more or less a non-issue for me.</p>",
        "id": 447359615,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719446338
    },
    {
        "content": "<p>Slightly related to what you mentioned <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> : Is there a tactic that just introduces a global theorem into the list of local hypothesis. Technically it's job is <code>have lemma_name := lemma_name</code>, but informally it is the equivalent of <code>recall theorem &lt;lemma_name&gt;</code> in mathematical english. It could be accompanied by a <code>recall? &lt;insert the shape of the theorem&gt;</code> which then calls something like <code>loogle</code> and says <code>try this : recall &lt;matching lemma name&gt;</code></p>",
        "id": 447504860,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719501158
    },
    {
        "content": "<p>It could just be a macro for <code>have : &lt;statement&gt; := by exact?</code> plus some code to add hypotheses</p>",
        "id": 447505380,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719501292
    },
    {
        "content": "<p>The goal is not to invent a new tactic, just provide ergonomic options that match math english.</p>",
        "id": 447505530,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719501341
    },
    {
        "content": "<p>I think this <code>recall</code> would be really nice! Doing <code>have := theorem_name</code> usually fails because of metavariables, and <code>have := @theorem_name</code> and <code>have’ := theorem_name</code> can both give unreadable output. This is worse in lean 4 that is was in lean 3.</p>\n<p>It would be good to have a quick way to see something like what <code>#check</code> shows, but as a hypothesis.</p>",
        "id": 447738139,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1719573421
    },
    {
        "content": "<p><code>observe</code> is almost that tactic</p>",
        "id": 447738821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1719573618
    },
    {
        "content": "<p>It's only today that I realised you can write <code>#check theorem_name</code> inside a tactic proof too, and not only outside a statement as a command.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">pi_div_four_le_arcsin</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 447742252,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719574584
    },
    {
        "content": "<p>From a stylistic POV, a proof that that reads.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">recall</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">lemma_name</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">assumption</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">assumption</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>Is immediately legible to someone who wishes to understand the high level flow of the proof even before they get into the infoview. Note that I am using my version of <code>apply at</code> here so the hypothesis name remains <code>&lt;lemma_name&gt;</code> after each <code>apply at</code>. </p>\n<p>PS (CW: idle speculation): Going further with the whole \"math English\" style, <code>rw</code> feels more English like if it said <code>rewrite &lt;hypothesis&gt; with [eq1, eq2,....]</code></p>",
        "id": 447746420,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1719575939
    }
]