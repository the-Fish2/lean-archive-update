[
    {
        "content": "<p>I must not be the first one who used <code>congr</code> and was left with <code>HEq u (e â–¸ u)</code>. How do I get rid of this? I am happy to assume UIP or whatever it takes. (Currently I am not using mathlib, if that matters, and would prefer not to.)</p>",
        "id": 433028994,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712998295
    },
    {
        "content": "<p><code>cases e; rfl</code> seems likely to work</p>",
        "id": 433029174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712998468
    },
    {
        "content": "<p>there is probably a lemma you can apply as well</p>",
        "id": 433029189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712998490
    },
    {
        "content": "<p><code>eqRec_heq.symm</code>, give or take</p>",
        "id": 433029231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712998549
    },
    {
        "content": "<p>Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">chicken</span> <span class=\"o\">{</span><span class=\"n\">Î±</span> <span class=\"n\">Î²</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span> <span class=\"bp\">â†’</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">â†’</span> <span class=\"n\">Î²</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">â–¸</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span> <span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">--left with HEq u (e â–¸ u)</span>\n</code></pre></div>",
        "id": 433029428,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712998724
    },
    {
        "content": "<p>Indeed, <code>cases e ; rfl</code> (instead of <code>congr</code>) worked. Thanks.</p>",
        "id": 433029595,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712998804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> has marked this topic as resolved.</p>",
        "id": 433029598,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712998808
    },
    {
        "content": "<p>More generally, is there a way to say \"Just get rid of all the <code>â–¸</code>, even if you assume UIP\"?</p>",
        "id": 433029686,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712998908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> has marked this topic as unresolved.</p>",
        "id": 433029744,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712998938
    },
    {
        "content": "<p>The problem is that in many other cases I have goals like <code>step p (â‹¯ â–¸ ps) = â‹¯ â–¸ step p ps</code> and I really don't want to look what's inside <code>â‹¯ </code>. Any advice on how to deal with these is most welcome.</p>",
        "id": 433029786,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712998996
    },
    {
        "content": "<p>I believe this is what we affectionately refer to as DTT hell</p>",
        "id": 433029798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712999032
    },
    {
        "content": "<p>Yes, I know, I helped advertise it under the slogan \"homotopy type theory\" a while ago.</p>",
        "id": 433029852,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712999066
    },
    {
        "content": "<p>unfortunately there are a lot of non-theorems in this space so it's not that easy to just ignore all the casts</p>",
        "id": 433029857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712999081
    },
    {
        "content": "<p>But since Lean 4 has choice, excluded middle, and nuclear bombs, perhaps the hell is more enjoyable.</p>",
        "id": 433029865,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712999091
    },
    {
        "content": "<p>In that case, how do I look inside <code>â‹¯ </code>?</p>",
        "id": 433029895,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712999129
    },
    {
        "content": "<p>as long as enough things are variables you can pretty much just <code>cases e1; cases e2; rfl</code> your way to success, but when the equalities are between nontrivial things you first have to generalize various things, and I don't know a general way of doing this correctly</p>",
        "id": 433029960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712999167
    },
    {
        "content": "<p>Or even better, is there UIP somewhere in the Lean standard library? I think that would solve my problems.</p>",
        "id": 433029965,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712999173
    },
    {
        "content": "<p>(Of course they are not variables.)</p>",
        "id": 433029977,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712999188
    },
    {
        "content": "<p>you can mouse over the ... to see it, or use <code>set_option pp.proofs true</code></p>",
        "id": 433029981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712999190
    },
    {
        "content": "<p>UIP is assumed by everything, and it's a definitional equality. That's not the problem</p>",
        "id": 433029999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712999214
    },
    {
        "content": "<p>I suppose in this example you can kind of just rewrite the cast away because HEq is transitive and casts are HEq to their main argument</p>",
        "id": 433030046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712999272
    },
    {
        "content": "<p>but rewrite doesn't understand HEq</p>",
        "id": 433030058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712999282
    },
    {
        "content": "<p>One tool which may help you here is <code>generalize_proofs</code>, which will pull all the <code>...</code> proofs into variables so you can induct on them or revert them or something</p>",
        "id": 433030150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712999358
    },
    {
        "content": "<p>but it's in mathlib, you'll have to copy it into your project if you don't want to depend on mathlib</p>",
        "id": 433030177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712999401
    },
    {
        "content": "<p>I think I'll just have to put on my HoTT hat and deal with the matter. Thanks.</p>",
        "id": 433030255,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712999466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20resolve.20.60HEq.20u.20.28e.20.E2.96.B8.20u.29.60.3F/near/433030150\">said</a>:</p>\n<blockquote>\n<p>One tool which may help you here is <code>generalize_proofs</code>, which will pull all the <code>...</code> proofs into variables so you can induct on them or revert them or something</p>\n</blockquote>\n<p>Interesting! Do you have a mwe or a link to somewhere on Mathlib for a use case of <code>generalize_proofs</code>?</p>",
        "id": 433507735,
        "sender_full_name": "Sina H ð“ƒµ",
        "timestamp": 1713269489
    },
    {
        "content": "<p>basic example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.GeneralizeProofs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">v.cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- âŠ¢ a ++ b = BitVec.cast â‹¯ v</span>\n  <span class=\"n\">generalize_proofs</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- h : n + 5 = 5 + n</span>\n  <span class=\"c1\">-- âŠ¢ a ++ b = BitVec.cast h v</span>\n</code></pre></div>",
        "id": 433515274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713271853
    },
    {
        "content": "<p>the next step can vary depending on what you want to do, but what <code>generalize_proofs</code> saves you is the trouble of having to write down whatever nasty proof term was generated by <code>omega</code> in this example in order to use it with <code>generalize</code></p>",
        "id": 433515626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713271979
    }
]