[
    {
        "content": "<p>There are many lemmas that would be potentially useful for Mathlib users but not for Mathlib developers.<br>\nI think we should create a separate library for them because pushing these lemmas into Mathlib often meets resistance of Mathlib maintainers.<br>\nThere is a growing frustration among Mathlib contributors whose PRs get rejected.<br>\nAt the same time, there is a lot of frustration among Mathlib users who think that \"a lemma for this basic thing should definitely already exist\" but <code>exact?</code> gives them nothing.<br>\nI don't think, however, that we should aim to change Mathlib standards.<br>\nIt is amazing we have Mathlib as a a nearly-all-encompassing monorepo and it is important that Mathlib has high standards for contributions.<br>\nThe problem is that Mathlib is de-facto the only mathematical library in Lean 4.<br>\nThere are many lemmas that would be great to have somewhere but Mathlib is not the right place for them and \"ordinary\" downstream projects are not well searchable in the current ecosystem (see <a href=\"#narrow/stream/113488-general/topic/Reservoir.20search\">previous discussion</a> for context).<br>\nThat's why I propose we should create a library Mathlib++ that would import Mathlib and contain some \"extras\".<br>\nSome principles I suggest:</p>\n<ul>\n<li>Mathlib++ must not contain any public definitions or abbreviations (private definitions for the sake of proving something are acceptable and encouraged).</li>\n<li>Mathlib++ must not contain lemmas that <code>exact?</code> can one-shot after importing Mathlib; if something gets to Mathlib, it must be removed from Mathlib++.</li>\n<li>Mathlib++ should contain lemmas that have at least a tiny chance of being used by Mathlib users.</li>\n<li>Mathlib++ must be frequently updated to the newest version of Mathlib (so that it can be imported in place of Mathlib without losing access to new Mathlib features).</li>\n<li>Mathlib++ lemmas don't have to be human-searchable, they don't have to be documented, and it is not strictly necessary that files are well organized; the important thing is that <code>exact?</code> can find them in some meaningful use cases.</li>\n</ul>\n<p>What do you think?</p>",
        "id": 441031444,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716900187
    },
    {
        "content": "<p>/poll If we happen to create such a library, what should its name be?<br>\nMathlib++<br>\nMathlibExtras<br>\nMathlibits</p>",
        "id": 441031624,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716900245
    },
    {
        "content": "<p>Somewhat tangentially, here is a message I sent to the reviewers stream.<br>\n<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/345428-mathlib-reviewers/topic/LeanAFP/near/434013165\">said</a>:</p>\n<blockquote>\n<p>My views on the utility of a mathematical library are as such:</p>\n<ul>\n<li>It should provide a single coherent framework for mathematics</li>\n<li>It should list most of the reasonably mature developments that have been made in Lean</li>\n</ul>\n<p>Mathlib achieves the first but not the second. Isabelle AFP achieves the second but not the first.</p>\n<p>Hence I was wondering if we could acquire a Lean AFP repo whose entry requirements would be much lower than Mathlib. Similarly to the Isabelle AFP, it would be made of many Lean libraries, which would each have their own requirements (in particular they could use different Lean/Mathlib versions) and could import each other. It would act as a staging place for developments that are not yet mature enough for Mathlib, but mature enough that they shouldn't lie forgotten in someone's random repo</p>\n<p>LeanCamCombi de facto acts as a \"LeanAFP for combinatorics\". I've been collecting there a bunch of combinatorics formalisations that didn't make it to mathlib3 and PRing them to Mathlib from there.</p>\n<p>PS: I know that the \"they could use different Lean/Mathlib versions\" part would be a challenge for Lake, so having a single version for all libraries in the AFP would be an acceptable compromise at the start</p>\n</blockquote>",
        "id": 441033892,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716900888
    },
    {
        "content": "<p>It was however remarked that this was not much more than \"Reservoir, but in one repo\"</p>",
        "id": 441034057,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716900935
    },
    {
        "content": "<p>I had wondered about something like this, but I was just thinking of a mathlib+++ where anything that passes CI is ok (and imports mathlib like the above). But I have no idea how not to spend all one's time just fixing everything that breaks each time we updated mathlib. I agree that having things in repos that don't make it into mathlib seems like a waste, but I don't know a solution to this, other than PRing often. </p>\n<p>On the other hand, if this became too popular maybe people wouldn't bother PRing to mathlib which would be bad.</p>",
        "id": 441035556,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1716901356
    },
    {
        "content": "<p>The other day, talking to <span class=\"user-mention\" data-user-id=\"665760\">@Yves Jäckle</span> gave me a similar idea: I've informally called it \"not-yet-mathlib\"; perhaps \"mathlib-staging\" or \"archive of formal Lean proofs\" is an even nicer name.<br>\nNot everybody who formalises something useful has the time (or energy, or perhaps even expertise) to bring this all the way into mathlib. Often, polishing something for mathlib may mean generalising it a lot (to the point you're re-proving things), lots of code improvements and refactoring --- and waiting for the sometimes glacial review process to complete. </p>\n<p>That said: there's a lot of value in moving all things possible to mathlib. If possible, hiring somebody to polish formalisation code and move it into mathlib would be very worthwhile. (Sometimes, that's not so hard. In general, it might require subject-specific knowledge.)</p>\n<p>Features I like about this idea:</p>\n<ul>\n<li>lowers the bar to entry</li>\n<li>could increase discoverability of formalisations (though: perhaps the real solution is to have better reservoir search, at least on the level of concepts)</li>\n<li>being maintained to match mathlib is useful</li>\n</ul>\n<p>I am worried</p>\n<ul>\n<li>that updating this huge body of code will be too much work for an individual</li>\n<li>this lowers incentives to PR material to mathlib --- which would be a net negative, in my opinion</li>\n</ul>",
        "id": 441036433,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716901609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441035556\">said</a>:</p>\n<blockquote>\n<p>On the other hand, if this became too popular maybe people wouldn't bother PRing to mathlib which would be bad.</p>\n</blockquote>\n<p>Mathlib++ wouldn't contain any \"new theories\", so Mathlib would have its future uncontested by Mathlib++.<br>\nMathlib++ would be for utilities for working with \"existing theories\" that did not meat Mathlib standards but might be useful for ordinary Mathlib users.</p>",
        "id": 441036454,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716901620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441036454\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441035556\">said</a>:</p>\n<blockquote>\n<p>On the other hand, if this became too popular maybe people wouldn't bother PRing to mathlib which would be bad.</p>\n</blockquote>\n<p>Mathlib++ wouldn't contain any \"new theories\", so Mathlib would have its future certain.<br>\nMathlib++ would be for utilities for working with \"existing theories\" that did not meat Mathlib standards but might be useful for Mathlib users.</p>\n</blockquote>\n<p>Yeah sure I know what you mean, I was just thinking of the updating problem and how it would also apply to mathlib++, since as it grows it would be an increasingly harder task to update mathlib.</p>",
        "id": 441036808,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1716901731
    },
    {
        "content": "<p>I just wrote the following: I wonder if this is the best solution, though. Taking a step back: can you articulate precisely, @Martin Dvorak, what problem you're trying to solve? Is it</p>\n<ul>\n<li>review process to mathlib takes too long</li>\n<li>review process can mean rewriting code many times over (to make it general enough)</li>\n<li>not all work is in mathlib, since moving something to mathlib takes time and energy </li>\n<li>as a user, my basic lemma X is not found (since it's a very special case of a much more general mathlib lemma)</li>\n</ul>\n<p>I think all of these are worth addressing, but have different solutions.</p>\n<hr>\n<p>So, as I understand it, the answer is \"just the last item\": mathlib++ is only for convenience lemmas, <em>not</em> about new definitions.</p>",
        "id": 441037084,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716901820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441037084\">said</a>:</p>\n<blockquote>\n<p>I just wrote the following: I wonder if this is the best solution, though. Taking a step back: can you articulate precisely, @Martin Dvorak, what problem you're trying to solve? Is it</p>\n<ul>\n<li>review process to mathlib takes too long</li>\n<li>review process can mean rewriting code many times over (to make it general enough)</li>\n<li>not all work is in mathlib, since moving something to mathlib takes time and energy </li>\n<li>as a user, my basic lemma X is not found (since it's a very special case of a much more general mathlib lemma)</li>\n</ul>\n<p>I think all of these are worth addressing, but have different solutions.</p>\n<hr>\n<p>So, as I understand it, the answer is \"just the last item\": mathlib++ is only for convenience lemmas, <em>not</em> about new definitions.</p>\n</blockquote>\n<p>Basic lemma X is not found because it didn't make it to Mathlib (for various reasons).</p>\n<p>My point is that (1) and (2) and (3) lead to (4), which is bad especially for ordinary Mathlib users who just want to have a convenient tool and don't plan to contribute to Mathlib.</p>",
        "id": 441037529,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716901968
    },
    {
        "content": "<p>So, to give a particular example, an \"elementary probability\" library that re-defines probability theory over finite probability spaces is <em>not</em> in scope of Mathlib++, right?</p>",
        "id": 441039755,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716902630
    },
    {
        "content": "<p>I'd say the review process for lemmas are more lenient than definitions to begin with, and the suggestions are mostly for maintainability. So either Mathlib++ will have no review process and it would be painful to bump it (to achieve point 4), or it will have some form of a code style check and one might as well PR it into mathlib itself.</p>",
        "id": 441043024,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716903591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441043024\">said</a>:</p>\n<blockquote>\n<p>So either Mathlib++ will have no review process and it would be painful to bump it (to achieve point 4), or it will have some form of a code style check and one might as well PR it into mathlib itself.</p>\n</blockquote>\n<p>False dichotomy.</p>\n<p>Have a look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/10629\">#10629</a> for example. This lemma would be potentially useful but not as useful as the generalized version, which I did not provide. For contribution to Mathlib, such a generalization would be needed, but I am not willing to work on it. Of course, the general version would be best, but if the available options are having only my version in Mathlib++ or no version at all being accessible for other users, I think the former option is better.</p>\n<p>Or have a look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/12806\">#12806</a> for a different kind of blocker. I suggested two lemmas, but they were presumably deemed as bad for the library design (I am extrapolating from a single review here because everybody else ignored it for so long that it acquired a merge conflict and hence disappeared from the queue) even tho they would help Mathlib users.</p>\n<p>There are just so many things that are bad for Mathlib maintainers but good for Mathlib users.</p>",
        "id": 441045918,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716904415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441045918\">said</a>:</p>\n<blockquote>\n<p>everybody else ignored it for so long that it acquired a merge conflict</p>\n</blockquote>\n<p>Just noting that PRs acquire merge conflicts pretty quickly these days</p>",
        "id": 441046515,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716904573
    },
    {
        "content": "<p>If you think mathlib PRs take time, check out the batteries queue. We are clearly beginning  to hit scale problems</p>",
        "id": 441051226,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716905938
    },
    {
        "content": "<p>#batt-queue ?</p>",
        "id": 441051305,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716905965
    },
    {
        "content": "<p>What we need is a way of spreading out responsibilities of maintaining to non-100x lean devs and users without compromising on the quality of the ecosystem.</p>",
        "id": 441051760,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1716906121
    },
    {
        "content": "<p>Just send out the batt-signal</p>",
        "id": 441051994,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716906184
    },
    {
        "content": "<p>My two cents on the matter after having read the above: </p>\n<p>I think that having a place to collect 'pre-Mathlib' results (e.g. those that don't meet style standard, are not sufficiently general, those that would require effort to get into Mathlib) might be good for multiple reasons: </p>\n<ul>\n<li>it shows people that the result exists</li>\n<li>it allows people to prepare minor results which may eventually be relevant for Mathlib, but not yet (as they are preludes for some bigger result, where only the bigger results mandates including them to Mathlib)</li>\n<li>it provides for a nice to-do list for people seeking to contribute to Mathlib</li>\n</ul>\n<p>As such, I think perhaps that the format of Mathlib++ as another library may not be the optimal route to go: what if instead you make it into some dictionary/wiki: each (group of strongly related) results can go to a separate page, which could e.g. include:</p>\n<ul>\n<li>Lean code that works with some Lean + Mathlib version (as demonstrated by the fact that some PR or something built)</li>\n<li>The main objections to adding this to Mathlib in the current form</li>\n<li>Any discussions that have already been had on adding the results to Mathlib + future pointers</li>\n<li>A list of projects/results which would need these results</li>\n<li>The author of the original code or someone who claims responsibility </li>\n</ul>\n<p>I think this approach has several advantages:</p>\n<ul>\n<li>it does not require constant bumping</li>\n<li>it makes insightful why the result is useful and what needs to be done to add it</li>\n<li>it is lightweight (a wiki) rather than another library. In particular, I would be afraid that, if it easier to add to Mathlib++ as a library, it might start growing at a faster pace than Mathlib, which may take up quite a bit of memory...</li>\n<li>it provides for a <code>to-do</code> list for people that have some Lean time but don't know what exactly to tackle</li>\n</ul>",
        "id": 441052265,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1716906278
    },
    {
        "content": "<p>For the two lemmas that are pointed out by Martin, I believe something else could be useful: a stackoverflow-like wiki of “how to do this in Lean?”.  <br>\nLemmas that are direct application of a mathlib mechanism are unlikely to be added to mathlib, probably because the library won't be searchable, there will be tons of ways to do simple things. Rather, we need, and especially newcomers need a place where simple stuff is solved, with explanations and pointers.<br>\n(I don't believe that stackoverflow is now the good place to collect this.)</p>",
        "id": 441052378,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1716906316
    },
    {
        "content": "<p>Mostly, it would be great if this wiki was not review-bound. That would relieve a lot of review pressure</p>",
        "id": 441052819,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716906455
    },
    {
        "content": "<p>Even requests for new results could go in such a wiki<br>\n(missing results are proven results which have been generalized in the wrong direction, after all)</p>",
        "id": 441054932,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1716907095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> I've noticed that you have mentioned several times you want <code>exact?</code> to work and it fails, and then you complain (sorry, perhaps this is not the right word; I don't mean to sound negative) that it should work and then you suggest some new piece of engineering on top of Mathlib to make it work. Personally, I think you're just expecting too much of <code>exact?</code>. It's really not meant to find <em>every</em> simple thing. Often other tactics / approaches are the way to go.</p>",
        "id": 441056002,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1716907423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441052265\">said</a>:</p>\n<blockquote>\n<p>My two cents on the matter after having read the above: <br>\n(...)</p>\n</blockquote>\n<p>You suggest the optimistic approach: Organize information about unfinished things and somebody will create a Mathlib-ready version that will eventually get into Mathlib.</p>\n<p>I suggest the pessimistic approach: Assume that many things will never get done in the most general way that Mathlib would like to have — how to make them useful for Mathlib users nevertheless?</p>",
        "id": 441062753,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716909498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441052378\">said</a>:</p>\n<blockquote>\n<p>For the two lemmas that are pointed out by Martin, I believe something else could be useful: a stackoverflow-like wiki of “how to do this in Lean?”.  </p>\n</blockquote>\n<p>Searching a wiki is such a pain — compared to writing <code>exact?</code> and immediately getting the result.</p>",
        "id": 441062924,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716909554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441062753\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441052265\">said</a>:</p>\n<blockquote>\n<p>My two cents on the matter after having read the above: <br>\n(...)</p>\n</blockquote>\n<p>You suggest the optimistic approach: Organize information about unfinished things and somebody will create a Mathlib-ready version that will eventually get into Mathlib.</p>\n<p>I suggest the pessimistic approach: Assume that many things will never get done in the most general way that Mathlib would like to have — how to make them useful for Mathlib users nevertheless?</p>\n</blockquote>\n<p>No, not necessarily. A wiki will still have good searchability, so even results that never make it into Mathlib can be found there. I think that putting everything in one large library would not necessarily be extremely helpful, as exact? will still fail on occasions. However, if you like, you could automatically generate a library from such a wiki by sorry’ing every proof, giving you some more flexibility</p>",
        "id": 441063435,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1716909697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441056002\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> I've noticed that you have mentioned several times you want <code>exact?</code> to work and it fails, and then you complain (sorry, perhaps this is not the right word; I don't mean to sound negative) that it should work and then you suggest some new piece of engineering on top of Mathlib to make it work. Personally, I think you're just expecting too much of <code>exact?</code>. It's really not meant to find <em>every</em> simple thing. Often other tactics / approaches are the way to go.</p>\n</blockquote>\n<p>I expected somebody would say that I want from <code>exact?</code> too much.<br>\nThere is one important thing I need to say about it.<br>\nYou are making a mistake that people who very well understand certain area often make.</p>\n<p>I recently saw a very inspirational video. It is about Magic, a game I sometimes play, but it provides some lessons that are applicable to other areas. Here, I would like to highlight the lesson No.1, which starts at this timestamp: <a href=\"https://youtu.be/QHHg99hwQGY?si=v5Td-G1irdy-9u-6&amp;t=134\">https://youtu.be/QHHg99hwQGY?si=v5Td-G1irdy-9u-6&amp;t=134</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"QHHg99hwQGY\" href=\"https://youtu.be/QHHg99hwQGY?si=v5Td-G1irdy-9u-6&amp;t=134\"><img src=\"https://uploads.zulipusercontent.net/1a08d151902c21033c523849c98240b53155aead/68747470733a2f2f692e7974696d672e636f6d2f76692f51484867393968775147592f64656661756c742e6a7067\"></a></div><p>The mistake is Fighting Against Human Nature.<br>\nIf something <em>feels</em> like there should a ready-to-use lemma for it, there should better <em>be</em> a ready-to-use lemma for it.<br>\nExperts like you will say \"why would you need a lemma — you can call <code>positivity</code> to obtain it\" or something like it (ignore for a moment a the tactic in question does not exist yet if we talk about the last example I gave; I am arguing why the lemma should exist even if given tactic exists at the same time).<br>\nThe problem is that <em>this is not how a beginner thinks</em>!<br>\nIf something feels like \"there must be a lemma for it\", the thoughts don't immediately go into \"could I use a tactic to automate it\" (in the best scenario, <code>exact?</code> fails and the user proceeds to use the recommended tactic instead; in the worst scenario, <code>exact?</code> fails and the user gives up, leaves the project unfinished and never touches Lean again).<br>\nExpecting the user not to expect a lemma for basic things is Fighting Against Human Nature.</p>\n<p>Imagine an Average Joe, who (to make things worse) has very little will to learn new things, needs to get something done.<br>\nWhat tools would have to be at his hand so that Average Joe finishes the job before he gives up?</p>\n<p>As Mark Rosewater puts it:<br>\n\"Don't change your players to match your game. Change the game to match your players.\"<br>\nLean and Mathlib is used by many \"players\" who never comment on Zulip, so we don't even know how much their mindset is different from the mindset of Lean users on Zulip.</p>",
        "id": 441067796,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716911179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441039755\">said</a>:</p>\n<blockquote>\n<p>So, to give a particular example, an \"elementary probability\" library that re-defines probability theory over finite probability spaces is <em>not</em> in scope of Mathlib++, right?</p>\n</blockquote>\n<p>Your suggestion falls under a second thing that was on my mind (which I didn't bring up because I didn't want to post too much).<br>\nThere should be a library for things that Mathlib doesn't have and Mathlib maintainers are sure Mathlib will never have.<br>\nMost importantly, such a library should contain API for special cases of \"difficult general theories\".<br>\nFor example, there should be ε-δ API for basic limits that undergraduates can easily use.<br>\nSuch a thing isn't expected to be a part of Mathlib; separate teaching libraries are developed.<br>\nHowever, it would be convenient to have one centralized library for such things that would be regularly updated to the newest Mathlib in order to easy the transition between \"beginner stuff\" and \"advanced stuff\".<br>\nThe current teaching libraries often use \"Lean dialects\" which are too far from \"standard Lean\" — which may be a good thing, but also a bad thing.</p>\n<p>I think such a library should be built on top of Mathlib++.</p>",
        "id": 441070254,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716912002
    },
    {
        "content": "<p>Regarding the \"lemma instead of a tactic\" point. I feel like this approach will not scale. Many of our tactics can cover infinitely large theories, you will not be able to avoid tactics indefinitely. The solution for this type of stuff could instead be a tactic like hint (iirc that's the name?) Which tries out many tactics and sees if one of them succeeds. If we wanted to make this more peformant we could additionally inform a hint style tactic with \"triggers\" that make it try certain tactics on a goal based on the shape of a goal.</p>\n<p>In general this process can also be improved with the things we are already doing, more automation, standards for the way that a lemma should be named to ease discover ability, tools like loogle. These approaches are proven to work with people that know what they are doing very well already. I don't believe that we should develop a library geared towards people that cannot use these tools but instead make them accessible enough such that they can be used. This can be done throigh improvements on the tools or their integration, the way they are taught to people including good documentation etc.</p>\n<p>Regarding less generalized APIs than mathlib. I'm not an expert on mathlib or large scale formalization at all but providing theories that are powered by mathlib but only expose an educational framework does sound reasonable to me for teaching purposes. However such a project would also need to have high standards. This is because it would be one of the first contact points of many mathematics students with Lean and should thus be very high quality in order to not scare them away.</p>",
        "id": 441072485,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716912738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441072485\">said</a>:</p>\n<blockquote>\n<p>Many of our tactics can cover infinitely large theories, you will not be able to avoid tactics indefinitely.</p>\n</blockquote>\n<p>My point is not that we should provide so many lemmas that beginners wouldn't need other tactics at all.<br>\nMy point is that we should provide a lemma for situations where most beginners feel like there should a lemma.<br>\nIf a beginner writes <code>exact?</code> and it fails, even if subsequent <code>hint</code> or <code>suggest</code> succeeds, we are already losing popularity points for not providing the thing the user expected.</p>",
        "id": 441073232,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716913047
    },
    {
        "content": "<p>My point is that maybe pointing users to exact? As a first step is already a wrong idea, precisely because we will never be able to generally make it succeed.</p>",
        "id": 441073465,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716913124
    },
    {
        "content": "<p>Thanks for your point! I will keep it in mind for the next time I teach Lean.</p>",
        "id": 441073778,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716913232
    },
    {
        "content": "<p>Martin, I really don’t think this is a good idea. What you propose is not a Mathlib++, it’s a Mathlib--, a bad quality version of Mathlib that would be useful to nobody (not even you). I think trying to make it useful would reinvent being Mathlib (or a library with similar quality goals). You seem to think that Mathlib has high standards to annoy contributors, but it’s the opposite.</p>",
        "id": 441087385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716918757
    },
    {
        "content": "<p>And of course Henrik is right about tactics. The only road to scalability is to get automation good enough to have less lemmas per definition, not more.</p>",
        "id": 441087529,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716918819
    },
    {
        "content": "<p>I think what you want, but don’t know that you want, is to replace <code>exact?</code> by <code>auto</code>. I’m not saying that <code>auto</code> is already good enough, but it will be eventually.</p>",
        "id": 441087707,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716918886
    },
    {
        "content": "<p>I, for one, agree with the need for more discoverability for lemmas that are not yet in mathlib. Seeing <a href=\"https://x.com/Autoparallel/status/1781387503448043761\">this tweet</a> has made me very nervous that someone might duplicate 10 hours of work at some point on account of not searching the PRs for a theorem.</p>",
        "id": 441101844,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1716924532
    },
    {
        "content": "<p>It would be nice, perhaps, to at least have the docs/loogle/moogle show results for lemmas that are in CI-passing PRs, appropriately tagged with a <span aria-label=\"construction zone\" class=\"emoji emoji-1f6a7\" role=\"img\" title=\"construction zone\">:construction_zone:</span> to indicate that the result is not in mathlib yet.</p>",
        "id": 441102386,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1716924762
    },
    {
        "content": "<p>I think a point of tension here is this: There are mathlib contributors who do most of their mathlib contribution directly in mathlib PRs, and there are or will be people who write lean projects who have no interest in upstreaming their stuff to mathlib or any other repository. So as long as these two types of Lean users exist, we can't have all Lean lemmas in one repo, so for this reason it seems like the only way to make all lean lemmas accessible is through some web search interface.</p>",
        "id": 441104722,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1716925838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441035556\">said</a>:</p>\n<blockquote>\n<p>I had wondered about something like this, but I was just thinking of a mathlib+++ where anything that passes CI is ok (and imports mathlib like the above). But I have no idea how not to spend all one's time just fixing everything that breaks each time we updated mathlib. I agree that having things in repos that don't make it into mathlib seems like a waste, but I don't know a solution to this, other than PRing often. </p>\n<p>On the other hand, if this became too popular maybe people wouldn't bother PRing to mathlib which would be bad.</p>\n</blockquote>\n<p>I had a similar thought - a version of mathlib where the only PRs that get reviewed are ones that add new <code>proof_wanted</code> theorems, and which simply accept automatically any pull request that improves some measures of performance, or which doesn't hurt performance too much while completing a wanted theorem. It would be interesting to see how that would develop (but of course it would be something of a technical lift).</p>",
        "id": 441108309,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1716927385
    },
    {
        "content": "<p>My impression is that Lean and Mathlib are both quite bleeding-edge and take a lot of work to coordinate upgrades, so it might not be sustainable to try to maintain another (even larger) monorepo. A decentralized approach (Reservoir) seems more scalable since, while it pushes maintenance onto users (dependency conflicts), it is more surmountable as people have more independence in fixing and working around breakage.</p>\n<p>Indeed having great categorization / descriptions / search over Reservoir projects is probably all that is needed.</p>\n<p>Tactics (and AI) are probably the future, but we mortals can only speculate. It seems good to also expect a traditional software ecosystem.</p>",
        "id": 441114424,
        "sender_full_name": "llllvvuu",
        "timestamp": 1716930115
    },
    {
        "content": "<p>Also, I could imagine getting to a point where there is a de-facto non-Mathlib project for whatever area you're working on, such that most of the time you only need one non-Mathlib project, which doesn't create dependency conflicts.</p>\n<p>This is actually already what I observe, every project I've seen has exactly one non-Mathlib dependency.</p>",
        "id": 441115237,
        "sender_full_name": "llllvvuu",
        "timestamp": 1716930476
    },
    {
        "content": "<p>Regarding wiki, I hope search and AI will grow to be able to extract answers out of Zulip and GitHub (including people's random projects) instead of needing to maintain a separate explicitly structured thing</p>",
        "id": 441117082,
        "sender_full_name": "llllvvuu",
        "timestamp": 1716931300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441067796\">said</a>:</p>\n<blockquote>\n<p>The problem is that <em>this is not how a beginner thinks</em>!<br>\nIf something feels like \"there must be a lemma for it\", the thoughts don't immediately go into \"could I use a tactic to automate it\" (in the best scenario, <code>exact?</code> fails and the user proceeds to use the recommended tactic instead; in the worst scenario, <code>exact?</code> fails and the user gives up, leaves the project unfinished and never touches Lean again).<br>\nExpecting the user not to expect a lemma for basic things is Fighting Against Human Nature.</p>\n</blockquote>\n<p>Some of this has already been addressed above, but let me point out a few things.</p>\n<ol>\n<li>From my experience newcomers (especially students) using Lean try to use tactics in all kinds of ways that don't work. For instance, they use <code>simp</code> when they mean <code>norm_num</code>, they try to <code>rw</code> with implications, they think <code>simp</code> will solve anything and everything they deem \"simple\", and all kinds of other problems. So, I could argue that these are \"human nature\", but doing so would lead to scope creep on the part of all these various tactics. This could make them unusably slow, or blur the boundaries between them. This is not good for the ecosystem. Instead, users just need to spend time learning. If they think one tactic is going to save them from any mess, they are sorely mistaken.</li>\n<li>As above, beginners just need to spend time learning, and that's a nontrivial problem; learning takes time and effort. Of course, we want to ease the transition where it makes sense, but I think here more <em>automation</em> is key, not necessarily more <em>lemmas</em>. (Indeed, more lemmas can make searching <em>harder</em>, not easier.)</li>\n<li>In stark contrast to your point that users should be looking for lemmas and not reaching for tactics, <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>'s course / textbook aimed at introducing students to proof takes the exact opposite approach. She has as an explicit goal that students should <em>never</em> need to go searching the library for some lemma, and instead should reach for automation (some of it expressly designed for her course), and she teaches them how to use all of those tactics. Of course, at <em>some</em> point, users will need to appeal to existing theorems, but I think her approach shows that it has the potential to be much later than one might expect. Moreover, by the time they get to that point, they should be reasonably proficient at using Lean and its various tactics, so they won't need to reach for tools like <code>exact?</code> all the time.</li>\n</ol>",
        "id": 441119812,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1716932630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441119812\">said</a>:</p>\n<blockquote>\n<p>Some of this has already been addressed above, but let me point out a few things.</p>\n</blockquote>\n<p>Interesting perspective; thanks for sharing!</p>",
        "id": 441121639,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716933517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441051226\">said</a>:</p>\n<blockquote>\n<p>If you think mathlib PRs take time, check out the batteries queue. We are clearly beginning  to hit scale problems</p>\n</blockquote>\n<p>Batteries is currently suffering a severe staffing problem re: maintenance. Unfortunately I don't have the time to organize the \"hiring process\" for new maintainers either :(</p>",
        "id": 441127219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716936843
    },
    {
        "content": "<p>At least, I can review <a href=\"https://github.com/leanprover-community/batteries/pull/809\">batteries#809</a>. But I also have to do other work.</p>",
        "id": 441130786,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1716938829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441052378\">said</a>:</p>\n<blockquote>\n<p>For the two lemmas that are pointed out by Martin, I believe something else could be useful: a stackoverflow-like wiki of “how to do this in Lean?”.  <br>\nLemmas that are direct application of a mathlib mechanism are unlikely to be added to mathlib, probably because the library won't be searchable, there will be tons of ways to do simple things. Rather, we need, and especially newcomers need a place where simple stuff is solved, with explanations and pointers.<br>\n(I don't believe that stackoverflow is now the good place to collect this.)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> I believe this is one of the most interesting suggestions of the whole thread, but I wonder why you think that stackoverflow is not the right place. You mean that the \"general\" stackoverflow is not, or that something like LeanOverflow/MathlibOverflow would still not be the right place?</p>",
        "id": 441188533,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1716970258
    },
    {
        "content": "<p>Perhaps worth noting that the proof assistant stack exchange seems to be struggling to meet the activity bar; if pursuing that platform to collect information is of interest, it would be better to do so sooner rather than later</p>",
        "id": 441189200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716970502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441052378\">said</a>:</p>\n<blockquote>\n<p>Lemmas that are direct application of a mathlib mechanism are unlikely to be added to mathlib, probably because the library won't be searchable, there will be tons of ways to do simple things.</p>\n</blockquote>\n<p>I have a different opinion. If there are tons of ways to do simple things, then the first thing users try is more likely to succeed.</p>\n<p>I think that better than educating the users how to use our tool is to make our tool so that it can be used without being educated.</p>",
        "id": 441189614,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716970661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441189200\">said</a>:</p>\n<blockquote>\n<p>Perhaps worth noting that the proof assistant stack exchange seems to be struggling to meet the activity bar; if pursuing that platform to collect information is of interest, it would be better to do so sooner rather than later</p>\n</blockquote>\n<p>Right, I have been wondering whether the simultaneous presence of several proof assistants was partly to blame for this state of affairs.</p>",
        "id": 441190017,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1716970797
    },
    {
        "content": "<p>The issue with SO, for me, is its behavior wrt generating AI, in particular the fact that they own everything which is on the website and resell it.</p>",
        "id": 441209000,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1716977808
    },
    {
        "content": "<p>Would it be possible to have a stream here on zulip where people can point to their stuff and add \"tags\", so that zulips search engine can be used to find them ? A sort of \"Here's code for X\". </p>\n<p>I'll take Yael's <a href=\"https://github.com/YaelDillies/LeanAPAP\">APAP repo</a> as an example, though I don't know how much of it has been brought to mathlib. A post pointing to it might look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Arithmetic</span><span class=\"w\"> </span><span class=\"n\">Progressions</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">Almost</span><span class=\"w\"> </span><span class=\"n\">Periodicity</span>\n<span class=\"n\">Link</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">YaelDillies</span><span class=\"bp\">/</span><span class=\"n\">LeanAPAP</span>\n\n<span class=\"n\">Content</span><span class=\"w\"> </span><span class=\"n\">tags</span><span class=\"o\">:</span>\n<span class=\"n\">Kelley</span><span class=\"bp\">-</span><span class=\"n\">Meka</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">Roth</span><span class=\"w\"> </span><span class=\"n\">numbers</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">discrete</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">difference</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">convolution</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">discrete</span><span class=\"w\"> </span><span class=\"n\">Lp</span><span class=\"w\"> </span><span class=\"n\">norms</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">discrete</span><span class=\"w\"> </span><span class=\"n\">Fourier</span><span class=\"w\"> </span><span class=\"n\">transform</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Marcinkiewicz</span><span class=\"bp\">-</span><span class=\"n\">Zygmund</span><span class=\"w\"> </span><span class=\"n\">inequality</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">...</span>\n\n<span class=\"n\">API</span><span class=\"w\"> </span><span class=\"n\">tags</span><span class=\"o\">:</span>\n<span class=\"n\">Indicator</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"n\">density</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">WithLp</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"n\">dual</span><span class=\"w\"> </span><span class=\"n\">embedding</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">...</span>\n</code></pre></div>\n<p>I am not familiar with that project, so there is a lot that could be added in terms of tags.</p>\n<p>The point is that one would simply write a verbose version of the major topics or lemmas and definitions of ones files as tags. People exploring the project could add tags as responses in a thread (topic), if they would have liked to see them. The worst that could happen when using this search method is that you look at project API that has already been brought to mathlib. Assuming users have checked mathlib or used loogle or moogle before trying this method, this would only result in a small waste of time, which is, in my opinion, better then rewriting existing code.</p>",
        "id": 441291775,
        "sender_full_name": "Yves Jäckle",
        "timestamp": 1717006594
    },
    {
        "content": "<p>This could easily be part of reservoir.</p>",
        "id": 441292474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717006886
    },
    {
        "content": "<p>I think this would be a useful value-add on top of reservoir, that is, a curated \"most useful projects in lean\" list independent of reservoir's \"projects with a pulse\" list</p>",
        "id": 441294628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717007744
    },
    {
        "content": "<p>But it could certainly be presented from within reservoir, modulo the question of who is doing the curating</p>",
        "id": 441294751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717007779
    },
    {
        "content": "<p>What is <code>Mathlib++</code> supposed to add over a collection of separate repositories with proper dependencies?</p>\n<p>One of the goals of <code>Mathlib</code> is to make sure all parts work together, to avoid duplication and fragmentations. I can see <code>Mathlib++</code> with the goal of this and only this (for example, suboptimal proofs are fine). But for this goal, perhaps something like scala's <em>community build</em> will work. </p>\n<p>Concretely, I suggest:</p>\n<ul>\n<li>Have a repository that just has <code>Mathlib</code> and a bunch of other repositories (with concrete tags) as dependencies, plus CI to make sure things are fine.</li>\n<li>Some scrutiny to minimize duplication.</li>\n<li>It is the responsibility of each repo to have a version for each stable toolchain and the corresponding <code>Mathlib</code>. Failing this the repo is removed.</li>\n</ul>",
        "id": 441373352,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1717041843
    },
    {
        "content": "<p>One thing to consider is how we can make it possible for the community to step in to keep projects up to date if the original author is (temporarily) unavailable to take PRs</p>",
        "id": 441381067,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717045884
    },
    {
        "content": "<p>PRs with a pre-specified keyword in the name that keep the project up to date could be checked by CI and flagged as \"official\" fix, without being merged.</p>",
        "id": 441397538,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1717053480
    },
    {
        "content": "<p>My take from the discussion so far is that everything valuable will be eventually covered by Reservoir, and that Mathlib++ itself as discussed here only adds negative value (by actively encouraging poor quality work).</p>",
        "id": 441400308,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717054497
    },
    {
        "content": "<p>I think a <em>great</em> idea would be for someone to volunteer to maintain a \"SupLean\" repository, which aims to <code>require</code>/<code>import</code> everything on Reservoir meeting some quality/popularity threshold, and reports back to project maintainers when they have made choices that make it impossible to import everything simultaneously. Then either users or a web service could run <code>exact?</code> in this \"import everything\" file.</p>",
        "id": 441400514,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717054591
    },
    {
        "content": "<p>Hopefully this could even be automated, with some tooling identifying pairs of projects in the collection set that can't be simultaneously imported.</p>",
        "id": 441400574,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717054627
    },
    {
        "content": "<p>(I am very keen to namespace all of Mathlib, and I think this would be a prerequisite for something like this working at all.)</p>",
        "id": 441400630,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717054652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441400308\">said</a>:</p>\n<blockquote>\n<p>Mathlib++ itself as discussed here only adds negative value (by actively encouraging poor quality work).</p>\n</blockquote>\n<p>I wouldn't say I am \"actively encouraging poor quality work\".<br>\nIf anything, it will be \"actively collecting poor quality work\".<br>\nI believe it is almost always better to have a messy proof with a lot of room for improvement than not having the lemma proved at all.</p>",
        "id": 441401082,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717054828
    },
    {
        "content": "<p>I think we all can agree that Mathlib++ will not be necessary for collaboration on a larger scale.<br>\nWe just need a mechanism that will allow users to discover \"the lemma you want has been already proved; you can import it here\".</p>",
        "id": 441401636,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717055050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441401082\">said</a>:</p>\n<blockquote>\n<p>I wouldn't say I am \"actively encouraging poor quality work\".<br>\nIf anything, it will be \"actively collecting poor quality work\".</p>\n</blockquote>\n<p>I don't think these are meaningfully different. If there's a place to collect them, people who don't want to put forth the effort / time to contribute to Mathlib will be incentivized to add poor quality things to this repo. Without this, they may be incentivized to contribute to Mathlib to avoid the code rotting.</p>",
        "id": 441401660,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1717055063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441401660\">said</a>:</p>\n<blockquote>\n<p>Without this, they may be incentivized to contribute to Mathlib to avoid the code rotting.</p>\n</blockquote>\n<p>Here I would like to return to the first sentence of the whole thread:<br>\n\"There are many lemmas that would be potentially useful for Mathlib users but not for Mathlib developers.\"<br>\nWhere will these lemmas go so that users can find them?</p>",
        "id": 441402082,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717055228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441400514\">said</a>:</p>\n<blockquote>\n<p>I think a <em>great</em> idea would be for someone to volunteer to maintain a \"SupLean\" repository, which aims to <code>require</code>/<code>import</code> everything on Reservoir meeting some quality/popularity threshold, and reports back to project maintainers when they have made choices that make it impossible to import everything simultaneously. Then either users or a web service could run <code>exact?</code> in this \"import everything\" file.</p>\n</blockquote>\n<p>Sounds great, indeed!</p>\n<p>Do you think we will have a tool that will allow a Lean v4.8.0 project to import a Lean v4.6.0 project?</p>",
        "id": 441403485,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717055824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441400630\">said</a>:</p>\n<blockquote>\n<p>(I am very keen to namespace all of Mathlib, and I think this would be a prerequisite for something like this working at all.)</p>\n</blockquote>\n<p>This is still completely unrealistic if</p>\n<ol>\n<li>doc-search still shows the fully qualified name of lemmas</li>\n<li>Mathlib still contains super long namespace names like <code>CategoryTheory</code>, <code>MeasureTheory</code> or <code>OmegaCompletePartialOrder</code></li>\n</ol>",
        "id": 441406766,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717057127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441400630\">said</a>:</p>\n<blockquote>\n<p>(I am very keen to namespace all of Mathlib, and I think this would be a prerequisite for something like this working at all.)</p>\n</blockquote>\n<p>This is one of the things I don't like hearing but cannot argue against.<br>\nDeep down I know you are right.<br>\nAt the same time, I don't want to have all the boilerplate.</p>",
        "id": 441407652,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717057467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441403485\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441400514\">said</a>:</p>\n<blockquote>\n<p>I think a <em>great</em> idea would be for someone to volunteer to maintain a \"SupLean\" repository, which aims to <code>require</code>/<code>import</code> everything on Reservoir meeting some quality/popularity threshold, and reports back to project maintainers when they have made choices that make it impossible to import everything simultaneously. Then either users or a web service could run <code>exact?</code> in this \"import everything\" file.</p>\n</blockquote>\n<p>Sounds great, indeed!</p>\n</blockquote>\n<p>This is actually the same idea <a href=\"#narrow/stream/113488-general/topic/Reservoir.20search/near/441017748\">I suggested in the previous topic</a>, but you stated why you don't want to do it, and started this topic. What's changed?</p>\n<p>In priciple this can be easily implemented automatically as now we have lakefile.toml. The missing piece is an API to query reservior to get the projects that pass the build in recent toolchains.</p>",
        "id": 441419938,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717061902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441419938\">said</a>:</p>\n<blockquote>\n<p>What's changed?</p>\n</blockquote>\n<p>First I misunderstood your proposal, then I misjudged.</p>\n<p>As for the decision Mathlib++ vs Sink project, my opinion will probably depend on whether we can import projects that use different versions of Lean (and Mathlib).</p>",
        "id": 441421198,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717062360
    },
    {
        "content": "<p>If you actually want to use the results in those projects, you're going to need them on the same versions anyway</p>",
        "id": 441421562,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717062484
    },
    {
        "content": "<p>The idea is to use the same toolchain to import them. It's reservior's goal to help tracking  and somewhat incentivizing the maintainers of Lean packages to build in the latest toolchain.</p>\n<p>The automatic bump script in the <code>SupLean</code> project could bump Lean versions in the Lean rc version stage, check if all already-required projects pass in the latest toolchain, if not, open an issue and gently ping the maintainer. Hopefully this process could make them all build in the latest <em>stable</em> toolchains, then <code>SupLean</code> would at least be able to work for each stable Lean version.</p>",
        "id": 441424806,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717063714
    },
    {
        "content": "<p>Before these package build in the latest toolchain, they could be automatically removed from the <code>SupLean</code> project. And when they build again, <code>SupLean</code> will add them back, so <code>SupLean</code> will alway have the complete set of packages that work for the chosen toolchain, available to a <code>exact?</code> query.</p>\n<p>Ideally, to improve the stability, a package that passed build for a toolchain but failed in a later commit will not be removed, but to fix to the commit that works for the toolchain, until it has a newer commit that builds on the latest toolchain. This might require extra support from reservior query API.</p>",
        "id": 441425762,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717064090
    },
    {
        "content": "<p>IMHO, the <code>SupLean</code> idea is more practical than <code>Mathlib++</code> because the former is decentralized and automatable in nature, and the latter is a centralized non-official repo, manually maintained, so it would diverge maintenance efforts, contributor efforts, and might not be sustainable.</p>",
        "id": 441426932,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717064542
    },
    {
        "content": "<p>Someone could start on SupLean right away. Just pick half a dozen down-stream of Mathlib projects, and worry about automating the list once Reservoir is a bit more ready for prime time.</p>",
        "id": 441429199,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717065423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441429199\">said</a>:</p>\n<blockquote>\n<p>Someone could start on SupLean right away. </p>\n</blockquote>\n<p>All right, I'll do it.</p>",
        "id": 441429585,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717065607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441421562\">said</a>:</p>\n<blockquote>\n<p>If you actually want to use the results in those projects, you're going to need them on the same versions anyway</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> has some insight into dependencies and versions. Can you please share it here?</p>",
        "id": 441430052,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717065838
    },
    {
        "content": "<p>/poll What should be the name of the project that imports other projects?<br>\nSupLean<br>\nLeanSup<br>\nLeanTop<br>\nLeanSink</p>",
        "id": 441430456,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717065995
    },
    {
        "content": "<p>It is not a huge insight so much as an observation that sooner or later some form of version numbering and dependency management will be needed. Further that exact toolchain matching may not be necessary. But all this discussion already happened in the middle of last year. No point rehashing it.</p>",
        "id": 441430853,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717066144
    },
    {
        "content": "<p>I think <code>Sup</code> in <code>SupLean</code> means <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sup#doc\">docs#Sup</a>, no need for a <code>LeanSup</code> variant.</p>",
        "id": 441431077,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717066219
    },
    {
        "content": "<p>The other thing is, no matter what you call this project, it is going to be a huge and frustrating maintenance nightmare to chase after people to keep their projects up to date.</p>",
        "id": 441431229,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717066280
    },
    {
        "content": "<p>Currently reservoir tracks which project build against which toolchain</p>",
        "id": 441431487,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717066364
    },
    {
        "content": "<p>Fortunately, I am dumb enough to jump head-first into it.</p>",
        "id": 441431545,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717066392
    },
    {
        "content": "<p>So people make their informed choices. They can fork the projects they wish to use an updated version of and so on.</p>",
        "id": 441431558,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717066397
    },
    {
        "content": "<p>Note that we had automated version branches in Lean 3 using a script. It would be great to restore that</p>",
        "id": 441431561,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717066400
    },
    {
        "content": "<p>Version branches help for lean versions, but not downstream projects with mathlib versions</p>",
        "id": 441431655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717066438
    },
    {
        "content": "<p>Encouraging downstream projects to bump via a mathlib tagged commit would probably go a long way</p>",
        "id": 441431857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717066507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441431545\">said</a>:</p>\n<blockquote>\n<p>Fortunately, I am dumb enough to jump head-first into it.</p>\n</blockquote>\n<p>Consider the utility of this for the end user. What incentive do I have to use your super lean library which, with the promised cloud caching on reservoir, will simply fill up my storage.</p>",
        "id": 441431965,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717066556
    },
    {
        "content": "<p>I would be surprised if it uses up more than twice the storage of mathlib</p>",
        "id": 441432087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717066595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441431857\">said</a>:</p>\n<blockquote>\n<p>Encouraging downstream projects to bump via a mathlib tagged commit would probably go a long way</p>\n</blockquote>\n<p>Where does that leave batteries dependent projects</p>",
        "id": 441432120,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717066609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441432087\">said</a>:</p>\n<blockquote>\n<p>I would be surprised if it uses up more than twice the storage of mathlib</p>\n</blockquote>\n<p>As I understand it, the FRO has much grander goals.</p>",
        "id": 441432200,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717066641
    },
    {
        "content": "<p>Also Lean Copilot takes up 10GB</p>",
        "id": 441432221,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717066652
    },
    {
        "content": "<p>That's 2.5x Mathlib already</p>",
        "id": 441432259,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717066667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441431965\">said</a>:</p>\n<blockquote>\n<p>What incentive do I have to use your super lean library which, with the promised cloud caching on reservoir, will simply fill up my storage.</p>\n</blockquote>\n<p>For me, storage is cheaper than my time I need to reprove lemmas that other Lean users proved.</p>",
        "id": 441432441,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717066730
    },
    {
        "content": "<p>One of two things is going to happen:</p>\n<ol>\n<li>You don't have to re-prove anything. You can already just import their project.</li>\n<li>You are going to have to update the proof because the author can't be reached or bothered. Because you will be maintaining it, this process might have to done over and over</li>\n</ol>\n<p>So, depending on the repo and the lemma, you either haven't really solved the re-proving problem, or it doesn't even exist</p>",
        "id": 441432814,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717066865
    },
    {
        "content": "<p>You are trying to solve a tooling issue with a non-tooling fix. With toolchain and dependency management that should/hopefully will be solved in lake and reservoir.</p>",
        "id": 441433076,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717066953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441432200\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441432087\">said</a>:</p>\n<blockquote>\n<p>I would be surprised if it uses up more than twice the storage of mathlib</p>\n</blockquote>\n<p>As I understand it, the FRO has much grander goals.</p>\n</blockquote>\n<p>Sure, but so does mathlib. In a previous discussion I estimated that a quarter of all extant public lean code is in mathlib, and IIRC Mac measured it and it was even more, like 30% or so. It's an interesting metric to track, since it measures the extent of decentralization in the lean world</p>",
        "id": 441433079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717066955
    },
    {
        "content": "<p>My guess is that in the past 5 or so months this percentage has been increasing, not decreasing, although I'm well aware the FRO would like the needle to tip the other direction. But that's just speculation, we need more data to say for sure (and maybe reservoir could start collecting it?)</p>",
        "id": 441433369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717067062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441432221\">said</a>:</p>\n<blockquote>\n<p>Also Lean Copilot takes up 10GB</p>\n</blockquote>\n<p>Note that in the above metrics I'm counting lean code, not model weights. And it would be really silly to cache this as build data, since it's just downloading the data from somewhere else</p>",
        "id": 441434063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717067276
    },
    {
        "content": "<p>So 70% of lean code isn't mathlib? It has been less than a year since the port. That's pretty impressive.</p>",
        "id": 441434323,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717067376
    },
    {
        "content": "<p>I don't think it's ever been more than 50%</p>",
        "id": 441434482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717067431
    },
    {
        "content": "<p>there are tons of student projects and such on github</p>",
        "id": 441434496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717067443
    },
    {
        "content": "<p>plus there are a few high-profile projects outside mathlib</p>",
        "id": 441434553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717067474
    },
    {
        "content": "<p>I am waiting for the wave of \"implement the language in lean\" similar to \"implement it all in rust\"</p>",
        "id": 441434558,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717067476
    },
    {
        "content": "<p>Lean 4 is still very very young</p>",
        "id": 441434584,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717067490
    },
    {
        "content": "<p>? That wave came and went</p>",
        "id": 441434596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717067495
    },
    {
        "content": "<p>Did something come of the automated mathlib bumping github action?</p>",
        "id": 441434612,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717067501
    },
    {
        "content": "<p>dunno if that's on the lean-action roadmap cc: <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span></p>",
        "id": 441434813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717067589
    },
    {
        "content": "<p>Anyway, to return to the point, <span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> : I see this as an extremely laborious and thankless undertaking with few long term rewards. If the promised version management and cloud caching lands even within two years from now, and lake becomes more and more like cargo, people will use that over one large super project import.</p>",
        "id": 441435156,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717067736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441434813\">said</a>:</p>\n<blockquote>\n<p>dunno if that's on the lean-action roadmap cc: <span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span></p>\n</blockquote>\n<p>No, someone on here promised to create it because they didn't like me updating the old lean 3 one</p>",
        "id": 441435264,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717067771
    },
    {
        "content": "<p>Also, I wonder what fraction of mathlib dependent projects could very well work with something like a Mathlib-lite library</p>",
        "id": 441435583,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717067886
    },
    {
        "content": "<p>Most can, of course. The issue is that everyone has a different idea of what the subset is</p>",
        "id": 441435673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717067920
    },
    {
        "content": "<p>What I was actually suggesting was not really project that imports everything; that might be useful as an 'integration test' and probably run by the FRO, it's also a maintenance nightmare (or more likely, broken all the time). Rather, I was thinking something more like <a href=\"https://github.com/rust-unofficial/awesome-rust\">https://github.com/rust-unofficial/awesome-rust</a> : a wiki page with a bunch of links to projects considered useful by someone with opinions</p>",
        "id": 441435824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717067979
    },
    {
        "content": "<p>and no attempt to actually integrate them or keep them up to date</p>",
        "id": 441435940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717068004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441435673\">said</a>:</p>\n<blockquote>\n<p>Most can, of course. The issue is that everyone has a different idea of what the subset is</p>\n</blockquote>\n<p>Coq's stdpp could be a useful guideline</p>",
        "id": 441436172,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717068101
    },
    {
        "content": "<p>that's literally batteries</p>",
        "id": 441436266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717068126
    },
    {
        "content": "<p>Surely it isn't there yet, but it could be.</p>",
        "id": 441436351,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717068161
    },
    {
        "content": "<p>what is 'it'?</p>",
        "id": 441436385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717068176
    },
    {
        "content": "<p>Batteries</p>",
        "id": 441436400,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717068184
    },
    {
        "content": "<p>Note that lean core is way more featureful than the coq stdlib, so there is less need for batteries to have a ton of things in it</p>",
        "id": 441436523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717068229
    },
    {
        "content": "<p>or rather, it used to have more things but they are now in core</p>",
        "id": 441436570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717068242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441435156\">said</a>:</p>\n<blockquote>\n<p>Anyway, to return to the point, <span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> : I see this as an extremely laborious and thankless undertaking with few long term rewards. If the promised version management and cloud caching lands even within two years from now, and lake becomes more and more like cargo, people will use that over one large super project import.</p>\n</blockquote>\n<p>SupLean will be a temporary solution.</p>\n<p>I will be more than happy if, one day (the sooner the better), we will have tools that will make SupLean obsolete.</p>",
        "id": 441436651,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717068255
    },
    {
        "content": "<p>Martin, I think you should try it, if only to see why it's so difficult</p>",
        "id": 441436755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717068289
    },
    {
        "content": "<p>I would be surprised if you can get it to compile</p>",
        "id": 441436809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717068310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441434496\">said</a>:</p>\n<blockquote>\n<p>there are tons of student projects and such on github</p>\n</blockquote>\n<p>I've heard of a guy named Pareto...</p>",
        "id": 441437142,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717068417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441436523\">said</a>:</p>\n<blockquote>\n<p>Note that lean core is way more featureful than the coq stdlib, so there is less need for batteries to have a ton of things in it</p>\n</blockquote>\n<p>I'd like to use tactics like nlinarith, field_simp, ring, set, zify, qify etc without downloading Mathlib cache. It is mostly just the tactics and basic math data types like naturals, rationals, and reals.</p>",
        "id": 441437261,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717068456
    },
    {
        "content": "<p>I would too. This is a lake issue that should be fixed</p>",
        "id": 441437354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717068483
    },
    {
        "content": "<p>I think it might be on Mac's agenda for this month or next IIRC?</p>",
        "id": 441437521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717068548
    },
    {
        "content": "<p>Oh that's a lot sooner than the safe two years estimate I had in mind. Martin there is a really short window of utility for this superlibrary then.</p>",
        "id": 441438096,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717068742
    },
    {
        "content": "<blockquote>\n<p>I'd like to use tactics like nlinarith, field_simp, ring, set, zify, qify etc without downloading Mathlib cache.</p>\n</blockquote>\n<p>Isn't this solvable today with <code>lake exe cache get YourFile</code>?</p>",
        "id": 441438151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717068761
    },
    {
        "content": "<p>Which should download only the cache for the files that YourFile imports</p>",
        "id": 441438215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717068782
    },
    {
        "content": "<p>In Mathlib. I think Martin wants more</p>",
        "id": 441438275,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717068807
    },
    {
        "content": "<p>BTW, Martin, do you have a plan for cloud caches for this super library? Without that, building your projects depending on them is going to be expensive and time-consuming.</p>",
        "id": 441438856,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717069015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441438151\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'd like to use tactics like nlinarith, field_simp, ring, set, zify, qify etc without downloading Mathlib cache.</p>\n</blockquote>\n<p>Isn't this solvable today with <code>lake exe cache get YourFile</code>?</p>\n</blockquote>\n<p>Yes, the improvements in question (essentially upstreaming lake exe cache) would mean that other components like the server and <code>lake build</code> transparently use this version of <code>cache get</code> instead of the completionist one</p>",
        "id": 441439346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717069217
    },
    {
        "content": "<p><code>lake build</code> doesn't use the cache at all, does it?</p>",
        "id": 441439411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717069242
    },
    {
        "content": "<p>I think this is the main issue with using <code>lake exe cache get YourFile</code> in practice, you have to calibrate it based on the imports of your file</p>",
        "id": 441439458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717069262
    },
    {
        "content": "<p>that's correct, it doesn't use the cache</p>",
        "id": 441439489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717069279
    },
    {
        "content": "<p>How big is the cache with your import is <code>Mathlib.Tactic</code>?</p>",
        "id": 441439546,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717069302
    },
    {
        "content": "<p>try it and see</p>",
        "id": 441439575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717069317
    },
    {
        "content": "<p>Exactly as big as it needs to be for you to use every tactic that exists</p>",
        "id": 441439663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717069335
    },
    {
        "content": "<p>note that <code>Mathlib.Tactic</code> is also completionist, you should probably import the specific tactics you want</p>",
        "id": 441439683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717069342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441431857\">said</a>:</p>\n<blockquote>\n<p>Encouraging downstream projects to bump via a mathlib tagged commit would probably go a long way</p>\n</blockquote>\n<p>That's what I do with PFR (and APAP when I bump PFR)</p>",
        "id": 441439764,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717069386
    },
    {
        "content": "<p>hopefully that's what every downstream project should be doing, except those working closely with some PR sequence (like FLT I think)</p>",
        "id": 441439869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717069434
    },
    {
        "content": "<p>Well, APAP also works closely with some PR sequence. It's just that I also bump when a new Lean version comes along</p>",
        "id": 441440355,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717069629
    },
    {
        "content": "<p>Actually, I must have been doing it wrong since I update to the new rc1 rather than the stable <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 441440531,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717069706
    },
    {
        "content": "<p>I also do not tag the bump commit. Mind giving some advice on what I should be doing, Mario?</p>",
        "id": 441440583,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717069733
    },
    {
        "content": "<p>I think you should bump to the stable and also tag your project if you are also concerned about projects downstream of APAP</p>",
        "id": 441440777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717069826
    },
    {
        "content": "<p>What does \"bump to the stable\" mean in terms of <code>lake update</code> and in terms of mathlib version?</p>",
        "id": 441440851,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717069862
    },
    {
        "content": "<p>There should be a tagging convetion that reservior recognizes (and to show which tag/commit builds on which toolchain) then it would naturally become everyone's practice.</p>",
        "id": 441440864,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717069871
    },
    {
        "content": "<p>Yeah, my question basically boils down to whether such a convention already exists</p>",
        "id": 441440943,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717069905
    },
    {
        "content": "<p>On the tag/branch for that stable, you should use <code>require mathlib \"...\" @ \"v4.37.0\"</code> and then <code>lake update</code></p>",
        "id": 441441062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717069944
    },
    {
        "content": "<p>I believed something like <code>lake update stable</code> existed? Is this still a daydream?</p>",
        "id": 441441157,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717069989
    },
    {
        "content": "<p>It does</p>",
        "id": 441441194,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717070007
    },
    {
        "content": "<p><code>lake update foobar</code> exists, but it will update the dependency <code>foobar</code></p>",
        "id": 441441226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717070019
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ws8TsVFwJdjyxDPQCYi2OTmG/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ws8TsVFwJdjyxDPQCYi2OTmG/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ws8TsVFwJdjyxDPQCYi2OTmG/image.png\"></a></div><p>It doens't exist yet. But reservior remembers the commit that passes.</p>",
        "id": 441441236,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717070023
    },
    {
        "content": "<p>You change the version string to \"stable\" and call lake update</p>",
        "id": 441441248,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717070036
    },
    {
        "content": "<p>Change the mathlib require line in lakefile.lean to  <code>require mathlib \"...\" @ \"stable\"</code>. Call <code>lake update</code></p>",
        "id": 441441602,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717070178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441441062\">said</a>:</p>\n<blockquote>\n<p>On the tag/branch for that stable, you should use <code>require mathlib \"...\" @ \"v4.37.0\"</code> and then <code>lake update</code></p>\n</blockquote>\n<p>I use a script to change the lean-toolchain file according to the branch name, and use the following to require Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">leanVersion</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s!</span><span class=\"s2\">\"v{Lean.versionString}\"</span>\n\n<span class=\"n\">require</span><span class=\"w\"> </span><span class=\"n\">mathlib</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">git</span>\n<span class=\"w\">  </span><span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"w\"> </span><span class=\"n\">leanVersion</span>\n</code></pre></div>",
        "id": 441441684,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717070219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441441062\">said</a>:</p>\n<blockquote>\n<p>On the tag/branch for that stable, you should use <code>require mathlib \"...\" @ \"v4.37.0\"</code> and then <code>lake update</code></p>\n</blockquote>\n<p>And where should I do that? On master? on a new branch called <code>stable</code>?</p>",
        "id": 441441887,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717070295
    },
    {
        "content": "<p>Does Reservoir look at non-master branches of projects?</p>",
        "id": 441441923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717070316
    },
    {
        "content": "<p>That's how I can test which version did my project fail, when I wake up a few months later, and there are many rc/stable versions happened.</p>",
        "id": 441441943,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717070325
    },
    {
        "content": "<p>I set up a fresh <code>math</code> project to experiment with <code>lake exe cache get YourFile</code>.  The Sample/Basic.lean contained only one import <code>import Mathlib.Tactic</code>.</p>\n<p>The project is called <code>Sample</code>. There was an \"uncaught exception\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">Programs</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Sample</span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">lake</span><span class=\"w\"> </span><span class=\"n\">exe</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">Sample</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n\n<span class=\"n\">Attempting</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">download</span><span class=\"w\"> </span><span class=\"mi\">3848</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Downloaded</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">3848</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">attempted</span><span class=\"w\"> </span><span class=\"mi\">3848</span><span class=\"bp\">/</span><span class=\"mi\">3848</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"n\">success</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span><span class=\"w\"> </span><span class=\"mi\">4570</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">4576</span><span class=\"w\"> </span><span class=\"n\">ms</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sample</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">manifest</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">creating</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">scratch</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">mathlib</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">.</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">batteries</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">batteries</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">batteries'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Qq</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">quote4</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">aesop</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">proofwidgets</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets4</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Cli</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">cli</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">importGraph</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"kn\">import</span><span class=\"bp\">-</span><span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">importGraph'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">mathlib</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">update</span><span class=\"w\"> </span><span class=\"n\">hooks</span>\n<span class=\"n\">uncaught</span><span class=\"w\"> </span><span class=\"n\">exception</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Unknown</span><span class=\"w\"> </span><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">directory</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">Sample</span>\n</code></pre></div>",
        "id": 441442832,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717070653
    },
    {
        "content": "<p>The total space used was 4.1 G</p>",
        "id": 441442850,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717070664
    },
    {
        "content": "<p>that's because the post-update hook ran, which calls <code>lake exe cache get</code></p>",
        "id": 441442924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717070705
    },
    {
        "content": "<p>you can set the environment variable <code>MATHLIB_NO_CACHE_ON_UPDATE=1</code> to disable the hook when running lake commands that indirectly call it</p>",
        "id": 441442994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717070744
    },
    {
        "content": "<p>the uncaught exception is because you requested a file from the cache that does not exist in mathlib</p>",
        "id": 441443117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717070789
    },
    {
        "content": "<p>you need to request the root file(s) in mathlib that you are importing</p>",
        "id": 441443147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717070806
    },
    {
        "content": "<p>i.e. <code>Mathlib.Tactic</code> in this case</p>",
        "id": 441443194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717070830
    },
    {
        "content": "<p>Oh okay. I thought <code>YourFile</code> was a file from my project with its imports</p>",
        "id": 441443224,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717070840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441441236\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/3121/ws8TsVFwJdjyxDPQCYi2OTmG/image.png\">image.png</a></p>\n<p>It doens't exist yet. But reservior remembers the commit that passes.</p>\n</blockquote>\n<p>And they are recorded in the index repo e.g. <a href=\"https://github.com/leanprover/reservoir-index/blob/master/leanprover-community/batteries/builds.json\">https://github.com/leanprover/reservoir-index/blob/master/leanprover-community/batteries/builds.json</a></p>\n<p>Yay, no need for an extra API support, one can just work with the index repo.</p>",
        "id": 441444000,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717071179
    },
    {
        "content": "<p>Here's the output now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Sample</span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">MATHLIB_NO_CACHE_ON_UPDATE</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">lake</span><span class=\"w\"> </span><span class=\"n\">exe</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">mathlib</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">.</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">batteries</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">batteries</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">batteries'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Qq</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">quote4</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">aesop</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">proofwidgets</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets4</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Cli</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">cli</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">importGraph</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cloning</span><span class=\"w\"> </span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"kn\">import</span><span class=\"bp\">-</span><span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"bp\">'././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">importGraph'</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">Skipping</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"n\">files</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">depend</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">it</span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">files</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">download</span>\n<span class=\"n\">Decompressing</span><span class=\"w\"> </span><span class=\"mi\">2013</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1804</span><span class=\"w\"> </span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>Folder size : 2.1 GB. That's a massive improvement</p>",
        "id": 441444734,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717071418
    },
    {
        "content": "<p>Though I don't understand that warning</p>",
        "id": 441445038,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717071505
    },
    {
        "content": "<p>I'm very optimistic that <code>SupLean</code> with proper automation would not be a maintance nightmare. The use case is very limited though, so I personally would not invest time to implement it.</p>\n<p>But such a project should be feasible now, and become easier and easier to maintain until one day it no longer needs to exist thanks to tooling improvements in the ecosystem.</p>",
        "id": 441445166,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717071561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> : Reservoir remembers the last version the project builds with. Martin wants/needs it to work with the latest toolchain that mathlib works on. The reservoir index is definitely part of a better tooling solution. Either Martin needs to create a fork of each project and keep them updated or persistently remind project owners or maintainers to do this.</p>",
        "id": 441445347,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717071617
    },
    {
        "content": "<p>The reason I don't think <code>SupLean</code> would work is because you need all projects involved to be on the same toolchain, and even if there is a 90% chance that the average project has a version on that toolchain, that means that if you have 10+ projects then it's no longer likely to be possible to combine them</p>",
        "id": 441445979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717071858
    },
    {
        "content": "<p>The flaw in the plan is the cache</p>",
        "id": 441446031,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717071885
    },
    {
        "content": "<p>if you want 1000 lean projects to agree on a version the chances of this working are vanishingly small</p>",
        "id": 441446040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717071888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441445347\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> : Reservoir remembers the last version the project builds with. Martin wants/needs it to work with the latest toolchain that mathlib works on. The reservoir index is definitely part of a better tooling solution</p>\n</blockquote>\n<p>My goal aims a little bit lower. Helping the <code>exact?</code> users to figure out what's available in a few recent toolchains would be good enough. By a few recent toolchains I mean maybe the needed lemma doesn't build in the latest toolchain, but on 2 previous toolchains, the user then have found the projects that contains the needed lemma, that's already a success for Martin's goal.</p>",
        "id": 441446059,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717071898
    },
    {
        "content": "<p>unless you kick projects out according to whether they build, but then you will have to constantly change the list of projects every new version depending on who is on top of things</p>",
        "id": 441446138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717071933
    },
    {
        "content": "<p>And I don't see Martin's plan for a cloud cache for this super library yet. It requires cache to be upstreamed to lake and work in a less version constrained way. Without cloud caching, builds are going to take way too long.</p>",
        "id": 441446152,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717071938
    },
    {
        "content": "<p>I don't see what a cloud cache has to do with it</p>",
        "id": 441446260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717071970
    },
    {
        "content": "<p>If I import a super library</p>",
        "id": 441446278,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717071981
    },
    {
        "content": "<p>IIRC, reservior already has plans for cloud cache/release.</p>",
        "id": 441446293,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717071985
    },
    {
        "content": "<p>and most of it isn't cached</p>",
        "id": 441446299,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717071986
    },
    {
        "content": "<p>Why would you import the super library?</p>",
        "id": 441446317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717071998
    },
    {
        "content": "<p>Isn't that Martin's idea for Suplean?</p>",
        "id": 441446358,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717072016
    },
    {
        "content": "<p>I don't expect it to be any more than an integration test</p>",
        "id": 441446363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717072019
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4270\">lean4#4270</a></p>",
        "id": 441446394,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717072026
    },
    {
        "content": "<p><code>SupLean</code> only needs to fetch the packed artifacts.</p>",
        "id": 441446459,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717072056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441441887\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441441062\">said</a>:</p>\n<blockquote>\n<p>On the tag/branch for that stable, you should use <code>require mathlib \"...\" @ \"v4.37.0\"</code> and then <code>lake update</code></p>\n</blockquote>\n<p>And where should I do that? On master? on a new branch called <code>stable</code>?</p>\n</blockquote>\n<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>",
        "id": 441446585,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717072105
    },
    {
        "content": "<p>I consider it exactly a thought experiment of the integration test of a <code>Sup</code> of Lean packages, and I'm optimistic that in near future, more project will be able to agree on a few recent toolchains, no need to be the latest.</p>",
        "id": 441446738,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717072184
    },
    {
        "content": "<p>what are the version constraints for lean-toolchain to allow <code>lake pack/unpack</code> to work? Are they similar to Mathlib cache (viz. Project toolchain === Mathlib toolchain) <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> ?</p>",
        "id": 441446883,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717072226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441446585\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441441887\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441441062\">said</a>:</p>\n<blockquote>\n<p>On the tag/branch for that stable, you should use <code>require mathlib \"...\" @ \"v4.37.0\"</code> and then <code>lake update</code></p>\n</blockquote>\n<p>And where should I do that? On master? on a new branch called <code>stable</code>?</p>\n</blockquote>\n<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>\n</blockquote>\n<p>This needs a separate thread</p>",
        "id": 441447027,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717072299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441400514\">said</a>:</p>\n<blockquote>\n<p>I think a <em>great</em> idea would be for someone to volunteer to maintain a \"SupLean\" repository, which aims to <code>require</code>/<code>import</code> everything on Reservoir meeting some quality/popularity threshold, and reports back to project maintainers when they have made choices that make it impossible to import everything simultaneously. Then either users or a web service could run <code>exact?</code> in this \"import everything\" file.</p>\n</blockquote>\n<p>First experiment:<br>\n<a href=\"https://github.com/madvorak/sup-lean\">https://github.com/madvorak/sup-lean</a></p>\n<p>I tried to import these two projects at the same time:<br>\n<a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd</a><br>\n<a href=\"https://github.com/leanprover-community/flt-regular\">https://github.com/leanprover-community/flt-regular</a></p>\n<p>Build failed. It seems that the latter project requires <code>Fin.castIso</code> which was last week (re)moved in Mathlib.<br>\nShould I try picking a specific commit so that it builds?</p>",
        "id": 441447763,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717072553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441445038\">said</a>:</p>\n<blockquote>\n<p>Though I don't understand that warning</p>\n</blockquote>\n<p>What is this warning about?</p>\n<p>PS : I really like the reduction in space consumption to 2.1 GB from 4.1GB</p>",
        "id": 441447881,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717072590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> : This is just a glimpse of the kind  of versioning CSPs you will have to solve</p>",
        "id": 441447970,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717072628
    },
    {
        "content": "<p>Well, in the future, I may decide to import only those projects that will \"collaborate\" with me.</p>",
        "id": 441448117,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717072683
    },
    {
        "content": "<p>Trust the FRO. Trust Mac. The tooling will land soon.</p>",
        "id": 441448230,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717072733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441441923\">said</a>:</p>\n<blockquote>\n<p>Does Reservoir look at non-master branches of projects?</p>\n</blockquote>\n<p>I checked the Reservoir script, no. It indexes repos, then in build time, it just clones the default branch.</p>\n<p>Checking tags would also be time consuming, and easily exceeds Github API limits, so it might not scale.</p>",
        "id": 441448545,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717072813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441447763\">said</a>:</p>\n<blockquote>\n<p>Should I try picking a specific commit so that it builds?</p>\n</blockquote>\n<p>Yes, you can pick it according to the index, see <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441444000\">here</a>.</p>",
        "id": 441448766,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717072910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441447881\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441445038\">said</a>:</p>\n<blockquote>\n<p>Though I don't understand that warning</p>\n</blockquote>\n<p>What is this warning about?</p>\n<p>PS : I really like the reduction in space consumption to 2.1 GB from 4.1GB</p>\n</blockquote>\n<p>From the code it seems like it should accept either <code>Mathlib.Tactic</code> or <code>Mathlib/Tactic.lean</code>, but the error message suggests that the latter will work better</p>",
        "id": 441448894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717072947
    },
    {
        "content": "<p>Tracking specific commits and then commit chains is going to multiply the maintenance nightmares over just following the main branch.</p>",
        "id": 441448946,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717072970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441448117\">said</a>:</p>\n<blockquote>\n<p>Well, in the future, I may decide to import only those projects that will \"collaborate\" with me.</p>\n</blockquote>\n<p>This also means you need to import this suplean as opposed to just integration testing that Mario suggests. I hope you have plans for a cache.</p>",
        "id": 441449659,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717073234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441448894\">said</a>:</p>\n<blockquote>\n<p>From the code it seems like it should accept either <code>Mathlib.Tactic</code> or <code>Mathlib/Tactic.lean</code>, but the error message suggests that the latter will work better</p>\n</blockquote>\n<p>Yes this works without warnings. Maybe there is a bug with handling module names. The new storage consumption is still 2.1 GB which is a nice 50% reduction in size.</p>",
        "id": 441450828,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717073658
    },
    {
        "content": "<p>Just an idea, ignore if useless: what if you reduce this problem to branch management within the <code>mathlib</code> repository itself by cherry-picking commits and unifying them in a single/non-conflicting branch? This way you make use of the whole infra that's already set for <code>mathlib</code></p>\n<p>I mean, this is common practice in software development. You pick enough updates you want to merge on <code>main</code> next. This alternate branch is often called <code>dev</code></p>",
        "id": 441450915,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1717073700
    },
    {
        "content": "<p>The strategy is that <code>dev</code> contains relevant work, but not quite ready to be merged into <code>main</code> right away. But it's available for people to consciously use it if intended</p>",
        "id": 441451651,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1717073990
    },
    {
        "content": "<p>Just wrote a <a href=\"https://github.com/utensil/reservoir-index/blob/master/index_stats.py\">quick script</a> to see if the repos on reservior build on recent toolchains:</p>\n<p><a href=\"/user_uploads/3121/tcShZ-n4Ap15IW6BMro49_FV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tcShZ-n4Ap15IW6BMro49_FV/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/tcShZ-n4Ap15IW6BMro49_FV/image.png\"></a></div>",
        "id": 441453320,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717074549
    },
    {
        "content": "<p>I would say this is better than how I imagined.</p>",
        "id": 441454142,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717074805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441400630\">said</a>:</p>\n<blockquote>\n<p>(I am very keen to namespace all of Mathlib, and I think this would be a prerequisite for something like this working at all.)</p>\n</blockquote>\n<p>I hope this message doesn't get lost in the thread. This is worth a separate discussion. IMO namespacing mathlib is not avoidable if you want to interoperate with other projects.</p>",
        "id": 441454604,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717074954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441447763\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441400514\">said</a>:</p>\n<blockquote>\n<p>I think a <em>great</em> idea would be for someone to volunteer to maintain a \"SupLean\" repository, which aims to <code>require</code>/<code>import</code> everything on Reservoir meeting some quality/popularity threshold, and reports back to project maintainers when they have made choices that make it impossible to import everything simultaneously. Then either users or a web service could run <code>exact?</code> in this \"import everything\" file.</p>\n</blockquote>\n<p>First experiment:<br>\n<a href=\"https://github.com/madvorak/sup-lean\">https://github.com/madvorak/sup-lean</a></p>\n<p>I tried to import these two projects at the same time:<br>\n<a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd</a><br>\n<a href=\"https://github.com/leanprover-community/flt-regular\">https://github.com/leanprover-community/flt-regular</a></p>\n<p>Build failed. It seems that the latter project requires <code>Fin.castIso</code> which was last week (re)moved in Mathlib.<br>\nShould I try picking a specific commit so that it builds?</p>\n</blockquote>\n<p>try again</p>",
        "id": 441463817,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717077736
    },
    {
        "content": "<p>I think the most important goal here should be that nobody spends time on this idea except Martin if they really want to.</p>",
        "id": 441470358,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717079505
    },
    {
        "content": "<p>Martin, I think what would actually be <em>much</em> more useful to you than <code>SupLean</code> + <code>exact?</code> is for all (most?) reservoir projects to build a loogle cache, and then have a loogle search bar on the reservoir page that can search all packages. I think <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> may have already mentioned this above. It seems very useful, but probably will take some time to engineer.</p>",
        "id": 441477753,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1717081419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441292474\">said</a>:</p>\n<blockquote>\n<p>This could easily be part of reservoir.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441373352\">said</a>:</p>\n<blockquote>\n<p>What is <code>Mathlib++</code> supposed to add over a collection of separate repositories with proper dependencies?</p>\n</blockquote>\n<p>Echoing these -- I'm having trouble imagining what purpose Mathlib++ would serve that isn't served by reservoir.</p>\n<p>If you have need of a fact that is \"out of scope\" for mathlib, (because it's some esoteric or highly specialized theory) then that could be it's own repo. If you want a better way of finding lemmas, that's best served by a specialized search tool or wiki. Right?</p>",
        "id": 441483577,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1717082686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441446883\">said</a>:</p>\n<blockquote>\n<p>what are the version constraints for lean-toolchain to allow <code>lake pack/unpack</code> to work? Are they similar to Mathlib cache (viz. Project toolchain === Mathlib toolchain) <span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> ?</p>\n</blockquote>\n<p>What do you mean? <code>pack</code>/<code>unpack</code> just compress/uncompress a set of build artifacts. There are no compatibility concerns I can think of.</p>",
        "id": 441510620,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717088970
    },
    {
        "content": "<p>That is, right now,  it is just caling <code>tar</code>. The goal with these commands is to provide a standardized interface for this action that can eventually be upgraded / customized.</p>",
        "id": 441511054,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717089072
    },
    {
        "content": "<p>This reminds me of: <a href=\"https://uncenter.dev/posts/npm-install-everything/\">https://uncenter.dev/posts/npm-install-everything/</a></p>",
        "id": 441522243,
        "sender_full_name": "llllvvuu",
        "timestamp": 1717092408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441434813\">said</a>:</p>\n<blockquote>\n<p>dunno if that's on the lean-action roadmap cc: <span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span></p>\n</blockquote>\n<p>Yes, I think we'd like it to be. There is some technical question about combining cron actions into the existing lean-action, but I might leave that to <span class=\"user-mention\" data-user-id=\"699684\">@Austin Letson</span> to comment on what they think is the best approach.</p>",
        "id": 441566170,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717106140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441431857\">said</a>:</p>\n<blockquote>\n<p>Encouraging downstream projects to bump via a mathlib tagged commit would probably go a long way</p>\n</blockquote>\n<p>Note that both Batteries and Mathlib have regularly generated tags each time the move to a new RC or release toolchain.</p>",
        "id": 441566366,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717106187
    },
    {
        "content": "<p>They both also have <code>nightly-testing-YYYY-MM-DD</code> tags for every day that has a CI-grean nightly-testing branch.</p>",
        "id": 441566429,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717106211
    },
    {
        "content": "<p>There would be no obstacle to also adding <code>master-YYYY-MM-DD</code> tags daily if someone wanted finer granularity \"versions\".</p>",
        "id": 441566528,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717106240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441566366\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441431857\">said</a>:</p>\n<blockquote>\n<p>Encouraging downstream projects to bump via a mathlib tagged commit would probably go a long way</p>\n</blockquote>\n<p>Note that both Batteries and Mathlib have regularly generated tags each time the move to a new RC or release toolchain.</p>\n</blockquote>\n<p>I should have been clearer; I meant encouraging projects downstream of mathlib / batteries to follow suit, perhaps with a bot</p>",
        "id": 441571662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717108020
    },
    {
        "content": "<p>If <code>lake upgrade</code> could upgrade via every intermediate set of dependency tags, creating tags along the way, that would be handy (but probably our of scope, and certainly low priority)</p>",
        "id": 441571936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717108121
    },
    {
        "content": "<ul>\n<li><a href=\"https://linearlibrary.net\">linearlibrary.net</a></li>\n<li><a href=\"https://linearlibrary.com\">linearlibrary.com</a></li>\n<li><a href=\"https://mathlibplusplus.net\">mathlibplusplus.net</a></li>\n<li><a href=\"https://mathlibplusplus.net\">mathlibplusplus.com</a></li>\n<li><a href=\"https://mathlibplus.net\">mathlibplus.net</a></li>\n<li><a href=\"https://mathlibplus.net\">mathlibplus.com</a></li>\n<li><a href=\"https://linearlibrary.net\">suplean.net</a> (not up yet)</li>\n</ul>\n<p>Right now these redirect to <a href=\"http://linearlibrary.net\">linearlibrary.net</a>, where I've set up a jQuery terminal to connect to my VPS. I think it would be cool if these terminals got to be connected to the gits somehow.</p>",
        "id": 441586824,
        "sender_full_name": "E. Dean Young",
        "timestamp": 1717115259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441448545\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441441923\">said</a>:</p>\n<blockquote>\n<p>Does Reservoir look at non-master branches of projects?</p>\n</blockquote>\n<p>I checked the Reservoir script, no. It indexes repos, then in build time, it just clones the default branch.</p>\n<p>Checking tags would also be time consuming, and easily exceeds Github API limits, so it might not scale.</p>\n</blockquote>\n<p>Actually my comment was wrong, the Reservoir script does a full clone of the repo, so in principle it can check a tag matching the toolchain version, it's just a 1+1 operation, default+tag (and maybe fallback to earlier versions).</p>\n<p>The real question is, in other package ecosystems, downstream packages are tagged with their own version, not some toolchain version. How does these 2 versions interact?</p>\n<p>Now Lean is kind of moving faster than most Lean projects' release schedule (if there are any <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> ), so it's not a now-issue. But what if in future, a Lean project releases a few versions when Lean has only one release in the meanwhile, how does that work? (Maybe it's discussed before?)</p>",
        "id": 441605927,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717126032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441446738\">said</a>:</p>\n<blockquote>\n<p>I consider it exactly a thought experiment of the integration test of a <code>Sup</code> of Lean packages, and I'm optimistic that in near future, more project will be able to agree on a few recent toolchains, no need to be the latest.</p>\n</blockquote>\n<p>I have some more thoughts on this integration test idea. <code>SupLean</code> is an <code>import</code> integration test, it measures how many projects can work together in the same toolchain, and they can actually work together coherently without name/notation clashes etc.</p>\n<p>I'm well aware that now Lean package ecosystem is nowhere near this, and it's not a priority now, but still it's an interesting (a bit hypothetical) metric.</p>\n<p>Another observation is that there are many types of Lean projects, teaching repos, homework repos, example repos, general programming utility repos, formalization repos etc. , not all types of them should be working together, but maybe for at least the last 2 categories.</p>",
        "id": 441608152,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717127219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441477753\">said</a>:</p>\n<blockquote>\n<p>Martin, I think what would actually be <em>much</em> more useful to you than <code>SupLean</code> + <code>exact?</code> is for all (most?) reservoir projects to build a loogle cache, and then have a loogle search bar on the reservoir page that can search all packages. I think <span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> may have already mentioned this above. It seems very useful, but probably will take some time to engineer.</p>\n</blockquote>\n<p>Echoing this (and also disergarding the question of who would do that), perhaps even more useful would be to have a version of Loogle+ in the same way that <a href=\"https://dl.acm.org/doi/10.1145/3428273\">hoogle+</a> does for Haskell's hoogle. It kind of iterates on the request of matching <code>exact?</code> that <span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> is asking. Probably some of those sepecial-case lemmas could be found by a sort of Loogle+ (and would of course synergyize even better with a more comprehensive loogle cache for all of reservoir)</p>",
        "id": 441685016,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1717155444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441034057\">said</a>:</p>\n<blockquote>\n<p>It was however remarked that this was not much more than \"Reservoir, but in one repo\"</p>\n</blockquote>\n<p>Well, not quite.</p>\n<p>Reservoir currently doesn't have a mechanism that would allow an authority to step in and give you a stamp saying \"this code indeed corresponds to the informal notions it claims to represent\".</p>",
        "id": 441876522,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717231355
    },
    {
        "content": "<p>Uh sure, but are you claiming to become that authority?</p>",
        "id": 441878721,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717232772
    },
    {
        "content": "<p>Actually reservior does do that. It checks if your library builds against the corresponding toolchain.</p>",
        "id": 441879525,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717233323
    },
    {
        "content": "<p>Shreyas, no it doesn't. Read Martin's message again.</p>",
        "id": 441879559,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717233351
    },
    {
        "content": "<p>Oh, you mean it doesn't check for whether the specification is what it claims to be for any given def or theorem in a library.</p>",
        "id": 441879715,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717233441
    },
    {
        "content": "<p>That can only be done by people reviewing and giving it their stamp of authority. This is a huge amount of responsibility to take on.</p>",
        "id": 441879845,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717233518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441878721\">said</a>:</p>\n<blockquote>\n<p>Uh sure, but are you claiming to become that authority?</p>\n</blockquote>\n<p>No, I definitely don't want to play this role.</p>\n<p>However, you were making a comparison with Isabelle AFP, and they do have something like that.</p>",
        "id": 441880194,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717233736
    },
    {
        "content": "<p>There are good reasons why I don't want to do it (and that's why I wanted to start Mathlib++, not LeanAFP).</p>\n<p>Ideally, I would like to disconnect myself from informal MathematiCS completely.<br>\nIdeally, I would like Mathlib to have the unquestionable monopoly on definitions.<br>\nIdeally, I would like my job to be \"here is a statement (in a file that imports only Mathlib); prove it using any means necessary; once your proof does not use <code>sorry</code> and does not assume nonstandard axioms, you automatically get a publication\".</p>",
        "id": 441880750,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717234083
    },
    {
        "content": "<p>That's a completely different discussion from the more achievable goals you were proposing before, though</p>",
        "id": 441903224,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717247092
    },
    {
        "content": "<p>I don't think this is something we should aim for. Publications are not <a href=\"https://en.wikipedia.org/wiki/Zero-knowledge_proof\">zero-knowledge proofs</a>: the goal is to explain the result to a human in a way that provides as much insight as a possible into the subject, not merely to inform the reader that some theorem is true. Formalization can help by relieving the human from having to spend too much time on unimportant details while remaining confident about the correctness of the result, but it definitely doesn't make papers obsolete!</p>",
        "id": 441907286,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1717249121
    },
    {
        "content": "<p>The terminal at <code>mathlibplusplus.com</code> can be set up with a password system and the usual features of a Linux terminal interface. The one at <code>linearlibrary.net</code> was my thought as to a cool front end to... anything really. For example, the password system on the VPS could be made so that anyone with an account can accept a pull request from the other end. In that case, it could be the responsibility of the user to ensure the addition not disturb existing work.</p>",
        "id": 441916550,
        "sender_full_name": "E. Dean Young",
        "timestamp": 1717253881
    },
    {
        "content": "<p>I'm not an expert but some of these problems could suggest a dedicated server rather than a repository alone.</p>",
        "id": 441918265,
        "sender_full_name": "E. Dean Young",
        "timestamp": 1717254750
    },
    {
        "content": "<p>[I thought I was replying to a PM.]</p>",
        "id": 441920163,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717255699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441876522\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B/near/441034057\">said</a>:</p>\n<blockquote>\n<p>It was however remarked that this was not much more than \"Reservoir, but in one repo\"</p>\n</blockquote>\n<p>Well, not quite.</p>\n<p>Reservoir currently doesn't have a mechanism that would allow an authority to step in and give you a stamp saying \"this code indeed corresponds to the informal notions it claims to represent\".</p>\n</blockquote>\n<p>Legitimacy is actually an argument against centralization. It is hard to imagine such a centralized authority at scale. Also, theorems aren't trusted code (only defs are) so it doesn't matter if theorems come from arbitrary sources.</p>",
        "id": 441969244,
        "sender_full_name": "llllvvuu",
        "timestamp": 1717278529
    },
    {
        "content": "<p>defs aren't trusted either. Proofs are trusted given theorems and defs as they are.</p>",
        "id": 441969438,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717278595
    },
    {
        "content": "<p>What Martin seems to be worried about is bad defs that don't \"corresponds to the informal notions it claims to represent\". But I agree that it doesn't really seem like an issue as anyone can view the defs for themselves (and there are many trustworthy people in the potential Reservoir community so it seems like a waste to foist the role trustworthiness upon one authority as Martin suggests)</p>",
        "id": 441971362,
        "sender_full_name": "llllvvuu",
        "timestamp": 1717279183
    },
    {
        "content": "<p>I'd also argue that it is impossible for an authority to fully certify that \"this code indeed corresponds to the informal notions it claims to represent\". I would argue that that is, to some degree, in the eye of the beholder.</p>",
        "id": 441972044,
        "sender_full_name": "llllvvuu",
        "timestamp": 1717279431
    }
]