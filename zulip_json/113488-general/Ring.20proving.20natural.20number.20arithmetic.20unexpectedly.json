[
    {
        "content": "<p>I am currently constructing the integers (<code>Z</code>) as a quotient of pairs of naturals, and I constructed an instance of <code>CommRing</code> for it, as well as an <code>OfNat</code> instance. Now, the <code>ring</code> tactic proves that <code>(1 : Z) + 1 = 2,</code> but I see no reason that it should be able to do so. At no point did I prove that my <code>OfNat</code> instance worked with arithmetic. Why can <code>ring</code> prove this? <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> below.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">b</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">setoid</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Setoid</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">R</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Quotient</span><span class=\"w\"> </span><span class=\"n\">setoid</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">instOfNat</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨⟦</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">⟧⟩</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">instCommRing</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 445033238,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1718582169
    },
    {
        "content": "<p>It is baked into the definition  of <code>CommRing</code> that casts of natural numbers are equal to the \"natural numbers in the ring\".</p>",
        "id": 445041136,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718589651
    },
    {
        "content": "<p>You should try actually constructing the <code>CommRing</code> instance, and you'll see what you're hiding behind that <code>sorry</code>!</p>",
        "id": 445041189,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718589674
    },
    {
        "content": "<p>Ah, I see what I've done. I was using <code>CommRing.ofMinimalAxioms</code> rather than the full constructor, and it must have been overruling my <code>OfNat</code> instance. Thank you!</p>",
        "id": 445041464,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1718589937
    }
]