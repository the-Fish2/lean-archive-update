[
    {
        "content": "<p>It seems that a</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">Char</span>\n</code></pre></div>\n<p>instance should be an easy goal? A</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">UInt32</span>\n</code></pre></div>\n<p>instance would probably suffice, although maybe that is too large somehow.</p>",
        "id": 445249988,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1718671348
    },
    {
        "content": "<p>What is the use case?</p>",
        "id": 445250752,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718671932
    },
    {
        "content": "<p>I want to look for patterns in words over an alphabet like {A,...,Z}.</p>",
        "id": 445251946,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1718672744
    },
    {
        "content": "<p>Here's a prototype:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">elems</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">Ico</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xd800</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">disjUnion</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">Ioo</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xdfff</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x110000</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">disjoint_left</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_Ico</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_Ioo</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Not</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">and_imp</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"n\">ha'</span><span class=\"w\"> </span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"n\">hb'</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">hb</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"n\">ha'</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">lt_def</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">    </span><span class=\"n\">change</span><span class=\"w\"> </span><span class=\"mi\">57343</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">55296</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">    </span><span class=\"n\">norm_num</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">    </span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">      </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⟩</span>\n<span class=\"w\">      </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">prop</span>\n<span class=\"w\">    </span><span class=\"o\">},</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">ext1</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"bp\">*;</span><span class=\"w\"> </span><span class=\"n\">injection</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">injection</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span>\n\n<span class=\"w\">  </span><span class=\"n\">complete</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- 1112064</span>\n</code></pre></div>",
        "id": 445253752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718674084
    },
    {
        "content": "<p>The proofs are a bit sloppy because the dance between <code>Char</code>/<code>UInt32</code>/<code>Nat</code>/<code>Fin</code> is a little awkward</p>",
        "id": 445253864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718674199
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span><br>\nIt does look complex!</p>",
        "id": 445254571,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1718674742
    },
    {
        "content": "<p>I think it would be a lot cleaner with a <code>LocallyFiniteOrder UInt32</code> instance</p>",
        "id": 445254689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718674839
    },
    {
        "content": "<p>( <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, is there a one-liner to pull that along an equiv, here from Fin?)</p>",
        "id": 445254834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718674934
    },
    {
        "content": "<p>Ah yes, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderIso.locallyFiniteOrder#doc\">docs#OrderIso.locallyFiniteOrder</a></p>",
        "id": 445255004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718675072
    },
    {
        "content": "<p>Ok, a cleaned up version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">section</span><span class=\"w\"> </span><span class=\"n\">shouldBeInCore</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">val_lt_val</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">val_le_val</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">val_ofNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">no_index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">OfNat</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">val_max</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">max_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">instMaxUInt32</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">maxOfLe</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">instLEUInt32</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">aesop</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">val_min</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">min_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">instMinUInt32</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">minOfLe</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">instLEUInt32</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">aesop</span>\n\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">compare_def</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">compare</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">compare</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">instOrdUInt32</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">instOrdFin</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">compareOfLessAndEq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">instOrdNat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">instLTUInt32</span><span class=\"o\">,</span>\n<span class=\"w\">  </span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">val_injective</span><span class=\"bp\">.</span><span class=\"n\">eq_iff</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">val_injective</span><span class=\"bp\">.</span><span class=\"n\">eq_iff</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">isValidChar_iff</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">isValidChar</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xd800</span><span class=\"w\"> </span><span class=\"bp\">∨</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xdfff</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x110000</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">⟨</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">▸</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">shouldBeInCore</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sup</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">sup</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">max</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Inf</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">inf</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">min</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">LinearOrder</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">LinearOrder</span><span class=\"bp\">.</span><span class=\"n\">liftWithOrd</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">val_injective</span>\n<span class=\"w\">    </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">val_max</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">val_min</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">compare_def</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">orderIsoFin</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n<span class=\"w\">  </span><span class=\"n\">invFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"w\">  </span><span class=\"n\">map_rel_iff'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"n\">left_inv</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"n\">right_inv</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">LocallyFiniteOrder</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">orderIsoFin</span><span class=\"bp\">.</span><span class=\"n\">locallyFiniteOrder</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">elems</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">Ico</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">xd800</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">disjUnion</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">Ioo</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">xdfff</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x110000</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">        </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">disjoint_left</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_Ico</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_Ioo</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Not</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">and_imp</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">        </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">hb</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"n\">ha</span>\n<span class=\"w\">        </span><span class=\"n\">revert</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">        </span><span class=\"n\">decide</span>\n<span class=\"w\">      </span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">isValidChar_iff</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">congr_arg</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span>\n<span class=\"w\">  </span><span class=\"n\">complete</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">valid</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">isValidChar_iff</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">    </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 445317208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718704501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span>, do you agree with my <code>shouldBeInCore</code> judgement above?</p>",
        "id": 445317473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718704586
    },
    {
        "content": "<p>Yes, seems reasonable. (Although we're hoping to replace <code>UIntX</code> with a <code>BitVec</code> based implementation, so ... everything will change. :-)</p>",
        "id": 445318804,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718705027
    },
    {
        "content": "<p>I didn't expect this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"n\">Char</span>\n<span class=\"c1\">-- 1112064</span>\n</code></pre></div>\n<p>I guess everything is suitably tail recursive when building a list with 1,112,064 elements!</p>",
        "id": 445381345,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718722758
    },
    {
        "content": "<p>I was very careful to not invoke quadratic behavior with <code>union</code> or <code>image</code> :)</p>",
        "id": 445382268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718722971
    },
    {
        "content": "<p>I had a very quick go at upstreaming, but:</p>\n<ul>\n<li>The <code>max</code> and <code>min</code> lemmas cannot be upstreamed, because core has no <code>Min (Fin _)</code> instance (it comes from the linear order)</li>\n<li>It is unclear which file the <code>compare</code> lemmas would go in; in mathlib the <code>rfl</code> lemmas would go immediately after the definition, but this seems not to be the style used in core</li>\n</ul>",
        "id": 445722652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718840913
    },
    {
        "content": "<p>Maybe it can go in \"Mathematical aspects of Unicode\"</p>",
        "id": 445728436,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1718843386
    },
    {
        "content": "<p>All the <code>Uint32</code> stuff isn't really about unicode at all though; that's just \"Here's how the thing lean defined is defined\"</p>",
        "id": 445728713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718843512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Fintype.20Char.3F/near/445722652\">said</a>:</p>\n<blockquote>\n<ul>\n<li>It is unclear which file the <code>compare</code> lemmas would go in; in mathlib the <code>rfl</code> lemmas would go immediately after the definition, but this seems not to be the style used in core</li>\n</ul>\n</blockquote>\n<p>This style is in flux, and I'm actually switching towards this, so if you would like to put these with their definitions that will be fine.</p>",
        "id": 445733972,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718846478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> In the mean time, consider adding the missing bits to Batteries.Data.UInt.</p>\n<p>I just added some <a href=\"https://github.com/leanprover-community/batteries/pull/853\">batteries#853</a> <a href=\"https://github.com/leanprover-community/batteries/pull/854\">batteries#854</a>. Note that most of the theorems use <code>toNat</code> instead of <code>val</code> to avoid relying on the implementation of UInt types.</p>",
        "id": 445738216,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1718848686
    },
    {
        "content": "<p>Arguably the solution here is to rename <code>val</code> to <code>toFin</code>, since I don't think the existence of a canonical map to fin is an implementation detail</p>",
        "id": 445779820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718869799
    },
    {
        "content": "<p>(the implementation detail is the fact this happens to be a projection)</p>",
        "id": 445779940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718869822
    },
    {
        "content": "<p>Indeed, that would be better. It's a reference implementation anyhow so the fact that it's a projection is not actually significant.</p>",
        "id": 445797961,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1718875018
    },
    {
        "content": "<p>I would imagine the proposed refactor is something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">   </span><span class=\"n\">toBitvec</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bitvec</span><span class=\"w\"> </span><span class=\"mi\">32</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">toBitvec</span><span class=\"bp\">.</span><span class=\"n\">toFin</span>\n</code></pre></div>\n<p>in which case the <code>val</code>  lemmas would be replaced by <code>toBitvec</code> lemmas, hopefully with little change in proof.</p>",
        "id": 445799053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718875305
    },
    {
        "content": "<p>We'll have to see what actually happens. I think it's fine for a scalar type like this to have multiple views so long as they are backed by efficient code. Of course, only one can be chosen as the reference. Right now, the Batteries.Data.UInt file favors the <code>toNat</code>/<code>toNat_lt</code> view, but that doesn't mean that the goal is to ignore the <code>toFin</code> and <code>toBitvec</code> views.</p>",
        "id": 445806329,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1718877568
    },
    {
        "content": "<blockquote>\n<p>I think it's fine for a scalar type like this to have multiple views so long as they are backed by efficient code.</p>\n</blockquote>\n<p>Not every view needs to be efficient for computation; there is value to views that are only efficient for proofs</p>",
        "id": 445808831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718878414
    },
    {
        "content": "<p>So long as they are marked <code>noncomputable</code> so that they aren't used in code.</p>",
        "id": 445809853,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1718878669
    }
]