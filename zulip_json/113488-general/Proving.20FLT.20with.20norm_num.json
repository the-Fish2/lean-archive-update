[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">ignore_me_please</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">clear</span> <span class=\"n\">ignore_me_please</span> <span class=\"c1\">-- I promise not to use this, it would be cheating</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 429746342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711490170
    },
    {
        "content": "<p>(ok, I got the statement wrong, but obviously the interesting thing here is the footgun, not the fact I pointed it at the foot I thought was FLT)</p>",
        "id": 429746638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711490321
    },
    {
        "content": "<p>great, I can retire early! So <code>clear</code> isn't doing what I think it's doing?</p>",
        "id": 429748401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711491179
    },
    {
        "content": "<p><code>norm_num</code> is matching <code>*</code> against the context before <code>clear</code> ran</p>",
        "id": 429748590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711491289
    },
    {
        "content": "<p>And people still complain that there is the need for better automation.</p>",
        "id": 429748811,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711491415
    },
    {
        "content": "<p>My initial takeaway here is that <code>*</code> is just really dangerous in the presence of <code>variables</code> (without the <code>clear</code> the proof does what you'd expect but not what you'd want), and secondarily there is obviously a bug above.</p>",
        "id": 429748812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711491417
    },
    {
        "content": "<p>I think we still need to overhaul the behavior of <code>variable</code> in Lean 4, as was voted 22 to 0 in this poll: <a href=\"#narrow/stream/113488-general/topic/automatic.20inclusion.20of.20variables.20in.20mathlib.204/near/386620103\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/automatic.20inclusion.20of.20variables.20in.20mathlib.204/near/386620103</a></p>",
        "id": 429749583,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711491897
    },
    {
        "content": "<p>An update on <a href=\"https://github.com/leanprover/lean4/pull/2452\">lean#2452</a>: It is on the agenda, but not immediately. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> wants to address this in his upcoming work on intra-file parallelism, where there will have to be substantial changes to the <code>variable</code> mechanism anyway. Obviously this is a big project and won't happen overnight, but I think after incrementality is merged, the path is at least open.</p>",
        "id": 429764095,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711501475
    },
    {
        "content": "<p>Are there news that I missed about incrementality?</p>",
        "id": 429766986,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711503510
    },
    {
        "content": "<p>It won't make <code>v4.8.0-rc1</code>, but <code>v4.9.0-rc1</code> seems plausible. <a href=\"https://github.com/leanprover/lean4/pull/3636\">lean4#3636</a> if you'd like to follow the play-by-play!</p>",
        "id": 429768764,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711504502
    }
]