[
    {
        "content": "<p><a href=\"/user_uploads/3121/c46EzEIiuljcXnMquCRvCc_i/Screenshot-2024-04-01-144614.png\">Screenshot-2024-04-01-144614.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/c46EzEIiuljcXnMquCRvCc_i/Screenshot-2024-04-01-144614.png\" title=\"Screenshot-2024-04-01-144614.png\"><img src=\"/user_uploads/3121/c46EzEIiuljcXnMquCRvCc_i/Screenshot-2024-04-01-144614.png\"></a></div>",
        "id": 430687302,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712019033
    },
    {
        "content": "<p>This usually means you have already completed the proof, and you can just delete the tactic that is giving you this error and everything should work.</p>",
        "id": 430688679,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712020019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/Can.20someone.20explain.20to.20me.20what.20this.20error.20is.20saying/near/430688679\">said</a>:</p>\n<blockquote>\n<p>This usually means you have already completed the proof, and you can just delete the tactic that is giving you this error and everything should work.</p>\n</blockquote>\n<p>But when I delete it I get an unsolved goal error.<br>\n<a href=\"/user_uploads/3121/zDe5SqeWzR6QGmLSSn11evwf/Screenshot-2024-04-01-211215.png\">Screenshot-2024-04-01-211215.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/zDe5SqeWzR6QGmLSSn11evwf/Screenshot-2024-04-01-211215.png\" title=\"Screenshot-2024-04-01-211215.png\"><img src=\"/user_uploads/3121/zDe5SqeWzR6QGmLSSn11evwf/Screenshot-2024-04-01-211215.png\"></a></div>",
        "id": 430689408,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712020369
    },
    {
        "content": "<p>what if you remove the curly braces?</p>",
        "id": 430689661,
        "sender_full_name": "David Renshaw",
        "timestamp": 1712020562
    },
    {
        "content": "<p>the issue is that <code>decreasing_by</code> is a state with multiple goals, one per recursive call, so you need <code>all_goals</code> to apply the tactic sequence to every goal, or multiple braces if you want to prove them separately</p>",
        "id": 430690106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712020898
    },
    {
        "content": "<p>Also keep in mind that curly braces are <em>not</em> a no-op in the tactic language; they focus on the first goal and lean/std/mathlib usually uses <code>· tacs</code> for this instead. The no-op grouping device in the tactic language is <code>( ... )</code></p>",
        "id": 430690271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712021034
    },
    {
        "content": "<p>I think this is a bug in the <code>decreasing_by</code> parser though; most places which accept tactic sequences also accept a braced group, but usually the initial state only has one goal so it's not observable whether you are using the <code>{ ... }</code> tactic combinator or the tacticSeqBracketed syntax. cc: <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span></p>",
        "id": 430690764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712021264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Can.20someone.20explain.20to.20me.20what.20this.20error.20is.20saying/near/430690106\">said</a>:</p>\n<blockquote>\n<p>the issue is that <code>decreasing_by</code> is a state with multiple goals, one per recursive call, so you need <code>all_goals</code> to apply the tactic sequence to every goal, or multiple braces if you want to prove them separately</p>\n</blockquote>\n<p>I know it doesnt apply in this case, but what if you have multiple different wf goals that require different tactics to prove?</p>",
        "id": 430693443,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712022391
    },
    {
        "content": "<p>the intent is that you would write something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">decreasing_by</span>\n  <span class=\"bp\">·</span> <span class=\"n\">proof</span> <span class=\"n\">for</span> <span class=\"n\">first</span> <span class=\"n\">call</span>\n  <span class=\"bp\">·</span> <span class=\"n\">proof</span> <span class=\"n\">for</span> <span class=\"n\">second</span> <span class=\"n\">call</span>\n    <span class=\"n\">more</span> <span class=\"n\">proof</span>\n  <span class=\"bp\">·</span> <span class=\"n\">proof</span> <span class=\"n\">for</span> <span class=\"n\">third</span> <span class=\"n\">call</span>\n</code></pre></div>\n<p>or:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">decreasing_by</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">proof</span> <span class=\"n\">for</span> <span class=\"n\">every</span> <span class=\"n\">call</span>\n</code></pre></div>",
        "id": 430695987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712024035
    },
    {
        "content": "<p>if you like to use braces, you could also format it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">decreasing_by</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">proof</span> <span class=\"n\">for</span> <span class=\"n\">first</span> <span class=\"n\">call</span>\n  <span class=\"o\">}</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">proof</span> <span class=\"n\">for</span> <span class=\"n\">second</span> <span class=\"n\">call</span>\n    <span class=\"n\">more</span> <span class=\"n\">proof</span>\n  <span class=\"o\">}</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">proof</span> <span class=\"n\">for</span> <span class=\"n\">third</span> <span class=\"n\">call</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>(but note the lack of surrounding braces), or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">decreasing_by</span> <span class=\"o\">(</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">proof</span> <span class=\"n\">for</span> <span class=\"n\">first</span> <span class=\"n\">call</span>\n  <span class=\"o\">}</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">proof</span> <span class=\"n\">for</span> <span class=\"n\">second</span> <span class=\"n\">call</span>\n    <span class=\"n\">more</span> <span class=\"n\">proof</span>\n  <span class=\"o\">}</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">proof</span> <span class=\"n\">for</span> <span class=\"n\">third</span> <span class=\"n\">call</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n<p>if you really want some outer delimiters</p>",
        "id": 430696185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712024151
    },
    {
        "content": "<p>Which version of lean is that? It looks to me that you are seeing the effect of the <em>old</em> behavior, where the <code>decreasing_by</code>  is applied to <em>each</em> goal separately, so for one goal <code>simp_wf</code> works and then the <code>simp</code> call fails, and for another one you need the <code>simp</code>, and now you have to juggle with <code>try</code> or <code>first</code>… precisely the kind of confusion I was hoping to reduce by that refactoring. (The <code>termination_by set_subtrees</code> is a hint that this is an older version of lean.)</p>",
        "id": 430866516,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712089165
    },
    {
        "content": "<p>Oh, and to help <span class=\"user-mention\" data-user-id=\"676310\">@Frederick Pu</span> with their problem on their version of Lean; can you try <code>simp_wf ; try simp [ … ]</code>?</p>",
        "id": 430868052,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712089779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/Can.20someone.20explain.20to.20me.20what.20this.20error.20is.20saying/near/430868052\">said</a>:</p>\n<blockquote>\n<p>Oh, and to help <span class=\"user-mention silent\" data-user-id=\"676310\">Frederick Pu</span> with their problem on their version of Lean; can you try <code>simp_wf ; try simp [ … ]</code>?</p>\n</blockquote>\n<p>Yeah thanks that works although it's not really relevant in this case. Probably be a useful trick when I have multiple wf goals tho</p>",
        "id": 432107713,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1712631813
    }
]