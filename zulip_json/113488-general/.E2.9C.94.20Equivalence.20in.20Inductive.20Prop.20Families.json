[
    {
        "content": "<p>Consider the following scenario. First, I define an inductive type like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">ex</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">ex</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">to_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">ex</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ex</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Then, according to proof irrelevance, we have that <code> ex.zero = ex.to_zero (ex.one) </code>. Lean actually supports this line of reasoning, proving the equality with just <code> refl </code>. But shouldn't we also have that <code> ex.zero </code> cannot be equal to <code> ex.to_zero (ex.one) </code>, by the disjointness of constructors' ranges? Lean does not want to prove this through the induction/contradiction tactics, but I don't understand why it doesn't work.</p>",
        "id": 436581672,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1714601993
    },
    {
        "content": "<p>Disjointness of constructors is only available for Types, since it relies on being able to eliminate to types, which Props usually can't do (unless they're \"syntactic subsingletons\" like Eq or Acc).</p>\n<p>It's worth taking a look at the <code>casesOn</code> recursors, which are the non-recursive versions of <code>recOn</code>. Here it is for both the <code>Prop</code> version and the <code>Type</code> version.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- As `inductive ex : ℕ → Prop`</span>\n<span class=\"k\">#check</span> <span class=\"n\">ex.casesOn</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">ex.casesOn {motive : (a : ℕ) → ex a → Prop}</span>\n<span class=\"cm\">    {a✝ : ℕ} (t : ex a✝)</span>\n<span class=\"cm\">    (zero : motive 0 ex.zero)</span>\n<span class=\"cm\">    (one : motive 1 ex.one)</span>\n<span class=\"cm\">    (to_zero : ∀ {n : ℕ} (a : ex n), motive 0 (ex.to_zero a)) :</span>\n<span class=\"cm\">    motive a✝ t</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- As `inductive ex : ℕ → Type`</span>\n<span class=\"k\">#check</span> <span class=\"n\">ex.casesOn</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">ex.casesOn.{u} {motive : (a : ℕ) → ex a → Sort u}</span>\n<span class=\"cm\">    {a✝ : ℕ} (t : ex a✝)</span>\n<span class=\"cm\">    (zero : motive 0 ex.zero)</span>\n<span class=\"cm\">    (one : motive 1 ex.one)</span>\n<span class=\"cm\">    (to_zero : {n : ℕ} → (a : ex n) → motive 0 (ex.to_zero a)) :</span>\n<span class=\"cm\">    motive a✝ t</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>The difference between these is the <code>motive</code>. In the first case, it's only allowed to produce proofs for some proposition, but in the second case it's allowed to eliminate into any type.</p>\n<p>In the <code>Type</code> version, this enables the <code>noConfusion</code> machinery, which gives disjointness of constructors. Here's a simplified version of the construction. (Lean can infer these <code>motive</code> arguments, but I included them for completeness.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ex.noConfusionType'</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ex</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ex.casesOn</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:=</span>\n      <span class=\"n\">ex.casesOn</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">to_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:=</span>\n      <span class=\"n\">ex.casesOn</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">to_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">to_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">ex.casesOn</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">to_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ex.noConfusion'</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ex</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ex.noConfusionType'</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Eq.ndrecOn</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">ex.casesOn</span> <span class=\"n\">x</span>\n      <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">to_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The idea is that the noConfusionType is <code>α → α</code> on the diagonal (which is easily satisfied by <code>id</code>), but it's <code>α</code> by itself off the diagonal. This means that if you have an equality between different constructors, <code>noConfusion</code> lets you construct data in any type. Even an empty type!</p>\n<p>With this it's easy to prove that <code>ex.zero</code> and <code>ex.to_zero ex.one</code> are not equal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ex.to_zero</span> <span class=\"n\">ex.one</span> <span class=\"bp\">≠</span> <span class=\"n\">ex.zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ex.noConfusion'</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>This is what the <code>cases</code> tactic makes use of. You can replace <code>ex.noConfusion' h</code> by <code>by cases h</code> and see a <code>noConfusion</code> when you use <code>show_term by cases h</code>.</p>\n<p>However, when the inductive type is <code>Prop</code>-valued, you run into trouble making a <code>noConfusionType</code>. This <code>(motive := fun _ _ =&gt; Sort u)</code> is too big, and the biggest you can make it is <code>(motive := fun _ _ =&gt; p)</code> with <code>p</code> some proposition. But if that <code>p</code> serves as a sort of universe, then <code>noConfusionType</code> seems like it should take an <code>h : p</code> argument too, and before you know it you've made a complicated proof that <code>p</code> implies <code>p</code> given <code>x y : ex n</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ex.noConfusionType'</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ex</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ex.casesOn</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:=</span>\n      <span class=\"n\">ex.casesOn</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">to_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:=</span>\n      <span class=\"n\">ex.casesOn</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">to_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">to_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">ex.casesOn</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">to_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 436599936,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714613489
    },
    {
        "content": "<p>Thank you. I just have one more question: why is cases_on limited to returning a Prop in the inductive Prop definition? Is it just to make everything you said work?</p>",
        "id": 436604847,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1714616965
    },
    {
        "content": "<p>I think the answer is basically \"yeah, it's to make all of this work.\" Having Prop-valued inductive types give Type-like recursors is incompatible with proof irrelevance.</p>\n<p>Here's a contradiction you can prove if <code>Exists</code> were to have the recursor of <code>Subtype</code> (which is the Type version of <code>Exists</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"sd\">/-- Version of `Exists.casesOn` but which eliminates to `Sort v` instead of `Prop`. -/</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Exists.casesOn'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Exists</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Exists</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Exists.intro</span> <span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">t</span>\n\n<span class=\"c1\">-- Reduction rule</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Exists.casesOn'_rule</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Exists</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Exists.intro</span> <span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exists.casesOn'</span> <span class=\"o\">(</span><span class=\"n\">Exists.intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">intro</span> <span class=\"bp\">=</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">Exists.witness</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Exists</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Exists.casesOn'</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">True.intro</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">True.intro</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact1</span> <span class=\"o\">:</span> <span class=\"n\">h1.witness</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Exists.casesOn'_rule</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"n\">True.intro</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact2</span> <span class=\"o\">:</span> <span class=\"n\">h2.witness</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Exists.casesOn'_rule</span> <span class=\"n\">_</span> <span class=\"mi\">1</span> <span class=\"n\">True.intro</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact3</span> <span class=\"o\">:</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- proof irrelevance</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">h1.witness</span> <span class=\"o\">:=</span> <span class=\"n\">fact1.symm</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">h2.witness</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">Exists.witness</span> <span class=\"n\">fact3</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>          <span class=\"o\">:=</span> <span class=\"n\">fact2</span>\n  <span class=\"n\">Nat.noConfusion</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 436606381,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714617997
    },
    {
        "content": "<p>Ah. Thank you!</p>",
        "id": 436607017,
        "sender_full_name": "Brandon Harad",
        "timestamp": 1714618454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"699800\">Brandon Harad</span> has marked this topic as resolved.</p>",
        "id": 436607023,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714618468
    }
]