[
    {
        "content": "<p>Hi, I'm trying to formalize some facts about orthogonal polynomials, but I'm not sure of the best and most idiomatic way of defining things. Let me explain:<br>\nI have the space of polynomials over ℝ, ℝ[X], and I want to put a scalar product on it. This scalar product is just the L² scalar product using some reasonable measure. Right now I have defined a structure that holds this measure and all its relevant properties, called <code>IntegralScalarProduct</code>.<br>\nThe easiest way to define orthogonal polynomials is by using Gram Schmidt on {X^n}_(n ∈ ℕ), but to do this I need to have a scalar product on ℝ[X], and I want to be able to change this scalar product in order to get different orthogonal polynomials families. So, what I have done right now, is defining <code>MySpace s := ℝ[X]</code>, where <code>s : IntegralScalarProduct</code>, and instantiating <code>InnerProductSpace</code> on <code>MySpace s</code>. In this way, all the theorems take objects in <code>MySpace s</code>, and get access to the scalar product and its properties.<br>\nThis somewhat works, but often have to do manual conversions between <code>MySpace s</code> and <code>ℝ[X]</code>, which is extremely annoying. This wouldn't be a problem if I just instantiated <code>InnerProductSpace</code> on ℝ[X], but then I wouldn't know how to be flexible over the possible scalar products induced by different measures.</p>\n<p>Is there a better way to put a user definable scalar product on ℝ[X}?</p>",
        "id": 426875293,
        "sender_full_name": "giacomo gallina",
        "timestamp": 1710580085
    },
    {
        "content": "<p>Make a local instance?</p>",
        "id": 426877453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710582245
    },
    {
        "content": "<p>Thanks, I will try!</p>",
        "id": 426880022,
        "sender_full_name": "giacomo gallina",
        "timestamp": 1710584646
    },
    {
        "content": "<p>I think putting an inner product space on <code>WithLp 2 (ι →₀ E)</code> would be reasonable, and might help a bit here</p>",
        "id": 426885146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710589915
    }
]