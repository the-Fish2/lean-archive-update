[
    {
        "content": "<p>In <a href=\"https://xenaproject.wordpress.com/2021/04/18/induction-on-equality/\">Induction on equality</a> Kevin Buzzard provides a very helpful introduction to equality in Lean. Below is some of his code updated to Lean4 (note: spoiler alert for part of his post). I wanted to provide a term-style proof, which is fairly easy -- see <code>subst</code> below. However, while short what I really wanted to do was write <code>subst'</code> since it seems easier to develop. However, <code>subst'</code> seems to run into type mismatch errors. How can I comfortably write a term-style proof along the lines of <code>subst'</code> (i.e., with intermediate terms via <code>have</code>s or similar)? I apologize for the  vague question.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Eq2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Eq2</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ∼ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq2</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ind</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∼</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Eq2.rec</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hab</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∼</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">ind</span> <span class=\"n\">hab</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hPa</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">this</span> <span class=\"n\">hPa</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subst'</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∼</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">y</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- fun _ =&gt; id -- type mismatch ... expected to have R x x</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- ind hab R h -- type mismatch ... R a b vs P a → P b</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hPa</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">this</span> <span class=\"n\">hPa</span>\n</code></pre></div>",
        "id": 409516036,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1703217351
    },
    {
        "content": "<p>Not answering your question, but there's a shorter proof of <code>subst</code> using the recursor directly.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∼</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Eq2.rec</span> <span class=\"n\">id</span> <span class=\"n\">hab</span>\n</code></pre></div>\n<p>The point is that if you use <code>hab</code> to eliminate one of the variables, the goal is the identity function.</p>",
        "id": 409516631,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703217667
    },
    {
        "content": "<p>Answering your question, you need to do <code>let R</code> instead of <code>have R</code> so that the local definition of <code>R</code> can be used.</p>",
        "id": 409516933,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703217792
    },
    {
        "content": "<p>We really need a linter catching this (but I don't mean <em>you</em> should write it).</p>",
        "id": 409517329,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703218036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Induction.20on.20equality.20.2E.2E.2E.20using.20terms/near/409516631\">said</a>:</p>\n<blockquote>\n<p>Not answering your question, but there's a shorter proof of <code>subst</code> using the recursor directly.<br>\n...<br>\nThe point is that if you use <code>hab</code> to eliminate one of the variables, the goal is the identity function.</p>\n</blockquote>\n<p>Thank you -- that's interesting.</p>\n<blockquote>\n<p>you need to do <code>let R</code> instead of <code>have R</code> so that the local definition of R can be used.</p>\n</blockquote>\n<p>This is exactly what I needed! </p>\n<p>Is <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> comment saying that a linter that can notice when <code>let</code> might be preferable to <code>have</code> would be useful? (Or perhaps, it's even simpler -- <code>have</code> is usually used for <code>Prop</code>s, anything else probably should be a <code>let</code>.)</p>\n<p>The <code>have</code> vs <code>let</code> issue is discussed in <a href=\"https://stackoverflow.com/a/74977875/\">an answer to \"Difference between let and have keywords in lean 4\"</a>. Below is a similar example to what's given in the answer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span><span class=\"bp\">;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"c1\">--example : ∃ x, x = 42 := have x := 42; ⟨x, rfl⟩ -- application type mismatch</span>\n</code></pre></div>",
        "id": 409596059,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1703257103
    },
    {
        "content": "<p>Yes it's exactly that -- <code>have</code> for proofs of Props and <code>let</code> for everything else, and this should be easy to lint for, and it's quite a common error for newcomers, so it would be great if it were just immediately underlined in orange.</p>",
        "id": 409597246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703257529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242206\">Luis O'Shea</span> has marked this topic as resolved.</p>",
        "id": 409597318,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703257557
    }
]