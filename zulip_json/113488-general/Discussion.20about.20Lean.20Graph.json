[
    {
        "content": "<p>I'm starting a thread for discussion of the recently announced Lean Graph <a href=\"#narrow/stream/113486-announce/topic/Introducing.20Lean.20Graph.200.2E1\">https://leanprover.zulipchat.com/#narrow/stream/113486-announce/topic/Introducing.20Lean.20Graph.200.2E1</a></p>",
        "id": 410876723,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704215236
    },
    {
        "content": "<p>First few questions:</p>\n<ul>\n<li>is it hard to automate generation of the json file using <code>lake</code> instead of opening some file in the editor?</li>\n<li>is there an offline version?</li>\n<li>is there a version that generates <code>.dot</code> files?</li>\n</ul>",
        "id": 410877150,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704215398
    },
    {
        "content": "<p>Am I missing something about the graph visualization itself? How does one zoom in? Right now I see this:<br>\n<a href=\"/user_uploads/3121/eR8fRHDTWHrcbQ5zhhiFaKIB/Screenshot-2024-01-02-at-10-18-36-Lean-Graph.png\">Screenshot-2024-01-02-at-10-18-36-Lean-Graph.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/eR8fRHDTWHrcbQ5zhhiFaKIB/Screenshot-2024-01-02-at-10-18-36-Lean-Graph.png\" title=\"Screenshot-2024-01-02-at-10-18-36-Lean-Graph.png\"><img src=\"/user_uploads/3121/eR8fRHDTWHrcbQ5zhhiFaKIB/Screenshot-2024-01-02-at-10-18-36-Lean-Graph.png\"></a></div>",
        "id": 410878360,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704215962
    },
    {
        "content": "<p>Yes, I opened and the graph started to zoom out without <del>any reaction</del>(UPD: I can mov it but can't zoom in) to keys/mouse scroll.</p>",
        "id": 410878494,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704216019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410878360\">said</a>:</p>\n<blockquote>\n<p>Am I missing something about the graph visualization itself? How does one zoom in? Right now I see this:<br>\n<a href=\"/user_uploads/3121/eR8fRHDTWHrcbQ5zhhiFaKIB/Screenshot-2024-01-02-at-10-18-36-Lean-Graph.png\">Screenshot-2024-01-02-at-10-18-36-Lean-Graph.png</a></p>\n</blockquote>\n<p>\"ctrl + scroll wheel\" should work</p>",
        "id": 410878589,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704216067
    },
    {
        "content": "<p>I really prefer to look at static objects when I analyze something. Can I stop the animation?</p>",
        "id": 410878692,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704216121
    },
    {
        "content": "<p>That's quite unintuitive. Is there a good reason not to just use scrolling directly?</p>",
        "id": 410878704,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704216122
    },
    {
        "content": "<p>Is there a way to share the graph it creates (other than sharing the .json)?</p>",
        "id": 410878796,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1704216158
    },
    {
        "content": "<p>Also, can you hide auxiliary lemmas like <code>Nat.add._match_1</code>?</p>",
        "id": 410878827,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704216173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410877150\">said</a>:</p>\n<blockquote>\n<p>First few questions:</p>\n<ul>\n<li>is it hard to automate generation of the json file using <code>lake</code> instead of opening some file in the editor?</li>\n<li>is there an offline version?</li>\n<li>is there a version that generates <code>.dot</code> files?</li>\n</ul>\n</blockquote>\n<p>There is an offline version, however for now it requires building the app from source (look on GitHub). Automating would be quite complex and would probably require running the Lean langauge server in WASM. Don't know what you mean by .dot files...</p>",
        "id": 410878971,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704216238
    },
    {
        "content": "<p>Sorry if I'm just being stupid: where is <code>get_graph_meta.lean</code>?</p>",
        "id": 410879118,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704216273
    },
    {
        "content": "<p><a href=\"https://graphviz.org/doc/info/lang.html\">https://graphviz.org/doc/info/lang.html</a></p>",
        "id": 410879143,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704216282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410878692\">said</a>:</p>\n<blockquote>\n<p>I really prefer to look at static objects when I analyze something. Can I stop the animation?</p>\n</blockquote>\n<p>Yes, setting in <strong>Force settings</strong> there should be stiffness slider. Setting it to 1, should stop the animation, however you should let it run for a while in order to group related theorems together.</p>",
        "id": 410879260,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704216335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410878796\">said</a>:</p>\n<blockquote>\n<p>Is there a way to share the graph it creates (other than sharing the .json)?</p>\n</blockquote>\n<p>Not yet. It's something I will probably add in the future if there is interest however. Shouldn't be hard.</p>",
        "id": 410879439,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704216395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410879118\">said</a>:</p>\n<blockquote>\n<p>Sorry if I'm just being stupid: where is <code>get_graph_meta.lean</code>?</p>\n</blockquote>\n<p>That is a reference to the old name of the file, now it's called <code>DependencyExtractor.lean</code>, you can get it under the <strong>File</strong> section in the web app.</p>",
        "id": 410879627,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704216475
    },
    {
        "content": "<p>By \"automating\" I meant \"create a command like the existing <code>lake exe graph</code> that creates a json file\", not \"create a json file right there on the website\".</p>",
        "id": 410879781,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704216532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410879781\">said</a>:</p>\n<blockquote>\n<p>By \"automating\" I meant \"create a command like the existing <code>lake exe graph</code> that creates a json file\", not \"create a json file right there on the website\".</p>\n</blockquote>\n<p>That would probably end up more complex. You would need to specify the imports to the theorem/namespace first and wouldn't even get much feedback whether are you pointing to an existing thing.</p>",
        "id": 410880287,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704216751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410879781\">said</a>:</p>\n<blockquote>\n<p>By \"automating\" I meant \"create a command like the existing <code>lake exe graph</code> that creates a json file\", not \"create a json file right there on the website\".</p>\n</blockquote>\n<p>Plus the fact that it needs to analyze the stuff in the meta environment, I'm not sure how all that would work.</p>",
        "id": 410880396,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704216818
    },
    {
        "content": "<p>It's still very possible to do, but you probably will have to parse and compile the file in question from the IO command itself. This is something that IMO would be worth doing, as it would follow the standard lean project workflow as opposed to copying and pasting some lean file into each project.</p>",
        "id": 410880415,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704216829
    },
    {
        "content": "<p>there are examples of obtaining a lean environment from a file in <code>lean-training-data</code>, for example.</p>",
        "id": 410880532,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704216877
    },
    {
        "content": "<p>A hacked together bare-bones version can be found here: <a href=\"https://github.com/adamtopaz/lean_grader/blob/9838ec05c56b92b677c73322288f26634b7f4b62/Main.lean#L7\">https://github.com/adamtopaz/lean_grader/blob/9838ec05c56b92b677c73322288f26634b7f4b62/Main.lean#L7</a></p>",
        "id": 410880604,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704216920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> What do you think about <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> and its co-existence with your <code>ImportGraph</code>?</p>",
        "id": 410880732,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704216996
    },
    {
        "content": "<p>Is it better to keep them separate or to somehow merge them (the parts that extract the graphs)?</p>",
        "id": 410880773,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704217019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410880415\">said</a>:</p>\n<blockquote>\n<p>It's still very possible to do, but you probably will have to parse and compile the file in question from the IO command itself. This is something that IMO would be worth doing, as it would follow the standard lean project workflow as opposed to copying and pasting some lean file into each project.</p>\n</blockquote>\n<p>Interesting, so the user would download a separate executable in this scenario?</p>",
        "id": 410881062,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704217166
    },
    {
        "content": "<p>The user would add <code>lean-graph</code> as a dependency for their project and run something like <code>lake exe graph --import Mathlib Nat.zero_add</code></p>",
        "id": 410881175,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704217218
    },
    {
        "content": "<p>No, the user would add the tool as a dependency to their lean project in the lakefile as usual</p>",
        "id": 410881180,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704217221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410881175\">said</a>:</p>\n<blockquote>\n<p>The user would add <code>lean-graph</code> as a dependency for their project and run something like <code>lake exe graph --import Mathlib Nat.zero_add</code></p>\n</blockquote>\n<p>I see. That's definitely better way to do this.</p>",
        "id": 410881489,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704217355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410880604\">said</a>:</p>\n<blockquote>\n<p>A hacked together bare-bones version can be found here: <a href=\"https://github.com/adamtopaz/lean_grader/blob/9838ec05c56b92b677c73322288f26634b7f4b62/Main.lean#L7\">https://github.com/adamtopaz/lean_grader/blob/9838ec05c56b92b677c73322288f26634b7f4b62/Main.lean#L7</a></p>\n</blockquote>\n<p>Does this utilize the cache of the project?</p>",
        "id": 410882738,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704217988
    },
    {
        "content": "<p>Yes the imports should come from the preexisting oleans</p>",
        "id": 410882830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704218037
    },
    {
        "content": "<p>If you just want the env from some imports there is a function called <code>withImports</code> or something like that in lean core that would help</p>",
        "id": 410882972,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704218088
    },
    {
        "content": "<p>If you want to run the commands in a certain file, that’s more complicated and that’s where code like in the link or that can be found in <code>lean-training-data</code> would be used</p>",
        "id": 410883050,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704218131
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.withImports#doc\">docs#Lean.withImports</a></p>",
        "id": 410883113,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704218157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410883050\">said</a>:</p>\n<blockquote>\n<p>If you want to run the commands in a certain file, that’s more complicated and that’s where code like in the link or that can be found in <code>lean-training-data</code> would be used</p>\n</blockquote>\n<p>What commands and what file?</p>",
        "id": 410883315,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704218232
    },
    {
        "content": "<p><a href=\"https://github.com/semorrison/lean-training-data/blob/e0072c48bd926e51c49a8d77667395d57fe076c0/TrainingData/Frontend.lean#L270\">https://github.com/semorrison/lean-training-data/blob/e0072c48bd926e51c49a8d77667395d57fe076c0/TrainingData/Frontend.lean#L270</a></p>",
        "id": 410883526,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704218332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410883113\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.withImports#doc\">docs#Lean.withImports</a></p>\n</blockquote>\n<p>That doesn't work, but this is what I was thinking of: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoreM.withImportModules#doc\">docs#CoreM.withImportModules</a></p>",
        "id": 410883885,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704218479
    },
    {
        "content": "<p>I could also compress the extractor file contents, onto one line, at which point anyone can just paste and copy it directly into the file without any needs of downloads.  Maybe that's what I'll do instead. I think that may be even easier for the users</p>",
        "id": 410884335,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704218642
    },
    {
        "content": "<p>But that extraction by running an executable could definitely be added later.</p>",
        "id": 410884559,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704218714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410878796\">said</a>:</p>\n<blockquote>\n<p>Is there a way to share the graph it creates (other than sharing the .json)?</p>\n</blockquote>\n<p>You can share visualizations now.</p>",
        "id": 411026734,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704293306
    },
    {
        "content": "<p>Oh great!</p>",
        "id": 411028316,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1704293947
    },
    {
        "content": "<p>Hey, this is cool! I just wrote a much simpler (Graphviz) version of this for myself in order to organize a large Lean file. I was viewing a graph of <em>all</em> the definitions in that file. Can I do that here? And have you thought about what kind of graph analyses might help understand intra-module and across-module dependency structures, as well as refactor files so that definitions with fewer dependencies are moved up?</p>",
        "id": 411101672,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1704327127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/411101672\">said</a>:</p>\n<blockquote>\n<p>Hey, this is cool! I just wrote a much simpler (Graphviz) version of this for myself in order to organize a large Lean file. I was viewing a graph of <em>all</em> the definitions in that file. Can I do that here? And have you thought about what kind of graph analyses might help understand intra-module and across-module dependency structures, as well as refactor files so that definitions with fewer dependencies are moved up?</p>\n</blockquote>\n<p>You can either extract the graph that starts from a single constant, or that starts from all constants in a namespace. If you want to view only the graph made by definitions, that's easy. After you extract the graph and open the JSON containing the extracted graph, there is a <strong>Filter</strong> section in the web app, so just unselect everything except <em>definitions</em>.</p>\n<p>I haven't thought about that. Right now, I visualize it as if all of them were in a single file.</p>",
        "id": 411202618,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704380051
    },
    {
        "content": "<p>nice visualisation!</p>",
        "id": 411968219,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1704817280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Discussion.20about.20Lean.20Graph/near/410880732\">said</a>:</p>\n<blockquote>\n<p>What do you think about <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> and its co-existence with your <code>ImportGraph</code>?</p>\n</blockquote>\n<p>First, there is a mathlib PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/9169\">#9169</a>) to split <code>lake exe graph</code> into it's own repo, so it can be used in other projects. The project is here: <a href=\"https://github.com/leanprover-community/import-graph\">leanprover-community/import-graph</a>.</p>\n<p>Quickly glancing at the code, I think it could very well make sense to merge the lean code of the two projects. The Lean code in this project seems quite concise.</p>\n<p>I also see no obstructions that <code>lake exe graph</code> (with some args) could create this <code>.json</code> file, which is used for the dynamic web graph, on demand.</p>\n<p><span class=\"user-mention\" data-user-id=\"674496\">@Patrik Cihal</span> I'll dm you to ask about your plans and maybe I can also help combining the functionalities of the two.</p>",
        "id": 411968223,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1704817284
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 411997239,
        "sender_full_name": "Patrik Cihal",
        "timestamp": 1704827853
    }
]