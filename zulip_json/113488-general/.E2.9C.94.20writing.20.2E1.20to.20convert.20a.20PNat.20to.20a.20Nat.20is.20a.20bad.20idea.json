[
    {
        "content": "<p>I have found something strange while playing with Lean. I think it might be a bug?<br>\nHere is a MWE: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- PNat.pow_coe (m : ℕ+) (n : ℕ) : ↑(m ^ n) = ↑m ^ n</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">    ↑(2 ^ 3)</span>\n\n<span class=\"cm\">  ⊢ ↑(2 ^ 3) = 1</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">PNat.pow_coe</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>If I am missing something, I would appreciate if you can let me know.<br>\n(btw, it is not a serious problem since rfl solves it. Weird nonetheless)</p>",
        "id": 431704728,
        "sender_full_name": "Hyeokjun Kwon",
        "timestamp": 1712436811
    },
    {
        "content": "<p>That's because writing <code>.1</code> to convert a PNat to a Nat is a bad idea:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- PNat.pow_coe (m : ℕ+) (n : ℕ) : ↑(m ^ n) = ↑m ^ n</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">    ↑(2 ^ 3)</span>\n\n<span class=\"cm\">  ⊢ ↑(2 ^ 3) = 1</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">PNat.pow_coe</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 431705412,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712437412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479089\">Hyeokjun Kwon</span> has marked this topic as resolved.</p>",
        "id": 431705754,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712437749
    },
    {
        "content": "<p>Thank you! I never realized there was any difference between using .1 and using : \\N to get Nat. I will avoid using .1 from now on.</p>",
        "id": 431705888,
        "sender_full_name": "Hyeokjun Kwon",
        "timestamp": 1712437910
    },
    {
        "content": "<p>They will probably be definitionally, but not syntactically, equal. And <code>rw</code> works up to syntactic equality. What Ruben suggests is the \"normal form\" for the function.</p>",
        "id": 431707185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712439234
    },
    {
        "content": "<p>This is a particularly nasty case, as <code>simp</code> isn't capable of performing the normalization for you (at least, not without <code>simproc</code>s)</p>",
        "id": 431711387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712443525
    },
    {
        "content": "<p>(this could be fixed by making <code>PNat</code> and <code>PNat.val</code> reducible)</p>",
        "id": 431711456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712443599
    }
]