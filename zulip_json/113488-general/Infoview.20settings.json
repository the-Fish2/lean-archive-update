[
    {
        "content": "<p>Can the following be set (i.e., already available as optional settings) in the Infoview?</p>\n<p>(1) I would like to see pairs written in <code>⟨x, y⟩</code> as all other constructors are. There are too many meanings of <code>( )</code> in Lean.</p>\n<p>(2 ) Instead of <code>(foo fun x =&gt; bar)</code> I want to see <code>foo (fun x =&gt; bar)</code>. Similarly, when it is a the end of the expression, instead of <code>foo fun x =&gt; bar</code> I want to see <code>foo (fun x =&gt; bar)</code> despite of the redundancy.</p>\n<p>(3) I would like multiple <code>fun</code>s not to be collapsed. Instead of <code>fun a b =&gt;</code> I would like to see <code>fun a =&gt; fun b =&gt;</code>.</p>\n<p>(4) I would like to see quantifiers without parentheses, i.e., <code>∀ i : ι, baz</code> instead of <code>∀ (i : ι), baz</code>.</p>",
        "id": 425271764,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709807200
    },
    {
        "content": "<p>These sound like <em>pretty-printer</em> settings, unless you're asking for UI in the infoview to change them</p>",
        "id": 425273222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709807618
    },
    {
        "content": "<p>Most of those sound controversial as defaults (though obviously being able to adjust them for your own use is reasonable), but I do like the idea of (4)</p>",
        "id": 425273573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709807717
    },
    {
        "content": "<p>Thanks for the keyword! Now, do such pretty-printer settings exist?</p>",
        "id": 425273605,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709807730
    },
    {
        "content": "<p>I doubt it very much</p>",
        "id": 425273647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709807747
    },
    {
        "content": "<p>But you can <em>maybe</em> write your own delaborator</p>",
        "id": 425273702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709807762
    },
    {
        "content": "<p>Just to clarify, I wasn't calling for making them default.</p>",
        "id": 425273732,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709807765
    },
    {
        "content": "<p>(1) amounts to disabling a built in delaborator, so should hopefully be possible</p>",
        "id": 425273916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709807824
    },
    {
        "content": "<p>My current workflow in bigger proofs is to repeatedly:<br>\n(1) make a step (like <code>rw</code> for example);<br>\n(2) write a <code>show</code> line to make sure the goal is really what I think it is, without having to rely on my interpretation of what the Infoview shows me.</p>\n<p>Needless to say, my current workflow is pretty slow.</p>",
        "id": 425274464,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709808007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Infoview.20settings/near/425273916\">said</a>:</p>\n<blockquote>\n<p>(1) amounts to disabling a built in delaborator, so should hopefully be possible</p>\n</blockquote>\n<p>Won't it result in <code>Prod.mk x y</code> instead?</p>",
        "id": 425275068,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709808194
    },
    {
        "content": "<p>My life has significantly improved when I learnt I could do things like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">vcsp</span> <span class=\"o\">{</span>\n  <span class=\"n\">moreServerOptions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[⟨</span><span class=\"bp\">`</span><span class=\"n\">autoImplicit</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">pp.structureInstances</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I am now wondering how much can be achieved just by adding the right settings to my lakefile.</p>",
        "id": 425275302,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709808267
    },
    {
        "content": "<p>PS: I guess (3) and (4) should go hand-in-hand as they both should address both <code>fun</code> and quantifiers.</p>",
        "id": 425275637,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709808366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Infoview.20settings/near/425273573\">said</a>:</p>\n<blockquote>\n<p>Most of those sound controversial as defaults (though obviously being able to adjust them for your own use is reasonable), but I do like the idea of (4)</p>\n</blockquote>\n<p>Speaking of defaults, would you agree that <code>∀ a : α, ∀ b : β, R a b</code> looks better than <code>∀ (a : α) (b : β), R a b</code> (the current)?</p>",
        "id": 425276777,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709808740
    },
    {
        "content": "<p>6 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/emojis.20for.20voting\">#general &gt; emojis for voting</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 425468522,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709885890
    }
]