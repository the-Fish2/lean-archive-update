[
    {
        "content": "<p>I was wondering if anyone might have a suggestion for this. I am attempting to <a href=\"https://github.com/pthomas505/FOL/blob/92a17fd5bfc7010372f93cc2a81e35f8633666b7/FOL/Parsing/RegExpToEpsilonNFA.lean\">define</a> the construction of nondeterministic finite automata with epsilon translations for regular expressions, and I am creating unique states for combining these automata by using the <a href=\"https://github.com/pthomas505/FOL/blob/92a17fd5bfc7010372f93cc2a81e35f8633666b7/FOL/Parsing/RegExpToEpsilonNFA.lean#L8\">EpsilonNFA.wrapLeft</a> and <a href=\"https://github.com/pthomas505/FOL/blob/92a17fd5bfc7010372f93cc2a81e35f8633666b7/FOL/Parsing/RegExpToEpsilonNFA.lean#L29\">EpsilonNFA.wrapRight</a> functions that I have defined. However, <a href=\"https://github.com/pthomas505/FOL/blob/92a17fd5bfc7010372f93cc2a81e35f8633666b7/FOL/Parsing/RegExpToEpsilonNFA.lean#L50\">proving</a> anything about using these functions seems to turn into a mess. For example, I can't seem to <a href=\"https://github.com/pthomas505/FOL/blob/92a17fd5bfc7010372f93cc2a81e35f8633666b7/FOL/Parsing/RegExpToEpsilonNFA.lean#L314\">prove</a> the properties of the NFA for the regular expression union operator. Is there maybe a trick to this that I am missing? Was this the wrong approach?</p>",
        "id": 443202560,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717731449
    },
    {
        "content": "<p>I'm glad to see more people are working on Regex! I would begin with proving properties of simpler constructs like these theorems and then use them to prove the desired one. </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">epsilon_closure</span><span class=\"w\"> </span><span class=\"n\">states</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Or</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">wrapLeft</span><span class=\"w\"> </span><span class=\"n\">σ_r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">epsilon_closure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">Or</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">eval_one</span><span class=\"w\"> </span><span class=\"n\">states</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Or</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">wrapLeft</span><span class=\"w\"> </span><span class=\"n\">σ_r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval_one</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">Or</span><span class=\"bp\">.</span><span class=\"n\">inl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n</code></pre></div>",
        "id": 444216384,
        "sender_full_name": "pandaman",
        "timestamp": 1718193694
    },
    {
        "content": "<p>I have made some progress with help since I posted this. Sorry. Thank you though!</p>",
        "id": 444379423,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1718252737
    }
]