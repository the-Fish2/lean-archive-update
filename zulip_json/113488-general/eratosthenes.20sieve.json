[
    {
        "content": "<p>I implemented the sieve of Eratosthenes with Lean. It has only been implemented and the proof has not yet been written. I want to prove that this function really returns a list of prime numbers less than or equal to n, but how do I prove this for a function defined in do notation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eratosthenes</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">isPrime</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkArray</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">true</span>\n\n  <span class=\"n\">isPrime</span> <span class=\"o\">:=</span> <span class=\"n\">isPrime.set</span><span class=\"bp\">!</span> <span class=\"mi\">0</span> <span class=\"n\">false</span>\n  <span class=\"n\">isPrime</span> <span class=\"o\">:=</span> <span class=\"n\">isPrime.set</span><span class=\"bp\">!</span> <span class=\"mi\">1</span> <span class=\"n\">false</span>\n\n  <span class=\"n\">for</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"n\">isPrime</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"k\">then</span>\n      <span class=\"n\">continue</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">p</span>\n    <span class=\"n\">while</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"k\">do</span>\n      <span class=\"n\">isPrime</span> <span class=\"o\">:=</span> <span class=\"n\">isPrime.set</span><span class=\"bp\">!</span> <span class=\"n\">q</span> <span class=\"n\">false</span>\n      <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">p</span>\n\n  <span class=\"n\">return</span> <span class=\"n\">isPrime</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runTest</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">eratosthenes</span> <span class=\"n\">n</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">l.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.print</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{i} \"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">runTest</span> <span class=\"mi\">19</span>\n</code></pre></div>",
        "id": 430065724,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711632014
    },
    {
        "content": "<p>my attempt is here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prime_iff_eratos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">eratosthenes</span> <span class=\"n\">n</span><span class=\"o\">)[</span><span class=\"n\">p</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"bp\">↔</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">mp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Nat.prime_def_lt</span><span class=\"o\">]</span>\n\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">case</span> <span class=\"n\">left</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"gr\">sorry</span>\n\n    <span class=\"n\">case</span> <span class=\"n\">right</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 430069597,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711633274
    },
    {
        "content": "<p>Related: <a href=\"#narrow/stream/270676-lean4/topic/Checking.20the.20Goldbach.20conjecture/near/429974821\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Checking.20the.20Goldbach.20conjecture/near/429974821</a></p>",
        "id": 430070354,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1711633543
    },
    {
        "content": "<p>Hi - just two obvious remarks: it is enough for p to go up to sqrt(n), and we can start wtrh q=p*p. The former point will be important when we go to the segmented sieve.</p>",
        "id": 430120849,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711645198
    },
    {
        "content": "<p>Thanks. How about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eratosthenes</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">isPrime</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkArray</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">true</span>\n\n  <span class=\"n\">isPrime</span> <span class=\"o\">:=</span> <span class=\"n\">isPrime.set</span><span class=\"bp\">!</span> <span class=\"mi\">0</span> <span class=\"n\">false</span>\n  <span class=\"n\">isPrime</span> <span class=\"o\">:=</span> <span class=\"n\">isPrime.set</span><span class=\"bp\">!</span> <span class=\"mi\">1</span> <span class=\"n\">false</span>\n\n  <span class=\"n\">for</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"n\">isPrime</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"k\">then</span>\n      <span class=\"n\">continue</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n      <span class=\"n\">break</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span>\n    <span class=\"n\">while</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span> <span class=\"k\">do</span>\n      <span class=\"n\">isPrime</span> <span class=\"o\">:=</span> <span class=\"n\">isPrime.set</span><span class=\"bp\">!</span> <span class=\"n\">q</span> <span class=\"n\">false</span>\n      <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">p</span>\n\n  <span class=\"n\">return</span> <span class=\"n\">isPrime</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runTest</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">eratosthenes</span> <span class=\"n\">n</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">l.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">l</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.print</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{i} \"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">runTest</span> <span class=\"mi\">3190</span>\n</code></pre></div>",
        "id": 430121627,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711645373
    },
    {
        "content": "<p>Also, I am a beginner - how do we check that the Lean compiler has realized that we are referring to eacha changed array entry at most once (within the function), so that the entire array isn't copied?</p>",
        "id": 430122136,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711645477
    },
    {
        "content": "<p>The code looks good. Let me run it.</p>",
        "id": 430122308,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711645515
    },
    {
        "content": "<blockquote>\n<p>how do we check that the Lean compiler has realized that we are referring to eacha changed array entry at most once</p>\n</blockquote>\n<p>I wonder if we could also make implementations that are obviously bad and compare their execution times by <code>#time</code>.</p>",
        "id": 430122645,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711645594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"603502\">Harald Helfgott</span> <a href=\"#narrow/stream/113488-general/topic/eratosthenes.20sieve/near/430122136\">said</a>:</p>\n<blockquote>\n<p>Also, I am a beginner - how do we check that the Lean compiler has realized that we are referring to eacha changed array entry at most once (within the function), so that the entire array isn't copied?</p>\n</blockquote>\n<p>You cannot reasily and reliably do that right now. The most accurate thing I can offer is to read the IR which is hard for newcomers obviously, the next best thing is dbgTraceIfShared but it is possible that the compiler will optimize your code differently in the presence of it.</p>\n<p>There are  a number of ideas floating around on how one might address this like type systems or opt-in runtime checks but all of those have issues and we do not currently have time to explore them.</p>",
        "id": 430144429,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711652095
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> oh</p>",
        "id": 430185193,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711673855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"603502\">Harald Helfgott</span> <a href=\"#narrow/stream/113488-general/topic/eratosthenes.20sieve/near/430122136\">said</a>:</p>\n<blockquote>\n<p>Also, I am a beginner - how do we check that the Lean compiler has realized that we are referring to eacha changed array entry at most once (within the function), so that the entire array isn't copied?</p>\n</blockquote>\n<p>See this discussion for how to tell if an object is being duplicated: <a href=\"#narrow/stream/270676-lean4/topic/Efficient.20hashmap.20counter.20from.20list\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Efficient.20hashmap.20counter.20from.20list</a></p>",
        "id": 430232074,
        "sender_full_name": "Jason Rute",
        "timestamp": 1711706629
    },
    {
        "content": "<p>(But Hendrik likely knows better than me, so take it with his warnings in mind.)</p>",
        "id": 430232273,
        "sender_full_name": "Jason Rute",
        "timestamp": 1711706723
    },
    {
        "content": "<p>Yes that id dbgTraceIfShared but it can occasionally give you false positives or negatives.  But in general what marc describes there is the closest approximation we have beyond \"read the IR\"</p>",
        "id": 430242461,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711711842
    },
    {
        "content": "<p>it outputs same addresses. it would be really the eratosthenes sieve.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">eratosthenes</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Id.run</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">isPrime</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Array.mkArray</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">true</span>\n\n<span class=\"w\">  </span><span class=\"n\">isPrime</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">isPrime.set</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">false</span>\n<span class=\"w\">  </span><span class=\"n\">isPrime</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">isPrime.set</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">false</span>\n\n<span class=\"w\">  </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"n\">ptrAddrUnsafe</span><span class=\"w\"> </span><span class=\"n\">isPrime</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">isPrime</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"n\">continue</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"n\">break</span>\n\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">p</span>\n<span class=\"w\">    </span><span class=\"n\">while</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"n\">isPrime</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">isPrime.set</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">false</span>\n<span class=\"w\">      </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">p</span>\n\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">isPrime</span>\n\n<span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"n\">eratosthenes</span><span class=\"w\"> </span><span class=\"mi\">131</span>\n</code></pre></div>",
        "id": 443592681,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1717937662
    }
]