[
    {
        "content": "<p>I am looking for a notebook interface for Lean 4? If there is not one already, I will make one myself for my own purposes or for others to use. By notebook I mean the kind of thing used by Maple and Mathematica and wxMaxima.</p>\n<p>Basically the idea is that there are cells and after typing in a cell  like #eval 2+2 in the cell beneath it shows the answer pretty typed in latex</p>\n<p>For doing proofs after you type a tactic in an input cell, in the output cell it shows the goals so far. (Unless you type a ; after the input).</p>\n<p>You could insert new cells higher up the notebook and then it would re-evaluate all cells below it that depend on this new information.</p>\n<p>I think this would make proofs much easier to follow as you could see the goals in order. (Or you could choose to hide all the output cells or hide the input cells.) Currently using the web interface you have to step through the tactics to see the goals in the right hand panel.</p>\n<p>This is just for my own purposes as this is how I like to do things. If other people prefer the current method of showing the goals etc. in a different panel then that is also fine too.</p>",
        "id": 442056807,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717337293
    },
    {
        "content": "<p>someone did make this:<br>\n<a href=\"#narrow/stream/113488-general/topic/lean4_jupyter.3A.20A.20Lean.204.20Jupyter.20kernel.20via.20repl\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/lean4_jupyter.3A.20A.20Lean.204.20Jupyter.20kernel.20via.20repl</a></p>",
        "id": 442062701,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1717341155
    },
    {
        "content": "<p>i hope that is what you're looking for</p>",
        "id": 442062777,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1717341197
    },
    {
        "content": "<p>another thing you could try is using a local install of lean in combination with vscode rather than the web interface.</p>",
        "id": 442063136,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1717341400
    },
    {
        "content": "<p>it's not quite the same thing as you're asking, but i'm certain it will give a better/richer interface than the web interface</p>",
        "id": 442063203,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1717341447
    },
    {
        "content": "<p>Thanks! I will definitely try this out.</p>",
        "id": 442076359,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717348082
    },
    {
        "content": "<blockquote>\n<p>I think this would make proofs much easier to follow as you could see the goals in order.</p>\n</blockquote>\n<p>Maybe for simple proofs with simple goal states. Some parts of mathlib have goal states that look like this (and this isn't even all of it):</p>\n<p><a href=\"/user_uploads/3121/Mfm387HgqOAGGCtj3LSfaJ-J/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Mfm387HgqOAGGCtj3LSfaJ-J/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Mfm387HgqOAGGCtj3LSfaJ-J/image.png\"></a></div><p>It's worth exploring new interfaces though! Maybe you could show abbreviated goal states by default that only show what's changed, so there are three visibility levels: hidden, terse, and full.</p>",
        "id": 442079173,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717349226
    },
    {
        "content": "<p>Some people like the Error Lens extension for VS Code. It adds messages right in the source view:</p>\n<p><a href=\"/user_uploads/3121/lKA5lhuSUjO4Ip9Srg7F4FGm/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lKA5lhuSUjO4Ip9Srg7F4FGm/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/lKA5lhuSUjO4Ip9Srg7F4FGm/image.png\"></a></div>",
        "id": 442079302,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717349283
    },
    {
        "content": "<p>(Speaking of Mathematica, a pipe dream I've had would be an editor interface that uses a <a href=\"https://reference.wolfram.com/language/guide/DefiningCustomNotation.html\">\"boxes\"</a>-like 2D layout system. This isn't to be confused with a structure editor that makes sure everything you write is syntactically well-formed, but instead, rather than strings, the source code is some sort of formatted document, with primitives for superscripts/subscripts, fractions, expandable parentheses, matrices, and so on. We wouldn't need to make so many compromises with mathematical notation if we had this, but it's also a hard sell since there would be no support for it in pre-existing editors or on GitHub!)</p>",
        "id": 442092291,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717356048
    },
    {
        "content": "<p>Yes, I'd imagine with big goals like that, after you'd broken them down into separate mini-goals, you could hide the original big goal and still have the same information.</p>\n<p>On the boxes thing, yes this would be nice. One idea would be to interface with an already built CAS or equation editor and provide some way to translate between lean syntax and a subset of the CAS syntax.  Another idea might be to add functions into lean which describe how a lean function like Sqrt is to be formatted in latex or MathML for example. I think these things can be done without altering the underlying lean language.</p>",
        "id": 442099286,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717359466
    },
    {
        "content": "<p>By the way, Patrick Massot and I have a library for Lean expressions -&gt; LaTeX (<a href=\"https://github.com/kmill/LeanTeX\">https://github.com/kmill/LeanTeX</a>). Some parts are awkward because Lean notations don't always map cleanly onto math notations.</p>\n<p>I'm in the process of rewriting it though for being able to handle hovering over subterms and getting type information. It'd be neat to wire it up to the Infoview at some point.</p>",
        "id": 442100492,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717360046
    },
    {
        "content": "<p>Is this a component of your unreleased proof informalization work, or just a project with some overlap?</p>",
        "id": 442105006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717362398
    },
    {
        "content": "<p>Yes, it's a component that was extracted from it.</p>",
        "id": 442109386,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717364952
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"725689\">@Mr Proof</span> , I'm the author of <code>lean4_jupyter</code>, hope you find it useful. Feedbacks welcome!</p>\n<p>The current UX is not great for getting the feedback when you are executing the commands/tactics, you'll need to hover the echoed input to see error, warning, and info, that means you are contantly switching between keyboard and mouse/touchpad, some might find it very annoying.</p>\n<p>This is inherited from <a href=\"https://github.com/cpitclaudel/alectryon?tab=readme-ov-file#as-a-library\">alectryon</a> which is designed to be viewed with focus on the Lean code, and hover to get details, and that detail could be as complicated as Kyle showed in the screenshot, so they can't be expanded by default.</p>\n<p>In a next iteration, I hope to figure out a way to solve this, provid a proper feedback without the need to hover, but avoid being too long. The initial idea is to have some heuristics to show all errors, warnings, and the info of the last line by default, and show only the beginning (~ 3 lines?) of a long message.</p>\n<p>Also I would like to replace alectryon UI with the Error Lens style (I only know it as squiggle lines before).</p>",
        "id": 442133770,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717381858
    },
    {
        "content": "<p>B.T.W. There are <a href=\"#narrow/stream/270676-lean4/topic/Prototype.3A.20Jupyter.20for.20Lean4\">previous prototypes of Lean 4 kernel</a> that you might want to check out. And the official literate programming way in near future is <a href=\"https://github.com/leanprover/verso\">Verso</a>.</p>",
        "id": 442134220,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717382110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20a.20notebook.20interface.20for.20Lean.204.3F/near/442100492\">said</a>:</p>\n<blockquote>\n<p>By the way, Patrick Massot and I have a library for Lean expressions -&gt; LaTeX (<a href=\"https://github.com/kmill/LeanTeX\">https://github.com/kmill/LeanTeX</a>). Some parts are awkward because Lean notations don't always map cleanly onto math notations.</p>\n<p>I'm in the process of rewriting it though for being able to handle hovering over subterms and getting type information. It'd be neat to wire it up to the Infoview at some point.</p>\n</blockquote>\n<p>How do you install this for visual studio or the lean web console?</p>",
        "id": 442147331,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717390510
    }
]