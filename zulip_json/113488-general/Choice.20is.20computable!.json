[
    {
        "content": "<p>Good news guys -- Choice can now be built in an entirely computable fashion! :) Behold the demonstration below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- Multi-sorted version of `Option`</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">POption</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- No value. -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"n\">POption</span> <span class=\"n\">α</span>\n  <span class=\"sd\">/-- Some value of type `α`. -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">POption</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">POption</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">POption.none</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">aux_1_sound</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p'</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n    <span class=\"n\">Inhabited</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p.val</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Exists.elim</span> <span class=\"n\">p.property</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span><span class=\"bp\">;</span>\n  <span class=\"n\">Classical.inhabited_of_nonempty</span> <span class=\"n\">h</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">aux_1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p'</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"n\">POption</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p.val</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n    <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p.val</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">conf</span> <span class=\"o\">(</span><span class=\"n\">type_of</span><span class=\"bp\">%</span> <span class=\"bp\">@</span><span class=\"n\">proof_irrel_heq</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"c1\">--proof irrelevance</span>\n  <span class=\"n\">conf</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p.val</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f₁</span> <span class=\"n\">q</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">POption.some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">conf</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"c1\">--law of excluded middle</span>\n\n<span class=\"c1\">--and now the main event:</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">computable-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">computable_indefiniteDescription</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">aux_1</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">computable-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">computable_choose</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">computable_indefiniteDescription</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">computable_choose_spec</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">computable_choose</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">computable_indefiniteDescription</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n\n<span class=\"c1\">--double check that the new `computable_choose` is identical in type to `Classical.choose`:</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Classical.choose</span> <span class=\"o\">:</span> <span class=\"n\">type_of</span><span class=\"bp\">%</span> <span class=\"bp\">@</span><span class=\"n\">computable_choose</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">computable_choose</span> <span class=\"o\">:</span> <span class=\"n\">type_of</span><span class=\"bp\">%</span> <span class=\"bp\">@</span><span class=\"n\">Classical.choose</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>My <code>computable_choose</code> isn't marked <code>noncomputable</code>, and as we can see it has the exact same type signature as that stinky old noncomputable <code>Classical.choose</code>. And it all typechecks and compiles fine without any <code>sorry</code>s or extra axioms <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> !</p>\n<p>(I know I'm about two days overdue here, but I only had the idea just now... <span aria-label=\"relieved\" class=\"emoji emoji-1f60c\" role=\"img\" title=\"relieved\">:relieved:</span> )</p>\n<p>EDIT: an older version of this was about the law of the excluded middle, preserved below so that the following few messages make sense, but this was an error.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>old text</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Good news guys -- the law of the excluded middle can now be built in an entirely computable fashion! :) Behold the demonstration below:</p>\n<p>import Mathlib</p>\n<p>inductive POption (α : Sort u) where<br>\n  /-- No value. -/<br>\n  | none : POption α<br>\n  /-- Some value of type <code>α</code>. -/<br>\n  | some (val : α) : POption α</p>\n<p>instance aux_nat_1_sound (p : Prop) : Inhabited (p ∨ ¬p) :=<br>\n  ⟨Classical.em p⟩</p>\n<p>partial def aux_nat_1 (p : Prop) (f₁ : ℕ → POption p) (f₂ : ℕ → POption ¬p) : p ∨ ¬p :=<br>\n  conf 0 where<br>\n  conf (n : ℕ) : p ∨ ¬p :=<br>\n  match f₁ n with<br>\n  | POption.some x =&gt; Or.inl x<br>\n  | _ =&gt; match f₂ n with<br>\n         | POption.some y =&gt; Or.inr y<br>\n         | _ =&gt; conf n.succ</p>\n<p>/-computable-/<br>\ndef computable_em (p : Prop) : p ∨ ¬p :=<br>\n  let proof_1 := fun _ ↦ POption.none;<br>\n  let proof_2 := fun _ ↦ POption.none;<br>\n  aux_nat_1 (p) (proof_1) (proof_2)</p>\n<p>theorem computable_em_is_Classical_em : (type_of% @computable_em) = (type_of% @Classical.em) :=<br>\n  rfl</p>\n<p>My <code>computable_em</code> isn't marked <code>noncomputable</code>, and <code>computable_em_is_Classical_em</code> proves it has the exact same type signature as that stinky old noncomputable <code>Classical.em</code>. And it all checks and compiles fine without any <code>sorry</code>s or extra axioms <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>(I know I'm about two days overdue here, but I only had the idea just now... <span aria-label=\"relieved\" class=\"emoji emoji-1f60c\" role=\"img\" title=\"relieved\">:relieved:</span> )</p>\n</div></div>",
        "id": 430916425,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1712118013
    },
    {
        "content": "<p>I'm not sure what you're claiming here. You know you can write <code>def computable_em' := Classical.em</code>?</p>",
        "id": 430916891,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712118386
    },
    {
        "content": "<p>it's a belated April Fool's joke, though Scott's point deflates it a bit</p>",
        "id": 430916959,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712118472
    },
    {
        "content": "<p>Oops, I'm terrible at noticing April. :-)</p>",
        "id": 430917034,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712118522
    },
    {
        "content": "<p>Alright, I admit I kind of botched the joke there since the law of the excluded middle <em>is</em> computable. I think the new version is more surprising / entertaining -- that I can make an entirely computable version of <code>Classical.choose</code>. :)</p>",
        "id": 430920932,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1712121350
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>the trick</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>partial def aux_nat_1</code> is a partial recursive function, and <code>computable_indefiniteDescription</code> calls <code>aux_nat_1</code> in a way which guarantees it will not halt. Here's a way of generalizing it to make any term of any type computable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"kd\">@[</span><span class=\"n\">instance</span><span class=\"kd\">]</span> <span class=\"kd\">axiom</span> <span class=\"n\">repr_T</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">T</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span>  <span class=\"c1\">-- failed to compile definition, consider marking it as 'noncomputable'</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo</span><span class=\"o\">⟩</span> <span class=\"k\">in</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"o\">()</span> <span class=\"n\">where</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">go</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Repr</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">repr_T</span><span class=\"o\">⟩</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[</span><span class=\"n\">instance</span><span class=\"kd\">]</span> <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">repr_T'</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"o\">()</span> <span class=\"n\">where</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Repr</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">go</span>\n\n<span class=\"c1\">-- #eval foo' -- all better</span>\n</code></pre></div>\n</div></div>",
        "id": 430937792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712130209
    }
]