[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_zero</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_add_two</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">even_property</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"n\">IH.</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">],</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">}</span><span class=\"bp\">.</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I know this proof in coq, but in lean my error message is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">LeanDelendum.Basic</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">mrb3i1b78iysik1lhsij5jdihjyja59n</span><span class=\"bp\">-</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"bp\">./././</span><span class=\"n\">LeanDelendum</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span> <span class=\"bp\">-</span><span class=\"n\">R</span> <span class=\"bp\">././.</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">LeanDelendum</span><span class=\"bp\">/</span><span class=\"n\">Basic.olean</span> <span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">LeanDelendum</span><span class=\"bp\">/</span><span class=\"n\">Basic.ilean</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">LeanDelendum</span><span class=\"bp\">/</span><span class=\"n\">Basic.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./././</span><span class=\"n\">LeanDelendum</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mi\">54</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">HMul</span> <span class=\"n\">Nat</span> <span class=\"bp\">?</span><span class=\"n\">m.344</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">./././</span><span class=\"n\">LeanDelendum</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"n\">token</span> <span class=\"bp\">'</span><span class=\"k\">with</span><span class=\"bp\">';</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"bp\">./././</span><span class=\"n\">LeanDelendum</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"kd\">end</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">insufficient</span> <span class=\"n\">scopes</span>\n</code></pre></div>",
        "id": 424957930,
        "sender_full_name": "Quinn",
        "timestamp": 1709673124
    },
    {
        "content": "<p>i don't <em>see</em> the typeclasses, is the inductive a typeclass under the hood? that would be the reverse of coq, haha</p>",
        "id": 424958067,
        "sender_full_name": "Quinn",
        "timestamp": 1709673219
    },
    {
        "content": "<p>also what's a metavariable, in this context?</p>",
        "id": 424958175,
        "sender_full_name": "Quinn",
        "timestamp": 1709673262
    },
    {
        "content": "<p>That looks like Lean 3 syntax, which is dead.</p>",
        "id": 424958479,
        "sender_full_name": "Julian Berman",
        "timestamp": 1709673380
    },
    {
        "content": "<p>(And your error message is indeed saying you're using Lean 4)</p>",
        "id": 424958490,
        "sender_full_name": "Julian Berman",
        "timestamp": 1709673388
    },
    {
        "content": "<p>excellent.</p>",
        "id": 424958833,
        "sender_full_name": "Quinn",
        "timestamp": 1709673563
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 424958898,
        "sender_full_name": "Quinn",
        "timestamp": 1709673591
    },
    {
        "content": "<p>what is \"declaration has free variable\"? the variable is clearly bounded! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Even</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_zero</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_add_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 424960369,
        "sender_full_name": "Quinn",
        "timestamp": 1709674213
    },
    {
        "content": "<p>oh am i naive to assume 0 and 2 literals will fly with \\N?</p>",
        "id": 424960439,
        "sender_full_name": "Quinn",
        "timestamp": 1709674242
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Playground</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Even</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">even_zero</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">even_add_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Playground</span>\n</code></pre></div>",
        "id": 424964988,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1709676009
    },
    {
        "content": "<p>The abbreviation <code>ℕ</code> doesn't represent Natural Numbers outside Mathlib if I recall correctly.</p>",
        "id": 424965137,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1709676068
    },
    {
        "content": "<p>Indeed, it's defined in <code>Mathlib.Init.Data.Nat.Notation</code></p>",
        "id": 424967399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709676973
    }
]