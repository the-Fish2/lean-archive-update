[
    {
        "content": "<p>I'm not sure if there's any interest in a Lean 3 bug report or if the community has moved on and no longer maintains it, but here's a minimal example to reproduce an issue I encountered:</p>\n<p><a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20order.filter.at_top_bot%0A%0Aopen%20filter%0A%0Aexample%20%28s%20%3A%20set%20%28%E2%84%95%20%E2%86%92%20%E2%84%95%29%29%20%28hs%20%3A%20s.countable%29%0A%20%20%3A%200%20%E2%89%A4%E1%B6%A0%5Bat_top%5D%20nat.succ%20%3A%3D%0Abegin%0A%20%20rw%20set.countable_iff_exists_injective%20at%20hs%2C%0A%20%20rw%20%5Beventually_le%2C%20eventually_at_top%5D%2C%20--%20fails%0Aend%0A%0Aexample%20%28s%20%3A%20set%20%28%E2%84%95%20%E2%86%92%20%E2%84%95%29%29%20%28hs%20%3A%20s.countable%29%0A%20%20%3A%200%20%E2%89%A4%E1%B6%A0%5Bat_top%5D%20nat.succ%20%3A%3D%0Abegin%0A%20%20rw%20%5Beventually_le%2C%20eventually_at_top%5D%2C%20--%20does%20not%20fail%0Aend\">Lean 3 playground link</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.at_top_bot</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.countable</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤ᶠ</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"n\">nat.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.countable_iff_exists_injective</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eventually_le</span><span class=\"o\">,</span> <span class=\"n\">eventually_at_top</span><span class=\"o\">],</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.countable</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤ᶠ</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"n\">nat.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eventually_le</span><span class=\"o\">,</span> <span class=\"n\">eventually_at_top</span><span class=\"o\">],</span> <span class=\"c1\">-- does not fail</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 409747466,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1703363797
    },
    {
        "content": "<p>I'm afraid lean 3 is very much unmaintained at this point</p>",
        "id": 409747691,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703364045
    },
    {
        "content": "<p>Ah okay, I thought that might be the case.</p>",
        "id": 409747707,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1703364068
    },
    {
        "content": "<p>I did try to see if I could reproduce it in Lean 4, but oddly the rewrite doesn't even work at all due to failing to find an instance of the pattern. Not exactly a bug, but kind of weird that it fails to rewrite when Lean 3 is able to rewrite:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.AtTopBot</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.Countable</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤ᶠ</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">EventuallyLE</span><span class=\"o\">,</span> <span class=\"n\">eventually_atTop</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 409747933,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1703364316
    },
    {
        "content": "<p>the filter is called <code>atTop</code> in mathlib4 and that's your issue</p>",
        "id": 409748012,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703364398
    },
    {
        "content": "<p>ah, thanks! weird that it wasn't showing an error with that term</p>",
        "id": 409748061,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1703364456
    },
    {
        "content": "<p>And your other issue is that <code>autoImplicit</code> is on by default, or you'd have gotten an error</p>",
        "id": 409748067,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703364461
    },
    {
        "content": "<p>oh I see</p>",
        "id": 409748091,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1703364482
    },
    {
        "content": "<p>thanks for the help!</p>",
        "id": 409748158,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1703364533
    },
    {
        "content": "<p>That's fascinating that this <code>rw</code> bug never popped up before, given just how well tested that tactic is. There aren't too many references to \"infer type failed, unknown variable\" on the zulip, and none in the issue tracker for Lean 3.</p>",
        "id": 409753020,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703369158
    },
    {
        "content": "<p>Yeah, I think it has something to do with classes... if I add <code>resetI</code> prior to the <code>rw</code> then the issue goes away. But it's nbd if this never gets fixed, it's not a blocker for me (and I should probably stop using Lean 3 anyway).</p>",
        "id": 409754364,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1703370550
    }
]