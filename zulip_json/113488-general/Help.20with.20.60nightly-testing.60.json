[
    {
        "content": "<p>(Background: mostly when I ask for help with the nightly-testing branch, it happens on private stream. Today I want to ask for help from someone who's not on that stream, so I'm moving here.)</p>",
        "id": 423299646,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708902928
    },
    {
        "content": "<p>Would <span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span> (the author), or anyone else, be able to take a look at <code>Mathlib.Algebra.ContinuedFractions.Computation</code> on the <code>nightly-testing</code> branch, and see if they can diagnose the error?</p>",
        "id": 423299705,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708902973
    },
    {
        "content": "<p>It is probably just that we need to explicitly simplify a let binding now (previously this happened in an uncontrollable fashion!)</p>",
        "id": 423299719,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708902999
    },
    {
        "content": "<p>But at the point of failure, it seems there are multiple goals (so either proof structuring has broken, or was never there?), and I'm having trouble working out what fix is required.</p>\n<p>(Aside: long proofs are no fun for maintenance. Please write, and ask for during review, short modular proofs! :-)</p>",
        "id": 423299760,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708903064
    },
    {
        "content": "<p>I have not been able to debug this, but there is a <code>field_simp</code> prior to the failure that I think also failed to do its job.  The goal at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"c1\">-- now unfold the recurrence one step and simplify both sides to arrive at the conclusion</span>\n      <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">compExactValue</span><span class=\"o\">,</span> <span class=\"n\">continuantsAux_recurrence</span> <span class=\"n\">s_nth_eq</span> <span class=\"n\">ppconts_eq</span> <span class=\"n\">pconts_eq</span><span class=\"o\">,</span>\n        <span class=\"n\">nextContinuants</span><span class=\"o\">,</span> <span class=\"n\">nextNumerator</span><span class=\"o\">,</span> <span class=\"n\">nextDenominator</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>changes from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">ppA</span> <span class=\"bp\">+</span> <span class=\"n\">ifp_n.fr</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">pA</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">ppB</span> <span class=\"bp\">+</span> <span class=\"n\">ifp_n.fr</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">pB</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">compExactValue</span> <span class=\"n\">pconts</span> <span class=\"n\">conts</span> <span class=\"o\">(</span><span class=\"n\">IntFractPair.of</span> <span class=\"n\">ifp_n.fr</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fr</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">((</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">ifp_n.fr</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">/</span>\n    <span class=\"o\">((</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">ifp_n.fr</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">IntFractPair.of</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">ifp_n.fr</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fr</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑⌊</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">ifp_n.fr</span><span class=\"bp\">⌋</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">/</span>\n      <span class=\"o\">(</span><span class=\"bp\">↑⌊</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">ifp_n.fr</span><span class=\"bp\">⌋</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑⌊</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">ifp_n.fr</span><span class=\"bp\">⌋</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">+</span>\n        <span class=\"o\">(</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">IntFractPair.of</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">ifp_n.fr</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fr</span><span class=\"o\">)</span> <span class=\"bp\">/</span>\n      <span class=\"o\">(</span><span class=\"bp\">↑⌊</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">ifp_n.fr</span><span class=\"bp\">⌋</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">+</span>\n        <span class=\"o\">(</span><span class=\"n\">continuantsAux</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">IntFractPair.of</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">ifp_n.fr</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fr</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Also, on master, closing with the formatting below avoids the state with more than one goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">hfr</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">]</span>\n        <span class=\"n\">ac_rfl</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">inv_eq_one_div</span><span class=\"o\">,</span> <span class=\"n\">hfr</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 423307497,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708910587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> could you PR that last change to <code>master</code>? I'll hit merge instantly. :-)</p>",
        "id": 423307621,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708910727
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10979\">#10979</a></p>",
        "id": 423307754,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708910844
    },
    {
        "content": "<p>I'll try to see if I can do some unfolding on master and try to reduce the work that the two <code>field_simp</code> do, but I am limited by time (it is getting late) and inability to work on nightly.</p>",
        "id": 423307949,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708911022
    },
    {
        "content": "<p>Scott, I tried to manually do the unfolding: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10980\">#10980</a>.  My strategy was to replace <code>let</code>s by <code>set</code>s and use <code>rw</code> until <code>dsimp</code> told me that it was no longer able to simplify before each <code>field_simp</code>.  I cannot test whether this fixes the proof on <code>nightly-testing</code>, though...</p>",
        "id": 423308845,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708911924
    },
    {
        "content": "<p>Okay, the PR adapting Mathlib to nightly-2024-02-26 is now up at <a href=\"https://github.com/leanprover-community/mathlib4/pull/10995\">https://github.com/leanprover-community/mathlib4/pull/10995</a>.</p>",
        "id": 423520983,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709001184
    },
    {
        "content": "<p>(Thanks for the intense work of many over the last few days making this happen!)</p>",
        "id": 423521013,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709001201
    },
    {
        "content": "<p>There will still be further adaptations needed before Lean's next release candidate later this week, but this is the first time Mathlb has been in sync with Lean nightlies since the 15th, so it's progress. :-)</p>",
        "id": 423521122,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709001244
    },
    {
        "content": "<p>This can now use eyes!</p>",
        "id": 423521143,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709001254
    },
    {
        "content": "<ul>\n<li>Please flag things that look wrong.</li>\n<li>Please fix things by pushing to the branch if you are confident!</li>\n<li>In practice it's best if changes get made simultaneously to this branch and to <code>nightly-testing</code>. (Cherry-pick?)</li>\n</ul>",
        "id": 423521270,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709001317
    },
    {
        "content": "<p>I can see already lots of things I am unhappy about. :-)</p>",
        "id": 423521339,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709001338
    },
    {
        "content": "<p>Note that it touches 651 files... this one is huge.</p>",
        "id": 423521698,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709001489
    },
    {
        "content": "<p>Something that has been useful in the past is to identify parts of the PR that could actually already be made on <code>master</code>. A very large fraction of the changes here do fall into that category. (All the additional arguments passed to <code>simp</code>, because <code>simp</code> no longer unfolds <code>let</code>s by default.)</p>",
        "id": 423522084,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709001809
    },
    {
        "content": "<p>We should think carefully about whether to do that now. Probably yes, but I want to be careful it doesn't cause unnecessary work.</p>\n<p>The process would be:</p>\n<ul>\n<li>Take some subset of the changed files (which \"you're sure are all only <code>simp</code> changes\"), and make a PR to <code>master</code> with those changes.</li>\n<li>Post in this thread, get it on <code>bors</code> quickly.</li>\n<li>Once it lands in <code>master</code>, merge <code>master</code> into <code>bump/v4.7.0</code> (this is always allowed), and then merge <code>bump/v4.7.0</code> into <code>bump/nightly-2024-02-26</code>.</li>\n<li>The change that hit master will propagate automatically to nightly-testing, but as long as you didn't change anything when copying out of this PR, that will merge cleanly as all these changes are already there.</li>\n</ul>",
        "id": 423522315,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709001967
    },
    {
        "content": "<p>After that process, the diff that this PR displays should shrink.</p>",
        "id": 423522334,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709001988
    },
    {
        "content": "<p>Probably it is best to announce here if you can going to attempt such a transplant onto master.</p>",
        "id": 423522399,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709002030
    },
    {
        "content": "<p>Thus: I am going to see if I can backport all the changes to Counterexamples and Archive to <code>master</code>.</p>",
        "id": 423522417,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709002047
    },
    {
        "content": "<p>Okay, that seems to have worked perfectly: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10996\">#10996</a></p>",
        "id": 423522691,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709002252
    },
    {
        "content": "<p>Process:</p>\n<ul>\n<li><code>git checkout master</code></li>\n<li><code>git merge --squash bump/nightly-2024-02-26</code></li>\n<li>revert all changes outside <code>Archive</code> and <code>Counterexamples</code></li>\n<li><code>lake build Archive Counterexamples</code></li>\n<li>observe that there were some failures in <code>Archive/Examples/IfNormalization/*</code>, so revert those too</li>\n<li><code>lake build Archive Counterexamples</code> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </li>\n<li>branch, commit, push, open PR</li>\n</ul>",
        "id": 423522849,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709002343
    },
    {
        "content": "<p>Fantastic, and <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> has sent it to bors.</p>\n<p>I propose waiting a moment to make sure that the multi-step merge process works as expected, and assuming it does we then divide up the remaining <code>simp</code> changes and move them to <code>master</code> in a small number of PRs.</p>",
        "id": 423523113,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709002542
    },
    {
        "content": "<p>(Possibly just one.)</p>",
        "id": 423523123,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709002550
    },
    {
        "content": "<p>Do you want me to start preparing the simp changes branch?</p>",
        "id": 423523576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709002810
    },
    {
        "content": "<p>git refuses to do <code>git merge --squash bump/nightly-2024-02-26</code></p>",
        "id": 423523815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709002930
    },
    {
        "content": "<p>That was a bad error message but it’s ok now. You first need to switch once to the bump branch.</p>",
        "id": 423523939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709003039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, that would be amazing, thanks! I need to take a break for a bit now, so you won't be treading on my toes. :-)</p>",
        "id": 423524024,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709003094
    },
    {
        "content": "<p>Ok, I’ll try.</p>",
        "id": 423524063,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709003118
    },
    {
        "content": "<p>I need to stop and go to bed. I just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/10999\">#10999</a> which touches 291 files. I went until the logic folder.</p>",
        "id": 423530092,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709007363
    },
    {
        "content": "<p>We’ll see what see  thinks of this selection.</p>",
        "id": 423530107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709007388
    },
    {
        "content": "<p>It means I’ve done half the required work in one hour, that’s not too bad.</p>",
        "id": 423530185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709007477
    },
    {
        "content": "<p>Great, I will review that now.</p>",
        "id": 423530239,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709007496
    },
    {
        "content": "<p>But first I will merge master into the bump branches.</p>",
        "id": 423530261,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709007525
    },
    {
        "content": "<p>Sigh, followed my own instructions, and unfortunately the diffs in Archive and Counterexamples still shows up.</p>",
        "id": 423530544,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709007763
    },
    {
        "content": "<p>Ahha! Forgot to push <code>bump/v4.7.0</code> after merging <code>master</code> into it. That done, the Archive and Countexamples diffs have mostly disappeared.</p>",
        "id": 423530801,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709007936
    },
    {
        "content": "<p>In the end I had to revert <a href=\"https://github.com/leanprover-community/mathlib4/pull/10999#:~:text=work%20on%20master-,6c4cfdb,-semorrison%20force%2Dpushed\">some</a> of the changes on Patrick's <a href=\"https://github.com/leanprover-community/mathlib4/pull/10999\">#10999</a>.</p>",
        "id": 423532900,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709009627
    },
    {
        "content": "<p>Essentially, the changes where we add let bindings to <code>simp_rw</code> rather than <code>simp</code> don't work on master. Not sure why?</p>",
        "id": 423532953,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709009648
    },
    {
        "content": "<p>Ah: a super useful thing that someone could do on <code>nightly-testing</code>:</p>\n<p>we have two regressions in pattern matching that show up in <code>Algebra/Homology/Augment.lean</code> (apparently independent problems, coincidentally in the same file!).</p>",
        "id": 423535487,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709011884
    },
    {
        "content": "<p>We need Mathlib free minimisations of these.</p>",
        "id": 423535546,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709011899
    },
    {
        "content": "<p>I may have a chance to work on this in about 6 hours, but not certain. If we can get minimisations today we can have them fixed in the 28 nightly, hopefully.</p>",
        "id": 423535640,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709011936
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11001\">#11001</a> is the follow-up to Patrick's <a href=\"https://github.com/leanprover-community/mathlib4/pull/10999\">#10999</a>, moving the rest of the simp changes that can be backported to master.</p>",
        "id": 423536457,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709012532
    },
    {
        "content": "<p>The PR description has a link to the diff (it is stacked on top of <a href=\"https://github.com/leanprover-community/mathlib4/pull/10999\">#10999</a>, which is with bors now.)</p>",
        "id": 423536478,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709012553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/423535640\">said</a>:</p>\n<blockquote>\n<p>I may have a chance to work on this in about 6 hours, but not certain. If we can get minimisations today we can have them fixed in the 28 nightly, hopefully.</p>\n</blockquote>\n<p>oops, I have a minimisation of the first problem, I'll heopfully do the second one as well now.</p>",
        "id": 423539402,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709014569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/423536457\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11001\">#11001</a> is the follow-up to Patrick's <a href=\"https://github.com/leanprover-community/mathlib4/pull/10999\">#10999</a>, moving the rest of the simp changes that can be backported to master.</p>\n</blockquote>\n<p>I'll review it now.</p>",
        "id": 423539479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709014646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I left a bunch of comments on that commit.</p>",
        "id": 423540623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709015320
    },
    {
        "content": "<p>Thanks. I was not nearly as careful as I needed to be making sure only the trivial changes went in.</p>",
        "id": 423541598,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709015997
    },
    {
        "content": "<p>for <a href=\"https://github.com/leanprover-community/mathlib4/pull/11001\">#11001</a>, I've just reverted all the changes the <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> complained about.</p>",
        "id": 423541663,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709016018
    },
    {
        "content": "<p>Soon <a href=\"https://github.com/leanprover-community/mathlib4/pull/10995\">#10995</a> will be down to a manageable size, and we can do another pass looking for backportable stuff</p>",
        "id": 423541684,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709016049
    },
    {
        "content": "<p>and then get down to fixing the grungy stuff!</p>",
        "id": 423541693,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709016055
    },
    {
        "content": "<p>I've also merged master on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11001\">#11001</a>, so hopefully it is reviewable directly now.</p>",
        "id": 423541709,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709016070
    },
    {
        "content": "<p>Okay, asked the bot to merge if CI passes.</p>",
        "id": 423541958,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709016185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/423532953\">said</a>:</p>\n<blockquote>\n<p>Essentially, the changes where we add let bindings to <code>simp_rw</code> rather than <code>simp</code> don't work on master. Not sure why?</p>\n</blockquote>\n<p><code>simp_rw</code> already unfolds <code>let</code>s by default, and complains when a lemma does not simplify further</p>",
        "id": 423557616,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709023784
    },
    {
        "content": "<p>Of course, thanks.</p>",
        "id": 423560436,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709024336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/423522315\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Once it lands in <code>master</code>, merge <code>master</code> into <code>bump/v4.7.0</code> (this is always allowed)</li>\n</ul>\n</blockquote>\n<p>I tried that, but I'm \"not authorized to push to this branch\"</p>",
        "id": 423572606,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709028552
    },
    {
        "content": "<p>Interesting. I just pushed.</p>",
        "id": 423575596,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709029498
    },
    {
        "content": "<p>Maybe there is a branch protection rule?</p>",
        "id": 423575652,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709029514
    },
    {
        "content": "<p>Some attempt to parallelize here:</p>\n<ul>\n<li>Mathlib/Algebra/ContinuedFractions/Computation/CorrectnessTerminating.lean needs to be fixed, starting over. We don't want to use <code>let __x := ...</code>, instead we need to work out where to put the simp.</li>\n<li>similarly Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean</li>\n<li>(aside: are these continued fractions files maintainable? what should we do with them?)</li>\n<li>similarly, <code>let __x :=</code> needs to be reverted in<ul>\n<li>Mathlib/FieldTheory/SeparableDegree.lean</li>\n<li>Mathlib/LinearAlgebra/FreeModule/Norm.lean</li>\n</ul>\n</li>\n<li>Mathlib/Algebra/Free.lean, I guess we could merge as is, but it would be great if someone could make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (failure to match on <code>x * y</code>) so we can get this fixed.</li>\n<li>same issue in Mathlib/Computability/RegularExpressions.lean</li>\n<li>Mathlib/Algebra/Homology/Augment.lean has sorries, but will be fixed upstream tomorrow</li>\n<li>are we worried about Mathlib/Algebra/GroupWithZero/Units/Basic.lean? Someone could see if there is a better fix, and/or try to get to the bottom of the change?</li>\n<li>Mathlib/LinearAlgebra/PiTensorProduct.lean and Mathlib/Order/CompactlyGenerated/Basic.lean still needs a solution: how to get aesop to unfold lets?</li>\n</ul>",
        "id": 423576681,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709029822
    },
    {
        "content": "<p>I realise that just waiting for the fix tomorrow for <code>Algebra/Homology/Augment</code> is not really going to work. <code>nightly-testing</code> is already broken again after <code>2024-02-27</code> arrived today.</p>",
        "id": 423582905,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709031892
    },
    {
        "content": "<p>I would really like to get this batch of fixes in, without having to add those to the mix.</p>",
        "id": 423582976,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709031912
    },
    {
        "content": "<p>So I think the only was we can achieve this is having sorries on <code>bump/v4.7.0</code>,just for <code>Augment</code>.</p>",
        "id": 423583017,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709031932
    },
    {
        "content": "<p>Not great, but the alternative is pretty unpleasant.</p>",
        "id": 423583029,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709031941
    },
    {
        "content": "<p>Would those sorries also be on <code>master</code>?</p>",
        "id": 423583154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709031984
    },
    {
        "content": "<p>No.</p>",
        "id": 423583234,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709032021
    },
    {
        "content": "<p>Because once we fix mathlib for 2024-02-27, we will be able to move to 2024-02-28, which will contain the fixes to those sorries.</p>",
        "id": 423583307,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709032051
    },
    {
        "content": "<p>And Mathlib master will only ever see v4.7.0-rc1, which is NET 2024-02-29. :-)</p>",
        "id": 423583427,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709032094
    },
    {
        "content": "<p>ok, understood</p>",
        "id": 423583465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709032108
    },
    {
        "content": "<p>Then it isn't too bad, right?</p>",
        "id": 423583485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709032120
    },
    {
        "content": "<p>I need to sleep now. I've gone most of the way through <a href=\"https://github.com/leanprover-community/mathlib4/pull/10995\">#10995</a> (up to <code>test/observe.lean</code>). Besides <code>FIXME nightly-testing</code> notes, the list above, and comments on the PR, I am otherwise happy.</p>",
        "id": 423583589,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709032166
    },
    {
        "content": "<p>If anyone has time to address some of these, that would be great.</p>",
        "id": 423583642,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709032188
    },
    {
        "content": "<p>It's also possible to work on <code>nightly-testing</code> directly, to deal with the new breakages that are already there from 2024-02-27. There are breakages. I fixed one, and will look at it more tomorrow.</p>",
        "id": 423583772,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709032237
    },
    {
        "content": "<p>Let me start with <code>Mathlib/FieldTheory/SeparableDegree.lean</code>.</p>",
        "id": 423586904,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1709033429
    },
    {
        "content": "<p>Next up: <code>LinearAlgebra/FreeModule/Norm.lean</code>.</p>",
        "id": 423588046,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1709033877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/423586904\">said</a>:</p>\n<blockquote>\n<p>Let me start with <code>Mathlib/FieldTheory/SeparableDegree.lean</code>.</p>\n</blockquote>\n<p>Oops, I thought it worked on my machine. Let me try again...</p>",
        "id": 423589441,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1709034525
    },
    {
        "content": "<p>After lunch I will see if I can do something with the continued fractions.</p>",
        "id": 423590379,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1709034945
    },
    {
        "content": "<p>Side remark: My impression when looking at the Continued Fractions files a while ago was that they are overly \"heavy\" and perhaps too much inspired by CS data structure think. I think it would be good to have a more light-weight implementation of (regular) continued fractions of real numbers that is easier to use (with glue to relate it to the more general existing stuff). I did a very limited amount of that with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.convergent#doc\">docs#Real.convergent</a> already, which I could extend (this would also be helpful for adding material relating Pell's Equation to continued fractions, from a recent BSc thesis of a student of mine), if there is interest/approval.<br>\nOf course, this is not very much related to the problems discussed in this thread <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 423595532,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709036981
    },
    {
        "content": "<p>To unfold <code>let</code> bindings in aesop, you can write <code>by aesop (add norm simp [f, g])</code>.</p>",
        "id": 423601904,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1709039135
    },
    {
        "content": "<p>I made the same diagnosis of the continued fractions material ages ago but I think I never even tried to refactor it</p>",
        "id": 423608799,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709041455
    },
    {
        "content": "<p>So I think that's all from me today, the following I haven't looked at:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/423576681\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Mathlib/Algebra/Free.lean, I guess we could merge as is, but it would be great if someone could make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (failure to match on <code>x * y</code>) so we can get this fixed.</li>\n<li>same issue in Mathlib/Computability/RegularExpressions.lean</li>\n<li>Mathlib/Algebra/Homology/Augment.lean has sorries, but will be fixed upstream tomorrow</li>\n<li>are we worried about Mathlib/Algebra/GroupWithZero/Units/Basic.lean? Someone could see if there is a better fix, and/or try to get to the bottom of the change?</li>\n</ul>\n</blockquote>",
        "id": 423609137,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1709041569
    },
    {
        "content": "<p>Thank you Anne, that's great. I'll get started shortly.</p>",
        "id": 423703832,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709070978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/423576681\">said</a>:</p>\n<blockquote>\n<p>Some attempt to parallelize here:</p>\n<ul>\n<li>Mathlib/Algebra/ContinuedFractions/Computation/CorrectnessTerminating.lean needs to be fixed, starting over. We don't want to use <code>let __x := ...</code>, instead we need to work out where to put the simp.</li>\n<li>similarly Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean</li>\n<li>(aside: are these continued fractions files maintainable? what should we do with them?)</li>\n<li>similarly, <code>let __x :=</code> needs to be reverted in<ul>\n<li>Mathlib/FieldTheory/SeparableDegree.lean</li>\n<li>Mathlib/LinearAlgebra/FreeModule/Norm.lean</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>I'm really confused -- I pushed all these fixes to <code>nightly-testing</code> hours before you sent this message.</p>",
        "id": 423706612,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709071687
    },
    {
        "content": "<p>Where did <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> push their changes?</p>",
        "id": 423706678,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709071714
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10995\">#10995</a></p>",
        "id": 423707342,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709071989
    },
    {
        "content": "<p>OK, I think I finished merging our changes, and hopefully <code>nightly-testing</code> merges without conflicting.</p>",
        "id": 423709457,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709072594
    },
    {
        "content": "<p>Sorry about the confusion between nightly-testing and <a href=\"https://github.com/leanprover-community/mathlib4/pull/10995\">#10995</a>. The problem we have now is that <code>nightly-testing</code> is already testing 2024-02-27.</p>",
        "id": 423712254,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709073957
    },
    {
        "content": "<p>I think it's best going forward if fixes that can be made on <a href=\"https://github.com/leanprover-community/mathlib4/pull/10995\">#10995</a> happen there first, and then we merge to nightly-testing.</p>",
        "id": 423712331,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709073980
    },
    {
        "content": "<p>(Because the other direction is not possible, as nightly-testing will accumulate changes specific to 2024-02-27 and later.)</p>",
        "id": 423712364,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709074001
    },
    {
        "content": "<p>I've fixed IfNormalization. The simp proofs were going a slightly different direction, and to get the automation back on track I needed to add </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">lookup_insert_eq_none</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">AList</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">k'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">l.insert</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lookup</span> <span class=\"n\">k'</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">l.lookup</span> <span class=\"n\">k'</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>which seems reasonable enough.</p>",
        "id": 423718697,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709077434
    },
    {
        "content": "<p>The <code>WithoutAesop</code> proof still needs a bit more help after <code>simp</code> used to finish, but at least there's no regression in the aesop showcase now.</p>",
        "id": 423718845,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709077505
    },
    {
        "content": "<p>I just fixed it better, after regenerating the <code>simp says</code> statements. They can be confusing when fixing a proof!!</p>",
        "id": 423723804,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709079953
    },
    {
        "content": "<p>I'm just going through the files one by one now, and on this pass everything looks good.</p>",
        "id": 423723866,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709079978
    },
    {
        "content": "<p>I'm hoping we can merge soon.</p>",
        "id": 423723878,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709079983
    },
    {
        "content": "<p>Okay, I would like to get <a href=\"https://github.com/leanprover-community/mathlib4/pull/10995\">#10995</a> merged!</p>",
        "id": 423725618,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709080893
    },
    {
        "content": "<p>It all looks good to me. There are remaining issues, but we have fixes in for all of them, due for <code>nightly-2024-02-28</code> in a few hours.</p>",
        "id": 423725658,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709080917
    },
    {
        "content": "<p>We nevertheless need to merge this as is (as discussed with Johan above), because there are more breakages on nightly-testing coping with 2024-02-27 that are still unresolved.</p>",
        "id": 423725739,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709080952
    },
    {
        "content": "<p>So, for requests from others:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1\">#1</a> priority is to do the final review of this and do a squash merge (no bors necessary).<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/2\">#2</a> priority is to find out what is breaking nightly-2024-02-27!</p>",
        "id": 423726416,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709081247
    },
    {
        "content": "<p>Taking a look</p>",
        "id": 423727248,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709081488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I just pushed two changes that compile locally and shouldn't change anything. Is it safe to go ahead and squash merge now, or should I wait for CI?</p>",
        "id": 423727712,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709081852
    },
    {
        "content": "<p>I left some comments.</p>",
        "id": 423728996,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709082732
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>, looking now.</p>",
        "id": 423730626,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709083955
    },
    {
        "content": "<p>re: <code>nightly-testing</code>: I've minimised the issue in Mathlib/Order/Closure, and Leo is looking into it. There are many other failures!</p>",
        "id": 423730648,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709083981
    },
    {
        "content": "<p>Is <code>ZeroMorphisms</code> not building?</p>",
        "id": 423730679,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709084003
    },
    {
        "content": "<blockquote>\n<p>Mathlib/Algebra/Free.lean, I guess we could merge as is, but it would be great if someone could make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (failure to match on x * y) so we can get this fixed</p>\n</blockquote>\n<p><del>This is actually due to a <code>consumeMData</code> <em>fix</em>, I think. <code>binop%</code> was adding metadata and bypassing the check.</del> Nvm; see below. MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\"%&amp;%\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Test.test</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">%&amp;%</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span><span class=\"n\">Test.test</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Foo.foo</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">Test.test</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- invalid pattern</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">%&amp;%</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- invalid pattern</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">%&amp;%</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span><span class=\"n\">binop</span><span class=\"bp\">%</span> <span class=\"n\">Test.test</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">%&amp;%</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- works (and shouldn't)</span>\n</code></pre></div>",
        "id": 423731061,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709084302
    },
    {
        "content": "<p>Okay, sounds good. Shall I strip out the comments about it, then?</p>",
        "id": 423731122,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709084364
    },
    {
        "content": "<p>It essentially goes with the porting note in <code>Mathlib.Algebra.Free</code>: the fact that <code>match_pattern</code> can't be added to <code>Mul.mul</code> here anymore is what forces us to not use the notation. Maybe call it a porting note and refer to the one above?</p>",
        "id": 423731243,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709084458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/423730679\">said</a>:</p>\n<blockquote>\n<p>Is <code>ZeroMorphisms</code> not building?</p>\n</blockquote>\n<p>Wrong branch <span aria-label=\"skull\" class=\"emoji emoji-1f480\" role=\"img\" title=\"skull\">:skull:</span></p>",
        "id": 423731529,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709084662
    },
    {
        "content": "<p><code>binop%</code> doesn't add metadata, or am I mistaken?</p>",
        "id": 423731547,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709084680
    },
    {
        "content": "<p>(It would be nice to have <code>match_pattern</code> for all of our notation anyway! We add it explicitly for addition (but nothing else) <a href=\"https://github.com/leanprover/lean4/blob/a179469061b4086b6fe89677f84797289ecae0b8/src/Init/Prelude.lean#L1519\">here</a>.)</p>",
        "id": 423731584,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709084705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/423731547\">said</a>:</p>\n<blockquote>\n<p><code>binop%</code> doesn't add metadata, or am I mistaken?</p>\n</blockquote>\n<p>Ah, you might be right. My diagnosis might be too hasty; let me check.</p>",
        "id": 423731666,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709084769
    },
    {
        "content": "<p><code>binop%</code> is special cased as a pattern: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/PatternVar.lean#L161\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/PatternVar.lean#L161</a></p>",
        "id": 423731806,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709084875
    },
    {
        "content": "<p>Hmm, interesting. So that might be a bug after all.</p>",
        "id": 423731932,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709084959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> et al, I've responded to these comments. My flag is up for merging this one again!</p>",
        "id": 423732269,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709085218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/423731932\">said</a>:</p>\n<blockquote>\n<p>Hmm, interesting. So that might be a bug after all.</p>\n</blockquote>\n<p>Oh, I see, it is intentional: the following check that the <code>binop</code> operator is necessarily registered with <code>match_pattern</code> anyway was added last week: <a href=\"https://github.com/leanprover/lean4/commit/a0089d466760122295d4b1dabe4bd3e931222415\">https://github.com/leanprover/lean4/commit/a0089d466760122295d4b1dabe4bd3e931222415</a></p>",
        "id": 423732470,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709085363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>, I think we're going to merge now, you're okay with any binop modifications happening later?</p>",
        "id": 423732533,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709085416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'd say it's working by design.</p>\n<p>I've looked through all the changes in the PR a couple times, and I'm happy to squash merge it.</p>",
        "id": 423732586,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709085472
    },
    {
        "content": "<p>Should I wait for CI, or can I do it now?</p>",
        "id": 423732600,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709085482
    },
    {
        "content": "<p>Let's wait for CI.</p>",
        "id": 423732662,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709085524
    },
    {
        "content": "<p>Leo is going to add a flag for <code>simp</code> (and I guess also <code>rw</code>) that enables the old behaviour re: instance arguments.</p>",
        "id": 423732688,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709085547
    },
    {
        "content": "<p>Our plan is to initially patch Mathlib just by using this flag at every error. (oooh, can I automate?)</p>",
        "id": 423732712,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709085568
    },
    {
        "content": "<p>These flags will end up in <code>master</code>, and will be a new form of debt Mathlib needs to pay down...</p>",
        "id": 423732732,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709085593
    },
    {
        "content": "<p>(Btw, seeing as the <code>binop%</code> check is intentional, I think what we want is simply to add <code>[match_pattern]</code> to some (all?) of the other basic binary operators in Init.Prelude!)</p>",
        "id": 423732906,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709085684
    },
    {
        "content": "<p>Thread: <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/.40.5Bmatch_pattern.5D.20for.20basic.20binary.20operators\">#lean4 &gt; @[match_pattern] for basic binary operators</a></p>",
        "id": 423734121,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709086665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> There are just a few errors left in tests, for rewrite search and some <code>simp? says</code> in test/matrix</p>",
        "id": 423738330,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709089610
    },
    {
        "content": "<p>Looks like the two <code>simp? ... says</code> tests both have <code>simp?</code> inserting the <code>Fin.isValue</code> simproc into <code>simp only</code>. Interestingly, this can be removed from the <code>simp only</code> without affecting the state after it at all. Does this deserve a note?</p>",
        "id": 423742209,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709092194
    },
    {
        "content": "<p>Not sure</p>",
        "id": 423742294,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709092249
    },
    {
        "content": "<p>(And I <em>just</em> pushed fixes. Hopefully CI passes now.)</p>",
        "id": 423742308,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709092263
    },
    {
        "content": "<p>It's long been the case that sometimes there are simp lemmas that simp uses that aren't necessary for simp to simp, but there's nothing wrong with that. I think simprocs aren't very different in that regard.</p>",
        "id": 423742524,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709092477
    },
    {
        "content": "<p>It seems we're going to see a bit of noise here in the future, since <code>Fin.isValue</code> normalized literals to use the Lean core instance from the Mathlib one.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Fin.isValue</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- simp made no progress</span>\n</code></pre></div>",
        "id": 423742844,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709092724
    },
    {
        "content": "<p>Merged <a href=\"https://github.com/leanprover-community/mathlib4/pull/10995\">#10995</a> into <a href=\"https://github.com/leanprover-community/mathlib4/tree/bump%2Fv4.7.0\">branch#bump/v4.7.0</a></p>",
        "id": 423748280,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709096975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> I'm hoping I might be able to ask for some assistance with <code>field_simp</code>.</p>",
        "id": 424159597,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709267988
    },
    {
        "content": "<p>It is breaking on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11070\">#11070</a>.</p>",
        "id": 424159600,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709267996
    },
    {
        "content": "<p>This is our attempt to get Mathlib onto nightly-2024-02-29.</p>",
        "id": 424159656,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709268018
    },
    {
        "content": "<p>There seems to be some interaction with the <code>field_simp</code> discharger and the changes in <a href=\"https://github.com/leanprover/lean4/pull/3523\">lean#3523</a>. I don't actually see a logic change in <a href=\"https://github.com/leanprover/lean4/pull/3523\">lean#3523</a>, but it's certainly possible there is one there.</p>",
        "id": 424159675,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709268061
    },
    {
        "content": "<p>So far my efforts have been looking at the output of <code>set_option trace.Meta.Tactic.simp true in</code> in the failing test on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11070\">#11070</a> in <code>test/FieldSimp.lean</code>.</p>",
        "id": 424159698,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709268093
    },
    {
        "content": "<p>The relevant difference in the trace is that on master we get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">pow_ne_zero</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">False</span>\n\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">False</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">True</span>\n\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">mul_ne_zero</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">False</span>\n\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">False</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">True</span>\n\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">div_eq_iff</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"mi\">18</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">8</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">18</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(i.e. this is simp discharging the side condition of <code>div_eq_iff</code>, and then successfully rewriting by it)</p>",
        "id": 424159769,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709268149
    },
    {
        "content": "<p>where on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11070\">#11070</a> it fails as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">div_eq_iff</span> <span class=\"n\">discharge</span> <span class=\"bp\">❌</span>\n      <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">@</span><span class=\"n\">mul_ne_zero</span> <span class=\"n\">discharge</span> <span class=\"bp\">❌</span> <span class=\"n\">max</span> <span class=\"n\">depth</span>\n        <span class=\"mi\">4</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">eq_self</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n        <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n      <span class=\"k\">with</span>\n        <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat_eq_ofNat</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n        <span class=\"n\">OfNat.ofNat</span> <span class=\"bp\">?</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"bp\">?</span><span class=\"n\">n</span>\n      <span class=\"k\">with</span>\n        <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat_ne_zero</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n        <span class=\"n\">OfNat.ofNat</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n      <span class=\"k\">with</span>\n        <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">mul_right_eq_self</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n        <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n      <span class=\"k\">with</span>\n        <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">mul_left_eq_self</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n        <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">b</span>\n      <span class=\"k\">with</span>\n        <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">mul_eq_left₀</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n        <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n      <span class=\"k\">with</span>\n        <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">mul_eq_right₀</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n        <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">b</span>\n      <span class=\"k\">with</span>\n        <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">@</span><span class=\"n\">IsLeftRegular.mul_left_eq_zero_iff</span> <span class=\"n\">discharge</span> <span class=\"bp\">❌</span> <span class=\"n\">max</span> <span class=\"n\">depth</span>\n        <span class=\"n\">IsLeftRegular</span> <span class=\"mi\">4</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">@</span><span class=\"n\">IsRightRegular.mul_right_eq_zero_iff</span> <span class=\"n\">discharge</span> <span class=\"bp\">❌</span> <span class=\"n\">max</span> <span class=\"n\">depth</span>\n        <span class=\"n\">IsRightRegular</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 424159851,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709268247
    },
    {
        "content": "<p>I'm only picking on David here because he did the port of <code>field_simp</code> to Lean 4. If anyone else would like to take a look, I think I'm stuck.</p>",
        "id": 424159929,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709268338
    },
    {
        "content": "<p>Adding some <code>logInfo</code>s for the four strategies in field_simp's <code>discharge</code>, I see quite different behaviour on <code>master</code> and on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11070\">#11070</a>:</p>\n<p>On <code>master</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">discharge</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>On <a href=\"https://github.com/leanprover-community/mathlib4/pull/11070\">#11070</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">discharge</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">discharge</span> <span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 424160421,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709268784
    },
    {
        "content": "<p>It looks like there are two logic changes in <a href=\"https://github.com/leanprover/lean4/pull/3523\">lean#3523</a>.</p>\n<ol>\n<li>now when synthesizing simp lemma args, the max discharge depth is respected</li>\n<li><a href=\"https://github.com/leanprover/lean4/pull/3523/files#diff-03aac34de8739bc26a620c563d0ec2e710af831b83a6c0ad2d55cd2cf61949f7R512\">this line</a> is no longer protected by a try/catch</li>\n</ol>\n<p>The second change doesn't seem to be affecting the trace, but the max depth errors do seem related.</p>",
        "id": 424161388,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709269577
    },
    {
        "content": "<p>Yep, just got it.</p>",
        "id": 424161431,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709269630
    },
    {
        "content": "<p>Previously the max discharge depth was never being checked.</p>",
        "id": 424161443,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709269638
    },
    {
        "content": "<p>and field_simp was relying on going well past the default of 2.</p>",
        "id": 424161446,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709269649
    },
    {
        "content": "<p>I guess that's basically hardcoded to <code>maxDischargeDepth : Nat  := 2</code></p>",
        "id": 424161448,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709269650
    },
    {
        "content": "<p>setting it higher, everything works.</p>",
        "id": 424161450,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709269654
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 424162695,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709270866
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/leanprover-community/mathlib4/pull/11070\">#11070</a> is nearly ready to go.</p>\n<p>There is a serious problem left over for afterwards. (Could someone adopt it at least to the extent of writing an issue?)</p>\n<p><code>field_simp</code> is a very ambitious tactic, that tries to prove that it can clear denominators. Previously it was taking advantage of essentially a bug in the simp discharging framework, so that parts of its discharging strategy were not limited by <code>maxDischargeDepth</code> (so it could \"keep trying\"), but everyone else was limited (so <code>simp</code> didn't waste time exploring large trees of discharges). Now the <code>maxDischargeDepth</code> is enforced for everyone, so to keep <code>field_simp</code> working we have to increase its <code>maxDischargeDepth</code>. That makes it extremely slow. I've kept the <code>maxDischargeDepth</code> to a minimum, but still there are some <code>set_option maxHeartbeats</code> (all with notes attached), and <code>Archive/SolutionOfCubic.lean</code> apparently needs an even higher depth, so has a sorried proof.</p>\n<p>After we've merged this, someone is going to have to rewrite <code>field_simp</code> to make it performant.</p>\n<p>In the meantime, we need to decide what to do in <code>SolutionOfCubic</code>. Could someone just patch the sorry by hand?</p>",
        "id": 424169752,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709276296
    },
    {
        "content": "<p>Besides this issue, I would be happy to have review / delegation on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11070\">#11070</a>.</p>",
        "id": 424169765,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709276311
    },
    {
        "content": "<p>Do we have a <code>field_simp?</code>. Is that easy to create?</p>",
        "id": 424169944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709276412
    },
    {
        "content": "<p>We don't. It wouldn't be particularly hard, I guess.</p>",
        "id": 424169990,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709276435
    },
    {
        "content": "<p>I'll review <a href=\"https://github.com/leanprover-community/mathlib4/pull/11070\">#11070</a> now.</p>",
        "id": 424170005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709276446
    },
    {
        "content": "<p><code>field_simp</code> looks like it is set up to allow a <code>config := {...}</code> argument, but I just get an error about a sorry when I try to use it.</p>",
        "id": 424170017,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709276459
    },
    {
        "content": "<p>If that worked, we could locally set the <code>maxDischargeDepth</code> even higher for particularly broken invocations of <code>field_simp</code> (e.g. SolutionsOfCubic).</p>",
        "id": 424170070,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709276497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Could you please update the PR commit message?</p>",
        "id": 424170077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709276500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I left a review. Just 2 more comments, on top of the outstanding ones.</p>",
        "id": 424170756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709276845
    },
    {
        "content": "<p>I'm trying to get rid of that one <code>field_simp</code> on master, atm</p>",
        "id": 424171410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709277195
    },
    {
        "content": "<p>I don't know the answers to any of the current queries. :-) They will require looking at the code and comparing to bump/v4.7.0 and/or master.</p>\n<p>When I next have time for the Mathlib sync, I'm going to look at nightly-testing on 2024-03-01. We still have two major outstanding issues:</p>\n<ul>\n<li>the frequent crashes in VSCode, hopefully fixed with the next nightly</li>\n<li>the VSCode server startup time doubled (for Mathlib) between v4.5.0 and v4.6.0, (in particularly, on nightly-2024-02-01), and we need to track this down to fix it for v4.7.0-rc1.</li>\n</ul>",
        "id": 424172210,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709277662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I don't have caches, so I can't test on <code>nightly-testing</code>, but does the following work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">hq'</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">27</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">54</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h54</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">field_simps</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n    <span class=\"n\">ring_nf</span>\n</code></pre></div>",
        "id": 424172708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709277910
    },
    {
        "content": "<p>Or is the <code>simp [field_simps, ha]</code> still too evil?</p>",
        "id": 424172786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709277929
    },
    {
        "content": "<p>No, I tried quite a few variations of that, and couldn't get it to work.</p>",
        "id": 424172866,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709277963
    },
    {
        "content": "<p>(I've lost my cache, so haven't literally tried that, but I'm pretty sure I covered it.)</p>",
        "id": 424172906,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709277980
    },
    {
        "content": "<p>But there are no dischargers involved anymore...</p>",
        "id": 424172910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709277983
    },
    {
        "content": "<p>So is <code>ring_nf</code> now the issue?</p>",
        "id": 424172936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709277995
    },
    {
        "content": "<p>so the simp lemmas don't fire</p>",
        "id": 424172946,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709278000
    },
    {
        "content": "<p>The point is that all the lemmas in <code>field_simps</code> have side conditions.</p>",
        "id": 424172977,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709278019
    },
    {
        "content": "<p>Which need a very ... enthusiastic, let's say ... discharger.</p>",
        "id": 424173067,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709278048
    },
    {
        "content": "<p>Yes, but this proof no longer uses fancy dischargers</p>",
        "id": 424173070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709278049
    },
    {
        "content": "<p>Just the standard one that <code>simp</code> uses.</p>",
        "id": 424173132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709278068
    },
    {
        "content": "<p>So why do you expect that the simp lemmas in field_simps will apply?</p>",
        "id": 424173159,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709278082
    },
    {
        "content": "<p>I'm about 2 minutes from oleans for that file again, so I can try shortly, in any case.</p>",
        "id": 424173234,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709278103
    },
    {
        "content": "<p>Oh -- -you are saying that works on master?</p>",
        "id": 424173287,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709278133
    },
    {
        "content": "<p>Yes</p>",
        "id": 424173312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709278140
    },
    {
        "content": "<p>Sorry, I'm an idiot.</p>",
        "id": 424173313,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709278140
    },
    {
        "content": "<p>Yes, this should work then.</p>",
        "id": 424173338,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709278152
    },
    {
        "content": "<p>Nothing else has changed.</p>",
        "id": 424173349,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709278157
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">hq'</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">27</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">54</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h54</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_div_assoc'</span><span class=\"o\">,</span> <span class=\"n\">div_mul_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">div_div</span><span class=\"o\">,</span> <span class=\"n\">div_pow</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">OfNat.ofNat_ne_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">pow_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">sub_div'</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">or_self</span><span class=\"o\">,</span> <span class=\"n\">div_sub'</span><span class=\"o\">,</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">three_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">eq_div_iff</span><span class=\"o\">,</span> <span class=\"n\">div_eq_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">ring_nf</span>\n</code></pre></div>\n<p>if you want the squeezed version</p>",
        "id": 424173383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709278170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, that worked, and pushed.</p>",
        "id": 424174284,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709278660
    },
    {
        "content": "<p>So now the branch is sorry-free?</p>",
        "id": 424174358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709278693
    },
    {
        "content": "<p>I think so.</p>",
        "id": 424174776,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709278979
    },
    {
        "content": "<p>\"Just\" a matter of cleaning up the mystery edits. :-)</p>",
        "id": 424174800,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709278994
    },
    {
        "content": "<p>I just went over the diff again; I think the number of remaining mystery edits is very small.</p>",
        "id": 424177124,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1709280182
    },
    {
        "content": "<p>(There's a build error in <code>Algebra/Homology/HomotopyCategory/DegreewiseSplit.lean</code>.)</p>",
        "id": 424177208,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1709280220
    },
    {
        "content": "<p>Is help fixing the mystery edits welcome? If so, I can try.</p>",
        "id": 424177297,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1709280252
    },
    {
        "content": "<p>Yes, please go ahead!</p>",
        "id": 424177366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709280290
    },
    {
        "content": "<p>I have fixed most of them and pushed.<br>\nThen I realised this throws away all work on CI creating olean's. (Can/should this be fixed, to at least upload the cache? At least for such PRs, this would be rather helpful. I understand that for a typical feature PR, it's not necessary.)</p>",
        "id": 424179431,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1709281336
    },
    {
        "content": "<p>Yes, I think back in mathlib3 days we had a trick that CI would respond to the cancellation request by uploading any available oleans before shutting down, but that we no longer have this. It would be great!</p>",
        "id": 424179737,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709281487
    },
    {
        "content": "<p>Did <a href=\"https://github.com/leanprover-community/mathlib4/pull/8987\">#8987</a> change the logic? (I could have sworn this changed somewhat recently; that PR matches my intuition.)</p>",
        "id": 424181008,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1709282003
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11079\">#11079</a> is backporting a handful of changes to master. Not a big deal, but should be quick to merge.</p>",
        "id": 424182342,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1709282585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/424177208\">said</a>:</p>\n<blockquote>\n<p>(There's a build error in <code>Algebra/Homology/HomotopyCategory/DegreewiseSplit.lean</code>.)</p>\n</blockquote>\n<p>This one is strange: it doesn't happen for me locally...</p>",
        "id": 424190291,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1709285183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/424169752\">said</a>:</p>\n<blockquote>\n<p>Now the <code>maxDischargeDepth</code> is enforced for everyone</p>\n</blockquote>\n<p>Why can't we have <code>maxDischargeDepth</code> be a setting on each <code>simp</code> call?</p>",
        "id": 424191192,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709285545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/424170017\">said</a>:</p>\n<blockquote>\n<p><code>field_simp</code> looks like it is set up to allow a <code>config := {...}</code> argument, but I just get an error about a sorry when I try to use it.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> It should be, but... <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span></p>",
        "id": 424195769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709287150
    },
    {
        "content": "<p>I read that message but I don't see how it's related: Scott is talking about configuring a specific <code>field_simp</code> call, I'm talking about configuring <em>the</em> <code>simp</code> call inside the definition of <code>field_simp</code></p>",
        "id": 424196113,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709287266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/424169752\">said</a>:</p>\n<blockquote>\n<p>After we've merged this, someone is going to have to rewrite <code>field_simp</code> to make it performant.</p>\n</blockquote>\n<p><em>If</em> somebody is going to rewrite <code>field_simp</code>, I would like to suggest it be written in such a way that it collects all non-zeroness requirements as side goals (or at least have this as a configurable option) instead of not normalizing terms completely when it cannot show that some denominator does not vanish. Right now, it is sometimes difficult to figure out exactly what term it needs to be non-zero, which leads to a trial-and-error loop to find out what needs to be in the context so that <code>field_simp</code> works as expected. With the suggestion above, the relevant conditions will be clear and can be discharged afterwards.</p>",
        "id": 424206307,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709290543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/424196113\">said</a>:</p>\n<blockquote>\n<p>I read that message but I don't see how it's related: Scott is talking about configuring a specific <code>field_simp</code> call, I'm talking about configuring <em>the</em> <code>simp</code> call inside the definition of <code>field_simp</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, yes, please go ahead once this reaches master.</p>",
        "id": 424225743,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709296577
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> for the recent work, I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/11070\">#11070</a> may be ready to go in?</p>",
        "id": 424225812,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709296605
    },
    {
        "content": "<p>I think I have <code>nightly-testing</code> almost ready on <code>nightly-2024-03-01</code> (much easier bump!) so there'll be another one to follow close behind.</p>",
        "id": 424225903,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709296643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span aria-label=\"peace sign\" class=\"emoji emoji-270c\" role=\"img\" title=\"peace sign\">:peace_sign:</span></p>",
        "id": 424226197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709296720
    },
    {
        "content": "<p>We haven't had a green tick yet on this, but as I'm going to bed, I'm going to optimistically set it to <code>auto-merge-after-CI</code>.</p>",
        "id": 424226512,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709296844
    },
    {
        "content": "<p>Ok, sleep tight!</p>",
        "id": 424226897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709296985
    },
    {
        "content": "<p><code>nightly-testing</code> is building on <code>2024-03-01</code>. It's going to take at least one more nightly before the release of v4.7.0-rc1, and we want to fix the startup time regression.</p>",
        "id": 424228212,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709297427
    },
    {
        "content": "<p>I'll make the bump/nightly-2024-03-01 sometime over the weekend.</p>",
        "id": 424228302,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709297456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/424225743\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/424196113\">said</a>:</p>\n<blockquote>\n<p>I read that message but I don't see how it's related: Scott is talking about configuring a specific <code>field_simp</code> call, I'm talking about configuring <em>the</em> <code>simp</code> call inside the definition of <code>field_simp</code></p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>, yes, please go ahead once this reaches master.</p>\n</blockquote>\n<p>I'm not closely following (pretty busy with Part III right now <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span>), but somebody pings me when it's on master, I'll happily do it.</p>",
        "id": 424229351,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709297745
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11087\">mathlib4#11087</a> fixes the config elaboration issue</p>",
        "id": 424277189,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709309295
    },
    {
        "content": "<p>That makes it possible to explicitly specify <code>maxDischargeDepth</code>.</p>",
        "id": 424277327,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709309331
    },
    {
        "content": "<p>This syntax elaboration is really cursed, we already had <a href=\"https://github.com/leanprover-community/mathlib4/pull/8165\">#8165</a> for the discharger syntax.</p>",
        "id": 424293453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709313741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, just a heads up the <code>compute_degree</code> is nearly always broken without the backwards compatibility flag <code>set_option tactic.skipAssignedInstances false</code>.</p>\n<p>Do you think you'll be able to look into this after this lands in <code>master</code>? (Hopefully that will be within the next day or two.)</p>",
        "id": 424371219,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709361840
    },
    {
        "content": "<p>I may have some time this afternoon (in approx 6-7 hours).</p>\n<p>Just to be clear, I should look at the <code>compute_degree</code> failures on <code>nightly-testing</code> and try to solve them by only using the <code>set_option</code> mentioned above, if I can.  Is that correct?</p>",
        "id": 424372135,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709362891
    },
    {
        "content": "<p>I think you should try fix it without flag on is what they're saying</p>",
        "id": 424375033,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1709364499
    },
    {
        "content": "<p>Ah, ok, I think that I understand.  The tactic had been \"fixed\" by adding the set_option, but now I should make sure that the tactic actually <em>works</em>, removing the need for the set_option.</p>\n<p>Indeed this makes more sense.</p>",
        "id": 424376154,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709364781
    },
    {
        "content": "<p>Ooof. I thought we were close on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11070\">https://github.com/leanprover-community/mathlib4/pull/11070</a> (this is the bump to nightly-2024-02-29), but there there are a bunch of <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8122603245/job/22202212137?pr=11070\">linter errors</a> still to go. </p>\n<p>Any help with these much appreciated.</p>",
        "id": 424409777,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709384622
    },
    {
        "content": "<p>(It is not surprising I guess, that there are cases where simp is proceeding now, using an instance found by unification that otherwise at that moment couldn't be found by inference?)</p>",
        "id": 424409847,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709384678
    },
    {
        "content": "<p>It appears that simply removing @[simp] from everything the linter complains about, Mathlib still works. I am inclined to interpret this as the linter giving good advice, and proceed.</p>",
        "id": 424410661,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709385539
    },
    {
        "content": "<p>There were two remaining errors by the simpNF linter. I pushed a fix to the first; the second (<code>the left-hand side reduces to XYZ'</code>) one is harder: replacing the left hand side by <code>XYZ</code> yields an error</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>type mismatch<br>\n  DFinsupp.sum W₀ fun a b ↦ (linearIsometryEquiv hV) ((V a) b)<br>\nhas type<br>\n  ↥(lp G 2) : Type (max u_1 u_4)<br>\nbut is expected to have type<br>\n  Π₀ (i : ι), G i : Type (max u_1 u_4)</p>\n</div></div>\n<p>Original linter error message is </p>\n<div class=\"codehilite\" data-code-language=\"left-hand\"><pre><span></span><code>  ↑((IsHilbertSum.linearIsometryEquiv hV) (DFinsupp.sum W₀ fun i =&gt; ⇑(V i)))\nto\n  ↑(DFinsupp.sum W₀ fun a b =&gt; (IsHilbertSum.linearIsometryEquiv hV) ((V a) b))\n</code></pre></div>",
        "id": 424423326,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1709395543
    },
    {
        "content": "<p>Investigating the <code>compute_degree</code> issues, they all appear to be a consequence of a <code>simp</code> call inside it and then <code>norm_num</code> failures.  Here are a couple of examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum.Core</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subsemigroup.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>       <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- works!</span>\n<span class=\"c1\">--set_option tactic.skipAssignedInstances false</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- times out</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>       <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- times out</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">  tactic 'simp' failed, nested error:</span>\n<span class=\"cm\">  (deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Note that the imports have been minimised:</p>\n<ul>\n<li>removing <code>NormNum.Core</code> means that <code>norm_num</code> does not exist;</li>\n<li>importing all the import of <code>Semigroup.Basic</code>instead of <code>Semigroup.Basic</code> itself means that <code>norm_num</code> works as intended;</li>\n<li>uncommenting the <code>set_option</code> makes <code>norm_num</code> work.</li>\n</ul>",
        "id": 424424031,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709396079
    },
    {
        "content": "<p>Trying to minimise further, in <code>Subsemigroup.Basic</code> there is this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">subsingleton_of_subsingleton</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">Subsemigroup</span> <span class=\"n\">M</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">Subsemigroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">Subsemigroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊤</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">not_mem_bot</span>\n</code></pre></div>\n<p>and removing the <code>(attr := simp)</code> from it, fixes the time out above.  I have not tested whether this would fix the compute_degree issues, though, since I am waiting for the intermediate files to build.</p>",
        "id": 424425442,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709397289
    },
    {
        "content": "<p>Tested: removing the <code>simp</code> attribute above does not cause further breakage and \"fixes\" <code>compute_degree</code>!</p>",
        "id": 424425815,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709397584
    },
    {
        "content": "<p>(further breakage in the path to <code>compute_degree</code>, I do not know about the rest of mathlib).</p>",
        "id": 424425866,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709397607
    },
    {
        "content": "<p>I pushed the change to <a href=\"https://github.com/leanprover-community/mathlib4/pull/11107\">#11107</a>.  However, if this works, the relevant patch is <a href=\"https://github.com/leanprover-community/mathlib4/pull/11107/commits/51da0513b468f47b974b0aa874ca730371f70416\">51da0513b468f47b974b0aa874ca730371f70416</a> and presumably simply cherry-picking it would fix <code>compute_degree</code>.</p>\n<p>Update: mathlib built on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11107\">#11107</a> so I added the patch to <a href=\"https://github.com/leanprover-community/mathlib4/pull/11070\">#11070</a>.</p>",
        "id": 424426516,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709398223
    },
    {
        "content": "<p>Still it does not lint!  However, I do not have more lean time today... Still, the compute_degree issue should be fixed!</p>",
        "id": 424430216,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709400998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/424430216\">said</a>:</p>\n<blockquote>\n<p>Still it does not lint!  However, I do not have more lean time today... Still, the compute_degree issue should be fixed!</p>\n</blockquote>\n<p>The remaining linter error is the one from <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/424423326\">this message</a>. (I don't know how to fix that one.)</p>",
        "id": 424430896,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1709401526
    },
    {
        "content": "<p>I pushed a potential fix—I don't have the computing power to build everything else locally, though, so I'm using CI.</p>",
        "id": 424436030,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709405622
    },
    {
        "content": "<p>I replaced the lhs with <code>((W₀.sum (γ := lp G 2) fun a b =&gt; hV.linearIsometryEquiv (V a b)) : ∀ i, G i)</code>. The simpNF linter says the original lhs (<code>(hV.linearIsometryEquiv (W₀.sum fun i =&gt; V i) : ∀ i, G i)</code>) simplifies via <code>simp only [_root_.map_zero, implies_true, map_dfinsupp_sum]</code> to something that's not obviously the same as what I replaced it with; to justify the change, note that the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">IsHilbertSum</span> <span class=\"bp\">𝕜</span> <span class=\"n\">G</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W₀</span> <span class=\"o\">:</span> <span class=\"bp\">Π₀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">W₀.sum</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">lp</span> <span class=\"n\">G</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hV.linearIsometryEquiv</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">hV.linearIsometryEquiv</span> <span class=\"o\">(</span><span class=\"n\">W₀.sum</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_dfinsupp_sum</span><span class=\"o\">]</span> <span class=\"c1\">-- I guess `_root_.map_zero`, `implies_true` were unused?</span>\n  <span class=\"c1\">-- closed by rfl</span>\n</code></pre></div>",
        "id": 424436311,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709405823
    },
    {
        "content": "<p>Bors took over the PR!  Thank you all: my contribution has been to remove one <code>simp</code> attribute: pretty minimal effort compared to what everyone else did!</p>",
        "id": 424439494,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709408097
    },
    {
        "content": "<p>It turns out that I had fixed the issue with <code>compute_degree</code>, but did not push the removal of the <code>set_option</code>s outside of <code>test</code>.  I created <a href=\"https://github.com/leanprover-community/mathlib4/pull/11123\">#11123</a> where CI successfully built Mathlib, Archive and Counterexamples.</p>",
        "id": 424451238,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709418906
    },
    {
        "content": "<p>Okay, we are getting very close now!</p>",
        "id": 424457030,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709424449
    },
    {
        "content": "<p>I've created <a href=\"https://github.com/leanprover-community/mathlib4/pull/11125\">#11125</a>, which will bring <code>bump/v4.7.0</code> up to <code>nightly-2024-03-02</code>. The diff looks fine to me (mostly the diff is because of my perhaps ill-considered addition of <code>protected</code> to <code>Nat.pow_succ</code>).</p>",
        "id": 424457099,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709424491
    },
    {
        "content": "<p>If someone could delegate, I will hopefully be able to shepherd it through CI.</p>",
        "id": 424457104,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709424505
    },
    {
        "content": "<p>(It is possible, but I'm not promising, that <code>nightly-2024-03-02</code> will become the next release candidate. I don't know of any obstacles at present, but will do a last \"readiness poll\". :-)</p>",
        "id": 424457124,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709424544
    },
    {
        "content": "<p>We again have some significant failures on Mathlib's nightly-testing branch. We are currently moving to <code>nightly-2024-03-07</code>, which includes <a href=\"https://github.com/leanprover/lean4/pull/3616\">lean4#3616</a>. To be honest, at this point I don't understand how there is so much fallout from that PR, so as well as fixes to proofs, I'm also happy to hear an account of what is actually going wrong!</p>",
        "id": 425435730,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709865754
    },
    {
        "content": "<p>I've been pushing basic fixes to <code>nightly-testing</code>.</p>",
        "id": 425435746,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709865767
    },
    {
        "content": "<p>I'm also going to ping a few people here to ask for some assistance. I'm picking people here mostly on the basis of being authors of files --- please don't hesitate to jump in just because I'm not pinging you directly. :-)</p>\n<ul>\n<li>Mathlib/CategoryTheory/ComposableArrows has many cases where something used to work by <code>dsimp</code>, and no longer does. <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span>?</li>\n<li>Mathlib/CategoryTheory/Bicategory/Functor has a timeout that I haven't investigated. We may have to unpack some proofs by aesop_cat so we can see what is going wrong. <span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span>?</li>\n<li>Mathlib/Data/Sum/Intervals has a simp only proof that is failing, and I'm not sure what to either add, or blame for not working. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>?</li>\n<li>Mathlib/Algebra/Homology/Augment looks like a failure of a <code>Nat.rec</code> to simplify that should, and may represent a bug introduced in <a href=\"https://github.com/leanprover/lean4/pull/3616\">lean4#3616</a>? It might be work minimising this one if possible.</li>\n<li>Mathlib/Ordinal/SetTheory/Basic: Here <code>succ_one</code> used to be <code>rfl</code>, then was an unfold and simpa, and now is broken. </li>\n<li>Mathlib/Topology/Support: a problem with <code>@[to_additive]</code> and numerals. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>?</li>\n<li>Mathlib/CategoryTheory/Abelian/InjectiveResolution: a <code>simp only</code> that no longer fires, while the <code>simp</code> times out. <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span>?</li>\n<li>Mathlib/Analysis/Convex/Basic: a typeclass has gone missing? <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> or <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>?</li>\n</ul>",
        "id": 425440370,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709868803
    },
    {
        "content": "<p>I'm away over the weekend, so won't be able to coordinate or contribute much on this thread until next Tuesday.</p>",
        "id": 425440439,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709868841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I investigated the Data/Sum/Interval one. The failure clearly comes from <a href=\"https://github.com/leanprover/lean4/pull/3508\">lean4#3508</a>.</p>",
        "id": 425445114,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709871884
    },
    {
        "content": "<p>A proof the work in the testing branch is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nonempty_iff_ne_empty</span><span class=\"o\">,</span> <span class=\"n\">Ne</span><span class=\"o\">,</span> <span class=\"n\">sumLift₂_eq_empty</span><span class=\"o\">,</span> <span class=\"n\">not_and_or</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 425445159,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709871931
    },
    {
        "content": "<p>Do you want to use this proof or reconsider the Lean 4 change?</p>",
        "id": 425445187,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709871961
    },
    {
        "content": "<p>I guess that changing that kind of simp lemmas can explain a lot of random breakage (but I don’t claim those changes are bad, I didn’t look closely and it’s getting late here).</p>",
        "id": 425445331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709872018
    },
    {
        "content": "<p>Something is not right</p>",
        "id": 425448079,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709873963
    },
    {
        "content": "<p>3508 landed in the previous night ly, which</p>",
        "id": 425448093,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709873978
    },
    {
        "content": "<p>We already have a merged addition PR for.</p>",
        "id": 425448378,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709874105
    },
    {
        "content": "<p>For <code>InjectiveResolution.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ofCocomplex_exactAt_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">ofCocomplex</span> <span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ExactAt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">HomologicalComplex.exactAt_iff'</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ofCocomplex</span><span class=\"o\">,</span> <span class=\"n\">CochainComplex.mk'</span><span class=\"o\">,</span> <span class=\"n\">CochainComplex.mk</span><span class=\"o\">,</span> <span class=\"n\">CochainComplex.of</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">HomologicalComplex.sc'</span><span class=\"o\">,</span> <span class=\"n\">HomologicalComplex.shortComplexFunctor'</span><span class=\"o\">,</span> <span class=\"n\">eqToHom_refl</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.reduceAdd</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"bp\">↓</span><span class=\"n\">reduceIte</span><span class=\"o\">,</span> <span class=\"n\">comp_id</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exact_f_d</span>\n</code></pre></div>\n<p>Fixes the error</p>",
        "id": 425448508,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1709874143
    },
    {
        "content": "<p>For <code>Mathlib/CategoryTheory/ComposableArrows</code>, I have this quick fix <a href=\"https://github.com/leanprover-community/mathlib4/commit/f3eeb3e5b010861f6e9efdf95de26c7282e3419d\">https://github.com/leanprover-community/mathlib4/commit/f3eeb3e5b010861f6e9efdf95de26c7282e3419d</a><br>\nHowever, I had to add a lot of simp lemmas: in order to have <code>dsimp</code> unfold inductive definitions involving <code>Fin</code>, I used to only have to take care of special cases of <code>0</code> and <code>1</code>, as the bigger numbers could be handled by a simp lemma for elements <code>⟨i + 1, _⟩</code>. Now it seems I would need a lemma for <code>2</code>, <code>3</code>, <code>4</code>, etc. Then, my fix maybe not be the best solution.</p>",
        "id": 425461531,
        "sender_full_name": "Joël Riou",
        "timestamp": 1709882409
    },
    {
        "content": "<p>We are way behind again.</p>\n<p>There is some proof repair needed in <code>Mathlib/Data/Nat/Cast/Defs.lean</code>. Previously where <code>succ</code> was being produced by <code>cases</code> we are getting <code>+1</code> (hooray!), but the fragile proof that follows which relied on this behaviour is now broken.</p>",
        "id": 426016093,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710194524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span>, any chance you might be able to try minimizing this to show how the behaviour has changed? It does sound like we will need to get changes in Lean for this.</p>",
        "id": 426016944,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710194958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, there are some errors in Mathlib/Computability/TMToPartrec.lean, could you take a look at these?</p>",
        "id": 426019050,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710195816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252627\">Jujian Zhang</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/425448508\">said</a>:</p>\n<blockquote>\n<p>For <code>InjectiveResolution.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ofCocomplex_exactAt_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">ofCocomplex</span> <span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ExactAt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">HomologicalComplex.exactAt_iff'</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ofCocomplex</span><span class=\"o\">,</span> <span class=\"n\">CochainComplex.mk'</span><span class=\"o\">,</span> <span class=\"n\">CochainComplex.mk</span><span class=\"o\">,</span> <span class=\"n\">CochainComplex.of</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span>\n      <span class=\"n\">HomologicalComplex.sc'</span><span class=\"o\">,</span> <span class=\"n\">HomologicalComplex.shortComplexFunctor'</span><span class=\"o\">,</span> <span class=\"n\">eqToHom_refl</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.reduceAdd</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"bp\">↓</span><span class=\"n\">reduceIte</span><span class=\"o\">,</span> <span class=\"n\">comp_id</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exact_f_d</span>\n</code></pre></div>\n<p>Fixes the error</p>\n</blockquote>\n<p>Indeed, it does, thank you! This lemma, and indeed a lot of this file, is extremely slow.</p>",
        "id": 426021408,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710196762
    },
    {
        "content": "<p>Okay, these are the files that are currently broken and blocking progress.</p>\n<p>I'm tagging for each question the listed author(s) of the file, in the hope that you might either fix the problem on <code>nightly-testing</code>, or ping someone else who might be able to take a look.</p>\n<p>(These authors lists I think also demonstrate that these lists are often out of date, and we need a better system of ownership of code for maintenance problems like these.)</p>\n<p>But please, anyone who is able, feel free to jump in on these. I've tried to say which ones are hopefully easy.</p>\n<ul>\n<li><del>Mathlib/Data/Sum/Interval.lean: has a simp only proof that is failing, and I'm not sure what to either add, or blame for not working. @Yaël Dillies? </del></li>\n<li><del>Mathlib/GroupTheory/Perm/List.lean: a failure because a fragile proof is relying on a distinction between <code>k+1</code> and <code>k.succ</code> which has disappeared now that we have nicer handling on induction in Nat. <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>?</del> Fixed by Patrick.</li>\n<li>Mathlib/SetTheory/Ordinal/Basic.lean: Here succ_one used to be rfl, then was an unfold and simpa, and now is broken. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> or <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>?</li>\n<li>Mathlib/Computability/TMToPartrec.lean, as above</li>\n<li>Mathlib/Data/Nat/Multiplicity.lean: hopefully an easy repair, Lean is getting caught up on <code>1</code> vs <code>0+1</code>. <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> </li>\n<li><del>Mathlib/Combinatorics/SimpleGraph/AdjMatrix.lean: hopefully easy, just have to be careful with <code>+1</code> vs <code>succ</code>. <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span>, <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>, <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  </del> Fixed by Kyle.</li>\n<li>Mathilb/Analysis/Convex/Basic.lean: not sure what is happening here. <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>, <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> </li>\n<li>Mathlib/CategoryTheory/ComposableArrows.lean: <del>@<strong>Joël Riou</strong> has identified that there is a problem in how <code>dsimp</code> is working here, but we really need a minimisation of this in order to be able to go fix it. This is potentially the most serious problem here, so anyone who can work on this: greatly appreciated.</del> Update: for now, we've punted on this one using <code>set_option simprocs false</code>.</li>\n</ul>",
        "id": 426022721,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710197347
    },
    {
        "content": "<p>(I’ll have a go at minimizing the error in ComposableArrows <span aria-label=\"working on it\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"working on it\">:working_on_it:</span>)</p>",
        "id": 426023017,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710197495
    },
    {
        "content": "<p>Sorry, really busy because it's the end of term on that side of the world. Happy to fix anything that's still broken by next monday, when I'm finally on holiday.</p>",
        "id": 426023513,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710197741
    },
    {
        "content": "<p>Got a few errors in ComposableArrows, at least: the issue is <a href=\"https://github.com/leanprover/lean4/pull/3586\">lean4#3586</a>, which introduced a simproc for <code>Fin</code>, and seems to lead <code>dsimp</code> down a different path. Using <code>dsimp [-Fin.reduceFinMk]</code> solves the goal. (There's still the question of why this actually leads us down a different path, though.)</p>",
        "id": 426027724,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710199998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>, thanks.</p>\n<p>I propose for right now we add:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">New `simprocs` that run even in `dsimp` have caused breakages in this file.</span>\n\n<span class=\"cm\">(e.g. `dsimp` can now simplify `2 + 3` to `5`)</span>\n\n<span class=\"cm\">For now, we just turn off simprocs in this file.</span>\n<span class=\"cm\">We'll soon provide finer grained options here, e.g. to turn off simprocs only in `dsimp`, etc.</span>\n\n<span class=\"cm\">*However*, hopefully it is possible to refactor the material here so that no backwards compatibility</span>\n<span class=\"cm\">`set_option`s are required at all</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">simprocs</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 426027771,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710200031
    },
    {
        "content": "<p>(This also exposed an issue in <code>dsimp?</code>: it currently neglects simprocs, and put us in the funny situation of <code>dsimp?</code> and its suggestion working without <code>dsimp</code> working!)</p>",
        "id": 426027837,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710200057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>, ooh, could you open an issue for that? I think we used to have the same problem for <code>simp</code>, it should be easy to fix.</p>",
        "id": 426027867,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710200090
    },
    {
        "content": "<p>(Also, shall I push that temporary <code>set_option</code> fix, or have you got it?)</p>",
        "id": 426027928,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710200141
    },
    {
        "content": "<p>Just pushed.</p>",
        "id": 426028035,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710200200
    },
    {
        "content": "<p>Is this a different issue in Mathlib/Data/Sum/Interval.lean or the one for which I posted a fix a couple of days ago?</p>",
        "id": 426028905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710200806
    },
    {
        "content": "<p>Sorry Patrick, missed your message.</p>",
        "id": 426028940,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710200839
    },
    {
        "content": "<p>I should have pushed but I wanted to discuss the issue.</p>",
        "id": 426028956,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710200862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426027867\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span>, ooh, could you open an issue for that? I think we used to have the same problem for <code>simp</code>, it should be easy to fix.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/pull/3653\">lean4#3653</a></p>",
        "id": 426029020,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710200890
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/425445159\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/425445159</a></p>",
        "id": 426029034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710200902
    },
    {
        "content": "<p>Yes, I responded saying that it couldn't be because of <a href=\"https://github.com/leanprover/lean4/pull/3508\">lean4#3508</a>, because we had already adapted to that.</p>",
        "id": 426029051,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710200917
    },
    {
        "content": "<p>(I'll go ahead and also submit a PR fixing <a href=\"https://github.com/leanprover/lean4/pull/3653\">lean4#3653</a> if that's alright—it's pretty straightforward, I think.)</p>",
        "id": 426029118,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710200998
    },
    {
        "content": "<p>Ok so I misunderstood where it came from, but this is still a fix.</p>",
        "id": 426029160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710201005
    },
    {
        "content": "<p>I've pushed it, thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 426029173,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710201017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>, ping me if it tests okay, and I can merge.</p>",
        "id": 426029207,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710201063
    },
    {
        "content": "<p>Later today I will have a bit of time to work on other items in your list (I will first come back here to see if there are any updates).</p>",
        "id": 426029372,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710201193
    },
    {
        "content": "<p>I’ll work on the permutation one.</p>",
        "id": 426034557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710205207
    },
    {
        "content": "<p>I have a fix but this proof is full of uses of deprecated stuff, so I’ll try to switch to undeprecated ones.</p>",
        "id": 426038015,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710207211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> AdjMatrix is fixed (pushed to nightly-testing)</p>",
        "id": 426038922,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710207923
    },
    {
        "content": "<p>I gave up on the deprecated stuff, this corner of Mathlib really isn’t for me.</p>",
        "id": 426039026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710208029
    },
    {
        "content": "<p>Is it cheating to add <code>using Nat.rec</code> to an <code>induction</code> to make it work without changing the proof?</p>",
        "id": 426039064,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710208074
    },
    {
        "content": "<p>That would solve <code>Mathlib/GroupTheory/Perm/List.lean</code></p>",
        "id": 426039125,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710208099
    },
    {
        "content": "<p>I “solved” that one already.</p>",
        "id": 426039182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710208164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, did you see my message on the other zulip about adding a backwards compatibility flag that disables custom recursors?</p>",
        "id": 426039203,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710208189
    },
    {
        "content": "<p>I'd sort of prefer that we explicitly use such options, to make it clearer that someone should fix the proof.</p>",
        "id": 426039263,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710208205
    },
    {
        "content": "<p>With <code>using Nat.rec</code>, it will just stay forever.</p>",
        "id": 426039274,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710208215
    },
    {
        "content": "<p>The FRO has a whole other Zulip?</p>",
        "id": 426039286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710208229
    },
    {
        "content": "<p>I don’t understand why Kyle fixed my fix.</p>",
        "id": 426040771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710209194
    },
    {
        "content": "<p>So I’ll stop wasting time and go to bed.</p>",
        "id": 426040808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710209221
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, I was working on it independently, then merged</p>",
        "id": 426041154,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710209383
    },
    {
        "content": "<p>The two typeclass synthesis failures in Analysis.Complex.Basic can be fixed with a type annotation, but it's a bit odd (the new annotations are <code>Set (ι → 𝕜)</code> and <code>Set (Fin 2 → 𝕜)</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">segment_single_subset_stdSimplex</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">([</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">i</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">j</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">))</span> <span class=\"bp\">⊆</span> <span class=\"n\">stdSimplex</span> <span class=\"bp\">𝕜</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">stdSimplex_fin_two</span> <span class=\"o\">:</span>\n    <span class=\"n\">stdSimplex</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">([</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I'd have thought the type <code>Set (A → B)</code> could be inferred from <code>stdSimplex A B</code>, which has exactly the annotated type, no inference required. Should I leave a note?</p>",
        "id": 426041257,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710209419
    },
    {
        "content": "<p>The notation here seems insane. Is it really <code>[X -[k] Y]</code>?</p>",
        "id": 426041381,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710209499
    },
    {
        "content": "<p>That's what it is/was—I haven't touched that <span aria-label=\"woman shrugging\" class=\"emoji emoji-1f937-200d-2640\" role=\"img\" title=\"woman shrugging\">:woman_shrugging:</span></p>",
        "id": 426041488,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710209545
    },
    {
        "content": "<p>Let's at least leave a note saying something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Adaptation</span> <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"n\">as</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2024</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"n\">need</span> <span class=\"n\">a</span> <span class=\"n\">type</span> <span class=\"n\">annotation</span> <span class=\"n\">here</span>\n</code></pre></div>",
        "id": 426041509,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710209559
    },
    {
        "content": "<p>and perhaps also saying \"This notation seems unreasonable, and should be changed.\"</p>",
        "id": 426041540,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710209579
    },
    {
        "content": "<p>Tweaked the note to mention both lemmas, but didn't express ire at the notation; it seems to be used quite extensively and defined in a different file dedicated entirely to it (Mathlib.Analysis.Convex.Segment) <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 426042174,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710209901
    },
    {
        "content": "<p>Okay, I've posted about my ire about that notation separately. :-)</p>",
        "id": 426042202,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710209924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426039182\">said</a>:</p>\n<blockquote>\n<p>I “solved” that one already.</p>\n</blockquote>\n<p>I just realized I completely missed this message. Double sorry.</p>",
        "id": 426042204,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710209925
    },
    {
        "content": "<p>Fixed <code>Mathlib/SetTheory/Ordinal/Basic.lean</code>; didn't leave a note since there's already a porting note there complaining about the non-rfl proof. (Though we do seem to be getting further from it...)</p>",
        "id": 426048816,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710214693
    },
    {
        "content": "<p>Fixed the two errors in Mathlib.Computability.TMToPartrec; changed <code>simp only [Nat.rec]</code> to <code>simp only Nat.rec_zero]</code> and <code>simp only [Code.eval]</code> to <code>simp only [Nat.rec_zero, Part.bind_eq_bind]</code>. (These changes didn't seem note(-)worthy to me, but I can leave a note if desired.)</p>",
        "id": 426050117,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710215857
    },
    {
        "content": "<p>Fixed Data.Nat.Multiplicity, tweaked the existing adaptation note—it's still fairly awkward (I use <code>norm_cast; nth_rw 2 [← zero_add 1]</code> to get to <code>0 + 1</code> in the appropriate spot). (Maybe there's a better way?)</p>",
        "id": 426052619,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710217897
    },
    {
        "content": "<p>I think it's okay to be awkward as long as we leave an \"adaptation note\".</p>",
        "id": 426052747,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710217986
    },
    {
        "content": "<p>I've pushed more changes.</p>",
        "id": 426053203,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710218425
    },
    {
        "content": "<p>Re: fixing <code>dsimp?</code>: <a href=\"https://github.com/leanprover/lean4/pull/3654\">lean4#3654</a> is the lean4 PR; <a href=\"https://github.com/leanprover/std4/pull/691\">std4#691</a> is the std4 adaptation PR. Both are green (but the mathlib build is waiting on <a href=\"https://github.com/leanprover/std4/pull/691\">std4#691</a>).</p>\n<p>(Hopefully mathlib4 doesn't need an adaptation once <a href=\"https://github.com/leanprover/std4/pull/691\">std4#691</a> is merged to the lean-pr-testing branch; I don't think it will, unless a test uses <code>#guard_msgs</code> with <code>dsimp?</code>.)</p>",
        "id": 426053525,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710218749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>, I merged, we should see it in the nightly in a few hours.</p>",
        "id": 426055870,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710220692
    },
    {
        "content": "<p>We are again down to four errors:</p>\n<ul>\n<li>Mathlib/Topology/Support.lean, as above, a problem in <code>@[to_additive]</code></li>\n<li>Mathlib/Data/Polynomial/Derivative.lean: not my favourite sort of proof, where we do multiple cases statements, and then a long <code>simp_rw</code> and a long <code>simp</code>. Probably easy to fix, just annoying!</li>\n<li>Mathlib/SetTheory/Ordinal/Notation.lean: again, not my favourite proof structure (this one is even less fun, multiple cases, multiple <code>try ...</code> tactics connected by <code>&lt;;&gt;</code>, and unsurprisingly when something changes the subgoals remaining are scrambled!) Perhaps <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, who originally wrote this proof?</li>\n<li>Mathlib/Data/Nat/Factorization.lean: now on <code>recOnMul</code> we get \"code generator does not support recursor 'Nat.recOn' yet, consider using 'match ... with' and/or structural recursion\". Note that I've already removed <code>compile_inductive% Nat</code>, as that says \"already compiled Nat.rec\", due to the recent changes. <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>?</li>\n</ul>",
        "id": 426056802,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710221505
    },
    {
        "content": "<p>I wil take a look at <code>Polynomial.Derivative</code></p>",
        "id": 426057992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710222459
    },
    {
        "content": "<p>I fixed Data/Nat/Factorization/Basic, removing the porting note.</p>",
        "id": 426058252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710222665
    },
    {
        "content": "<p>I'm guessing that whatever's going on in Topology/Support, it involves the fact that a subterm of the to-be-additivized proof used to look like <code>OfNat.ofNat (nat_lit 1)</code>, but now looks like <code>OfNat.ofNat (OfNat.ofNat (α := ℕ) (nat_lit 1))</code></p>",
        "id": 426059008,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710223204
    },
    {
        "content": "<p>In Lean core, we have a <code>@[csimp]</code> lemma that makes <code>Nat.rec</code> have compiled code, but not for <code>Nat.recOn</code>. I guess <code>compile_inductive%</code> wants to define that as well as <code>Nat.brecOn</code>, but since the <code>Nat.rec</code> csimp is already defined it gives up.</p>",
        "id": 426059229,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710223314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, might you be able to look at <code>Mathlib.LinearAlgebra.TensorProduct.Graded.Internal</code> on <code>nightly-testing</code>? I'm not sure how it was intended to work.</p>",
        "id": 426064319,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710226631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, might you be able to look at <code>Mathlib.RingTheory.Polynomial.Eisenstein.IsIntegral</code> on <code>nightly-testing</code>? A fragile proof has broken now that <code>Nat.rec</code> gives us <code>+1</code>s rather than <code>succ</code>s.</p>",
        "id": 426067682,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710228475
    },
    {
        "content": "<p>Sure, feel free to put a sorry there. I will have a look in about one hour</p>",
        "id": 426068663,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710229022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">derivative_mul</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">:</span> <span class=\"n\">derivative</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">derivative</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">derivative</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">f</span> <span class=\"n\">using</span> <span class=\"n\">Polynomial.induction_on'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">g</span> <span class=\"n\">using</span> <span class=\"n\">Polynomial.induction_on'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">b</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">monomial_mul_monomial</span><span class=\"o\">,</span> <span class=\"n\">derivative_monomial</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.cast_commute</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_succ_sub_one</span><span class=\"o\">,</span> <span class=\"n\">add_tsub_cancel_right</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.derivative_mul</span> <span class=\"n\">Polynomial.derivative_mul</span>\n</code></pre></div>",
        "id": 426070315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710229901
    },
    {
        "content": "<p>I'll backport to mathlib</p>",
        "id": 426070326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710229910
    },
    {
        "content": "<p>I've now opened the PR for the adaptations for <code>nightly-2024-03-11</code>, as <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a>.</p>",
        "id": 426070569,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710230033
    },
    {
        "content": "<p>I've also pushed this to <code>nightly-testing</code></p>",
        "id": 426070673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710230077
    },
    {
        "content": "<p>Hopefully now we can parallelize getting this over the line.</p>\n<ul>\n<li>Review the changes there</li>\n<li>grep for <code>FIXME.*nightly</code> on this branch, and fix the remaining sorries!</li>\n</ul>",
        "id": 426070722,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710230102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I'll put it direct into <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a> now.</p>",
        "id": 426070765,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710230120
    },
    {
        "content": "<p>The backport is <a href=\"https://github.com/leanprover-community/mathlib4/pull/11315\">#11315</a></p>",
        "id": 426071004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710230236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426064319\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>, might you be able to look at <code>Mathlib.LinearAlgebra.TensorProduct.Graded.Internal</code> on <code>nightly-testing</code>? I'm not sure how it was intended to work.</p>\n</blockquote>\n<p>Possibly not for another 12 hours, depending on network connectivity</p>",
        "id": 426071564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710230469
    },
    {
        "content": "<p>No problem, I think we'll have things to do. :-)</p>",
        "id": 426071988,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710230655
    },
    {
        "content": "<p>(In particular, <code>nightly-testing</code> has now moved on to nightly-2024-03-12. Std needed some changes, but so far Mathlib looks okay.)</p>",
        "id": 426073173,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710231252
    },
    {
        "content": "<p>I just left a few comments on the diff.<br>\nCan the proof changes into <code>by omega</code> also be backported? (I won't have time for this.)</p>",
        "id": 426073592,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710231495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426073592\">said</a>:</p>\n<blockquote>\n<p>Can the proof changes into <code>by omega</code> also be backported? (I won't have time for this.)</p>\n</blockquote>\n<p>Good suggestion! Any volunteers? :-)</p>",
        "id": 426073938,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710231682
    },
    {
        "content": "<p>Should I push directly to <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a>?</p>",
        "id": 426073986,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710231711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, yes please!</p>",
        "id": 426074756,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710232011
    },
    {
        "content": "<p>(I semi-regularly merge the <code>bump/nightly-YYYY-MM-DD</code> branches back to <code>nightly-testing</code>, so once the PR is open, it's best if changes go there.)</p>",
        "id": 426074853,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710232049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426073592\">said</a>:</p>\n<blockquote>\n<p>I just left a few comments on the diff.</p>\n</blockquote>\n<p>Dealt with, thanks.</p>",
        "id": 426074898,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710232073
    },
    {
        "content": "<p><code>Mathlib.RingTheory.Polynomial.Eisenstein.IsIntegral</code> is fixed.</p>",
        "id": 426082619,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710234924
    },
    {
        "content": "<p>I have time to help with this... which file/folder can I work on?</p>",
        "id": 426082840,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710235002
    },
    {
        "content": "<p>I tried to help out here, but it seems that there's no cache available at all; I assume a dependency was just bumped, and my timing was bad?</p>",
        "id": 426087376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710236795
    },
    {
        "content": "<p>The first sorry I see is in <code>Mathlib/SetTheory/Ordinal/Notation.lean</code>. I can fix the first error, but later it becomes a mess. Maybe an expert in the ordinal part of the library can help.</p>",
        "id": 426087720,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710236903
    },
    {
        "content": "<p>Looks like a cache will be ready in 5 minutes or so... just as my window of time expires!</p>",
        "id": 426088908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710237354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426073938\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426073592\">said</a>:</p>\n<blockquote>\n<p>Can the proof changes into <code>by omega</code> also be backported? (I won't have time for this.)</p>\n</blockquote>\n<p>Good suggestion! Any volunteers? :-)</p>\n</blockquote>\n<p>Filed <a href=\"https://github.com/leanprover-community/mathlib4/pull/11318\">#11318</a> now.</p>",
        "id": 426089752,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710237634
    },
    {
        "content": "<p>I am fixing <code>Mathlib/Algebra/Homology/Augment</code>.</p>",
        "id": 426090769,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710237963
    },
    {
        "content": "<p>I got absorbed by other stuff and I have to stop now, sorry <span aria-label=\"unamused\" class=\"emoji emoji-1f612\" role=\"img\" title=\"unamused\">:unamused:</span></p>",
        "id": 426095612,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710239746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, do you see what could be going on in Mathlib/Algebra/Homology/Augment.lean?</p>",
        "id": 426097697,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710240539
    },
    {
        "content": "<p>We are getting lots of goals with <code>Nat.casesAuxOn</code> that used to simplify away.</p>",
        "id": 426097742,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710240557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426064319\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>, might you be able to look at <code>Mathlib.LinearAlgebra.TensorProduct.Graded.Internal</code> on <code>nightly-testing</code>? I'm not sure how it was intended to work.</p>\n</blockquote>\n<p>I found some time; dsimp is refusing to use a rfl lemma passed to it</p>",
        "id": 426116857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710247563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426040808\">said</a>:</p>\n<blockquote>\n<p>So I’ll stop wasting time and go to bed.</p>\n</blockquote>\n<p>I apologize I was a bit rude in that message. But I think we really need to work on our process with those fixes sprints. This thread is not working as a coordination tool. Consider the following timeline of my messages.</p>\n<ul>\n<li>\n<p>19:53 Later today I will have a bit of time to work on other items in your list (I will first come back here to see if there are any updates).</p>\n</li>\n<li>\n<p>21:00 I’ll work on the permutation one.</p>\n</li>\n<li>\n<p>21:33 I have a fix but this proof is full of uses of deprecated stuff, so I’ll try to switch to undeprecated ones.</p>\n</li>\n<li>\n<p>21:49 I “solved” that one already.</p>\n</li>\n</ul>\n<p>And then at 22:03 someone else pushed another fix for the same item (I wrote someone because my point is not at all to complain about them but about our process). I understand that opening issues for every file and using GitHub assignements is a bit painful. But if there is no lighter solution and we don’t want to do that then I’ll stop spending evenings fighting dependent rewrites in ugly corners of Mathlib.</p>",
        "id": 426127885,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710251031
    },
    {
        "content": "<p>Fixed the issue in <code>Mathlib/SetTheory/Ordinal/Notation.lean</code></p>",
        "id": 426158778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710258940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426097697\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>, do you see what could be going on in Mathlib/Algebra/Homology/Augment.lean?</p>\n</blockquote>\n<p>It was from using <code>by cases</code> to define a function. On one hand it's a problem that <code>dsimp</code> is unaware of this alternative <code>Nat</code> eliminator, and on the other the function probably should have not been defined using tactics. (Pushed a fix)</p>",
        "id": 426170125,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710261943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426127885\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426040808\">said</a>:</p>\n<blockquote>\n<p>So I’ll stop wasting time and go to bed.</p>\n</blockquote>\n<p>I apologize I was a bit rude in that message. But I think we really need to work on our process with those fixes sprints. This thread is not working as a coordination tool. Consider the following timeline of my messages.</p>\n<ul>\n<li>\n<p>19:53 Later today I will have a bit of time to work on other items in your list (I will first come back here to see if there are any updates).</p>\n</li>\n<li>\n<p>21:00 I’ll work on the permutation one.</p>\n</li>\n<li>\n<p>21:33 I have a fix but this proof is full of uses of deprecated stuff, so I’ll try to switch to undeprecated ones.</p>\n</li>\n<li>\n<p>21:49 I “solved” that one already.</p>\n</li>\n</ul>\n<p>And then at 22:03 someone else pushed another fix for the same item (I wrote someone because my point is not at all to complain about them but about our process). I understand that opening issues for every file and using GitHub assignements is a bit painful. But if there is no lighter solution and we don’t want to do that then I’ll stop spending evenings fighting dependent rewrites in ugly corners of Mathlib.</p>\n</blockquote>\n<p>Maybe each task should be its own message, and we use emojis to coordinate—before each list of tasks there could be a message saying “<em>Please react with <span aria-label=\"working on it\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"working on it\">:working_on_it:</span> (working_on_it) when you start to work on a task to prevent conflicts</em>”. </p>\n<p>(Repeating this message near each list of tasks should prevent people who are unfamiliar with the practice and haven’t read the whole thread from creating conflicts.)</p>",
        "id": 426176561,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710263863
    },
    {
        "content": "<p>If this is going to be a constant issue and source of random work, maybe it should have its own devoted stream. We could have threads for problem files and resolve them when they're compiling</p>",
        "id": 426198615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710271913
    },
    {
        "content": "<p>Another option could be to use Github tracking issues with participants claiming tasks. (The Rust project would write a bot allowing people to \"claim\" subtasks.) That doesn't integrate well with zulip, though.</p>",
        "id": 426203192,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710273820
    },
    {
        "content": "<p>Sounds like pretty high overhead too</p>",
        "id": 426204931,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710274509
    },
    {
        "content": "<p>I'll take a look at the <code>simp says</code> ones now</p>",
        "id": 426205147,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710274597
    },
    {
        "content": "<p>I think the process is a bit too chaotic and rushed for github issues to be useful</p>",
        "id": 426205349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710274687
    },
    {
        "content": "<p>But a stream could well be; maybe the \"resolved\" feature could actually be useful for once!</p>",
        "id": 426205417,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710274717
    },
    {
        "content": "<p>How about a bot that scrapes the build logs and posts to/creates topics in zulip? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 426205514,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710274756
    },
    {
        "content": "<p>(Well, if it turns out to be a lot of management overhead, at least. Although it’s contrary to my instinct, we should probably try the manual method before automating things… :) )</p>",
        "id": 426205862,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710274910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426205514\">said</a>:</p>\n<blockquote>\n<p>How about a bot that scrapes the build logs and posts to/creates topics in zulip? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>\n</blockquote>\n<p>This might be overkill, but might be a nice project for someone wanting to learn to write a Zulip bot</p>",
        "id": 426206006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710274971
    },
    {
        "content": "<p>Are all the errors from <code>says</code> right now?</p>",
        "id": 426206290,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710275079
    },
    {
        "content": "<p>I wish <code>says</code> had a code action to update its expectations</p>",
        "id": 426206326,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710275097
    },
    {
        "content": "<p>Yeah, I think so</p>",
        "id": 426206376,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710275117
    },
    {
        "content": "<p>What is the intention here with <code>says</code>? It is nice to have the old <code>simp</code> list when things break. Is there anything more to do than make a note (mental or otherwise) and change the output?</p>",
        "id": 426206729,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710275246
    },
    {
        "content": "<p>I'm just changing the output to match the new <code>simp</code> behaviour, which is mostly adding <code>Int.reduceNeg</code></p>",
        "id": 426207154,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710275419
    },
    {
        "content": "<p>Definitions that need a heartbeat bump to 800000 aren't fun to work with :/</p>",
        "id": 426207219,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710275453
    },
    {
        "content": "<p>That is purely a fault of <code>says</code> if you are working with the one I remember</p>",
        "id": 426207675,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710275625
    },
    {
        "content": "<p>I pushed, stepping out for a bit</p>",
        "id": 426208129,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710275817
    },
    {
        "content": "<p>To nightly-testing; I hope this wasn't fixed in some PR branch yet</p>",
        "id": 426208223,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710275859
    },
    {
        "content": "<p>I adjusted the last two says calls and it should build in CI now</p>",
        "id": 426211720,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710277291
    },
    {
        "content": "<p>Now it is <code>Archive</code> <code>Counterexamples</code> and linting</p>",
        "id": 426213768,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710278107
    },
    {
        "content": "<p>Ah... <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>, <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>, sorry this wasn't clear, but it's important once we have a <code>bump/nightly-YYYY-MM-DD</code> branch, e.g. <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a>, that all work happens there rather than on <code>nightly-testing</code> (with a caveat, see below).</p>",
        "id": 426217446,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710279817
    },
    {
        "content": "<p>The problem is that <code>nightly-testing</code> has already moved on to a subsequent nightly.</p>",
        "id": 426217472,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710279830
    },
    {
        "content": "<p>So while we can merge from <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a> to <code>nightly-testing</code>, we can't merge the other way.</p>",
        "id": 426217541,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710279847
    },
    {
        "content": "<p>Oh sorry Scott</p>",
        "id": 426217621,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710279890
    },
    {
        "content": "<p>Hence the caveat is you can push changes to <code>nightly-testing</code> as long as they are specifically about fixes for the latest nightly, that do not work on whatever <code>bump/nightly-YYYY-MM-DD</code> PR is open.</p>",
        "id": 426217646,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710279904
    },
    {
        "content": "<p>np</p>",
        "id": 426217647,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710279905
    },
    {
        "content": "<p>This is not obvious, and indeed pretty difficult to coordinate clearly. We need to get better at this.</p>",
        "id": 426217691,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710279927
    },
    {
        "content": "<p>I am about to appease the linter on the current nightly</p>",
        "id": 426217700,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710279932
    },
    {
        "content": "<p>I <em>think</em> in this case there is not actually anything fundamentally different in <code>nightly-2024-03-12</code> (where <code>nightly-testing</code> is) compared to <code>nightly-2024-03-11</code> (where <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a> is).</p>",
        "id": 426217823,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710279973
    },
    {
        "content": "<p>So I am going to attempt a squash merge and see what goes horribly wrong. :-)</p>",
        "id": 426217845,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710279983
    },
    {
        "content": "<p>(Also, because <code>nightly-testing</code> receives automatic merges from <code>master</code>, merging back from <code>nightly-testing</code> to <code>bump/nightly-2024-03-11</code> is a bit scary: we need to first merge master into both <code>bump/v4.8.0</code> (the target of <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a>) and <code>bump/nightly-2024-03-11</code> successfully.)</p>",
        "id": 426217964,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710280057
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>-<span class=\"w\"> </span>Found<span class=\"w\"> </span><span class=\"m\">9</span><span class=\"w\"> </span>errors<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">186635</span><span class=\"w\"> </span>declarations<span class=\"w\"> </span><span class=\"o\">(</span>plus<span class=\"w\"> </span><span class=\"m\">452405</span><span class=\"w\"> </span>automatically<span class=\"w\"> </span>generated<span class=\"w\"> </span>ones<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib<span class=\"w\"> </span>with<span class=\"w\"> </span><span class=\"m\">14</span><span class=\"w\"> </span>linters\n\n/-<span class=\"w\"> </span>The<span class=\"w\"> </span><span class=\"sb\">`</span>docBlame<span class=\"sb\">`</span><span class=\"w\"> </span>linter<span class=\"w\"> </span>reports:\nDEFINITIONS<span class=\"w\"> </span>ARE<span class=\"w\"> </span>MISSING<span class=\"w\"> </span>DOCUMENTATION<span class=\"w\"> </span>STRINGS:<span class=\"w\"> </span>-/\n--<span class=\"w\"> </span>Mathlib.Data.Nat.Factorization.Basic\n./././Mathlib/Data/Nat/Factorization/Basic.lean:894:11:<span class=\"w\"> </span>error:<span class=\"w\"> </span>Nat.recOnMul.hp<span class=\"s1\">''</span>.<span class=\"o\">{</span>u_1<span class=\"o\">}</span><span class=\"w\"> </span>definition<span class=\"w\"> </span>missing<span class=\"w\"> </span>documentation<span class=\"w\"> </span>string\n\n/-<span class=\"w\"> </span>The<span class=\"w\"> </span><span class=\"sb\">`</span>simpNF<span class=\"sb\">`</span><span class=\"w\"> </span>linter<span class=\"w\"> </span>reports:\nSOME<span class=\"w\"> </span>SIMP<span class=\"w\"> </span>LEMMAS<span class=\"w\"> </span>ARE<span class=\"w\"> </span>NOT<span class=\"w\"> </span>IN<span class=\"w\"> </span>SIMP-NORMAL<span class=\"w\"> </span>FORM.\nsee<span class=\"w\"> </span>note<span class=\"w\"> </span><span class=\"o\">[</span>simp-normal<span class=\"w\"> </span>form<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>tips<span class=\"w\"> </span>how<span class=\"w\"> </span>to<span class=\"w\"> </span>debug<span class=\"w\"> </span>this.\nhttps://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form<span class=\"w\"> </span>-/\n--<span class=\"w\"> </span>Mathlib.CategoryTheory.GradedObject\n./././Mathlib/CategoryTheory/GradedObject.lean:154:1:<span class=\"w\"> </span>error:<span class=\"w\"> </span>CategoryTheory.GradedObject.eqToHom_apply.<span class=\"o\">{</span>w,<span class=\"w\"> </span>v,<span class=\"w\"> </span>u<span class=\"o\">}</span><span class=\"w\"> </span>simp<span class=\"w\"> </span>can<span class=\"w\"> </span>prove<span class=\"w\"> </span>this:\n<span class=\"w\">  </span>by<span class=\"w\"> </span>simp<span class=\"w\"> </span>only<span class=\"w\"> </span><span class=\"o\">[</span>@CategoryTheory.Functor.eqToHom_proj<span class=\"o\">]</span>\nOne<span class=\"w\"> </span>of<span class=\"w\"> </span>the<span class=\"w\"> </span>lemmas<span class=\"w\"> </span>above<span class=\"w\"> </span>could<span class=\"w\"> </span>be<span class=\"w\"> </span>a<span class=\"w\"> </span>duplicate.\nIf<span class=\"w\"> </span>that<span class=\"err\">'</span>s<span class=\"w\"> </span>not<span class=\"w\"> </span>the<span class=\"w\"> </span><span class=\"k\">case</span><span class=\"w\"> </span>try<span class=\"w\"> </span>reordering<span class=\"w\"> </span>lemmas<span class=\"w\"> </span>or<span class=\"w\"> </span>adding<span class=\"w\"> </span>@<span class=\"o\">[</span>priority<span class=\"o\">]</span>.\n\n\n--<span class=\"w\"> </span>Mathlib.Data.Finset.Basic\n./././Mathlib/Data/Finset/Basic.lean:2818:1:<span class=\"w\"> </span>error:<span class=\"w\"> </span>Finset.filter_congr_decidable.<span class=\"o\">{</span>u_1<span class=\"o\">}</span><span class=\"w\"> </span>Left-hand<span class=\"w\"> </span>side<span class=\"w\"> </span>does<span class=\"w\"> </span>not<span class=\"w\"> </span>simplify,<span class=\"w\"> </span>when<span class=\"w\"> </span>using<span class=\"w\"> </span>the<span class=\"w\"> </span>simp<span class=\"w\"> </span>lemma<span class=\"w\"> </span>on<span class=\"w\"> </span>itself.\nThis<span class=\"w\"> </span>usually<span class=\"w\"> </span>means<span class=\"w\"> </span>that<span class=\"w\"> </span>it<span class=\"w\"> </span>will<span class=\"w\"> </span>never<span class=\"w\"> </span>apply.\n\n\n--<span class=\"w\"> </span>Mathlib.Data.Fintype.BigOperators\n./././Mathlib/Data/Fintype/BigOperators.lean:146:1:<span class=\"w\"> </span>error:<span class=\"w\"> </span>Fintype.card_fun.<span class=\"o\">{</span>u_2,<span class=\"w\"> </span>u_1<span class=\"o\">}</span><span class=\"w\"> </span>Left-hand<span class=\"w\"> </span>side<span class=\"w\"> </span>simplifies<span class=\"w\"> </span>from\n<span class=\"w\">  </span>Fintype.card<span class=\"w\"> </span><span class=\"o\">(</span>α<span class=\"w\"> </span>→<span class=\"w\"> </span>β<span class=\"o\">)</span>\nto\n<span class=\"w\">  </span>Fintype.card<span class=\"w\"> </span>β<span class=\"w\"> </span>^<span class=\"w\"> </span>Finset.univ.card\nusing\n<span class=\"w\">  </span>simp<span class=\"w\"> </span>only<span class=\"w\"> </span><span class=\"o\">[</span>@Fintype.card_pi,<span class=\"w\"> </span>@Finset.prod_const<span class=\"o\">]</span>\nTry<span class=\"w\"> </span>to<span class=\"w\"> </span>change<span class=\"w\"> </span>the<span class=\"w\"> </span>left-hand<span class=\"w\"> </span>side<span class=\"w\"> </span>to<span class=\"w\"> </span>the<span class=\"w\"> </span>simplified<span class=\"w\"> </span>term!\n\n\n--<span class=\"w\"> </span>Mathlib.Logic.IsEmpty\n./././Mathlib/Logic/IsEmpty.lean:157:1:<span class=\"w\"> </span>error:<span class=\"w\"> </span>isEmpty_fun.<span class=\"o\">{</span>u_2,<span class=\"w\"> </span>u_1<span class=\"o\">}</span><span class=\"w\"> </span>Left-hand<span class=\"w\"> </span>side<span class=\"w\"> </span>simplifies<span class=\"w\"> </span>from\n<span class=\"w\">  </span>IsEmpty<span class=\"w\"> </span><span class=\"o\">(</span>α<span class=\"w\"> </span>→<span class=\"w\"> </span>β<span class=\"o\">)</span>\nto\n<span class=\"w\">  </span>∃<span class=\"w\"> </span>a,<span class=\"w\"> </span>IsEmpty<span class=\"w\"> </span>β\nusing\n<span class=\"w\">  </span>simp<span class=\"w\"> </span>only<span class=\"w\"> </span><span class=\"o\">[</span>@isEmpty_pi<span class=\"o\">]</span>\nTry<span class=\"w\"> </span>to<span class=\"w\"> </span>change<span class=\"w\"> </span>the<span class=\"w\"> </span>left-hand<span class=\"w\"> </span>side<span class=\"w\"> </span>to<span class=\"w\"> </span>the<span class=\"w\"> </span>simplified<span class=\"w\"> </span>term!\n\n\n/-<span class=\"w\"> </span>The<span class=\"w\"> </span><span class=\"sb\">`</span>simpVarHead<span class=\"sb\">`</span><span class=\"w\"> </span>linter<span class=\"w\"> </span>reports:\nLEFT-HAND<span class=\"w\"> </span>SIDE<span class=\"w\"> </span>HAS<span class=\"w\"> </span>VARIABLE<span class=\"w\"> </span>AS<span class=\"w\"> </span>HEAD<span class=\"w\"> </span>SYMBOL.\nSome<span class=\"w\"> </span>simp<span class=\"w\"> </span>lemmas<span class=\"w\"> </span>have<span class=\"w\"> </span>a<span class=\"w\"> </span>variable<span class=\"w\"> </span>as<span class=\"w\"> </span>head<span class=\"w\"> </span>symbol<span class=\"w\"> </span>of<span class=\"w\"> </span>the<span class=\"w\"> </span>left-hand<span class=\"w\"> </span>side<span class=\"w\"> </span><span class=\"o\">(</span>after<span class=\"w\"> </span>whnfR<span class=\"o\">)</span>:<span class=\"w\"> </span>-/\n\n-<span class=\"w\"> </span>The<span class=\"w\"> </span><span class=\"sb\">`</span>synTaut<span class=\"sb\">`</span><span class=\"w\"> </span>linter<span class=\"w\"> </span>reports:\nTHE<span class=\"w\"> </span>FOLLOWING<span class=\"w\"> </span>DECLARATIONS<span class=\"w\"> </span>ARE<span class=\"w\"> </span>SYNTACTIC<span class=\"w\"> </span>TAUTOLOGIES.<span class=\"w\"> </span>This<span class=\"w\"> </span>usually<span class=\"w\"> </span>means<span class=\"w\"> </span>that<span class=\"w\"> </span>they<span class=\"w\"> </span>are<span class=\"w\"> </span>of<span class=\"w\"> </span>the<span class=\"w\"> </span>form<span class=\"w\"> </span><span class=\"sb\">`</span>∀<span class=\"w\"> </span>a<span class=\"w\"> </span>b<span class=\"w\"> </span>...<span class=\"w\"> </span>z,<span class=\"w\"> </span><span class=\"nv\">e₁</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>e₂<span class=\"sb\">`</span><span class=\"w\"> </span>where<span class=\"w\"> </span><span class=\"sb\">`</span>e₁<span class=\"sb\">`</span><span class=\"w\"> </span>and<span class=\"w\"> </span><span class=\"sb\">`</span>e₂<span class=\"sb\">`</span><span class=\"w\"> </span>are<span class=\"w\"> </span>identical<span class=\"w\"> </span>expressions.<span class=\"w\"> </span>We<span class=\"w\"> </span>call<span class=\"w\"> </span>declarations<span class=\"w\"> </span>of<span class=\"w\"> </span>this<span class=\"w\"> </span>form<span class=\"w\"> </span>syntactic<span class=\"w\"> </span>tautologies.<span class=\"w\"> </span>Such<span class=\"w\"> </span>lemmas<span class=\"w\"> </span>are<span class=\"w\"> </span><span class=\"o\">(</span>mostly<span class=\"o\">)</span><span class=\"w\"> </span>useless<span class=\"w\"> </span>and<span class=\"w\"> </span>sometimes<span class=\"w\"> </span>introduced<span class=\"w\"> </span>unintentionally<span class=\"w\"> </span>when<span class=\"w\"> </span>proving<span class=\"w\"> </span>basic<span class=\"w\"> </span>facts<span class=\"w\"> </span>using<span class=\"w\"> </span><span class=\"sb\">`</span>rfl<span class=\"sb\">`</span>,<span class=\"w\"> </span>when<span class=\"w\"> </span>elaboration<span class=\"w\"> </span>results<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>a<span class=\"w\"> </span>different<span class=\"w\"> </span>term<span class=\"w\"> </span>than<span class=\"w\"> </span>the<span class=\"w\"> </span>user<span class=\"w\"> </span>intended.<span class=\"w\"> </span>You<span class=\"w\"> </span>should<span class=\"w\"> </span>check<span class=\"w\"> </span>that<span class=\"w\"> </span>the<span class=\"w\"> </span>declaration<span class=\"w\"> </span>really<span class=\"w\"> </span>says<span class=\"w\"> </span>what<span class=\"w\"> </span>you<span class=\"w\"> </span>think<span class=\"w\"> </span>it<span class=\"w\"> </span>does.<span class=\"w\"> </span>-/\n--<span class=\"w\"> </span>Mathlib.Data.Multiset.Fintype\n./././Mathlib/Data/Multiset/Fintype.lean:74:1:<span class=\"w\"> </span>error:<span class=\"w\"> </span>Multiset.coe_eq.<span class=\"o\">{</span>u_1<span class=\"o\">}</span><span class=\"w\"> </span>LHS<span class=\"w\"> </span>equals<span class=\"w\"> </span>RHS<span class=\"w\"> </span>syntactically\n\n/-<span class=\"w\"> </span>The<span class=\"w\"> </span><span class=\"sb\">`</span>unusedHavesSuffices<span class=\"sb\">`</span><span class=\"w\"> </span>linter<span class=\"w\"> </span>reports:\nTHE<span class=\"w\"> </span>FOLLOWING<span class=\"w\"> </span>DECLARATIONS<span class=\"w\"> </span>HAVE<span class=\"w\"> </span>INEFFECTUAL<span class=\"w\"> </span>TERM<span class=\"w\"> </span>MODE<span class=\"w\"> </span>HAVE/SUFFICES<span class=\"w\"> </span>BLOCKS.<span class=\"w\"> </span>In<span class=\"w\"> </span>the<span class=\"w\"> </span><span class=\"k\">case</span><span class=\"w\"> </span>of<span class=\"w\"> </span><span class=\"sb\">`</span>have<span class=\"sb\">`</span><span class=\"w\"> </span>this<span class=\"w\"> </span>is<span class=\"w\"> </span>a<span class=\"w\"> </span>term<span class=\"w\"> </span>of<span class=\"w\"> </span>the<span class=\"w\"> </span>form<span class=\"w\"> </span><span class=\"sb\">`</span>have<span class=\"w\"> </span>h<span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span>foo,<span class=\"w\"> </span>bar<span class=\"sb\">`</span><span class=\"w\"> </span>where<span class=\"w\"> </span><span class=\"sb\">`</span>bar<span class=\"sb\">`</span><span class=\"w\"> </span>does<span class=\"w\"> </span>not<span class=\"w\"> </span>refer<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"sb\">`</span>foo<span class=\"sb\">`</span>.<span class=\"w\"> </span>Such<span class=\"w\"> </span>statements<span class=\"w\"> </span>have<span class=\"w\"> </span>no<span class=\"w\"> </span>effect<span class=\"w\"> </span>on<span class=\"w\"> </span>the<span class=\"w\"> </span>generated<span class=\"w\"> </span>proof,<span class=\"w\"> </span>and<span class=\"w\"> </span>can<span class=\"w\"> </span>just<span class=\"w\"> </span>be<span class=\"w\"> </span>replaced<span class=\"w\"> </span>by<span class=\"w\"> </span><span class=\"sb\">`</span>bar<span class=\"sb\">`</span>,<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>addition<span class=\"w\"> </span>to<span class=\"w\"> </span>being<span class=\"w\"> </span>ineffectual,<span class=\"w\"> </span>they<span class=\"w\"> </span>may<span class=\"w\"> </span>make<span class=\"w\"> </span>unnecessary<span class=\"w\"> </span>assumptions<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>proofs<span class=\"w\"> </span>appear<span class=\"w\"> </span>as<span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span>they<span class=\"w\"> </span>are<span class=\"w\"> </span>used.<span class=\"w\"> </span>For<span class=\"w\"> </span><span class=\"sb\">`</span>suffices<span class=\"sb\">`</span><span class=\"w\"> </span>this<span class=\"w\"> </span>is<span class=\"w\"> </span>a<span class=\"w\"> </span>term<span class=\"w\"> </span>of<span class=\"w\"> </span>the<span class=\"w\"> </span>form<span class=\"w\"> </span><span class=\"sb\">`</span>suffices<span class=\"w\"> </span>h<span class=\"w\"> </span>:<span class=\"w\"> </span>foo,<span class=\"w\"> </span>proof_of_goal,<span class=\"w\"> </span>proof_of_foo<span class=\"sb\">`</span><span class=\"w\"> </span>where<span class=\"w\"> </span><span class=\"sb\">`</span>proof_of_goal<span class=\"sb\">`</span><span class=\"w\"> </span>does<span class=\"w\"> </span>not<span class=\"w\"> </span>refer<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"sb\">`</span>foo<span class=\"sb\">`</span>.<span class=\"w\"> </span>Such<span class=\"w\"> </span>statements<span class=\"w\"> </span>have<span class=\"w\"> </span>no<span class=\"w\"> </span>effect<span class=\"w\"> </span>on<span class=\"w\"> </span>the<span class=\"w\"> </span>generated<span class=\"w\"> </span>proof,<span class=\"w\"> </span>and<span class=\"w\"> </span>can<span class=\"w\"> </span>just<span class=\"w\"> </span>be<span class=\"w\"> </span>replaced<span class=\"w\"> </span>by<span class=\"w\"> </span><span class=\"sb\">`</span>proof_of_goal<span class=\"sb\">`</span>,<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>addition<span class=\"w\"> </span>to<span class=\"w\"> </span>being<span class=\"w\"> </span>ineffectual,<span class=\"w\"> </span>they<span class=\"w\"> </span>may<span class=\"w\"> </span>make<span class=\"w\"> </span>unnecessary<span class=\"w\"> </span>assumptions<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>proofs<span class=\"w\"> </span>appear<span class=\"w\"> </span>as<span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span>they<span class=\"w\"> </span>are<span class=\"w\"> </span>used.<span class=\"w\"> </span>-/\n--<span class=\"w\"> </span>Mathlib.Analysis.SpecialFunctions.Integrals\n./././Mathlib/Analysis/SpecialFunctions/Integrals.lean:674:1:<span class=\"w\"> </span>error:<span class=\"w\"> </span>integral_sin_pow<span class=\"w\"> </span>unnecessary<span class=\"w\"> </span>have<span class=\"w\"> </span>this<span class=\"w\"> </span>:<span class=\"w\"> </span>n<span class=\"w\"> </span>+<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span>≠<span class=\"w\"> </span><span class=\"m\">0</span>\n./././Mathlib/Analysis/SpecialFunctions/Integrals.lean:755:1:<span class=\"w\"> </span>error:<span class=\"w\"> </span>integral_cos_pow<span class=\"w\"> </span>unnecessary<span class=\"w\"> </span>have<span class=\"w\"> </span>this<span class=\"w\"> </span>:<span class=\"w\"> </span>n<span class=\"w\"> </span>+<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span>≠<span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>",
        "id": 426217998,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710280075
    },
    {
        "content": "<p>If anyone has suggestions about how we can make it clearer whether it is a bump PR, or the nightly-testing branch, which should be the main priority at any given moment, that would be great.</p>",
        "id": 426218172,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710280146
    },
    {
        "content": "<p>(The rule is very simple: if a bump PR exists, it is the priority.)</p>",
        "id": 426218196,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710280162
    },
    {
        "content": "<p><code>Multiset.coe_eq</code> looks like it can be removed in master but someone should sanity check me</p>",
        "id": 426218633,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710280351
    },
    {
        "content": "<p>Send it to CI! :-)</p>",
        "id": 426218664,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710280368
    },
    {
        "content": "<p>It is chewing on it currently in a branch</p>",
        "id": 426218776,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710280420
    },
    {
        "content": "<p><code>Finset.filter_congr_decidable</code> is correctly flagged as never applying to itself with <code>simp</code></p>",
        "id": 426218912,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710280471
    },
    {
        "content": "<p>I am happy to mark it as <code>auto-merge-after-CI</code> if you make it a PR.</p>",
        "id": 426218923,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710280477
    },
    {
        "content": "<p><code>Nat.rec_add_one</code> can by proven by <code>simp</code> now</p>",
        "id": 426218993,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710280512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426218923\">said</a>:</p>\n<blockquote>\n<p>I am happy to mark it as <code>auto-merge-after-CI</code> if you make it a PR.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11340\">#11340</a></p>",
        "id": 426219217,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710280626
    },
    {
        "content": "<p>Okay, branches all in sync again now.</p>",
        "id": 426219392,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710280696
    },
    {
        "content": "<p>Please focus on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a> instead of <code>nightly-testing</code>.</p>",
        "id": 426219445,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710280719
    },
    {
        "content": "<p>Cleaned up <a href=\"https://github.com/leanprover-community/mathlib4/pull/11340\">#11340</a> correctly now</p>",
        "id": 426219452,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710280721
    },
    {
        "content": "<p>I'm close to the end of Archive and Counterexamples on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a>.</p>",
        "id": 426220338,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710281142
    },
    {
        "content": "<p>Okay, they are done.</p>",
        "id": 426220696,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710281305
    },
    {
        "content": "<p>Things still do on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a>:</p>\n<p>(separate messages per item for emojis!)</p>",
        "id": 426220822,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710281368
    },
    {
        "content": "<ul>\n<li><code>binCast_eq</code> in Mathlib/Data/Nat/Cat/Defs.lean is sorried: hopefully straightforward: the proof used to rely on the syntactic difference between <code>succ</code> and <code>+1</code>.</li>\n</ul>",
        "id": 426220927,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710281406
    },
    {
        "content": "<ul>\n<li><code>castNum_testBit</code> in <code>Mathlib/Data/Num/Lemmas.lean</code> works, but is labelled with a <code>FIXME, hacky proof</code>. <del>Perhaps can be downgraded to an adaptation note and dealt with later.</del></li>\n</ul>",
        "id": 426220998,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710281447
    },
    {
        "content": "<ul>\n<li>Mathlib/LinearAlgebra/TensorProduct/Graded/Internal.lean has a <code>FIXME, no longer works with dsimp, even though it is a rfl lemma</code>.<br>\nI propose downgrading to an adaptation note, and hoping that someone can come up with an import free minimisation, so we can get it fixed.</li>\n</ul>",
        "id": 426221179,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710281529
    },
    {
        "content": "<ul>\n<li>Remaining linter issues. I think <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> might still be working on these? If not, could you let us know what remains?</li>\n</ul>",
        "id": 426221307,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710281597
    },
    {
        "content": "<p>It's quite dangerous to have the bot in the other stream reporting on nightly-testing when that's not the branch to work on, but no harm done this time</p>",
        "id": 426221460,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710281670
    },
    {
        "content": "<p>Yes, I agree. How should that bot work?</p>",
        "id": 426221499,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710281688
    },
    {
        "content": "<ol>\n<li>It should post somewhere public!</li>\n<li>Certainly the Std bot needs to post a green check mark when Std's nightly-testing comes good.</li>\n<li>Perhaps it would detect if there was a PR open to the current <code>bump/v4.8.0</code>branch, and if so post about that branch instead?? That seems hard to set up.</li>\n</ol>",
        "id": 426221689,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710281771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I just added the prime you removed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314/commits/0b6eccda1916deb3bfc1ac937df60f422d31f3bd\">https://github.com/leanprover-community/mathlib4/pull/11314/commits/0b6eccda1916deb3bfc1ac937df60f422d31f3bd</a> because it's about <code>List.merge'</code> (because Std added a conflicting <code>List.merge</code>)</p>",
        "id": 426222736,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710282341
    },
    {
        "content": "<p>Maybe I should PR that rename now?</p>",
        "id": 426222913,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710282421
    },
    {
        "content": "<p>Why didn't I see a conflict?</p>",
        "id": 426223107,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710282493
    },
    {
        "content": "<p>Is it that on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a> we haven't actually bump the Std dependency yet, so don't see this?</p>",
        "id": 426223132,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710282508
    },
    {
        "content": "<p>If so, perhaps this can be done as a PR direct to <code>master</code>, updating <code>Std</code> and doing this rename.</p>",
        "id": 426223176,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710282531
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11343\">https://github.com/leanprover-community/mathlib4/pull/11343</a> just moves mathlib's definition out of the way; we can then bump and adapt independently</p>",
        "id": 426223925,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710282962
    },
    {
        "content": "<p>And with that I'm off to bed</p>",
        "id": 426224010,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710283004
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 426224415,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710283270
    },
    {
        "content": "<p>Sorry. Tea time. I have the linter appeased. Just need to get in the correct branch</p>",
        "id": 426224457,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710283311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>, I pushed a few more primes to that branch, and will merge shortly.</p>",
        "id": 426224550,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710283367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426221689\">said</a>:</p>\n<blockquote>\n<ol>\n<li>It should post somewhere public!</li>\n<li>Certainly the Std bot needs to post a green check mark when Std's nightly-testing comes good.</li>\n<li>Perhaps it would detect if there was a PR open to the current <code>bump/v4.8.0</code>branch, and if so post about that branch instead?? That seems hard to set up.</li>\n</ol>\n</blockquote>\n<p>I think 3 is a crucial step if we are to have this setup; I think it's quite a confusing setup overall and any guidance that is bot-driven would be good. Also, I'm not sure if the nightly-testing guide is available on the public stream; on the other hand, I'm not sure if it's out of date.</p>",
        "id": 426224701,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1710283456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>, which guide did you have in mind? <a href=\"https://leanprover-community.github.io/contribute/tags_and_branches.html\">https://leanprover-community.github.io/contribute/tags_and_branches.html</a>?</p>",
        "id": 426224982,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710283609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426059229\">said</a>:</p>\n<blockquote>\n<p>In Lean core, we have a <code>@[csimp]</code> lemma that makes <code>Nat.rec</code> have compiled code, but not for <code>Nat.recOn</code>. I guess <code>compile_inductive%</code> wants to define that as well as <code>Nat.brecOn</code>, but since the <code>Nat.rec</code> csimp is already defined it gives up.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, do you have a suggestion for what we should do here?</p>\n<p>Currently <code>test/CompileInductive.lean</code> is failing on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a> with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Nat.recOn</span> <span class=\"c1\">-- code generator does not support recursor 'Nat.recOn' yet, consider using 'match ... with' and/or structural recursion</span>\n</code></pre></div>",
        "id": 426225402,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710283852
    },
    {
        "content": "<p>Currently my idea is to just add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Adaptation note: nightly-2024-03-11.</span>\n<span class=\"c1\">-- Currently we can't run `compile_inductive% Nat`,</span>\n<span class=\"c1\">-- as `Nat.rec` already has a `@[csimp]` lemma.</span>\n<span class=\"c1\">-- However this means that we don't generated code for `Nat.recOn`.</span>\n</code></pre></div>\n<p>and deal with this later.</p>",
        "id": 426225612,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710283971
    },
    {
        "content": "<p>Ok, I had 5 of 9 linter failures only. I pushed to the bump branch. I will check out of the others now</p>",
        "id": 426225642,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710283989
    },
    {
        "content": "<p>Where is <code>compile_inductive%</code> defined?</p>",
        "id": 426225698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710284019
    },
    {
        "content": "<p>I have liberally applied the <code>Adaptation note</code>. Please feel free to remove if you are satisfied by the explanation</p>",
        "id": 426225744,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710284042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <code>Mathlib.Util.CompileInductive</code></p>",
        "id": 426225806,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710284054
    },
    {
        "content": "<p>Does <code>compile_def% Nat.recOn</code> work?</p>",
        "id": 426225904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710284111
    },
    {
        "content": "<p>I've fixed the tests now. I think it is only review and the linter</p>",
        "id": 426225971,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710284161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , looks like it does, thanks!</p>",
        "id": 426226022,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710284168
    },
    {
        "content": "<p>I think probably there's still a TODO here, as I think <code>compile_inductive%</code> does more than just compile <code>rec</code> and <code>recOn</code>, but I would guess that mathlib only actually cares about those two</p>",
        "id": 426226068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710284203
    },
    {
        "content": "<p>Would you be able to write such a TODO?</p>",
        "id": 426226112,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710284232
    },
    {
        "content": "<p>Is a later nightly going to compile <code>recOn</code> too?</p>",
        "id": 426226137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710284244
    },
    {
        "content": "<p>I'm not sure, will wait to see what Kyle says.</p>",
        "id": 426226562,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710284444
    },
    {
        "content": "<p>We could also just disable the warning in <code>compile_inductive%</code>, I guess.</p>",
        "id": 426226641,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710284469
    },
    {
        "content": "<p>I was trying to decide whether to put compiled versions of <code>Nat.recOn</code> and <code>Nat.brecOn</code> into core, but if we can make mathlib compile these, I'd so go with that for now.</p>\n<p>I don't know what's the long term vision is for compiling recursors.</p>",
        "id": 426226666,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710284483
    },
    {
        "content": "<p>Okay, I will go with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">compile_def</span><span class=\"bp\">%</span> <span class=\"n\">Nat.recOn</span>\n<span class=\"n\">compile_def</span><span class=\"bp\">%</span> <span class=\"n\">Nat.brecOn</span>\n</code></pre></div>\n<p>for now.</p>",
        "id": 426226764,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710284529
    },
    {
        "content": "<p>The reason that <code>Nat.rec</code> is compiled in core is that it's small hack to get <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Nat/Basic.lean#L27\"><code>Nat.recAux</code></a> not be marked <code>noncomputable</code></p>",
        "id": 426226836,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710284565
    },
    {
        "content": "<p>Is <code>docBlame</code> supposed to complain about <code>let rec</code>’s?</p>",
        "id": 426227497,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710284923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>, just a request re: adaptation/porting notes: if they could always go <em>before</em> the change, rather than after, that is easier to understand.</p>\n<p>e.g. <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314/files#diff-8c3d7fa2ef5b966d341ccbdf4e174af7c0e7a3d599efb5b74205f1adbaa061ac\">https://github.com/leanprover-community/mathlib4/pull/11314/files#diff-8c3d7fa2ef5b966d341ccbdf4e174af7c0e7a3d599efb5b74205f1adbaa061ac</a></p>",
        "id": 426227500,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710284924
    },
    {
        "content": "<p>Oh sorry, I thought I was but probably wasn’t careful</p>",
        "id": 426227554,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710284966
    },
    {
        "content": "<p>That should satisfy the linter. Nothing worthwhile to note. Did <code>field_simp</code> get better?</p>",
        "id": 426229325,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710285976
    },
    {
        "content": "<p>If you have a better pattern for hiding a <code>let rec</code> from <code>docBlame</code> please feel free</p>",
        "id": 426229432,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710286037
    },
    {
        "content": "<p>Write a comment? :-)</p>",
        "id": 426229450,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710286051
    },
    {
        "content": "<p>That one was commented. In front even!</p>",
        "id": 426229478,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710286071
    },
    {
        "content": "<p>As far as I'm aware no one has fixed <code>field_simp</code> and it is still super slow because of the higher discharge depth limit.</p>",
        "id": 426229486,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710286077
    },
    {
        "content": "<p>I was able to delete two <code>have</code>’s showing something was nonzero</p>",
        "id": 426229578,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710286114
    },
    {
        "content": "<p>Okay, thank you everyone!</p>\n<p>I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a> is ready to go now. If anyone is available to do a final review/delegate that would be great.</p>",
        "id": 426230649,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710286855
    },
    {
        "content": "<p>One sec. One more linter failure locally.</p>",
        "id": 426230714,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710286910
    },
    {
        "content": "<p>Ok, that is fixed.</p>",
        "id": 426230894,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710287020
    },
    {
        "content": "<p>Is it expected that <code>exact?</code> is timing out quite often still?</p>",
        "id": 426231174,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710287196
    },
    {
        "content": "<p>No, not really. :-( Examples are super helpful!</p>",
        "id": 426236421,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710290389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426229478\">said</a>:</p>\n<blockquote>\n<p>That one was commented. In front even!</p>\n</blockquote>\n<p>I meant a doc-string on the actual let rec</p>",
        "id": 426238126,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710291593
    },
    {
        "content": "<p>reminder, the syntax for this is <code>let rec /-- doc -/ foo := 1; bla</code></p>",
        "id": 426238293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710291695
    },
    {
        "content": "<p>Presumably</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">rec</span>\n    <span class=\"sd\">/-- long doc-string -/</span>\n    <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">bla</span>\n</code></pre></div>\n<p>is the right formatting for a long doc-string?</p>",
        "id": 426238400,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710291749
    },
    {
        "content": "<p>(I've done this in Nat/Factorization/Basic now)</p>",
        "id": 426238432,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710291776
    },
    {
        "content": "<p>it's the best under the cirumstances; ideally the grammar would be fixed to allow</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"sd\">/-- long doc-string -/</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">bla</span>\n</code></pre></div>",
        "id": 426238456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710291797
    },
    {
        "content": "<p>Well, I at least read through the changes and they seem ok</p>",
        "id": 426239034,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710292138
    },
    {
        "content": "<p>Okay. I'll take it. :-)</p>",
        "id": 426239061,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710292153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, one of the tests for MoveAdd is failing in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a>. Since it doesn't seem to affect the rest of Mathlib, I have just commented it out for now, so as to not delay <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a>.</p>\n<p>Could you please investigate this test, and fix? (You can either make a PR to <code>master</code> if you have something that will work on both old and new Lean, or just PR to <code>bump/v4.8.0</code> if the fix will be specific to new Lean.)</p>",
        "id": 426241402,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710293514
    },
    {
        "content": "<p>We need to do the <code>List.merge</code> fix in the right order:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11347\">https://github.com/leanprover-community/mathlib4/pull/11347</a> is the PR which bumps <code>master</code>s Std dependency, and pulls in <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>'s fixes for <a href=\"https://github.com/leanprover/std4/pull/579\">https://github.com/leanprover/std4/pull/579</a>.</li>\n</ul>",
        "id": 426243036,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710294472
    },
    {
        "content": "<ul>\n<li>We can then merge that into <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a>.</li>\n</ul>",
        "id": 426243064,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710294483
    },
    {
        "content": "<p>Sorry, running to catch the last shuttle. I’ll look at the bloat in injective resolutions later or tomorrow</p>",
        "id": 426245738,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710295915
    },
    {
        "content": "<p>Sorry for the mess. I totally dropped the ball on <a href=\"https://github.com/leanprover/std4/pull/579\">std4#579</a>.</p>",
        "id": 426248622,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1710297557
    },
    {
        "content": "<p>No mess at all, it seems to have gone cleanly.</p>",
        "id": 426248652,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710297587
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11349\">#11349</a> fixes injective resolution</p>",
        "id": 426254696,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710301844
    },
    {
        "content": "<p>We've created a new stream <a href=\"#narrow/stream/428973-nightly-testing\">https://leanprover.zulipchat.com/#narrow/stream/428973-nightly-testing</a> for coordinating work on keeping Mathlib and other projects up to date with nightly releases of Lean.</p>",
        "id": 426257547,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710303857
    },
    {
        "content": "<p>Please join us. :-)</p>",
        "id": 426257554,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710303862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426241402\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span>, one of the tests for MoveAdd is failing in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a>. Since it doesn't seem to affect the rest of Mathlib, I have just commented it out for now, so as to not delay <a href=\"https://github.com/leanprover-community/mathlib4/pull/11314\">#11314</a>.</p>\n<p>Could you please investigate this test, and fix? (You can either make a PR to <code>master</code> if you have something that will work on both old and new Lean, or just PR to <code>bump/v4.8.0</code> if the fix will be specific to new Lean.)</p>\n</blockquote>\n<p>I'll investigate this!</p>",
        "id": 426270211,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710312758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113488-general/topic/Help.20with.20.60nightly-testing.60/near/426254696\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11349\">#11349</a> fixes injective resolution</p>\n</blockquote>\n<p>I recall (can't find right now) a fairly big regression by the bump PR, while <a href=\"https://github.com/leanprover-community/mathlib4/pull/11349\">#11349</a> is only half the size. Granted, <a href=\"https://github.com/leanprover-community/mathlib4/pull/11349\">#11349</a> landed on master - does this fix the regression on the bump branch?</p>",
        "id": 426394377,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710351520
    },
    {
        "content": "<p>I didn’t benchmark but the experience in editor says most surely</p>",
        "id": 426394935,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710351702
    }
]