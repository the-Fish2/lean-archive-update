[
    {
        "content": "<p>Hi there,</p>\n<p>I am new to Lean and I am trying to formalise some basic things to learn it.</p>\n<p>I am struggling with to find a way to prove termination for the following function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">inter2</span> <span class=\"o\">(</span><span class=\"n\">l0</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">l0</span><span class=\"o\">,</span><span class=\"n\">l1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">([],</span> <span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{[]}</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"o\">([],</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">inter2</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">))</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">inter2</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I am aware that Lean can prove termination if I turn (l0,l1) into l0, l1 but I wanted, for the sake of exercise, learn how to deal with this case above.</p>\n<p>Many thanks in advance!</p>",
        "id": 436336223,
        "sender_full_name": "Pedro Antonino",
        "timestamp": 1714503821
    },
    {
        "content": "<p>Try <code>termination_by  (l0.length, l1.length)</code></p>",
        "id": 436338990,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714505013
    },
    {
        "content": "<p>I sill get the error \"failed to prove termination\" :-(</p>",
        "id": 436368223,
        "sender_full_name": "Pedro Antonino",
        "timestamp": 1714518672
    },
    {
        "content": "<p>this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">inter2</span> <span class=\"o\">(</span><span class=\"n\">l0</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l0</span><span class=\"o\">,</span><span class=\"n\">l1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">([],</span> <span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{[]}</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"o\">([],</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">inter2</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">))</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">inter2</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"o\">(</span><span class=\"n\">l0.length</span><span class=\"o\">,</span> <span class=\"n\">l1.length</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">all_goals</span> <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">decreasing_with</span> <span class=\"n\">decreasing_trivial</span>\n</code></pre></div>\n<p>Lean really doesn't like matches on tuples though, the default decreasing tactic doesn't do what you want</p>",
        "id": 436368485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714518856
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 436369364,
        "sender_full_name": "Pedro Antonino",
        "timestamp": 1714519422
    }
]