[
    {
        "content": "<p><a href=\"https://live.lean-lang.org/\">https://live.lean-lang.org/</a> is neat! How is is set up to contain possibly malicious code? I see that network doesn’t work, and that all file systems are <code>ro</code> from the point of view of the lean process. (<code>run_cmd</code> is quite neat for that :-D)</p>",
        "id": 395831106,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696926137
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/lean4web/blob/main/server/bubblewrap.sh\">https://github.com/leanprover-community/lean4web/blob/main/server/bubblewrap.sh</a> :) . There may be some extra FRO configuration on top</p>",
        "id": 395832874,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696926776
    },
    {
        "content": "<p>It makes use of <a href=\"https://github.com/containers/bubblewrap\">Bubblewrap</a> which is a low-level unprivileged sandboxing tool. The security policies can be configured. <a href=\"https://github.com/leanprover-community/lean4game\">Lean 4 Game</a> uses the same technology with <a href=\"https://github.com/leanprover-community/lean4game/blob/main/server/bubblewrap.sh\">similar setup</a>.</p>",
        "id": 395832941,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696926799
    },
    {
        "content": "<p>I need to update my links.  I see you already changed where the link for running block code in Zulip.  The Lean community webpage Try it online link probably needs to change. Also do you plan to make the code in the Lean manual (and maybe similar documentation like TPIL and FPIL) runnable via this website?  I see the manual code now has greyed out <code>namespace Ex</code> suggesting something like this.</p>",
        "id": 395852186,
        "sender_full_name": "Jason Rute",
        "timestamp": 1696933619
    },
    {
        "content": "<p>Unfortunately a hardcoded playground association seems to be one of many mdBook limitations /cc <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span></p>",
        "id": 395853163,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696934016
    },
    {
        "content": "<p>I'm definitely thinking about the best way to do this in the short and long term, but there's not an immediate plan today</p>",
        "id": 395853305,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1696934071
    },
    {
        "content": "<p>A quick css hack to make <a href=\"https://live.lean-lang.org\">https://live.lean-lang.org</a> dark again in case anyone is also interested: <a href=\"https://gist.github.com/utensil/552f47cd687290c1131da0a79cc7dff9\">https://gist.github.com/utensil/552f47cd687290c1131da0a79cc7dff9</a></p>\n<p>I use it via <a href=\"https://github.com/openstyles/stylus/\">https://github.com/openstyles/stylus/</a> .</p>\n<p>It looks like this:</p>\n<p><a href=\"/user_uploads/3121/eY5EZIdjVlsMRBdSrMwLtyJg/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/eY5EZIdjVlsMRBdSrMwLtyJg/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/eY5EZIdjVlsMRBdSrMwLtyJg/image.png\"></a></div><p>I've tried to cover obvious edge cases, but sure it's not exhaustive.</p>",
        "id": 395884626,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696944791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> Thank you for the dark theme template! I now added a dark mode setting to the editor. The change is already live at our test-playground: <a href=\"http://lean.math.hhu.de\">lean.math.hhu.de</a>. I assume it will make its way to <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> too in the next update cycle.</p>",
        "id": 396493536,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1697199098
    },
    {
        "content": "<p>I just noticed that <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> can't copy-paste the full infoview into comment, it will drop anything involves types(maybe widgets), leaving only text, e.g.</p>\n<p><a href=\"/user_uploads/3121/kK3QHRwiWWBnIFjiGHvsLUkn/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kK3QHRwiWWBnIFjiGHvsLUkn/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/kK3QHRwiWWBnIFjiGHvsLUkn/image.png\"></a></div>",
        "id": 405820065,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701695184
    },
    {
        "content": "<p>Interesting. Seems somehow specific to error messages. I opened <a href=\"https://github.com/leanprover-community/lean4web/issues/13\">lean4web#13</a>, as I might not have the time to look into it myself this week.</p>",
        "id": 405827207,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1701697529
    },
    {
        "content": "<p>Is anyone else running into issues with <a href=\"http://live.lean-lang.org/\">live.lean-lang.org</a>?</p>",
        "id": 437352016,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1715037020
    },
    {
        "content": "<p>I'm seeing <code>unknown package 'Mathlib'</code> for some reason</p>",
        "id": 437352078,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1715037084
    },
    {
        "content": "<p>indeed. I know <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> tried to update it today. Maybe the lake project isnt built properly?</p>\n<p>meanwhile, <a href=\"http://lean.math.hhu.de\">lean.math.hhu.de</a> works as an non-updated backup</p>",
        "id": 437352871,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715037609
    },
    {
        "content": "<p>It seems the installation fell prey to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">May</span> <span class=\"mi\">07</span> <span class=\"mi\">06</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">23</span> <span class=\"n\">nixos</span> <span class=\"n\">gpwdr6h3z9wqx1m3pz6pimgdhspzan8x</span><span class=\"bp\">-</span><span class=\"n\">update</span><span class=\"bp\">-</span><span class=\"n\">leanproject</span><span class=\"o\">[</span><span class=\"mi\">4009958</span><span class=\"o\">]:</span> <span class=\"n\">Unfortunately</span><span class=\"o\">,</span> <span class=\"n\">you</span> <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"n\">broken</span> <span class=\"n\">Lean</span> <span class=\"n\">v4.8.0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span> <span class=\"n\">installation.</span>\n<span class=\"n\">May</span> <span class=\"mi\">07</span> <span class=\"mi\">06</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">23</span> <span class=\"n\">nixos</span> <span class=\"n\">gpwdr6h3z9wqx1m3pz6pimgdhspzan8x</span><span class=\"bp\">-</span><span class=\"n\">update</span><span class=\"bp\">-</span><span class=\"n\">leanproject</span><span class=\"o\">[</span><span class=\"mi\">4009958</span><span class=\"o\">]:</span> <span class=\"n\">Please</span> <span class=\"n\">run</span> <span class=\"bp\">`</span><span class=\"n\">elan</span> <span class=\"n\">toolchain</span> <span class=\"n\">uninstall</span> <span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">v4.8.0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"n\">try</span> <span class=\"n\">again.</span>\n</code></pre></div>\n<p>Rekicking it.</p>",
        "id": 437394137,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715066920
    },
    {
        "content": "<p><del>And now it rebuilds all of mathlib, as if the cache was broken by the change to <code>batteries</code>?</del><br>\nNevermind, just lake’s confusing output</p>",
        "id": 437394199,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715066944
    },
    {
        "content": "<p>Should be working again!</p>",
        "id": 437394273,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715066976
    },
    {
        "content": "<p>(Same issue on <code>loogle</code> as well… <span aria-label=\"hammer and wrench\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"hammer and wrench\">:hammer_and_wrench:</span> )</p>",
        "id": 437394845,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715067108
    },
    {
        "content": "<p>How much traffic can <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> handle? If I were to direct a class of say, 10, or 30, or 50 people to try the website all at once, would it be fine?</p>",
        "id": 440707078,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1716723180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> what does the infra think^^</p>",
        "id": 440708797,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716725022
    },
    {
        "content": "<p>(My uninformed guess, going off my memory of previous iterations, is that 10 would be fine and 50 would be scary.)</p>",
        "id": 440711308,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716727763
    },
    {
        "content": "<p>You can also use <a href=\"http://lean.math.hhu.de\">lean.math.hhu.de</a> simultaneously if you experience capacity limits, that's an identical clone. From my memory, the capacity there should be somewhere around 70+, but I havent really tested that, and that capacity is shared with (NN-)Game players. (and you might want to give me a heads-up if you depend on that being functioning at a specific time)</p>",
        "id": 440723554,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1716740100
    },
    {
        "content": "<p>(almost identical clone. The available project like \"nightly\" or \"duper demo\" might differ)</p>",
        "id": 440723643,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1716740174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/113488-general/topic/https.3A.2F.2Flive.2Elean-lang.2Eorg.2F/near/440723643\">said</a>:</p>\n<blockquote>\n<p>(almost identical clone. The available project like \"nightly\" or \"duper demo\" might differ)</p>\n</blockquote>\n<p>Just noticed that <a href=\"https://lean.math.hhu.de/#project=DuperDemo\">DuperDemo</a> is not working. It might need some update since <a href=\"#narrow/stream/113488-general/topic/Duper/near/440784340\">the bump</a>.</p>",
        "id": 440801060,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716797988
    },
    {
        "content": "<p>with \"not working\" you mean \"working perfectly fine but still on v4.7.0\", aren't you? Just updated it now to the newest Duper and hopefully fixed the auto-update script, thanks for the notice!</p>",
        "id": 440807436,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1716800128
    },
    {
        "content": "<p>Somehow what I was expriencing is it stuck at <code>import Duper</code>. Thanks for the bump and now it works!</p>",
        "id": 440807939,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716800284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/https.3A.2F.2Flive.2Elean-lang.2Eorg.2F/near/440807939\">said</a>:</p>\n<blockquote>\n<p>Somehow what I was expriencing is it stuck at <code>import Duper</code>. Thanks for the bump and now it works!</p>\n</blockquote>\n<p>weird, it worked when I tried. But sometimes I get weird (lake/lean) errors that are fixed with reloading, and I never took the time to look into that...</p>",
        "id": 440811397,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1716801301
    },
    {
        "content": "<p>Hi is <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> considering add a share feature that shortens the url. Or any recommended url shortened service for this?</p>",
        "id": 441165777,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716959233
    },
    {
        "content": "<p>Posting a raw url to the playground in zulip looks quite inconvenient and markdown link syntax sometimes failed to parse it like <a href=\"https://live.lean-lang.org/#code=namespace%20InductiveFamilies%0A%0Ainductive%20Vector%20(%CE%B1%20%3A%20Type%20u)%20%3A%20Nat%20%E2%86%92%20Type%20u%20where%0A%7C%20nil%20%3A%20Vector%20%CE%B1%200%0A%7C%20cons%20(a%3A%20%CE%B1)%20%7Bn%20%3A%20Nat%7D%20(b%3A%20Vector%20%CE%B1%20n)%20%3A%20Vector%20%CE%B1%20(n%2B1)%0A%0A%23check%20Vector.nil%0A%23check%20Vector.cons%203%20Vector.nil%0A%0A--%20Inductive_Families.Vector.recOn.%7Bu_1%2C%20u%7D%20%7B%CE%B1%20%3A%20Type%20u%7D%20%7Bmotive%20%3A%20(a%20%3A%20Nat)%20%E2%86%92%20Vector%20%CE%B1%20a%20%E2%86%92%20Sort%20u_1%7D%20%7Ba%20%3A%20Nat%7D%0A--%20%20%20(t%20%3A%20Vector%20%CE%B1%20a)%20(nil%20%3A%20motive%200%20Vector.nil)%0A--%20%20%20(cons%20%3A%20(a%20%3A%20%CE%B1)%20%E2%86%92%20%7Bn%20%3A%20Nat%7D%20%E2%86%92%20(a_1%20%3A%20Vector%20%CE%B1%20n)%20%E2%86%92%20motive%20n%20a_1%20%E2%86%92%20motive%20(n%20%2B%201)%20(Vector.cons%20a%20a_1))%20%3A%20motive%20a%20t\">test</a></p>",
        "id": 441165924,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716959365
    },
    {
        "content": "<p>Oh the above can be correctly parsed by the markdown syntax, a longer version that failed:</p>\n<p><a href=\"https://live.lean-lang.org/#code=namespace%20InductiveFamilies%0A%0Ainductive%20Vector%20(%CE%B1%20%3A%20Type%20u)%20%3A%20Nat%20%E2%86%92%20Type%20u%20where%0A%7C%20nil%20%3A%20Vector%20%CE%B1%200%0A%7C%20cons%20(a%3A%20%CE%B1)%20%7Bn%20%3A%20Nat%7D%20(b%3A%20Vector%20%CE%B1%20n)%20%3A%20Vector%20%CE%B1%20(n%2B1)%0A%0A%23check%20Vector.nil%0A%23check%20Vector.cons%203%20Vector.nil%0A%0A%23check%20Vector.recOn%0A--%20Inductive_Families.Vector.recOn.%7Bu_1%2C%20u%7D%20%7B%CE%B1%20%3A%20Type%20u%7D%20%7Bmotive%20%3A%20(a%20%3A%20Nat)%20%E2%86%92%20Vector%20%CE%B1%20a%20%E2%86%92%20Sort%20u_1%7D%20%7Ba%20%3A%20Nat%7D%0A--%20%20%20(t%20%3A%20Vector%20%CE%B1%20a)%20(nil%20%3A%20motive%200%20Vector.nil)%0A--%20%20%20(cons%20%3A%20(a%20%3A%20%CE%B1)%20%E2%86%92%20%7Bn%20%3A%20Nat%7D%20%E2%86%92%20(a_1%20%3A%20Vector%20%CE%B1%20n)%20%E2%86%92%20motive%20n%20a_1%20%E2%86%92%20motive%20(n%20%2B%201)%20(Vector.cons%20a%20a_1))%20%3A%20motive%20a%20t%0A%0Adef%20length%20%7B%CE%B1%20%3A%20Type%20u%7D%20(x%20%3A%20Vector%20%CE%B1%20n)%20%3A%20Nat%20%3A%3D%20n%0A%0Atheorem%20vector_eq%20(h%20%3A%20n%20%3D%20m)%20%3A%20Vector%20%CE%B1%20n%20%3D%20Vector%20%CE%B1%20m%20%3A%3D%0AcongrArg%20(Vector%20%CE%B1)%20h%0A%0Adef%20append%20%7B%CE%B1%20%3A%20Type%20u%7D%20(x%20%3A%20Vector%20%CE%B1%20n)%20(y%20%3A%20Vector%20%CE%B1%20m)%20%3A%20Vector%20%CE%B1%20(n%2Bm)%20%3A%3D%0AVector.recOn%20(motive%20%3A%3D%20fun%20(a%20%3A%20Nat)%20(b%20%3A%20Vector%20%CE%B1%20a)%20%3D%3E%20Vector%20%CE%B1%20(a%2Bm))%20x%0A(by%20simp%20%3B%20exact%20y)%0A(by%0A%20%20intro%20a\" title=\"%20n'%20x'%20xy'%0A%20%20let%20xy%20%3A%3D%20(Vector.cons%20a'%20xy\">link</a>%0A%20%20let%20h%3A%20Vector%20%CE%B1%20(n'%20%2B%20m%20%2B%201)%20%3D%20Vector%20%CE%B1%20(n'%20%2B%201%20%2B%20m)%20%3A%3D%20by%20simp%20%5BNat.add_assoc%2C%20Nat.add_comm%2C%20vector_eq%5D%0A%20%20let%20xy'%20%3A%3D%20cast%20h%20xy%0A%20%20exact%20xy'%0A%20%20)%0A%0Adef%20append%E2%82%81%20%7B%CE%B1%20%3A%20Type%20u%7D%20(x%20%3A%20Vector%20%CE%B1%20n)%20(y%20%3A%20Vector%20%CE%B1%20m)%20%3A%20Vector%20%CE%B1%20(n%2Bm)%20%3A%3D%0Amatch%20x%20with%0A%7C%20nil%20%3D%3E%20sorry%0A%7C%20cons%20h%20t%20%3D%3E%20sorry%0A%0Aend%20InductiveFamilies%0A）</p>",
        "id": 441166206,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716959630
    },
    {
        "content": "<p>You can post the code between triple back ticks and get a link to l.l.o for free</p>",
        "id": 441166534,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716959900
    },
    {
        "content": "<p>Like this (click the button in the corner)</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">InductiveFamilies</span>\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nil</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"bp\">.</span><span class=\"n\">recOn</span>\n<span class=\"c1\">-- Inductive_Families.Vector.recOn.{u_1, u} {α : Type u} {motive : (a : Nat) → Vector α a → Sort u_1} {a : Nat}</span>\n<span class=\"c1\">--   (t : Vector α a) (nil : motive 0 Vector.nil)</span>\n<span class=\"c1\">--   (cons : (a : α) → {n : Nat} → (a_1 : Vector α n) → motive n a_1 → motive (n + 1) (Vector.cons a a_1)) : motive a t</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">n</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">vector_eq</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"n\">congrArg</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">h</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"n\">Vector</span><span class=\"bp\">.</span><span class=\"n\">recOn</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">a</span>\n</code></pre></div>",
        "id": 441167134,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1716960411
    },
    {
        "content": "<p>Yeah it works perfectly on the desktop environment. Thank you very much! In mobile phone I found the \"load from zulip message\" feature in l.l.o, although it’s no longer a \"one click\" thing.</p>",
        "id": 441167804,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716960896
    },
    {
        "content": "<p>as far as I know URL shortening usually means setting up a database that stores the pairs of shortened and original keys, which sounds like too much overhead. Adding a feature to integrate an external shortener seems more reasonable, if somebody feels like PRing that :)</p>\n<p>On the other hand, the link above breaking sounds like a bug that should be fixed</p>",
        "id": 441185582,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1716969306
    },
    {
        "content": "<p>Yeah it is probably caused by some character like <code>'</code> is not quoted in the url : <a href=\"https://live.lean-lang.org/#code=def%20a'%3A%3D1%0D%0Adef%20b'%3A%3D2\">https://live.lean-lang.org/#code=def%20a'%3A%3D1%0D%0Adef%20b'%3A%3D2</a> compares <a href=\"https://live.lean-lang.org/#code=def%20a'%3A%3D1%0D%0Adef%20b'%3A%3D2\">test</a></p>",
        "id": 441187836,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716970023
    },
    {
        "content": "<p>Oh this works, the above code snippet not working is</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">InductiveFamilies</span>\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nil</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"bp\">.</span><span class=\"n\">recOn</span>\n<span class=\"c1\">-- Inductive_Families.Vector.recOn.{u_1, u} {α : Type u} {motive : (a : Nat) → Vector α a → Sort u_1} {a : Nat}</span>\n<span class=\"c1\">--   (t : Vector α a) (nil : motive 0 Vector.nil)</span>\n<span class=\"c1\">--   (cons : (a : α) → {n : Nat} → (a_1 : Vector α n) → motive n a_1 → motive (n + 1) (Vector.cons a a_1)) : motive a t</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">n</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">vector_eq</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"n\">congrArg</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">h</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"n\">Vector</span><span class=\"bp\">.</span><span class=\"n\">recOn</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">a'</span><span class=\"w\"> </span><span class=\"n\">n'</span><span class=\"w\"> </span><span class=\"n\">x'</span><span class=\"w\"> </span><span class=\"n\">xy'</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">xy</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"n\">a'</span><span class=\"w\"> </span><span class=\"n\">xy'</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n'</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n'</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">vector_eq</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">xy'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">cast</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">xy</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">xy'</span>\n<span class=\"w\">  </span><span class=\"o\">)</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">append₁</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nil</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">InductiveFamilies</span>\n</code></pre></div>\n<p>Cannot find a shorter example though</p>",
        "id": 441188125,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716970118
    },
    {
        "content": "<p>Ah maybe it’s just too long for the markdown link syntax in zulip..</p>",
        "id": 441188802,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716970359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/113488-general/topic/https.3A.2F.2Flive.2Elean-lang.2Eorg.2F/near/441185582\">said</a>:</p>\n<blockquote>\n<p>as far as I know URL shortening usually means setting up a database that stores the pairs of shortened and original keys, which sounds like too much overhead. Adding a feature to integrate an external shortener seems more reasonable, if somebody feels like PRing that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>In general, the potential information loss of a short url service is not a good thing.</p>\n<p>Maybe a better way is to compress the code then convert to base64.</p>",
        "id": 441191120,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716971179
    },
    {
        "content": "<p>I think I once looked at compressing the lean code, and the results were really not that astonishing. Something like max. 20% shortage for long codes at the costs of overhead for short snippets.</p>",
        "id": 441196465,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1716973100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560873\">Shanghe Chen</span> <a href=\"#narrow/stream/113488-general/topic/https.3A.2F.2Flive.2Elean-lang.2Eorg.2F/near/441188802\">said</a>:</p>\n<blockquote>\n<p>Ah maybe it’s just too long for the markdown link syntax in zulip..</p>\n</blockquote>\n<p>I think its the character <code>)</code> and for some reason the browser immediately turns <code>%29</code> into <code>)</code>, so that seems like it's not as simple of a fix without changing the format, like using base64 as suggested. (which in turn might complicate how zulip messages link to the editor)</p>",
        "id": 441196906,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1716973249
    },
    {
        "content": "<p>Yeah it seems only that just zulip can’t handle it correctly. I tested some other markdown tools and it rendered without error. And the raw url can be opened correctly in the chrome browser too. Since I only used shortened url for temp sharing and I have got the above useful informations. It seems no necessary for any change <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 441200180,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716974496
    },
    {
        "content": "<p>Unfortunately, Zulip <a href=\"https://leanprover.zulipchat.com/help/code-blocks#code-playgrounds\">only supports url encoding for code</a>.</p>",
        "id": 441212555,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716979222
    },
    {
        "content": "<p>It would still be useful to have a database storage for a week, so that sharing a link in a presentation is easier. Alternatively, support some feature that grabs the code from a GitHub gist or other pastebin service, which is stored in the url?</p>",
        "id": 441250953,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1716992297
    },
    {
        "content": "<p>I think that second feature exists?</p>",
        "id": 441253251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716992989
    },
    {
        "content": "<p>indeed that's \"Load\" &gt; \"Load From URL\" at the top</p>",
        "id": 441273048,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1716999018
    },
    {
        "content": "<p>OH! Wow I missed that, that's awesome.</p>",
        "id": 441296961,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1717008564
    },
    {
        "content": "<p>Hi I found that llo is also very nice using from a mobile phone. Using it in mobile env I find it is a little inconvenient for selecting text.  Could it be possible with an option bringing the system panel rather than the vscode panel up? Using IOS in most editing environments if I hold touching the screen, the system panel with \"paste/select/select all\" shown and in llo the vscode command panel shown. Most of the time the vscode command panel works perfectly but not quite for selecting texts:</p>",
        "id": 446000115,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1718943581
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/vHatgXrIfVpViSDNgB34g33n/RPReplay_Final1718943020.mp4\">RPReplay_Final1718943020.mp4</a></p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"/user_uploads/3121/vHatgXrIfVpViSDNgB34g33n/RPReplay_Final1718943020.mp4\" title=\"RPReplay_Final1718943020.mp4\"><video preload=\"metadata\" src=\"/user_uploads/3121/vHatgXrIfVpViSDNgB34g33n/RPReplay_Final1718943020.mp4\"></video></a></div>",
        "id": 446000899,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1718943812
    },
    {
        "content": "<p>Thanks for the reminder. I was meaning to disable the context-menu on mobile at some point, as it doesn't seem to be working.</p>\n<p>Generally, <code>monaco</code> doesn't have great mobile support, but you should add such bugs as <a href=\"https://github.com/leanprover-community/lean4web\">issues on lean4web</a></p>",
        "id": 446024244,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718955683
    },
    {
        "content": "<p>Thanks! Yeah sure i’ll add an issue on Github</p>",
        "id": 446030999,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1718958194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/https.3A.2F.2Flive.2Elean-lang.2Eorg.2F/near/437394199\">said</a>:</p>\n<blockquote>\n<p>Nevermind, just lake’s confusing output</p>\n</blockquote>\n<p>Is there something here I could fix?</p>",
        "id": 446370947,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719120079
    },
    {
        "content": "<p>(Oops. Just realized the message I replied to was older than I thought.)</p>",
        "id": 446371026,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719120129
    },
    {
        "content": "<p>Indeed, output no longer confusing :-)</p>",
        "id": 446382925,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1719127658
    }
]