[
    {
        "content": "<p>Is there any easy way to use the omega tactic backend within my own metaprogram to find a solution to a set of linear inequalities?</p>",
        "id": 412600927,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1705084997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110524\">Scott Morrison</span></p>",
        "id": 412623175,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1705094937
    },
    {
        "content": "<p>Right now <code>omega</code> only proves contradiction, it does not provide a witness that a system of contraints is satisfiable. This is coming.</p>\n<p>If proving a contradiction is useful in the meantime, I can explain how to use the backend, either from <code>Expr</code> containing your constraints or an some pre-existing internal representation you have.</p>",
        "id": 412654738,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705110827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Documentation.20for.20the.20omega.20backend/near/412654738\">said</a>:</p>\n<blockquote>\n<p>Right now <code>omega</code> only proves contradiction, it does not provide a witness that a system of contraints is satisfiable. This is coming.</p>\n<p>If proving a contradiction is useful in the meantime, I can explain how to use the backend, either from <code>Expr</code> containing your constraints or an some pre-existing internal representation you have.</p>\n</blockquote>\n<p>I'm trying to assign a numerical value to each meta variable in the tactic state that satisfies the all the linear constraints in the tactic state. I'm doing this to visualize the graphs of arcs and lines who's coordinates are metavariables.</p>",
        "id": 412664014,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1705115007
    },
    {
        "content": "<p>I don't precisely see what you're doing, but it does sound like <code>omega</code> won't be useful to you until <code>omega</code> is producing witnesses.</p>",
        "id": 412671918,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705121582
    },
    {
        "content": "<p>Note also that <code>omega</code> only works over <code>Int</code> and <code>Nat</code>: it is not a linear arithmetic procedure over <code>Rat</code> (or more general things).</p>",
        "id": 412671926,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705121605
    },
    {
        "content": "<p>sounds like you might want a linear programming solver</p>",
        "id": 412671934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705121622
    },
    {
        "content": "<p>Does lean have any linear programming solvers or will I just have to implement it myself.</p>",
        "id": 412714657,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1705156839
    },
    {
        "content": "<p>Lean doesnt have an LP solver but there isn't really a reason to implement one yourself. Since you dont seem to have an optimality constraint you can just run an external LP solver, plug the numbers it spits out into Lean and (if you need it) run a proof by decide hat your variable assignment is valid.</p>",
        "id": 412715331,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705157462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Documentation.20for.20the.20omega.20backend/near/412715331\">said</a>:</p>\n<blockquote>\n<p>Lean doesnt have an LP solver but there isn't really a reason to implement one yourself. Since you dont seem to have an optimality constraint you can just run an external LP solver, plug the numbers it spits out into Lean and (if you need it) run a proof by decide hat your variable assignment is valid.</p>\n</blockquote>\n<p>I think using a foreign function interface would add too much overhead. Since my tactic is supposed visualize the proof state and not perform proof search like omega. Also think a native and certified linear proggraming algorithm would be pretty interesting thing to add to mathlib</p>",
        "id": 412717605,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1705159246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676310\">Frederick Pu</span> <a href=\"#narrow/stream/113488-general/topic/Documentation.20for.20the.20omega.20backend/near/412717605\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Documentation.20for.20the.20omega.20backend/near/412715331\">said</a>:</p>\n<blockquote>\n<p>Lean doesnt have an LP solver but there isn't really a reason to implement one yourself. Since you dont seem to have an optimality constraint you can just run an external LP solver, plug the numbers it spits out into Lean and (if you need it) run a proof by decide hat your variable assignment is valid.</p>\n</blockquote>\n<p>I think using a foreign function interface would add too much overhead. Since my tactic is supposed visualize the proof state and not perform proof search like omega. Also think a native and certified linear proggraming algorithm would be pretty interesting thing to add to mathlib</p>\n</blockquote>\n<p>Multiple things:</p>\n<ol>\n<li>What do you mean by overhead? FFI would be simpler than writing your own, it is extremly unlikely that we'll be able to come up with a Lean solver that outruns external ones in terms of speed as well.</li>\n<li>There is no need for FFI, you can simply call the solver as an external process and parse its output</li>\n<li>I do agree on the native and certified LP algorithm but <em>that</em> seems like a ton of overhead :D</li>\n</ol>",
        "id": 412718072,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705159619
    },
    {
        "content": "<p>FFI requires that users install the external solver. This would create a major barrier to the adoption of whatever Frederick is working on, assuming that this is a user-facing thing.</p>",
        "id": 412718770,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1705160223
    },
    {
        "content": "<p>Maybe lean needs to come with a bundled Wasm runtime and FFI, then all the projects that need to ship existing solvers (which almost always have a very simple system api demands for input/output) can do so as an embedded blob, and works on all platforms.</p>",
        "id": 412720053,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705161168
    },
    {
        "content": "<p><code>polyrith</code> uses an external solver and we don't have to install sagemath to use it (but we do have to be connected to the internet)</p>",
        "id": 412720161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705161277
    },
    {
        "content": "<p>Brave new world…</p>",
        "id": 412720887,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705161903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/Documentation.20for.20the.20omega.20backend/near/412720887\">said</a>:</p>\n<blockquote>\n<p>Brave new world…</p>\n</blockquote>\n<p>Not that brave, Isabelle's sledgehammer can also call external solvers via the internet^^</p>",
        "id": 412721018,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705162006
    },
    {
        "content": "<p>The builtin solver for linarith probably isn't suitable for your needs, but if anyone did implement a generic lp solver in Lean or hook up an external one, it would be straightforward to plug it into linarith</p>",
        "id": 412721271,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1705162232
    },
    {
        "content": "<p>Maybe still brave, but therefore not so new :-). Does it do it by default?</p>\n<p>I’m oldscool and don’t like if my tools use some random internet service behind my back, if only because I might be looking forward to a long productive train ride and suddenly things don’t work any more. But since we are soon all just going to be conversing with some cloud-based programming assisting AI anyways (I finally installed github copilot and it definitely has a appeal) it’s probably just fine.</p>",
        "id": 412721278,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705162243
    },
    {
        "content": "<p>It doesn't, iirc its the vampire prover and if you want to use the online version you have to pinky promise that its only for research or personal use, not commercial or something like that. (this pinky promise works by flipping a switch in your local isabelle install)</p>",
        "id": 412721318,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705162295
    }
]