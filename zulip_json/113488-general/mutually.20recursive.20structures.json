[
    {
        "content": "<p>I want to create a couple of mutually recursive structures, but looks like I have to desugar them into inductives, according to the following error message I get: <br>\n<a href=\"/user_uploads/3121/DF_28iZCzgaV3CvnPIOGRGig/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DF_28iZCzgaV3CvnPIOGRGig/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/DF_28iZCzgaV3CvnPIOGRGig/image.png\"></a></div><p>is that true? Or am I missing something?</p>",
        "id": 438693560,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1715737727
    },
    {
        "content": "<p>The following code works, after I change structures to inductives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json.Parser</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json.Printer</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Canonical</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Json</span> <span class=\"n\">ToJson</span> <span class=\"n\">FromJson</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Bind</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"k\">Pi</span><span class=\"o\">)</span>\n  <span class=\"kd\">inductive</span> <span class=\"k\">Pi</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">params</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Bind</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">App</span><span class=\"o\">)</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">App</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">children</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Lam</span><span class=\"o\">)</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Lam</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">names</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">App</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Canonical</span>\n</code></pre></div>\n<p>But trying to derive Json things make it not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">ToJson</span><span class=\"o\">,</span> <span class=\"n\">FromJson</span> <span class=\"n\">for</span> <span class=\"n\">Bind</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"o\">,</span> <span class=\"n\">App</span><span class=\"o\">,</span> <span class=\"n\">Lam</span>\n</code></pre></div>",
        "id": 438698479,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1715739755
    },
    {
        "content": "<p>I think, it looks like Lean generates the json conversion functions, but did not mark them as mutually recursive:</p>\n<p><a href=\"/user_uploads/3121/0b4PWEhzzOvJVxjzJNXSlGZO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0b4PWEhzzOvJVxjzJNXSlGZO/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0b4PWEhzzOvJVxjzJNXSlGZO/image.png\"></a></div>",
        "id": 438705032,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1715741946
    },
    {
        "content": "<p>Using Szumi's trick the <code>ToJson</code> works, but <code>FromJson</code> doesn't because it doesn't really understand indexed families:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tag</span> <span class=\"bp\">|</span> <span class=\"n\">bindT</span> <span class=\"bp\">|</span> <span class=\"n\">piT</span> <span class=\"bp\">|</span> <span class=\"n\">appT</span> <span class=\"bp\">|</span> <span class=\"n\">lamT</span>\n<span class=\"kn\">open</span> <span class=\"n\">Tag</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Canon</span> <span class=\"o\">:</span> <span class=\"n\">Tag</span> <span class=\"bp\">â†’</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">Canon</span> <span class=\"n\">piT</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Canon</span> <span class=\"n\">bindT</span>\n<span class=\"bp\">|</span> <span class=\"n\">pi</span> <span class=\"o\">(</span><span class=\"n\">params</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Canon</span> <span class=\"n\">bindT</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Canon</span> <span class=\"n\">appT</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Canon</span> <span class=\"n\">piT</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">children</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Canon</span> <span class=\"n\">lamT</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Canon</span> <span class=\"n\">appT</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"n\">names</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Canon</span> <span class=\"n\">appT</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Canon</span> <span class=\"n\">lamT</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">ToJson</span><span class=\"o\">,</span> <span class=\"n\">FromJson</span> <span class=\"n\">for</span> <span class=\"n\">Canon</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/YnlI3AkuZGqGET6vob5B8cOq/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YnlI3AkuZGqGET6vob5B8cOq/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/YnlI3AkuZGqGET6vob5B8cOq/image.png\"></a></div>",
        "id": 438705161,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1715741999
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/.22default.20handlers.22.20when.20deriving.20DecidableEq/near/275722237\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.22default.20handlers.22.20when.20deriving.20DecidableEq/near/275722237</a></p>\n<p>Looks like you'll need to add special support for it</p>",
        "id": 438707118,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1715742607
    },
    {
        "content": "<p>How does deriving work? Maybe I can do something about it...</p>",
        "id": 438707143,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1715742616
    },
    {
        "content": "<p>Qiu told me about where the functions are, it's <code>mkToJsonInstance</code> and <code>mkFromJsonInstance</code>, but they're are somewhat involved... Hmmm...</p>",
        "id": 438711588,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1715744410
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/4182\">https://github.com/leanprover/lean4/issues/4182</a></p>",
        "id": 438896497,
        "sender_full_name": "Tesla Zhang",
        "timestamp": 1715812293
    }
]