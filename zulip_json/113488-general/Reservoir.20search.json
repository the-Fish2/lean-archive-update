[
    {
        "content": "<p>We need a program (ideally a tactic) that will search the entire Reservoir for lemmas that</p>\n<ul>\n<li>can be stated using only (at most) Mathlib;</li>\n<li>are proved in any project that uses a reasonably new version of Lean.</li>\n</ul>\n<p>Towards the future, we cannot expect that all potentially useful lemmas will find their way to Mathlib.</p>",
        "id": 440106031,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716388178
    },
    {
        "content": "<p>That's pretty much just loogle with a sufficiently large database.</p>",
        "id": 440114234,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716390152
    },
    {
        "content": "<p>I often have trouble specifying the loogle query precisely enough.</p>",
        "id": 440116206,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716390648
    },
    {
        "content": "<p>Something at least as powerful as <code>exact?</code> will be highly desirable.</p>",
        "id": 440116348,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716390687
    },
    {
        "content": "<p>Having an exact like tactic that runs locally on your computer would require you to download all of reservoir and compile it (or once we have a global build cache download all of the cache) and then set up a local search data structure for it and run queries against that. This is not feasible. If you look at other tools with larger eco systems such as Isabelle you will find that despite having super powerful tactics like <code>sledgehammer</code> they do (for the same reason) only work on imported theories. The way to go for them was also a web search engine, namely Serapis: <a href=\"https://behemoth.cl.cam.ac.uk/search/\">https://behemoth.cl.cam.ac.uk/search/</a>.</p>",
        "id": 440117736,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716391060
    },
    {
        "content": "<p>Note that even this is a very hard undertaking: If you are looking for lemmas across the entire eco system you always have to ask yourself which version of each package are you interested in. Sure we could always have the latest version indexed and do a search like that but it is not entirely clear that the latest version will always work for everyone. One approach to solve this is to forcibly integrate the entire eco system like Haskell does it with <code>stack</code>. They basically freeze the eco system every $TIME_INTERVAL and provide a \"release of the entire eco system that works well together\" if you wish. This then allows them to provide Hoogle (the similarity to Loogle is not a coincidence) instances that are capeable of searching the entire eco system at a certain point in time.</p>\n<p>However such an approach might not be very popular with high velocity projects such as Mathlib as you get lots and lots of lemmas in each day so having an index from 2 weeks ago might already not be enough.</p>",
        "id": 440119609,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716391557
    },
    {
        "content": "<p>How big is currently the total size of all <code>.olean</code>s in Reservoire?</p>",
        "id": 440119957,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716391630
    },
    {
        "content": "<p>Reservoir doesn't have a build cache yet.</p>",
        "id": 440120050,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716391653
    },
    {
        "content": "<p>All right. And do you any rough estimate? Are we talking about terabytes?</p>",
        "id": 440120229,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716391685
    },
    {
        "content": "<p>It entirely depends on how big Lean is going to become. If you check the statistics from Rust: <a href=\"https://lib.rs/stats\">https://lib.rs/stats</a> they have tens of thousands of packages right now. If we grow that big sure terrabytes are imaginable. But  this type of growth is still far away.</p>",
        "id": 440120563,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716391789
    },
    {
        "content": "<p>I am happy to buy a new HDD and store one or two TB of <code>.olean</code>s on my computer.</p>",
        "id": 440120776,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716391850
    },
    {
        "content": "<p>Why do you need something like <code>exact?</code>? Based on your first description it seems you want to search for existing theorems, and filter them based on where their definitions come from. So no proof search needed.</p>\n<p>My approach would be to build each package of interest (i.e. one that imports mathlib, it seems), import it, traverse the environment, look at each theorem, collect the constants mentioned therein, and check if they are all from mathlib or below.</p>",
        "id": 440124309,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716392872
    },
    {
        "content": "<p>Yeah, I don't really know what is feasible, but something like what <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> mentioned will be needed so that we can reasonable reuse each other's work.</p>",
        "id": 440129467,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716394252
    },
    {
        "content": "<p>Is it on the roadmap?</p>",
        "id": 440280002,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716455427
    },
    {
        "content": "<p>No. This seems like the sort of thing that can be worked on externally; no FRO superpowers required.</p>",
        "id": 440281659,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716456023
    },
    {
        "content": "<p>How can I incentivize the creation? Would RFC in <em>Mathlib</em> make sense?</p>",
        "id": 440292789,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716459950
    },
    {
        "content": "<p>Write up a more detailed spec than Joachim's suggestion? Try writing a prototype?</p>",
        "id": 440293572,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716460261
    },
    {
        "content": "<p>It would be nice if loogle can be adapted to work on any project, export the index, remove the Mathlib part to reduce the size, then it could be another build target that Reservoir builds, and these indexes are gathered on loogle server.</p>\n<p>Then a loogle search can be performed on such a combined index, could be disabled by default to save resources, but I doubt that it would really consume much more than mathlib.</p>",
        "id": 440296693,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716461502
    },
    {
        "content": "<p>Actually loogle CLI already supports such functionality, then the only missing part is to create a dummy project to import all packages of interest (that builds on the latest toolchain on Reservoir), then have loogle export its index.</p>",
        "id": 440297454,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716461808
    },
    {
        "content": "<p>I'd say a prototype by anyone who needs this feature (what's the use case even?) would be a first step. It seems rather specialized to me, but maybe I'm not seeing the full picture yet.</p>",
        "id": 440297461,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716461813
    },
    {
        "content": "<p>I mean the originally discussed feature</p>",
        "id": 440297513,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716461840
    },
    {
        "content": "<p>Integrating Loogle into reservoir, either per package or even per toolchain indexing all packages would be great and I think something we clearly want eventually.</p>",
        "id": 440297662,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716461901
    },
    {
        "content": "<p>But here too: this can be built by anyone, separately of reservoir, initially. And more likely sooner than waiting for a fully integrated solution</p>",
        "id": 440297976,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716462017
    },
    {
        "content": "<p>I often have troubles to specify loogle queries precisely enough. <br>\nTowards the future, I'd need something at least as strong as <code>exact?</code> is on Mathlib.</p>",
        "id": 440298396,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716462177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/Reservoir.20search/near/440297461\">said</a>:</p>\n<blockquote>\n<p>It seems rather specialized</p>\n</blockquote>\n<p>I disagree with the quoted part.</p>\n<p>I think it is very natural, when I have a goal whose statement is meaningful to everybody, to ask whether anybody has a proof of it.</p>\n<p>I think something like what I requested would be the most fundamental tool to enable collaboration on a scale larger than one project.</p>",
        "id": 440299254,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716462513
    },
    {
        "content": "<p>Note that such an incentive is very well aligned with most of our philosophies.</p>\n<p>One of the things I often hear is that almost every lemma should be public. At this point, we have Mathlib, which is full of public lemmas, but lemmas in all other projects are reüsable almost as little as if they were all private.</p>\n<p>Another important initiative that (indirectly) brought many of us to Lean is Thomas Hales's Formal Abstracts.<br>\n<a href=\"https://formalabstracts.github.io/\">https://formalabstracts.github.io/</a><br>\nThe underlying assumption is that, once something is formalized (even if it was only the statement, not the proof), it is machine-searchable and accessible for everybody who can express the statement in given formal language. Well, in the first place, we should be able to formally search for theorems that have been fully formalized. That's why we need a search that covers more than just projects we have already imported. We cannot wait until every useful lemma gets into Mathlib.</p>\n<p>The only philosophy that my proposal is misaligned with, we want Mathlib to be a large monorepo. This reduces the need to have a search covering more than one project.</p>",
        "id": 440302213,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716463621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Reservoir.20search/near/440299254\">said</a>:</p>\n<blockquote>\n<p>I think it is very natural, when I have a goal whose statement is meaningful to everybody, to ask whether anybody has a proof of it.</p>\n</blockquote>\n<p>I originally misunderstood your specification, it sounded to me like you want to <em>list</em> theorems with the property that they could be expressed in mathlib, but are proved in a separate library. A general search <em>for a given goal</em> is different, generally useful and indeed similar to <code>exact?</code>. Sorry for the confusion.</p>",
        "id": 440307738,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716465738
    },
    {
        "content": "<p>Is anybody going to work on it soon? Unfortunately, I don't have skills to implement such a search; and, in the upcoming 19 months, I will not have time to acquire the necessary skills.</p>\n<p>What I can offer is to start a library Mathlib++ that will not contain any public definitions but will accept almost any lemmas that were not accepted into Mathlib. Mathlib++ would not be supposed to be human-searchable; it would be just something everybody can import in place of Mathlib in order to make <code>exact?</code> more powerful (albeit slower). My task would be to regularly bumb Mathlib++ to the newest Mathlib so that it can be reasonably used by Mathlib users. Like an unofficial extension. What do you think?</p>",
        "id": 441012490,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716893330
    },
    {
        "content": "<p>Upon a bit more thinking I believe that Mathlib++ would be more useful anyways because new Lean version are currently too frequent to gather sufficient body of lemmas on the same Lean version when they are not in one library.</p>",
        "id": 441017080,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716895197
    },
    {
        "content": "<p>Maybe a require and import only Mathlib++ is more maintainable.</p>",
        "id": 441017748,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716895429
    },
    {
        "content": "<p>I don't know what you mean by \"require\" but it would be used <em>in place of</em> importing Mathlib because it would give you Mathlib plus some extra lemmas.</p>",
        "id": 441018510,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716895627
    },
    {
        "content": "<p>I mean the way to accept no specific lemmas, but only <code>require</code> other repos in the lakefile and <code>import</code> them into the <code>MathlibPlusPlus</code> package then people can <code>import MathlibPlusPlus</code> then run <code>exact?</code> etc.</p>",
        "id": 441021235,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716896651
    },
    {
        "content": "<p>Well, I don't want to do it because</p>\n<ul>\n<li>you would have to deal with different versions of Lean and Mathlib;</li>\n<li>you would get too many things into context (many theorems about non-Mathlib definitions);</li>\n<li>you would have to be worried about name collisions;</li>\n<li>I want to keep at least a tiny bit of quality control (e.g. <code>89455616 + 4123186 &lt; 9465152145644156321</code> should not be a lemma).</li>\n</ul>",
        "id": 441023173,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716897376
    },
    {
        "content": "<p>I think these lemmas should go into mathlib or other topic-centric repos.</p>\n<p>And what I suggested was something that could fulfill your original search idea, with certain control over the eligible criteria. Just my random thoughts after seeing this topic.</p>",
        "id": 441024110,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716897680
    },
    {
        "content": "<p>Note that there are many lemmas that would be useful for Mathlib users but not for Mathlib developers.<br>\nI guess I should start a new topic about Mathlib++.<br>\nI am starting to thing that such an \"extras\" library could be developed almost independently of reservoir search.<br>\nThe important thing is that we need at least one of them to happen asap, otherwise we keep reïnventing lemmas others have proved.</p>",
        "id": 441024921,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716897945
    },
    {
        "content": "<p>That sound like a <code>MathlibSnippets</code> or <code>MathlibRecipes</code> to me.</p>",
        "id": 441026043,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716898321
    },
    {
        "content": "<p>Are you suggesting a name for the new library?</p>",
        "id": 441026702,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716898534
    },
    {
        "content": "<p>My first idea was <code>MathlibExtras</code> but it already means something else.</p>",
        "id": 441026757,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716898557
    },
    {
        "content": "<p>(MathlibExtras is no longer used. Nevertheless, I'm skeptical this is a good idea.)</p>",
        "id": 441027360,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716898767
    },
    {
        "content": "<p>Alright, I'll create a new topic for it.</p>",
        "id": 441027705,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716898885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Reservoir.20search/near/441026702\">said</a>:</p>\n<blockquote>\n<p>Are you suggesting a name for the new library?</p>\n</blockquote>\n<p>No, I was trying to understand its scope by  trying to name it. And I'm also skeptical because of the old <code>MathlibExtras</code>.</p>",
        "id": 441028274,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716899069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Reservoir.20search/near/441027705\">said</a>:</p>\n<blockquote>\n<p>Alright, I'll create a new topic for it.</p>\n</blockquote>\n<p><a href=\"#narrow/stream/113488-general/topic/Mathlib.2B.2B\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Mathlib.2B.2B</a></p>",
        "id": 441031476,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716900197
    }
]