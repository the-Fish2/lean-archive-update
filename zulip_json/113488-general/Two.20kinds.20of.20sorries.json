[
    {
        "content": "<p>I started working on a new conjecture today. I'm thinking of forbidding myself from using pen and paper so that I have to write everything in Lean. Maybe I'll define a custom alias for <code>sorry</code> so I will have two kinds of sorries. First kind of <code>sorry</code> for \"I don't know whether this holds\". Second kind of <code>sorry</code> for \"I believe this can be done — I just don't want to spend time on it\". Any recommendations?</p>",
        "id": 409573903,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703247704
    },
    {
        "content": "<p>Sounds good. Do you want computers to do anything with that distinction?</p>",
        "id": 409574789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703248091
    },
    {
        "content": "<p>If it's just for yourself, you can of course already get very far by just adding a comment.</p>",
        "id": 409574820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703248108
    },
    {
        "content": "<p>No. They will be different only for me. However, I think two words will be better than comments; I can set different background colors for them.</p>",
        "id": 409574898,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703248150
    },
    {
        "content": "<p>Do you know about synthetic vs non-synthetic sorries?</p>",
        "id": 409575126,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703248260
    },
    {
        "content": "<p>No idea!</p>",
        "id": 409575140,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703248269
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=sorryAx#doc\">docs#sorryAx</a></p>",
        "id": 409575212,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703248316
    },
    {
        "content": "<p>You could also use <code>axiom</code></p>",
        "id": 409577003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703249107
    },
    {
        "content": "<p>Which has the advantage that you can easily check whether your theorem depends on things you're not sure about</p>",
        "id": 409577038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703249128
    },
    {
        "content": "<p>Note that we still have the <code>admit</code> tactic which seems to be a synonym for <code>sorry</code> and you could arbitrarily give it a semantic meaning of one of the two things you want to express above</p>",
        "id": 409583551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703251931
    },
    {
        "content": "<p>In the very old Lean 3 days, I think one of <code>sorry/admit</code> was the tactic, and the other one was the term (I forgot which was which), like <code>rfl</code> (the term) v <code>refl</code> (the tactic). But now the push is to unify these (I think because it was confusing for the users -- certainly many undergrads asked me the difference between refl and rfl pre Lean 4)</p>",
        "id": 409583705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703252019
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">sorryWithConfidenceAx</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">confidence</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"sorryWithConfidence\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sorryWithConfidenceAx</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorryWithConfidence</span> <span class=\"mi\">0</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorryWithConfidence</span> <span class=\"mi\">100</span>\n</code></pre></div>",
        "id": 409592525,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703255888
    },
    {
        "content": "<p>One could take this even further by combining the confidence of various sorryWithConfidence's in some declaration in some way to get a \"global\" confidence.</p>",
        "id": 409592720,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703255991
    },
    {
        "content": "<p>I'd like it if, just occasionally, <em>Lean</em> said <code>sorry</code> to <em>me</em></p>",
        "id": 409603482,
        "sender_full_name": "Richard Copley",
        "timestamp": 1703260112
    },
    {
        "content": "<p>just double checked, \"sorry\" is not among the things lean will ever say in error messages unless it is referring to your code like <code>declaration uses 'sorry'</code> or <code>cannot evaluate code because 'foo' uses 'sorry' and/or contains errors</code>. <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/tryHeuristicPerfIssue2.lean#L130-L131\">On the other hand, sometimes one sorry is not enough to appease lean...</a></p>",
        "id": 409604298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703260477
    },
    {
        "content": "<p>I am reminded of <a href=\"https://esolangs.org/wiki/INTERCAL#Command_syntax\">INTERCAL</a>, the language which refuses to compile your code if you say <code>please</code> not enough or too much</p>",
        "id": 409604725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703260676
    },
    {
        "content": "<p>Lean just uses different words to say \"sorry\" than we do. For example, one of the expressions it uses to ask for forgiveness is \"Server process for &lt;file path&gt; crashed, likely due to a stack overflow or a bug\".</p>",
        "id": 409604936,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1703260765
    },
    {
        "content": "<p>That's a very passive aggressive way of saying \"sorry\".</p>",
        "id": 409605029,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703260803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Two.20kinds.20of.20sorries/near/409604725\">said</a>:</p>\n<blockquote>\n<p>I am reminded of <a href=\"https://esolangs.org/wiki/INTERCAL#Command_syntax\">INTERCAL</a></p>\n</blockquote>\n<p>I like how Qq has a <a href=\"https://github.com/leanprover-community/quote4/blob/master/Qq/Match.lean#L257\"><code>comefrom</code></a> macro. It's not <em>quite</em> the same as INTERCAL's <code>come from</code> statement, but I can't help but be reminded of it.</p>",
        "id": 409617607,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703265852
    },
    {
        "content": "<p>In the NNG, we did the same thing as Adam, i.e. duplicate <code>sorryAx</code> to distinguish the two. Kevin called the tactic <a href=\"https://github.com/leanprover-community/NNG4/blob/main/Game/Tactic/Xyzzy.lean\"><code>zyxxy</code></a> which proves everything but does not trigger the check wether the user used sorry.</p>",
        "id": 409701404,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1703323197
    },
    {
        "content": "<p>Some of the files in <code>test</code> also use a <code>test_sorry</code> so as to avoid emitting noise when built, but still close unwanted goals.</p>",
        "id": 409702896,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1703324527
    },
    {
        "content": "<p>Similarly when programming in Lean, I found it useful to have <code>sorry_proof</code> that is sorry only in <code>Prop</code> and does not emit a warning. Normal <code>sorry</code> is reserved for data that would prevent program execution.</p>",
        "id": 409712771,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1703333569
    },
    {
        "content": "<p><code>xyzzy</code>! <a href=\"https://en.wikipedia.org/wiki/Colossal_Cave_Adventure\">https://en.wikipedia.org/wiki/Colossal_Cave_Adventure</a></p>",
        "id": 409733315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703350507
    },
    {
        "content": "<p>Spoiler alert!</p>",
        "id": 409734514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703351573
    }
]