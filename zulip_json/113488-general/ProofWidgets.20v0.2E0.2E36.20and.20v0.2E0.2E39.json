[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>, I made a bit of a mess of the releases in ProofWidgets yesterday, creating v0.0.37, v0.0.38, and v0.0.38, all of which use the  (as yet unannounced) <code>v4.8.0</code> toolchain, but I couldn't get Mathlib on v4.8.0 to successfully use any of them because of noisy build reports from ProofWidgets.</p>\n<p>Hence I'm going to move Mathlib to <code>v4.8.0</code> still using <code>v0.0.36</code> for now (despite the toolchain mismatch), and this seems to work.</p>\n<p>So:</p>\n<ol>\n<li>If you want to just delete v0.0.37, v0.0.38, and v0.0.39, no objections from me, and apologies for cutting so many!</li>\n<li>There underlying reason for the failures was that you have made significant changes (with Mac) to the build setup, but these had only landed on <code>master</code>, not in a release. Thus when I needed to release the <code>v4.8.0</code> toolchain, I was trapped, because <code>ProofWidgets</code> <code>master</code> was not even compatible with being used in Mathlib at <code>v4.8.0-rc2</code>.</li>\n<li>In future, if you make major changes to the build setup, can you please cut a new release, and either notify me that we need to do a Mathlib bump (or do it yourself, or find other Mathlib maintainers to do it). I'd really like to avoid the situation that I need a new release to do a Lean version release, but find myself with a <code>master</code> that hasn't actually been tested yet on downstream repos!</li>\n</ol>\n<p>Can I leave it to you to work out what needs to change so ProofWidgets is compatible with Mathlib again? Currently, it will run <code>npm install</code> in the Mathlib build process, which inevitably fails.</p>",
        "id": 442892305,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717621042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Sorry for not testing this stuff throughly and verifying it works when I was helping you with the build overhaul. Once suggestion I do have is that it would be good to have a release test in the CI. For example, something like:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>clean<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>:release<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>--no-build\n</code></pre></div>\n<p>I have been debugging <code>main</code> and it is not yet clear to me why the build is broken. The main thing I have deduced is that the produced release <code>lake.trace</code> does not match that which is computed locally when using the release.</p>",
        "id": 442894076,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717621517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/113488-general/topic/ProofWidgets.20v0.2E0.2E36.20and.20v0.2E0.2E39/near/442894076\">said</a>:</p>\n<blockquote>\n<p>The main thing I have deduced is that the produced release <code>lake.trace</code> does not match that which is computed locally when using the release.</p>\n</blockquote>\n<p>I am observing that the hash of some <code>inputFile</code>s is platform-dependent. That shouldn't be the case, should it? See the two builds <a href=\"https://github.com/leanprover-community/ProofWidgets4/actions/runs/9645330464/job/26599327293\">here</a> which differ in \"trace hash pre package-lock\".</p>\n<p>UPDATE: Oh lol, I think it might just be because the files are listed in an inconsistent order across platforms.</p>\n<p><del>UPDATE 2: Yeah I think that was it.</del></p>\n<p>UPDATE 3: Not quite, sorting equates the hash across Ubuntu and my local Mac, but not across Ubuntu and Windows.</p>",
        "id": 446602029,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1719232465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> : Looking at <a href=\"https://github.com/leanprover-community/ProofWidgets4/actions/runs/9645684659/job/26600432151\">this run</a> now, the trace of <code>inputFile</code>s differs between Ubuntu and Windows. Is this intended?</p>",
        "id": 446607355,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1719233905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Are you using <code>inputFile</code> itself (which is deprecated) or the new <code>inputTextFile</code>? The old <code>inputFile</code> is a binary comparison. <code>inputTextFile</code> normalizes line endings.  On Windows, byt default, GitHub checks out text files with CRLF line endings which makes files not binary equal.</p>",
        "id": 446608267,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719234090
    },
    {
        "content": "<p>I think <code>inputTextFile</code> might not exist on 4.9.0-rc2? I will try rc3.</p>\n<p>UPDATE: Nope, not there on rc3 either.</p>",
        "id": 446608629,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1719234186
    },
    {
        "content": "<p>True, However, the underlying problem is still there. So you can try copy-pasting <a href=\"https://github.com/leanprover/lean4/blob/3b67e15827e178f79efea3b161ed71100457f6ec/src/lake/Lake/Build/Common.lean#L240-L245\">the definition of <code>inputTextFile</code></a> from master.</p>",
        "id": 446609689,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719234394
    },
    {
        "content": "<p>Okay, that fixed the input files. It looks like <code>buildFileAfterDep</code> has the same issue in case the build output is checked out by git, but the <code>.hash</code> file is not.</p>",
        "id": 446615664,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1719235823
    },
    {
        "content": "<p><del>Now it <a href=\"https://github.com/leanprover-community/ProofWidgets4/actions/runs/9648631555/job/26610292117\">cannot find</a> a file that is clearly there. Any ideas <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> ?</del> Ok, it's not there.</p>",
        "id": 446656835,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1719245326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Oh yes,  build artifacts are not expected to be git-managed.</p>",
        "id": 446724182,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719264779
    },
    {
        "content": "<p>If they are, you may want to use <code>.gitattributes</code> to clarify the expected format (e.g., <code>eol</code>)</p>",
        "id": 446724292,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719264839
    }
]