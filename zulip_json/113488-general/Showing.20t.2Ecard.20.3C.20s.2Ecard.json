[
    {
        "content": "<p>I am having some trouble finding a relevant theorem in Mathlib to establish that the cardinality of a finite set t is less than a finite set s. I would appreciate any suggestions! Thank you in advance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℤ</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">t.card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.card</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 436569372,
        "sender_full_name": "Daniel Garcia",
        "timestamp": 1714596129
    },
    {
        "content": "<p><code>by decide</code> should work.</p>",
        "id": 436569700,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714596235
    },
    {
        "content": "<p>In general such completely explicitly results, where the math proof is \"just look\", can be proved using <code>decide</code>.</p>",
        "id": 436569820,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714596283
    },
    {
        "content": "<p>Thank you! I appreciate the math analogy. Do you have any suggestions for how I would show this for when the result is less obvious? I am doing this smaller example to prepare for a bigger proof</p>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/Showing.20t.2Ecard.20.3C.20s.2Ecard/near/436569700\">said</a>:</p>\n<blockquote>\n<p><code>by decide</code> should work.</p>\n</blockquote>",
        "id": 436570039,
        "sender_full_name": "Daniel Garcia",
        "timestamp": 1714596363
    },
    {
        "content": "<p>In general you should try to follow the math proof you have.</p>",
        "id": 436570179,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714596424
    },
    {
        "content": "<p>It's difficult to give an advice without knowing what makes your theorem not obvious but doable.</p>",
        "id": 436570380,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714596535
    },
    {
        "content": "<p>Fair enough! I appreciate the guidance</p>",
        "id": 436570596,
        "sender_full_name": "Daniel Garcia",
        "timestamp": 1714596637
    },
    {
        "content": "<p>For example in your case you can compute the cardinality by hand, using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card_insert_of_not_mem#doc\">docs#Finset.card_insert_of_not_mem</a></p>",
        "id": 436570933,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714596773
    },
    {
        "content": "<p>You can also try <code>by simp [s, t]</code> for a proof that's more robust to the decidability of the ground set (here <code>ℤ</code>)</p>",
        "id": 436570956,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714596779
    },
    {
        "content": "<p>I think there is no quick and easy explanation for what to do in lean when \"it's obvious\" in maths. The reason is that there are so many different ways that a thing can be obvious. There is an art to understanding all these various reasons and knowing exactly which algorithm will prove your obvious thing. For example I bet <code>decide</code> won't work if the numbers in question were the same numbers but real. And to a mathematician the questions look identical.</p>",
        "id": 436571286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714596894
    },
    {
        "content": "<p>With real numbers Lean would probably complain already in the definition of the two sets...</p>",
        "id": 436571594,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714597035
    },
    {
        "content": "<p>Here is the proof with real numbers, to give an idea of what can be done.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℝ</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">t.card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.card</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n  <span class=\"n\">convert_to</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.card_insert_of_not_mem</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"bp\">·</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 436572032,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714597229
    },
    {
        "content": "<p>Note that <code>simp</code> is smart enough to compute the cardinality of <code>{1,4}</code>, but not of the other set.</p>",
        "id": 436572133,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714597286
    }
]