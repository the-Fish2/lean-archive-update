[
    {
        "content": "<p>What do we need to do, to write a widget that turns</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">≫</span> <span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">≫</span> <span class=\"n\">ex1</span> <span class=\"err\">≫</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"err\">≫</span> <span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"err\">≫</span> <span class=\"n\">ey2</span> <span class=\"err\">≫</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n</code></pre></div>\n\n\n<p>into a beautifully rendered diagram?</p>",
        "id": 207227259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597732158
    },
    {
        "content": "<p>and then drag and drop to fill in commutative cells?</p>",
        "id": 207227434,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597732349
    },
    {
        "content": "<p>Well, that would be a follow-up feature.</p>",
        "id": 207227467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597732437
    },
    {
        "content": "<p>But just displaying the diagram would be a first step</p>",
        "id": 207227508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597732447
    },
    {
        "content": "<p>Now I need to grab pen and paper to be able to figure out what the next step is. And that feels like defeat to me.</p>",
        "id": 207227524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597732476
    },
    {
        "content": "<p>Rendering <em>a</em> diagram is certainly possible using a widget that emits inline svg. Rendering a <em>beautiful</em> diagram is another matter entirely, since graph drawing is a difficult problem.</p>",
        "id": 207227963,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1597733087
    },
    {
        "content": "<p>Maybe, if we use D3, we can let the user push around the nodes?</p>",
        "id": 207228131,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597733277
    },
    {
        "content": "<p>That would already be really nice</p>",
        "id": 207228173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597733289
    },
    {
        "content": "<p>Hmm.. I seems like <code>script</code> tags emitted by widgets don't get executed :/</p>",
        "id": 207232707,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1597737364
    },
    {
        "content": "<p>That means we can't have custom interactions?</p>",
        "id": 207233627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597738182
    },
    {
        "content": "<p>I understand the security risk...</p>",
        "id": 207233641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597738197
    },
    {
        "content": "<p>Time to fork VScode rofl?</p>",
        "id": 207233690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597738209
    },
    {
        "content": "<p>It's enough to change the extension.</p>",
        "id": 207233696,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597738224
    },
    {
        "content": "<p>PRs to enable the remote code execution are welcome.</p>",
        "id": 207233715,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597738241
    },
    {
        "content": "<p>But maybe <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> has some thoughts on this as well.</p>",
        "id": 207233739,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597738269
    },
    {
        "content": "<p>Which part of the vs-code extension currently forbids script tags?</p>",
        "id": 207237789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597741345
    },
    {
        "content": "<p>It's not forbidden.  In fact, we already use <code>&lt;script&gt;</code> to include react, the infoview javascript, etc.  It's just that the script tags in the widgets are not rendered as script tags apparently.</p>",
        "id": 207237913,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597741468
    },
    {
        "content": "<p>This is the code that renders the widget:<br>\n<a href=\"https://github.com/leanprover/vscode-lean/blob/f30589f89c3a1c7d95b160eb0b42ad25cc0527d2/infoview/widget.tsx#L173\">https://github.com/leanprover/vscode-lean/blob/f30589f89c3a1c7d95b160eb0b42ad25cc0527d2/infoview/widget.tsx#L173</a></p>",
        "id": 207237959,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597741504
    },
    {
        "content": "<p>Related: <a href=\"https://stackoverflow.com/q/40989629/617159\">https://stackoverflow.com/q/40989629/617159</a></p>",
        "id": 207238202,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597741731
    },
    {
        "content": "<p>Looks like it's possible by setting the <code>dangerouslySetInnerHTML</code> attribute to a string like <code>&lt;script&gt;...&lt;/script&gt;</code></p>",
        "id": 207238203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597741734
    },
    {
        "content": "<p>It looks like the issue is that script tags don't appear in the DOM</p>",
        "id": 207238227,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597741766
    },
    {
        "content": "<p>So React has no way of seeing whether the tag has already been inserted beforehand</p>",
        "id": 207238252,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597741800
    },
    {
        "content": "<p>My instinct is that sending a <code>&lt;script&gt;</code> tag from Lean and injecting it into VSCode wouldn't be the best way to go <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>. If I understand the way that widgets work currently, the Lean server sends some HTML back to VSCode which is then rendered by VSCode with fairly minimal post-processing.</p>\n<p>For a diagrammatic widget, the best best would probably to send back something simple that VSCode can post-process, e.g. the Lean server sends:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#39;widget widget-diagram&#39;</span><span class=\"p\">&gt;</span>\n  digraph {\n    a -&gt; b;\n    b -&gt; c;\n    c -&gt; d;\n    d -&gt; a;\n  }\n<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n\n\n<p>And VSCode could then use any Graphviz compatible library (i.e. D3) to render the <a href=\"https://graphs.grevian.org/resources/static/images/example3.png\">corresponding image</a>.</p>\n<div class=\"message_inline_image\"><a href=\"https://graphs.grevian.org/resources/static/images/example3.png\" title=\"corresponding image\"><img src=\"https://graphs.grevian.org/resources/static/images/example3.png\"></a></div>",
        "id": 207245359,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1597747769
    },
    {
        "content": "<p>Sure, but then you need to change the Lean server and/or the VS code extension for every visualization. I was hoping for something that can live in mathlib.</p>",
        "id": 207248094,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1597750030
    },
    {
        "content": "<p>If I'm understanding right I don't think the Lean server would need to be changed, as I think the changes could go into <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/interactive_expr.lean\">tactic/interactive_expr.lean</a>? You're right about needing VSCode changes, but unfortunately injecting a <code>&lt;script&gt;</code> tag inside of React, inside of a VSCode extension will really be a nightmare. (Especially because VSCode extensions are a sort of subprocess inside VSCode as well). For example, the <code>&lt;script&gt;</code> is likely to mess with React's rendering cycle, unless it's specifically rendered with React in mind...</p>",
        "id": 207249067,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1597750848
    },
    {
        "content": "<p>Yeah I've been thinking about how to support 3rd party javascript libraries and I don't have any watertight ideas. There are two problems; how to specify which libraries you want (eg give some cdn addresses for D3, Katex etc), the second problem is figuring out how to get the lean widgets system to talk to it, because eg D3 relies on the developer being able to write some script, but atm widgets can only make some static html with simple event handlers.</p>\n<p>Adding <code>dangerouslySetInnerHTML</code> with scripts won't work atm but I don't think it's as hacky as it sounds. The lean code is already trusted, eg it can meddle with the file system etc so having it be able to insert arbitrary scripts doesn't seem that bad. The problem is that <code>dangerouslySetInnerHTML</code> takes a JS object as an argument rather than a string, so some C++ would need to change. Even then, the script might be removed from the DOM when a rerender takes place which might be bad.</p>\n<p>One idea: in lean you can write some html or javascript as a string and then you can pass it to vscode to insert statically before any widgets start rendering. There would still be a bit of work to get something like D3 working but you could then do it in principle.  This would also solve some of the requests for people wanting to add their CSS to the infoview.</p>",
        "id": 207291293,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1597772737
    },
    {
        "content": "<p>Also svg should just work (tm):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"s2\">&quot;svg&quot;</span> <span class=\"o\">[</span><span class=\"n\">attr</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"s2\">&quot;height&quot;</span> <span class=\"s2\">&quot;100&quot;</span><span class=\"o\">,</span> <span class=\"n\">attr</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"s2\">&quot;width&quot;</span> <span class=\"s2\">&quot;100&quot;</span><span class=\"o\">]</span> <span class=\"o\">[</span>\n     <span class=\"n\">h</span> <span class=\"s2\">&quot;circle&quot;</span>\n       <span class=\"o\">[</span> <span class=\"n\">attr</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"s2\">&quot;cx&quot;</span> <span class=\"s2\">&quot;50&quot;</span>\n       <span class=\"o\">,</span> <span class=\"n\">attr</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"s2\">&quot;cy&quot;</span> <span class=\"s2\">&quot;50&quot;</span>\n       <span class=\"o\">,</span> <span class=\"n\">attr</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"s2\">&quot;r&quot;</span> <span class=\"s2\">&quot;40&quot;</span>\n       <span class=\"o\">,</span> <span class=\"n\">attr</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"s2\">&quot;stroke&quot;</span> <span class=\"s2\">&quot;black&quot;</span>\n       <span class=\"o\">,</span> <span class=\"n\">attr</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"s2\">&quot;strokeWidth&quot;</span> <span class=\"s2\">&quot;3&quot;</span>\n       <span class=\"o\">,</span> <span class=\"n\">attr</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"s2\">&quot;fill&quot;</span> <span class=\"s2\">&quot;red&quot;</span>\n       <span class=\"o\">]</span> <span class=\"o\">[]</span>\n<span class=\"o\">]</span>\n</code></pre></div>",
        "id": 207292034,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1597773110
    },
    {
        "content": "<p>So another approach would be to write a whole diagram rendering library in Lean</p>",
        "id": 207292128,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1597773143
    },
    {
        "content": "<p>How hard can it be?</p>",
        "id": 207292171,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1597773167
    },
    {
        "content": "<p>I deffo want to support KaTeX ootb at some point though.</p>",
        "id": 207292322,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1597773248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/113488-general/topic/widget.20for.20diagrams/near/207291293\">said</a>:</p>\n<blockquote>\n<p>One idea: in lean you can write some html or javascript as a string and then you can pass it to vscode to insert statically before any widgets start rendering. There would still be a bit of work to get something like D3 working but you could then do it in principle.  This would also solve some of the requests for people wanting to add their CSS to the infoview.</p>\n</blockquote>\n<p>I think the main blocker for this approach currently would be the fact that the Infoview uses React - React doesn't really like anyone controlling the DOM tree apart from itself... For example you can see <a href=\"https://www.smashingmagazine.com/2018/02/react-d3-ecosystem/\">here</a> the sort of contortions you usually have to do to get D3 to work in a React context (basically you get D3 to write a \"faux DOM\" first rather than inserting things on the page directly). The Infoview could be rewritten to just use plain JS, which would make it much easier to have 3rd party scripts change things in the infoview.</p>",
        "id": 207293483,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1597773786
    },
    {
        "content": "<p>Yet another idea (if the main goal is visualizations in the short term) could be to extend VSCode to support a visualization grammar like <a href=\"https://vega.github.io/vega-lite/\">Vega Lite</a> or <a href=\"https://github.com/penrose/penrose\">Penrose</a>...</p>",
        "id": 207293508,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1597773797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/113488-general/topic/widget.20for.20diagrams/near/207292322\">said</a>:</p>\n<blockquote>\n<p>I deffo want to support KaTeX ootb at some point though.</p>\n</blockquote>\n<p>That would be cool, I see there's an <a href=\"https://github.com/KaTeX/KaTeX/pull/2396\">open PR</a> to add commutative diagrams to KaTeX too <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 207293552,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1597773819
    },
    {
        "content": "<p>One thought is that maybe the VS Code extension could support plugging in other JS apps that talk to the Lean server in place of the info view. Or possibly the info view should support passing messages to some other webview panel with other JS / HTML code.</p>",
        "id": 207298873,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597776440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/113488-general/topic/widget.20for.20diagrams/near/207232707\">said</a>:</p>\n<blockquote>\n<p>Hmm.. I seems like <code>script</code> tags emitted by widgets don't get executed :/</p>\n</blockquote>\n<p>Is there a workaround for this to include a script file from some CDN (eg, for katex) for a widget that otherwise just uses the HTML widget?</p>",
        "id": 434398463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713544538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> this appears to be a very old thread about Lean 3 widgets. Did you mean to ask about those, or about Lean 4?</p>",
        "id": 434441417,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1713563688
    },
    {
        "content": "<p>Ah whoops, this was intended to be about lean 4</p>",
        "id": 434441747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713563884
    },
    {
        "content": "<p>Okay! Having specified that, what are you trying to do with a <code>&lt;script&gt;</code> specifically? Just putting a <code>&lt;script&gt;</code> tag in a piece of ProofWidgets JSX will not run it, but there are lots of ways to invoke external libraries from JS-based widgets.</p>",
        "id": 434442255,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1713564209
    },
    {
        "content": "<p>Is there any way of including an external library from a url, or does it have to be bundled at build time?</p>",
        "id": 434443157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713564775
    },
    {
        "content": "<p>Yep, you can import from a CDN directly as long as the library is an ES Module. For instance here is a little Katex renderer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">NoProps</span> <span class=\"n\">where</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Server.RpcEncodable</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">widget_module</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">RenderKatex</span> <span class=\"o\">:</span> <span class=\"n\">Component</span> <span class=\"n\">NoProps</span> <span class=\"n\">where</span>\n  <span class=\"n\">javascript</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"bp\">#</span><span class=\"s2\">\"</span>\n<span class=\"s2\">    import renderMathInElement from 'https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/contrib/auto-render.mjs'</span>\n<span class=\"s2\">    import React from 'react'</span>\n\n<span class=\"s2\">    export default function(props) {</span>\n<span class=\"s2\">      const [ref, setRef] = React.useState(null)</span>\n<span class=\"s2\">      React.useEffect(() =&gt; {</span>\n<span class=\"s2\">        if (!ref) return</span>\n<span class=\"s2\">        renderMathInElement(ref)</span>\n<span class=\"s2\">      }, [ref])</span>\n<span class=\"s2\">      return React.createElement('span', {ref: setRef}, props.children)</span>\n<span class=\"s2\">    }</span>\n<span class=\"s2\">  \"</span><span class=\"bp\">#</span>\n\n<span class=\"bp\">#</span><span class=\"n\">html</span> <span class=\"bp\">&lt;</span><span class=\"n\">RenderKatex</span><span class=\"bp\">&gt;</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">text</span> <span class=\"s2\">\"$$x^2 + y^2 = z^2$$\"</span><span class=\"o\">}</span> <span class=\"bp\">&lt;/</span><span class=\"n\">RenderKatex</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>(Disclaimer: the handling of <code>ref</code> might not be good React practice, and the equation shows up twice. But it does get rendered!)</p>",
        "id": 434444515,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1713565715
    },
    {
        "content": "<p>The double equation seems to be due to a missing katex stylesheet; but adding <code>import 'https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.css'</code> doesn't help, even though it does seem to fetch the stylesheet</p>",
        "id": 434449671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713569278
    },
    {
        "content": "<p>Ah, this works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ProofWidgets</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">ProofWidgets</span> <span class=\"n\">Jsx</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">NoProps</span> <span class=\"n\">where</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Server.RpcEncodable</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">widget_module</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">RenderKatex</span> <span class=\"o\">:</span> <span class=\"n\">Component</span> <span class=\"n\">NoProps</span> <span class=\"n\">where</span>\n  <span class=\"n\">javascript</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"bp\">#</span><span class=\"s2\">\"</span>\n<span class=\"s2\">    import renderMathInElement from 'https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/contrib/auto-render.mjs'</span>\n<span class=\"s2\">    import css from 'https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.css'</span>\n<span class=\"s2\">    import React from 'react';</span>\n<span class=\"s2\">    document.adoptedStyleSheets = [css];</span>\n<span class=\"s2\">    export default function(props) {</span>\n<span class=\"s2\">      const [ref, setRef] = React.useState(null);</span>\n<span class=\"s2\">      React.useEffect(() =&gt; {</span>\n<span class=\"s2\">        if (!ref) return;</span>\n<span class=\"s2\">        renderMathInElement(ref);</span>\n<span class=\"s2\">      }, [ref])</span>\n<span class=\"s2\">      return React.createElement('span', {ref: setRef}, props.children);</span>\n<span class=\"s2\">    }</span>\n<span class=\"s2\">  \"</span><span class=\"bp\">#</span>\n\n<span class=\"bp\">#</span><span class=\"n\">html</span> <span class=\"bp\">&lt;</span><span class=\"n\">RenderKatex</span><span class=\"bp\">&gt;</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">text</span> <span class=\"s2\">\"$$x^2 + y^2 = z^2$$\"</span><span class=\"o\">}</span> <span class=\"bp\">&lt;/</span><span class=\"n\">RenderKatex</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 434450363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713569773
    }
]