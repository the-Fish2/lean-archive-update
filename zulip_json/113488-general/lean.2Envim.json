[
    {
        "content": "<p>Will mention a status update on the past few days of neovim support via <a href=\"https://github.com/Julian/lean.nvim\">lean.nvim</a> in case it attracts anyone else who's following along :)</p>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> helped tidy up the infoview with some syntax highlighting, added support for showing diagnostics in it and made a more straightforward implementation of abbreviation insertion support, all of which are great.</p>\n<p>We also fixed a couple of annoying basic bugs, though there are still a few to fix. At the minute I dare say things are quite usable to start.</p>\n<p><span class=\"user-mention\" data-user-id=\"373814\">@Rishikesh Vaishnav</span> is working on <a href=\"https://asciinema.org/a/kQsS0h4zErNQ6XwbnIzEyYdJ5\">per-window or per-tab infoviews</a> which will make things much easier to work with with multiple splits and tabs. Rish let's maybe move our DMs here, in case it's interesting to anyone else (and if not they'll mute :P)</p>",
        "id": 241569896,
        "sender_full_name": "Julian Berman",
        "timestamp": 1622828477
    },
    {
        "content": "<p>Hopefully we'll also soon have a way to run lean 3 and lean 4 buffers side-by-side.</p>",
        "id": 241570202,
        "sender_full_name": "Julian Berman",
        "timestamp": 1622828624
    },
    {
        "content": "<p>Hello folks! I am a graduate student from California who has been studying Lean for a few months but am relatively new to Zulip. Good to meet you all!</p>\n<p>Per-tab/per-window infoviews are mostly ready (see <a href=\"https://github.com/Julian/lean.nvim/pull/35\">this PR</a>), there just are a few error messages not affecting functionality that I'm trying to work out, and we may want to add a few extra features. We've also got some design decisions to make on whether to make the <code>lean</code> vim filetype default to Lean 3 or Lean 4. It's currently dependent on a PR <a href=\"https://github.com/rish987/nvim-lspconfig\">to <code>nvim-lspconfig</code></a> that adds Lean 4 as a new language server, so you'll have to install that fork if you want to try it out.</p>",
        "id": 241572925,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622829929
    },
    {
        "content": "<p>I'd love to use Lean in vim (although this will probably never be a serious option because of widgets). I'm super grateful that some people invest time in trying to make this happen. But I must say the README is daunting. The installation seem to require a lot of manual dependency installation and configuration, and it's not clear what is optional and what is required. Certainly the vim nightmare of having dozens of competing plugin managers doesn't help. Could you record some screencast showing the current status of this project? That would greatly help people deciding whether it's worth spending one hour installing it.</p>",
        "id": 241624251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622882048
    },
    {
        "content": "<p>I should also write I think part of the mess comes from the Lean 3/Lean 4 dichotomy. It would probably help a lot to have separate instructions for Lean 3 and Lean 4.</p>",
        "id": 241624290,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622882157
    },
    {
        "content": "<p>Yes that's good feedback thanks. I've been meaning to add a short demo, will do so, and make it a bit clearer what's necessary for what.</p>",
        "id": 241627105,
        "sender_full_name": "Julian Berman",
        "timestamp": 1622886228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I was looking into how to support “true” http infoviews in neovim as well... I believe websockets are the technology we need to use? Which is available via the lua.http module. This could enable widgets. And for the very commonly used non-graphical widgets, it should be possible to port those directly for use in the terminal. Would be happy to look into this in the future</p>",
        "id": 241637769,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622901147
    },
    {
        "content": "<p>Made filetype <code>lean</code> refer to Lean 4 and <code>lean3</code> refer to Lean 3, since we seem to agree that it is the right time for this. Adjusted <code>nvim-lspconfig</code> accordingly. Let me know if there are any objections.</p>",
        "id": 241659146,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622932152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> It may be wise to also put a warning against using <code>lean.vim</code> if using neovim, and direct them to <code>lean.nvim</code> (in the <code>lean.vim</code> README)</p>",
        "id": 241659261,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622932337
    },
    {
        "content": "<p>Have fixed all of the bugs/error messages relating to the new infoview functionality I could find, NOTE that I've changed the config option <code>lsp4</code> to <code>lsp</code> so that if we eventually stop supporting Lean 3 it won't be necessary to change that. Added to README descriptions of mappings for new infoview stuff.</p>\n<p>TODO:</p>\n<ul>\n<li>Manually test abbreviations and completion from <code>compe</code> (may have been broken in <code>lean3</code> by filetype rename)</li>\n<li>Manually test Treesitter</li>\n<li>Fix existing testing framework to work with the new infoview code</li>\n<li>README updating</li>\n</ul>",
        "id": 241666991,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622946010
    },
    {
        "content": "<p>Nice, thanks! I think also things are getting big for one PR, so I'm going to try tearing off a piece and merging it independently if I can find some self-contained bits.</p>",
        "id": 241672797,
        "sender_full_name": "Julian Berman",
        "timestamp": 1622955192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373814\">Rish Vaishnav</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/241637769\">said</a>:</p>\n<blockquote>\n<p>Patrick Massot I was looking into how to support “true” html infoviews in neovim as well... I believe websockets is the technology we need to use? Which is available via the <code>lua-http</code> library. This could enable widgets. And for the very commonly used non-graphical widgets, it should be possible to port those directly for use in the terminal. Would be happy to look into this in the future</p>\n</blockquote>\n<p>I think you have it backward. There is no communication issue. I don't think there is any websockets involved, the Lean server simply sends widget information the same way it sends everything. But then all widgets are graphical. Displaying them is the issue. To be very specific, I'm not talking about toys such as the Hanoi towers widgets here, I'm talking about what you can see in <a href=\"#narrow/stream/113489-new-members/topic/.22unfold.22.20a.20proposition/near/240804412\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.22unfold.22.20a.20proposition/near/240804412</a> for instance. The big thing is being able to put your mouse on some expression in the info view and see how Lean parses them thanks to the interactive highlighting, and then copy or jump to definition.</p>",
        "id": 241680278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622967851
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> a screenshot or two of the final outcome often speaks more than a thousand words ;-)</p>",
        "id": 241684883,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1622975268
    },
    {
        "content": "<p>Yeah, was considering adding a gif to the README of a demo using this, though we’ll probably have to update that once we implement pinnable/pausable infoview messages (at which point it would seem more competitive with VSCode)</p>",
        "id": 241690168,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622983538
    },
    {
        "content": "<p>As I prefer NeoVim and I do a lot of Lean 4 these days, I can be a beta tester if you want :)</p>",
        "id": 241698358,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1622995721
    },
    {
        "content": "<p>That's awesome, all you have to do is install the forks of <a href=\"https://github.com/rish987/lean.nvim\">lean.nvim</a> and <a href=\"https://github.com/rish987/nvim-lspconfig\">nvim-lspconfig</a> (replacing any existing installations). Here are zips of the minimal test packages I've been using: <a href=\"/user_uploads/3121/omJqL_YAiQdcIoEA9Ap2k37Q/test_lean4.zip\">test_lean4.zip</a>  and <a href=\"/user_uploads/3121/D25gzYB5f8Hg86B7T0Opfe71/test_lean.zip\">test_lean.zip</a>.</p>",
        "id": 241699264,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622997067
    },
    {
        "content": "<p>^ (also make sure you do NOT have <code>lean.vim</code> installed)</p>",
        "id": 241701078,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1622999823
    },
    {
        "content": "<p>Alright, fixed the testing infra (though the automated github tests will fail until the <code>nvim-lspconfig</code> PR is merged), fixed a (hopefully last) edge case error message, and added some more details on the new functionality to the README.</p>\n<p>This should be ready for a \"final review\" before merge <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>. And <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> do you have any more comments on <a href=\"https://github.com/rish987/nvim-lspconfig\">nvim-lspconfig</a>? If it looks good to you then I'll go ahead and make the PR to upstream.</p>",
        "id": 241707742,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623008965
    },
    {
        "content": "<p>Nice, well done. It's usually a bit easier to see what changes are being proposed in a PR -- I think the lspconfig change is probably correct at this point but it's slightly nontrivial to test because it has a circular dependency on the other change.</p>",
        "id": 241708657,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373814\">Rish Vaishnav</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/241659261\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> It may be wise to also put a warning against using <code>lean.vim</code> if using neovim, and direct them to <code>lean.nvim</code> (in the <code>lean.vim</code> README)</p>\n</blockquote>\n<p>The README of <code>lean.nvim</code> explicitly says one first needs to install <code>lean.vim</code>. This confirms people probably need to wait until the situation stabilizes.</p>",
        "id": 241708702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623010350
    },
    {
        "content": "<p>I think what we should  possibly do, assuming we've agreed to call lean4 <code>lean</code> and Lean 3 <code>lean3</code>, is to make that filetype change immediately (in the lean.vim repo), which unblocks the change in the lspconfig repo.</p>",
        "id": 241708710,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010375
    },
    {
        "content": "<p>Yes Patrick give it a few days :)</p>",
        "id": 241708716,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010382
    },
    {
        "content": "<p>Ok great. Thanks again for all your efforts!</p>",
        "id": 241708727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623010411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> in general if we can it's much easier to review changes one small bit at a time rather than all bundled together with other ones, and also a bit easier if you work on a branch, rather than on the main branch, because then you can merge in upstream changes a bit easier -- but I'm trying not to bother much with that now, we can certainly work with what you have, it's great, will just take a bit to incrementally merge it.</p>",
        "id": 241708795,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010507
    },
    {
        "content": "<p>Yeah my bad... I am a \"baby\" open source developer so definitely let me know if there are any best practices I'm not following!</p>",
        "id": 241708855,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623010594
    },
    {
        "content": "<p>Yes I figured, you're doing great don't worry :) you did the important bit which is writing something nice. The rest is easy stuff.</p>",
        "id": 241708872,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010623
    },
    {
        "content": "<p>But yeah now we have basically the lspconfig change blocked on changing the lean filetypes, and then merging to <code>lean.nvim</code> blocked on the lspconfig change</p>",
        "id": 241708889,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010663
    },
    {
        "content": "<p>so we can do that in the lean.nvim repo or the lean.vim one (changing the filetype name) but I kind of would like to try to do it in the lean.vim repo assuming Gabriel is ok merging it -- there's a small chance we can make things still work together, so until that falls apart I kind of have hopes we'll be able to push through...</p>",
        "id": 241708964,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> am I being clear enough? Basically we have to introduce the new filetype names, so let's do that first, then you can send the lspconfig PR and it will work immediately, and then we can decide whether we really need to merge the two?</p>",
        "id": 241708978,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623010798
    },
    {
        "content": "<p>Hmm not 100% following, for <code>lean.nvim</code> I've already used filetype <code>lean3</code> for Lean 3 and <code>lean</code> for Lean 4. We shouldn't need to change <code>lean.vim</code> (the new README says that you should not have <code>lean.vim</code> installed if using <code>lean.nvim</code>)</p>",
        "id": 241709216,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623011096
    },
    {
        "content": "<p>Oh I see, you're saying if they're using <code>lean.vim</code> instead of <code>lean.nvim</code>, then we need to add detection for the <code>lean3</code> filetype in <code>lean.vim</code>, right?</p>",
        "id": 241709372,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623011311
    },
    {
        "content": "<p>Right now what we have is that the PR to <code>lean.nvim</code> can't be merged because it depends on changes to <code>lspconfig</code>, but the converse is also true! <code>lspconfig</code>'s PR can't be merged either because the only existing setup doesn't really use that filetype, not until I hit the merge button on your PR</p>",
        "id": 241709442,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623011443
    },
    {
        "content": "<p>So things of course will work at the end of the day when everything's merged, but along the way, stuff will break</p>",
        "id": 241709455,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623011472
    },
    {
        "content": "<p>Gotcha. Does Github does not have some tool for synchronized merging?</p>",
        "id": 241709485,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623011518
    },
    {
        "content": "<p>It doesn't, and in theory it wouldn't really be too big of an issue, it's not like we have 1000 users, we have essentially the 3 of us :P -- but I need to review the rest of the PR more carefully so I understand all the changes, so it's really me not being sure I can hit the merge button immediately</p>",
        "id": 241709537,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623011592
    },
    {
        "content": "<p>Yes totally understandable. Let me know if you have any questions, no rush at all!</p>",
        "id": 241709560,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623011631
    },
    {
        "content": "<p>Ok sorry but just pushed another small fix slightly refactoring <code>close_win_wrapper</code> (can't believe I missed this... :P)</p>",
        "id": 241711362,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623014427
    },
    {
        "content": "<p>Added a number of comments to the source (should hopefully make your review a bit easier)</p>",
        "id": 241713825,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623018371
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Y7mW2Gp6UjRffx4poupVCtjY/2021-06-06-162302_1918x1079_scrot.png\">2021-06-06-162302_1918x1079_scrot.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Y7mW2Gp6UjRffx4poupVCtjY/2021-06-06-162302_1918x1079_scrot.png\" title=\"2021-06-06-162302_1918x1079_scrot.png\"><img src=\"/user_uploads/3121/Y7mW2Gp6UjRffx4poupVCtjY/2021-06-06-162302_1918x1079_scrot.png\"></a></div><p>This a bit much? <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 241715813,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623021936
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/-2sFPbZeMW2dH1-oTHijTGU7/2021-06-06-162856_1917x1079_scrot.png\">2021-06-06-162856_1917x1079_scrot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-2sFPbZeMW2dH1-oTHijTGU7/2021-06-06-162856_1917x1079_scrot.png\" title=\"2021-06-06-162856_1917x1079_scrot.png\"><img src=\"/user_uploads/3121/-2sFPbZeMW2dH1-oTHijTGU7/2021-06-06-162856_1917x1079_scrot.png\"></a></div><p>(after <code>:LeanInfoPerTab</code>) Ah that's better...</p>",
        "id": 241716018,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623022237
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/cZRL9FWvPGeXkDIuybpgDaRj/2021-06-06-165122_1916x1079_scrot.png\">2021-06-06-165122_1916x1079_scrot.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cZRL9FWvPGeXkDIuybpgDaRj/2021-06-06-165122_1916x1079_scrot.png\" title=\"2021-06-06-165122_1916x1079_scrot.png\"><img src=\"/user_uploads/3121/cZRL9FWvPGeXkDIuybpgDaRj/2021-06-06-165122_1916x1079_scrot.png\"></a></div><p>Or maybe, if you do things in the right order with <code>:LeanInfoPerWin</code>...</p>",
        "id": 241716770,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623023580
    },
    {
        "content": "<p>One more (small) thing I noticed - if you mess around with the infoview before the Language server has given diagnostics for your line, some ugly error messages about failed hover/plainGoal callbacks can be thrown. Again, doesn't \"break\" anything, but would be nice to fix, probably using something similar to what was done with <code>wait_for_line_diagnostics()</code> in the tester code. Though I will put this off to a future PR.</p>",
        "id": 241772818,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623071036
    },
    {
        "content": "<p>And also would be nice to include a \"processing file...\" message if it is waiting, similar to what is done in VSCode</p>",
        "id": 241773008,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623071110
    },
    {
        "content": "<p>Yes definitely we should keep track of any known issues! But you may notice I'm trying to whittle down your branch little by little. So definitely in a second PR, or a future one :)</p>",
        "id": 241774252,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623071741
    },
    {
        "content": "<p>My next whittling will be we already depend on <code>lspconfig</code> as a hard dep, so rather than vendoring the module from it with the path stuff, we should just be able to require it, right?</p>",
        "id": 241774335,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623071769
    },
    {
        "content": "<p>If you have spare moments maybe give that a shot, since the US is about to wake up and I'm about to go on 6 hours of lovely Zoom calling...</p>",
        "id": 241774373,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623071791
    },
    {
        "content": "<p>Hmm currently I believe it is usable without <code>nvim-lspconfig</code> if they specifically set <code>enable = false</code> in <code>lsp3</code> and <code>lsp4</code>,  though it should be okay to require it since it would seem very rare to use this plugin without it</p>",
        "id": 241774724,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623071978
    },
    {
        "content": "<p>This should make it possible to remove all of that copied code in <code>util.lua</code> as well</p>",
        "id": 241774863,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623072045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373814\">Rish Vaishnav</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/241707742\">said</a>:</p>\n<blockquote>\n<p>This should be ready for a \"final review\" before merge <span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span>. And <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> do you have any more comments on <a href=\"https://github.com/rish987/nvim-lspconfig\">nvim-lspconfig</a>? If it looks good to you then I'll go ahead and make the PR to upstream.</p>\n</blockquote>\n<p>The lspconfig stuff looks good to me, at least Lean-wise.</p>",
        "id": 241775810,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623072480
    },
    {
        "content": "<p>Cool, I'll make that PR once we've \"finalized\" things on our side so that we can make sure the merges happen at somewhat the same time</p>",
        "id": 241776166,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623072623
    },
    {
        "content": "<p>No no make the PR immediately, that'll actually help!</p>",
        "id": 241776201,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623072639
    },
    {
        "content": "<p>It'll save you from having to do what we just discussed I think.</p>",
        "id": 241776212,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623072647
    },
    {
        "content": "<p>Oh I see, alright will do</p>",
        "id": 241776383,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623072728
    },
    {
        "content": "<p>It is open: <a href=\"https://github.com/neovim/nvim-lspconfig/pull/958\">https://github.com/neovim/nvim-lspconfig/pull/958</a></p>",
        "id": 241778961,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623073806
    },
    {
        "content": "<p>Yeah, my bad in including unrelated fixes (e.g. buffer-local keymappings) in my PR rather than creating a new PR for them, will be more careful about this in the future. Looking at my other commits, everything else should be self-contained (though I really should have made simultaneous support and per-window/per-tab infoviews two separate PRs)</p>",
        "id": 241782735,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623075359
    },
    {
        "content": "<p>Also feel free to remove to mode-toggling mappings by the way... I agree that  it should be pretty rare to use, so the <code>:LeanInfoPerTab</code> and <code>:LeanInfoPerWin</code> commands should be enough. I just got a bit too excited there once I got this working lol</p>",
        "id": 241784507,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623076113
    },
    {
        "content": "<p>All good, don't worry, yeah it's 100x easier to review 10 small PRs that do one thing each than 1 big one essentially, so in general the smaller you can make them the better. And yeah think I'll kill those two commands until someone asks for them.</p>",
        "id": 241796063,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623080399
    },
    {
        "content": "<p>The excitement is good though :P it'll keep you motivated to help, which I could use all I can get.</p>",
        "id": 241796137,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623080413
    },
    {
        "content": "<p>Yeah also for the <code>:LeanInfoPerTab</code> and <code>:LeanInfoPerWin</code> commands feel free to remove them as well... Though I already personally find them very useful as I frequently switch between my desktop RPi (large screen) and connecting to it via SSH over my laptop (small screen), and dynamically being able to change that makes it possible for me not to have to modify <code>init.vim</code>/<code>init.lua</code> and restart neovim - so I think it's worth mentioning in the README how to set those commands up in the <code>lsp</code>/<code>lsp3</code> configs</p>",
        "id": 241801940,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623082790
    },
    {
        "content": "<p>One more thing to put on the roadmap: individually configurable NESW infoviews - I'd imagine, for example when viewing Lean 3 files and Lean 4 files side by side, it would be pretty convenient to have the infoview on the bottom of each source window rather than always on the right. Shouldn't be too much trouble to implement</p>",
        "id": 241805265,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623084224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373814\">Rish Vaishnav</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/241805265\">said</a>:</p>\n<blockquote>\n<p>One more thing to put on the roadmap: individually configurable NESW infoviews - I'd imagine, for example when viewing Lean 3 files and Lean 4 files side by side, it would be pretty convenient to have the infoview on the bottom of each source window rather than always on the right. Shouldn't be too much trouble to implement</p>\n</blockquote>\n<p>This is also useful for portrait screens.</p>",
        "id": 241805759,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623084417
    },
    {
        "content": "<p>Trying out the new term goals - any idea what's causing exit-code 82 with <code>leanpkg print-paths</code> on the latest nightly (06/09)?</p>\n<p><a href=\"https://asciinema.org/a/2UsJIWjPAFA1ZM4waDx0LpWG0\">https://asciinema.org/a/2UsJIWjPAFA1ZM4waDx0LpWG0</a></p>",
        "id": 242098052,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623258094
    },
    {
        "content": "<p>This is an interesting error, and I can't reproduce it.  You're on arm, right?</p>",
        "id": 242101187,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623259503
    },
    {
        "content": "<p>Yep. I’m going to try some of the previous nightlies and see if I can find where it first show up</p>",
        "id": 242101719,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623259751
    },
    {
        "content": "<p>I would bet on <a href=\"https://github.com/leanprover/lean4/pull/495\">https://github.com/leanprover/lean4/pull/495</a> :)</p>",
        "id": 242101951,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1623259849
    },
    {
        "content": "<p>No idea either though</p>",
        "id": 242101987,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1623259867
    },
    {
        "content": "<p>Thanks. Don't have the knowledge yet to solve this, so swallowing my pride for now and moving to an x86 machine <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 242143853,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623281567
    },
    {
        "content": "<p>Update: the next feature I'm going to implement is pinnable/pausable infoview messages, starting from my <code>infoview_persistence_refactor</code> branch. But before that, I'm going to focus for a bit on adding complete automated testing for per-window/per-tab infoviews to make things easier down the road.</p>",
        "id": 242279153,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623363896
    },
    {
        "content": "<p>That sounds great, definitely please do send small, single-purpose PRs for that as you go. But more tests would be awesome.</p>",
        "id": 242312653,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623398641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> To save you some time, we can abandon the current PR # 35 and I can work on introducing incremental PRs for the new functionality (along with ones for new unit tests). But if you think you've \"almost got it\" with # 35, we can go ahead with that. Let me know what you prefer.</p>",
        "id": 242414513,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623453703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> if you don't hold it against me that'd be 100% helpful</p>",
        "id": 242431150,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623478605
    },
    {
        "content": "<p>I am almost at the point where I can cross off another piece of functionalitiy, but after that would still have a bit of work for each of the remaining bits, so yeah if you're OK with that it'd deeeefinitely help.</p>",
        "id": 242431162,
        "sender_full_name": "Julian Berman",
        "timestamp": 1623478641
    },
    {
        "content": "<p>Yes no problem at all - figuring out how to best separate things is half the fun anyways!</p>",
        "id": 242445527,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623497835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> FYI: We've just internalized all of the components from <code>lean.vim</code> into <code>lean.nvim</code> - not sure what the plan for <code>lean.vim</code> is from here, whether to archive or support in parallel. IMO probably best to support in parallel at least until neovim 0.5.0 is officially released, but let me know your thoughts on this.</p>",
        "id": 242517283,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1623599240
    },
    {
        "content": "<p>I'll leave lean.vim as it is for now, though maybe we should make the link to lean.nvim more prominent.  Future changes to the syntax files will go to lean.nvim.</p>",
        "id": 242560971,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623655665
    },
    {
        "content": "<p>There's now a short demo in the README: <a href=\"https://github.com/Julian/lean.nvim/#leannvim\">https://github.com/Julian/lean.nvim/#leannvim</a></p>\n<p>There still is not a Patrick-proof (i.e. \"just tell me to run one command and then everything works without reading 8 paragraphs\") section, and Lean 3 functionality lags a bit behind Lean 4. Both of those are things I'll address in the next week or so, but the demo video hopefully gives an initial idea of where things are. Comments are of course welcome.</p>",
        "id": 243263474,
        "sender_full_name": "Julian Berman",
        "timestamp": 1624128453
    },
    {
        "content": "<p>Great, that demo video looks really promising!!</p>",
        "id": 243263642,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624128659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> the language servers seem to be broken in CI, even for commits before the most recent merge. Could recent changes to lean-language-server be responsible? Do the yml files need to be updated in some way? Looking into it…</p>",
        "id": 243796890,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1624546046
    },
    {
        "content": "<p>Locally, after updating <code>lean-language-server</code>, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[local] lean.nvim $ lean-language-server --stdio\n/usr/local/bin/lean-language-server: line 1: use strict: command not found\n/usr/local/bin/lean-language-server: line 2: syntax error near unexpected token `exports,'\n/usr/local/bin/lean-language-server: line 2: `Object.defineProperty(exports, \"__esModule\", { value: true });'\n</code></pre></div>",
        "id": 243798661,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1624546703
    },
    {
        "content": "<p>Sorry, should have mentioned that somewhere you'd see -- it's related to me breaking that somehow, but I don't know how, I didn't touch anywhere near that, so I can only assume something changed in <code>tsc</code>'s behavior maybe or something, I have to investigate (and had to jump on calls). <a href=\"https://github.com/leanprover/lean-client-js/pull/21#issuecomment-867688593\">https://github.com/leanprover/lean-client-js/pull/21#issuecomment-867688593</a></p>",
        "id": 243798876,
        "sender_full_name": "Julian Berman",
        "timestamp": 1624546782
    },
    {
        "content": "<p>Alright no prob, I'll look into it as well</p>",
        "id": 243799551,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1624547027
    },
    {
        "content": "<p>I've pushed a fix now.</p>",
        "id": 243799699,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624547074
    },
    {
        "content": "<p>The whole lean-client-js project hasn't been touched for years.  It seems impossible to upgrade everything to the latest typescript version, but upgrading lean-language-server worked just fine and fixed the bug.</p>",
        "id": 243799842,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624547134
    },
    {
        "content": "<p>Awesome, looks like that fixed it. Thank you!</p>",
        "id": 243800342,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1624547313
    },
    {
        "content": "<p>Thanks to Rish and Gabriel, lean.nvim just merged support for... widgets :) -- both for lean 3 and 4.</p>\n<p>If you were waiting for support for them to decide whether neovim was worth a shot, now's your chance. Let us know what you think. We're still merging a few tweaks to how things look (and documenting the mappings), but the core functionality is indeed there now.</p>",
        "id": 256051162,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633351084
    },
    {
        "content": "<p>Wow, that's really cool!</p>",
        "id": 256051219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633351123
    },
    {
        "content": "<p>How do I test this?</p>",
        "id": 256051226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633351129
    },
    {
        "content": "<p>I can't even imagine how it could look like <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 256058325,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633354001
    },
    {
        "content": "<p>Did you already update the documentation?</p>",
        "id": 256058536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633354082
    },
    {
        "content": "<p>I'll post a recording a bit later after the tweaks are in -- and no, still working on tweaking the docs, so this is an early sneak peak (but hey who can resist such things). For now if you have the plugin installed -- <a href=\"https://github.com/Julian/lean.nvim/#installation\">howto is here, let me know if anything is unclear</a> -- the mappings you'll use are <a href=\"https://github.com/Julian/lean.nvim/blob/main/lua/lean/infoview.lua#L28-L33\">here</a> -- but more docs to come later tonight if you're less adventurous (or have less time).</p>",
        "id": 256059551,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633354446
    },
    {
        "content": "<p>I can definitely wait. Thank you so much for all this!</p>",
        "id": 256060037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633354645
    },
    {
        "content": "<p>In this case I didn't do much myself, just the messenger trying to rile up more feedback :), but indeed the others did quite a nice job.</p>",
        "id": 256060328,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633354757
    },
    {
        "content": "<p>Here's a brief screen recording of what it looks like at the minute -- <a href=\"https://user-images.githubusercontent.com/329822/136033121-4656e399-b422-4404-9e6c-526dffe91419.mov\">https://user-images.githubusercontent.com/329822/136033121-4656e399-b422-4404-9e6c-526dffe91419.mov</a></p>",
        "id": 256245888,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633440867
    },
    {
        "content": "<p>That looks very exciting!</p>",
        "id": 256246396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633441084
    },
    {
        "content": "<p>If installing this is reasonably easy, I am very interested in trying this out.</p>",
        "id": 256246461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633441120
    },
    {
        "content": "<p>I believe at this point it should be, and of course am happy to help if not (either by improving docs or otherwise) -- have you got the plugin installed? Or if not, can I help somehow there? What step are you at?</p>",
        "id": 256247320,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633441470
    },
    {
        "content": "<p>I'm at step 0.</p>",
        "id": 256247421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633441512
    },
    {
        "content": "<p>Can I install the plugin using usual methods?</p>",
        "id": 256247448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633441525
    },
    {
        "content": "<p>Cool :)</p>",
        "id": 256247455,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633441529
    },
    {
        "content": "<p>Yes -- any plugin manager should work, we include instructions for vim-plug specifically here: <a href=\"https://github.com/Julian/lean.nvim/#installation\">https://github.com/Julian/lean.nvim/#installation</a></p>",
        "id": 256247569,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633441569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> also deserves another shout out for the (massively cool) effort on getting the above to work.</p>",
        "id": 256266217,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633447578
    },
    {
        "content": "<p>Thanks <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span> Though there is certainly still a lot more cool stuff I plan to add very soon!!!</p>",
        "id": 256266801,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1633447786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> <code>Plug 'andrewradev/switch.vim'  \" For Lean switch support</code><br>\nWhat does that do?</p>",
        "id": 256275851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633451043
    },
    {
        "content": "<p>aah, it's some generic plugin for syntax transformations?</p>",
        "id": 256277174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633451555
    },
    {
        "content": "<p>Yet another thing to try out</p>",
        "id": 256277188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633451564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Yes :) in my opinion it's literally the most useful under-known vim plugin</p>",
        "id": 256279714,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452568
    },
    {
        "content": "<p>Amongst the few of us using <code>lean.nvim</code> however, I suspect only I've used the lean support I wrote</p>",
        "id": 256279758,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452584
    },
    {
        "content": "<p>And since I know so little lean, it undoubtedly could use improvement in what it switches between</p>",
        "id": 256279775,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452596
    },
    {
        "content": "<p>But what it does right now is e.g. if you have <code>library_search</code> under the cursor and hit switch, it'll change that to <code>suggest</code>, and if you hit it again to <code>hint</code> I think</p>",
        "id": 256279887,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452634
    },
    {
        "content": "<p>Or if you have <code>tt</code> under the cursor you get <code>ff</code></p>",
        "id": 256279948,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452665
    },
    {
        "content": "<p><code>simp</code> -&gt; <code>squeeze_simp</code>??</p>",
        "id": 256280007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633452690
    },
    {
        "content": "<p>The full set of switches are here: <a href=\"https://github.com/Julian/lean.nvim/blob/main/ftplugin/lean/switch.vim#L8-L35\">https://github.com/Julian/lean.nvim/blob/main/ftplugin/lean/switch.vim#L8-L35</a> and as I say I fully expected someone who knows more lean to at some point come along and suggest better versions of that</p>",
        "id": 256280010,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452691
    },
    {
        "content": "<p>yep <del>though actually I think I made it use your <code>simp?</code>, but when I saw you say <code>squeeze_simp</code> was still a bit better at things I made a mental note to go back to <code>squeeze_simp</code> which I may not have pushed</del> done</p>",
        "id": 256280136,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452734
    },
    {
        "content": "<p>Uh sorry I linked you the lean 4 version</p>",
        "id": 256280266,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452784
    },
    {
        "content": "<p>The lean 3 one (which has tactic switches) is here: <a href=\"https://github.com/Julian/lean.nvim/blob/27817399adcf871075337cb2b7d1e773e7e5c55e/ftplugin/lean3/switch.vim\">https://github.com/Julian/lean.nvim/blob/27817399adcf871075337cb2b7d1e773e7e5c55e/ftplugin/lean3/switch.vim</a></p>",
        "id": 256280295,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633452797
    },
    {
        "content": "<p>Any tips for following nested widgets? The only way I managed to go more than one level deep is with <code>:set mouse=a</code> as ctrl-w w seems to fail me after one widget</p>",
        "id": 256282932,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633453794
    },
    {
        "content": "<p>Hit <code>Tab</code></p>",
        "id": 256283039,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633453822
    },
    {
        "content": "<p>Hm, it doesn't seem to do anything for me unfortunately</p>",
        "id": 256283104,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633453861
    },
    {
        "content": "<p>I added that an hour or two ago</p>",
        "id": 256283128,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633453874
    },
    {
        "content": "<p>So update if you haven't since then perhaps</p>",
        "id": 256283148,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633453882
    },
    {
        "content": "<p>Perfect, thank you all for this <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 256283258,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633453930
    },
    {
        "content": "<p>Installing the suggested packages results in an endless stream of errors like: <code>E5108: Error executing lua ...sot/.config/nvim/bundle/nvim-compe/lua/compe/context.lua:20: attempt to index field 'b' (a nil value)</code></p>",
        "id": 256290889,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633456879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> can you share what version of neovim you're on? Via e.g. <code>nvim --version</code>.</p>",
        "id": 256291221,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633456988
    },
    {
        "content": "<p>and <code>Error executing vim.schedule lua callback: ...sot/.config/nvim/bundle/plenary.nvim/lua/plenary/job.lua:480: attempt to call field 'wait' (a nil value)</code></p>",
        "id": 256291295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457022
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>NVIM v0.5.0-353-g3051342f9\nBuild type: RelWithDebInfo\nLuaJIT <span class=\"m\">2</span>.1.0-beta3\nCompilation: /usr/bin/gcc-5 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE<span class=\"o\">=</span><span class=\"m\">1</span> -O2 -g -Og -g -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std<span class=\"o\">=</span>gnu99 -Wshadow -Wconversion -Wmissing-prototypes -Wvla -fstack-protector-strong -fdiagnostics-color<span class=\"o\">=</span>auto -DINCLUDE_GENERATED_DECLARATIONS -D_GNU_SOURCE -DNVIM_MSGPACK_HAS_FLOAT32 -DNVIM_UNIBI_HAS_VAR_FROM -DMIN_LOG_LEVEL<span class=\"o\">=</span><span class=\"m\">3</span> -I/home/travis/build/neovim/bot-ci/build/neovim/build/config -I/home/travis/build/neovim/bot-ci/build/neovim/src -I/home/travis/build/neovim/bot-ci/build/neovim/.deps/usr/include -I/usr/include -I/home/travis/build/neovim/bot-ci/build/neovim/build/src/nvim/auto -I/home/travis/build/neovim/bot-ci/build/neovim/build/include\nCompilé par travis@travis-job-403476e6-991c-4366-b1c7-4e5a12a1aed5\n\nFeatures: +acl +iconv +tui\n</code></pre></div>",
        "id": 256291414,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457056
    },
    {
        "content": "<p>My vim is now completely unusable, even for non lean files</p>",
        "id": 256291759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457174
    },
    {
        "content": "<p>Hm, odd, sorry -- I suppose 2 things to try if you don't mind, one is can you give a shot at neovim 0.5.1? You can get a quick download of it here <a href=\"https://github.com/neovim/neovim/releases/tag/v0.5.1\">https://github.com/neovim/neovim/releases/tag/v0.5.1</a> if you're comfortable trying that, though it's weird because the first error message is basically saying <code>:lua print(vim.wait)</code> doesn't work (so if you can try that and tell me if that works that may help too</p>",
        "id": 256292276,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633457363
    },
    {
        "content": "<p>But I know Gabriel was successfully using 0.5.0 up until like 2 days ago</p>",
        "id": 256292335,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633457386
    },
    {
        "content": "<p>Maybe I misunderstand the instructions. For instance I'm not sure where I'm meant to write</p>\n<div class=\"codehilite\" data-code-language=\"Lua\"><pre><span></span><code><span class=\"c1\">-- You may want to reference the nvim-lspconfig documentation, found at:</span>\n<span class=\"c1\">-- https://github.com/neovim/nvim-lspconfig#keybindings-and-completion</span>\n<span class=\"c1\">-- The below is just a simple initial set of mappings.</span>\n<span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">on_attach</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">bufnr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">buf_set_keymap</span><span class=\"p\">(...)</span> <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">nvim_buf_set_keymap</span><span class=\"p\">(</span><span class=\"n\">bufnr</span><span class=\"p\">,</span> <span class=\"p\">...)</span> <span class=\"kr\">end</span>\n    <span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">buf_set_option</span><span class=\"p\">(...)</span> <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">nvim_buf_set_option</span><span class=\"p\">(</span><span class=\"n\">bufnr</span><span class=\"p\">,</span> <span class=\"p\">...)</span> <span class=\"kr\">end</span>\n    <span class=\"n\">buf_set_keymap</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'gd'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;Cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">noremap</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">})</span>\n    <span class=\"n\">buf_set_keymap</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'K'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;Cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">noremap</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">})</span>\n    <span class=\"n\">buf_set_option</span><span class=\"p\">(</span><span class=\"s1\">'omnifunc'</span><span class=\"p\">,</span> <span class=\"s1\">'v:lua.vim.lsp.omnifunc'</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 256292362,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457397
    },
    {
        "content": "<p>One sec, I'll give you a full gist</p>",
        "id": 256292450,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633457417
    },
    {
        "content": "<p><code>:lua print(vim.wait)</code> answers <code>nil</code></p>",
        "id": 256292510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457440
    },
    {
        "content": "<p>Note that I never used any lua for anything</p>",
        "id": 256292529,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457448
    },
    {
        "content": "<p>Hm, yeah that shouldn't matter, for neovim it's part of neovim -- you're on debian I guess?</p>",
        "id": 256292628,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633457486
    },
    {
        "content": "<p>If you type <code>:version</code> inside neovim do you get something similar to that output?</p>",
        "id": 256292655,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633457495
    },
    {
        "content": "<p>With the newer nvim I get a new error message <code>E5112: Error while creating lua chunk: /home/pmassot/.config/nvim/plugin/lean.lua:4: unexpected symbol near '{'</code></p>",
        "id": 256292880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457575
    },
    {
        "content": "<p>line 4 is <code>local function on_attach(client, bufnr) {</code></p>",
        "id": 256292950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457599
    },
    {
        "content": "<p>:version                                                                                                                                                                                                 <br>\nNVIM v0.5.1<br>\nBuild type: RelWithDebInfo<br>\nLuaJIT 2.1.0-beta3</p>",
        "id": 256293007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457620
    },
    {
        "content": "<p>Oh. And that line is telling me that indeed I put invalid lua in the README so apologies.. One second I'm on a call but I'll give you the right thing</p>",
        "id": 256293066,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633457644
    },
    {
        "content": "<p>There is no hurry at all. I'll take care of my son for a while.</p>",
        "id": 256293235,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633457706
    },
    {
        "content": "<p>Put this in <code>~/.config/nvim/plugin/lean.lua</code>: <a href=\"https://gist.github.com/Julian/5ddb85a86f4295491546832b25fc2011\">https://gist.github.com/Julian/5ddb85a86f4295491546832b25fc2011</a></p>\n<p>(And let me know if that at least makes the errors go away)</p>",
        "id": 256295204,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633458511
    },
    {
        "content": "<p>I can now use vim normally!</p>",
        "id": 256299181,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633460068
    },
    {
        "content": "<p>Let me try some Lean then</p>",
        "id": 256299190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633460074
    },
    {
        "content": "<p>I see the info view! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 256299328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633460137
    },
    {
        "content": "<p>Hooray! Yeah feel free to ask anything else if you start playing around. What I just gave you doesn't do everything you may want (out of vim) -- <code>lean.nvim</code> is somewhat intentionally less opinionated (or simple?) than the vscode plugin so there's more room to customize things (or use plugins in the neovim ecosystem), but if you don't do so already yourself obviously ask and happy to help (especially if it's missing functionality we should add). So yeah in short tear us apart :D</p>",
        "id": 256299852,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633460347
    },
    {
        "content": "<p>This is so amazing that I'm laughing with joy in front of my computer</p>",
        "id": 256300128,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633460419
    },
    {
        "content": "<p>Uh oh... should I be concerned that I will need to switch back to vim now?</p>",
        "id": 256300274,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633460474
    },
    {
        "content": "<p>Well that certainly makes my day. Again credit to the other folks though, I'm just the guy who was stubborn enough to ignore you when you said Lean doesn't have a vim story :D</p>",
        "id": 256300287,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633460478
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and <span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> have both contributed a ton I would have never been able to do, so it was a true team effort.</p>",
        "id": 256300403,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633460514
    },
    {
        "content": "<p>How to you see where errors are? What about the orange bars?</p>",
        "id": 256300728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633460621
    },
    {
        "content": "<blockquote>\n<p>What about the orange bars?</p>\n</blockquote>\n<p>Fixed.  They used to work in Lean 3 as well, but from what I can tell this was broken after merging the widgets branch.</p>",
        "id": 256302702,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633461392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256300728\">said</a>:</p>\n<blockquote>\n<p>How to you see where errors are?</p>\n</blockquote>\n<p>You might need to set the colors manually (if your colorscheme doesn't support it yet):</p>\n<div class=\"codehilite\" data-code-language=\"VimL\"><pre><span></span><code><span class=\"k\">hi</span> LspReferenceRead cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermbg<span class=\"p\">=</span><span class=\"k\">red</span> guibg<span class=\"p\">=</span>LightYellow\n<span class=\"k\">hi</span> LspReferenceText cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermbg<span class=\"p\">=</span><span class=\"k\">red</span> guibg<span class=\"p\">=</span>LightYellow\n<span class=\"k\">hi</span> LspReferenceWrite cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermbg<span class=\"p\">=</span><span class=\"k\">red</span> guibg<span class=\"p\">=</span>LightYellow\n<span class=\"k\">hi</span> LspDiagnosticsDefaultError cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermfg<span class=\"p\">=</span>Red\n<span class=\"k\">hi</span> LspDiagnosticsDefaultWarning cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermfg<span class=\"p\">=</span>Yellow\n<span class=\"k\">hi</span> LspDiagnosticsDefaultInformation ctermfg<span class=\"p\">=</span>Blue\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineError <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineWarning <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineInformation <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineHint <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> link SpecialChar Character\n</code></pre></div>\n<p>You might also need to enable the squiggles manually (not sure if this is the default or not):</p>\n<div class=\"codehilite\" data-code-language=\"VimL\"><pre><span></span><code><span class=\"p\">:</span><span class=\"k\">lua</span> <span class=\"p\">&lt;&lt;</span>EOF\n<span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.handlers[<span class=\"s2\">\"textDocument/publishDiagnostics\"</span>] <span class=\"p\">=</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.with<span class=\"p\">(</span>\n  <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.diagnostic.on_publish_diagnostics<span class=\"p\">,</span> {\n    <span class=\"nb\">underline</span> <span class=\"p\">=</span> true<span class=\"p\">,</span>\n    virtual_text <span class=\"p\">=</span> { spacing <span class=\"p\">=</span> <span class=\"m\">4</span> }<span class=\"p\">,</span>\n    update_in_insert <span class=\"p\">=</span> true<span class=\"p\">,</span>\n  }<span class=\"p\">)</span>\nEOF\n</code></pre></div>",
        "id": 256303340,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633461641
    },
    {
        "content": "<p>I can confirm the orange \"bars\" are there. However they make the left margin randomly jump (as do thet <code>#check</code> and <code>#print</code> commands) which is really really not nice. Is there any way to avoid that?</p>",
        "id": 256306668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633463017
    },
    {
        "content": "<p>Maybe we could permanently reserve horizontal space for them?</p>",
        "id": 256306749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633463043
    },
    {
        "content": "<p>I'm not sure what you call red squiggles. I think I don't see them. I pasted you lua code at the end of my <code>plugin/lean.lua</code></p>",
        "id": 256306954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633463139
    },
    {
        "content": "<p>By the way, in case we still have a couple of VScode users, I recently found the \"Error lens\" extension which makes errors <em>much</em> easier to spot.</p>",
        "id": 256307116,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633463204
    },
    {
        "content": "<p>You can permanently reserve space using... I think <code>:set signcolumn=yes</code> (or <code>vim.opt.signcolumn = \"yes\"</code> from your lua file)</p>",
        "id": 256307267,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463271
    },
    {
        "content": "<p>The default is \"auto\".</p>",
        "id": 256307341,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463288
    },
    {
        "content": "<p>Also beyond what Gabriel shared you probably want some navigation to move between errors (at least I like that a lot)</p>",
        "id": 256307379,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463308
    },
    {
        "content": "<p>This is what I use (the first and last line of this, though perhaps the whole thing is of interest): <a href=\"https://github.com/Julian/dotfiles/blob/main/.config/nvim/plugin/lsp.lua#L21-L25\">https://github.com/Julian/dotfiles/blob/main/.config/nvim/plugin/lsp.lua#L21-L25</a></p>",
        "id": 256307488,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463357
    },
    {
        "content": "<p>So when I hit <code>&lt;space&gt;n</code> it goes to the next lean line with an error on it.</p>",
        "id": 256307529,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463370
    },
    {
        "content": "<p>And <code>&lt;space&gt;N</code> goes to the previous one.</p>",
        "id": 256307563,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463385
    },
    {
        "content": "<p>If you want to copy paste those lines just note you'll need to copy paste these too: <a href=\"https://github.com/Julian/dotfiles/blob/main/.config/nvim/plugin/lsp.lua#L4-L12\">https://github.com/Julian/dotfiles/blob/main/.config/nvim/plugin/lsp.lua#L4-L12</a></p>",
        "id": 256307675,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633463414
    },
    {
        "content": "<p>Julian, can you show what \"red squiggles\" are meant to look like?</p>",
        "id": 256308558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633463786
    },
    {
        "content": "<p>I have them turned off, ha, but yeah gimme a sec</p>",
        "id": 256309684,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464228
    },
    {
        "content": "<p>They're meant to look quite similar to VSCode where the actual text has a curly line underneath it in your lean file</p>",
        "id": 256309777,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464257
    },
    {
        "content": "<p>Are you in terminal neovim or graphical?</p>",
        "id": 256309797,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464267
    },
    {
        "content": "<p>That's what I thought. I don't see them</p>",
        "id": 256309809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633464272
    },
    {
        "content": "<p>I'm in a terminal</p>",
        "id": 256309827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633464279
    },
    {
        "content": "<p>This is what it should look like, albeit this is Lean 4: <a href=\"/user_uploads/3121/dLpm8epihJIIzyAIcxT7av4s/Screen-Shot-2021-10-05-at-16.12.13.png\">Screen-Shot-2021-10-05-at-16.12.13.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dLpm8epihJIIzyAIcxT7av4s/Screen-Shot-2021-10-05-at-16.12.13.png\" title=\"Screen-Shot-2021-10-05-at-16.12.13.png\"><img src=\"/user_uploads/3121/dLpm8epihJIIzyAIcxT7av4s/Screen-Shot-2021-10-05-at-16.12.13.png\"></a></div>",
        "id": 256311479,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464768
    },
    {
        "content": "<p>That's in a terminal (I use terminal neovim too)</p>",
        "id": 256311503,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464781
    },
    {
        "content": "<p>I don't have this <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 256311555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633464805
    },
    {
        "content": "<p>I think there's 2 things that might be preventing you from seeing them -- one is I think Lean 3 support for us still doesn't have them, but Gabriel correct me if I'm wrong</p>",
        "id": 256311563,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464808
    },
    {
        "content": "<p>I think there there's an open issue: <a href=\"https://github.com/Julian/lean.nvim/issues/97\">https://github.com/Julian/lean.nvim/issues/97</a></p>",
        "id": 256311602,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464824
    },
    {
        "content": "<p>I'm talking only about Lean 3</p>",
        "id": 256311611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633464827
    },
    {
        "content": "<p>But we need to fix it in Lean 3's server</p>",
        "id": 256311615,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464830
    },
    {
        "content": "<p>Yeah so I think you won't see them</p>",
        "id": 256311628,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464838
    },
    {
        "content": "<p>Ok, that's not a big deal</p>",
        "id": 256311728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633464870
    },
    {
        "content": "<p>(The other one is if your <code>$TERM</code> is misset, but yeah I think for Lean 3 they don't work AFAIK -- as I say I usually leave them off personally, I find them a bit noisy)</p>",
        "id": 256311744,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633464881
    },
    {
        "content": "<p>How do you click the \"Try this\" links?</p>",
        "id": 256312340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633465105
    },
    {
        "content": "<p>Oops, it's in the doc</p>",
        "id": 256312426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633465145
    },
    {
        "content": "<p>Support for try this is a bit wonky, I wrote it very early on -- but right now you can hit <code>&lt;LocalLeader&gt;t</code> (from the Lean source file) to replace the first one</p>",
        "id": 256312460,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633465150
    },
    {
        "content": "<p>It doesn't replace the correct thing</p>",
        "id": 256312536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633465174
    },
    {
        "content": "<p>Yeah, sometimes the parsing is wrong though so if it starts to annoy you (as it often annoys me), complain :) and I'll try to make time to make it better.</p>",
        "id": 256312543,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633465178
    },
    {
        "content": "<p>Right, sorry :/</p>",
        "id": 256312558,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633465184
    },
    {
        "content": "<p>I had a <code>squeeze_simp at this</code> and it kept the <code>at this</code> (which became duplicated)</p>",
        "id": 256312622,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633465204
    },
    {
        "content": "<p>in those cases I do the hacky thing, I just go into the infoview window, yank the right thing, and replace, and then curse at the bad parsing code</p>",
        "id": 256312665,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633465218
    },
    {
        "content": "<p>(The vscode extension has some heuristics which essentially are what's needed to port to Lua)</p>",
        "id": 256312925,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633465340
    },
    {
        "content": "<p>Do you sometimes see <code>Error executing vim.schedule lua callback: ...t_nvimHd0Pv1/usr/share/nvim/runtime/lua/vim/lsp/util.lua:1052: Failed to switch to buffer 26</code> when trying to jump to definition?</p>",
        "id": 256313671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633465627
    },
    {
        "content": "<p>I haven't seen that error personally -- how often does it happen? I take it not every time?</p>",
        "id": 256314428,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633465952
    },
    {
        "content": "<p>I'm currently in a state where it happens every time</p>",
        "id": 256314706,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633466073
    },
    {
        "content": "<p>restarting vim fixed it</p>",
        "id": 256314789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633466112
    },
    {
        "content": "<p>OK -- <a href=\"https://github.com/neovim/neovim/pull/12262\">https://github.com/neovim/neovim/pull/12262</a> possibly looks like the most relevant issue</p>",
        "id": 256314857,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633466152
    },
    {
        "content": "<p>But if it happens again I guess we can see what to do about it</p>",
        "id": 256314942,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633466179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256307116\">said</a>:</p>\n<blockquote>\n<p>By the way, in case we still have a couple of VScode users, I recently found the \"Error lens\" extension which makes errors <em>much</em> easier to spot.</p>\n</blockquote>\n<p>Very nice, thanks for mentioning this!</p>",
        "id": 256314976,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1633466199
    },
    {
        "content": "<p>But now you should switch to vim</p>",
        "id": 256315578,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633466457
    },
    {
        "content": "<p>You know that I'm on windows, right? How could you imagine I would switch to vim? :-)</p>",
        "id": 256316061,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1633466669
    },
    {
        "content": "<p>It's never too late to redeem</p>",
        "id": 256316114,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633466700
    },
    {
        "content": "<p>But I already redeemed, removing my double boot Ubuntu/Windows and switching back fulltime to Windows.</p>",
        "id": 256316214,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1633466752
    },
    {
        "content": "<p>Ah, but there is WSL to bring you back to linux</p>",
        "id": 256319245,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633468103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> Thank you so much for all your efforts! This seems to be working very nicely.</p>",
        "id": 256395631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633520000
    },
    {
        "content": "<p>My next job will be to figure out how to do LSP stuff. (E.g., <code>gd</code> doesn't do go-to-definition for me, atm.)</p>",
        "id": 256395678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633520032
    },
    {
        "content": "<p>But that should be orthogonal to the lean plugin, right?</p>",
        "id": 256395726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633520044
    },
    {
        "content": "<p>I think you need to set up your own mappings:</p>\n<div class=\"codehilite\" data-code-language=\"VimL\"><pre><span></span><code><span class=\"nb\">nnoremap</span> gD <span class=\"p\">&lt;</span><span class=\"nb\">Cmd</span><span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.declaration<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"nb\">gd</span> <span class=\"p\">&lt;</span><span class=\"nb\">Cmd</span><span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.definition<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> K <span class=\"p\">&lt;</span><span class=\"nb\">Cmd</span><span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.hover<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>leader<span class=\"p\">&gt;</span>K <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.diagnostic.show_line_diagnostics{show_header <span class=\"p\">=</span> false}<span class=\"p\">&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> gi <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.implementation<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>C<span class=\"p\">-</span><span class=\"k\">k</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.signature_help<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span><span class=\"k\">wa</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.add_workspace_folder<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span>wr <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.remove_workspace_folder<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span>wl <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> print<span class=\"p\">(</span><span class=\"k\">vim</span>.inspect<span class=\"p\">(</span><span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.list_workspace_folders<span class=\"p\">()))&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span>D <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.type_definition<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span>rn <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.rename<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span>ca <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.code_action<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"k\">gr</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.references<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span><span class=\"k\">e</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.diagnostic.show_line_diagnostics<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> [<span class=\"k\">d</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.diagnostic.goto_prev<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> ]<span class=\"k\">d</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.diagnostic.goto_next<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span><span class=\"k\">q</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.diagnostic.set_loclist<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n<span class=\"nb\">nnoremap</span> <span class=\"p\">&lt;</span>space<span class=\"p\">&gt;</span><span class=\"k\">f</span> <span class=\"p\">&lt;</span>cmd<span class=\"p\">&gt;</span><span class=\"k\">lua</span> <span class=\"k\">vim</span>.<span class=\"nb\">lsp</span>.<span class=\"k\">buf</span>.formatting<span class=\"p\">()&lt;</span>CR<span class=\"p\">&gt;</span>\n</code></pre></div>",
        "id": 256396253,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633520333
    },
    {
        "content": "<p>I should have taken notes yesterday but I think it's not too late. When I'll be back home I'll try to precisely write down everything I did to make it work.</p>",
        "id": 256397690,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633521163
    },
    {
        "content": "<p>Thanks, I'll also play around some more.</p>",
        "id": 256398506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633521601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> that would be super helpful of course. Feel free to stick them in the wiki perhaps too, which right now only has one page: <a href=\"https://github.com/Julian/lean.nvim/wiki/Configuring-&amp;-Extending\">https://github.com/Julian/lean.nvim/wiki/Configuring-&amp;-Extending</a></p>",
        "id": 256403004,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633523785
    },
    {
        "content": "<p>What is the idiomatic way to close the hover popups?</p>",
        "id": 256415091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633528540
    },
    {
        "content": "<p>&lt;c-w&gt;-c should work for now, though we plan to add a mapping for this</p>",
        "id": 256417409,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1633529356
    },
    {
        "content": "<p><code>:q</code> also worked, but it seemed a bit barbaric</p>",
        "id": 256417490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633529390
    },
    {
        "content": "<p>Also note that this won’t work well (and neither will :q) if you try it two or more times in a row in nested tooltips, since it could plop you in any window at that point. I’ve been using the experimental hop.nvim integration recently so just noticed this myself.</p>\n<p>So yeah a mapping to properly exit tooltips is certainly much needed…</p>",
        "id": 256419159,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1633530029
    },
    {
        "content": "<p>In the meantime perhaps your best bet for lean 3 is probably just to use the “x” button</p>",
        "id": 256419492,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1633530158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Just pushed, <code>Shift-Tab</code> should now do it for ya</p>",
        "id": 256438290,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1633536665
    },
    {
        "content": "<p>Oh. I was going to make Shift+Tab move backwards through tooltips.</p>",
        "id": 256438952,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633536924
    },
    {
        "content": "<p>Yeah I think that's what this does? It doesn't actually close it, just moves you to its parent.</p>",
        "id": 256439331,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1633537066
    },
    {
        "content": "<p>Aha, ok lemme give it a shot myself then, cool.</p>",
        "id": 256439418,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633537093
    },
    {
        "content": "<p>My notes about what I did yesterday:</p>\n<h2>nvim</h2>\n<p>Install a recent nvim by going to <a href=\"https://github.com/neovim/neovim/releases\">https://github.com/neovim/neovim/releases</a><br>\ndownload <code>nvim.appimage</code> (version 0.5.1) put it somewhere where my shell can<br>\nfind it and make it executable.</p>\n<h2>node Lean server</h2>\n<p>Install Node + npm and the node package lean-language-server</p>\n<p>I use <a href=\"https://github.com/nvm-sh/nvm\">https://github.com/nvm-sh/nvm</a> to manage node version so I could simply run</p>\n<p><code>npm install -g lean-language-server</code></p>\n<h2>vim plugins</h2>\n<p>I use <a href=\"https://github.com/tpope/vim-pathogen\">https://github.com/tpope/vim-pathogen</a> to manage my vim packages so<br>\nI went to <code>$HOME/.config/nvim/bundle/</code> and ran</p>\n<ul>\n<li><code>git clone https://github.com/hrsh7th/nvim-compe.git</code></li>\n<li><code>git clone https://github.com/nvim-lua/plenary.nvim.git</code></li>\n<li><code>git clone https://github.com/neovim/nvim-lspconfig.git</code></li>\n<li><code>git clone https://github.com/Julian/lean.nvim.git</code></li>\n</ul>\n<h2>Configuration files</h2>\n<p><code>$HOME/.config/nvim/plugin/</code>, create a file <code>lean.lua</code> containing</p>\n<div class=\"codehilite\" data-code-language=\"Lua\"><pre><span></span><code><span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">completeopt</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'menuone'</span><span class=\"p\">,</span> <span class=\"s1\">'noselect'</span> <span class=\"p\">}</span>\n\n<span class=\"nb\">require</span><span class=\"s1\">'compe'</span><span class=\"p\">.</span><span class=\"n\">setup</span><span class=\"p\">{</span>\n  <span class=\"n\">autocomplete</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">nvim_lsp</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">priority</span> <span class=\"o\">=</span> <span class=\"mi\">99</span> <span class=\"p\">},</span>\n    <span class=\"n\">nvim_lua</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">priority</span> <span class=\"o\">=</span> <span class=\"mi\">99</span> <span class=\"p\">},</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">priority</span> <span class=\"o\">=</span> <span class=\"mi\">99</span> <span class=\"p\">},</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">-- You may want to reference the nvim-lspconfig documentation, found at:</span>\n<span class=\"c1\">-- https://github.com/neovim/nvim-lspconfig#keybindings-and-completion</span>\n<span class=\"c1\">-- The below is just a simple initial set of mappings.</span>\n<span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">on_attach</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">bufnr</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">buf_set_keymap</span><span class=\"p\">(...)</span> <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">nvim_buf_set_keymap</span><span class=\"p\">(</span><span class=\"n\">bufnr</span><span class=\"p\">,</span> <span class=\"p\">...)</span> <span class=\"kr\">end</span>\n    <span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">buf_set_option</span><span class=\"p\">(...)</span> <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">nvim_buf_set_option</span><span class=\"p\">(</span><span class=\"n\">bufnr</span><span class=\"p\">,</span> <span class=\"p\">...)</span> <span class=\"kr\">end</span>\n    <span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">cmd</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">cmd</span><span class=\"p\">)</span>\n    <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">nvim_buf_set_keymap</span><span class=\"p\">(</span>\n      <span class=\"n\">bufnr</span><span class=\"p\">,</span>\n      <span class=\"n\">mode</span><span class=\"p\">,</span>\n      <span class=\"n\">key</span><span class=\"p\">,</span>\n      <span class=\"s1\">'&lt;cmd&gt;lua '</span> <span class=\"o\">..</span> <span class=\"n\">cmd</span> <span class=\"o\">..</span> <span class=\"s1\">'&lt;CR&gt;'</span><span class=\"p\">,</span>\n      <span class=\"p\">{</span><span class=\"n\">noremap</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n      <span class=\"kr\">end</span>\n    <span class=\"n\">buf_set_keymap</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'gd'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;Cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">noremap</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">})</span>\n    <span class=\"n\">buf_set_keymap</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'K'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;Cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">noremap</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">})</span>\n    <span class=\"n\">buf_set_option</span><span class=\"p\">(</span><span class=\"s1\">'omnifunc'</span><span class=\"p\">,</span> <span class=\"s1\">'v:lua.vim.lsp.omnifunc'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;leader&gt;n'</span><span class=\"p\">,</span> <span class=\"s1\">'vim.lsp.diagnostic.goto_next{popup_opts = {show_header = false}}'</span><span class=\"p\">)</span>\n    <span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;leader&gt;q'</span><span class=\"p\">,</span> <span class=\"s1\">'vim.lsp.diagnostic.set_loclist()'</span><span class=\"p\">)</span>\n    <span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;leader&gt;r'</span><span class=\"p\">,</span> <span class=\"s1\">'vim.lsp.buf.rename()'</span><span class=\"p\">)</span>\n    <span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;leader&gt;K'</span><span class=\"p\">,</span> <span class=\"s1\">'vim.lsp.diagnostic.show_line_diagnostics{show_header = false}'</span><span class=\"p\">)</span>\n    <span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;leader&gt;N'</span><span class=\"p\">,</span> <span class=\"s1\">'vim.lsp.diagnostic.goto_prev{popup_opts = {show_header = false}}'</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n\n<span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"s1\">'lean'</span><span class=\"p\">).</span><span class=\"n\">setup</span><span class=\"p\">{</span>\n    <span class=\"n\">abbreviations</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">builtin</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"p\">},</span>\n    <span class=\"n\">lsp</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">on_attach</span> <span class=\"o\">=</span> <span class=\"n\">on_attach</span> <span class=\"p\">},</span>\n    <span class=\"n\">lsp3</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">on_attach</span> <span class=\"o\">=</span> <span class=\"n\">on_attach</span> <span class=\"p\">},</span>\n    <span class=\"n\">mappings</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">lsp</span><span class=\"p\">.</span><span class=\"n\">handlers</span><span class=\"p\">[</span><span class=\"s2\">\"textDocument/publishDiagnostics\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">lsp</span><span class=\"p\">.</span><span class=\"n\">with</span><span class=\"p\">(</span>\n  <span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">lsp</span><span class=\"p\">.</span><span class=\"n\">diagnostic</span><span class=\"p\">.</span><span class=\"n\">on_publish_diagnostics</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"n\">underline</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"n\">virtual_text</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">spacing</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"p\">},</span>\n    <span class=\"n\">update_in_insert</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"p\">})</span>\n</code></pre></div>\n<p>in <code>$HOME/.config/nvim/after/ftplugin/</code>, create <code>lean3.vim</code> containing</p>\n<div class=\"codehilite\" data-code-language=\"VimL\"><pre><span></span><code><span class=\"k\">hi</span> LspReferenceRead cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermbg<span class=\"p\">=</span><span class=\"k\">red</span> guibg<span class=\"p\">=</span>LightYellow\n<span class=\"k\">hi</span> LspReferenceText cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermbg<span class=\"p\">=</span><span class=\"k\">red</span> guibg<span class=\"p\">=</span>LightYellow\n<span class=\"k\">hi</span> LspReferenceWrite cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermbg<span class=\"p\">=</span><span class=\"k\">red</span> guibg<span class=\"p\">=</span>LightYellow\n<span class=\"k\">hi</span> LspDiagnosticsDefaultError cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermfg<span class=\"p\">=</span>Red\n<span class=\"k\">hi</span> LspDiagnosticsDefaultWarning cterm<span class=\"p\">=</span><span class=\"nb\">bold</span> ctermfg<span class=\"p\">=</span>Yellow\n<span class=\"k\">hi</span> LspDiagnosticsDefaultInformation ctermfg<span class=\"p\">=</span>Blue\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineError <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineWarning <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineInformation <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> LspDiagnosticsUnderlineHint <span class=\"k\">gui</span><span class=\"p\">=</span>undercurl\n<span class=\"k\">hi</span> link SpecialChar Character\n\n<span class=\"k\">set</span> signcolumn<span class=\"p\">=</span>yes\n</code></pre></div>",
        "id": 256457660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633543931
    },
    {
        "content": "<p>Julian, feel free to steal any of this for your documentation (or tell me I messed up).</p>",
        "id": 256458194,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633544110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256313671\">said</a>:</p>\n<blockquote>\n<p>Do you sometimes see <code>Error executing vim.schedule lua callback: ...t_nvimHd0Pv1/usr/share/nvim/runtime/lua/vim/lsp/util.lua:1052: Failed to switch to buffer 26</code> when trying to jump to definition?</p>\n</blockquote>\n<p>I found a way to reproduce with 100% failure: ask to lint a file and then try to go to definition:<br>\n<a href=\"/user_uploads/3121/Mm_PxsLJaBArDYh5LEtlVPxE/bug_gd.gif\">bug_gd.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Mm_PxsLJaBArDYh5LEtlVPxE/bug_gd.gif\" title=\"bug_gd.gif\"><img src=\"/user_uploads/3121/Mm_PxsLJaBArDYh5LEtlVPxE/bug_gd.gif\"></a></div>",
        "id": 256460409,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633544888
    },
    {
        "content": "<p>It would be nice to have markdown syntax highlighting in comments</p>",
        "id": 256461945,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633545398
    },
    {
        "content": "<p>How do you restart the lean server when it goes crazy?</p>",
        "id": 256463593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633545984
    },
    {
        "content": "<p>And when it dies I see <code>(node:581156) UnhandledPromiseRejectionWarning: server is not alive </code> but don't get the option to restart it</p>",
        "id": 256465796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633546792
    },
    {
        "content": "<p>The linting trick is far from being the only way to trigger the jump to bug, it happens really really often</p>",
        "id": 256467700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633547535
    },
    {
        "content": "<p>Thanks Patrick. At first glance definitely nothing messed up in it!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256463593\">said</a>:</p>\n<blockquote>\n<p>How do you restart the lean server when it goes crazy?</p>\n</blockquote>\n<p><code>:LspRestart</code> should work I believe. (or sometimes <code>:e</code> to just re-edit the current file).</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256461945\">said</a>:</p>\n<blockquote>\n<p>It would be nice to have markdown syntax highlighting in comments</p>\n</blockquote>\n<p>We had this and disabled it, I forgot why -- maybe just while we were decommisioning the old <code>lean.vim</code> plugin. I'll have to remind myself.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256467700\">said</a>:</p>\n<blockquote>\n<p>The linting trick is far from being the only way to trigger the jump to bug, it happens really really often</p>\n</blockquote>\n<p>Does that lint trick work in any file? I notice the one you're showing is some local changes right? When I try that on my machine in the version from the mathlib repo I can't reproduce :( even if I switch to using 0.5.0 (normally I use nightly), but we can try staring at the code to see what's happening, I don't have ideas yet.</p>",
        "id": 256470431,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633548636
    },
    {
        "content": "<p>Yes, I was obviously editing a file. I'll try on master</p>",
        "id": 256470697,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633548737
    },
    {
        "content": "<p>Yes, it works on master</p>",
        "id": 256471066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633548894
    },
    {
        "content": "<p>I mean the bug is there on master</p>",
        "id": 256471098,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633548908
    },
    {
        "content": "<p>OK, that's \"good\" in some sense, though I can't reproduce here on that file, it works fine on my machine -- let me see what to do about debugging,  unless someone else either can reproduce or has an idea.</p>",
        "id": 256471308,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633549016
    },
    {
        "content": "<p>:version                                                                                                                                                                                                   <br>\nNVIM v0.5.1<br>\nBuild type: RelWithDebInfo<br>\nLuaJIT 2.1.0-beta3<br>\nCompilation: /usr/bin/gcc-11 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -DNVIM_TS_HAS_SET_MATCH_LIMIT -O2 -g -Og -g -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -Wshadow -Wconversion -<br>\nWmissing-prototypes -Wimplicit-fallthrough -Wvla -fstack-protector-strong -fno-common -fdiagnostics-color=always -DINCLUDE_GENERATED_DECLARATIONS -D_GNU_SOURCE -DNVIM_MSGPACK_HAS_FLOAT32 -DNVIM_UNIBI_HAS_VAR_FRO<br>\nM -DMIN_LOG_LEVEL=3 -I/home/runner/work/neovim/neovim/build/config -I/home/runner/work/neovim/neovim/src -I/home/runner/work/neovim/neovim/.deps/usr/include -I/usr/include -I/home/runner/work/neovim/neovim/build<br>\n/src/nvim/auto -I/home/runner/work/neovim/neovim/build/include<br>\nCompilé par runner@fv-az87-829</p>\n<p>Features: +acl +iconv +tui</p>",
        "id": 256471355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633549043
    },
    {
        "content": "<p>(Also reenabling markdown syntax seems to make neovim segfault ugh. So that probably is the reason why we disabled it. I doubt we looked at why that's happening in too much detail though.)</p>",
        "id": 256471377,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633549056
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>It would be nice to have markdown syntax highlighting in comments<br>\nWe had this and disabled it, I forgot why -- maybe just while we were decommisioning the old <code>lean.vim</code> plugin. I'll have to remind myself.</p>\n</blockquote>\n</blockquote>\n<p>I removed it intentionally.  We got lots of highlighting errors where the markdown syntax extended beyond the end of the comment.  My plan is to copy a small and hopefully safe set of highlighting rules from the markdown syntax file.  I just haven't gotten around to it yet.<br>\n(We have to do the same thing in the vscode extension.  If we use the default vscode markdown highlighting, then some markdown highlighting extends beyond the end of the comment, even more than it does now.  So we have a custom copy of the markdown syntax in the vscode extension where half of the rules are disabled.)</p>",
        "id": 256471561,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633549146
    },
    {
        "content": "<p>Ah.. fair enough, sounds good.</p>",
        "id": 256472141,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633549387
    },
    {
        "content": "<p>Patrick given I don't have a better idea for the minute but found another vaguely similar <a href=\"https://github.com/ray-x/lsp_signature.nvim/issues/1#issuecomment-828107304\">bug report</a>, can you perhaps confirm whether you still see the issue on nightly? You can find an appimage of it at the bottom of the page here: <a href=\"https://github.com/neovim/neovim/actions/runs/1310512839\">https://github.com/neovim/neovim/actions/runs/1310512839</a></p>",
        "id": 256474233,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633550216
    },
    {
        "content": "<p>At least the lint trick no longer triggers the bug!</p>",
        "id": 256475045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633550499
    },
    {
        "content": "<p>OK yeah I'm somewhat suspicious it's an 0.5 race condition... perhaps that will hold you off at least for a few days using the nightly and seeing whether you can get it to happen there too.</p>",
        "id": 256475470,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633550662
    },
    {
        "content": "<p>I don't mind using the nightly, I put it in place of the 0.5.1 version that I downloaded yesterday</p>",
        "id": 256475660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633550745
    },
    {
        "content": "<p>Great!</p>",
        "id": 256475745,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633550767
    },
    {
        "content": "<p>This is really cool! I'd like to make one bug report though: when tab-expanding backslash abbreviations the cursor doesn't go to the end of a sequence of bytes. For example: <code>\\</code> + <code>&lt;</code> + <code>TAB</code> results in my cursor ending up in the middle of the <code>⟨</code>, and continuing to type produces garbage like <code>鿢ꡡ</code> (that is <code>&lt;e2&gt;&lt;9f&gt;a&lt;a8&gt;</code>, apparently)</p>",
        "id": 256612055,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633625769
    },
    {
        "content": "<p>However, the issue is not a big deal to me and I'll probably switch (back) from <img alt=\":emacs:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/17846.png\" title=\"emacs\"> to <img alt=\":neovim:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/23103.png\" title=\"neovim\"> soon :D</p>",
        "id": 256612358,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633625892
    },
    {
        "content": "<p>First, hooray! Thanks, glad you're enjoying. The bug report is unfortunately known, I tried to fix it and failed (even though I kind of partially fixed it) -- <a href=\"https://github.com/Julian/lean.nvim/issues/89\">https://github.com/Julian/lean.nvim/issues/89</a></p>",
        "id": 256614364,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633626584
    },
    {
        "content": "<p>I can try to give it another shot sometime soon but I'm still half-underwater with non-lean-related work so I don't know it'll be \"immediately\". But I know the cause, it's annoying differences in unicode-using APIs and screen-character using APIs.</p>",
        "id": 256614502,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633626629
    },
    {
        "content": "<p>The other workaround by the way is to not hit tab -- which my fingers really hate so it doesn't really work for me, but if you manage to just keep typing and not manually expand the expansion and let it autoexpand, your cursor position should be OK.</p>",
        "id": 256615580,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633627059
    },
    {
        "content": "<p>Patrick by the way I put your notes with only small modifications here: <a href=\"https://github.com/Julian/lean.nvim/wiki/Getting-Started\">https://github.com/Julian/lean.nvim/wiki/Getting-Started</a> and we probably can use that as a place to put some more improvement suggestions.</p>",
        "id": 256619421,
        "sender_full_name": "Julian Berman",
        "timestamp": 1633628547
    },
    {
        "content": "<p>I'm trying to set up <code>lean.nvim</code> using nix home-manager. It is not added to nixpkgs yet which means I need to set it up myself.</p>",
        "id": 257541334,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1634220557
    },
    {
        "content": "<p>I don't use home-manager, though I know others do -- but if you either need a change to the repo to support that setup or have done so yourself and can contribute it it'd definitely be welcome.</p>",
        "id": 257543781,
        "sender_full_name": "Julian Berman",
        "timestamp": 1634221452
    },
    {
        "content": "<p>GitHub copilot support for neovim landed an early version today -- <a href=\"https://github.com/github/copilot.vim\">https://github.com/github/copilot.vim</a> -- I didn't bother personally signing up for Copilot yet, but if anyone else did, do let me know if you try it out with lean.nvim (the two wouldn't really interact I suspect, so behavior should be roughly the same as using Copilot in VSCode)</p>",
        "id": 259310457,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635370700
    },
    {
        "content": "<p>There's also tabnine support here -- <a href=\"https://github.com/tzachar/cmp-tabnine\">https://github.com/tzachar/cmp-tabnine</a> which I also have not yet tried with Lean, but should also work the same as in VSCode.</p>",
        "id": 259310519,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635370729
    },
    {
        "content": "<p>I followed what <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> indicated, <br>\n<a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/256457660\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/lean.2Envim/near/256457660</a>, with the following variations.</p>\n<p><strong>nvim</strong>. I use <a href=\"http://brew\">https://brew.sh/</a> on MacOS, hence  just add to type <code>brew install nvim</code>.</p>\n<p><strong>npm</strong>. I </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">brew</span> <span class=\"n\">install</span> <span class=\"n\">npm</span>\n<span class=\"n\">npm</span> <span class=\"n\">install</span> <span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">language</span><span class=\"bp\">-</span><span class=\"n\">server</span>\n</code></pre></div>",
        "id": 259443424,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1635450978
    },
    {
        "content": "<p><code>brew install lua</code> shouldn't be necessary</p>",
        "id": 259447319,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635452817
    },
    {
        "content": "<p>I put a version of Patrick's notes here: <a href=\"https://github.com/Julian/lean.nvim/wiki/Getting-Started\">https://github.com/Julian/lean.nvim/wiki/Getting-Started</a> -- <del>but let me modify it for macOS as well quickly</del> done</p>",
        "id": 259447374,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635452851
    },
    {
        "content": "<p>Can you have a look at that perhaps and tell me if what's there helps you get started? Or if not please do feel free to modify anything there (or keep putting it here and I'll do so!)</p>",
        "id": 259447421,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635452877
    },
    {
        "content": "<p>I can see perhaps <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> that you may be having issues because you may have put those things in <code>~/.vim</code> instead of <code>~/.config/nvim</code> which is where neovim files generally go, but not sure if that was a typo perhaps</p>",
        "id": 259448050,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635453225
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> for looking it up. Everything was in <code>~/.nvim</code> except for <code>pathogen.vim</code> which was in <code>~/.vim/autoload</code>, but I pushed it in <code>~/.nvim</code>. In any case, I still have the following error messages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Erreur</span> <span class=\"n\">d</span><span class=\"bp\">é</span><span class=\"n\">tect</span><span class=\"bp\">é</span><span class=\"n\">e</span> <span class=\"n\">en</span> <span class=\"n\">traitant</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">chambert</span><span class=\"bp\">/.</span><span class=\"n\">config</span><span class=\"bp\">/</span><span class=\"n\">nvim</span><span class=\"bp\">/</span><span class=\"n\">plugin</span><span class=\"bp\">/</span><span class=\"n\">lean.lua</span> <span class=\"o\">:</span>\n<span class=\"n\">E5113</span><span class=\"o\">:</span> <span class=\"n\">Error</span> <span class=\"n\">while</span> <span class=\"n\">calling</span> <span class=\"n\">lua</span> <span class=\"n\">chunk</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">chambert</span><span class=\"bp\">/.</span><span class=\"n\">config</span><span class=\"bp\">/</span><span class=\"n\">nvim</span><span class=\"bp\">/</span><span class=\"n\">plugin</span><span class=\"bp\">/</span><span class=\"n\">lean.lua</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"bp\">'</span><span class=\"n\">compe'</span> <span class=\"n\">not</span> <span class=\"n\">found</span><span class=\"o\">:</span>\n        <span class=\"n\">no</span> <span class=\"n\">field</span> <span class=\"n\">package.preload</span><span class=\"o\">[</span><span class=\"bp\">'</span><span class=\"n\">compe'</span><span class=\"o\">]</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'./</span><span class=\"n\">compe.lua'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">Cellar</span><span class=\"bp\">/</span><span class=\"n\">luajit</span><span class=\"bp\">-</span><span class=\"n\">openresty</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">20210510</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">luajit</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">beta3</span><span class=\"bp\">/</span><span class=\"n\">compe.lua'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">compe.lua'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">compe</span><span class=\"bp\">/</span><span class=\"n\">init.lua'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">Cellar</span><span class=\"bp\">/</span><span class=\"n\">luajit</span><span class=\"bp\">-</span><span class=\"n\">openresty</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">20210510</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">compe.lua'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">Cellar</span><span class=\"bp\">/</span><span class=\"n\">luajit</span><span class=\"bp\">-</span><span class=\"n\">openresty</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">20210510</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">compe</span><span class=\"bp\">/</span><span class=\"n\">init.lua'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'./</span><span class=\"n\">compe.so'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">compe.so'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">Cellar</span><span class=\"bp\">/</span><span class=\"n\">luajit</span><span class=\"bp\">-</span><span class=\"n\">openresty</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">20210510</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">compe.so'</span>\n        <span class=\"n\">no</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lua</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">loadall.so'</span>\n</code></pre></div>\n<p>I woud guess that <code>pathogen</code> is not loded…</p>",
        "id": 259449083,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1635453710
    },
    {
        "content": "<p>Possibly -- Make sure you mean <code>~/.config/nvim</code> again, not <code>~/.nvim</code>?</p>",
        "id": 259450322,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635454359
    },
    {
        "content": "<p><code>:scriptnames</code> will tell you whether pathogen loaded <code>compe</code></p>",
        "id": 259450381,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635454388
    },
    {
        "content": "<p>and if you don't mind editorializing, I would personally not really recommend you use pathogen</p>",
        "id": 259450396,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635454400
    },
    {
        "content": "<p>Tim Pope is a genius, and pathogen is great -- but if you're just starting I don't see why you'd want to use it, plug is way easier to use</p>",
        "id": 259450424,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635454421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>  (Headed out for a bit but yeah let me know if that still doesn't fix it, I do want to make sure this is as easy and clear as possible!)</p>",
        "id": 259450554,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635454483
    },
    {
        "content": "<p>FWIW: <a href=\"https://github.com/NixOS/nixpkgs/pull/143923\">https://github.com/NixOS/nixpkgs/pull/143923</a> :)</p>",
        "id": 259807015,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1635712517
    },
    {
        "content": "<p>I've tried a basic setup for a nix flake build, but got some errors: <a href=\"https://github.com/Julian/lean.nvim/issues/192\">https://github.com/Julian/lean.nvim/issues/192</a></p>",
        "id": 260267246,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1636031627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433842\">Anders Christiansen Sørby</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/260267246\">said</a>:</p>\n<blockquote>\n<p>I've tried a basic setup for a nix flake build, but got some errors: <a href=\"https://github.com/Julian/lean.nvim/issues/192\">https://github.com/Julian/lean.nvim/issues/192</a></p>\n</blockquote>\n<p>As <span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> noticed, some dependencies are minimal for this plugin: <a href=\"https://github.com/NixOS/nixpkgs/pull/144282\">https://github.com/NixOS/nixpkgs/pull/144282</a></p>",
        "id": 260291497,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1636041537
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/3jVepOWt6k6o_69p5KCMQUvY/recording-2021-11-16_09.33.42.mp4\">recording-2021-11-16_09.33.42.mp4</a> </p>\n<p>Introducing: state diffs! This makes it a bit easier to see what changes from one state to the next. Specifically, you can place down a \"diff pin\" that is diff'ed against the current state, and we also have an \"auto diff pin\" mode (which I'm using here) to make the diff pin automatically trail the cursor so that if you're precise enough about your motions it will immediately show you the diff from the previous tactic.</p>\n<p>This just uses vim's built-in text-based diff functionality, so it can get messy (as you saw near the end there). I expect we'd eventually have something more precise for Lean 4. And as always you can take this as a call for beta testers, let us know if you find any bugs!</p>",
        "id": 261679647,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1637085133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Figured I should let you know that I don't think I'll be reviewing or working much on the plugin for at least the next few weeks (unless I think of a hot new feature that helps me a lot with Lean 3) since I need to focus on getting some first formalizations into mathlib for my Master's thesis project (planning to formalize Judea Pearl's results connecting probability and graph theory). So feel free to take over for now and @ me if you're hopelessly lost on any of my code haha... And also happy new year!!</p>",
        "id": 267310357,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1641668838
    },
    {
        "content": "<p>Happy New Year! Yeah I figured you were deep in thesis land given you're usually responding with solutions before I finish figuring out what a problem is :D -- good luck, sounds good.</p>",
        "id": 267310513,
        "sender_full_name": "Julian Berman",
        "timestamp": 1641669057
    },
    {
        "content": "<p>So far not lost! Getting my bearings.</p>",
        "id": 267310520,
        "sender_full_name": "Julian Berman",
        "timestamp": 1641669067
    },
    {
        "content": "<p>(I guess a good sign of that is I haven't brutally broken anything in my mashing yet, at least to the best of what I can tell. Hopefully not chopping things up too bad.)</p>",
        "id": 267310584,
        "sender_full_name": "Julian Berman",
        "timestamp": 1641669169
    },
    {
        "content": "<p>First, I <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> this plugin. Thanks for making it.</p>\n<p>Should I notice performance differences between the language server in nvim and vs code?</p>",
        "id": 272424484,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1645202473
    },
    {
        "content": "<p>Glad to hear it! I'm not aware of any specific ones but if you have one in front of you do share and we can look into it</p>",
        "id": 272455895,
        "sender_full_name": "Julian Berman",
        "timestamp": 1645217639
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> 's whims and my <del>newfound unemployment</del> insomnia, we now have tactic highlighting. How precisely it looks will depend on your color scheme, but e.g. mine looks like:</p>\n<p><a href=\"/user_uploads/3121/PPtxWRGqpKm6Axa5luv6BIEZ/Screen-Shot-2022-03-14-at-06.46.59.png\">Screen-Shot-2022-03-14-at-06.46.59.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PPtxWRGqpKm6Axa5luv6BIEZ/Screen-Shot-2022-03-14-at-06.46.59.png\" title=\"Screen-Shot-2022-03-14-at-06.46.59.png\"><img src=\"/user_uploads/3121/PPtxWRGqpKm6Axa5luv6BIEZ/Screen-Shot-2022-03-14-at-06.46.59.png\"></a></div><p>Feedback of course welcome.</p>\n<p>If you want precisely what I see, you want <a href=\"https://github.com/Julian/dotfiles/blob/3e6054b74f813414e63534ff1fc57ffb8e13ae7d/.config/nvim/init.vim#L35\">this colorscheme</a> with <a href=\"https://github.com/Julian/dotfiles/blob/45c6608228301f99e6f79385e2f9a4da6eb0a652/.config/nvim/ftplugin/lean.lua#L19-L21\">this override for tactics color</a>.</p>",
        "id": 275219124,
        "sender_full_name": "Julian Berman",
        "timestamp": 1647254937
    },
    {
        "content": "<p>that looks absolutely gorgeous!</p>",
        "id": 275219348,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647255064
    },
    {
        "content": "<p>Could it be a different color from other classes of keywords, namely declaration keywords and <code>begin end</code>/<code>by</code>?</p>",
        "id": 275219393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647255099
    },
    {
        "content": "<p>Sorry, which ones from which ones Yaël -- make <code>begin/end by</code> different from <code>with</code>? Or something else?</p>",
        "id": 275219713,
        "sender_full_name": "Julian Berman",
        "timestamp": 1647255262
    },
    {
        "content": "<p>Going to drop support for neovim 0.5.1, which is really old, no longer supported upstream, and is randomly failing some test. I assume no one is using this (including not you anymore <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ?) but if that's not the case let me know.</p>",
        "id": 275414489,
        "sender_full_name": "Julian Berman",
        "timestamp": 1647368200
    },
    {
        "content": "<p>It has been some time since 0.6 was released, so this is fine with me.</p>",
        "id": 275414590,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647368238
    },
    {
        "content": "<p>Hi, many thanks to Julian et al. for this wonderful plugin! I have a question: is it possible to switch off the infoview updates in the insert mode? I tried to achieve this by removing a line containing <code>CursorMovedI</code> in <code>lua/lean/infoview.lua</code> by somehow it didn't make any difference...</p>",
        "id": 280684275,
        "sender_full_name": "Bartosz Piotrowski",
        "timestamp": 1651264140
    },
    {
        "content": "<p>Thanks for the kind words. At the minute there isn't one, though it should be easy to add, happy to do so -- would you mind elaborating on why you want to do it (not that it sounds like a bad idea at all, just want to make sure I understand the motivation in case there's something else we should add.). I know personally I find it really annoying sometimes that the infoview clears and shows \"processing\" while I'm typing, and would prefer it leave the last update so I can stare at it. Is that the reason?</p>",
        "id": 280691414,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651267740
    },
    {
        "content": "<p>Yes, this is the reason! Sometimes when I start writing a next tactic with arguments from the context and the context suddenly disappears from the screen, I have trouble remembering the names of the hypothesis I need. Then I need to remove what I wrote and start again (or move the cursor back, but this not always restores the previous state). Apart from that, I find this a bit distracting when the infoview changes with each keystroke. I believe some people like this immediate feedback but for me personally it would be much better to update only after I finish inserting a full command.</p>",
        "id": 280738234,
        "sender_full_name": "Bartosz Piotrowski",
        "timestamp": 1651327722
    },
    {
        "content": "<p>Understood -- OK. Let me think a small bit, I think the behavior I personally want is slightly different from \"don't update at all until you exit insert mode\", it's more like \"don't show errors until I stop typing for a bit, and never clear the infoview, just keep showing the last thing that was there until a new thing is ready\"</p>",
        "id": 280748076,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651341279
    },
    {
        "content": "<p>But this is definitely a reasonable request, and probably we can add something that lets both of us have what we want :)</p>",
        "id": 280748080,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651341294
    },
    {
        "content": "<p>In the vscode extension there is a button to pin the infoview to a fixed cursor location, does that exist in nvim yet?</p>",
        "id": 280748369,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651341647
    },
    {
        "content": "<p>Yes, we have pins (though honestly I still want to tweak how they work, which will require some discussing).</p>",
        "id": 280748457,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651341742
    },
    {
        "content": "<p>You can place one with <a href=\"https://github.com/Julian/lean.nvim/#mappings\"><code>&lt;localleader&gt;x</code></a>.</p>",
        "id": 280748471,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651341782
    },
    {
        "content": "<p>Feedback of course welcome on them.</p>",
        "id": 280748485,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651341808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/exact.2Fassumption.20timeout/near/270775485\">said</a>:</p>\n<blockquote>\n<p>That's the wrong place (lsp/_util), but sorry that the docs don't make this example clear. Right now you do this by:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lua\"><pre><span></span><code><span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"s1\">'lean'</span><span class=\"p\">).</span><span class=\"n\">setup</span><span class=\"p\">{</span>\n  <span class=\"c1\">-- whatever other options you set</span>\n  <span class=\"n\">lsp3</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'lean-language-server'</span><span class=\"p\">,</span> <span class=\"s1\">'--stdio'</span><span class=\"p\">,</span> <span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"s1\">'-M'</span><span class=\"p\">,</span> <span class=\"s1\">'4096'</span><span class=\"p\">,</span> <span class=\"s1\">'-T'</span><span class=\"p\">,</span> <span class=\"s1\">'3000000'</span> <span class=\"p\">},</span>\n    <span class=\"c1\">-- on_attach = on_attach or whatever else you set here</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is still the correct way to pass memory configuration to language server?</p>",
        "id": 280909811,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1651514313
    },
    {
        "content": "<p>Yep, it should be, and Tsvi was kind enough to add it <a href=\"https://github.com/Julian/lean.nvim/wiki/Configuring-&amp;-Extending#passing-arguments-to-the-lean-server-timeout-and-memory-settings\">here</a> as an explicit copyable example -- is it working for you?</p>",
        "id": 280910519,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651514580
    },
    {
        "content": "<p>Hmm. Let me try again and report back. Hopefully, it is user error.</p>",
        "id": 280910606,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1651514625
    },
    {
        "content": "<p>Success? Or failure?</p>",
        "id": 281012068,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651584299
    },
    {
        "content": "<p>It slightly annoys me when I need to tweak this myself, I kind of wish we had a separate <code>memory = whatever; timeout = whatever</code> table and then assembled the CLI on user behalf like vscode-lean does, but I think Gabriel had a comment somewhere on doing so that I'll have to dig up.</p>",
        "id": 281012267,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651584392
    },
    {
        "content": "<p>Ambiguous. I managed to crash the language server with the same memory/timeout settings that worked for vs code but I didn't investigate further. But before that performance seemed comparable.</p>",
        "id": 281016765,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1651586389
    },
    {
        "content": "<p>It's essentially just keeping parity with the recent VSCode PR thanks to Eric, but we've now got symbol searches in Lean 3 via the same code:</p>\n<p><a href=\"/user_uploads/3121/2eZAmDtBKxz83h2HTdEigcyc/screen.gif\">screen.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2eZAmDtBKxz83h2HTdEigcyc/screen.gif\" title=\"screen.gif\"><img src=\"/user_uploads/3121/2eZAmDtBKxz83h2HTdEigcyc/screen.gif\"></a></div><p>(This already works out of the box in Lean 4)</p>",
        "id": 289883751,
        "sender_full_name": "Julian Berman",
        "timestamp": 1658063380
    },
    {
        "content": "<p>Is there an easy way to search for/replace unicode? Generally I would have thought there was a plugin to search/replace based on a selection.</p>",
        "id": 295087273,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661360378
    },
    {
        "content": "<p>I haven't had a ton of time for lean the past two months given my new job (though hopefully things are calming a bit) -- which is to say expanding abbreviations in cmd mode is a feature that should be reasonably easy to implement but I haven't gotten time to do so yet</p>",
        "id": 295108939,
        "sender_full_name": "Julian Berman",
        "timestamp": 1661368088
    },
    {
        "content": "<p>In the interim the easiest thing is to use a register or copy paste :/</p>",
        "id": 295109260,
        "sender_full_name": "Julian Berman",
        "timestamp": 1661368224
    },
    {
        "content": "<p>(<code>:h i_^R</code> for the former if you need it)</p>",
        "id": 295109308,
        "sender_full_name": "Julian Berman",
        "timestamp": 1661368247
    },
    {
        "content": "<p>Thanks. No rush <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 295110237,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1661368588
    },
    {
        "content": "<p>OK, I made expanding abbreviations work at least in the cmdline window (even though it doesn't still with <code>/</code>). But the former means there's at least <em>an</em> easy way to search now. <code>:h q/</code> if you've never used it before, but basically type <code>q/</code> and you get a normal mode window you can type searches into, and which'll expand unicode abbreviations (as long as you enter it from a lean buffer). Feedback of course welcome. See the screencast if that's not enough info:</p>\n<p><a href=\"/user_uploads/3121/uRtAtUTzB5LERti6h1L9NIei/abbrev.gif\">abbrev.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/uRtAtUTzB5LERti6h1L9NIei/abbrev.gif\" title=\"abbrev.gif\"><img src=\"/user_uploads/3121/uRtAtUTzB5LERti6h1L9NIei/abbrev.gif\"></a></div>",
        "id": 295852196,
        "sender_full_name": "Julian Berman",
        "timestamp": 1661782276
    },
    {
        "content": "<p>A minor UX tweak which anyone using <code>lean.nvim</code> may have opinions on -- I'd like to make the cursor in the infoview window be on the (first) goal line by default, rather than at the top. The main reason is that for short infoviews the goal is often off to the bottom (and invisible without scrolling) which I find annoying, and especially so for vertical displays where the infoview can be short.</p>\n<p><a href=\"https://github.com/Julian/lean.nvim/pull/279/files\">https://github.com/Julian/lean.nvim/pull/279/files</a> is the PR if you care to try it out, or otherwise if you have an opinion on the behavior (especially if you don't like the proposed change) feel free to share.</p>",
        "id": 304341236,
        "sender_full_name": "Julian Berman",
        "timestamp": 1665946671
    },
    {
        "content": "<p>+1 for me. It’s easy to jump to the top of a buffer if needed.</p>",
        "id": 304342106,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1665947260
    },
    {
        "content": "<p>This sounds like a good change to me, I'm often annoyed by this in vscode too and have wondered if putting the goal at the top and ordering the hypotheses below it in order of last modified would be a better UX than the present default. Though I can see how this is confusing from a proof calculus perspective</p>",
        "id": 304348489,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665951575
    },
    {
        "content": "<p>Unfortunately changing the list order using pure CSS results in a broken widget display, so I never tried this order seriously for a long time, it can be very helpful though on long proofs though</p>",
        "id": 304348629,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665951675
    },
    {
        "content": "<p>In VScode you can control this using widgets. See <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/81f98837feab576e17053cc97623b404c019b9db\">https://github.com/leanprover-community/sphere-eversion/commit/81f98837feab576e17053cc97623b404c019b9db</a></p>",
        "id": 304348741,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665951759
    },
    {
        "content": "<p>Nice! And I just checked that it does work in nvim also <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> which one would hope given that thats the idea of widgets after all, but its good to be sure.</p>",
        "id": 304350856,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665953661
    },
    {
        "content": "<p>Can we add a (deduplicated version of) this to mathlib? E.g. As a tactic file that isn't allowed to be imported within mathlib (like omega), but people could import while working if they like. I think enough people would find it useful.</p>",
        "id": 304350999,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665953814
    },
    {
        "content": "<p>Is it possible to add as something accessible with <code>set_option</code>?</p>",
        "id": 304366907,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665970582
    },
    {
        "content": "<p>I've added a small section to the README on <a href=\"https://github.com/Julian/lean.nvim#semantic-highlighting\">enabling semantic highlighting in Lean 4</a> (even though support upstream is via a plugin rather than built-in to neovim for a bit longer).</p>\n<p>If you want to try it feel free to follow the instructions, and ask if you run into trouble (or edit the wiki, which is always welcome).</p>",
        "id": 313836624,
        "sender_full_name": "Julian Berman",
        "timestamp": 1670174920
    },
    {
        "content": "<p>Two minor <code>lean.nvim</code> tweaks -- I just attempted to copy the inaccessible hypothesis highlighting from VSCode, so now one should see something like:</p>\n<p><a href=\"/user_uploads/3121/QbMc_EYQBtCkCwokKZ-VyJxr/Screenshot-2023-07-04-at-17.03.52.png\">Screenshot-2023-07-04-at-17.03.52.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QbMc_EYQBtCkCwokKZ-VyJxr/Screenshot-2023-07-04-at-17.03.52.png\" title=\"Screenshot-2023-07-04-at-17.03.52.png\"><img src=\"/user_uploads/3121/QbMc_EYQBtCkCwokKZ-VyJxr/Screenshot-2023-07-04-at-17.03.52.png\"></a></div><p>If you don't like that, or want to tweak the colors, <code>leanInfoInaccessibleHyp</code> is the hilight group you want to touch (it's linked to <code>Comment</code> by default).</p>\n<p>And secondly there's now a simple <code>switch</code> for <code>sorry &lt;-&gt; exact?</code> in Lean 4 (as usual if anyone has suggestions for better switches, or for things in general, feel free to share).</p>",
        "id": 372342332,
        "sender_full_name": "Julian Berman",
        "timestamp": 1688483180
    },
    {
        "content": "<p>Is anybody else experiencing freezes in lean.nvim?<br>\nnot sure why it's happening to me, but it's fairly common after a few backward movement commands, from what i can tell.<br>\nI just haven't had time to track it down and wasn't sure if it was just me<br>\n(neovim completely shuts down, and won't respond to ^C or ^Z, and instead i have to SIGKILL it... it's really a huge pain working with lean like this)</p>",
        "id": 376743165,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1689788034
    },
    {
        "content": "<p>I have done some number of Lean hours greater than epsilon this week, which is more than the previous few months -- and have not experienced any, though in the past I recall sporadic times</p>",
        "id": 376743515,
        "sender_full_name": "Julian Berman",
        "timestamp": 1689788121
    },
    {
        "content": "<p>The usual advice I'd give is \"try a newer version and hope it works better\"</p>",
        "id": 376743583,
        "sender_full_name": "Julian Berman",
        "timestamp": 1689788141
    },
    {
        "content": "<p>(Newer version of nvim)</p>",
        "id": 376743611,
        "sender_full_name": "Julian Berman",
        "timestamp": 1689788149
    },
    {
        "content": "<p>Also check that you don't have any orphaned Lean processes in the background just in case</p>",
        "id": 376743975,
        "sender_full_name": "Julian Berman",
        "timestamp": 1689788229
    },
    {
        "content": "<p>I'm using the stable arch release of nvim (currently 0.9.1)<br>\nmaybe i'll try nightly</p>",
        "id": 376744486,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1689788350
    },
    {
        "content": "<p>Obviously if you can manage to reproduce anything please share.</p>",
        "id": 376744707,
        "sender_full_name": "Julian Berman",
        "timestamp": 1689788404
    },
    {
        "content": "<p>Next time it happens you can possibly also try stracing the process to see what the heck it's doing though if it won't respond to ^C there's a decent chance it won't attach either I guess</p>",
        "id": 376744808,
        "sender_full_name": "Julian Berman",
        "timestamp": 1689788435
    },
    {
        "content": "<p><a href=\"https://github.com/Julian/lean.nvim/issues/289\">lean.nvim#289</a> I still get this but have been too lazy to debug properly. If you find anything more out, I would love to hear. My guess is an extension conflict.</p>",
        "id": 376768821,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689794261
    },
    {
        "content": "<p>I now have a stack trace of this happening, but I don't see anything particularly useful (yet?). But my guess is something lower level in nvim that's broken, if anything the trace is saying it's perhaps stuck firing autocmds... Hrm.</p>",
        "id": 377058127,
        "sender_full_name": "Julian Berman",
        "timestamp": 1689873623
    },
    {
        "content": "<p>I see each typed character in nvim spinning up a new Lean thread (evident in system load monitoring). The time for the thread to finish depends very much on how complicated the currently edited proof is: long formulas with ambiguous types, search tactics, defeq challenges, etc. Spinning up enough uncompleted threads will quickly freeze nvim. Presumably some limited resource is being exhausted within nvim or Lean. A simple workaround is to put <code>/--</code> above the proof being edited (so each thread finishes quickly), and then remove the <code>/--</code> after editing to feed the proof to Lean.</p>",
        "id": 378928163,
        "sender_full_name": "D. J. Bernstein",
        "timestamp": 1690400894
    },
    {
        "content": "<p>I have this happening without editing the files. Often just moving quickly through the document is enough to trigger it for me.</p>",
        "id": 378928474,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690401006
    },
    {
        "content": "<p>I'll have a look at the code we're using to backoff sending infoview state requests, which presumably are the ones involved in either case, we fire them obviously anytime the cursor moves to get the new infoview state. I think we do have some sort of existing backoff there, but maybe outstanding requests aren't being cancelled, or something.</p>\n<p>(Thanks for the tip both of you.)</p>",
        "id": 378930395,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690401544
    },
    {
        "content": "<p>Note also that the LSP server merges several subsequent keystrokes into one edit that then gets processed by a single task, as long as the keystrokes happen in quick succession. The expected typing speed is configurable via the 'edit delay' option (passed through <a href=\"https://github.com/leanprover/vscode-lean4/blob/baa98358d0c748d98a00a6b8dde1b8f10029e358/vscode-lean4/src/leanclient.ts#L223\">here</a> in vsc-lean4). I'm not sure if lean.nvim exposes this, but it could help.</p>",
        "id": 378952171,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690407762
    },
    {
        "content": "<blockquote>\n<p>The expected typing speed is configurable via the 'edit delay' option (passed through here in vsc-lean4).</p>\n</blockquote>\n<p>I added a note for how you tweak this with <code>lean.nvim</code> <a href=\"https://github.com/Julian/lean.nvim#full-configuration--settings-information\">here</a> and have tweaked the value locally just to play around with it.</p>",
        "id": 379067175,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690448805
    },
    {
        "content": "<p>Much thanks for looking into this. I have had freezes ~10-20/day recently. I’ll test drive a higher delay today. Is 200 ms the default currently?</p>",
        "id": 379123332,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690458433
    },
    {
        "content": "<p>I'm somewhat skeptical it'll help honestly, though I'm trying to cause another freeze, and yeah sorry for the disruption, still no idea what's happening :/</p>",
        "id": 379123898,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690458522
    },
    {
        "content": "<p>The default is 200ms yeah. I dropped mine locally to 50ms (which definitely feels snappy :D) but in the past 10 minutes of randomly scrolling through and opening files I haven't managed to get something to freeze.</p>",
        "id": 379124067,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690458553
    },
    {
        "content": "<p>I’ll definitely be able to tell by the end of day if there is an effect</p>",
        "id": 379124796,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690458672
    },
    {
        "content": "<p>Not a single freeze at 50 ms today. Certainly possible it is a fluke but very, very encouraging.</p>",
        "id": 379334521,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690506285
    },
    {
        "content": "<p>just had my first freeze since changing to 50ms<br>\nit's still present but a lot rarer</p>",
        "id": 380516203,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1690846013
    },
    {
        "content": "<p>This is my sense also. I may try to drop it further.</p>",
        "id": 380516423,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690846115
    },
    {
        "content": "<p>Hrm, fascinating, ok yes let me know if lower is even better, though it'd still be quite confusing why VSCode doesn't run into issues, as I think its default is left at 200.</p>",
        "id": 380617084,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690881339
    },
    {
        "content": "<p>This is a bit surprising, lowering the delay will use <em>more</em> compute on the Lean side as your code is elaborated more often. But it sounds like the freezes are entirely on the nvim side rather than due to system overload. Perhaps nvim LSP expects notifications from the server to come more often than they actually do when the delay is higher.</p>",
        "id": 380755247,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690905290
    },
    {
        "content": "<p>I was thinking that it is overloading nvim in some way when all the lsp updates get sent at once. If so, I would also think that something similar would have been observed.</p>",
        "id": 380757050,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690905577
    },
    {
        "content": "<p>I have a lead on how to figure out <em>what</em> is freezing on the neovim side (it's nothing terribly intelligent, it's mostly \"sprinkle prints in the few places we might be blocking the event loop forever to see which one is the one we actually are in when things freeze\"), but I probably won't get to poking at it for another few days, so I'm quite glad regardless that this improves things for now</p>",
        "id": 380769603,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690907638
    },
    {
        "content": "<p>I've just installed the plugin, following the instructions in the <a href=\"https://github.com/Julian/lean.nvim/wiki/Getting-Started-From-the-Ground-Up\">Getting Started Wiki</a>. It's great!</p>\n<p>One question:</p>\n<p>When I do <code>&lt;Leader&gt;n</code>, I get the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>E5108: Error executing lua: /Users/xxx/.config/nvim/plugin/lean.lua:50: attempt to call field 'goto_next' (a nil value)\nstack traceback:\n    /Users/xxx/.config/nvim/plugin/lean.lua:50: in function &lt;/Users/xxx/.config/nvim/plugin/lean.lua:50&gt;\n</code></pre></div>\n<p><code>&lt;Leader&gt;n</code> should \"jump to the next Lean line with a diagnostic message\". I assume (perhaps incorrectly) that <code>#check</code> commands produce diagnostic messages. Here is my MNWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Nat.mul_assoc</span>\n<span class=\"k\">#check</span> <span class=\"n\">Nat.add_assoc</span>\n</code></pre></div>\n<p>What am I doing wrong?</p>\n<p>Setup: Lean 4 on an M2 MacBook.</p>",
        "id": 390357261,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1694453112
    },
    {
        "content": "<p><code>#check</code> indeed produces a diagnostic message, so it's probably not you that's done something wrong! Let's see...</p>",
        "id": 390358694,
        "sender_full_name": "Julian Berman",
        "timestamp": 1694453665
    },
    {
        "content": "<p>Ah the issue is that newer <code>nvim</code> renamed where that function lives.</p>",
        "id": 390358767,
        "sender_full_name": "Julian Berman",
        "timestamp": 1694453698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> I've just updated the section with the new names, can you try that again and let me know if it works for you</p>",
        "id": 390359061,
        "sender_full_name": "Julian Berman",
        "timestamp": 1694453809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> Thanks. That fixes things!</p>",
        "id": 390815010,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1694645444
    },
    {
        "content": "<p>The <code>sorry.fill</code> function doesn't work for Lean 4. Of course, one simple alternative is to remove the comma from \"{ sorry },\"</p>\n<p>However,  a cleaner style in Lean 4 is to use indentation for subgoals. I've written an alternative Lua function that seems to do the right thing. If that functionality is desirable, please let me know and I'll make a PR.</p>",
        "id": 392021362,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1695172315
    },
    {
        "content": "<p>The problem with my proposed function is that it ruins the Lean 3 behaviour.</p>",
        "id": 392021840,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1695172543
    },
    {
        "content": "<p>A PR would be great, though even better I think might be moving this functionality to Lean using the new code actions framework (which means it wouldn't just work in <code>lean.nvim</code>)</p>",
        "id": 392034492,
        "sender_full_name": "Julian Berman",
        "timestamp": 1695179343
    },
    {
        "content": "<p>(If it did stay in <code>lean.nvim</code> then casing on the filetype should handle the lean 3 vs 4 bit -- but yeah I suspect doing this as a code action is the right upgrade really)</p>",
        "id": 392034536,
        "sender_full_name": "Julian Berman",
        "timestamp": 1695179373
    },
    {
        "content": "<p>OK, for the moment, I've just done the simpler PR by modifying <code>sorry.fill</code>. The code checks <code>vim.bo.filetype</code> and takes appropriate action.</p>",
        "id": 392158514,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1695228936
    },
    {
        "content": "<p>TL;DR <code>lean.nvim</code> has a new <a href=\"https://github.com/Julian/lean.nvim#leannvim\">README demo</a>. Give feedback if you see anything missing or you'd like to see.</p>\n<p>This morning someone posted a thing[1] to HN that I've wished existed for years. Given it exists, of course the first thing to do is use it to re-write a new (Lean 4) demo for lean.nvim. You can find that in the README, or here below as a GIF:</p>\n<p><a href=\"/user_uploads/3121/Mu5wJDvuE_xSUFYw68aH4Mqo/demo.gif\">demo.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Mu5wJDvuE_xSUFYw68aH4Mqo/demo.gif\" title=\"demo.gif\"><img src=\"/user_uploads/3121/Mu5wJDvuE_xSUFYw68aH4Mqo/demo.gif\"></a></div><p>[1]: <a href=\"https://github.com/charmbracelet/vhs\">VHS</a>, a tool for writing \"scripts\" for video recordings of demos / usages of programs, which can be used to automatically regenerate screen recordings when you modify the script. Hooray! <code>lean.nvim</code>'s demo script <a href=\"https://github.com/Julian/lean.nvim/blob/main/demos/basic.tape\">now lives in the repo</a>.</p>",
        "id": 400348501,
        "sender_full_name": "Julian Berman",
        "timestamp": 1699151470
    },
    {
        "content": "<p>Wow, VHS is nice. <span aria-label=\"mind blown\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"mind blown\">:mind_blown:</span> Now we just need it for VSCode. :-)</p>",
        "id": 400350299,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699152372
    },
    {
        "content": "<p>Isn't it?</p>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> google says maybe <a href=\"https://github.com/microsoft/codetour\">https://github.com/microsoft/codetour</a> is a thing?!</p>",
        "id": 400351131,
        "sender_full_name": "Julian Berman",
        "timestamp": 1699152706
    },
    {
        "content": "<p>Interesting, thanks. Maybe one day I'll have time to try it. :-)</p>",
        "id": 400351393,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699152805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/Call.20for.20help.3A.20Loogle.20in.20VS.20Code/near/400395406\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Call.20for.20help.3A.20Loogle.20in.20VS.20Code/near/400383171\">said</a>:</p>\n<blockquote>\n<p>Just to make sure I'm not going to duplicate work: has someone here already started implementing this as a neovim telescope plugin?</p>\n</blockquote>\n<p>I have not yet though I certainly intended to both for Loogle and Moogle.</p>\n</blockquote>\n<p>Hm, well I guess I was gonna try either way because I've never written a nvim plugin before, I'm sure it will end up being quality software <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 400413413,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699208709
    },
    {
        "content": "<p>Well, I'm happy to help! Or see it be part of <code>lean.nvim</code>, or whatever is helpful.</p>",
        "id": 400415782,
        "sender_full_name": "Julian Berman",
        "timestamp": 1699210627
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/AHaoMHdgE-0TffZfF2otdwUT/image.png\">image.png</a><br>\nHigh tech feature <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AHaoMHdgE-0TffZfF2otdwUT/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/AHaoMHdgE-0TffZfF2otdwUT/image.png\"></a></div><p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> do you want me to PR this to lean.nvim or should it be a separate plugin?</p>",
        "id": 400428496,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699225010
    },
    {
        "content": "<p>Woohoo, well done. I'd love it in lean.nvim itself, seems like people like Loogle a lot (justifiably probably though I haven't gotten a chance to use it myself). But yeah let's stick it in!</p>",
        "id": 400430137,
        "sender_full_name": "Julian Berman",
        "timestamp": 1699226598
    },
    {
        "content": "<p>Okay I'll put that on my TODO list for tomorrow</p>",
        "id": 400430203,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699226649
    },
    {
        "content": "<p>As <code>require'lean.loogle'</code> probably, enablable/disablable via config, and probably on by default assuming there's no real dependencies in what you have</p>",
        "id": 400430225,
        "sender_full_name": "Julian Berman",
        "timestamp": 1699226688
    },
    {
        "content": "<p>I want to heart your comment but Android Zulip keeps jumping around when I try to click the emoji so consider this a heart.</p>",
        "id": 400430262,
        "sender_full_name": "Julian Berman",
        "timestamp": 1699226741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/Call.20for.20help.3A.20Loogle.20in.20VS.20Code/near/400430225\">said</a>:</p>\n<blockquote>\n<p>As <code>require'lean.loogle'</code> probably, enablable/disablable via config, and probably on by default assuming there's no real dependencies in what you have</p>\n</blockquote>\n<p>It needs plenary and telescope so it would add one dependency.</p>",
        "id": 400430472,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699226959
    },
    {
        "content": "<p>Plenary is already a dep</p>",
        "id": 400430676,
        "sender_full_name": "Julian Berman",
        "timestamp": 1699227148
    },
    {
        "content": "<p>For telescope yeah fair basically it should be enabled if the user has telescope and not otherwise</p>",
        "id": 400430682,
        "sender_full_name": "Julian Berman",
        "timestamp": 1699227175
    },
    {
        "content": "<p>But that's very minor to tweak if need be</p>",
        "id": 400430699,
        "sender_full_name": "Julian Berman",
        "timestamp": 1699227196
    },
    {
        "content": "<p>It may also be the case that your code might be able to use <code>vim.ui.select</code></p>",
        "id": 400430712,
        "sender_full_name": "Julian Berman",
        "timestamp": 1699227227
    },
    {
        "content": "<p>But I'll point that out on PR if so (and then it doesn't even depend on telescope!) unless you feel like looking at what that is if you don't already know</p>",
        "id": 400430762,
        "sender_full_name": "Julian Berman",
        "timestamp": 1699227255
    },
    {
        "content": "<p>13 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Call.20for.20help.3A.20Loogle.20in.20VS.20Code\">#general &gt; Call for help: Loogle in VS Code</a> by <span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span>.</p>",
        "id": 400451236,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699241610
    },
    {
        "content": "<blockquote>\n<p>I want to heart your comment but Android Zulip keeps jumping around when I try to click the emoji so consider this a heart.</p>\n</blockquote>\n<p><a href=\"https://github.com/zulip/zulip/issues/11448\">https://github.com/zulip/zulip/issues/11448</a>. I’m also less emphatic on the phone than I’d like to be.</p>",
        "id": 400501975,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699266301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> , could you add a nice <code>User-agent</code> to the request, possibly even with version information? It will be informative to see with which tools people use the loogle api.</p>",
        "id": 400503212,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699266724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/400503212\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> , could you add a nice <code>User-agent</code> to the request, possibly even with version information? It will be informative to see with which tools people use the loogle api.</p>\n</blockquote>\n<p><span aria-label=\"salute\" class=\"emoji emoji-1fae1\" role=\"img\" title=\"salute\">:salute:</span></p>",
        "id": 400520187,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699273380
    },
    {
        "content": "<p>Merged, it reports with a User-Agent of \"lean.nvim\" for now.</p>",
        "id": 400604164,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1699301865
    },
    {
        "content": "<p>Hello.</p>\n<p>I have pushed a \"fork\" of Mathlib4 which essentially swaps the VSCode GitPod out for .. <code>neovim</code> of course. It lives here: <a href=\"https://github.com/Julian/neomathlib\">https://github.com/Julian/neomathlib</a> (implementation note: all it does is modify the <code>.docker/gitpod/Dockerfile</code>from the mathlib4 repo).</p>\n<p>If you configure GitPod to clone your dotfiles, as I just did, then you end up with a surprisingly easily working environment with mathlib cache populated etc.. I guess that's what all the VSCode people have been raving about :). In slightly further detail -- pick \"Terminal\" as your environment (it's one of the options), then pick that repo as your workspace, then clone your dotfiles, and be sure you have lean.nvim as one of your plugins.</p>\n<p>There's nothing new here that's lean.nvim-specific other than \"it's in a browser\", but It looks like:</p>\n<p><a href=\"/user_uploads/3121/A-NTtegky1XOZjjh0ovz66fR/Screen-Recording-2023-11-26-at-4.03.09-PM.gif\">Screen-Recording-2023-11-26-at-4.03.09-PM.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/A-NTtegky1XOZjjh0ovz66fR/Screen-Recording-2023-11-26-at-4.03.09-PM.gif\" title=\"Screen-Recording-2023-11-26-at-4.03.09-PM.gif\"><img src=\"/user_uploads/3121/A-NTtegky1XOZjjh0ovz66fR/Screen-Recording-2023-11-26-at-4.03.09-PM.gif\"></a></div><p>If anyone finds this particularly useful I can automate updating Mathlib4 from the upstream repository so it stays permanently up to date -- and of course if anyone has ideas for how to make running this even more straightforward to use do let me know. I considered installing lean.nvim globally so it just works when you start it -- but the truth is you anyhow then need some personal settings, so it doesn't seem like it saves much. But willing to put some more thought in there if someone finds it useful.</p>",
        "id": 404290395,
        "sender_full_name": "Julian Berman",
        "timestamp": 1701032781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/404290395\">said</a>:</p>\n<blockquote>\n<p>I have pushed a \"fork\" of Mathlib4 which essentially swaps the VSCode GitPod out for .. <code>neovim</code> of course. It lives here: <a href=\"https://github.com/Julian/neomathlib\">https://github.com/Julian/neomathlib</a> (implementation note: all it does is modify the <code>.docker/gitpod/Dockerfile</code>from the mathlib4 repo).</p>\n</blockquote>\n<p>Is there any reason this has to be a fork and can't be upstreamed? it seems reasonable to include both neovim and vscode configuration in the mathlib4 gitpod</p>",
        "id": 407756433,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1702482740
    },
    {
        "content": "<p>How do people deal with Unicode delimiter pairs when editing Lean in Vim?</p>\n<p>For example, if you're in front of the text <code>exact Nat.le_trans ‹i ≤ _› ‹_ ≤ j›</code>, how would you go about changing the content within the angle brackets, given that they are the french angle brackets and <code>ci&lt;</code> won't work. The same goes for ⟨,⟩. I haven't found myself using other kinds of delimiters yet.</p>\n<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> have you thought about adding something in lean.nvim to help with this somehow?</p>\n<p>I use wellle/targets.vim and it is possible to extend the settings to deal with these delimiters. I don't think there are any built-in settings that can configure this. Also not sure it would make sense to add targets.vim as a dependency of lean.nvim.</p>",
        "id": 407770494,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1702486282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"668081\">Francisco Giordano</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/407770494\">said</a>:</p>\n<blockquote>\n<p>How do people deal with Unicode delimiter pairs when editing Lean in Vim?</p>\n<p>For example, if you're in front of the text <code>exact Nat.le_trans ‹i ≤ _› ‹_ ≤ j›</code>, how would you go about changing the content within the angle brackets, given that they are the french angle brackets and <code>ci&lt;</code> won't work. The same goes for ⟨,⟩. I haven't found myself using other kinds of delimiters yet.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> have you thought about adding something in lean.nvim to help with this somehow?</p>\n<p>I use wellle/targets.vim and it is possible to extend the settings to deal with these delimiters. I don't think there are any built-in settings that can configure this. Also not sure it would make sense to add targets.vim as a dependency of lean.nvim.</p>\n</blockquote>\n<p>We already set <code>matchpairs</code> for the structure literals -- I just added the assumption ones, whatever they're called.</p>\n<p>I use <code>vim-matchup</code> so for me that means I can use <code>ci%</code> to change between either of those -- I <em>suspect</em> targets.vim will have some equivalent text object because yeah, it's just a builtin vim option. But if not let me know and I can look into it.</p>",
        "id": 407773453,
        "sender_full_name": "Julian Berman",
        "timestamp": 1702487165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"382349\">Calvin Lee</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/407756433\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/404290395\">said</a>:</p>\n<blockquote>\n<p>I have pushed a \"fork\" of Mathlib4 which essentially swaps the VSCode GitPod out for .. <code>neovim</code> of course. It lives here: <a href=\"https://github.com/Julian/neomathlib\">https://github.com/Julian/neomathlib</a> (implementation note: all it does is modify the <code>.docker/gitpod/Dockerfile</code>from the mathlib4 repo).</p>\n</blockquote>\n<p>Is there any reason this has to be a fork and can't be upstreamed? it seems reasonable to include both neovim and vscode configuration in the mathlib4 gitpod</p>\n</blockquote>\n<p>That's a question for <span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> I guess, or perhaps <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> specifically who I think added the VSCode gitpod support -- certainly if you (and hopefully others) use it and want it it makes asking easier :D -- I also considered this but was hoping someone else would be the one to propose it.</p>\n<p>Mathlib folks are you ok with me merging that in and sending a PR (i.e. installing neovim too in the gitpod setup)?</p>",
        "id": 407773725,
        "sender_full_name": "Julian Berman",
        "timestamp": 1702487254
    },
    {
        "content": "<p>Does it make it any harder to use VSCode in gitpod? Or would this be completely transparent to VSCode users?</p>",
        "id": 407774135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702487389
    },
    {
        "content": "<p>It's completely transparent.</p>",
        "id": 407774361,
        "sender_full_name": "Julian Berman",
        "timestamp": 1702487458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/407773453\">said</a>:</p>\n<blockquote>\n<p>I <em>suspect</em> targets.vim will have some equivalent text object because yeah, it's just a builtin vim option. But if not let me know and I can look into it.</p>\n</blockquote>\n<p><code>%</code> works because it's default in vim. Though it might make sense to add <code>‹:›</code> as a pair too.</p>\n<p>I suppose for better integration with the other features of targets.vim I can just set it up in my config.</p>",
        "id": 407775174,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1702487761
    },
    {
        "content": "<p>I'm talking about the text object (which in matchup is set to <code>i%</code>) not just the navigation which is <code>%</code></p>",
        "id": 407775762,
        "sender_full_name": "Julian Berman",
        "timestamp": 1702487974
    },
    {
        "content": "<p>Looks like targets.vim doesn't respect that setting -- <a href=\"https://github.com/wellle/targets.vim/issues/130\">https://github.com/wellle/targets.vim/issues/130</a> and <a href=\"https://github.com/wellle/targets.vim/issues/169\">https://github.com/wellle/targets.vim/issues/169</a> -- I'd probably try to copy the code there to your config</p>",
        "id": 407776043,
        "sender_full_name": "Julian Berman",
        "timestamp": 1702488079
    },
    {
        "content": "<p>(It should really respect that setting, but however many years later that seems still open which is never a good sign)</p>",
        "id": 407776101,
        "sender_full_name": "Julian Berman",
        "timestamp": 1702488101
    },
    {
        "content": "<p>(PR for Gitpod: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9024\">https://github.com/leanprover-community/mathlib4/pull/9024</a> )</p>",
        "id": 407777018,
        "sender_full_name": "Julian Berman",
        "timestamp": 1702488431
    },
    {
        "content": "<p>Delegated</p>",
        "id": 407777250,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702488513
    },
    {
        "content": "<p>I haven't bothered setting up an <code>autocmd</code> to only run this in the Mathlib repo, but for anyone who works on Mathlib and might find it useful, <a href=\"https://github.com/Julian/dotfiles/commit/a3091b44a123931630c0241e1f836e7f4dd8e89b\">https://github.com/Julian/dotfiles/commit/a3091b44a123931630c0241e1f836e7f4dd8e89b</a> is how you run the Mathlib4 style checker using <a href=\"https://github.com/mfussenegger/nvim-lint\">nvim-lint</a> to catch style mistakes as you edit. I'll add it to the wiki whenever I get to doing the aforementioned autocmd'ing.</p>",
        "id": 417008274,
        "sender_full_name": "Julian Berman",
        "timestamp": 1705771308
    },
    {
        "content": "<p>Inspired by recent discussion on the emacs mode, I’d like to give lean.nvim another try. But the first thing I wanted to do doesn’t seem to work. I’d like to resize the info view but <code>Ctrl-w =</code> doesn’t seem to do anything. <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span></p>",
        "id": 423072363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708713034
    },
    {
        "content": "<p>Same here. Though resizing just the infoview with <code>Ctrl-w  &gt;</code>, etc. works fine.</p>",
        "id": 423073962,
        "sender_full_name": "Chris Henson",
        "timestamp": 1708713729
    },
    {
        "content": "<p>Also do you have an example config for semantic syntax highlighting? The default one is really not usable at all (or else there is something wrong with my config).</p>",
        "id": 423074031,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708713757
    },
    {
        "content": "<p>Nice! Your suggestions obviously are super welcome. For that one -- you want your infoview equal width obviously? We set <code>winfixwidth</code> so that infoview contents don't jump around as you open and close windows -- if you <em>do</em> want to use ^W=, you can first turn that off. I can add that as a config option to make that directly supported</p>",
        "id": 423074053,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708713765
    },
    {
        "content": "<p>In the immediate meantime you can use <code>lua vim.wo[require('lean.infoview').get_current_infoview().window].winfixwidth = false</code> and then ^W= should work again</p>",
        "id": 423074187,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708713834
    },
    {
        "content": "<p>Indeed this fixes the issue.</p>",
        "id": 423074382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708713916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423074031\">said</a>:</p>\n<blockquote>\n<p>Also do you have an example config for semantic syntax highlighting? The default one is really not usable at all (or else there is something wrong with my config).</p>\n</blockquote>\n<p>I only set one thing in mine it looks like -- <a href=\"https://github.com/Julian/dotfiles/blob/3fd4b990155547676c97a995191ef6b66bfa1286/.config/nvim/after/syntax/lean.lua#L1-L8\">https://github.com/Julian/dotfiles/blob/3fd4b990155547676c97a995191ef6b66bfa1286/.config/nvim/after/syntax/lean.lua#L1-L8</a> -- but it will depend on your theme. Try what I use for a moment, see if it's more correct -- I'm using kanagawa -- <a href=\"https://github.com/Julian/dotfiles/blob/3fd4b990155547676c97a995191ef6b66bfa1286/.config/nvim/lua/plugins/init.lua#L3-L12\">https://github.com/Julian/dotfiles/blob/3fd4b990155547676c97a995191ef6b66bfa1286/.config/nvim/lua/plugins/init.lua#L3-L12</a></p>",
        "id": 423074404,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708713925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423074382\">said</a>:</p>\n<blockquote>\n<p>Indeed this fixes the issue.</p>\n</blockquote>\n<p>OK, cool, I'll add an option in a bit which causes <code>lean.nvim</code> to not set that option, and presumably also you'd like the width/height to not be set at all so it starts off equal size? If so I'll just make it do that too.</p>",
        "id": 423074664,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708714020
    },
    {
        "content": "<p>The starting size question is really tricky because it depends a lot on your screen size.</p>",
        "id": 423075218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708714213
    },
    {
        "content": "<p>Right, there's an open issue to do this with percentages</p>",
        "id": 423075254,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708714232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> While you're here, is there a simple way to have the infoview automatically close when you close all of the buffers with <code>.lean</code> files?</p>",
        "id": 423075294,
        "sender_full_name": "Chris Henson",
        "timestamp": 1708714249
    },
    {
        "content": "<p>The syntax highlighting is still very weird, I will try your theme.</p>",
        "id": 423075314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708714262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"687698\">Chris Henson</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423075294\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> While you're here, is there a simple way to have the infoview automatically close when you close all of the buffers with <code>.lean</code> files?</p>\n</blockquote>\n<p>the \"robust way\" we haven't implemented yet because it's more complicated than it sounds -- but there's a simple way which will work that you can use which another contributor wrote out, one sec.</p>",
        "id": 423075359,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708714286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"687698\">@Chris Henson</span> try this by <span class=\"user-mention\" data-user-id=\"668081\">@Francisco Giordano</span> : <a href=\"https://github.com/Julian/lean.nvim/issues/43#issuecomment-1850633100\">https://github.com/Julian/lean.nvim/issues/43#issuecomment-1850633100</a> and please let me/us know if it works (well or otherwise)</p>",
        "id": 423075543,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708714358
    },
    {
        "content": "<p>I am hoping to have some more time for Lean in the next few weeks (part of my secret plan to merge it in <em>part</em> with my day job) -- but nag-driven-development is also very effective, so if you or anyone run into issues do complain.</p>",
        "id": 423075657,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708714424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423075543\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"687698\">Chris Henson</span> try this by <span class=\"user-mention silent\" data-user-id=\"668081\">Francisco Giordano</span> : <a href=\"https://github.com/Julian/lean.nvim/issues/43#issuecomment-1850633100\">https://github.com/Julian/lean.nvim/issues/43#issuecomment-1850633100</a> and please let me/us know if it works (well or otherwise)</p>\n</blockquote>\n<p>On first try it seems to work as expected, thank you! Your work on this plugin is much appreciated.</p>",
        "id": 423076354,
        "sender_full_name": "Chris Henson",
        "timestamp": 1708714706
    },
    {
        "content": "<p>I can confirm that changing to your theme gives more meaningful colors.</p>",
        "id": 423076794,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708714892
    },
    {
        "content": "<p>Great! Obviously the one I use I don't think is the only one that will work -- what you'd be looking for is some reasonably modern theme, because neovim 0.9 changed the name of highlight groups a bit, so the theme has to keep up</p>",
        "id": 423076886,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708714927
    },
    {
        "content": "<p>But before this I used to use <code>edge</code> and that worked fine too I think.</p>",
        "id": 423076904,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708714936
    },
    {
        "content": "<p>(if you want details on how to manually change colors we should obviously document that too...)</p>",
        "id": 423076969,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708714966
    },
    {
        "content": "<p>But it is also very dull and looses nice other things like thinner vertical lines separating buffers or removing the stupid tildes at the end of a buffer.</p>",
        "id": 423076979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708714972
    },
    {
        "content": "<p>I was using onedark</p>",
        "id": 423077018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708714993
    },
    {
        "content": "<p>that shouldn't be related, it's funny if a theme is messing with the latter at least</p>",
        "id": 423077030,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708714999
    },
    {
        "content": "<p>those are normal settings, which I guess the theme is changing on your behalf</p>",
        "id": 423077068,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708715014
    },
    {
        "content": "<p>I don't remember what the tilde one is called, it's the first thing everyone turns off, let's see...</p>",
        "id": 423077094,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708715025
    },
    {
        "content": "<p>Weird, it seems to be gone now.</p>",
        "id": 423077167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708715047
    },
    {
        "content": "<p>OK cool -- are you roughly in working shape then?</p>",
        "id": 423077245,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708715087
    },
    {
        "content": "<p>Yes it seems ok now. Thanks a lot for your help!</p>",
        "id": 423077387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708715153
    },
    {
        "content": "<p>Let me now try to <em>edit</em> code…</p>",
        "id": 423077466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708715172
    },
    {
        "content": "<p>Before I tried editing code for real I went to get some coffee. When I came back to my office I immediately noticed the CPU fan noise. It turns out nvim was using 100% of a CPU…</p>",
        "id": 423081244,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708716695
    },
    {
        "content": "<p>Was it compiling mathlib? Or doing nothing?</p>",
        "id": 423081728,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708716893
    },
    {
        "content": "<p>Doing nothing</p>",
        "id": 423086225,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708718659
    },
    {
        "content": "<p>Strange. Only thing I'd say is make sure you're up to date, and if it happens again we can maybe strace to see what the heck it's doing.</p>",
        "id": 423086922,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708718954
    },
    {
        "content": "<p>Ah wait sorry, we still haven't addressed <a href=\"https://github.com/Julian/lean.nvim/issues/289\">https://github.com/Julian/lean.nvim/issues/289</a>, which I forgot about -- after tweaking a lean setting I don't think any of us have encountered that in awhile, but we didn't change the default</p>",
        "id": 423087278,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708719113
    },
    {
        "content": "<p>I still think it probably sounds like a lean bug but I am not good enough at figuring out how to isolate it.</p>",
        "id": 423087371,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708719139
    },
    {
        "content": "<p>Anyways Patrick, try adding this: <a href=\"https://github.com/Julian/dotfiles/blob/main/.config/nvim/lua/plugins/lsp.lua#L245\">https://github.com/Julian/dotfiles/blob/main/.config/nvim/lua/plugins/lsp.lua#L245</a></p>",
        "id": 423087529,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708719217
    },
    {
        "content": "<p>(disabling editDelay)</p>",
        "id": 423087561,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708719237
    },
    {
        "content": "<p>If that makes it go away maybe I'll make it the default, this has been an issue for ages so may as well make it work out of the box</p>",
        "id": 423087765,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708719312
    },
    {
        "content": "<p>I have been living happily for a long time now with this as my setting</p>",
        "id": 423088218,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708719525
    },
    {
        "content": "<p>Ok, much as it makes me uncomfortable to change lean behavior, I trust your vote, will tweak it later</p>",
        "id": 423088483,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708719634
    },
    {
        "content": "<p>Ok I added the option, we’ll see whether this happens again.</p>",
        "id": 423089050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708719896
    },
    {
        "content": "<p>Julian, the video in the README is very frustrating because it shows many things you can do but then nothing in this README explain how to do them.</p>",
        "id": 423104629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708727190
    },
    {
        "content": "<p>For instance I don’t how to jump to definition. The obvious <code>gd</code> works in the info view but not in the main buffer.</p>",
        "id": 423104740,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708727247
    },
    {
        "content": "<p>A bit of that is because don't terribly want to document \"normal\" neovim things -- which I recognize makes it hard to get started if you don't already use \"normal\" neovim heavily, but your question basically applies to any language -- I am probably happy to answer how to do things if you have specific ones</p>",
        "id": 423105837,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708727862
    },
    {
        "content": "<p>For <code>gd</code>, that question is related to <a href=\"https://github.com/neovim/neovim/issues/24252\">https://github.com/neovim/neovim/issues/24252</a> -- which don't bother reading -- but basically it is still being worked on upstream whether default mappings will automatically be made for LSP things! Only <code>K</code> is automatically mapped right now</p>",
        "id": 423105906,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708727894
    },
    {
        "content": "<p>So in short, if you want a set of good mappings, here's what I use: <a href=\"https://github.com/Julian/dotfiles/blob/3fd4b990155547676c97a995191ef6b66bfa1286/.config/nvim/lua/plugins/lsp.lua#L18-L92\">https://github.com/Julian/dotfiles/blob/3fd4b990155547676c97a995191ef6b66bfa1286/.config/nvim/lua/plugins/lsp.lua#L18-L92</a></p>",
        "id": 423105953,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708727942
    },
    {
        "content": "<p>You can point to the documentation page of <code>lsp</code> for neovim which lists useful functions to bind.</p>",
        "id": 423105960,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708727946
    },
    {
        "content": "<p>I mean, in the docs for <code>lean.nvim</code>.</p>",
        "id": 423105979,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708727960
    },
    {
        "content": "<p>And to your config file as an example.</p>",
        "id": 423106006,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708727987
    },
    {
        "content": "<p>In particular the line that makes <code>gd</code> work is this one: <a href=\"https://github.com/Julian/dotfiles/blob/3fd4b990155547676c97a995191ef6b66bfa1286/.config/nvim/lua/plugins/lsp.lua#L25\">https://github.com/Julian/dotfiles/blob/3fd4b990155547676c97a995191ef6b66bfa1286/.config/nvim/lua/plugins/lsp.lua#L25</a> which is equivalent to <code>vim.keymap.set('n', 'gd', vim.lsp.buf.definition, { buffer = 0 })</code></p>",
        "id": 423106134,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708728053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423106006\">said</a>:</p>\n<blockquote>\n<p>And to your config file as an example.</p>\n</blockquote>\n<p>we do both of these already! It's not enough clearly though</p>",
        "id": 423106158,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708728069
    },
    {
        "content": "<p><a href=\"https://github.com/Julian/lean.nvim?tab=readme-ov-file#configuration--usage\">https://github.com/Julian/lean.nvim?tab=readme-ov-file#configuration--usage</a> and/or <a href=\"https://github.com/Julian/lean.nvim/wiki/Getting-Started-From-the-Ground-Up\">https://github.com/Julian/lean.nvim/wiki/Getting-Started-From-the-Ground-Up</a> in particular points you to the neovim docs, including a suggested setup</p>",
        "id": 423106219,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708728117
    },
    {
        "content": "<p>But I sympathize that it's hard to know that that's where you need to look if you don't know why something doesn't work</p>",
        "id": 423106277,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708728130
    },
    {
        "content": "<p>(All again to say if you have specific suggestions I'm all for helping)</p>",
        "id": 423106290,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708728141
    },
    {
        "content": "<p>Patrick let me know if you have other examples and I can try to either answer or document or both</p>",
        "id": 423106521,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708728291
    },
    {
        "content": "<p>Thanks. Part of the issue is that I recently tried to modernize my vim. In particular I try to use lua configuration files and there are many things I don’t understand. In particular I already have a line that tries to bind this but it doesn’t seem to work.</p>",
        "id": 423107806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708729127
    },
    {
        "content": "<p>Your dotfiles aren't public by chance are they? Make sure you're doing the mapping inside of the function that you pass to <code>lsp = { on_attach = THISFUNCTION } }</code></p>",
        "id": 423108132,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708729323
    },
    {
        "content": "<p>They are almost entirely the files from kickstart.vim</p>",
        "id": 423108218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708729375
    },
    {
        "content": "<p>Ah that's good, I want to show an example using kickstart.vim but haven't had the time to look at it</p>",
        "id": 423108248,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708729394
    },
    {
        "content": "<p>Actually on this computer I tried the variant <a href=\"https://github.com/dam9000/kickstart-modular.nvim\">https://github.com/dam9000/kickstart-modular.nvim</a></p>",
        "id": 423108374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708729471
    },
    {
        "content": "<p>In particular I have the lines <a href=\"https://github.com/dam9000/kickstart-modular.nvim/blob/master/lua/lsp-setup.lua#L23-L25\">https://github.com/dam9000/kickstart-modular.nvim/blob/master/lua/lsp-setup.lua#L23-L25</a></p>",
        "id": 423108411,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708729502
    },
    {
        "content": "<p>But still no bindings</p>",
        "id": 423108426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708729512
    },
    {
        "content": "<p>Are you passing that function to lean.nvim?</p>",
        "id": 423108459,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708729533
    },
    {
        "content": "<p>I can call the lsp function from command mode so this is definitely a binding issue.</p>",
        "id": 423108471,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708729542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423108459\">said</a>:</p>\n<blockquote>\n<p>Are you passing that function to lean.nvim?</p>\n</blockquote>\n<p>I don’t know how to do that, so probably no.</p>",
        "id": 423108548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708729574
    },
    {
        "content": "<p>I really know nothing about this lua world. I’ve been using vim for 20 years but not in this modern way.</p>",
        "id": 423108577,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708729601
    },
    {
        "content": "<p>Here's the short explanation</p>",
        "id": 423108615,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708729631
    },
    {
        "content": "<p>These lines in the example: <a href=\"https://github.com/dam9000/kickstart-modular.nvim/blob/master/lua/lsp-setup.lua#L71-L95\">https://github.com/dam9000/kickstart-modular.nvim/blob/master/lua/lsp-setup.lua#L71-L95</a> are trying to tell you \"enable whatever languages you use\"</p>",
        "id": 423108708,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708729697
    },
    {
        "content": "<p>But lean.nvim -- much like the rust plugin -- handle calling that on your behalf already</p>",
        "id": 423108725,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708729717
    },
    {
        "content": "<p>You essentially need to keep a reference to that on_attach function, and then pass it to lean.nvim when you call its setup</p>",
        "id": 423108771,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708729759
    },
    {
        "content": "<p>The cheap and easy way for right now is instead of <code>local on_attach</code>, do <code>_G.on_attach = function() ....</code></p>",
        "id": 423108789,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708729780
    },
    {
        "content": "<p>and now you have a global function called <code>_G.on_attach</code> -- then when you call <code>require('lean').setup{ ... }</code>, now you use <code>_G.on_attach</code> as your on_attach function</p>",
        "id": 423108868,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708729810
    },
    {
        "content": "<p>Does that make any sense, or do you want me to try to write it out a bit more specifically? If you paste how (or if) you're currently calling <code>lean.setup{}</code> that also might help.</p>",
        "id": 423108908,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708729851
    },
    {
        "content": "<p>I cannot get it to work. I think I will put my config on GitHub. It will be convenient to share it among my computers anyway.</p>",
        "id": 423109111,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708730014
    },
    {
        "content": "<p>I dumped everything on <a href=\"https://github.com/PatrickMassot/neovim_config\">https://github.com/PatrickMassot/neovim_config</a>. It features the whole kickstart repo which is maybe not very smart.</p>",
        "id": 423109446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708730248
    },
    {
        "content": "<p>I need to go anyway, but I’ll try again tonight.</p>",
        "id": 423109472,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708730273
    },
    {
        "content": "<p>It feels a lot more promising than last time I tried.</p>",
        "id": 423109527,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708730289
    },
    {
        "content": "<p>One thing I can already say is that having the infoview as an ordinary buffer is a bit annoying. It makes it more complicated to quit (I need a <code>:qa</code> when I really mean <code>:q</code>) and it messes up <code>:bp</code>.</p>",
        "id": 423109632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708730387
    },
    {
        "content": "<p>I have limited time tonight but will take a quick look now to see if I can just give you some hint.</p>",
        "id": 423109720,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708730439
    },
    {
        "content": "<blockquote>\n<p>One thing I can already say is that having the infoview as an ordinary buffer is a bit annoying. It makes it more complicated to quit (I need a :qa when I really mean :q) and it messes up :bp.</p>\n</blockquote>\n<p>The <code>:q</code> thing is obviously related to the <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423076354\">discussion above</a> -- you can use the same autocommand to have the infoview quit</p>",
        "id": 423109749,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708730460
    },
    {
        "content": "<p>(Which means then you won't need <code>:qa</code>)</p>",
        "id": 423109763,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708730467
    },
    {
        "content": "<p><code>:bp</code> I would simply recommend you never use honestly</p>",
        "id": 423109769,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708730474
    },
    {
        "content": "<p>Even if it's a bit of retraining muscles.</p>",
        "id": 423109780,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708730483
    },
    {
        "content": "<p>But the modern way is to use a fuzzy finder</p>",
        "id": 423109790,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708730489
    },
    {
        "content": "<p>(Telescope being the one that all the kids are excited about these last 5 years, so you may as well use it)</p>",
        "id": 423109806,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708730511
    },
    {
        "content": "<p>OK I got a few minutes to look -- you have it almost right but there is some issue with what order files are loading in, which is common.</p>\n<p>You can fix this in a crude way with:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/lua/lazy-plugins.lua b/lua/lazy-plugins.lua</span>\n<span class=\"gh\">index 5049773..6fe4300 100644</span>\n<span class=\"gd\">--- a/lua/lazy-plugins.lua</span>\n<span class=\"gi\">+++ b/lua/lazy-plugins.lua</span>\n<span class=\"gu\">@@ -215,7 +215,10 @@ require('lazy').setup({</span>\n<span class=\"w\"> </span>    -- see details below for full configuration options\n<span class=\"w\"> </span>    opts = {\n<span class=\"w\"> </span>      lsp = {\n<span class=\"gd\">-        on_attach = _G.on_attach,</span>\n<span class=\"gi\">+        on_attach = function(client, bufnr)</span>\n<span class=\"gi\">+          require('lsp-setup')</span>\n<span class=\"gi\">+          on_attach(client, bufnr)</span>\n<span class=\"gi\">+        end,</span>\n<span class=\"w\"> </span>        init_options = { editDelay = 0 },\n<span class=\"w\"> </span>      },\n<span class=\"w\"> </span>      mappings = true,\n</code></pre></div>\n<p>which seems to make things work here -- this <code>which-key</code> plugin which I've heard of but don't use kind of makes it a bit annoying to diagnose because it is messing with <code>gd</code> itself, but whatever -- I think just that change above will unblock you for now. Honestly I'm a bit disappointed at how slow this setup is that they start you with :/ but ok whatever, it has some decent plugins they're setting you up with at least.</p>\n<p>If the above doesn't help I can send a PR tomorrow.</p>",
        "id": 423116072,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708735333
    },
    {
        "content": "<p>It works, thanks!</p>",
        "id": 423190024,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708795583
    },
    {
        "content": "<p>(including the autocommand to close the infoview).</p>",
        "id": 423190735,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708796314
    },
    {
        "content": "<p>Great! I put in the default for <code>editDelay = 0</code>, so that now should be automatic. I will probably not do the width thing immediately, I want to think it through a bit, because I don't remember why everything works as it does with our window management (but I will do something at some point and let you know). Keep feedback coming.</p>",
        "id": 423200293,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708805271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> Is there a way to configure the infoview to advance manually instead of based on the current cursor position?</p>",
        "id": 423298481,
        "sender_full_name": "Chris Henson",
        "timestamp": 1708901699
    },
    {
        "content": "<p>Do you mean you want to pause updates to it, or to force it to update itself, or to have it show the state at a different cursor location, or choice D :)?</p>",
        "id": 423300468,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708903731
    },
    {
        "content": "<p>Or you mean you want it to not automatically update and only update when you tell it to?</p>",
        "id": 423300488,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708903759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423300488\">said</a>:</p>\n<blockquote>\n<p>Or you mean you want it to not automatically update and only update when you tell it to?</p>\n</blockquote>\n<p>This is what I meant. Only move the infoview to the current cursor position when you tell it to.</p>",
        "id": 423300694,
        "sender_full_name": "Chris Henson",
        "timestamp": 1708903984
    },
    {
        "content": "<p>Got it - you're aware of pins right? Just to be sure you're not doing this for that reason?</p>",
        "id": 423300821,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708904133
    },
    {
        "content": "<p>(i.e. because you want to watch what's happening at some other location)</p>",
        "id": 423300826,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708904149
    },
    {
        "content": "<p>I don't think I am, what are pins?</p>",
        "id": 423301038,
        "sender_full_name": "Chris Henson",
        "timestamp": 1708904350
    },
    {
        "content": "<p>Oh I see a description in the docs, let me try it out and see how it works.</p>",
        "id": 423301130,
        "sender_full_name": "Chris Henson",
        "timestamp": 1708904439
    },
    {
        "content": "<p>I see. Not what I meant, but the pins feature is very nice! I am curious how often/how you use the diff pins, they seem interesting.</p>\n<p>I still would sometimes prefer advancing the infoview manually. It is just an issue of preference, sometimes the constantly changing infoview is a bit hard on the eyes for my taste. I realize I can mostly get what I want with pausing/unpausing the infoview.</p>",
        "id": 423303105,
        "sender_full_name": "Chris Henson",
        "timestamp": 1708906308
    },
    {
        "content": "<p>No I was going to say exactly that (that I sometimes get annoyed at how spasmy the infoview is)</p>",
        "id": 423303537,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708906669
    },
    {
        "content": "<p>I'll fix that at some point, I've wanted to do it in a general way but I still haven't managed to do that, so I'll do the hacky one at some point, just so that it doesn't continuously flash back and forth and clear itself</p>",
        "id": 423303595,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708906699
    },
    {
        "content": "<p>Anyways, the answer for pausing is <code>lua require'lean.infoview'.pin_toggle_pause()</code></p>",
        "id": 423303719,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708906830
    },
    {
        "content": "<p>Which is really confusingly named, I thought I'd renamed that by now but guess not.</p>",
        "id": 423303730,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708906841
    },
    {
        "content": "<p>I don't think we bind a key to that by default but you can of course.</p>",
        "id": 423303742,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708906854
    },
    {
        "content": "<p>oh we do, it's &lt;localleader&gt;p</p>",
        "id": 423303756,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708906867
    },
    {
        "content": "<p>Yeah I tried that, it works well for me. I'm curious, if I bind calling that twice (to unpause and pause again) will it wait for things to run in-between, or potentially interrupt Lean?</p>",
        "id": 423304277,
        "sender_full_name": "Chris Henson",
        "timestamp": 1708907362
    },
    {
        "content": "<p>Are you doing that to implement the \"refresh the infoview now\" bit?</p>",
        "id": 423304428,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708907506
    },
    {
        "content": "<p>We should expose some function to do that if we don't already clearly.</p>",
        "id": 423304435,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708907518
    },
    {
        "content": "<p>But that should be fine</p>",
        "id": 423304450,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708907523
    },
    {
        "content": "<p>Yeah pretty much. Maybe not a robust way, but I think I might try it for a bit. Thanks again for the help! (Which in this case was a good reminder to read the docs haha)</p>",
        "id": 423304603,
        "sender_full_name": "Chris Henson",
        "timestamp": 1708907680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423074187\">said</a>:</p>\n<blockquote>\n<p>In the immediate meantime you can use <code>lua vim.wo[require('lean.infoview').get_current_infoview().window].winfixwidth = false</code> and then ^W= should work again</p>\n</blockquote>\n<p>What would be the syntax to put that in a config file? Currently the first thing I do whenever I open a Lean file is to search this is my command history.</p>",
        "id": 423497405,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708987604
    },
    {
        "content": "<p>The Hoskinson center bought me a giant screen for my office and it is very frustrating to have a super narrow infoview window.</p>",
        "id": 423497676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708987696
    },
    {
        "content": "<p>Create a file called <code>~/.config/nvim/after/plugin/leaninfo.lua</code> and put:</p>\n<div class=\"codehilite\" data-code-language=\"Lua\"><pre><span></span><code><span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">opt_local</span><span class=\"p\">.</span><span class=\"n\">winfixwidth</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n<span class=\"n\">vim</span><span class=\"p\">.</span><span class=\"n\">opt_local</span><span class=\"p\">.</span><span class=\"n\">winfixheight</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n</code></pre></div>\n<p>in it</p>",
        "id": 423498793,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708988107
    },
    {
        "content": "<p>You can also consider upping the <code>width</code> and <code>height</code> setting in your Lean setup settings, if all you want is a wider one and you don't specifically care about <code>^W=</code> in particular (let me know if you need syntax for that)</p>",
        "id": 423498894,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708988146
    },
    {
        "content": "<p>(And yeah we should definitely pick some width relative to your screen width -- I use a portrait monitor and my infoview is then on top not the side so this doesn't bother me otherwise probably I'd have fixed it already. I can try to get to it at some point.)</p>",
        "id": 423499075,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708988214
    },
    {
        "content": "<p>Oh that’s simple. I was afraid because of the <code>require('lean.infoview').get_current_infoview().window</code> bit.</p>",
        "id": 423500478,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708988719
    },
    {
        "content": "<p>Doesn’t seem to work.</p>",
        "id": 423500808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708988861
    },
    {
        "content": "<p>I am afraid something is messing with the way \"normal\" neovim works in that setup again :/ -- I'll have to look at the layout again.</p>",
        "id": 423501071,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708989008
    },
    {
        "content": "<p>Oh no, it's me who's a dum dum doing too many things at once.</p>",
        "id": 423501525,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708989285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <code>~/.config/nvim/after/ftplugin/leaninfo.lua</code> not <code>plugin</code></p>",
        "id": 423501562,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708989303
    },
    {
        "content": "<p>It works!</p>",
        "id": 423501869,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708989479
    },
    {
        "content": "<p>Great. Hopefully you see what that does.</p>",
        "id": 423501939,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708989499
    },
    {
        "content": "<p>Sure</p>",
        "id": 423501951,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708989509
    },
    {
        "content": "<p>And is there a way to avoid typing the ^w= at startup?</p>",
        "id": 423501994,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708989541
    },
    {
        "content": "<p>Add <code>vim.cmd.wincmd('=')</code> to the bottom of that file is a cheap way</p>",
        "id": 423502149,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708989628
    },
    {
        "content": "<p>Thanks, that’s a much better starting point.</p>",
        "id": 423502886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708990027
    },
    {
        "content": "<p>The README says there is some interactive widgets support but I don’t see anything. What is the current status? Even before displaying a widget, can you select things in the infoview?</p>",
        "id": 423504966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708991252
    },
    {
        "content": "<p>Yeah, move to the infoview window and press enter to \"click\" , and tab to move into the popup</p>",
        "id": 423507031,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708992364
    },
    {
        "content": "<p>Can gove more details tomorrow</p>",
        "id": 423507041,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708992371
    },
    {
        "content": "<p>This is not what I am talking about. I ask about the analogue of VSCode shift click.</p>",
        "id": 423517893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708999235
    },
    {
        "content": "<p>Yet more proof that nobody other than Patrick knows about this shift click thing :-)</p>",
        "id": 423555132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709022747
    },
    {
        "content": "<p>Maybe there should be a blog post about it? Although with this worrying development of Patrick switching from VS Code, maybe the fact that you can shift click on things will soon be lost in time...</p>",
        "id": 423555648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709022983
    },
    {
        "content": "<p>We'll document these more obscure VS Code features in a reasonable place in the future so that they are not lost to time and forgotten :-)<br>\nFor InfoView features specifically, we still have to look into whether implementing our own context menu for the InfoView is possible.</p>",
        "id": 423560447,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1709024339
    },
    {
        "content": "<p>Patrick yeah I don't know that I know what shift-click does, or when it does anything -- I just tried typing some random goal and shift clicking and I don't see things happening, can you share some example and tell me what it should do?</p>",
        "id": 423604900,
        "sender_full_name": "Julian Berman",
        "timestamp": 1709040145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423560447\">said</a>:</p>\n<blockquote>\n<p>We'll document these more obscure VS Code features in a reasonable place in the future so that they are not lost to time and forgotten :-)<br>\nFor InfoView features specifically, we still have to look into whether implementing our own context menu for the InfoView is possible.</p>\n</blockquote>\n<p>Yeah such a list would definitely help me have more parity with VSCode features.</p>",
        "id": 423605143,
        "sender_full_name": "Julian Berman",
        "timestamp": 1709040233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423604900\">said</a>:</p>\n<blockquote>\n<p>Patrick yeah I don't know that I know what shift-click does, or when it does anything -- I just tried typing some random goal and shift clicking and I don't see things happening, can you share some example and tell me what it should do?</p>\n</blockquote>\n<p>See <a href=\"https://drops.dagstuhl.de/storage/00lipics/lipics-vol268-itp2023/LIPIcs.ITP.2023.24/LIPIcs.ITP.2023.24.pdf\">https://drops.dagstuhl.de/storage/00lipics/lipics-vol268-itp2023/LIPIcs.ITP.2023.24/LIPIcs.ITP.2023.24.pdf</a> (section 3.2). Many widgets trigger only in a specific selection context.</p>",
        "id": 423610928,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1709042192
    },
    {
        "content": "<p>Aha.  I see the mechanics from there, thanks. Is there some widget in Mathlib I can use to test that out? Ideally one that doesn't target HTML output?</p>",
        "id": 423616743,
        "sender_full_name": "Julian Berman",
        "timestamp": 1709043841
    },
    {
        "content": "<p>This is the fundamental component of almost any widget whose purpose is not to draw a nice picture you can show in talks but never use for real.</p>",
        "id": 423623686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709045463
    },
    {
        "content": "<p>It is used by the <code>conv?</code> or calc widgets for instance.</p>",
        "id": 423623809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709045497
    },
    {
        "content": "<p>Yeah I've used it for <code>calc</code>. It's still a little-known feature though!</p>",
        "id": 423624449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709045651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423623809\">said</a>:</p>\n<blockquote>\n<p>It is used by the <code>conv?</code> or calc widgets for instance.</p>\n</blockquote>\n<p>Got it, OK, I suspect it's probably not too difficult to get working but I don't have time to look today, and probably it needs a small bit of thought for what the UI should be in nvim to replace shift+click. I guess some text objects to add regions to the ones you're selecting, and then some way to clear them, kind of like how the quickhl plugin works. But have to try to use the widgets to see. Maybe later in the week.</p>",
        "id": 423633471,
        "sender_full_name": "Julian Berman",
        "timestamp": 1709048081
    },
    {
        "content": "<p><code>suffices by</code> doesn't update the infoview properly. is this a lean.nvim issue?</p>\n<p>example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">h.left</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- cursor here</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">hq</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">And.right</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>putting the cursor in the line after <code>by</code> doesn't add <code>hq</code> as a hypothesis. it does immediately after <code>by</code> though</p>",
        "id": 423709485,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1709072608
    },
    {
        "content": "<p>This has been brought up also for VSCode, not just for lean.nvim.</p>",
        "id": 423710292,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709072966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423633471\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/lean.2Envim/near/423623809\">said</a>:</p>\n<blockquote>\n<p>It is used by the <code>conv?</code> or calc widgets for instance.</p>\n</blockquote>\n<p>Got it, OK, I suspect it's probably not too difficult to get working but I don't have time to look today, and probably it needs a small bit of thought for what the UI should be in nvim to replace shift+click. I guess some text objects to add regions to the ones you're selecting, and then some way to clear them, kind of like how the quickhl plugin works. But have to try to use the widgets to see. Maybe later in the week.</p>\n</blockquote>\n<p>I looked at this briefly this afternoon and I still don't quite see how it works in VSCode. I see which RPC method is used to get the available widgets, and added support for it to neovim, but I still don't see where the data on what is selected actually gets <em>sent</em> rather than just collected. Will see about having another look when I get some more spare cycles.</p>",
        "id": 424560738,
        "sender_full_name": "Julian Berman",
        "timestamp": 1709515265
    },
    {
        "content": "<p>I’m sure <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> or <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> can easily answer this question.</p>",
        "id": 424565119,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709518793
    },
    {
        "content": "<blockquote>\n<p>still don't see where the data on what is selected actually gets sent rather than just collected</p>\n</blockquote>\n<p>I'm not entirely clear on what you mean by 'sent' and 'collected'; in general, the selection (more or less an array of the selected terms) is passed as a prop to the main function of the JS code of each widget that is currently being displayed. Widgets can then choose to do whatever they want with it. A widget written with <code>mk_rpc_widget%</code>, such as <a href=\"https://github.com/leanprover-community/mathlib4/blob/52762e248fde90c70e53dbc0aa1cbd5ed2db7f96/Mathlib/Tactic/Widget/Conv.lean#L130\">the <code>conv</code> one</a>, will proceed to call the RPC method that was used to define said widget with the new selection data and then display the HTML reply.</p>",
        "id": 424566480,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1709519880
    },
    {
        "content": "<p>Aha I was afraid of that. So the actual data gets passed across the JavaScript boundary (to the thing that VSCode execs from getWidgetSource) rather than back to the server?</p>",
        "id": 424566944,
        "sender_full_name": "Julian Berman",
        "timestamp": 1709520147
    },
    {
        "content": "<p>If so that makes this nearly impossible to implement, or at least means it's time to head back to investigating embedding a JS engine :/</p>",
        "id": 424567004,
        "sender_full_name": "Julian Berman",
        "timestamp": 1709520188
    },
    {
        "content": "<p>Yep, the ability to run JS is pretty fundamental to some more sophisticated widgets. That said, any widgets implemented with <code>mk_rpc_widget%</code> will send the data right back to the server (<a href=\"https://github.com/leanprover-community/ProofWidgets4/blob/62483831f70341e0d2ac22de0cf7fbc46201210a/widget/src/ofRpcMethod.tsx\">here is the logic</a>) which you could theoretically reimplement in vim. Though it would be relying on an implementation detail that may change at any point :/</p>",
        "id": 424567288,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1709520387
    },
    {
        "content": "<p>Yeah I mean I certainly expected to run into this if I tried to integrate with \"fancy widget that renders a rubik's cube and lets you move it\", but less so for this where it seems like JS doesn't need to be involved at all</p>",
        "id": 424749271,
        "sender_full_name": "Julian Berman",
        "timestamp": 1709587199
    },
    {
        "content": "<p>Will have to put this on the back burner, I'm sure any of 1) try out a JS engine and/or shadow DOM in the background, 2) proceed down that implementation detail path or 3) try to special case the specific JS source code for <code>mk_rpc_widget%</code> is an avenue forward but it's not a \"hour and then it's working\" one. Will give it another shot though at some point. Thanks for the info.</p>",
        "id": 424749516,
        "sender_full_name": "Julian Berman",
        "timestamp": 1709587292
    },
    {
        "content": "<p>This is a long thread!   Is the idea that all lean.nvim questions and discussion should goes here?  I've been posting about lean.nvim in \"new members\", because I'm just figuring things out with my Lean config.</p>",
        "id": 426668735,
        "sender_full_name": "mars0i",
        "timestamp": 1710474049
    },
    {
        "content": "<p>I think either way is fine -- I occasionally stick small announcements in this one mostly so that people who don't care about nvim can have muted this thread, but yeah I don't think it's a problem if you create new ones.</p>",
        "id": 426720900,
        "sender_full_name": "Julian Berman",
        "timestamp": 1710500983
    },
    {
        "content": "<p>Random plugin tip which I just discovered myself last week. <code>aznhe21/actions-preview.nvim</code> is nice, it will show you previews of what a code action will do before you apply it (via telescope). Here for instance is what it shows for some simple <code>simp</code> try this replacement:</p>\n<p><a href=\"/user_uploads/3121/cp-Sd70K0uFvvwziZuKMRqhm/output.gif\">output.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cp-Sd70K0uFvvwziZuKMRqhm/output.gif\" title=\"output.gif\"><img src=\"/user_uploads/3121/cp-Sd70K0uFvvwziZuKMRqhm/output.gif\"></a></div>",
        "id": 427277376,
        "sender_full_name": "Julian Berman",
        "timestamp": 1710724314
    },
    {
        "content": "<p>With the update to lake in v4.8.0-rc1, I am getting some papercuts. </p>\n<p>For example, when jumping into a new file, I will still get a <code>Building ...</code> message which amusingly changes when moving the cursor. If I try to active the language server before it finishes, nvim freezes.</p>",
        "id": 437526307,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715113831
    },
    {
        "content": "<p>I also noticed weird behavior</p>",
        "id": 437526385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715113873
    },
    {
        "content": "<p>The building is not lean.nvim but <code>lake</code></p>",
        "id": 437526596,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715113958
    },
    {
        "content": "<p>So people are seeing this in VS Code also? I didn't notice any messages like that</p>",
        "id": 437526654,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715113989
    },
    {
        "content": "<p>I did not try in VSCode yet.</p>",
        "id": 437526710,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715114025
    },
    {
        "content": "<p>I don't know if they are seeing it in vscode but if you run <code>lake build</code> on the command line afte changing one file you will see that it spits out many build lines. This is a known <code>lake</code> regression, it is also known how this happens.</p>",
        "id": 437526840,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715114084
    },
    {
        "content": "<p>Oh</p>",
        "id": 437526864,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715114098
    },
    {
        "content": "<p>Note that <code>lake</code> is not actually building, it merely prints too early that it is bulding</p>",
        "id": 437526871,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715114101
    },
    {
        "content": "<p>Only to then notice that in fact, there is nothing to build</p>",
        "id": 437526923,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715114126
    },
    {
        "content": "<p>I also miss the cascading build output but that is off topic</p>",
        "id": 437527015,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715114171
    },
    {
        "content": "<p>I don't have any real time to dig into anything today but if there's consensus something needs looking into I'll try to have a look once things settle down a bit.</p>",
        "id": 437529648,
        "sender_full_name": "Julian Berman",
        "timestamp": 1715115424
    },
    {
        "content": "<p>It sounds like we wait for changes to lake for now</p>",
        "id": 437529924,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715115545
    },
    {
        "content": "<p>This is probably just user error, but I'm noticing that importing a file with a lot of trace output (e.g. <code>set_option trace.profiler true</code>) causes nvim to take up a huge amount of cpu power before the server can start building the file itself. I don't particularly care about the trace output of files I'm importing, so is there any way to hide this information and not have it slow down my nvim so much?</p>",
        "id": 439232661,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1715955390
    },
    {
        "content": "<p>That sounds like the sort of thing that shouldn't differ (<em>fingers crossed</em>) between nvim and VSCode (in the sense that I can't think of anything we'd particularly be doing for trace output different from any other retrieved state) -- can you check if you see similar behavior in VSCode perhaps?</p>",
        "id": 439239095,
        "sender_full_name": "Julian Berman",
        "timestamp": 1715957485
    },
    {
        "content": "<p>If the answer is no I can do some profiling to see what's up.</p>",
        "id": 439239222,
        "sender_full_name": "Julian Berman",
        "timestamp": 1715957519
    },
    {
        "content": "<p>Is this because <code>lake</code> is now more verbose on loading things in general?</p>",
        "id": 439239873,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715957690
    },
    {
        "content": "<p>Just tested this on VS Code and it doesn't seem (particularly) slow. I also didn't see any trace output in the infoview, only the <code>[1305/1306] Compiling Mathlib.Whatever.File</code>messages.</p>",
        "id": 439246602,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1715959752
    },
    {
        "content": "<p>Huh. Interesting. Does VSCode not show trace output at all? Or put it somewhere else?</p>",
        "id": 439248931,
        "sender_full_name": "Julian Berman",
        "timestamp": 1715960479
    },
    {
        "content": "<p>I can try to have a look but not before Sunday most likely.</p>",
        "id": 439248974,
        "sender_full_name": "Julian Berman",
        "timestamp": 1715960494
    },
    {
        "content": "<p>I also saw vim being completely frozen while lake is working, which never happened to me with VSCode.</p>",
        "id": 439249881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715960819
    },
    {
        "content": "<p>Things seem much better (and prettier!) with <code>v4.8.0-rc2</code></p>",
        "id": 440038678,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716365593
    },
    {
        "content": "<p>Are the freezes fixed?</p>",
        "id": 440046766,
        "sender_full_name": "Julian Berman",
        "timestamp": 1716368508
    },
    {
        "content": "<p>One data point but yes. I think the output from lake was overwhelming the buffer.</p>",
        "id": 440047010,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716368577
    },
    {
        "content": "<p>Interesting, OK, I wonder / worry whether the latter is some other (albeit less pressing) issue then.</p>",
        "id": 440047085,
        "sender_full_name": "Julian Berman",
        "timestamp": 1716368604
    },
    {
        "content": "<p>Have you ever looked at any gigantic traces and noticed similar issues?</p>",
        "id": 440047129,
        "sender_full_name": "Julian Berman",
        "timestamp": 1716368618
    },
    {
        "content": "<p>Maybe in the past. Those truncate the unfolding now so it’s less often you see a giant dump.</p>",
        "id": 440047503,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716368761
    },
    {
        "content": "<p>It appears that <code>vim.lsp.client</code> has had its fields rearranged. <code>get_language_id</code> moved out from under <code>config</code> and up to the same level directly under <code>client</code>. <a href=\"https://github.com/Julian/lean.nvim/pull/336\">https://github.com/Julian/lean.nvim/pull/336</a> </p>\n<p>Not sure how the tests are broken...</p>",
        "id": 440060589,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716373338
    },
    {
        "content": "<p>There's some other change in 0.10 that I haven't had a chance to look into... from what I saw in the half hour I gave it previously, it's something only broken in the tests, not in real life. So, the best kind of broken.</p>",
        "id": 440061385,
        "sender_full_name": "Julian Berman",
        "timestamp": 1716373651
    },
    {
        "content": "<p>We also seem to have no test for <code>restart_file</code> obviously which is how we don't notice that change, but that should hopefully be easy to add. I merged your PR for now, thanks for noticing!</p>",
        "id": 440061624,
        "sender_full_name": "Julian Berman",
        "timestamp": 1716373767
    },
    {
        "content": "<p>The build logs appear a lot faster indeed, that's very good! The trace output seems to be as slow as ever unfortunately. :(</p>",
        "id": 440084533,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1716382271
    },
    {
        "content": "<p>I forgot to say last time: In case it matters, I'm using <code>nvim-qt</code> under X11 on Arch Linux.</p>",
        "id": 440084603,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1716382298
    },
    {
        "content": "<p>Anne can you give me some simple-ish thing which reproduces the slowness for you, I can at least see if nvim profiling says anything useful</p>",
        "id": 440091089,
        "sender_full_name": "Julian Berman",
        "timestamp": 1716384217
    },
    {
        "content": "<p>Looks like putting a <code>set_option trace.profiler</code> true above any expensive file in Mathlib (i.e. one of the top files <a href=\"http://speed.lean-fro.org/mathlib4/run-detail/e7b27246-a3e6-496a-b552-ff4b45c7236e/1c61cabadc2fc201584b9597057da18f09db0489\">listed here</a> ordered by \"value\"), then importing it from a test file would work.</p>",
        "id": 440094836,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1716385327
    },
    {
        "content": "<p>Actually doing it with the most expensive file, <code>Mathlib.RingTheory.Kaehler,</code> takes a minute or so on my machine before it starts the actual trace output, so presumably you might want to try out a medium-slow file first.</p>",
        "id": 440094881,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1716385343
    },
    {
        "content": "<p>So explicit repro steps;</p>\n<ul>\n<li>Open a file in Mathlib (e.g. <code>Mathlib.RingTheory.Kaehler</code>)</li>\n<li>Add a line to the top <code>set_option trace.profiler true</code></li>\n<li>Don't close the buffer or run <code>lake build</code></li>\n<li>Make a new file <code>test.lean</code> with the contents:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib.RingTheory.Kaehler</span>\n\n<span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"... trace output done!\"</span>\n</code></pre></div>\n<ul>\n<li>See that vim displays the trace output on the <code>import</code> line extremely slowly.</li>\n</ul>",
        "id": 440095246,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1716385459
    },
    {
        "content": "<p>It don't see any trace output now but it is quite slow.</p>",
        "id": 440098090,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716386224
    },
    {
        "content": "<p>It seems very slow without the tracing though</p>",
        "id": 440098524,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716386331
    },
    {
        "content": "<p>I too see no trace output in <code>test.lean</code>. I happened to pick <code>Mathlib.Analysis.Calculus.ContDiff.Defs</code> -- on my machine here simply opening that file and waiting for it to finish processing / have the yellow bars disappear takes ~38.5 seconds (timed by hand) -- but that time is the same trying it a few times both in VSCode and neovim, so that's.. \"good\" at least.</p>",
        "id": 440298495,
        "sender_full_name": "Julian Berman",
        "timestamp": 1716462215
    },
    {
        "content": "<p>Next will try again with <code>set_option trace.profiler</code> and just see how long it takes, and assuming you're right that it's much slower in neovim will try to see if I can tell why.</p>",
        "id": 440298507,
        "sender_full_name": "Julian Berman",
        "timestamp": 1716462221
    },
    {
        "content": "<p>I hope this message affects precisely no one, but I have just removed Lean 3 support from lean.nvim to shed some lines of conditional code. There is a <code>lean3</code> git tag on the last commit containing Lean 3 support, should any future time traveller need Lean 3.<br>\n<code>lean.nvim</code>'s test suite passes, and a few minutes of manual playing seems to reveal nothing horridly broken, so I believe I've done the surgery correctly, but feel free to raise issues if anything seems amiss.</p>",
        "id": 443709322,
        "sender_full_name": "Julian Berman",
        "timestamp": 1718007512
    }
]