[
    {
        "content": "<p>I am using recursion to define a function <code>f</code> where one of its argument <code>a</code> is made implicit since it is not directly involved in the definition of <code>f</code>. Later on, I realize the data of <code>a</code> is necessary to prove this recursion terminates. </p>\n<p>My natural attempt was to try <code>termination_by @f ... =&gt; ...</code> to make <code>a</code> explicit. However, Lean returns an error and says \"expected '_' or identifier\" after <code>termination_by</code>.  I am wondering if there is a way to solve this issue? (I could return back and require <code>a</code> to be explicit, but it will be painful to modify the rest of the code).</p>",
        "id": 411540966,
        "sender_full_name": "Jin Wei",
        "timestamp": 1704577843
    },
    {
        "content": "<p>You can use <code>‹type_of_a›</code> where you would have used <code>a</code></p>",
        "id": 411541000,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704577895
    },
    {
        "content": "<p>A bit hazardous, but might work</p>",
        "id": 411541005,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704577902
    },
    {
        "content": "<p>I think the <code>termination_by</code> syntax doesn't care about implicit or explicit. Have you tried using the parameter? Maybe provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 411541129,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704578033
    },
    {
        "content": "<p>It does. I've had this problem before.</p>",
        "id": 411541209,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704578104
    },
    {
        "content": "<p>(the <code>f x y z</code> there isn't really a function application, more like a lambda and an identifier in case of mutual recursion)</p>",
        "id": 411541217,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704578115
    },
    {
        "content": "<p>Hmm, I'm still somewhat surprised, so likely I am misunderstanding the issue (or am simply wrong)</p>",
        "id": 411541278,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704578180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/termination_by.20.20needing.20implicit.20argument/near/411541000\">said</a>:</p>\n<blockquote>\n<p>You can use <code>‹type_of_a›</code> where you would have used <code>a</code></p>\n</blockquote>\n<p>Sorry that I don't quite follow. Could you please elaborate on this?</p>",
        "id": 411541705,
        "sender_full_name": "Jin Wei",
        "timestamp": 1704578565
    },
    {
        "content": "<p>You tried <code>termination_by @f a =&gt; g a</code>. Instead do <code>termination_by f =&gt; g ‹α›</code>, where <code>a : α</code>.</p>",
        "id": 411541737,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704578613
    },
    {
        "content": "<p>Can someone give me an example? I'm probably misunderstanding something, because<br>\n<a href=\"https://live.lean-lang.org/#code=def%20foo%20%7Bn%20%3A%20Nat%7D%20%3A%20Nat%20%3A%3D%20%0D%0A%20%20match%20n%20with%20%0D%0A%20%20%7C%200%20%3D%3E%200%0D%0A%20%20%7C%20n%2B1%20%3D%3E%20%40foo%20n%0D%0Atermination_by%20foo%20%3D%3E%20n\">https://live.lean-lang.org/#code=def%20foo%20%7Bn%20%3A%20Nat%7D%20%3A%20Nat%20%3A%3D%20%0D%0A%20%20match%20n%20with%20%0D%0A%20%20%7C%200%20%3D%3E%200%0D%0A%20%20%7C%20n%2B1%20%3D%3E%20%40foo%20n%0D%0Atermination_by%20foo%20%3D%3E%20n</a><br>\nseems to work. (Didn't figure out how to copy that code on the phone)</p>",
        "id": 411545631,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704582371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/termination_by.20.20needing.20implicit.20argument/near/411545631\">said</a>:</p>\n<blockquote>\n<p>Can someone give me an example? I'm probably misunderstanding something, because<br>\n<a href=\"https://live.lean-lang.org/#code=def%20foo%20%7Bn%20%3A%20Nat%7D%20%3A%20Nat%20%3A%3D%20%0D%0A%20%20match%20n%20with%20%0D%0A%20%20%7C%200%20%3D%3E%200%0D%0A%20%20%7C%20n%2B1%20%3D%3E%20%40foo%20n%0D%0Atermination_by%20foo%20%3D%3E%20n\">https://live.lean-lang.org/#code=def%20foo%20%7Bn%20%3A%20Nat%7D%20%3A%20Nat%20%3A%3D%20%0D%0A%20%20match%20n%20with%20%0D%0A%20%20%7C%200%20%3D%3E%200%0D%0A%20%20%7C%20n%2B1%20%3D%3E%20%40foo%20n%0D%0Atermination_by%20foo%20%3D%3E%20n</a><br>\nseems to work. (Didn't figure out how to copy that code on the phone)</p>\n</blockquote>\n<p>I think you are right after trying on my own. <code>termination_by f </code> knows default identifiers for both implicit and explicit arguments. This is the better solution in my situation. Thanks!</p>",
        "id": 411618975,
        "sender_full_name": "Jin Wei",
        "timestamp": 1704649811
    }
]