[
    {
        "content": "<p>I recently had an <a href=\"https://github.com/leanprover-community/lean4game/issues/241\">issue report</a> which essentially said that a user didn't have <code>C++</code> on their Windows machine and therefore failed to build a lean package that used FFI (foreign-function-interface).</p>\n<p>The <a href=\"https://github.com/hhu-adam/lean-i18n/blob/e493a4f7f0d51b6707c9d11bd0488d2f26b58bd0/lakefile.lean#L30-L34\">FFI used in lean4-i18n</a> is following the <a href=\"https://github.com/leanprover/lean4/blob/1f732bb3b7fa8e93ca01c1b257668aee14d72d2d/src/lake/examples/ffi/lib/lakefile.lean#L14-L18\">official example</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"bp\">.</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">pkg</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">oFile</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pkg</span><span class=\"bp\">.</span><span class=\"n\">buildDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"c\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"time.o\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">srcJob</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">inputFile</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">pkg</span><span class=\"bp\">.</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"time\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"c\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"time.cpp\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">weakArgs</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">buildO</span><span class=\"w\"> </span><span class=\"n\">oFile</span><span class=\"w\"> </span><span class=\"n\">srcJob</span><span class=\"w\"> </span><span class=\"n\">weakArgs</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"s2\">\"c++\"</span><span class=\"w\"> </span><span class=\"n\">getLeanTrace</span>\n</code></pre></div>\n<p>First of all, is it typical for Windows users to not have <code>C++</code> available per default? And if so, what are the recommended instructions to fix this? Is there anything I could change on the setup to prevent beginners (on Windows) using the package to stumble across this error (<code>error: failed to execute `c++`: no such file or directory (error code: 2)</code>)?</p>",
        "id": 445820642,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718882701
    },
    {
        "content": "<p>I would also be happy if there was a way to just not use the FFI if it's failing: It's only used for a function printing the system time, and if I could set it up in a way that this function just returns <code>\"\"</code> if <code>C++</code> is not available, that would be satisfactory. But I assume that's not possible, is it?</p>",
        "id": 445822147,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718883221
    },
    {
        "content": "<p>No, Windows doesn't have a \"c++.exe\", by default. (Neither does Ubuntu!) The usual way to get a native Windows <code>g++</code> or <code>clang++</code> available as <code>c++</code> is to install MSYS2, but if the user doesn't already know that, it's a long path. I would suggest you recommend the user installs WSL2 and Ubuntu 24.04 and works there instead of in Windows (and installs <code>build-essentials</code> to get <code>c++</code>).</p>\n<p>Alternatively, does it make sense to change \"<code>c++</code>\" to \"<code>leanc</code>\"?</p>",
        "id": 445830122,
        "sender_full_name": "Richard Copley",
        "timestamp": 1718886048
    },
    {
        "content": "<p>Thanks for the explanation! Is <code>leanc</code> something that's available for anybody using Lean? That does sound like the best approach, although I know nothing about these things.</p>\n<p>Is there a reason the official documentation for FFI does not use <code>leanc</code> there?</p>",
        "id": 445832559,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718886902
    },
    {
        "content": "<p>I don't know details, but <code>leanc</code> is some kind of special build of <code>clang</code>, and it's always installed with Lean 4. Maybe there's a good reason not to use it as if it were a 'normal' compiler.</p>\n<p>(I don't really understand how one expects to be able to make use of FFI without already knowing how to compile stuff. That's probably a bit uncharitable of me.)</p>",
        "id": 445834128,
        "sender_full_name": "Richard Copley",
        "timestamp": 1718887445
    },
    {
        "content": "<p>Actually, with <code>leanc</code> I don't know how to do the imports, my example file was <code>time.cpp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">stdio</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">time</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">string</span><span class=\"bp\">&gt;</span>\n\n<span class=\"bp\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"bp\">&gt;</span>\n\n<span class=\"n\">extern</span><span class=\"w\"> </span><span class=\"s2\">\"C\"</span><span class=\"w\"> </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">formatLocalTime</span><span class=\"o\">()</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">    </span><span class=\"n\">time_t</span><span class=\"w\"> </span><span class=\"n\">rawtime</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"n\">struct</span><span class=\"w\"> </span><span class=\"n\">tm</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"n\">timeinfo</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"o\">[</span><span class=\"mi\">80</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"n\">time</span><span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"n\">rawtime</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"n\">timeinfo</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">localtime</span><span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"n\">rawtime</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"n\">strftime</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">sizeof</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"s2\">\"%c\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">timeinfo</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"o\">(</span><span class=\"n\">lean_mk_string</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Sorry for not knowing a single thing about C/C++ anymore, but with <code>leanc</code> it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"bp\">././</span><span class=\"n\">time</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">time</span><span class=\"bp\">.</span><span class=\"n\">cpp</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">fatal</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">stdio</span><span class=\"bp\">.</span><span class=\"n\">h'</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span>\n<span class=\"bp\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">stdio</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"bp\">&gt;</span>\n<span class=\"w\">         </span><span class=\"bp\">^~~~~~~~~</span>\n</code></pre></div>\n<p>do you know how to do these includes correctly?</p>",
        "id": 445834306,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718887505
    },
    {
        "content": "<p><code>leanc</code> is an implementation detail. Don't use it.</p>",
        "id": 445834527,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718887575
    },
    {
        "content": "<p>ok good to know. But maybe I'll just drop the feature which uses FFI if there isn't any good way to make it work out of the box for everybody...</p>\n<p>it's not really an important feature anyways, just printing a timestamp into a translation file when it's autogenerated...</p>",
        "id": 445835458,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718887905
    },
    {
        "content": "<p>The Windows (in fact, also for Linux/Mac) version of Lean ships with a clang C++ compiler. It comes with C/C++ libraries, but not header files. You can look at this file <a href=\"https://github.com/acmepjz/md4lean/blob/main/lakefile.lean\">https://github.com/acmepjz/md4lean/blob/main/lakefile.lean</a> which uses it in an ad-hoc way.</p>",
        "id": 446172271,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719003310
    },
    {
        "content": "<p>A possible solution is download a version of clang for Windows from its official website (<a href=\"https://releases.llvm.org/\">https://releases.llvm.org/</a>) and extract the header files. Hopefully the header files are of correct version.</p>",
        "id": 446172893,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719003632
    },
    {
        "content": "<p>thanks, especially the example shows some neat tricks, in particular <code>Platform.isWindows</code> and <code>← getLeanCc</code>. However, this seems all too complicated for the little benefits of my use case. I just commented-out everything related to FFI and moved on <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 446177592,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719005963
    }
]