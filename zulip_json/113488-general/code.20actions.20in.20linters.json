[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/pointless.20tactic.20linter/near/426268925\">said</a>:</p>\n<blockquote>\n<p>The point of a linter is to suggest a modification which it thinks is better. (Ideally with a code action to perform it.)</p>\n</blockquote>\n<p>Can you actually add a code action through a linter? My impression was that the major route for adding a code action at a specific spot was by pushing something onto the infotree—but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.runLinters#doc\">docs#Lean.Elab.Command.runLinters</a> obliterates changes to the info state after running each linter, preserving only the <code>messages</code>. Is there a back door somehow?</p>",
        "id": 426611804,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710443758
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/code.20actions.20in.20linters/near/426611804\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/pointless.20tactic.20linter\">#general &gt; pointless tactic linter</a> by <span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span>.</p>",
        "id": 426611979,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710443826
    },
    {
        "content": "<p>For what it's worth, I have tried a bit to get a <code>Try this</code> suggestion, I could register it, but was unable to make it trigger a code action.</p>",
        "id": 426612248,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710443921
    },
    {
        "content": "<p>Can this be done with Std linters instead?</p>",
        "id": 426620537,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710447140
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.CodeAction.deprecatedCodeActionProvider#src\">src#Std.CodeAction.deprecatedCodeActionProvider</a> is an example of a code action that triggers on a message, not something in the info tree. But the code action will otherwise be recomputing the result that the linter produced, using the linter message only as a filter</p>",
        "id": 426642479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710456473
    },
    {
        "content": "<p>I wonder what the right design for a standard way to add suggestions from a linter would be.</p>\n<p>It would be nice to just call <code>addSuggestion</code> or a simple variant, but I’m guessing we want to call each linter with a fresh info state. One way of handling this would be to manually distinguish infotrees added by the linter by some token or other, and have <code>runLinters</code> accumulate those trees before resetting the state (and finally push them all onto the info state at the end).</p>\n<p>Another would be to support only very limited try-this suggestions that can be gleaned from the structure of message data in <code>messages</code>. This at least wouldn’t require a core change, but would be limited and possibly fragile.</p>\n<p>But maybe there are better designs out there?</p>",
        "id": 426651363,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710461626
    }
]