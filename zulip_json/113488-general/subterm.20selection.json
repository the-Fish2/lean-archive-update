[
    {
        "content": "<p>Many of the features of the <code>ssreflect</code> tactic language are thought of as instruments for eliminating the need for a certain kind of brittle code.<br>\n In some cases, the solutions proposed by <code>ssreflect</code> have already been made available in Lean from very early on, in some others the same needs are addressed using different solutions.<br>\n But here is an example of <code>ssreflect</code> feature that I use on a daily basis and do not know how to transpose in the current lean/mathlib context. It is about selecting  meaningful parts of terms (e.g., of the formula to be proved in a goal) without having to insert fragile information in the script. Here is an example of this feature, combined with the <code>rewrite</code> tactic (analogue of <code>rw</code>):</p>",
        "id": 429755191,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1711495301
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Coq\"><pre><span></span><code><span class=\"kn\">From</span> <span class=\"n\">mathcomp</span> <span class=\"kn\">Require</span> <span class=\"kn\">Import</span> <span class=\"n\">all_ssreflect</span><span class=\"o\">.</span>\n\n<span class=\"c\">(* rewrite all occurrences of `a` under `F` *)</span>\n<span class=\"kn\">Lemma</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">-&gt;</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">-&gt;</span>  <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)).</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span>\n  <span class=\"k\">intro</span> <span class=\"n\">e</span><span class=\"o\">.</span>\n  <span class=\"k\">rewrite</span> <span class=\"o\">[</span><span class=\"k\">in</span> <span class=\"n\">X</span> <span class=\"k\">in</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">]</span><span class=\"n\">e</span><span class=\"o\">.</span>\n  <span class=\"kp\">done</span><span class=\"o\">.</span>\n<span class=\"kn\">Qed</span><span class=\"o\">.</span>\n\n<span class=\"c\">(* same script despite the different association of sums *)</span>\n<span class=\"kn\">Lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">-&gt;</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">-&gt;</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"o\">).</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span>\n  <span class=\"k\">intro</span> <span class=\"n\">e</span><span class=\"o\">.</span>\n  <span class=\"k\">rewrite</span> <span class=\"o\">[</span><span class=\"k\">in</span> <span class=\"n\">X</span> <span class=\"k\">in</span> <span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">]</span><span class=\"n\">e</span><span class=\"o\">.</span>\n  <span class=\"kp\">done</span><span class=\"o\">.</span>\n<span class=\"kn\">Qed</span><span class=\"o\">.</span>\n\n<span class=\"c\">(* rw only in the occurrence of `a` under the `F` on the right-hand side *)</span>\n<span class=\"kn\">Lemma</span> <span class=\"n\">test3</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">-&gt;</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">-&gt;</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">F</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">.</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span>\n  <span class=\"k\">intro</span> <span class=\"n\">e</span><span class=\"o\">.</span>\n  <span class=\"k\">rewrite</span> <span class=\"o\">[</span><span class=\"k\">in</span> <span class=\"n\">X</span> <span class=\"k\">in</span> <span class=\"o\">_</span> <span class=\"o\">=</span> <span class=\"o\">_</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">X</span><span class=\"o\">)]</span><span class=\"n\">e</span><span class=\"o\">.</span>\n  <span class=\"kp\">done</span><span class=\"o\">.</span>\n<span class=\"kn\">Qed</span><span class=\"o\">.</span>\n</code></pre></div>",
        "id": 429755325,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1711495379
    },
    {
        "content": "<p>Here's the Lean translation of the first one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span>  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 429755492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711495484
    },
    {
        "content": "<p>I guess the pattern matching of <code>F _</code> isn't quite the same; I don't think we have a syntax for entering a subexpression of a match</p>",
        "id": 429755570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711495545
    },
    {
        "content": "<p>we do, <code>conv in pat =&gt; ...</code> is shorthand for <code>conv =&gt; pattern pat; ...</code> and you can iterate <code>pattern</code></p>",
        "id": 429755680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711495593
    },
    {
        "content": "<p>It's not clear to me how to make the <code>X in _ = _ (F X)</code> pattern work</p>",
        "id": 429755805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711495668
    },
    {
        "content": "<p>Thanks! What would be the Lean analogue for <code>test3</code> then?</p>",
        "id": 429755813,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1711495677
    },
    {
        "content": "<p>I think the ideal lean spelling would be something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- not legal today</span>\n<span class=\"n\">pattern</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 429755883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711495704
    },
    {
        "content": "<p>Btw, there is an old <a href=\"https://inria.hal.science/hal-00652286v2\">paper</a>about this.</p>",
        "id": 429755897,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1711495716
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test3</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">F</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rhs</span><span class=\"bp\">;</span> <span class=\"n\">pattern</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 429755904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711495721
    },
    {
        "content": "<p>I think test3 is not a good example; it's using an overpowered feature for an example which doesn't require it</p>",
        "id": 429755942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711495748
    },
    {
        "content": "<p>I could be misunderstanding the spec though</p>",
        "id": 429755952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711495757
    },
    {
        "content": "<p>I think you took the spec to be \"solve the lemma\", but it was actually intended to be something else.</p>",
        "id": 429756041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711495805
    },
    {
        "content": "<p>no, I read the spec as the comment <code>rw only in the occurrence of `a` under the `F` on the right-hand side</code></p>",
        "id": 429756071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711495825
    },
    {
        "content": "<p>I suppose I didn't zoom in on <code>a</code> like the spec says but it's already zoomed in</p>",
        "id": 429756123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711495859
    },
    {
        "content": "<p>It's interesting that <code>_ (F X)</code> works in Coq; Lean is unwilling to do the higher order unification to fill the <code>_</code> here</p>",
        "id": 429756156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711495881
    },
    {
        "content": "<p>Indeed, this was the spec. But what is too specific in my example is the \"right-hand side\".</p>",
        "id": 429756171,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1711495889
    },
    {
        "content": "<p>The thing that the <code>pattern</code> grammar lacks, as Eric points out, is a way to name subexpression metavariables</p>",
        "id": 429756293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711495964
    },
    {
        "content": "<p>or rather, to do something useful with the name - the syntax <code>?a</code> exists</p>",
        "id": 429756333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711495990
    },
    {
        "content": "<p>Still, <code>conv</code> blocks are rare, <code>pattern</code> even more rare, and this kind of subexpression match essentially nonexistent. It could be that we're just used to finding alternative ways through it though</p>",
        "id": 429756476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711496079
    },
    {
        "content": "<p>May I ask what would be idiomatic on this extra example?</p>\n<div class=\"codehilite\" data-code-language=\"Coq\"><pre><span></span><code><span class=\"c\">(* rw only the occurrence of a of the left of the product *)</span>\n<span class=\"kn\">Lemma</span> <span class=\"n\">test4</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">-&gt;</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">-&gt;</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"o\">))).</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span>\n  <span class=\"k\">intro</span> <span class=\"n\">e</span><span class=\"o\">.</span>\n  <span class=\"k\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"k\">in</span> <span class=\"n\">X</span> <span class=\"o\">*</span> <span class=\"o\">_]</span><span class=\"n\">e</span><span class=\"o\">.</span>\n</code></pre></div>",
        "id": 429757028,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1711496439
    },
    {
        "content": "<p>I guess one way to dodge the issue as stated is with something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test4</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span>\n  <span class=\"n\">convert_to</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">e</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 429757287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711496623
    },
    {
        "content": "<p>But this script is more fragile, as it depends on more context-specific information.</p>",
        "id": 429757474,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1711496745
    },
    {
        "content": "<p>other possibilities:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test4</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test4</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 429757495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711496760
    },
    {
        "content": "<p>Oh I'm aware. I understand why you would find these solutions to be not as good</p>",
        "id": 429757563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711496787
    },
    {
        "content": "<p>I think the example is a bit contrived though</p>",
        "id": 429757572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711496796
    },
    {
        "content": "<p>I think beyond a certain point it's not necessarily a good thing to avoid stating the goal in the proof script</p>",
        "id": 429757610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711496833
    },
    {
        "content": "<p>Also, it seems to me that your first solution is relying on the fact that I am using here a term <code>P</code> (a variable in this case), when the Coq version would be the same for an arbitrary concrete context <code>P</code>.</p>",
        "id": 429757612,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1711496833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Small.20Scale.20Reflection.20for.20the.20Working.20Lean.20user/near/429756333\">said</a>:</p>\n<blockquote>\n<p>or rather, to do something useful with the name - the syntax <code>?a</code> exists</p>\n</blockquote>\n<p>Presumably the main barrier here is that <code>conv</code> is used so rarely that there's little motivation for anyone to add this feature?</p>",
        "id": 429757613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711496833
    },
    {
        "content": "<p>And the other solutions rely on occurrence numbers, which are quite not robust to changes in your proof as well.</p>",
        "id": 429757719,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1711496898
    },
    {
        "content": "<p>Actually I should have mentioned this as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test4</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"n\">_</span><span class=\"bp\">*</span><span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 429757724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711496904
    },
    {
        "content": "<p>that one is certainly closest to your requirements</p>",
        "id": 429757742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711496918
    },
    {
        "content": "<p>Indeed, it is.</p>",
        "id": 429757768,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1711496938
    },
    {
        "content": "<p>There are of course ways to fool this matching pattern as well</p>",
        "id": 429757776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711496943
    },
    {
        "content": "<p>This is not idiomatic, but I was a bit surprised it actually worked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test4</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">_</span><span class=\"bp\">*</span><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  ⊢ P (F a) (F a + F (b * 3))</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 429757792,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711496956
    },
    {
        "content": "<p>Is it worth splitting this conv-related thread?</p>",
        "id": 429757812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711496970
    },
    {
        "content": "<p>(maybe <a href=\"#narrow/stream/113488-general/topic/Small.20Scale.20Reflection.20for.20the.20Working.20Lean.20user/near/429755191\">from this message</a>)</p>",
        "id": 429757893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711497004
    },
    {
        "content": "<p>37 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Small.20Scale.20Reflection.20for.20the.20Working.20Lean.20user\">#general &gt; Small Scale Reflection for the Working Lean user</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 429758080,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711497125
    },
    {
        "content": "<p>(Feel free to adjust the topic name. I thought splitting made sense to get more visibility.)</p>",
        "id": 429758130,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711497176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/ssreflect.20idioms.20in.20Lean/near/429757610\">said</a>:</p>\n<blockquote>\n<p>I think beyond a certain point it's not necessarily a good thing to avoid stating the goal in the proof script</p>\n</blockquote>\n<p>I am a big fan of declarative style. But this kind of feature is precisely useful when it is <strong>not at all</strong> a good thing to include your goal in the proof script, e.g., you are in the process of writing a proof and your algebraic expression's parentheses/values of constants/names of variables/etc are changing slightly at each iteration. In this case, it is desirable, when possible, to provide a \"meaningful\" description of your pattern.</p>",
        "id": 429759756,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1711498418
    },
    {
        "content": "<p>Also, I am not sure that the current  number of occurrences of <code>conv</code> blocks alone is a good measure of the relevance of the feature: enhancing the features of subterm selections could lead to a wider usage of the supporting tactics, whatever they are <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> . <br>\nIt seems to me that the more meaningful question would be to know whether users feel limitations in the current way of selecting subterms (for rewriting, but not only).</p>",
        "id": 429760293,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1711498850
    },
    {
        "content": "<p>On a more subjective note, from my experience binders (and the other features of the <a href=\"https://inria.hal.science/hal-00652286v2\">pattern language</a>) provide a quite convenient language for selection, even if you could often come up with a binder-free variant. But again, that's more a matter of habit I guess.</p>",
        "id": 429760479,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1711499010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span> thanks for mentioning this ssreflect feature. You are welcome to open an issue on LeanSSR repo, and I will try to add it. For now, we only support occurrences selection.</p>",
        "id": 429768107,
        "sender_full_name": "Vladimir Gladstein",
        "timestamp": 1711504149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110172\">Assia Mahboubi</span> has marked this topic as resolved.</p>",
        "id": 429807630,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711528632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110172\">Assia Mahboubi</span> has marked this topic as unresolved.</p>",
        "id": 429808058,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711528766
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 432913483,
        "sender_full_name": "Gramps Grampa",
        "timestamp": 1712931287
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/subterm.20selection/near/432913483\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/String.20diagrams\">#general &gt; String diagrams</a> by <span class=\"user-mention silent\" data-user-id=\"560878\">Gramps Grampa</span>.</p>",
        "id": 432913617,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712931333
    }
]