[
    {
        "content": "<p>Yes, this is probably a very ambitious effort, but if I really wanted to build one, how would you recommend I start?</p>",
        "id": 417066082,
        "sender_full_name": "Elton Govada",
        "timestamp": 1705824245
    },
    {
        "content": "<p>The up to date Ethereum Execution Layer Specification (EELS) is written and implemented using python but the model uses OOP. I guess my first question is how would I model a LEAN implementation using functional programming?</p>",
        "id": 417066302,
        "sender_full_name": "Elton Govada",
        "timestamp": 1705824487
    },
    {
        "content": "<p>Lastly, the main motivation is to use the theorem proving capabilities of LEAN alongside the implementation so it could be formally verified.</p>",
        "id": 417066375,
        "sender_full_name": "Elton Govada",
        "timestamp": 1705824579
    },
    {
        "content": "<p>What experience do you have with Lean so far?</p>",
        "id": 417120338,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705870297
    },
    {
        "content": "<p>Mostly theoretical. I've read through chapter 7 (Inductive Types) in the Theorem Proving book and through about chapter 5 (Monads) in the Functional Programming book. I did more hands on with Coq prior to learning Lean, and that was because I found the Software Foundations in Coq a lot easier to learn and follow initially.</p>",
        "id": 417143308,
        "sender_full_name": "Elton Govada",
        "timestamp": 1705887429
    },
    {
        "content": "<p>I guess my question is more about how I'd start designing and building using FP concepts than it is the theorem proving part atm? Hope that helps :)</p>",
        "id": 417143401,
        "sender_full_name": "Elton Govada",
        "timestamp": 1705887494
    },
    {
        "content": "<p>At the end of the day, even though Lean is a functional languages and Python is object-oriented, many of the same concepts will carry over. There is the additional benefit that blockchain has a philosophy of \"immutability\" that synergizes nicely with functional code. I don't necessarily see a reason why you couldn't go class-by-class method-by-method through the python code translating to Lean. My only doubt is with the chain itself - I don't know how the spec manages the data type for representing the whole blockchain, but you probably don't want to go around making copies of it with small modifications.</p>",
        "id": 418941705,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706658732
    },
    {
        "content": "<p>I have been thinking more about this in light of the recent interest of the EF in Lean. Off chance, but has anyone on here looked into this since January?</p>",
        "id": 435641112,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714157205
    },
    {
        "content": "<p>Hey Bolton! Just came from your YT video. Funny enough, soon after posting my interest on the topic, I got a job working in the crypto space, so the project was kinda in the back burner ever since. But I'd love to revisit this topic and try your approach.</p>\n<p>One suggestion is if we used the EVM spec as opposed to an implementation, we'd be able to translate the code without all the client code. I think what you were looking for during your live was this: <a href=\"https://github.com/ethereum/execution-specs/tree/master/src/ethereum/cancun\">https://github.com/ethereum/execution-specs/tree/master/src/ethereum/cancun</a></p>",
        "id": 435790857,
        "sender_full_name": "Elton Govada",
        "timestamp": 1714253297
    },
    {
        "content": "<p>Cool! I'll share my thoughts in a minute when I get situated.</p>",
        "id": 435791100,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714253569
    },
    {
        "content": "<p>For anyone who is wondering, here is the recording Elton is referencing is <a href=\"https://www.youtube.com/watch?v=DqG47oMfyvE\">here</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"DqG47oMfyvE\" href=\"https://www.youtube.com/watch?v=DqG47oMfyvE\"><img src=\"https://uploads.zulipusercontent.net/6b535c8973adfe866cb89884869a58de8020b795/68747470733a2f2f692e7974696d672e636f6d2f76692f44714734376f4d667976452f64656661756c742e6a7067\"></a></div><p>It seems like an implementation of the EVM in Lean could be helpful for this <a href=\"#narrow/stream/113488-general/topic/Monthly.20Community.20Meeting/near/435605031\">competition</a>, so I'm interested in making one that I can then show to the Ethereum Foundation for them to either use directly or modify for their purposes. There are a variety of ways you could think about making this but the way that seems like it has the highest potential to be extremely easy is to port an existing implementation. I mostly felt the best about <a href=\"https://github.com/bluealloy/revm\">this rust implementation</a> linked from the EF <a href=\"https://ethereum.org/en/developers/docs/evm/\">website</a>.</p>",
        "id": 435792338,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714254916
    },
    {
        "content": "<p>For some reason Rust has seemed to me to be linguistically similar to Lean, so I like this target. GitHub Copilot was doing a very good job translating Rust to Lean types. It makes me wonder if there are any good LLM based code porting tools that could maybe do this all at once (so if anyone reading this has a suggestion there, LMK).</p>",
        "id": 435792369,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714254962
    },
    {
        "content": "<p>Any other good tool for porting Rust to Lean would be good too. Along these lines I have heard about <a href=\"https://github.com/AeneasVerif/aeneas\">Aeneas</a>, but unfortunately it looks like there are several Rust language features it still does not support.</p>",
        "id": 435792466,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714255066
    },
    {
        "content": "<blockquote>\n<p>For some reason Rust has seemed to me to be linguistically similar to Lean</p>\n</blockquote>\n<p>that's because we often just copy rust unless there is a good reason not to</p>",
        "id": 435792518,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1714255094
    },
    {
        "content": "<p>I see, that's awesome. That makes a lot of sense, not just on the level of having nice implementations to crib from, but also on the level of making it easier for the Rust community to align with Lean.</p>",
        "id": 435792566,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714255181
    },
    {
        "content": "<p>I am reminded of <a href=\"https://types.pl/@graydon/111033807456349023\">this toot</a>.</p>",
        "id": 435792644,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714255220
    },
    {
        "content": "<p>Anyway, I may want to look into autotranslation a bit more, but <span class=\"user-mention\" data-user-id=\"650753\">@Elton Govada</span> I will try to post whatever I have in GitHub in a day or two.</p>",
        "id": 435792695,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714255279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/Ethereum.20Execution.20Client.20in.20LEAN/near/435792369\">said</a>:</p>\n<blockquote>\n<p>For some reason Rust has seemed to me to be linguistically similar to Lean, so I like this target. GitHub Copilot was doing a very good job translating Rust to Lean types. It makes me wonder if there are any good LLM based code porting tools that could maybe do this all at once (so if anyone reading this has a suggestion there, LMK).</p>\n</blockquote>\n<p>Don't know about code porting tools, but at least for alternative coding LLMS, I'd look into maybe StarCoder2. I had heard some good things about it but haven't looked into it myself yet, but it's trained on like 600 languages so should be promising.</p>",
        "id": 435793965,
        "sender_full_name": "Elton Govada",
        "timestamp": 1714256658
    },
    {
        "content": "<p>Ooh, I see this is <a href=\"https://ollama.com/library/starcoder2\">available on ollama</a>, which I already have installed, this looks promising.</p>",
        "id": 435794460,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714257300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/Ethereum.20Execution.20Client.20in.20LEAN/near/435794460\">said</a>:</p>\n<blockquote>\n<p>Ooh, I see this is <a href=\"https://ollama.com/library/starcoder2\">available on ollama</a>, which I already have installed, this looks promising.</p>\n</blockquote>\n<p>sweet, hope it works for ya. Also, what are your thoughts on the pyspec I linked above? Personally, I think the pyspec implementation looks a lot easier to read and decipher over the rust implementation. It might be better to start from there. I'm taking a look at it right now.</p>",
        "id": 435794956,
        "sender_full_name": "Elton Govada",
        "timestamp": 1714257900
    },
    {
        "content": "<p>Yes, I looked around at python options, since I'm more familiar with Python than rust. I think I sort of concluded that it would be too hard to know what all the types were/find where they were defined - I think I was looking at py-evm and saw that some types were defined in a different repository. This execution specs repo looks like it could be good though.</p>",
        "id": 435795507,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714258513
    },
    {
        "content": "<p>Automatically generating the code seems like a really interesting strategy. My original route (back in January when I messaged <span class=\"user-mention\" data-user-id=\"650753\">@Elton Govada</span> ) was following the <a href=\"https://ethereum.github.io/yellowpaper/paper.pdf\">yellow paper</a> and trying to implement everything as I went along. I didn't get much further than the basic arithmetic types, but if there's interest in getting this project off the ground I'd be happy to lend a hand</p>",
        "id": 435816141,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1714277243
    },
    {
        "content": "<p>Yeah, if this LLM approach turns out to totally fail I guess the yellowpaper is a good fallback.</p>\n<p><a href=\"https://www.youtube.com/live/2Pq9ihCEI70?si=vjvqyFRf-E2FrS8o\">Here is my recording of my second work session on this project</a></p>\n<p>I attempted starcoder but it refused to stop generating code, so I switched to llama3 - I later added a token generation limit probably this could be switched back.<br>\nThe repo is up <a href=\"https://github.com/BoltonBailey/levm\">here</a>, anyone feel free to PR to it if you think you have a good idea.</p>",
        "id": 435836415,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714284447
    }
]