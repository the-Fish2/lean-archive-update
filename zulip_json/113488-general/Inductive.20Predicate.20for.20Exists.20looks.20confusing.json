[
    {
        "content": "<p>On learning about inductive predicates I stopped at the Exists definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Exists</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Exists</span> <span class=\"n\">Œ±</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>It might be a \"loaded\" notation, but I found it most unusual that the forall is used to define the exists. Is this sound or is there another piece missing? Forgive the cluelessness...</p>",
        "id": 425183184,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1709761552
    },
    {
        "content": "<p>If you find the forall quantifier distracting, you can also write it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Exists</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Exists</span> <span class=\"n\">Œ±</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 425183763,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709761778
    },
    {
        "content": "<p>It says that <code>Exists.intro</code> takes two arguments: an Œ± -- call it x -- and a proof of p x.</p>",
        "id": 425183927,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709761846
    },
    {
        "content": "<p>I am reminded of existential types in Haskell, which use the <code>forall</code> keyword: <a href=\"https://wiki.haskell.org/Existential_type\">https://wiki.haskell.org/Existential_type</a></p>",
        "id": 425184504,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709762075
    },
    {
        "content": "<p>personally, it reminds me of the paradox given by the close-to converse <code>‚àÉ (x :Œ±), (p x ‚Üí ‚àÄ (y:Œ±), p y)</code>, which can be described as saying \"there exists a person in the bar who drinks only when everyone in the bar is does\", aka the <a href=\"https://en.wikipedia.org/wiki/Drinker_paradox\">drinker paradox</a></p>",
        "id": 425185412,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1709762383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671510\">Bernardo Borges</span> <a href=\"#narrow/stream/113488-general/topic/Inductive.20Predicate.20for.20Exists.20looks.20confusing/near/425183184\">said</a>:</p>\n<blockquote>\n<p>On learning about inductive predicates I stopped at the Exists definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Exists</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Exists</span> <span class=\"n\">Œ±</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>It might be a \"loaded\" notation, but I found it most unusual that the forall is used to define the exists. Is this sound or is there another piece missing? Forgive the cluelessness...</p>\n</blockquote>\n<p>This is not a mistake. In dependent type theory there is an asymmetry in the logical connectives: forall is the dependent Pi type and this is primitive, while exists is an inductive type which is defined using forall. This also relates to the fact that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=not_exists#doc\">docs#not_exists</a> is provable with no axioms while <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.not_forall#doc\">docs#Classical.not_forall</a> requires classical logic</p>",
        "id": 425236112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709793180
    },
    {
        "content": "<p>\"for every y such that p(y), you can give a proof that there exists an x such that p(x)\".</p>",
        "id": 425238220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709794367
    },
    {
        "content": "<p>I remember sitting in a rented apartment in Berkeley in 2017 also being super-confused about this (reading <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a>). The above is my explanation of what's going on</p>",
        "id": 425238471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709794476
    },
    {
        "content": "<p>I think if you understand it from a programming perspective it makes a lot more sense: try writing Exists using ‚Äústructure‚Äù instead. You‚Äôll find that it‚Äôs just a tuple of a witness x, such that a certain predicate holds. Nothing else really.</p>",
        "id": 425299233,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1709816901
    },
    {
        "content": "<p>Similar constructs are also Sigma, Subtype, Prod, etc</p>",
        "id": 425299387,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1709816967
    },
    {
        "content": "<p>Just with different combinations of which of the two parts are in Prop vs in Type, and whether it‚Äôs a non-dependent or dependent pair.</p>",
        "id": 425299546,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1709817025
    },
    {
        "content": "<p>Sure it makes sense from a CS point of view. But if you're a mathematician who doesn't know the first thing about type theory (eg me in 2017) then it's really disconcerting that the definition of \"exists x, p x\" seems to be \"forall x, p x\".</p>",
        "id": 425399629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709847509
    },
    {
        "content": "<p>Oh, but also the parentheses are really important here!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Exists</span> <span class=\"n\">Œ±</span> <span class=\"n\">p</span> <span class=\"c1\">-- wrong</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Exists</span> <span class=\"n\">Œ±</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"c1\">-- right</span>\n</code></pre></div>",
        "id": 425405324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709849841
    },
    {
        "content": "<p>Using the former in the definition of exists would indeed make it equivalent to forall</p>",
        "id": 425405446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709849889
    },
    {
        "content": "<p>Kevin is well aware of this, that‚Äôs why he wrote ‚Äúseems to be‚Äù.</p>",
        "id": 425416822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709855116
    }
]