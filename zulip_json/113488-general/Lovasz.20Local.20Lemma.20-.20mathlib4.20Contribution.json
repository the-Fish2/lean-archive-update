[
    {
        "content": "<p>Hello, it's been a while, but a year ago I formalized the Lovász Local Lemma in Lean 3.0. I finally translated it to Lean 4.0 (see <a href=\"https://github.com/nsglover/Lean-4.0-LLL\">here</a>), and, if folks think it would be useful, I'd love to add it to mathlib4. I've seen <a href=\"https://leanprover-community.github.io/contribute/index.html\">this page</a> and plan on following it closely, but is there anything else I should do or be aware of that isn't mentioned there?</p>",
        "id": 409773782,
        "sender_full_name": "Nathan Glover",
        "timestamp": 1703384708
    },
    {
        "content": "<p>I might also redo the symmetric corollary to match Lemma III from <a href=\"https://en.wikipedia.org/wiki/Lov%C3%A1sz_local_lemma\">here</a>; my current symmetric version is sort of a mangled version of Lemmas II and III.</p>",
        "id": 409774281,
        "sender_full_name": "Nathan Glover",
        "timestamp": 1703385103
    },
    {
        "content": "<p>Also, I have yet to really read through the style guideline pages (I will before continuing with the PR process, don't worry) but is there any chance somebody would be willing to take a quick glance at my code? This is my first time really working with Lean and I'm curious where it lands on the \"utterly horrific\" to \"beautifully perfect\" spectrum</p>",
        "id": 409774692,
        "sender_full_name": "Nathan Glover",
        "timestamp": 1703385461
    },
    {
        "content": "<p>You might as well create a PR. In the review process you will get good feedback. That is my advice at least.</p>",
        "id": 409775870,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703386418
    },
    {
        "content": "<p>Okay that sounds good, many thanks!</p>",
        "id": 409777081,
        "sender_full_name": "Nathan Glover",
        "timestamp": 1703387501
    },
    {
        "content": "<p>Just going off memory, but I remember <span class=\"user-mention\" data-user-id=\"665760\">@Yves Jäckle</span>'s formalisation was more general than yours.</p>",
        "id": 409791662,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703401215
    },
    {
        "content": "<p>I don't know anything about the mathematics here but a style observation is that it's much more idiomatic in mathlib to have many small proofs rather than one big proof with many <code>have</code>s in. The \"one big proof\" style is also much harder to work with because every time you add a line lean has to recompile every proof rather than just the one you're working on. Was it hell to write in this style? </p>\n<p>On the other hand, lots and lots of comments is a great style :-)</p>",
        "id": 409796043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703405697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Lovasz.20Local.20Lemma.20-.20mathlib4.20Contribution/near/409791662\">said</a>:</p>\n<blockquote>\n<p>Just going off memory, but I remember <span class=\"user-mention silent\" data-user-id=\"665760\">Yves Jäckle</span>'s formalisation was more general than yours.</p>\n</blockquote>\n<p>Oh I have not seen this; where might I find it? I looked pretty hard to see if anyone else had formalized this result but I guess I didn't look in the right places.</p>",
        "id": 409847083,
        "sender_full_name": "Nathan Glover",
        "timestamp": 1703456885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Lovasz.20Local.20Lemma.20-.20mathlib4.20Contribution/near/409796043\">said</a>:</p>\n<blockquote>\n<p>Was it hell to write in this style? </p>\n</blockquote>\n<p>It wasn't too bad; Lean was smart enough to not recompile the whole thing every time. I rarely had to recompile the entire proof during the process. Regardless, I can agree that that style is better. It's been a while, but I believe the main reason I didn't split it up much is because of the monstrous amount of hypotheses every small lemma would need (and I was never able to get the \"variable\" thing to work properly for me; perhaps I should've tried harder).</p>",
        "id": 409847232,
        "sender_full_name": "Nathan Glover",
        "timestamp": 1703457062
    },
    {
        "content": "<p>Usually the proof is the hardest part so if you got that golfing and refactoring shouldn't be too much of an issue for you.</p>",
        "id": 409847816,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703457749
    },
    {
        "content": "<p>A common trick for the case if you have lots of auxiliary lemmas with common assumptions is to put all these assumptions into a structure.</p>",
        "id": 409853208,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703463376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> <a href=\"#narrow/stream/113488-general/topic/Lovasz.20Local.20Lemma.20-.20mathlib4.20Contribution/near/409847816\">said</a>:</p>\n<blockquote>\n<p>Usually the proof is the hardest part so if you got that golfing and refactoring shouldn't be too much of an issue for you.</p>\n</blockquote>\n<p>I disagree! I spend most of my time making things mathlib-ready and refactoring so that the proof becomes nice and simple.</p>",
        "id": 409884142,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703489417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"543606\">Nathan Glover</span> <a href=\"#narrow/stream/113488-general/topic/Lovasz.20Local.20Lemma.20-.20mathlib4.20Contribution/near/409847083\">said</a>:</p>\n<blockquote>\n<p>where might I find it?</p>\n</blockquote>\n<p>It is in <a href=\"https://github.com/Happyves/Master_Thesis\">https://github.com/Happyves/Master_Thesis</a> and I've just managed to port it to Lean 4 after many failed mathport attempts over the past two months. I'll publish the port soon.</p>",
        "id": 409884266,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703489523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Lovasz.20Local.20Lemma.20-.20mathlib4.20Contribution/near/409884142\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> <a href=\"#narrow/stream/113488-general/topic/Lovasz.20Local.20Lemma.20-.20mathlib4.20Contribution/near/409847816\">said</a>:</p>\n<blockquote>\n<p>Usually the proof is the hardest part so if you got that golfing and refactoring shouldn't be too much of an issue for you.</p>\n</blockquote>\n<p>I disagree! I spend most of my time making things mathlib-ready and refactoring so that the proof becomes nice and simple.</p>\n</blockquote>\n<p>I have struggled with trying to prove some things in mathlib that I thought would have been straightforward but then again, that is down to my own ignorance!  I suppose if this was quicker for me than yes, I see your point.</p>",
        "id": 409930945,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703528213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Lovasz.20Local.20Lemma.20-.20mathlib4.20Contribution/near/409884266\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"543606\">Nathan Glover</span> <a href=\"#narrow/stream/113488-general/topic/Lovasz.20Local.20Lemma.20-.20mathlib4.20Contribution/near/409847083\">said</a>:</p>\n<blockquote>\n<p>where might I find it?</p>\n</blockquote>\n<p><a href=\"https://github.com/Happyves/Master_Thesis\">https://github.com/Happyves/Master_Thesis</a></p>\n<p>This is a really cool thesis <span class=\"user-mention silent\" data-user-id=\"665760\">Yves Jäckle</span>, and thanks <span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> for sharing!</p>\n<p>On the matter of the LLL, I'm having trouble finding a more general formalization of the result in this repo; the only mention of the LLL I can find is in section 4 of the <a href=\"https://github.com/Happyves/Master_Thesis/blob/main/MasterA_final.pdf\">thesis</a> (reference [7] on page 30), which is my outdated Lean 3 formalization of the LLL. Funny thing, I ran into the <code>ennreal.mul_le_mul</code> issue discussed on page 27 when translating to Lean 4; it was one of the main slowdowns.</p>\n</blockquote>",
        "id": 410617079,
        "sender_full_name": "Nathan Glover",
        "timestamp": 1704012232
    }
]