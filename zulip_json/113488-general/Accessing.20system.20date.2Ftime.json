[
    {
        "content": "<p>Is there any way within lean to print the current date/time into a string?</p>",
        "id": 422496892,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708461367
    },
    {
        "content": "<p>There does not currently exist a library that does it for you but you should be able to bind the C functions medium easily if you want this to exist.</p>",
        "id": 422503338,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1708463942
    },
    {
        "content": "<p>Thx! Looks like there is a reasonable example how to bind a C-function at <a href=\"https://github.com/leanprover/lean4/blob/master/src/lake/examples/ffi/lib/lean/FFI/Add.lean\">Foreign Function Interface</a>, maybe I give that a try tomorrow.</p>",
        "id": 422504202,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708464336
    },
    {
        "content": "<p>Also, if you don't need it to be too general, you can have Lean run a command on the command line.  <a href=\"https://agentultra.github.io/lean-for-hackers/\">Lean 3 for Hackers</a> had an example of calling the command line to generate random numbers.  I think the interface is similar in Lean 4.</p>",
        "id": 422505540,
        "sender_full_name": "Jason Rute",
        "timestamp": 1708464986
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.FS.SystemTime#doc\">docs#IO.FS.SystemTime</a> any use? I never tried it myself.</p>",
        "id": 422508204,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708466272
    },
    {
        "content": "<p>it seems not from a loogle, unless you want to make a new file and then check its created time for the current time, lol</p>",
        "id": 422508689,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708466476
    },
    {
        "content": "<p>Oh, is it only used as metadata for a file?  <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 422509113,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708466662
    },
    {
        "content": "<p>FS usually stands for file system :b</p>",
        "id": 422509150,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708466681
    },
    {
        "content": "<p>Similarly, I assume <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.monoMsNow#doc\">docs#IO.monoMsNow</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.monoNanosNow#doc\">docs#IO.monoNanosNow</a> are not useful.  They are good for timing stuff, but I don't even know if the number itself has an objective interpretation (maybe just the difference between two numbers.)</p>",
        "id": 422509835,
        "sender_full_name": "Jason Rute",
        "timestamp": 1708466991
    },
    {
        "content": "<p>You get the result of</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">now</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">steady_clock</span><span class=\"o\">::</span><span class=\"n\">now</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">tm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">duration_cast</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">milliseconds</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">now</span><span class=\"p\">.</span><span class=\"n\">time_since_epoch</span><span class=\"p\">());</span>\n</code></pre></div>\n<p>so whatever C++ stdlib thinks <code>steady_clock</code> semantics is.</p>",
        "id": 422511672,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1708467921
    },
    {
        "content": "<p>cppreference remarks:</p>\n<blockquote>\n<p>Class std::chrono::steady_clock represents a monotonic clock. The time points of this clock cannot decrease as physical time moves forward and the time between ticks of this clock is constant. This clock is not related to wall clock time (for example, it can be time since last reboot), and is most suitable for measuring intervals.</p>\n</blockquote>\n<p>so you cannot rely on any semantics from the standard's POV</p>",
        "id": 422511777,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1708467972
    },
    {
        "content": "<p>Thanks for the tips! Actually, FFI wasn't that tricky to use at all, the C++ code looks something like this:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;time.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;lean/lean.h&gt;</span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">formatLocalTime</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">time_t</span><span class=\"w\"> </span><span class=\"n\">rawtime</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">tm</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">timeinfo</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">80</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rawtime</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">timeinfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">localtime</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rawtime</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s\">\"%c\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">timeinfo</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">lean_mk_string</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and the Lean code is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Returns the local date/time as a string. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"formatLocalTime\"</span><span class=\"kd\">]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Time.getLocalTime</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span>\n</code></pre></div>",
        "id": 422520867,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708473116
    },
    {
        "content": "<p>(I don't know if it needs to be in <code>IO</code>, but that's the only way I managed to create a function with no arguments without searching too long)</p>",
        "id": 422521043,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708473236
    },
    {
        "content": "<p>Getting the local time is certainly interacting with real world so <code>IO</code> is definitely required.</p>",
        "id": 422521194,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708473323
    },
    {
        "content": "<p>I've been working on a library: <a href=\"https://github.com/T-Brick/DateTime\">https://github.com/T-Brick/DateTime</a></p>",
        "id": 422525610,
        "sender_full_name": "Thea Brick",
        "timestamp": 1708476420
    },
    {
        "content": "<p>still a work in progress but it current does some of the stuff described here</p>",
        "id": 422525767,
        "sender_full_name": "Thea Brick",
        "timestamp": 1708476567
    },
    {
        "content": "<p>Maybe my port of the haskell time library to lean could help <a href=\"https://github.com/bergmannjg/time\">https://github.com/bergmannjg/time</a></p>",
        "id": 422603744,
        "sender_full_name": "Jürgen Bergmann",
        "timestamp": 1708517701
    }
]