[
    {
        "content": "<p>Since the latest VSCode extension update, I notice that long terms in the infoview display a lot of dots <code>...</code> rather than the full description of the term. Can this be disabled?</p>",
        "id": 425063842,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709724367
    },
    {
        "content": "<p>So far I've found it a blessing! But I can imagine that one might want to disable it sometimes</p>",
        "id": 425073519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709727735
    },
    {
        "content": "<p>Yes, I agree that it is <em>normally</em> a blessing. But I have two things that are constructed almost in the same way, the difference being further right. So they look identical in the infoview.</p>",
        "id": 425073652,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709727796
    },
    {
        "content": "<p>I can hover, but I would like to disable it altogether as long as I work in that file.</p>",
        "id": 425073702,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709727817
    },
    {
        "content": "<p>Is this related to what I'm seeing here in this MWE from another thread?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MvPolynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">killCompl</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">Subtype.coe_injective</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- simp -- no progress</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MvPolynomial.algHom_C</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">killCompl</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">Subtype.coe_injective</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Did not find instance of the pattern in the target expression</span>\n</code></pre></div>\n<p>In VSCode it displays as a <code>_</code> but in the web editor it's <code>...</code>, which is confusing</p>",
        "id": 425073832,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709727858
    },
    {
        "content": "<p>Did you bump your mathlib recently? This will probably make your VS Code behave the same as the web editor</p>",
        "id": 425073990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709727928
    },
    {
        "content": "<p>Well, this is in editing mathlib. Is the update really, really recent? I'll try pulling master.</p>",
        "id": 425074128,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709727975
    },
    {
        "content": "<p>There was a big version bump yesterday</p>",
        "id": 425075172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709728345
    },
    {
        "content": "<p>Here are the options you can set:</p>\n<ul>\n<li>if <code>pp.proofs</code> is false (default is false), then proofs that are any more complicated than a free variable or a constant print as <code>⋯</code></li>\n<li>if <code>pp.proofs</code> is false and <code>pp.proofs.withType</code> is true (the default just changed to false), then omitted proofs print with their types, like <code>(⋯ : p)</code></li>\n<li>if <code>pp.proofs</code> is false, then <code>pp.proofs.threshold</code> can be set to a number greater than <code>0</code> to allow more complicated proof terms to be pretty printed.</li>\n</ul>",
        "id": 425126960,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709742152
    },
    {
        "content": "<p>The purpose of the new symbol <code>⋯</code> vs <code>_</code> is that when you copy/paste it from the Infoview into your code, it gives you a warning to let you know some term was omitted, in case you didn't notice. Otherwise, <code>⋯</code> behaves like <code>_</code>.</p>",
        "id": 425127287,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709742236
    },
    {
        "content": "<p>Awesome! Thanks.</p>",
        "id": 425127424,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709742270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> has marked this topic as resolved.</p>",
        "id": 425127463,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709742281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20dots.20in.20infoview/near/425126960\">said</a>:</p>\n<blockquote>\n<p>(the default [for <code>withType</code>] just changed to false),</p>\n</blockquote>\n<p>This is the second-best news I could ever have hoped for in the space of changes to default options :)</p>",
        "id": 425187199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709762990
    }
]