[
    {
        "content": "<p>First of all I wanted to say thank to the lean prover community for creating such excellent tools as well as the instructional materials.  It's been really nice to explore formal mathematics in Mathematics in Lean. Is \"general\" the right place for help requests?</p>\n<p>I'm now working on <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C07_Hierarchies.html#sub-objects\">§ 7.3</a><br>\nand have stumbled on what I think is a bit of a confusing error. I'm trying to prove the definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Submonoid.Setoid</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">M</span>  <span class=\"n\">where</span>\n</code></pre></div>\n<p>and I had what I thought was a promising approach</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Submonoid.Setoid</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">M</span>  <span class=\"n\">where</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">z</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">N.one_mem</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">N.one_mem</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">h.symm</span><span class=\"o\">⟩</span>\n    <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">huv</span><span class=\"o\">⟩</span>\n      <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"n\">hv'</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">hvw</span><span class=\"o\">⟩</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">CommMonoid.mul_comm</span> <span class=\"n\">v</span> <span class=\"n\">v'</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v'</span><span class=\"o\">,</span> <span class=\"n\">N.mul_mem</span> <span class=\"n\">hu</span> <span class=\"n\">hv'</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">N.mul_mem</span> <span class=\"n\">hw</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">huv</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">hvw</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span>\n        <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">CommMonoid.mul_comm</span> <span class=\"n\">v</span> <span class=\"n\">v'</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h</span>\n      <span class=\"o\">)⟩</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>but this yields a somewhat confusing error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">106</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"bp\">-</span><span class=\"mi\">106</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v'</span> <span class=\"bp\">=</span> <span class=\"n\">v'</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">v'</span> <span class=\"bp\">=</span> <span class=\"n\">v'</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>If I skip the indirection and just try </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">...</span>\n        <span class=\"n\">exact</span> <span class=\"n\">CommMonoid.mul_comm</span> <span class=\"n\">v</span> <span class=\"n\">v'</span>\n</code></pre></div>\n<p>The error becomes somewhat clearer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">105</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"bp\">-</span><span class=\"mi\">105</span><span class=\"o\">:</span><span class=\"mi\">39</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">CommMonoid.mul_comm</span> <span class=\"n\">v</span> <span class=\"n\">v'</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semigroup.toMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toSemigroup</span> <span class=\"n\">M</span> <span class=\"n\">CommMonoid.toMonoid</span><span class=\"o\">)))</span> <span class=\"n\">v</span> <span class=\"n\">v'</span> <span class=\"bp\">=</span> <span class=\"n\">v'</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semigroup.toMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toSemigroup</span> <span class=\"n\">M</span> <span class=\"n\">DivInvMonoid.toMonoid</span><span class=\"o\">)))</span> <span class=\"n\">v</span> <span class=\"n\">v'</span> <span class=\"bp\">=</span> <span class=\"n\">v'</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I haven't fully groked how implicit resolution works here, but that <code>DivInvMonoid</code> seems suspicious<br>\nI compared with the solution where it seams that the idea is commute with the <code>y</code> and <code>v</code> ( <code>b</code> and <code>z</code> in the solution proof):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">w'</span><span class=\"o\">,</span> <span class=\"n\">hw'</span><span class=\"o\">,</span> <span class=\"n\">z'</span><span class=\"o\">,</span> <span class=\"n\">hz'</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"bp\">*</span><span class=\"n\">w'</span><span class=\"o\">,</span> <span class=\"n\">N.mul_mem</span> <span class=\"n\">hw</span> <span class=\"n\">hw'</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">z'</span><span class=\"o\">,</span> <span class=\"n\">N.mul_mem</span> <span class=\"n\">hz</span> <span class=\"n\">hz'</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is there a way to make this work by commuting the two divisor elements?</p>",
        "id": 412806151,
        "sender_full_name": "Jan Cristina",
        "timestamp": 1705230897
    },
    {
        "content": "<p>Not at a computer right now but <code>CommMonoid.mul_comm</code> looks like a code smell -- what happens if you just use <code>mul_comm</code>? The user isn't supposed to have to worry about implementation details such as DivInvMonoid.</p>",
        "id": 412806311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705231075
    },
    {
        "content": "<p>I changed the proof a little:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">huv</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">hvw</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">mul_comm</span> <span class=\"n\">v</span> <span class=\"n\">v'</span>\n</code></pre></div>\n<p>and it still looks like the same error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">105</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"bp\">-</span><span class=\"mi\">105</span><span class=\"o\">:</span><span class=\"mi\">39</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">CommMonoid.mul_comm</span> <span class=\"n\">v</span> <span class=\"n\">v'</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semigroup.toMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toSemigroup</span> <span class=\"n\">M</span> <span class=\"n\">CommMonoid.toMonoid</span><span class=\"o\">)))</span> <span class=\"n\">v</span> <span class=\"n\">v'</span> <span class=\"bp\">=</span> <span class=\"n\">v'</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semigroup.toMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toSemigroup</span> <span class=\"n\">M</span> <span class=\"n\">DivInvMonoid.toMonoid</span><span class=\"o\">)))</span> <span class=\"n\">v</span> <span class=\"n\">v'</span> <span class=\"bp\">=</span> <span class=\"n\">v'</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 412807071,
        "sender_full_name": "Jan Cristina",
        "timestamp": 1705231773
    },
    {
        "content": "<p>Sounds like you may have two multiplications defined</p>",
        "id": 412807213,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705231918
    },
    {
        "content": "<p>I originally tried a <code>rw [mul_comm]</code>, <code>rw [mul_comm v]</code>, and <code>rw [mul_comm v']</code> but it couldn't find matchin patterns (also tried adding reverse arrows)</p>",
        "id": 412807264,
        "sender_full_name": "Jan Cristina",
        "timestamp": 1705231941
    },
    {
        "content": "<p>Try putting <code>#where</code> before <code>def Submonoid.Setoid [CommMonoid M]</code></p>",
        "id": 412807306,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705231987
    },
    {
        "content": "<p>I forgot I do have some variables in scope that could be messing with it. I got the following from the <code>#where</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gm</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sbgm</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup₁</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I deleted those variables and now it works! Thanks!</p>",
        "id": 412807756,
        "sender_full_name": "Jan Cristina",
        "timestamp": 1705232329
    },
    {
        "content": "<p>That's why you should post full <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s.</p>",
        "id": 412808587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705233128
    },
    {
        "content": "<p>It's probably the <code>Group M</code>, then</p>",
        "id": 412808998,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705233544
    },
    {
        "content": "<p>Should MIL be suggesting for this exercise that you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Con#doc\">docs#Con</a> instead of <code>Setoid</code>?</p>",
        "id": 412813333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705237537
    },
    {
        "content": "<p>This is a very special context where everything is basically redone from scratch. So indeed one must be careful not to mix hand-rolled classes with Mathlib ones.</p>",
        "id": 412823726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705246029
    },
    {
        "content": "<p>I really do believe this is a scenario that could greatly benefit from having better error printing. The error \"<code>v * v' = v' * v</code> is expected to have type <code>v * v' = v' * v</code>\" is not usable, since the actually-differring bit (which instance of <code>Mul</code> is used here) is hidden. I've encountered it more than once and it can be quite frustrating.<br>\nI don't know how hard it would be to detect cases like this, but even just having a diff of the fully-expanded expressions would help in that scenario.</p>",
        "id": 412825304,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705247325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, I think in this example you are telling the reader to use the mathlib versions, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Submonoid.Setoid</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">M</span>  <span class=\"n\">where</span>\n</code></pre></div>\n<p>Maybe this is a mistake and you meant to write <code>Submonoid₁</code> if you intended the from-scratch version?</p>",
        "id": 412826660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705248480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380890\">Emilie (Shad Amethyst)</span> <a href=\"#narrow/stream/113488-general/topic/Confusing.20error.20in.20Mathematics.20in.20Lean.207.2E3/near/412825304\">said</a>:</p>\n<blockquote>\n<p>I don't know how hard it would be to detect cases like this, but even just having a diff of the fully-expanded expressions would help in that scenario.</p>\n</blockquote>\n<p>Having the type mismatch error figure out how to pretty print the expressions to highlight a difference is something that's at least on my own radar, and I think it would be nice to have. It's a bit subtle to do in general, since the system needs to be able to turn off notation pretty printing here and there to be able to reveal where the difference is. A basic version that can't handle notations, but which can reveal implicit arguments to functions, shouldn't be so hard to implement.</p>\n<p>Side note: ignoring pretty printing issues, there's the general problem of coming up with an explanation for why two expressions are not definitionally equal, which to do for some value of 'right' would involve a version of <code>isDefEq</code> that takes the execution trace and can synthesize a reason why expressions aren't defeq. That seems like a lot of work, and it's not clear that these synthesized reasons would be understandable as error messages, so coming up with some ad hoc syntax-based heuristics for why some expressions might not be defeq seems like a better approach. Computing a diff is a heuristic because, for example, <code>Function.const 1 2</code> is not defeq to <code>Function.const 3 4</code>, but that's because <code>1</code> and <code>3</code> aren't defeq, and it has nothing to do with <code>2</code> and <code>4</code>.</p>",
        "id": 412847023,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705266815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Confusing.20error.20in.20Mathematics.20in.20Lean.207.2E3/near/412826660\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span>, I think in this example you are telling the reader to use the mathlib versions, right?</p>\n</blockquote>\n<p>Sorry, I wrote my message without checking this specific example and it was indeed misleading. This exercise is indeed using Mathlib's classes.</p>",
        "id": 412878327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705287952
    }
]