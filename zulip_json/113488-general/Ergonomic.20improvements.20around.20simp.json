[
    {
        "content": "<p>I have a feature I'd like to see added and I'm interested in contributing it to learn the contribution process. </p>\n<p>The feature:<br>\nI'd like to make it so <code>simp only [A B]</code> warns if B is not used (for now only in proofs that aren't split to avoid difficulties where <code>B</code> is used in some branches but not in all).</p>\n<p>Benefits:<br>\nWhen updating our code, we see broken proofs that report an error at some line after <code>simp only [A B]</code> even though the root cause of the issue is that <code>B</code> is no longer being applied. Warning when this happens will make fixing proofs easier.</p>\n<p>Drawbacks:<br>\nThe main concern I see is that this will  spam warnings in existing code bases. If this will be a problem, I could implement this feature under a new name (maybe <code>simp wonly</code>), or we could make it opt-in (or opt-out), or?</p>\n<p>Do people think this would be generally useful? Are there other concerns I've missed? Does someone have pointers on where to get started for the actual code change?</p>\n<p>Thanks in advance!</p>",
        "id": 444804551,
        "sender_full_name": "Andrew Wells",
        "timestamp": 1718407161
    },
    {
        "content": "<p>The way is use simp is to normally <code>simp?</code> or <code>simp? [extra defs/lemmas...]</code> and click on the suggested tooltip</p>",
        "id": 444805083,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718407520
    },
    {
        "content": "<p>Usually the resulting <code>simp only</code> only contains the lemmas that are needed.</p>",
        "id": 444805103,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718407536
    },
    {
        "content": "<p>simp's ability to find simp lemmas automatically is, to my mind, a huge benefit that I would never forgo, so I don't see myself starting with a <code>simp only [def list]</code> and building it up.</p>",
        "id": 444805222,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718407632
    },
    {
        "content": "<p>Isn't the issue that this is a previously-squeezed simp which is no longer working after a mathlib bump?</p>",
        "id": 444806331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718408432
    },
    {
        "content": "<p>I thought it already had the behavior being requested here?</p>",
        "id": 444806842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718408817
    },
    {
        "content": "<p>I think in principle you have a <code>simp only [&lt;arbitrary lemma/def list&gt;]</code> which isn't automatically minimised.</p>",
        "id": 444809150,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718409922
    },
    {
        "content": "<p>An implementation difficulty would be that you would need to support things like <code>split &lt;;&gt; simp [A, B]</code>, where perhaps <code>B</code> is only used in one of the two branches. People would find it pretty annoying if that were linted.</p>",
        "id": 444837900,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718436114
    },
    {
        "content": "<p>As for implementation, see <code>Lean.Meta.Simp.Stats</code> where the actual theorems used in a <code>simp</code> call are recorded.</p>",
        "id": 444837974,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718436163
    },
    {
        "content": "<p>Personally I think such a linter would be good. When cleaning up old code I do often find <code>simp only</code> statements containing (now) unnecessary lemmas, and it is extra step while cleaning to deal with these.</p>",
        "id": 444838072,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718436255
    },
    {
        "content": "<p>This can also cause issues with minimizing imports: we will flag the import as unused even if removing it will fail because we mention a lemma in a simp call that doesn't use it</p>",
        "id": 444839909,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718438164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"604246\">Andrew Wells</span> <a href=\"#narrow/stream/113488-general/topic/Ergonomic.20improvements.20around.20simp/near/444804551\">said</a>:</p>\n<blockquote>\n<p>Drawbacks:<br>\nThe main concern I see is that this will spam warnings in existing code bases. If this will be a problem, I could implement this feature under a new name (maybe <code>simp wonly</code>), or we could make it opt-in (or opt-out), or?</p>\n</blockquote>\n<p>Ideally this would be implemented a linter, and so <code>set_option linter.unused_simp_theorems false</code> could disable it (and indeed downstream projects could globally disable it). If we can get to the point of no false positive, I think this would be reasonable to turn on globally.</p>",
        "id": 444840522,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718438713
    },
    {
        "content": "<p>It's only possible to globally disable it if this linter goes in core, right? <code>leanOptions</code> in the lakefile doesn't work for anything else.</p>",
        "id": 444840776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718438910
    },
    {
        "content": "<p>I opened an issue (<a href=\"https://github.com/leanprover/lean4/issues/4483\">https://github.com/leanprover/lean4/issues/4483</a>) and summarized the conversation. Let me know if I missed anything.</p>\n<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> To make sure I understand correctly: You're saying Lean will currently flag an import as unused even if removing it will fail, and this is another argument for adding the linter I proposed. That's what I put in the summary, so let me know if I need to change it.</p>",
        "id": 445241104,
        "sender_full_name": "Andrew Wells",
        "timestamp": 1718665253
    }
]