[
    {
        "content": "<p>I have the following goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">â„•</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">âˆƒ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">â‰ </span> <span class=\"n\">g</span>\n<span class=\"bp\">âŠ¢</span> <span class=\"bp\">âˆƒ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">â‰ </span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>I can prove it using <code>simp_rw [ne_comm] at h</code> but <code>simp_rw [ne_comm]</code> does not work with the error <code>simp made no progress</code>. Any ideas as to why?</p>",
        "id": 435416623,
        "sender_full_name": "Sina H ð“ƒµ",
        "timestamp": 1714059312
    },
    {
        "content": "<p>Remember that <code>simp_rw</code> is a <code>simp only</code> for each lemma you give it. That means that it will apply the lemma repeatedly until it can't be applied anymore.  For a lemma like <code>ne_comm</code>, it can be applied indefinitely.</p>\n<p>However, <code>simp</code> knows to choose a normal form when it enters a loop. In this case, it seems the normal form wants <code>g</code> to come before <code>f n</code>?</p>",
        "id": 435419993,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714060522
    },
    {
        "content": "<p>That makes sense, and it explains why <code>simp_rw [ne_comm]</code> works at the hypothesis (which is not in the normal form) and it does not at the goal.</p>",
        "id": 435421850,
        "sender_full_name": "Sina H ð“ƒµ",
        "timestamp": 1714061088
    },
    {
        "content": "<p>You can use <code>simpa</code> for a more robust way to handle this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">â„•</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">âˆƒ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">â‰ </span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">âˆƒ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">â‰ </span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_comm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>This uses <code>ne_comm</code> to normalize both, followed up with <code>exact h</code></p>",
        "id": 435433210,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714065115
    },
    {
        "content": "<p>Or there's using <code>convert</code> to \"enter\" the shared contexts and then using a plain <code>rw</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">â„•</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">âˆƒ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">â‰ </span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">âˆƒ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">â‰ </span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"mi\">3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ne_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 435433355,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714065164
    },
    {
        "content": "<p>Or there's <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span>'s <code>peel</code> tactic, which can also enter a shared context, but it manages to keep it as a local hypothesis (useful in case your hypothesis isn't actually equivalent to the goal)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">â„•</span> <span class=\"bp\">â†’</span> <span class=\"n\">â„•</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">âˆƒ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">â‰ </span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">âˆƒ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">â‰ </span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">h</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">ne_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 435433575,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714065258
    }
]