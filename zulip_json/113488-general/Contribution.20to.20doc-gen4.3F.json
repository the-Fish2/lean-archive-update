[
    {
        "content": "<p>I'd like to see if I can fix or add some features to doc-gen4, for example:</p>\n<ul>\n<li>generate reference page according to <code>references.bib</code>,</li>\n<li>make <code>&lt;https://...&gt;</code> in the docstring work; currently they are output as-is, which produces an invalid HTML tag, and renders nothing in the browser.</li>\n</ul>\n<p>I'd like to ask for some advices about the codebase of doc-gen4. How to get started with? Is the codebase complicated?</p>",
        "id": 442921418,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717629216
    },
    {
        "content": "<p>You can check out the repo here:</p>\n<p><a href=\"https://github.com/leanprover/doc-gen4\">https://github.com/leanprover/doc-gen4</a></p>\n<p>PRs can be submitted just like in mathlib repo. <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span></p>",
        "id": 442951842,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1717642373
    },
    {
        "content": "<p>You can contribute that type of stuff if you want sure. Just note that doc-gen is <em>not</em> a tool that's specific to mathlib, so the solutions you come up with should be generic enough to support arbitrary Lean repositories, not only mathlib.</p>",
        "id": 442977418,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717654844
    },
    {
        "content": "<p>Regarding <code>&lt;https://...&gt;</code> problem, I quickly scanned the code, seems that it uses <code>CMark.lean</code> to parse the markdown, which calls the C library <code>cmark</code> to do the actual work. According to <code>cmark</code> website, it can process links of the form<code>&lt;https://...&gt;</code> in markdown file. So I'm confused why doc-gen4 cannot process them. Maybe because the version of <code>cmark</code> used in <code>CMark.lean</code> is too old? It's two years ago.</p>",
        "id": 443026885,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717670593
    },
    {
        "content": "<p>I don't know, I never worked on cmark.lean itself so much, if you want you can investigate whether upgrading cmark helps.</p>",
        "id": 443027081,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717670667
    },
    {
        "content": "<p>Let me setup the build environment later.</p>",
        "id": 443027296,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717670767
    },
    {
        "content": "<p>Bad news: the <code>cmark</code> library does not support tables in markdown... But do we ever need the table support? When I was using C++, I usually use <code>doxygen</code> for doc generation, which is also using markdown, and it supports tables.</p>",
        "id": 443151946,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717704813
    },
    {
        "content": "<p>There is an issue <a href=\"https://github.com/leanprover/doc-gen4/issues/59\">https://github.com/leanprover/doc-gen4/issues/59</a> asking for a pure lean markdown processor.</p>",
        "id": 443152272,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717704908
    },
    {
        "content": "<p>This is most likely not going to happen, within some time we are probably going to switch to David's tool for rendering doc strings anyways.</p>",
        "id": 443152956,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717705145
    },
    {
        "content": "<p>Well, I mean anyone can still make it happen of course, but I won't invest time in it and whatever comes out of it will be a temporary solution is my point.</p>",
        "id": 443153060,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717705186
    },
    {
        "content": "<p>Can you provide some information on David's tool?</p>",
        "id": 443154208,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717705539
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/verso\">https://github.com/leanprover/verso</a></p>",
        "id": 443154407,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717705593
    },
    {
        "content": "<p>Thanks. So doc-gen4 will be deprecated? And how long do you think verso will be available for the doc-generation tools for mathlib docs?</p>",
        "id": 443155868,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717706027
    },
    {
        "content": "<p>No, as I said above doc-gen is going to use to verso to render doc-strings. Verso is not a replacement, it is compelentary in that we can use it to render doc-strings and also render general purpose book or manual style documentation with it. There is no official hard timeline on it</p>",
        "id": 443156324,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717706169
    },
    {
        "content": "<p>I see. Thanks for the explanation.</p>",
        "id": 443157621,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717706577
    },
    {
        "content": "<p>Regarding <code>&lt;https://...&gt;</code> problem, I located the code here &lt;<a href=\"https://github.com/leanprover/doc-gen4/blob/c7f4ac84b973b6efd8f24ba2b006cad1b32c9c53/DocGen4/Output/DocString.lean#L211\">https://github.com/leanprover/doc-gen4/blob/c7f4ac84b973b6efd8f24ba2b006cad1b32c9c53/DocGen4/Output/DocString.lean#L211</a>&gt;. Seems that <code>cmark</code> itself has no problem, the problem is that before calling <code>cmark</code> the <code>&lt;</code> and <code>&gt;</code>, etc. are escaped, so <code>cmark</code> cannot see <code>&lt;https://...&gt;</code>. After modifying the returned html, the characters are unescaped, producing invalid html <code>&lt;https://...&gt;</code>.</p>\n<p>I haven't think of a way to fix it, though.</p>",
        "id": 443180238,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717716379
    },
    {
        "content": "<p>For the <code>&lt;url&gt;</code> issue, maybe just write them in a proper <code>[title](url)</code> is the better approach anyway.</p>\n<p>I'm actually more excited about the <a href=\"#narrow/stream/287929-mathlib4/topic/References.20in.20QuadraticForm.20and.20CliffordAlgebra.2EContraction\">reference page</a>, and possibly you'll be interested in <a href=\"#narrow/stream/287929-mathlib4/topic/I've.20broken.20a.20documentation.20page/near/435310784\">fixing math formulas</a>.</p>",
        "id": 443197120,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717729028
    },
    {
        "content": "<p>I was interested to work on them, but as Verso is coming, it would be too temporary. But Verso doesn't have full support for math formulas yet (<a href=\"https://github.com/leanprover/verso/pull/54\">leanprover/verso#54</a>), so sadly at the moment there is no optimal way to approach this.</p>",
        "id": 443199521,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717730254
    },
    {
        "content": "<p>I think <code>&lt;URL&gt;</code> is standard enough that we should support it, especially since there's no way to flag it at compile time if you get it wrong</p>",
        "id": 443212652,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717737298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443180238\">said</a>:</p>\n<blockquote>\n<p>Regarding <code>&lt;https://...&gt;</code> problem, I located the code here &lt;<a href=\"https://github.com/leanprover/doc-gen4/blob/c7f4ac84b973b6efd8f24ba2b006cad1b32c9c53/DocGen4/Output/DocString.lean#L211\">https://github.com/leanprover/doc-gen4/blob/c7f4ac84b973b6efd8f24ba2b006cad1b32c9c53/DocGen4/Output/DocString.lean#L211</a>&gt;. Seems that <code>cmark</code> itself has no problem, the problem is that before calling <code>cmark</code> the <code>&lt;</code> and <code>&gt;</code>, etc. are escaped, so <code>cmark</code> cannot see <code>&lt;https://...&gt;</code>. After modifying the returned html, the characters are unescaped, producing invalid html <code>&lt;https://...&gt;</code>.</p>\n<p>I haven't think of a way to fix it, though.</p>\n</blockquote>\n<p>What would happen if you simply remove the <code>Html.escape</code> call? It seems in docstring, <code>&lt;</code> and <code>&gt;</code> are mostly protected in code blocks.</p>",
        "id": 443215113,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717738491
    },
    {
        "content": "<p>This goes back to <a href=\"https://github.com/leanprover/doc-gen4/pull/157\">leanprover/doc-gen4#157</a> .</p>",
        "id": 443215568,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717738844
    },
    {
        "content": "<p>But the example it points to doesn't use any of the escaped character at all. In principle, this should not be handled in such an ad hoc way, extra escaping would cause dilemma like this (that removing extra escaping fails some case, adding it fails some other case and there is no simple solution to fix without removing the extra escaping).</p>\n<p>CMark.lean was designed to be a simple wrapper (so simple that it literally wraps only one C function, <code>cmark_markdown_to_html</code>) for <a href=\"https://github.com/commonmark/cmark\">cmmark</a> which has a <a href=\"https://spec.commonmark.org/0.31.2/#autolinks\">spec</a>.</p>\n<p>I would suggest to figure out what kind of cases would removing the escape fail , and fix them both in an integrated solution. If we want to support standard markdown, we need to remove extra layers to resume the standard-conforming behavior.</p>",
        "id": 443216299,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717739345
    },
    {
        "content": "<p>For fixing the reference page, the spec already supports <a href=\"https://spec.commonmark.org/0.31.2/#collapsed-reference-link\">collapsed reference link</a>, so we only need to generate the proper <code>[foo]: /url \"title\"</code>-like stuff from the bib file, and append that to the markdown passed to cmark.</p>\n<p>For fixing the math formula, the spec has no support at all, so this indeed needs an extra layer of pass-through treatment, namely replace all math formulas to placeholders  in the markdown that passed to cmark, then replace them back after recieving the result from cmark.</p>",
        "id": 443216935,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717739810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443216935\">said</a>:</p>\n<blockquote>\n<p>For fixing the reference page, the spec already supports <a href=\"https://spec.commonmark.org/0.31.2/#collapsed-reference-link\">collapsed reference link</a>, so we only need to generate the proper <code>[foo]: /url \"title\"</code>-like stuff from the bib file, and append that to the markdown passed to cmark.</p>\n</blockquote>\n<p>Yes, I found that the reference page could potentially be easier to work with. The list of reference page can be generated by a simple converter which converts the <code>bib</code> file to html or markdown (we need to handle some minimal amount of LaTeX commands). We can also get the full list of <code>[foo]: link</code>s. A simple and ad-hoc way is just append this huge list to the markdown input before each call to <code>CMark.renderHtml</code>. A better way is scan the markdown input, and we only append the used references from the list to it.</p>",
        "id": 443253064,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717752578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443199521\">said</a>:</p>\n<blockquote>\n<p>But Verso doesn't have full support for math formulas yet (<a href=\"https://github.com/leanprover/verso/pull/54\">leanprover/verso#54</a>)</p>\n</blockquote>\n<p>I think neither does doc-gen4. It just (pretend to?) identify <code>$ ... $</code> and leave them as is in the output html. The actual render of math formulas is by MathJax at client side.</p>",
        "id": 443253603,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717752727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443215113\">said</a>:</p>\n<blockquote>\n<p>What would happen if you simply remove the <code>Html.escape</code> call? It seems in docstring, <code>&lt;</code> and <code>&gt;</code> are mostly protected in code blocks.</p>\n</blockquote>\n<p>I think this is reasonable. Even if unprotected <code>&lt;</code> and <code>&gt;</code>, <code>cmark</code> will escape them. The potential problem is for code blocks and LaTeX formulas, since these symbols in them will also be escaped by <code>cmark</code>. So the unescape code in the following processing is necessary (originally I think that was not necessary). Let me try what will be happed if I revert <a href=\"https://github.com/leanprover/doc-gen4/pull/157\">https://github.com/leanprover/doc-gen4/pull/157</a>.</p>",
        "id": 443256410,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717753671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443253603\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443199521\">said</a>:</p>\n<blockquote>\n<p>But Verso doesn't have full support for math formulas yet (<a href=\"https://github.com/leanprover/verso/pull/54\">leanprover/verso#54</a>)</p>\n</blockquote>\n<p>I think neither does doc-gen4. It just (pretend to?) identify <code>$ ... $</code> and leave them as is in the output html. The actual render of math formulas is by MathJax at client side.</p>\n</blockquote>\n<p>The issue is that CMark will mess with what's inside <code>$</code> pairs, e.g. <code>_</code>, <code>\\\\</code> etc. these syntax overlaps between Markdown and LaTeX. so it's broken when MathJax sees the HTML. The only way to prevent this to avoid CMark seeing and touching them at all.</p>",
        "id": 443257844,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717754139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443257844\">said</a>:</p>\n<blockquote>\n<p>The only way to prevent this to avoid CMark seeing and touching them at all.</p>\n</blockquote>\n<p>I agree.</p>",
        "id": 443259374,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717754611
    },
    {
        "content": "<p>The MathJax itself also have some quirks regarding html escape &lt;<a href=\"https://www.mathjax.org/#demo\">https://www.mathjax.org/#demo</a>&gt;:</p>\n<blockquote>\n<p>The text you enter is actually HTML, so you can include tags if you want; but this also means you have to be careful how you use less-than signs, ampersands, and other HTML special characters within your math (surrounding them by spaces should be sufficient).</p>\n</blockquote>\n<p>This code: <code>$1 &lt; 2$ vs $1 &amp;lt; 2$ and $1 \\&amp; 2$ vs $1 \\&amp;amp; 2$</code> produces the same result, for example.</p>",
        "id": 443260215,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717754820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443256410\">said</a>:</p>\n<blockquote>\n<p>Let me try what will be happed if I revert <a href=\"https://github.com/leanprover/doc-gen4/pull/157\">https://github.com/leanprover/doc-gen4/pull/157</a>.</p>\n</blockquote>\n<p>This indeed fixes the <code>&lt;url&gt;</code> parsing:</p>\n<ul>\n<li>before: <code>&lt;li&gt;can you see the link &lt;https://github.com&gt;&lt;/li&gt;</code></li>\n<li>after: <code>&lt;li&gt;can you see the link &lt;a href=\"https://github.com\"&gt;https://github.com&lt;/a&gt;&lt;/li&gt;</code></li>\n</ul>\n<p>but it also introduce other problems:</p>\n<ul>\n<li>before: <code>&lt;code&gt;x &amp;amp;&amp;amp; y&lt;/code&gt;, is the boolean \"and\" operation</code></li>\n<li>after: <code>&lt;code&gt;x &amp;&amp; y&lt;/code&gt;, is the boolean \"and\" operation</code></li>\n</ul>\n<p>I think the final output html should not be unescape anymore, but during internal post-processing we may need to unescape it to get some information correct.</p>",
        "id": 443261382,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717755101
    },
    {
        "content": "<p><a href=\"https://github.com/gohugoio/hugo-goldmark-extensions\">hugo-goldmark-extensions</a> has <a href=\"https://github.com/gohugoio/hugo-goldmark-extensions/pull/2/files\">a  passthrough parser</a> that handles this quite well, and it has many test cases. It also has the advantage that it can use the extensibility of the markdown parser and unfortunately CMark.lean exposes no access to the AST and low-level functionalities of cmark, so no extension is possible.</p>\n<p>Maybe one day, in Lean ecosystem, there would be a Markdown parser based on other extensible Markdown parsers, maybe a port of markdown-it etc.</p>",
        "id": 443262408,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717755434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443261382\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443256410\">said</a>:</p>\n<blockquote>\n<p>Let me try what will be happed if I revert <a href=\"https://github.com/leanprover/doc-gen4/pull/157\">https://github.com/leanprover/doc-gen4/pull/157</a>.</p>\n</blockquote>\n<p>I think the final output html should not be unescape anymore, but during internal post-processing we may need to unescape it to get some information correct.</p>\n</blockquote>\n<p>Maybe move the esaping to be after the cmark call? Then the final HTML is still escaped, but cmark would not need to see and be interfered by the escaping.</p>",
        "id": 443263000,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717755639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443261382\">said</a>:</p>\n<blockquote>\n<ul>\n<li>after: <code>&lt;code&gt;x &amp;&amp; y&lt;/code&gt;, is the boolean \"and\" operation</code></li>\n</ul>\n</blockquote>\n<p>This is surely a bug in cmark? It should html escape code blocks for sure.</p>",
        "id": 443293919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717765291
    },
    {
        "content": "<p>cmark itself has no bug. But in our lean code we unescape the return value of cmark afterwards. To fix it the current logic need to be changed. I will try to figure it out later.</p>",
        "id": 443295271,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717765770
    },
    {
        "content": "<p>Yes, we certainly should not be either escaping before or escaping after</p>",
        "id": 443296390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717766168
    },
    {
        "content": "<p>I think something like this might be right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">elementToHTML</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Element</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Html</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">Element</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">attr</span><span class=\"w\"> </span><span class=\"n\">cont</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">element</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"n\">attr</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"bp\">.</span><span class=\"n\">toArray</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span>\n<span class=\"w\">    </span><span class=\"n\">cont</span><span class=\"bp\">.</span><span class=\"n\">filterMap</span><span class=\"w\"> </span><span class=\"k\">fun</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">Element</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">elementToHTML</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">Comment</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">none</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">Character</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">content</span>\n\n<span class=\"sd\">/-- Convert docstring to Html. -/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">docStringToHtml</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HtmlM</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Html</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">rendered</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">CMark</span><span class=\"bp\">.</span><span class=\"n\">renderHtml</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">manyDocument</span><span class=\"w\"> </span><span class=\"n\">rendered</span><span class=\"bp\">.</span><span class=\"n\">mkIterator</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Parsec</span><span class=\"bp\">.</span><span class=\"n\">ParseResult</span><span class=\"bp\">.</span><span class=\"n\">success</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"bp\">.</span><span class=\"n\">mapM</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">elementToHTML</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">modifyElement</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Html</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">rendered</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 443301048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717767757
    },
    {
        "content": "<p>Need to rerun agaist mathlib docs and do eye-ball examination to be sure. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 443301364,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717767849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443301364\">said</a>:</p>\n<blockquote>\n<p>do eye-ball examination</p>\n</blockquote>\n<p>You can use some diff tool working on directories. Unfortunately, I'm not free today; I'll try it on Sunday.</p>",
        "id": 443396019,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717802724
    },
    {
        "content": "<p>My comment above is wrong; HTML.text I think is misnamed, I think it is actually indeed to represent raw html strings</p>",
        "id": 443400118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717804519
    },
    {
        "content": "<p>I'm still studying the exact function of this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">manyDocument</span><span class=\"w\"> </span><span class=\"n\">rendered</span><span class=\"bp\">.</span><span class=\"n\">mkIterator</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Parsec</span><span class=\"bp\">.</span><span class=\"n\">ParseResult</span><span class=\"bp\">.</span><span class=\"n\">success</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>Seems that <code>manyDocument</code> is a combination of Lean's built-in XML parser elements. I suspect that the strings in the return value <code>res</code> are already unescaped by the built-in parser. But I need to check if it's indeed the case.</p>",
        "id": 443533738,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717889352
    },
    {
        "content": "<p>I use the following stupid code to try to understand what is happening:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/-- Convert docstring to Html. -/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">docStringToHtml</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HtmlM</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Html</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"c1\">-- I don't know why `Html.escape` is necessary; it breaks `&lt;url&gt;` parsing</span>\n<span class=\"w\">  </span><span class=\"c1\">-- let escaped := Html.escape s</span>\n<span class=\"w\">  </span><span class=\"c1\">-- let rendered := CMark.renderHtml escaped</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">rendered</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">CMark</span><span class=\"bp\">.</span><span class=\"n\">renderHtml</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">debug_test</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"s2\">\"debug_test\"</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">debug_test</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"s2\">\"DEBUG: s = {s}\"</span>\n<span class=\"w\">    </span><span class=\"c1\">-- dbg_trace \"DEBUG: escaped = {escaped}\"</span>\n<span class=\"w\">    </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"s2\">\"DEBUG: rendered = {rendered}\"</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">manyDocument</span><span class=\"w\"> </span><span class=\"n\">rendered</span><span class=\"bp\">.</span><span class=\"n\">mkIterator</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Parsec</span><span class=\"bp\">.</span><span class=\"n\">ParseResult</span><span class=\"bp\">.</span><span class=\"n\">success</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"bp\">.</span><span class=\"n\">mapM</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">modifyElement</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">debug_test</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"s2\">\"DEBUG: before = {before}\"</span>\n<span class=\"w\">        </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"s2\">\"DEBUG: after = {after}\"</span>\n<span class=\"w\">      </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">Html</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">after</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Html</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">rendered</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I got the following debug output:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>DEBUG: s = debug_test\n\n# Try CommonMark\n\nYou can try CommonMark here.  This dingus is powered by\n[commonmark.js](https://github.com/commonmark/commonmark.js), the\nJavaScript reference implementation.\n\n1. item one\n2. item two\n   - sublist\n   - sublist\n3. can you see the link https://github.com\n5. can you see the link &lt;https://github.com&gt;\n\n[Link](http://a.com)\n\n[Link][1]\n\n[1]: http://b.org\n\n[GTM106]\n\n[Link][GTM106]\n\n[GTM106]: http://b.org/GTM106\n\n$y^2=x^3-x$\n\n## Main definitions\n\n- `hello`: world\n- `&lt; &gt; \" &amp;`\n\n&lt; &gt; \" &amp;\n\n\nDEBUG: rendered = &lt;p&gt;debug_test&lt;/p&gt;\n&lt;h1&gt;Try CommonMark&lt;/h1&gt;\n&lt;p&gt;You can try CommonMark here.  This dingus is powered by\n&lt;a href=\"https://github.com/commonmark/commonmark.js\"&gt;commonmark.js&lt;/a&gt;, the\nJavaScript reference implementation.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;item one&lt;/li&gt;\n&lt;li&gt;item two\n&lt;ul&gt;\n&lt;li&gt;sublist&lt;/li&gt;\n&lt;li&gt;sublist&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;can you see the link https://github.com&lt;/li&gt;\n&lt;li&gt;can you see the link &lt;a href=\"https://github.com\"&gt;https://github.com&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;a href=\"http://a.com\"&gt;Link&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"http://b.org\"&gt;Link&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"http://b.org/GTM106\"&gt;GTM106&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"http://b.org/GTM106\"&gt;Link&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;$y^2=x^3-x$&lt;/p&gt;\n&lt;h2&gt;Main definitions&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;hello&lt;/code&gt;: world&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;&amp;lt; &amp;gt; &amp;quot; &amp;amp;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&amp;lt; &amp;gt; &amp;quot; &amp;amp;&lt;/p&gt;\n\nDEBUG: before = &lt;p&gt;debug_test&lt;/p&gt;\nDEBUG: after = &lt;p&gt;debug_test&lt;/p&gt;\nDEBUG: before = &lt;h1&gt;Try CommonMark&lt;/h1&gt;\nDEBUG: after = &lt;h1 class=\"markdown-heading\" id=\"Try-CommonMark\"&gt;Try CommonMark &lt;a class=\"hover-link\" href=\"#Try-CommonMark\"&gt;#&lt;/a&gt;&lt;/h1&gt;\nDEBUG: before = &lt;p&gt;You can try CommonMark here.  This dingus is powered by\n&lt;a href=\"https://github.com/commonmark/commonmark.js\"&gt;commonmark.js&lt;/a&gt;, the\nJavaScript reference implementation.&lt;/p&gt;\nDEBUG: after = &lt;p&gt;You can try CommonMark here.  This dingus is powered by\n&lt;a href=\"https://github.com/commonmark/commonmark.js\"&gt;commonmark.js&lt;/a&gt;, the\nJavaScript reference implementation.&lt;/p&gt;\nDEBUG: before = &lt;ol&gt;\n&lt;li&gt;item one&lt;/li&gt;\n&lt;li&gt;item two\n&lt;ul&gt;\n&lt;li&gt;sublist&lt;/li&gt;\n&lt;li&gt;sublist&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;can you see the link https://github.com&lt;/li&gt;\n&lt;li&gt;can you see the link &lt;a href=\"https://github.com\"&gt;https://github.com&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\nDEBUG: after = &lt;ol&gt;\n&lt;li&gt;item one&lt;/li&gt;\n&lt;li&gt;item two\n&lt;ul&gt;\n&lt;li&gt;sublist&lt;/li&gt;\n&lt;li&gt;sublist&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;can you see the link https://github.com&lt;/li&gt;\n&lt;li&gt;can you see the link &lt;a href=\"https://github.com\"&gt;https://github.com&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\nDEBUG: before = &lt;p&gt;&lt;a href=\"http://a.com\"&gt;Link&lt;/a&gt;&lt;/p&gt;\nDEBUG: after = &lt;p&gt;&lt;a href=\"http://a.com\"&gt;Link&lt;/a&gt;&lt;/p&gt;\nDEBUG: before = &lt;p&gt;&lt;a href=\"http://b.org\"&gt;Link&lt;/a&gt;&lt;/p&gt;\nDEBUG: after = &lt;p&gt;&lt;a href=\"http://b.org\"&gt;Link&lt;/a&gt;&lt;/p&gt;\nDEBUG: before = &lt;p&gt;&lt;a href=\"http://b.org/GTM106\"&gt;GTM106&lt;/a&gt;&lt;/p&gt;\nDEBUG: after = &lt;p&gt;&lt;a href=\"http://b.org/GTM106\"&gt;GTM106&lt;/a&gt;&lt;/p&gt;\nDEBUG: before = &lt;p&gt;&lt;a href=\"http://b.org/GTM106\"&gt;Link&lt;/a&gt;&lt;/p&gt;\nDEBUG: after = &lt;p&gt;&lt;a href=\"http://b.org/GTM106\"&gt;Link&lt;/a&gt;&lt;/p&gt;\nDEBUG: before = &lt;p&gt;$y^2=x^3-x$&lt;/p&gt;\nDEBUG: after = &lt;p&gt;$y^2=x^3-x$&lt;/p&gt;\nDEBUG: before = &lt;h2&gt;Main definitions&lt;/h2&gt;\nDEBUG: after = &lt;h2 class=\"markdown-heading\" id=\"Main-definitions\"&gt;Main definitions &lt;a class=\"hover-link\" href=\"#Main-definitions\"&gt;#&lt;/a&gt;&lt;/h2&gt;\nDEBUG: before = &lt;ul&gt;\n&lt;li&gt;&lt;code&gt;hello&lt;/code&gt;: world&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;&lt; &gt; \" &amp;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\nDEBUG: after = &lt;ul&gt;\n&lt;li&gt;&lt;code&gt;&lt;a href=\".././Trydocgen/Basic.html#hello\"&gt;hello&lt;/a&gt;&lt;/code&gt;: world&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;&lt; &gt; \" &amp;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\nDEBUG: before = &lt;p&gt;&lt; &gt; \" &amp;&lt;/p&gt;\nDEBUG: after = &lt;p&gt;&lt; &gt; \" &amp;&lt;/p&gt;\n</code></pre></div>",
        "id": 443536740,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717892376
    },
    {
        "content": "<p>Seems that calling <code>toString</code> of <code>Lean.Xml.Element</code> is not appropriate here; it does not do any escaping on its values.</p>",
        "id": 443536909,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717892569
    },
    {
        "content": "<p>I think this code works <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">private</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Xml</span><span class=\"bp\">.</span><span class=\"n\">Attributes</span><span class=\"bp\">.</span><span class=\"n\">toStringEscaped</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Attributes</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">as</span><span class=\"bp\">.</span><span class=\"n\">fold</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">s!</span><span class=\"s2\">\" {n}=</span><span class=\"se\">\\\"</span><span class=\"s2\">{Html.escape v}</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span>\n\n<span class=\"kn\">mutual</span>\n\n<span class=\"kn\">private</span><span class=\"w\"> </span><span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Xml</span><span class=\"bp\">.</span><span class=\"n\">eToStringEscaped</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Element</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">String</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Element</span><span class=\"bp\">.</span><span class=\"n\">Element</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">s!</span><span class=\"s2\">\"&lt;{n}{a.toStringEscaped}&gt;{c.map cToStringEscaped |&gt;.foldl (· ++ ·) \"\"}&lt;/{n}&gt;\"</span>\n\n<span class=\"kn\">private</span><span class=\"w\"> </span><span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Xml</span><span class=\"bp\">.</span><span class=\"n\">cToStringEscaped</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Content</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">String</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Content</span><span class=\"bp\">.</span><span class=\"n\">Element</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">eToStringEscaped</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Content</span><span class=\"bp\">.</span><span class=\"n\">Comment</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">s!</span><span class=\"s2\">\"&lt;!--{c}--&gt;\"</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Content</span><span class=\"bp\">.</span><span class=\"n\">Character</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Html</span><span class=\"bp\">.</span><span class=\"n\">escape</span><span class=\"w\"> </span><span class=\"n\">c</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"sd\">/-- Convert docstring to Html. -/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">docStringToHtml</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HtmlM</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Html</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"c1\">-- I don't know why `Html.escape` is necessary; it breaks `&lt;url&gt;` parsing</span>\n<span class=\"w\">  </span><span class=\"c1\">-- let escaped := Html.escape s</span>\n<span class=\"w\">  </span><span class=\"c1\">-- let rendered := CMark.renderHtml escaped</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">rendered</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">CMark</span><span class=\"bp\">.</span><span class=\"n\">renderHtml</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">debug_test</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"s2\">\"debug_test\"</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">debug_test</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"s2\">\"DEBUG: s = {s}\"</span>\n<span class=\"w\">    </span><span class=\"c1\">-- dbg_trace \"DEBUG: escaped = {escaped}\"</span>\n<span class=\"w\">    </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"s2\">\"DEBUG: rendered = {rendered}\"</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">manyDocument</span><span class=\"w\"> </span><span class=\"n\">rendered</span><span class=\"bp\">.</span><span class=\"n\">mkIterator</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Parsec</span><span class=\"bp\">.</span><span class=\"n\">ParseResult</span><span class=\"bp\">.</span><span class=\"n\">success</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"bp\">.</span><span class=\"n\">mapM</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">eToStringEscaped</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">eToStringEscaped</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">modifyElement</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">debug_test</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"s2\">\"DEBUG: before = {before}\"</span>\n<span class=\"w\">        </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"s2\">\"DEBUG: after = {after}\"</span>\n<span class=\"w\">      </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">Html</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">after</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Html</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">rendered</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 443537944,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717893771
    },
    {
        "content": "<p>This also changes some docs of built-in functions, for example</p>\n<ul>\n<li>before: <code>\"outside in\", meaning that it will first look at the expression &lt;code&gt;_ + _ : &lt;a href=\".././Init/Data/Int/Basic.html#Int\"&gt;Int&lt;/a&gt;&lt;/code&gt;</code></li>\n<li>after: <code>&amp;quot;outside in&amp;quot;, meaning that it will first look at the expression &lt;code&gt;_ + _ : &lt;a href=\".././Init/Data/Int/Basic.html#Int\"&gt;Int&lt;/a&gt;&lt;/code&gt;</code></li>\n</ul>\n<p>Strictly speaking, the old output is not correct, as ideally the <code>\"</code> in html should also be escaped.</p>",
        "id": 443538072,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717893929
    },
    {
        "content": "<p>There's no reason to escape <code>\"</code> outside attribute values in HTML, but it's harmless</p>",
        "id": 443561255,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717912867
    },
    {
        "content": "<p>I think the missing escaping in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Xml.instToStringElement#doc\">docs#Lean.Xml.instToStringElement</a> is a bug</p>",
        "id": 443563110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717914518
    },
    {
        "content": "<p>We should file an issue (or make a PR) in the issue tracker (edit: <a href=\"https://github.com/leanprover/lean4/issues/4411\">https://github.com/leanprover/lean4/issues/4411</a>)</p>",
        "id": 443563157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717914580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443563110\">said</a>:</p>\n<blockquote>\n<p>I think the missing escaping in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Xml.instToStringElement#doc\">docs#Lean.Xml.instToStringElement</a> is a bug</p>\n</blockquote>\n<p>I agree. But when I came to the definition there were no any documentation describing it. So I was not sure if it's intended print without escaping.</p>",
        "id": 443581948,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717929150
    },
    {
        "content": "<p>I'm not sure if there are codes which relies on the unescaped behavior of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Xml.instToStringElement#doc\">docs#Lean.Xml.instToStringElement</a>, though.</p>",
        "id": 443582634,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717929768
    },
    {
        "content": "<p>I'm a bit nervous about generating HTML with functions that have XML in the name though</p>",
        "id": 443582706,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717929841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443582706\">said</a>:</p>\n<blockquote>\n<p>I'm a bit nervous about generating HTML with functions that have XML in the name though</p>\n</blockquote>\n<p>It's OK for me; XHTML is a form of HTML which must be also a valid XML document.</p>",
        "id": 443583172,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717930033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443581948\">said</a>:</p>\n<blockquote>\n<p>So I was not sure if it's intended print without escaping.</p>\n</blockquote>\n<p>If this was originally intended, then I would argue this was a design mistake that should still be fixed</p>",
        "id": 443584237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717930772
    },
    {
        "content": "<p>Yeah, but you're not serving XHTML</p>",
        "id": 443584692,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717931208
    },
    {
        "content": "<p>I think XML/XHTML/HTML concerns are much less relevant than handing escaped html to a markdown parser</p>",
        "id": 443584779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717931287
    },
    {
        "content": "<p>In practice I think browsers are pretty forgiving about serving one as the other</p>",
        "id": 443584796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717931307
    },
    {
        "content": "<p>PR for fixing <code>&lt;url&gt;</code> processing is created as &lt;<a href=\"https://github.com/leanprover/doc-gen4/pull/189\">https://github.com/leanprover/doc-gen4/pull/189</a>&gt;.</p>",
        "id": 443617017,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717954419
    },
    {
        "content": "<p>I guess we'll know if that worked in some number of hours?</p>",
        "id": 443642734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717967982
    },
    {
        "content": "<p>Ah, looks like <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> kicked off a manual build, so optimistically we'll know in 10 minutes or so</p>",
        "id": 443643220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717968299
    },
    {
        "content": "<p>It's almost done</p>",
        "id": 443643271,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717968324
    },
    {
        "content": "<p>Did we have an example page that used the &lt;http...&gt; syntax to check?</p>",
        "id": 443643768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717968579
    },
    {
        "content": "<p>Ah yes, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Conv.html#Lean.Parser.Tactic.Conv.conv\">https://leanprover-community.github.io/mathlib4_docs/Init/Conv.html#Lean.Parser.Tactic.Conv.conv</a> which works correctly <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>!</p>",
        "id": 443643909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717968637
    },
    {
        "content": "<p>Great <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 443643950,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717968660
    },
    {
        "content": "<p>It looks like <a href=\"https://github.com/leanprover/doc-gen4/issues/126\">https://github.com/leanprover/doc-gen4/issues/126</a> is (still?) fixed, which is also good news</p>",
        "id": 443644125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717968735
    },
    {
        "content": "<p>Great, I'll close it</p>",
        "id": 443644151,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717968750
    },
    {
        "content": "<p>I'd argue that docgen should probably add an <code>HTML.raw</code> constructor alongside <code>HTML.text</code>, since the latter implies an HTML text node, but is actually used to carry raw HTML payloads; and there might be an avenue for HTML injection (perhaps in filenames or decl names?) here as a result</p>",
        "id": 443644424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717968889
    },
    {
        "content": "<p>But maybe that type of cleanup is not worth it as the verso horizon approaches</p>",
        "id": 443644495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717968928
    },
    {
        "content": "<p>In my opinion, just add a docstring to <code>HTML.text</code>, warn the user that this means HTML text node but potentially can contain arbitrary HTML tags inside it, and the DOM model cannot access these tags.</p>",
        "id": 443646561,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717969895
    },
    {
        "content": "<blockquote>\n<p>this means HTML text node but potentially can contain arbitrary HTML tags inside it</p>\n</blockquote>\n<p>\"text node\" has a prescribed meaning by the DOM standard, and it is specifically not this</p>",
        "id": 443656592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717975936
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/190\">#190</a>, which prevents:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">«&lt;</span><span class=\"n\">script</span><span class=\"bp\">&gt;</span><span class=\"n\">alert</span><span class=\"o\">(</span><span class=\"s2\">\"hello world\"</span><span class=\"o\">)</span><span class=\"bp\">&lt;/</span><span class=\"n\">script</span><span class=\"bp\">&gt;»</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>doing anything silly</p>",
        "id": 443656594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717975944
    },
    {
        "content": "<p>As for the cmark, the javascript version <a href=\"https://spec.commonmark.org/dingus/\">https://spec.commonmark.org/dingus/</a> happily accepts any HTML tags, while the C version, in default setting, disallows any HTML tags, including <code>&lt;b&gt;</code>, etc.</p>",
        "id": 443661680,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717979875
    },
    {
        "content": "<p>There's a small bug with rendering LaTeX in a list, see e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/AlgebraicGeometry/EllipticCurve/DivisionPolynomial/Basic.html\">here</a> - any ideas?</p>",
        "id": 443833254,
        "sender_full_name": "David Ang",
        "timestamp": 1718042816
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/rPJ1pCYKRXxwZydRgyYggy5L/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rPJ1pCYKRXxwZydRgyYggy5L/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/rPJ1pCYKRXxwZydRgyYggy5L/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Furthermore</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">associated</span><span class=\"w\"> </span><span class=\"n\">sequences</span><span class=\"w\"> </span><span class=\"bp\">$\\</span><span class=\"n\">Psi_n</span><span class=\"bp\">^</span><span class=\"o\">{[</span><span class=\"mi\">2</span><span class=\"o\">]},</span><span class=\"w\"> </span><span class=\"bp\">\\</span><span class=\"n\">Phi_n</span><span class=\"w\"> </span><span class=\"bp\">\\</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">$\\</span><span class=\"n\">Psi_n</span><span class=\"bp\">^</span><span class=\"o\">{[</span><span class=\"mi\">2</span><span class=\"o\">]}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">\\</span><span class=\"n\">tilde</span><span class=\"o\">{</span><span class=\"bp\">\\</span><span class=\"n\">Psi</span><span class=\"o\">}</span><span class=\"bp\">_</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">\\</span><span class=\"n\">Psi_2</span><span class=\"bp\">^</span><span class=\"o\">{[</span><span class=\"mi\">2</span><span class=\"o\">]}</span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">even</span><span class=\"o\">,</span>\n<span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">$\\</span><span class=\"n\">Psi_n</span><span class=\"bp\">^</span><span class=\"o\">{[</span><span class=\"mi\">2</span><span class=\"o\">]}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">\\</span><span class=\"n\">tilde</span><span class=\"o\">{</span><span class=\"bp\">\\</span><span class=\"n\">Psi</span><span class=\"o\">}</span><span class=\"bp\">_</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">odd</span><span class=\"o\">,</span>\n<span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">$\\</span><span class=\"n\">Phi_n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"bp\">\\</span><span class=\"n\">Psi_n</span><span class=\"bp\">^</span><span class=\"o\">{[</span><span class=\"mi\">2</span><span class=\"o\">]}</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"bp\">\\</span><span class=\"n\">tilde</span><span class=\"o\">{</span><span class=\"bp\">\\</span><span class=\"n\">Psi</span><span class=\"o\">}</span><span class=\"bp\">_</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">\\</span><span class=\"n\">tilde</span><span class=\"o\">{</span><span class=\"bp\">\\</span><span class=\"n\">Psi</span><span class=\"o\">}</span><span class=\"bp\">_</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">even</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">and</span>\n<span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">$\\</span><span class=\"n\">Phi_n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"bp\">\\</span><span class=\"n\">Psi_n</span><span class=\"bp\">^</span><span class=\"o\">{[</span><span class=\"mi\">2</span><span class=\"o\">]}</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"bp\">\\</span><span class=\"n\">tilde</span><span class=\"o\">{</span><span class=\"bp\">\\</span><span class=\"n\">Psi</span><span class=\"o\">}</span><span class=\"bp\">_</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">\\</span><span class=\"n\">tilde</span><span class=\"o\">{</span><span class=\"bp\">\\</span><span class=\"n\">Psi</span><span class=\"o\">}</span><span class=\"bp\">_</span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">\\</span><span class=\"n\">Psi_2</span><span class=\"bp\">^</span><span class=\"o\">{[</span><span class=\"mi\">2</span><span class=\"o\">]}</span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">odd</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 443833399,
        "sender_full_name": "David Ang",
        "timestamp": 1718042871
    },
    {
        "content": "<p>It's not because they are in a list, only due to underscores.</p>",
        "id": 443833476,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718042886
    },
    {
        "content": "<p>Markdown interprets underscores as emphasis, thus break the LaTeX seen by MathJax and it's discussed above.</p>",
        "id": 443833680,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718042967
    },
    {
        "content": "<p>This is <a href=\"https://github.com/leanprover/doc-gen4/issues/178\">https://github.com/leanprover/doc-gen4/issues/178</a>, and the solution is either \"patch cmark to handle latex\", or \"switch to a markdown parser that already handles LaTeX\"</p>",
        "id": 443849557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718048370
    },
    {
        "content": "<p>A simple solution would be to have doc-gen invoke the same python library that we used in lean3, via a subprocess</p>",
        "id": 443849642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718048401
    },
    {
        "content": "<p>But this of course makes installing doc-gen harder. I think for mathlib users, the tradeoff is massively tilted, and no one cares about having local builds work; but doc-gen is an FRO product that is trying to work for everyone.</p>",
        "id": 443849834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718048453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>, would being able to toggle the parser (via a flag) to a subprocess-based one be acceptable to you, assuming the flag-less approach is not viable?</p>",
        "id": 443849990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718048513
    },
    {
        "content": "<p>Maybe we can consider this:</p>\n<blockquote>\n<p><a href=\"https://github.com/gohugoio/hugo-goldmark-extensions\">hugo-goldmark-extensions</a> has <a href=\"https://github.com/gohugoio/hugo-goldmark-extensions/pull/2/files\">a passthrough parser</a> that handles this quite well, and it has many test cases. It also has the advantage that it can use the extensibility of the markdown parser and unfortunately CMark.lean exposes no access to the AST and low-level functionalities of cmark, so no extension is possible.</p>\n</blockquote>",
        "id": 443850101,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718048536
    },
    {
        "content": "<p>Switching to a go-based markdown parser probably has the same installation pains as python ones</p>",
        "id": 443850389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718048638
    },
    {
        "content": "<p>I'm not meaning switching parser; I mean maybe we can copy a little bit of code from it.</p>",
        "id": 443851006,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718048836
    },
    {
        "content": "<p>Having a flag for something as crucial like this sounds like an easy way to miss bugs to me. We would end up with two impelmentations and probably eventually forget about checking one of the two when adding a feature or something like that.</p>",
        "id": 443851013,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718048840
    },
    {
        "content": "<p>Do we expect to add any markdown features before the markdown component is replaced with verso?</p>",
        "id": 443851589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718049036
    },
    {
        "content": "<p>I'm personally not planning on doing it, but e.g. changes like escaping etc. might end up yielding different results on different parsers no?</p>",
        "id": 443851669,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718049071
    },
    {
        "content": "<p>If the parser is correct then there is no escaping to do.</p>",
        "id": 443851715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718049106
    },
    {
        "content": "<p>(a markdown parser's job is to output an HTML document, which is pre-escaped)</p>",
        "id": 443851814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718049138
    },
    {
        "content": "<p>Maybe the lowest-maintainance form of the option is to let the lakefile specify an arbitrary <code>renderMD (md : String) : IO String</code> function that mathlib can replace with a subprocess call (which saves docgen having to deal with subprocesses)</p>",
        "id": 443852084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718049255
    },
    {
        "content": "<p>That's not how doc-gen integrates with lake files at all. Either way, are we sure that CMark is actually incapeable of doing what we want and the issue is not just that we are massaging it in the wrong way? Their README claims they can at least output LaTeX, I would hope they can parse markdown with latex if that's the case?</p>",
        "id": 443852214,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718049339
    },
    {
        "content": "<p>I'm googling for markdown parsers written in C now. The first result is &lt;<a href=\"https://github.com/mity/md4c\">https://github.com/mity/md4c</a>&gt;, and the second result is &lt;<a href=\"https://github.com/commonmark/cmark\">https://github.com/commonmark/cmark</a>&gt;, which is the one we currently uses.</p>",
        "id": 443853615,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718049874
    },
    {
        "content": "<p>The <code>md4c</code> looks more promising than <code>cmark</code>, as it only contains one <code>c</code> file and one <code>h</code> file, and it claims that it supports LaTeX formulas, table, etc.</p>",
        "id": 443853722,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718049918
    },
    {
        "content": "<p>If someone wants to make bindings for that and check out of it can be integrated with doc-gen to solve our issues, sure go for it</p>",
        "id": 443854265,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718050068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443852214\">said</a>:</p>\n<blockquote>\n<p>are we sure that CMark is actually incapeable of doing what we want</p>\n</blockquote>\n<p>I think probably yes. CMark is a reference implementation of a minimal markdown specification. I think they are not like to add new features outside their specification...</p>",
        "id": 443854552,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718050142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443854265\">said</a>:</p>\n<blockquote>\n<p>If someone wants to make bindings for that and check out of it can be integrated with doc-gen to solve our issues, sure go for it</p>\n</blockquote>\n<p>I can try later.</p>",
        "id": 443854631,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718050171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443854552\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443852214\">said</a>:</p>\n<blockquote>\n<p>are we sure that CMark is actually incapeable of doing what we want</p>\n</blockquote>\n<p>I think probably yes. CMark is a reference implementation of a minimal markdown specification. I think they are not like to add new features outside their specification...</p>\n</blockquote>\n<p>I'm not saying to add new features, I'm asking if maybe we are doing something wrong with their code given that they claim to be able to at least generate LaTeX, so one might think they thought this through and actually tried a few examples</p>",
        "id": 443854781,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718050206
    },
    {
        "content": "<p>Oh, I need some information on compiling C code with Lake build file. I've checked <code>CMark.lean</code> but is a little bit confused about it.</p>",
        "id": 443855589,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718050513
    },
    {
        "content": "<p>Well then you'll have to say what you are confused about, otherwise it's a bit hard to help :P</p>",
        "id": 443856232,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718050711
    },
    {
        "content": "<p>OK let me try first.</p>",
        "id": 443856892,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718050933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443854781\">said</a>:</p>\n<blockquote>\n<p>I'm asking if maybe we are doing something wrong with their code given that they claim to be able to at least generate LaTeX</p>\n</blockquote>\n<p>CMark is an implementation of CommonMark, and <a href=\"https://github.com/commonmark/cmark/issues/439\">does not implement <code>$math$</code> notation</a> because <a href=\"https://github.com/commonmark/commonmark-spec/pull/745\">the spec does not allow it</a>.</p>",
        "id": 443857956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718051327
    },
    {
        "content": "<p>So it can translate <code>_italic_</code> input to <code>\\emph{italic}</code> output in LaTeX, but there is no legal input to produce <code>$\\TeX$</code> as output.</p>",
        "id": 443858060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718051366
    },
    {
        "content": "<p>Right, in that case investigating the other seems the way to go</p>",
        "id": 443858144,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718051392
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/4Zp3dk3ineLJKzSs77Yc8yVW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4Zp3dk3ineLJKzSs77Yc8yVW/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/4Zp3dk3ineLJKzSs77Yc8yVW/image.png\"></a></div><p>they explicitly claim to be able</p>",
        "id": 443858244,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718051413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443858244\">said</a>:</p>\n<blockquote>\n<p>they explicitly claim to be able</p>\n</blockquote>\n<p>Yes, and tables, etc.</p>",
        "id": 443858317,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718051439
    },
    {
        "content": "<p>I think it basically works. But there is a decision need to be made: now I have freedom to choose <code>$ $$</code> or <code>\\( \\) \\[ \\]</code> for formulas to be fed to MathJax. Now I use <code>\\( \\) \\[ \\]</code> because I think by using this the beginning and ending marks can be distinguished. But this will introduce larger diffs compared to old library.</p>",
        "id": 443882275,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718062498
    },
    {
        "content": "<p>The auto-link feature is enabled, for example:</p>\n<p>before:</p>\n<div class=\"codehilite\" data-code-language=\"HTML\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>can you see the link https://github.com<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>can you see the link <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://github.com\"</span><span class=\"p\">&gt;</span>https://github.com<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<p>after:</p>\n<div class=\"codehilite\" data-code-language=\"HTML\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>can you see the link <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://github.com\"</span><span class=\"p\">&gt;</span>https://github.com<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>can you see the link <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://github.com\"</span><span class=\"p\">&gt;</span>https://github.com<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n</code></pre></div>",
        "id": 443882422,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718062596
    },
    {
        "content": "<p>The LaTeX formula works correctly, for example:</p>\n<p>before:</p>\n<div class=\"codehilite\" data-code-language=\"HTML\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>$y^2=x^3-x$<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>${f \\in \\operatorname{Hom}(M, M_2) \\mid f(p) \\subseteq q }$<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">code</span><span class=\"p\">&gt;</span>Hom(M, M₂)<span class=\"p\">&lt;/</span><span class=\"nt\">code</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Furthermore, define the associated sequences $\\Psi_n^{[2]}, \\Phi_n \\in R[X]$ by<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>$\\Psi_n^{[2]} := \\tilde{\\Psi}_n^2\\Psi_2^{[2]}$ if $n$ is even,<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>$\\Psi_n^{[2]} := \\tilde{\\Psi}_n^2$ if $n$ is odd,<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>$\\Phi_n := X\\Psi_n^{[2]} - \\tilde{\\Psi}<span class=\"p\">&lt;</span><span class=\"nt\">em</span><span class=\"p\">&gt;</span>{n + 1}\\tilde{\\Psi}<span class=\"p\">&lt;/</span><span class=\"nt\">em</span><span class=\"p\">&gt;</span>{n - 1}$ if $n$ is even, and<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>$\\Phi_n := X\\Psi_n^{[2]} - \\tilde{\\Psi}<span class=\"p\">&lt;</span><span class=\"nt\">em</span><span class=\"p\">&gt;</span>{n + 1}\\tilde{\\Psi}<span class=\"p\">&lt;/</span><span class=\"nt\">em</span><span class=\"p\">&gt;</span>{n - 1}\\Psi_2^{[2]}$ if $n$ is odd.<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<p>after (notice that now it uses <code>\\( \\)</code> for delimiter, but if you think <code>$</code> is better I can change them back):</p>\n<div class=\"codehilite\" data-code-language=\"HTML\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\\(y^2=x^3-x\\)<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\\(\\{f \\in \\operatorname{Hom}(M, M_2) \\mid f(p) \\subseteq q \\}\\)<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">code</span><span class=\"p\">&gt;</span>Hom(M, M₂)<span class=\"p\">&lt;/</span><span class=\"nt\">code</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Furthermore, define the associated sequences \\(\\Psi_n^{[2]}, \\Phi_n \\in R[X]\\) by<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\\(\\Psi_n^{[2]} := \\tilde{\\Psi}_n^2\\Psi_2^{[2]}\\) if \\(n\\) is even,<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\\(\\Psi_n^{[2]} := \\tilde{\\Psi}_n^2\\) if \\(n\\) is odd,<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\\(\\Phi_n := X\\Psi_n^{[2]} - \\tilde{\\Psi}_{n + 1}\\tilde{\\Psi}_{n - 1}\\) if \\(n\\) is even, and<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\\(\\Phi_n := X\\Psi_n^{[2]} - \\tilde{\\Psi}_{n + 1}\\tilde{\\Psi}_{n - 1}\\Psi_2^{[2]}\\) if \\(n\\) is odd.<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</code></pre></div>",
        "id": 443883080,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718062872
    },
    {
        "content": "<p>autolink also affects existing files, for example <code>Init/Data/Int/DivMod.html</code></p>\n<p>before:</p>\n<div class=\"codehilite\" data-code-language=\"HTML\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">code</span><span class=\"p\">&gt;</span>a % b + b * (a / b) = a<span class=\"p\">&lt;/</span><span class=\"nt\">code</span><span class=\"p\">&gt;</span>, unconditionally.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>[t-rounding]: https://dl.acm.org/doi/pdf/10.1145/128861.128862 [theo\nmod_add_div]:\nhttps://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.mod_add_div#doc<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Examples:<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">pre</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">code</span><span class=\"p\">&gt;</span>#eval (7 : Int) / (0 : Int) -- 0\n</code></pre></div>\n<p>after:</p>\n<div class=\"codehilite\" data-code-language=\"HTML\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">code</span><span class=\"p\">&gt;</span>a % b + b * (a / b) = a<span class=\"p\">&lt;/</span><span class=\"nt\">code</span><span class=\"p\">&gt;</span>, unconditionally.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>[t-rounding]: <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://dl.acm.org/doi/pdf/10.1145/128861.128862\"</span><span class=\"p\">&gt;</span>https://dl.acm.org/doi/pdf/10.1145/128861.128862<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span> [theo\nmod_add_div]:\n<span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.mod_add_div#doc\"</span><span class=\"p\">&gt;</span>https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.mod_add_div#doc<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Examples:<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">pre</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">code</span><span class=\"p\">&gt;</span>#eval (7 : Int) / (0 : Int) -- 0\n</code></pre></div>\n<p>(by the way, I think the docstring in that file is just broken)</p>",
        "id": 443884043,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718063281
    },
    {
        "content": "<p>PS: I think it's useful to add autolink for <code>docs#XXX</code>, just link it to <code>find</code> is OK.</p>",
        "id": 443884209,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718063355
    },
    {
        "content": "<p>PR created as <a href=\"https://github.com/leanprover/doc-gen4/pull/193\">https://github.com/leanprover/doc-gen4/pull/193</a>.</p>",
        "id": 443884934,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718063710
    },
    {
        "content": "<p>I think we should use <code>$$</code> because:</p>\n<ul>\n<li>Mathlib already does this (mostly)</li>\n<li>This is more readable in vscode</li>\n</ul>",
        "id": 443886380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718064329
    },
    {
        "content": "<p>OK let me change it (and add an option to it, then hardcode it to enabled)</p>",
        "id": 443887234,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718064714
    },
    {
        "content": "<p>There are still some minor TODOs in &lt;<a href=\"https://github.com/acmepjz/md4lean/blob/main/wrapper/wrapper.c\">https://github.com/acmepjz/md4lean/blob/main/wrapper/wrapper.c</a>&gt;. Perhaps the most important (but not that important, because the <code>CMark.lean</code> has no this feature either) thing is return <code>Option String</code> instead of <code>String</code>. Currently if the parsing failed, it returns an empty string instead.</p>",
        "id": 443888199,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718065306
    },
    {
        "content": "<p>I can address that for you now...</p>",
        "id": 443888640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718065636
    },
    {
        "content": "<p><a href=\"https://github.com/acmepjz/md4lean/pull/1\">https://github.com/acmepjz/md4lean/pull/1</a></p>",
        "id": 443890339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718066528
    },
    {
        "content": "<p>I think I misunderstood your comment about delimiters; are you talking about the input, output, or both?</p>",
        "id": 443894809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718068523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443890339\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/acmepjz/md4lean/pull/1\">https://github.com/acmepjz/md4lean/pull/1</a></p>\n</blockquote>\n<p>Thank you very much; will look at it later today.</p>",
        "id": 443897586,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718070395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443894809\">said</a>:</p>\n<blockquote>\n<p>I think I misunderstood your comment about delimiters; are you talking about the input, output, or both?</p>\n</blockquote>\n<p>I mean output. Ideally, for input, both <code>$</code> and <code>\\( \\)</code> should be supported, but for now it seems that <code>md4c</code> only support <code>$</code> for input; it does not recognize <code>\\( \\)</code>.</p>",
        "id": 443897662,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718070464
    },
    {
        "content": "<p>Is there a particular reason you are shipping your own buffer instead of using a lean string directly?</p>",
        "id": 443924843,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718087533
    },
    {
        "content": "<p>No, I just not familiar with the Lean string API. Will check later.</p>",
        "id": 443928302,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718088954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443897662\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/443894809\">said</a>:</p>\n<blockquote>\n<p>I think I misunderstood your comment about delimiters; are you talking about the input, output, or both?</p>\n</blockquote>\n<p>I mean output. Ideally, for input, both <code> and </code>\\( \\)<code> should be supported, but for now it seems that </code>md4c<code> only support </code> for input; it does not recognize <code>\\( \\)</code>.</p>\n</blockquote>\n<p>If it's only the output, then I don't think we care at all about the format, and you can remove your patch to md4c. Maybe the <code>x-equation</code> option is best, since that can be post-processed on the Lean side.</p>",
        "id": 443948345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718095549
    },
    {
        "content": "<p>New LaTeX stuff is up</p>",
        "id": 444085145,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718135036
    },
    {
        "content": "<p>There is something broken in &lt;<a href=\"https://leanprover-community.github.io/mathlib4_docs/foundational_types.html\">https://leanprover-community.github.io/mathlib4_docs/foundational_types.html</a>&gt;:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>(a : A) -&amp;gt; B a\n</code></pre></div>\n<p>I'm not sure which PR introduces this bug.</p>",
        "id": 444086166,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718135384
    },
    {
        "content": "<p>It's in <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Output/FoundationalTypes.lean\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Output/FoundationalTypes.lean</a></p>",
        "id": 444087365,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718135882
    },
    {
        "content": "<p>Would not be surprised if it's the one by Eric (that we already reverted and then fixed)?</p>",
        "id": 444087586,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718135957
    },
    {
        "content": "<p>I think so. The fix is also straightforward.</p>",
        "id": 444087923,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718136055
    },
    {
        "content": "<p>Just change it to <code>&lt;li&gt;&lt;code&gt;{\"(a : A) -&gt; B a\"}&lt;/code&gt;...</code> ?</p>",
        "id": 444088683,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718136263
    },
    {
        "content": "<p>Yeah I'll do that really quick</p>",
        "id": 444088799,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718136307
    },
    {
        "content": "<p>I think <code>-&gt;</code> alone might also be legal there?</p>",
        "id": 444090446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718136851
    },
    {
        "content": "<p>Yeah, that's the easy fix right now. The right fix is teaching the <em>parser</em> to translate <code>&amp;gt;</code> as <code>&gt;</code>, which is what JSX does.</p>",
        "id": 444090447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718136851
    },
    {
        "content": "<p>Thanks again <span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span> and <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> for pushing this through!</p>",
        "id": 444092219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718137217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/444090446\">said</a>:</p>\n<blockquote>\n<p>I think <code>-&gt;</code> alone might also be legal there?</p>\n</blockquote>\n<p>It's legal in HTML yes. But I don't know if the custom syntax parser in JSX like this. It's possible that it panics on any <code>&lt;</code> and <code>&gt;</code>.</p>",
        "id": 444096453,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718138302
    },
    {
        "content": "<p>I'm experimenting with autolink for <code>docs#</code>, see &lt;<a href=\"https://github.com/acmepjz/doc-gen4/commit/577dfdc42c1ed9cd90e3b47ca7c5bc5706583bd7\">https://github.com/acmepjz/doc-gen4/commit/577dfdc42c1ed9cd90e3b47ca7c5bc5706583bd7</a>&gt;. So far it only works for <code>[link](docs#Lean.Xml.Element)</code>, but not for <code>docs#Lean.Xml.Element</code> in code block, which I think is because current logic treats <code>#</code> as a separator in code block.</p>",
        "id": 444332420,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718226413
    },
    {
        "content": "<p>In fact I think it's not needed to be supported in code blocks. What about the syntax <code>[docs#Lean.Xml.Element]</code> just like referencing bibliography? Then this can be unified with bibliography processing code.</p>",
        "id": 444332823,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718226593
    },
    {
        "content": "<p>I think sometimes we've been using <code>Lean/Xml/Element.lean</code> in places where we intend to link to files</p>",
        "id": 444335168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718227636
    },
    {
        "content": "<p>(this has the advantage that you can copy paste it into the \"find file\" dialog in vscode)</p>",
        "id": 444335202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718227656
    },
    {
        "content": "<p>I know that link to file is working. But usually we want to link to a definition/theorem which is not imported in this file yet, for example in &lt;<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/OrzechProperty.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/OrzechProperty.html</a>&gt; I want to say \"see definition XXX\" but these definitions are in downstream files, so currently doc-gen cannot see them. For now I can only link to the file where these definition lives. It's best if we can support <code>docs#</code> link scheme in this case.</p>",
        "id": 444338082,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718229029
    },
    {
        "content": "<p>Oh, I'd like to ask that currently we support <code>##</code> which just like <code>docs#</code> but only for the symbols already imported; is this feature actually used in mathlib docs? As I said before, seems that this only works in <code>[link](##definition)</code> syntax.</p>",
        "id": 444338366,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718229169
    },
    {
        "content": "<p>Seems that I cannot find <code>(##</code> and <code>\"##</code> in mathlib. The <code>##</code> is too many, since it also serves as heading.</p>",
        "id": 444339405,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718229657
    },
    {
        "content": "<p>I suggest that maybe it's better to use <code>docs#</code> syntax which unifies with Zulip convention.</p>",
        "id": 444339624,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718229768
    },
    {
        "content": "<p>Can doc-gen really not auto-link to things in downstream files?</p>",
        "id": 444344003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718231594
    },
    {
        "content": "<p>Huh you're right: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.End.applyMulAction#doc\">docs#Function.End.applyMulAction</a> is a good example, vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.End.apply_mul_action\">docs3#function.End.apply_mul_action</a></p>",
        "id": 444344415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718231844
    },
    {
        "content": "<p>I think the solution here is to fix the auto-linker, not to add a new link syntax</p>",
        "id": 444344452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718231866
    },
    {
        "content": "<p>There is no fix for the auto linker in this. doc-gen4 analyzes all files in parallel and does so by only importing the file that it is analyzing. It has no knowledge of anything that happens downstream. All of the global information like instances etc. that you see is dynamically injected by JS code from a JSON index.</p>",
        "id": 444344596,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718231944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/444344452\">said</a>:</p>\n<blockquote>\n<p>I think the solution here is to fix the auto-linker</p>\n</blockquote>\n<p>Yes, that's the best, just like other document generator, e.g. doxygen. It requires two-pass compilation, though, the first pass is compile whole mathlib to get a symbol table, the second pass is process all the docstrings and do auto-linking.</p>",
        "id": 444344861,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718232111
    },
    {
        "content": "<p>Yes, I was imagining a second pass. How is the sidebar assembled without one?</p>",
        "id": 444346099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718232846
    },
    {
        "content": "<p>Its an iframe of an html file that's generated after the fact.</p>",
        "id": 444347347,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718233304
    },
    {
        "content": "<p>I have an idea. Since there is <code>find</code> function, it must read some data file. We may ask doc-gen4 to load that data file produced by previous compilation, to serve as the global symbol table if the symbol in question is not found. This is very similar to LaTeX multi-pass compilation.</p>",
        "id": 444347399,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718233324
    },
    {
        "content": "<p>Moreover, in the first pass we may ask doc-gen4 to only generate that file, suppress the generation of all other files.</p>",
        "id": 444347492,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718233394
    },
    {
        "content": "<p>If you want to spend time on that go ahead, I don't have cycles free to spend on developing stuff like this for doc-gen currently.</p>",
        "id": 444347628,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718233488
    },
    {
        "content": "<p>Are you happy to accept patches with largish design changes like this? (that obviously takes cycles too!)</p>",
        "id": 444347679,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718233520
    },
    {
        "content": "<p>I think this works without huge change to current code.</p>",
        "id": 444347733,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718233550
    },
    {
        "content": "<p>I think you'll have difficulty fitting that design into <code>lake</code>'s build graph (but am happy to be proven wrong)</p>",
        "id": 444347817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718233586
    },
    {
        "content": "<p>OK. Let's postpone this. Working on bibliography first. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 444348021,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718233711
    },
    {
        "content": "<p>You can do n step builds in lake no problem. I do see one modeling issue with lake that I wouldn't instantly know q solution to but maybe its doable.</p>\n<p>The current code would have to be pulled apart a little bit into a Pre and post processing step. If you really want to make this clean you will also have the pleasure of deleting the iframe stuff as well as the dynamically HTML generating JS stuff so this is certainly not a trivial change.</p>",
        "id": 444348085,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718233762
    },
    {
        "content": "<p>The approach I was thinking of is something like:</p>\n<ul>\n<li>A <code>:doc_data</code> facet that dumps some json file for every lean file, with no cross-references resolved (but maybe markdown and signatures preprocessed, to speed up the build)</li>\n<li>A <code>lean_docs</code> target type alongside <code>lean_exe</code>, which pulls in the <code>:doc_data</code> files transitively and glues together all the final HTML at once</li>\n</ul>",
        "id": 444348207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718233821
    },
    {
        "content": "<p>But this does not suffice because if you wish to have a global index it needs to be global for all packages that are in scope, not just Mathlib. I wouldn't know from the top of my head how to do that properly as the current command to interact with lake allows people to selectively build docs only for certain modules.</p>",
        "id": 444348344,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718233914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/444348021\">said</a>:</p>\n<blockquote>\n<p>OK. Let's postpone this. Working on bibliography first. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n</blockquote>\n<p>On that one, I was thinking a little about how to make this perform reasonably, I'm guessing you are just planning to parse the bibtex file in every doc-gen process again and use it right? That sounds rather wasteful to me, there should be a better wat</p>",
        "id": 444348577,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718233993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/444348577\">said</a>:</p>\n<blockquote>\n<p>I'm guessing you are just planning to parse the bibtex file in every doc-gen process again and use it right?</p>\n</blockquote>\n<p>I haven't realized that the doc-gen is run in parallel. But maybe it's not a big deal.</p>",
        "id": 444349136,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718234155
    },
    {
        "content": "<p>As mentioned above it runs per file in parallel, not doing multi core would be rather crazy, generating mathlib docs on a beefy machine with a bunch of cores is 15 min currently</p>",
        "id": 444349385,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718234225
    },
    {
        "content": "<p>We have <code>FoundationalTypes.lean</code> and that file must only run once. For bibliography it's the same, we have a <code>Bibliography.lean</code> which generates the bibliography HTML file and a simple data file listing all the keys of references and the link they link to. Then when processing each input source file, we load that data file. In this way the <code>.bib</code> file only process once.</p>",
        "id": 444349676,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718234402
    },
    {
        "content": "<p>Unrelated note: I tried to make <code>MD4Lean</code> compile under Windows. I found that I can specify the clang shipped with lean (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lake.getLeanCc#doc\">docs#Lake.getLeanCc</a>) to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lake.compileO#doc\">docs#Lake.compileO</a>, but then it complains that missing <code>stdio.h</code>. Looks like that standard include files are missing for the clang installation.</p>",
        "id": 444582464,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718321962
    },
    {
        "content": "<p>This issue applies to all platforms, <a href=\"https://github.com/utensil/ginac-lean/blob/0ac2fcfc4b04ae4c7953cac635a93b4aa2151854/lakefile.lean#L29\">here</a> is how you can work around it, by extracting the search path from an actual clang installation and pass the flags.</p>",
        "id": 444584326,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718323316
    },
    {
        "content": "<p>Oh, by all platforms, I means this applies to <code>leanc</code> on all platforms (because lean doesn't ship all C/C++ headers). But if you specified an actual clang, there should be no issue on all three platforms.</p>",
        "id": 444584843,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718323682
    },
    {
        "content": "<p>And you probably need to install a msys2 clang toolchain as demonstrated by <a href=\"https://github.com/utensil/ginac-lean/blob/0ac2fcfc4b04ae4c7953cac635a93b4aa2151854/.github/workflows/ci.yml#L67\">this workflow</a>.</p>",
        "id": 444585652,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718324347
    },
    {
        "content": "<p>I have MSVC installed. Obviously the command line of it is incompatible with gcc/clang.</p>",
        "id": 444586424,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718324890
    },
    {
        "content": "<p>I have an extremely hacky solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lake</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">System</span><span class=\"w\"> </span><span class=\"n\">Lake</span><span class=\"w\"> </span><span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">MD4Lean</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">md4cDir</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"md4c\"</span>\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">wrapperDir</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"wrapper\"</span>\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">srcNames</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"entity\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"md4c\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"md4c-html\"</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">wrapperName</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"wrapper\"</span>\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">buildDir</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">defaultBuildDir</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">MSVC.compileO</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">oFile</span><span class=\"w\"> </span><span class=\"n\">srcFile</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">moreArgs</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[])</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">LogIO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">createParentDirs</span><span class=\"w\"> </span><span class=\"n\">oFile</span>\n<span class=\"w\">  </span><span class=\"n\">proc</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">    </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"cl\"</span>\n<span class=\"w\">    </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"/nologo\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"/c\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"/Fo:\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">oFile.toString</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">srcFile.toString</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">moreArgs</span>\n<span class=\"w\">  </span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">md4cOTarget</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pkg</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Package</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">srcName</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FetchM</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BuildJob</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">oFile</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pkg.dir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">buildDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">md4cDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"w\"> </span><span class=\"n\">srcName</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"s2\">\".o\"</span><span class=\"w\"> </span><span class=\"o\">⟩</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">srcTarget</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">inputFile</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">pkg.dir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">md4cDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"w\"> </span><span class=\"n\">srcName</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"s2\">\".c\"</span><span class=\"w\"> </span><span class=\"o\">⟩</span>\n<span class=\"w\">  </span><span class=\"n\">buildFileAfterDep</span><span class=\"w\"> </span><span class=\"n\">oFile</span><span class=\"w\"> </span><span class=\"n\">srcTarget</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">srcFile</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">Platform.isWindows</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"/I\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pkg.dir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">md4cDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">MSVC.compileO</span><span class=\"w\"> </span><span class=\"n\">oFile</span><span class=\"w\"> </span><span class=\"n\">srcFile</span><span class=\"w\"> </span><span class=\"n\">flags</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pkg.dir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">md4cDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">compileO</span><span class=\"w\"> </span><span class=\"n\">oFile</span><span class=\"w\"> </span><span class=\"n\">srcFile</span><span class=\"w\"> </span><span class=\"n\">flags</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">wrapperOTarget</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pkg</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Package</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FetchM</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BuildJob</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">oFile</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pkg.dir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">buildDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">wrapperDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"w\"> </span><span class=\"n\">wrapperName</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"s2\">\".o\"</span><span class=\"w\"> </span><span class=\"o\">⟩</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">srcTarget</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">inputFile</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">pkg.dir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">wrapperDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"w\"> </span><span class=\"n\">wrapperName</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"s2\">\".c\"</span><span class=\"w\"> </span><span class=\"o\">⟩</span>\n<span class=\"w\">  </span><span class=\"n\">buildFileAfterDep</span><span class=\"w\"> </span><span class=\"n\">oFile</span><span class=\"w\"> </span><span class=\"n\">srcTarget</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">srcFile</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">Platform.isWindows</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"clang\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pkg.dir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">md4cDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">compileO</span><span class=\"w\"> </span><span class=\"n\">oFile</span><span class=\"w\"> </span><span class=\"n\">srcFile</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getLeanCc</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pkg.dir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">md4cDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">compileO</span><span class=\"w\"> </span><span class=\"n\">oFile</span><span class=\"w\"> </span><span class=\"n\">srcFile</span><span class=\"w\"> </span><span class=\"n\">flags</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span><span class=\"w\"> </span><span class=\"n\">MD4Lean</span>\n\n<span class=\"n\">extern_lib</span><span class=\"w\"> </span><span class=\"n\">md4c</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pkg</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">libFile</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pkg.dir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">buildDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">md4cDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"libleanmd4c.a\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">oTargets</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">srcNames.mapM</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">md4cOTarget</span><span class=\"w\"> </span><span class=\"n\">pkg</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">wrapperOTarget</span><span class=\"w\"> </span><span class=\"n\">pkg</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">buildStaticLib</span><span class=\"w\"> </span><span class=\"n\">libFile</span><span class=\"w\"> </span><span class=\"n\">oTargets</span>\n</code></pre></div>",
        "id": 444586457,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718324922
    },
    {
        "content": "<p>clang can't find <code>stdio.h</code>, while MSVC does not like <code>lean.h</code>. So the library and the wrapper are compiled using different compilers. It said that build successful. But I need to actually run the test program (<code>Main.lean</code>) to see if it crashes or not.</p>",
        "id": 444586610,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718325048
    },
    {
        "content": "<p>OK I need this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_exe</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"kd\">example</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"ss\">`Main</span>\n</code></pre></div>\n<p>Looks like that it runs correctly, not crashing:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>C:\\Users\\XXX\\Documents\\projects\\md4lean&gt;lake exe example ..\\md4c-release-0.5.2\\build\\src\\Release\\test.md\n[1/9] Replayed MD4Lean/md4c.static\ninfo: stdout:\nentity.c\ninfo: stdout:\nmd4c.c\ninfo: stdout:\nmd4c-html.c\n&lt;h1&gt;Test&lt;/h1&gt;\n&lt;p&gt;Hello &lt;a href=\"https://github.com\"&gt;https://github.com&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;&amp;lt; &amp;gt; &amp;amp; &amp;quot;&lt;/code&gt;&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;&amp;lt; &amp;gt; &amp;amp; &amp;quot;&lt;/p&gt;\n&lt;p&gt;$\\{f \\in \\operatorname{Hom}(M, M_2) \\mid f(p) \\subseteq q \\}$ $$y^2&amp;lt;x^3-x _1x_ 2$$&lt;/p&gt;\n&lt;p&gt;&amp;lt;script&amp;gt;alert(&amp;quot;hello world&amp;quot;)&amp;lt;/script&amp;gt;&lt;/p&gt;\n&lt;p&gt;&amp;lt;c&amp;gt;alert(&amp;quot;hello world&amp;quot;)&lt;/p&gt;\n&lt;p&gt;An apple is worth $2.0. A pear is worth $3.0.&lt;/p&gt;\n&lt;p&gt;An apple is worth $2.0.&lt;/p&gt;\n&lt;p&gt;A pear is worth $3.0.&lt;/p&gt;\n&lt;p&gt;An apple is worth $2.0$. A pear is worth $3.0$.&lt;/p&gt;\n&lt;p&gt;An apple is worth $2.0. A pear is worth $ 3.0.&lt;/p&gt;\n</code></pre></div>",
        "id": 444587331,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718325617
    },
    {
        "content": "<p>That's a great data point, I had trouble with linking gcc compiled C++ library with Lean (which uses clang and its libc++), so I never expected VC could link, but I guess the situation may vary.</p>",
        "id": 444593918,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718330358
    },
    {
        "content": "<p>But maybe the reason is just that it's a C library, while C++ has other complications.</p>",
        "id": 444594133,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718330466
    },
    {
        "content": "<p>You are right, even using MSVC, linking C++ program requires that all the objects are compiled by the same version of the compiler, otherwise there will be symbol missing link errors, or random crashes.</p>",
        "id": 444633795,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718348935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/444584843\">said</a>:</p>\n<blockquote>\n<p>lean doesn't ship all C/C++ headers</p>\n</blockquote>\n<p>I checked again and found that lean ships all C/C++ libs (e.g. <code>libc++.a</code>). So I don't know a particular reason that why lean doesn't ship headers.</p>",
        "id": 444774762,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718393729
    },
    {
        "content": "<p>OK now compiling <code>MD4Lean</code> under Windows does not require MSVC anymore. It only uses Lean's built-in clang compiler.</p>",
        "id": 444783219,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718396840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/444774762\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/444584843\">said</a>:</p>\n<blockquote>\n<p>lean doesn't ship all C/C++ headers</p>\n</blockquote>\n<p>I checked again and found that lean ships all C/C++ libs (e.g. <code>libc++.a</code>). So I don't know a particular reason that why lean doesn't ship headers.</p>\n</blockquote>\n<p>Lean usually only needs to compile IR in C. So it's natural that it misses some C++ headers.</p>",
        "id": 444852482,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718448308
    },
    {
        "content": "<p>Oh, I see you <a href=\"https://github.com/acmepjz/md4lean/commit/792473c3848d038c3869c42a32f2acdc12c3f24a\">ship some headers with MD4Lean</a> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 444852589,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718448430
    },
    {
        "content": "<p>Please have a look at this <a href=\"https://github.com/acmepjz/doc-gen4/commit/7c545c41db9fd0b181d1ceec8310f69be8be833f\">https://github.com/acmepjz/doc-gen4/commit/7c545c41db9fd0b181d1ceec8310f69be8be833f</a> which removes comments from bibtex file. It uses a finite state machine. Basically it removes <code>#xxx</code> until a line break, outputs a line break, then ignores all spaces until a non-space character. <code>\\#</code> is not removed, though.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean.Data.Parsec</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean.Data.HashMap</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">private</span><span class=\"w\"> </span><span class=\"kd\">inductive</span><span class=\"w\"> </span><span class=\"n\">RemoveCommentState</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">normal</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RemoveCommentState</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">backslash</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RemoveCommentState</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RemoveCommentState</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">commentAfterLinebreak</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RemoveCommentState</span>\n\n<span class=\"kn\">private</span><span class=\"w\"> </span><span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">removeCommentAux</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String.Pos</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RemoveCommentState</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">s.atEnd</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"n\">r</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s.get</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s.next</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"sc\">'#'</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">removeCommentAux</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"w\">      </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"sc\">'\\\\'</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">removeCommentAux</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">backslash</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r.push</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">removeCommentAux</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r.push</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">backslash</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">removeCommentAux</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r.push</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">removeCommentAux</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">commentAfterLinebreak</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r.push</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">removeCommentAux</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">commentAfterLinebreak</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"sc\">' '</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"sc\">'\\t'</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">removeCommentAux</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">commentAfterLinebreak</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"w\">      </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">removeCommentAux</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"w\"> </span><span class=\"n\">r</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">removeComment</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">removeCommentAux</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>I have tried (<code>#eval</code>) that it works. Do you think it's better to rewrite it using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parsec#doc\">docs#Lean.Parsec</a> since it is more maintainable?</p>",
        "id": 445017963,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718570356
    },
    {
        "content": "<p>I have implemented <code>bibPrepass</code> subcommand in the test branch &lt;<a href=\"https://github.com/acmepjz/doc-gen4/tree/test\">https://github.com/acmepjz/doc-gen4/tree/test</a>&gt;. If calling command line directly, it will process the bib file, copy it to the doc root and save the cite keys to a txt file.</p>\n<p>Now I'm having trouble writing build file. Seems that now it does not work. I want to run <code>bibPrepass</code> before all <code>single</code> and <code>coreDocs</code> subcommand. What should I do?</p>",
        "id": 445228792,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718659732
    },
    {
        "content": "<p>Also, I want it to detect changes/existent or not to <code>docs/references.bib</code> file. Currently the <code>bibPrepass</code> subcommand will delete the cite key file if the input reference file is set to <code>-</code> or inexistent.</p>",
        "id": 445229568,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718660118
    },
    {
        "content": "<p>You probably want to define a custom lake target for the bibPrepass that is dependend on by the single/coreDocs commands and marks whatever input files you take as its input</p>",
        "id": 445230266,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718660429
    },
    {
        "content": "<p>I tried this <a href=\"https://github.com/acmepjz/doc-gen4/blob/33f67bccde8d1e80f18c46c4a26f04b6b075a887/lakefile.lean\">https://github.com/acmepjz/doc-gen4/blob/33f67bccde8d1e80f18c46c4a26f04b6b075a887/lakefile.lean</a> but seems that it is still not working. This is what I modified:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">bibPrepass</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">exeJob</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">».</span><span class=\"n\">fetch</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">basePath</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getWorkspace</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">root.buildDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"doc\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">inputFile</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getWorkspace</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">root.srcDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"docs\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"references.bib\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">inputFiles</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">inputFile</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">outputFile</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">basePath</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"declarations\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"citekey.txt\"</span>\n<span class=\"w\">  </span><span class=\"n\">exeJob.bindSync</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">exeFile</span><span class=\"w\"> </span><span class=\"n\">exeTrace</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">buildFileUnlessUpToDate</span><span class=\"w\"> </span><span class=\"n\">outputFile</span><span class=\"w\"> </span><span class=\"n\">exeTrace</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"n\">proc</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">        </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">exeFile.toString</span>\n<span class=\"w\">        </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"bibPrepass\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">inputFile.toString</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getAugmentedEnv</span>\n<span class=\"w\">      </span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">traces</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">inputFiles.mapM</span><span class=\"w\"> </span><span class=\"n\">computeTrace</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">indexTrace</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mixTraceArray</span><span class=\"w\"> </span><span class=\"n\">traces</span>\n<span class=\"w\">    </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">outputFile</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">trace.mix</span><span class=\"w\"> </span><span class=\"n\">indexTrace</span><span class=\"o\">)</span>\n\n<span class=\"n\">module_facet</span><span class=\"w\"> </span><span class=\"n\">docs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mod</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">exeJob</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">».</span><span class=\"n\">fetch</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">bibPrepassJob</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">bibPrepass.fetch</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">modJob</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">mod.leanArts.fetch</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Build all documentation imported modules</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">mod.imports.fetch</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">depDocJobs</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">BuildJob.mixArray</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">imports.mapM</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">fetch</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">mod.facet</span><span class=\"w\"> </span><span class=\"ss\">`docs</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">srcUri</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getSrcUri</span><span class=\"w\"> </span><span class=\"n\">mod</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">buildDir</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getWorkspace</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">root.buildDir</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">docFile</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mod.filePath</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">buildDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"doc\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s2\">\"html\"</span>\n<span class=\"w\">  </span><span class=\"n\">depDocJobs.bindAsync</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">depDocTrace</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">bibPrepassJob.bindAsync</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">bibPrepassTrace</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"n\">exeJob.bindAsync</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">exeFile</span><span class=\"w\"> </span><span class=\"n\">exeTrace</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"n\">modJob.bindSync</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">modTrace</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">          </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">depTrace</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mixTraceArray</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">exeTrace</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">modTrace</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">bibPrepassTrace</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">depDocTrace</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">buildFileUnlessUpToDate</span><span class=\"w\"> </span><span class=\"n\">docFile</span><span class=\"w\"> </span><span class=\"n\">depTrace</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">            </span><span class=\"n\">proc</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">              </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">exeFile.toString</span>\n<span class=\"w\">              </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"single\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mod.name.toString</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">srcUri</span><span class=\"o\">]</span>\n<span class=\"w\">              </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getAugmentedEnv</span>\n<span class=\"w\">            </span><span class=\"o\">}</span>\n<span class=\"w\">          </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">docFile</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- TODO: technically speaking this target does not show all file dependencies</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">coreDocs</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">exeJob</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">».</span><span class=\"n\">fetch</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">bibPrepassJob</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">bibPrepass.fetch</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">basePath</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getWorkspace</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">root.buildDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"doc\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">dataFile</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">basePath</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"declarations\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"declaration-data-Lean.bmp\"</span>\n<span class=\"w\">  </span><span class=\"n\">bibPrepassJob.bindAsync</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">bibPrepassTrace</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">exeJob.bindSync</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">exeFile</span><span class=\"w\"> </span><span class=\"n\">exeTrace</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">depTrace</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mixTraceArray</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">exeTrace</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">bibPrepassTrace</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">buildFileUnlessUpToDate</span><span class=\"w\"> </span><span class=\"n\">dataFile</span><span class=\"w\"> </span><span class=\"n\">depTrace</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"n\">proc</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">          </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">exeFile.toString</span>\n<span class=\"w\">          </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"genCore\"</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getAugmentedEnv</span>\n<span class=\"w\">        </span><span class=\"o\">}</span>\n<span class=\"w\">      </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">dataFile</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 445249875,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718671285
    },
    {
        "content": "<p>It only works when I build doc for the first time. In the subsequent builds it just stuck at building <code>bibPrepass</code> step forever.</p>",
        "id": 445249997,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718671352
    },
    {
        "content": "<p>I don't know why, but sometimes I need .await after .fetch to ensure the depended target is generated.</p>",
        "id": 445250670,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718671913
    },
    {
        "content": "<p>But your issue seems to be the opposite, once the upstream target is generated, the downstream target is stuck? I can't tell why from the code.</p>",
        "id": 445250908,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718672082
    },
    {
        "content": "<p>I am not sure why your <code>bibPrepass</code> job is hanging. However, I do have a suggestion for a modification of its tracing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">bibPrepass</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">exeJob</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">».</span><span class=\"n\">fetch</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">basePath</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getWorkspace</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">root</span><span class=\"bp\">.</span><span class=\"n\">buildDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"doc\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">inputFile</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getWorkspace</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">root</span><span class=\"bp\">.</span><span class=\"n\">srcDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"docs\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"references.bib\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">outputFile</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">basePath</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"declarations\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"citekey.txt\"</span>\n<span class=\"w\">  </span><span class=\"n\">exeJob</span><span class=\"bp\">.</span><span class=\"n\">bindSync</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">exeFile</span><span class=\"w\"> </span><span class=\"n\">exeTrace</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">inputTrace</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">computeTextFileTrace</span><span class=\"w\"> </span><span class=\"n\">inputFile</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">depTrace</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">exeTrace</span><span class=\"bp\">.</span><span class=\"n\">mix</span><span class=\"w\"> </span><span class=\"n\">inputTrace</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">buildFileUnlessUpToDate</span><span class=\"w\"> </span><span class=\"n\">outputFile</span><span class=\"w\"> </span><span class=\"n\">depTrace</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"n\">proc</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">        </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">exeFile</span><span class=\"bp\">.</span><span class=\"n\">toString</span>\n<span class=\"w\">        </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"bibPrepass\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">inputFile</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getAugmentedEnv</span>\n<span class=\"w\">      </span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">outputFile</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 445390535,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718724700
    },
    {
        "content": "<p>You should include input files as part of the trace passed to <code>buildFileUnlessUpToDate</code> and returned trace should generally just be the trace of the outputted file. One notable exception to this output rule is Lean oleans, because they include by reference other files (their imports).</p>",
        "id": 445391647,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718724871
    },
    {
        "content": "<p>Thanks.</p>\n<p>It turns out that the stuck is not related to the build file changes. It's simply because building <code>coreDocs</code> takes too much time.</p>",
        "id": 445427627,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718734040
    },
    {
        "content": "<p>Now the reference page works (very ugly)</p>\n<p><a href=\"/user_uploads/3121/vV4LV_x9ymwTwFOPc-DaMM1O/2024-06-19-040708.png\">2024-06-19-040708.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vV4LV_x9ymwTwFOPc-DaMM1O/2024-06-19-040708.png\" title=\"2024-06-19-040708.png\"><img src=\"/user_uploads/3121/vV4LV_x9ymwTwFOPc-DaMM1O/2024-06-19-040708.png\"></a></div>",
        "id": 445450859,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718741298
    },
    {
        "content": "<p>It looks like your bibtex parser is non-conforming with regards to <code>{</code> and <code>}</code>; the specification is at <a href=\"https://www.bibtex.org/Format\">https://www.bibtex.org/Format</a></p>",
        "id": 445456668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718743214
    },
    {
        "content": "<p>I think it would make sense to either write a standalone bibtex parser module for Lean, or to wrap some existing Python / C software that can do this parsing (perhaps into json)</p>",
        "id": 445457404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718743430
    },
    {
        "content": "<p>I wonder how much of this is implemented in <a href=\"https://github.com/dupuisf/BibtexQuery\">https://github.com/dupuisf/BibtexQuery</a></p>",
        "id": 445458870,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718743878
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span>)</p>",
        "id": 445459084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718743939
    },
    {
        "content": "<p>Indeed it would be nice to turn bibtexquery into a proper standalone bibtex parser module! At the moment it only implements a subset of the full bibtex format (in particular, it doesn't handle string concatenation with <code>#</code>, which in my defense I've never actually seen anyone use).</p>",
        "id": 445462009,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1718744871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/445456668\">said</a>:</p>\n<blockquote>\n<p>It looks like your bibtex parser is non-conforming with regards to <code>{</code> and <code>}</code></p>\n</blockquote>\n<p>I know; currently it is only a proof of concept.</p>",
        "id": 445465367,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718746256
    },
    {
        "content": "<p>According to <a href=\"https://github.com/leanprover/doc-gen4/issues/147\">https://github.com/leanprover/doc-gen4/issues/147</a> the doc-gen3 uses an external python tool <code>pybtex</code> to process the bibtex file. According to <a href=\"https://pybtex.org/\">https://pybtex.org/</a> it can output HTML or markdown. So now the cheapest solution is to consume the HTML/markdown produced by <code>pybtex</code>, while our parser only parses all cite keys and do reverse references.</p>",
        "id": 445465880,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718746497
    },
    {
        "content": "<p>I've checked <a href=\"https://github.com/dupuisf/BibtexQuery/blob/master/BibtexQuery/Parser.lean\">https://github.com/dupuisf/BibtexQuery/blob/master/BibtexQuery/Parser.lean</a> and it can't process <code>\\{</code> correctly, otherwise it looks better than my own <a href=\"https://github.com/acmepjz/doc-gen4/blob/test/DocGen4/Output/References.lean\">https://github.com/acmepjz/doc-gen4/blob/test/DocGen4/Output/References.lean</a></p>",
        "id": 445466874,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718747015
    },
    {
        "content": "<p>Do you think it's a good idea to just use <code>pybtex</code>?</p>",
        "id": 445467396,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718747243
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>pybtex-format -f bibtex -b plaintext references.bib out.txt\nERROR: missing publisher in calugareanu\n</code></pre></div>\n<p>Oops.</p>",
        "id": 445475797,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718751510
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>@Article{         Guitart1980,\n  author        = {Guitart, Ren\\'{e}},\n  tilte         = {Relations et carr\\'{e}s exacts},\n</code></pre></div>\n<p><code>tilte</code> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> This should be fixed.</p>",
        "id": 445476343,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718751798
    },
    {
        "content": "<p>My parser is not working on thiis:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>@InBook{          Graham1983,\n  author        = \"Graham, R. L.\",\n  editor        = \"Bachem, Achim and Korte, Bernhard and Gr{\\\"o}tschel,\n                  Martin\",\n</code></pre></div>\n<p>because there is a <code>\\\"</code> in quoted string.</p>",
        "id": 445479300,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718753548
    },
    {
        "content": "<p>I think <code>pybtex</code> is good:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>pybtex-format -f bibtex -b html --label-style=alpha references.bib out.htm\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/U-mQVWPfa3TqVXlnhIsmLBuy/2024-06-19-073643.png\">2024-06-19-073643.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/U-mQVWPfa3TqVXlnhIsmLBuy/2024-06-19-073643.png\" title=\"2024-06-19-073643.png\"><img src=\"/user_uploads/3121/U-mQVWPfa3TqVXlnhIsmLBuy/2024-06-19-073643.png\"></a></div>",
        "id": 445479700,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718753824
    },
    {
        "content": "<p>It has some weirdness, though: to make the alpha label formatting working properly, the authors should be in <code>LastName, FirstName and LastName, FirstName</code>, and the name should use UTF-8 characters directly, instead of LaTeX commands. Otherwise it looks good. We only need an HTML parser, which we already have an example in markdown postprocessing.</p>",
        "id": 445480015,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718754002
    },
    {
        "content": "<p>For getting all cite keys, we can also use</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>pybtex-convert -f bibtex -t bibtexml --preserve-case references.bib out.xml\n</code></pre></div>\n<p>and then parsing XML using Lean's built-in library.</p>",
        "id": 445480706,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718754482
    },
    {
        "content": "<p>I'm stuck at <a href=\"https://leanprover-community.github.io/mathlib4_docs/Batteries/Data/String/Matcher.html#String.findSubstr?\">String.findSubstr?</a> which is in batteries. Are there similar functions in the core library? I can only find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.replace#doc\">docs#String.replace</a> in the core library.</p>",
        "id": 445673806,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718821279
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RegularExpression#doc\">docs#RegularExpression</a> is in the mathlib!</p>",
        "id": 445674067,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718821373
    },
    {
        "content": "<p>This is not really the kind of regex you are looking for, it's the mathematical notion, not a well optimized software one</p>",
        "id": 445674201,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718821427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/445475797\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>pybtex-format -f bibtex -b plaintext references.bib out.txt\nERROR: missing publisher in calugareanu\n</code></pre></div>\n<p>Oops.</p>\n</blockquote>\n<p>Note that, just like with NodeJS/NPM I would also prefer to avoid having a dependency on Python/The python packaging eco system. If it's really not otherwise possible (which doesn't seem to be the case given the partial success so far?) it's fine but generally a core Lean tool like doc-gen should be able to provide all of its functionality by just using Lean itself.</p>",
        "id": 445674683,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718821632
    },
    {
        "content": "<p>This was generally fine with doc-gen3 because it a) was a python tool through and through and b) Lean 3 was not nearly as much of a programming language as we are now.  I also believe that this is generally a good thing for the eco system, people actually build libraries like your MD renderer or Francois' Unicode library (or potentially bibtex stuff) that can be helpful for other people. I do of course understand that not going the easy path is a little frustrating sometimes, but with features such as the Bibtex renderer it's not like this is a prio A thing that we desperately need to work correctly <em>now</em> otherwise we loose users or something.</p>",
        "id": 445675812,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718822070
    },
    {
        "content": "<p>I see. But currently I'm working on a version using <code>pybtex</code> command line tools. I think this is the easiest way to work with. I also have a pure Lean work-in-progress, but it takes time.</p>",
        "id": 445682275,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718824203
    },
    {
        "content": "<p>In this branch <a href=\"https://github.com/acmepjz/doc-gen4/tree/test2\">https://github.com/acmepjz/doc-gen4/tree/test2</a> I use <code>pybtex</code> to render reference pages. It works:</p>\n<p><a href=\"/user_uploads/3121/KsxA7BZJE-SqMVlqSS5bpF2c/2024-06-20-034859.png\">2024-06-20-034859.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KsxA7BZJE-SqMVlqSS5bpF2c/2024-06-20-034859.png\" title=\"2024-06-20-034859.png\"><img src=\"/user_uploads/3121/KsxA7BZJE-SqMVlqSS5bpF2c/2024-06-20-034859.png\"></a></div>",
        "id": 445690658,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718826772
    },
    {
        "content": "<blockquote>\n<p>If it's really not otherwise possible (which doesn't seem to be the case given the partial success so far?) it's fine but generally a core Lean tool like doc-gen should be able to provide all of its functionality by just using Lean itself.</p>\n</blockquote>\n<p>Maybe the way out here is to have an extension hook for downstream packages to provide their own references page? That way the call out to  python happens in mathlib, rather than in doc-gen</p>",
        "id": 445690802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718826827
    },
    {
        "content": "<p>(I think a mechanism for downstream projects to extend the pages generated is something we want one way or another anyway)</p>",
        "id": 445690909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718826858
    },
    {
        "content": "<p>Reference page feature is optional; currently the logic of my code is that if it can't find <code>pybtex</code> executable, then the reference page is disabled.</p>",
        "id": 445691117,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718826950
    },
    {
        "content": "<p>I think we can always swapped this out later with a pure Lean implementation.</p>",
        "id": 445691217,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718826977
    },
    {
        "content": "<p>The next thing is make the referencing works.</p>",
        "id": 445691255,
        "sender_full_name": "Jz Pan",
        "timestamp": 1718826997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/445690909\">said</a>:</p>\n<blockquote>\n<p>(I think a mechanism for downstream projects to extend the pages generated is something we want one way or another anyway)</p>\n</blockquote>\n<p>I don't see why this should be the case. doc-gen is supposed to be used to generate API references, the general documentation tool is supposed to be Verso once it comes around.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/445690802\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>If it's really not otherwise possible (which doesn't seem to be the case given the partial success so far?) it's fine but generally a core Lean tool like doc-gen should be able to provide all of its functionality by just using Lean itself.</p>\n</blockquote>\n<p>Maybe the way out here is to have an extension hook for downstream packages to provide their own references page? That way the call out to  python happens in mathlib, rather than in doc-gen</p>\n</blockquote>\n<p>I also don't see how to easily do this, the lake targets of doc-gen cannot call into lake targets that are not yet declared in doc-gens files. And making doc-gen call out to arbitrary code is going to lead to caching issues sooner or later because the inputs of a doc-gen build step will no longer be known so it may happen that upon rerunning doc-gen it might not pick up on changes of whatever custom input you have.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/445682275\">said</a>:</p>\n<blockquote>\n<p>I see. But currently I'm working on a version using <code>pybtex</code> command line tools. I think this is the easiest way to work with. I also have a pure Lean work-in-progress, but it takes time.</p>\n</blockquote>\n<p>Yes, that's why I explained that taking time is fine, there is no high pressure behind these features so there is no need to rush it.</p>",
        "id": 445691795,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718827197
    },
    {
        "content": "<p>Now forward link from docstring to reference page works.</p>\n<p><a href=\"/user_uploads/3121/Y30vPW65TvT8YoMiR18ECbeJ/2024-06-22-044049.png\">2024-06-22-044049.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Y30vPW65TvT8YoMiR18ECbeJ/2024-06-22-044049.png\" title=\"2024-06-22-044049.png\"><img src=\"/user_uploads/3121/Y30vPW65TvT8YoMiR18ECbeJ/2024-06-22-044049.png\"></a></div>",
        "id": 446171303,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719002766
    },
    {
        "content": "<p>The next is add reverse link support from reference page to where it is referenced. See here: <a href=\"https://github.com/acmepjz/doc-gen4/blob/eb65d878971b33e55c27c6a4843502fd73f35978/DocGen4/Output/DocString.lean#L157\">https://github.com/acmepjz/doc-gen4/blob/eb65d878971b33e55c27c6a4843502fd73f35978/DocGen4/Output/DocString.lean#L157</a></p>\n<p>I think It's best if I can have a read/write monad support here. The <code>HtmlM</code> seems to be read-only.</p>",
        "id": 446171624,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719002937
    },
    {
        "content": "<p>Now back reference also works</p>\n<p><a href=\"/user_uploads/3121/_5hKxOWIGf1BDl1D9xle2BKm/screenshot.png\">screenshot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_5hKxOWIGf1BDl1D9xle2BKm/screenshot.png\" title=\"screenshot.png\"><img src=\"/user_uploads/3121/_5hKxOWIGf1BDl1D9xle2BKm/screenshot.png\"></a></div>",
        "id": 446276898,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719066159
    },
    {
        "content": "<p>PR created as <a href=\"https://github.com/leanprover/doc-gen4/pull/200\">https://github.com/leanprover/doc-gen4/pull/200</a>.</p>",
        "id": 446280277,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719068416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span> I left a review</p>",
        "id": 446288343,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719071706
    },
    {
        "content": "<p>I propose the following approach to the issue of parsing bibtex: Running <a href=\"https://github.com/dupuisf/BibtexQuery\">https://github.com/dupuisf/BibtexQuery</a> against mathlib4's references.bib the first thing it chokes on is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">editor</span><span class=\"w\">        </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Bachem, Achim and Korte, Bernhard and Gr{</span><span class=\"se\">\\\"</span><span class=\"s2\">o}tschel,</span>\n</code></pre></div>\n<p>Would <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> be willing to fix his parser to get it to the point of supporting all of <code>docs/references.bib</code> in mathlib4? Additionally it would be great if you could provide your library as a standalone thing since, afaict, you only depend on batteries for your executable? I would like to avoid pulling in a library like batteries into the dependency closure of doc-gen if its not even needed for execution.</p>\n<p>If we can arrange that then once <span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span> has cleaned up their contribution code we should be able to just swap out the pybtex backend for the lean one as a large part of the code base contributed was written in a generic enough fashion to support this.</p>",
        "id": 446313567,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719084306
    },
    {
        "content": "<p>Okay there are only two parser failures of <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> tool in mathlib, one is caused by the fact that there is a name that has an ö and this name parser only accepts ASCII names:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/-- The name of the bibtex entry (i.e. what goes in the cite command). -/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Parsec</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">firstChar</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Parsec</span><span class=\"bp\">.</span><span class=\"n\">asciiLetter</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">reste</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">manyChars</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">alphaNum</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"n\">pchar</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"o\">:</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"n\">pchar</span><span class=\"w\"> </span><span class=\"bp\">'-'</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"n\">pchar</span><span class=\"w\"> </span><span class=\"bp\">'_'</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">firstChar</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">reste</span>\n</code></pre></div>\n<p>I suggest to make this unicode compatible, potentially using <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> UnicodeBasic: <a href=\"https://github.com/fgdorais/lean4-unicode-basic/blob/87791b59c53be80a9a000eb2bcbf61f60a27b334/UnicodeBasic.lean#L887\">https://github.com/fgdorais/lean4-unicode-basic/blob/87791b59c53be80a9a000eb2bcbf61f60a27b334/UnicodeBasic.lean#L887</a> or just by consuming any characters until a <code>,</code> is hit.</p>\n<p>The other is caused by a failure to parse this line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">editor</span><span class=\"w\">        </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Bachem, Achim and Korte, Bernhard and Gr{</span><span class=\"se\">\\\"</span><span class=\"s2\">o}tschel,</span>\n</code></pre></div>\n<p>There might be a simple parser fix for this but alternatively  we could just change the name to contain an ö (a bit ironic that that just works here) in the mathlib <code>references.bib</code> and this is gone. In general the <code>references.bib</code> does of course contain a lot of these LaTeX-isms that are necessary to do basic unicode. Is this type of stuff still necessary? Can LaTeX maybe just cope with us putting proper unicode instead of funny escape sequences?</p>\n<p>Either way after both of these are fixed and the bibtex parser is a standalone lib we can just use it to process mathlib's<code>references.bib</code>. So I don't see a reason to engineer the hacky JSON approach suggested in the PR. On a technical level this feature is perfectly doable and integrateable with doc-gen by only using Lean,  in a short amount of time.</p>",
        "id": 446332352,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719093996
    },
    {
        "content": "<p>Yes, I could try to clean up the parser to make it work. The batteries dependency should be very easy to get rid of, from what I recall I only use it for the hashmap, so I should be able to swap it out for the hashmap in core. I can also try to turn it into a standalone library.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/446332352\">said</a>:</p>\n<blockquote>\n<p>There might be a simple parser fix for this but alternatively  we could just change the name to contain an ö (a bit ironic that that just works here) in the mathlib <code>references.bib</code> and this is gone. </p>\n</blockquote>\n<p>Well, I did make sure it works with my own name :-D Jokes aside, for my personal use I basically do what you propose: just stick with Unicode in the bibtex file instead of the LaTeX workarounds. I'm happy to stick with this if this is an option, I suspect implementing this properly (especially with LaTeX math in the bibtex fields) will be a lot of work.</p>",
        "id": 446337082,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1719095380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/446332352\">said</a>:</p>\n<blockquote>\n<p>here is a name that has an ö and this name parser only accepts ASCII names</p>\n</blockquote>\n<p>I think the name (which is called <code>citekey</code> in my PR) can only contain ASCII characters according to the specification. Note that this is also used as the tag attribute of <code>&lt;a&gt;</code>, so it can't contain <code>#</code>, <code>&amp;</code>, <code>&gt;</code>, '&lt;' etc.</p>",
        "id": 446337190,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719095421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/446337082\">said</a>:</p>\n<blockquote>\n<p>LaTeX math in the bibtex fields</p>\n</blockquote>\n<p>Don't worry, LaTeX math is handled by MathJax.</p>",
        "id": 446337521,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719095637
    },
    {
        "content": "<p>Regarding Unicode and TeX-style <code>{\\c c}</code> &lt;-&gt; <code>ç</code> translation. Each accent character has a Unicode combining character. For example:</p>\n<ul>\n<li><code>\\'</code> is U+0301 COMBINING ACUTE ACCENT as in Frédéric</li>\n<li><code>\\\"</code> is U+0308 COMBINING DIAERESIS as in Böving</li>\n<li><code>\\c</code> is U+0327 COMBINING CEDILLA as in François</li>\n</ul>\n<p>You probably can't visually tell the difference in the names above and these three names: Frédéric, Böving, François. There is one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"François\"</span><span class=\"bp\">.</span><span class=\"n\">utf8ByteSize</span><span class=\"w\"> </span><span class=\"c1\">-- 10</span>\n<span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"François\"</span><span class=\"bp\">.</span><span class=\"n\">utf8ByteSize</span><span class=\"w\"> </span><span class=\"c1\">-- 9</span>\n</code></pre></div>\n<p>Using the combining characters, the translation from TeX-style to Unicode is straightforward. (I hope Zulip doesn't automatically normalize UTF-8...) </p>\n<p><a href=\"https://github.com/fgdorais/lean4-unicode-basic\">UnicodeBasic</a> currently implements canonical decomposition which could be used to translate from Unicode to Tex-style. Unfortunately, I haven't yet gotten around to implementing canonical composition. Feel free to raise an issue on <a href=\"https://github.com/fgdorais/lean4-unicode-basic\">UnicodeBasic</a>!</p>",
        "id": 446347981,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1719103738
    },
    {
        "content": "<p>Thanks to the dreadful weather in Montreal today, I actually got this done. I've fixed the escaped quotation mark bug (the <code>Gr{\\\"o}tschel</code> issue above), and for the Unicode in the citation key issue, I just PRed a fix to mathlib (<a href=\"https://github.com/leanprover-community/mathlib4/pull/14056\">#14056</a>) since this apparently causes problems in some other bibtex implementations as well. Also, it seems to work fine when used as a library (you just have to <code>require</code> it in <code>lakefile.lean</code> as usual), and I removed the dependency on batteries, now it only depends on Lean core.</p>",
        "id": 446460609,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1719169027
    },
    {
        "content": "<p>Excellent, thank you so much!</p>",
        "id": 446465228,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719171571
    },
    {
        "content": "<p>No problem!</p>",
        "id": 446472769,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1719175841
    },
    {
        "content": "<p>I think there is something wrong when building documentation for multiple libraries. For example, I use</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>DOCGEN_SRC=\"file\" lake build DocGen4:docs Cli:docs\n</code></pre></div>\n<p>to build the docs (<code>Cli:docs</code> is needed since it is not imported by <code>DocGen4</code>), it runs documentation indexing pass two times. The <code>Cli:docs</code> is built, but the navbar is incorrect, which has no <code>Cli</code> entry.</p>",
        "id": 446695601,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719256607
    },
    {
        "content": "<p>That the pass runs two times is expected because its a library facet. The indexing does run for alll of the libraries, so given the fact that one library should be done last there should be a clear winner to this. I've been aware of this race condition for a long time but I don't really see a nice way to fix it in lake apart from telling users to explicitly run another target afterwards which is definitely suboptimal. The process itself is certainly not fundamentally broken as this is exactly how mathlib's documentation is built.</p>",
        "id": 446703710,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719258770
    },
    {
        "content": "<p>I also cannot reproduce what you are describing locally. The entry is there and working as expected by this design.</p>",
        "id": 446704029,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719258901
    },
    {
        "content": "<p>I got this:</p>\n<p><a href=\"/user_uploads/3121/uR2TrED0PDQKuyFETGQolQxp/2024-06-25-040140.png\">2024-06-25-040140.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/uR2TrED0PDQKuyFETGQolQxp/2024-06-25-040140.png\" title=\"2024-06-25-040140.png\"><img src=\"/user_uploads/3121/uR2TrED0PDQKuyFETGQolQxp/2024-06-25-040140.png\"></a></div><p>It is still the same even if I rerun <code>lake exe doc-gen4 index</code> manually.</p>",
        "id": 446705364,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719259364
    },
    {
        "content": "<p>Note that there is no <code>Cli</code> in the left hand side.</p>",
        "id": 446705420,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719259383
    },
    {
        "content": "<p>Well I can't say much more than no that's not what I get:<br>\n<a href=\"/user_uploads/3121/uG-Jj42Xo2sZb__pgJyAipz1/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/uG-Jj42Xo2sZb__pgJyAipz1/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/uG-Jj42Xo2sZb__pgJyAipz1/image.png\"></a></div>",
        "id": 446707549,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719260060
    },
    {
        "content": "<p>Oops. Let me investigate it later if I have time; currently I'm redesigning <code>bibPrepass</code> command line interface.</p>",
        "id": 446709497,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719260635
    },
    {
        "content": "<p>Problem solved by rerun the build process again.</p>",
        "id": 446718417,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719263068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> I think your <a href=\"https://github.com/dupuisf/BibtexQuery\">https://github.com/dupuisf/BibtexQuery</a> does not contain any code for translating <code>\\'e</code> into <code>é</code>. Is that correct?</p>",
        "id": 447347262,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719440416
    },
    {
        "content": "<p>If that is the case, I think the easiest solution would be to make a PR to mathlib to remove all LaTeX commands outside math environment in <code>references.bib</code>. And we should mention this limitation in that file.</p>\n<p>Do you think it's a good idea?</p>",
        "id": 447347385,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719440511
    },
    {
        "content": "<p>Also, your last name process code seems incomplete; it can't get last name from <code>FirstName LastName</code> syntax.</p>\n<p>PS: Even worse, it's not always the last word is the last name, for example, the last name of <code>Leonardo de Moura</code> is <code>de Moura</code> but not <code>Moura</code>... So it should be <code>[dM00]</code> but  not <code>[Mou00]</code></p>",
        "id": 447348596,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719441117
    },
    {
        "content": "<p>I think my plan is only <code>import BibtexQuery.Parser</code> and reinventing the wheel for name processing.</p>",
        "id": 447349459,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719441627
    },
    {
        "content": "<p>Indeed the parser makes no attempt at processing the strings in the various fields of a bibtex entry, so it doesn't try to convert TeX commands into Unicode, or to split names into last name/first name or anything like that. (The actual <code>bibtex-query</code> executable does some of that, but I wouldn't rely on that part of the code, that was never really meant to work on any bibtex file except my own...)</p>\n<p>For the names, if we really need to figure out where the last name/first name split is, I think we should enforce the <code>Lastname, Firstname</code> format in our bibtex file instead of <code>Firstname Lastname</code>. With the latter format, I don't think there's an algorithm that will always work properly, since conventions vary between languages, countries, etc. And the same goes for the diacritics, we could just make our lives easier and enforce a UTF-8-only policy in <code>references.bib</code> instead of trying to remplement TeX.</p>",
        "id": 447351776,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1719442904
    },
    {
        "content": "<p><a href=\"https://github.com/plk/biblatex/issues/236\">https://github.com/plk/biblatex/issues/236</a> may be relevant here</p>",
        "id": 447352066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719443050
    },
    {
        "content": "<p>Yeah, that's exactly the kind of issue I think we should spare ourselves.</p>",
        "id": 447352319,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1719443159
    },
    {
        "content": "<blockquote>\n<p>instead of trying to remplement TeX.</p>\n</blockquote>\n<p>I think in general we should be be wary of \"we can't use X unless we reimplement it in Lean\" arguments. They're worth exploring when the reimplementation is trivial, but here calling out to TeX itself or pybtex would save us a lot of trouble.</p>",
        "id": 447352506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719443221
    },
    {
        "content": "<p>From the docs:</p>\n<blockquote>\n<p>Pybtex aims to be 100% compatible with BibTeX. It [...] produces byte-identical output</p>\n</blockquote>\n<p>This is a very high bar that I doubt we can easily replicate with a cleanroom implementation</p>",
        "id": 447352743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719443338
    },
    {
        "content": "<p>My point is that by using just a slightly more restricted version of the bibtex format that anyway looks nicer, we can save ourselves a lot of trouble.</p>",
        "id": 447352963,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1719443484
    },
    {
        "content": "<p>To throw a grain of salt here: there is no BibTeX standard. If there ever was one, it was reconstructed from what Oren Patashnik's implementation does. Note that <a href=\"https://en.wikipedia.org/wiki/BibTeX\">this implementation</a> has had only one update since 1988, which unfortunately didn't fix anything immediately relevant to this discussion. All reimplentations of BibTeX are significant improvements over the original.</p>",
        "id": 447353099,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1719443563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/447352963\">said</a>:</p>\n<blockquote>\n<p>My point is that by using just a slightly more restricted version of the bibtex format that anyway looks nicer, we can save ourselves a lot of trouble.</p>\n</blockquote>\n<p>One thing to consider is users who want to use their <code>.bib</code> file both with real bibtex/pdflatex and doc-gen, and not have to maintain two formats. I don't have a feeling for whether the suggested restrictions come at the expense of LaTeX compatibility with certain compilers.</p>",
        "id": 447353598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719443862
    },
    {
        "content": "<blockquote>\n<p>but here calling out to TeX itself or pybtex would save us a lot of trouble.</p>\n</blockquote>\n<p>I agree. Currently my doc-gen4 PR provides both options: built-in Lean implementation (to be implemented) and calling pybtex. They can be switched by command line options.</p>\n<blockquote>\n<p>Pybtex aims to be 100% compatible with BibTeX.</p>\n</blockquote>\n<p>Fun fact: it clearly not quite compatible with bibtex, for example the last name abbreviation does not work if there are LaTeX commands in last names.</p>",
        "id": 447353617,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719443878
    },
    {
        "content": "<blockquote>\n<p>I don't have a feeling for whether the suggested restrictions come at the expense of LaTeX compatibility with certain compilers.</p>\n</blockquote>\n<p>Looking further, I think they're fine for <code>biber</code>-compatible <code>.bib</code> files, and probably those are all we need to care about</p>",
        "id": 447354090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719444021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Contribution.20to.20doc-gen4.3F/near/447353598\">said</a>:</p>\n<blockquote>\n<p>One thing to consider is users who want to use their <code>.bib</code> file both with real bibtex/pdflatex and doc-gen, and not have to maintain two formats. I don't have a feeling for whether the suggested restrictions come at the expense of LaTeX compatibility with certain compilers.</p>\n</blockquote>\n<p>For what it's worth, I've been sticking to this restricted format for a long time now and I've never had a problem with standard latex compilers (or received complaints of that nature from my coauthors :-) ).</p>",
        "id": 447358628,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1719445745
    },
    {
        "content": "<p>I have added TeX diacritics processing code in <a href=\"https://github.com/acmepjz/doc-gen4/blob/test2/DocGen4/Output/Bibtex/TexDiacritics.lean\">https://github.com/acmepjz/doc-gen4/blob/test2/DocGen4/Output/Bibtex/TexDiacritics.lean</a>. <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> do you think this part should be moved to BibtexQuery?</p>",
        "id": 448030902,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719694554
    },
    {
        "content": "<p>I guess it could go into BibtexQuery. Do you want to open a PR?</p>",
        "id": 448036065,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1719697251
    },
    {
        "content": "<p>Sure, let me do it later.</p>",
        "id": 448040495,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719699194
    },
    {
        "content": "<p>Sorry, but my current code has problems. The Unicode combining character should be put after the character, but not before.</p>",
        "id": 448051165,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719706708
    },
    {
        "content": "<p>PR created as <a href=\"https://github.com/dupuisf/BibtexQuery/pull/2\">https://github.com/dupuisf/BibtexQuery/pull/2</a></p>",
        "id": 448418820,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719861929
    },
    {
        "content": "<p>Feel free to give comments.</p>\n<p>PS: May I ask the design decision to use <code>List</code> instead of <code>Array</code> in BibtexQuery?</p>",
        "id": 448419020,
        "sender_full_name": "Jz Pan",
        "timestamp": 1719861985
    }
]