[
    {
        "content": "<p>My colleague <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> has just posted <a href=\"https://lean-lang.org/blog/2024-5-17-functional-induction/\">a blog post on the functional induction feature</a> that's going to be part of the Lean 4.8 release. This makes it much easier to prove things about functions defined by well-founded recursion, as well as mutually-recursive definitions.</p>",
        "id": 439201009,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1715944274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Nice blog post! Thanks a lot!</p>\n<blockquote>\n<p>Instead, we have to instantiate this parameter in the expression passed to <code>with</code></p>\n</blockquote>\n<p>Should that be <code>using</code>, instead of <code>with</code>?</p>",
        "id": 439225890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715953268
    },
    {
        "content": "<p>Well spotted, fixed.</p>",
        "id": 439228516,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715954090
    },
    {
        "content": "<p>I think in \".. so let us spell it out in prose:\", the last two bullets need rewording: right now it reads \"then two arbitrary lists (the <em>targets</em> <code>xs</code> and <code>xy</code>, which correspond to the varying parameters of the function) for which the property holds.\"</p>",
        "id": 439277551,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1715972556
    },
    {
        "content": "<p>As far as the induction, one thing that briefly gave me pause was that the induction principle does not actually depend on what the function does; it is purely about its recursive shape. For example, if we write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">altRev</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ys</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">altRev</span> <span class=\"n\">ys</span> <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"n\">ys.length</span>\n</code></pre></div>\n<p>then <code>altRev.induct ≡ alternate.induct</code> (by proof-irrelevance), even though <code>altRev</code> reverses the lists. Maybe this is interesting to mention.</p>",
        "id": 439277814,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1715972683
    },
    {
        "content": "<p>Good observation! I have defined functions purely to get their induction principle, or used the induction principle from one function in a proof for something else.-</p>",
        "id": 439277946,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715972738
    }
]