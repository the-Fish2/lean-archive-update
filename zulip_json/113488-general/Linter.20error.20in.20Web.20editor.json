[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"w\"> </span><span class=\"n\">true</span>\n</code></pre></div>\n<p>This produces </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Forbidden set_option `trace.Meta.synthInstance`; please remove\nnote: this linter can be disabled with `set_option linter.setOption false`\n</code></pre></div>\n<p>when pasted into the web editor.</p>\n<p>It looks like the Mathlib linters are activated there by mistake?</p>",
        "id": 446407558,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719140805
    },
    {
        "content": "<p>(Without the <code>import</code>, the message goes away.)</p>",
        "id": 446407612,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719140864
    },
    {
        "content": "<p>Indeed, this is a (very recent) mathlib linter firing. Should this not happen?</p>",
        "id": 446416285,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719147227
    },
    {
        "content": "<p>Alternatively, it wouldn't be hard to scope the linter to <code>Mathlib</code> only. Would this be better?</p>",
        "id": 446416344,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719147254
    },
    {
        "content": "<p>You want to be able to trace/profile/... stuff without being bothered by warnings also in the Web Editor, I would think.</p>",
        "id": 446416373,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719147278
    },
    {
        "content": "<p>My understanding is that this is a linter that should make sure that files submitted to Mathlib do not contain noisy commands. But it should not be active in files that just <em>use</em> Mathlib.</p>",
        "id": 446416436,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719147343
    },
    {
        "content": "<p>Other linters (e.g. the hash-command linter, I think), only emit a warning if the linted command is silent.  If you are tracing, you probably are getting a trace message, so there is no need for further flagging.</p>",
        "id": 446417817,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719148403
    },
    {
        "content": "<p>(This may avoid special-casing mathlib vs everything else.)</p>",
        "id": 446417849,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719148441
    },
    {
        "content": "<p>The same linter warning triggers in any project depending on mathlib, doesn't it? So there is nothing specific about the webeditor, is there?</p>\n<p>I think it shouldn't be hard to just disable it in the webeditor, but I'm not convinced the current version in mathlib is desired in begin with, so maybe it's best to address the issues directly in mathlib.</p>",
        "id": 446480918,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719180681
    },
    {
        "content": "<p>I am completely unfamiliar with linters, but why is this a linter that's always active and not one that is triggered by <code>#lint</code>? And why does it for example not trigger on the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"k\">in</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(but it triggers when removing the <code>in</code>)</p>",
        "id": 446481457,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719180879
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 446481902,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719181090
    },
    {
        "content": "<p>Syntax linter are always active, only environment linters are triggered by <code>#lint</code></p>",
        "id": 446482180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719181328
    },
    {
        "content": "<p>Also, the <code>in</code> is actually the \"head\" of the syntax, so, from the perspective of the linter, <code>set_option ... in ...</code> really looks like <code>in ...</code> so it is quite different from <code>set_option ... [not in]</code>.</p>",
        "id": 446483224,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719182293
    },
    {
        "content": "<p>(I am not sure that it really is defined like this, but <code>in</code> is like an <code>infix</code>.)</p>",
        "id": 446483236,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719182317
    },
    {
        "content": "<p>Here is how the syntax trees look like without <code>in</code> and with <code>in</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">inspect: 'set_option autoImplicit false'</span>\n\n<span class=\"cm\">node Lean.Parser.Command.set_option, none</span>\n<span class=\"cm\">|-atom original: ⟨⟩⟨ ⟩-- 'set_option'</span>\n<span class=\"cm\">|-ident original: ⟨⟩⟨ ⟩-- (autoImplicit,autoImplicit)</span>\n<span class=\"cm\">|-node null, none</span>\n<span class=\"cm\">|-atom original: ⟨⟩⟨\\n\\n\\n⟩-- 'false'</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">autoImplicit</span><span class=\"w\"> </span><span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"w\"> </span><span class=\"c1\">-- note that this `#eval` is not \"captured\" by the `set_option`</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">inspect: 'set_option autoImplicit false in #eval \"\"'</span>\n\n<span class=\"cm\">node Lean.Parser.Command.in, none</span>\n<span class=\"cm\">|-node Lean.Parser.Command.set_option, none</span>\n<span class=\"cm\">|   |-atom original: ⟨⟩⟨ ⟩-- 'set_option'</span>\n<span class=\"cm\">|   |-ident original: ⟨⟩⟨ ⟩-- (autoImplicit,autoImplicit)</span>\n<span class=\"cm\">|   |-node null, none</span>\n<span class=\"cm\">|   |-atom original: ⟨⟩⟨ ⟩-- 'false'</span>\n<span class=\"cm\">|-atom original: ⟨⟩⟨\\n⟩-- 'in'</span>\n<span class=\"cm\">|-node Lean.Parser.Command.eval, none</span>\n<span class=\"cm\">|   |-atom original: ⟨⟩⟨ ⟩-- '#eval'</span>\n<span class=\"cm\">|   |-node str, none</span>\n<span class=\"cm\">|   |   |-atom original: ⟨⟩⟨\\n\\n⟩-- '\"\"'</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">autoImplicit</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span>\n</code></pre></div>",
        "id": 446483541,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719182640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/113488-general/topic/Linter.20error.20in.20Web.20editor/near/446480918\">said</a>:</p>\n<blockquote>\n<p>The same linter warning triggers in any project depending on mathlib, doesn't it? So there is nothing specific about the webeditor, is there?</p>\n</blockquote>\n<p>I haven't yet tried to set options in a project that depends on a recent Mathlib, so I encountered this first in the web editor. But I'd also find it annoying in projects.</p>",
        "id": 446567372,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1719222628
    }
]