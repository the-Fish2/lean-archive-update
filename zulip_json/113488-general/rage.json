[
    {
        "content": "<p>recommended ways to deal with this? so far I have \"turning on pp.all true\", \"chocolate or tea\", and \"video games\"<br>\n<a href=\"/user_uploads/3121/MTNXbBKDH2sqq9GS82Zp5e8k/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MTNXbBKDH2sqq9GS82Zp5e8k/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/MTNXbBKDH2sqq9GS82Zp5e8k/image.png\"></a></div>",
        "id": 418885474,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706635089
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 418885710,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706635176
    },
    {
        "content": "<p>do you have two isntances of some class around?</p>",
        "id": 418885783,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706635202
    },
    {
        "content": "<p>I could make one but it'd be a pain, I'm not really asking for help in this particular scenario, just like \"when you see this error message what is the first things you think\"</p>",
        "id": 418885865,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706635216
    },
    {
        "content": "<p>and wanting to vent :P</p>",
        "id": 418885906,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706635228
    },
    {
        "content": "<p>try <code>convert</code> instead of <code>apply/exact</code></p>",
        "id": 418885932,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706635236
    },
    {
        "content": "<p>I understand :)</p>",
        "id": 418885948,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706635239
    },
    {
        "content": "<p>yeah, convert will tell you the difference. My first guess is that there are two incompatible instances of some class.</p>",
        "id": 418886027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706635264
    },
    {
        "content": "<p>Ah, the issue (in this case) was this. <code>AffineMap</code> is defined by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">AffineMap</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">V1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">V2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">P2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">V1</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">AffineSpace</span> <span class=\"n\">V1</span> <span class=\"n\">P1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">V2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AffineSpace</span> <span class=\"n\">V2</span> <span class=\"n\">P2</span><span class=\"o\">]</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and so affine maps from a module <code>[Module M R]</code> to a ring <code>[Ring R]</code>, over that ring <code>R</code>, are written in notation as <code>M →ᵃ[R] R</code>.</p>\n<p>But there are two sort of \"natural\" meanings to that notation:<br>\n<code>@AffineMap R M M R R</code>, or <code>@AffineMap R R M R R</code>. The first is inferring</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">V1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AffineSpace</span> <span class=\"n\">V1</span> <span class=\"n\">P1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>with <code>V1 := M</code> and <code>P1 := M</code>, which has the AddCommGroup and Module structure of M over R, and the AffineSpace of M over itself.</p>\n<p>The second is inferring <code>V1 := R</code> and <code>P1 := M</code>, which only the AddCommGroup structure over R and the Module structure of R over itself, and the AffineSpace of M over R (derived from being a module).</p>\n<p>But those are different types that render with the same notation!</p>\n<p>ayiyi...</p>",
        "id": 418888892,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706636271
    },
    {
        "content": "<p>I feel like my linear algebra isn't strong enough to actually say if those are secretly the same type under some isomorphism, or if they're meaningfully distinct, and in that case, which I want! harumph!</p>",
        "id": 418889141,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706636359
    },
    {
        "content": "<p>mm, seems the \"bad\" inference was caused by having an extra instance of <code>[AddTorsor R M]</code> lying around. Didn't need that, didn't want that, caused it use that instance instead and deduce the bad value for <code>V1</code>. (should've been M not R)</p>",
        "id": 418889601,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706636537
    },
    {
        "content": "<p>Most probably, your affine space is not an add torsor over the base ring.</p>",
        "id": 418898137,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706639769
    },
    {
        "content": "<p>I also find these parts challenging.</p>",
        "id": 418909979,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706644560
    },
    {
        "content": "<p>It would be great if Lean at least sent enough information to show at least a suggestion of what to do in VSCode/an editor</p>",
        "id": 418911089,
        "sender_full_name": "Julian Berman",
        "timestamp": 1706645000
    },
    {
        "content": "<p>\"If these terms seem like they should unify, it is possible that implicit arguments do not match. You can try using <code>set_option pp.explicit true</code> to see the full explicit terms\"</p>",
        "id": 418920885,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706649120
    },
    {
        "content": "<p>Is what the error message should say.</p>",
        "id": 418921844,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706649551
    },
    {
        "content": "<p>No, the error message should show the proofs with explicit or raw arguments when needed, maybe with a comment<br>\n“(shown here with <code>pp.explicit := true</code>, as otherwise the terms look identical)” added. It’s just plain silly to offer the user an error message saying two identical things differ. Filed as <a href=\"https://github.com/leanprover/lean4/pull/3232\">lean4#3232</a>.</p>",
        "id": 418924090,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706650517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/rage/near/418924090\">said</a>:</p>\n<blockquote>\n<p>No, the error message should show the proofs with explicit or raw arguments when needed, maybe with a comment<br>\n“(shown here with <code>pp.explicit := true</code>, as otherwise the terms look identical)” added. It’s just plain silly to offer the user an error message saying two identical things differ. Filed as <a href=\"https://github.com/leanprover/lean4/pull/3232\">lean4#3232</a>.</p>\n</blockquote>\n<p>This is an even better suggestion, I encou<strong>rage</strong> people who have been affected by this problem before to give that issue an upvote.</p>",
        "id": 418925448,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706651085
    },
    {
        "content": "<p>(I was a little nervous about telling the lean maintainers to do something that complicated given how many hoops you have to jump through to even submit a PR to that repo, but I agree that this would be better)</p>",
        "id": 418925826,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706651239
    },
    {
        "content": "<p>I understand; I probably wouldn’t have phrased my suggestion just as bluntly if I weren’t part of the addressed group here :-)</p>",
        "id": 418926115,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706651377
    },
    {
        "content": "<p>Do you find contributing to lean unnecessary hard?</p>",
        "id": 418926194,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706651404
    },
    {
        "content": "<p>The thread linked (on GH issue) of <a href=\"#narrow/stream/113489-new-members/topic/Why.20failing.20to.20unify.3F\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Why.20failing.20to.20unify.3F</a> suggests an even more ambitious way to do useful suggestions. When faced with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">b</span>\n<span class=\"k\">with</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>one could imagine a regex parser that realizes that, in fact, the string <code>1 • b = b</code> matches the string pattern <code>1 • ?b = ?b</code> and then (tries to) suggest something in more detail about what's going wrong. Of course a _full_ set of useful suggestions/explanations could be extremely difficult, as complicated as unification itself -- but, I dunno, maybe some cases...</p>\n<p>One could imagine a scenario where it tries to <code>convert</code> the <code>1 • b = b</code> into the necessary form, removing the <code>?b</code>s, and then instead it could print out something like <code>couldn't synthesize instance [SMul (ℕ → F)]</code> or whatever the appropriate thing is.</p>\n<p>I have no idea how hard that is <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>  in like a <a href=\"https://xkcd.com/1425/\">https://xkcd.com/1425/</a> sense</p>",
        "id": 418927400,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1706651938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/rage/near/418926194\">said</a>:</p>\n<blockquote>\n<p>Do you find contributing to lean unnecessary hard?</p>\n</blockquote>\n<p>I have not attempted to contribute to lean because the contribution guidelines give me the sense that I have to establish a clear consensus on the part of the community before a PR will be considered, and that seems hard to do. I was going to start a PR for this issue but then I got told I had to make an RFC first, and by the time I did that it seems you got in first with the bug report. I guess classifying this behavior as a bug maybe makes the process easier? It doesn't seem like what I would call a bug, but if that sidesteps having to convince a bunch of people from the forum to come and upvote the issue, that's fine by me.</p>",
        "id": 418927639,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706652021
    },
    {
        "content": "<p>I think it counts as a usability bug -- we've all been bit by this. Having the issue means it's easier to keep track of <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>'s as a measure of how much it impacts the community.</p>\n<p>We might still need an RFC of some sort. It's not clear to me what the right design is for something that tries to explain why two terms are not defeq. There are approximate solutions that insert <code>pp.explicit</code> hints where terms differ (and hopefully do something sensible when there is notation), and there are complicated solutions that make the defeq algorithm be self-explaining on failure.</p>",
        "id": 418928252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706652307
    },
    {
        "content": "<p>How many upvotes are even required before an RFC is eligible to have a PR made for it? Is it even a hard requirement? The <a href=\"https://github.com/leanprover/lean4/blob/master/CONTRIBUTING.md\">contribution guidelines</a> do not make this clear.</p>",
        "id": 418928412,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706652371
    },
    {
        "content": "<p>Sebastian pointed me to an existing function that helps here, so at least using that in <code>apply</code> is a no-brainer I’d say, and I PRed that (<a href=\"https://github.com/leanprover/lean4/pull/3234\">lean4#3234</a>). It’s probably necessary to keep the bar for contributions a bit high, as a filter to not be distracted by crazy, half-baked, disruptive ideas. But personally I’d suggest to apply common sense: If there is something that annoys you as a regular user, e.g. a bad error message, then that' doesn’t need a RFC in my view, the PR will describe the idea well enough.</p>",
        "id": 418928990,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706652651
    },
    {
        "content": "<p>Fundamentally, for contributing you need to know if a PR is going to be something that the Lean developers will want to merge. Having <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>'s is not a requirement, but it can be used by the Lean developers to decide what features to pursue. Community consensus is a part of the process, but even if there's consensus that doesn't mean a PR will be merged.</p>\n<p>This does add friction to the process, and it can be hard to tell how much effort to put into the different stages of trying to contribute to the project.</p>",
        "id": 418929661,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706652963
    },
    {
        "content": "<p>One person's common sense is unfortunately often another person's nuanced issue. The RFC template asks if the change will streamline the code or make it harder to maintain, and in this case it seems like the latter to me, so unfortunately I would not have been confident enough on my own to make a PR here without at least a few upvotes on my RFC. I am left with the sense in my heart of hearts that if you all hadn't swooped in to save the day at the right moment, this issue would not have gotten traction.  </p>\n<p>But if this is anyone's fault it's that of people like me who are not confident enough to forcefully move the ball forward on issues. I appreciate your all's help and willingness to apply your talents and submit Github issues and PRs for this. I will try to be more proactive in the  future about submitting RFCs and PRs when I encounter pain points.</p>",
        "id": 418932239,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706654060
    },
    {
        "content": "<p>It's also perfectly fine to rant on Zulip until someone picks it up. there are many ways to help, and if an issue alloys enough people, and these people learn that they are not alone in their annoyance, eventually one of them will likely act. (Or else it wasn't annoying enough :-))</p>",
        "id": 418932562,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706654202
    },
    {
        "content": "<p>annoying enough to the devs?</p>",
        "id": 418932660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706654261
    },
    {
        "content": "<p>It's entirely possible that something very annoying and frequent to a user doesn't show up as an issue to the devs</p>",
        "id": 418932785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706654304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> if it helps to hear I thought of what Joachim filed but also tapered the message I sent for the reasons you mentioned :). But clearly it's good as we still got to some chance of improvement.</p>",
        "id": 418940938,
        "sender_full_name": "Julian Berman",
        "timestamp": 1706658251
    },
    {
        "content": "<p>I’m annoyed when my users are annoyed, so as long as annoyance is radiated, there is a chance it can get fixed :-)</p>",
        "id": 419017899,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1706699802
    }
]