[
    {
        "content": "<p>Hello!<br>\nI recently needed the following result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tendsto_measure_iUnion_iUnion</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"bp\">↦</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.range</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>This is true by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.tendsto_measure_iUnion#doc\">docs#MeasureTheory.tendsto_measure_iUnion</a> when you set <code>s</code> to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I did not find a general statement of continuity from below which did not require some monotonicity or \"directedness\" of the family of sets used.</p>\n<p>I ended up proving this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">measure_iUnion_eq_iSup'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r_trans</span> <span class=\"o\">:</span> <span class=\"n\">Transitive</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Countable</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDirected</span> <span class=\"n\">ι</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Unlike <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.measure_iUnion_eq_iSup#doc\">docs#MeasureTheory.measure_iUnion_eq_iSup</a>, I removed any assumption about the family of sets and added instead assumptions about the index. Do you think this would be worth having, or something of the same kind?</p>",
        "id": 435144352,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1713949587
    },
    {
        "content": "<p>My instinct would be to say that these are easy consequences of the directed versions and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.biUnion_iUnion#doc\">docs#Set.biUnion_iUnion</a>. But I’ll let measure theory experts decide wether or not it’s worth adding</p>",
        "id": 435606464,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1714144559
    },
    {
        "content": "<p>Related PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12447\">#12447</a>.<br>\n(I haven't look closely enough to see whether these are useful to add, or too similar to the existing lemmas)</p>",
        "id": 435629446,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714152166
    }
]