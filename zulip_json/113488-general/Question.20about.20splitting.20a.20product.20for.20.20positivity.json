[
    {
        "content": "<p>Hey all,</p>\n<p>I had a quick question about how I could prove that a product is positive by proving that its two components are both positive. My (full of sorry's) MWE is here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Modeq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Divisibility.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.EuclideanDomain.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupPower.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Zify</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">algebraic_identity</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n  <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">C</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">B</span> <span class=\"bp\">-</span> <span class=\"n\">A</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"bp\">-</span> <span class=\"n\">A</span>\n  <span class=\"k\">have</span> <span class=\"n\">imp1</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">C</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"c1\">--We want to show by the sum of squares that this is always non-negative.</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">imp1</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">ring</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">identity</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">3</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">):=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ring</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">identity</span><span class=\"o\">]</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">pos1</span><span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">+</span><span class=\"n\">A</span><span class=\"bp\">+</span><span class=\"n\">C</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">positivity</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">pos2</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">C</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">B</span> <span class=\"bp\">-</span> <span class=\"n\">B</span><span class=\"bp\">*</span><span class=\"n\">C</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">C</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Essentially, I want to use pos1 and pos2 to reason that their product is positive. However, I don't know exactly how I could integrate these two with positivity.</p>\n<p>Thanks!</p>",
        "id": 430923556,
        "sender_full_name": "Eric Chen",
        "timestamp": 1712123315
    },
    {
        "content": "<p>Have you tried the <code>linarith</code> tactic? Also, maybe using the <code>calc</code> tactic might help.</p>",
        "id": 430927914,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712125927
    },
    {
        "content": "<p>Can you take it from here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">algebraic_identity</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n    <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">C</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">C</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">B</span> <span class=\"bp\">-</span> <span class=\"n\">B</span><span class=\"bp\">*</span><span class=\"n\">C</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mul_nonneg</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">C</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 430940950,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712131307
    },
    {
        "content": "<p>Yep, this solves it.  Thank you so much! </p>\n<p>In general, how does <code>calc</code> work? What do the underscores and question marks mean?</p>",
        "id": 431202348,
        "sender_full_name": "Eric Chen",
        "timestamp": 1712191962
    },
    {
        "content": "<p>If you hover over <code>calc</code> the pop-up explains the basics. <code>?_</code> is a placeholder that gives a separate goal afterwards to provide that term (either in the calculation or a proof of a step).</p>",
        "id": 431203238,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712192583
    },
    {
        "content": "<p>I see, thanks everyone!</p>",
        "id": 431204000,
        "sender_full_name": "Eric Chen",
        "timestamp": 1712193187
    }
]