[
    {
        "content": "<p>Hello!</p>\n<p>I'm following \"The Mechanics of Proof\" book and am stuck at <a href=\"https://hrmacbeth.github.io/math2001/02_Proofs_with_Structure.html#exercises\">Exercise 2.1.9.3</a>.</p>\n<p>I came up with the following solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">addarith</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">cancel</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"mi\">1</span>       <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span>       <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">1</span>       <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>           <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">numbers</span>\n</code></pre></div>\n<p>Yet it fails on <code> _ = 1 / x := by ring</code> step:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span>\n\n<span class=\"bp\">▶</span> <span class=\"mi\">95</span><span class=\"o\">:</span><span class=\"mi\">27</span><span class=\"bp\">-</span><span class=\"mi\">95</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">ring</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"n\">expressions</span> <span class=\"n\">not</span> <span class=\"n\">equal</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span>\n</code></pre></div>\n<p>Is there any other tactic than <code>ring</code> which could allow me to cancel a positive variable divided by itself?</p>\n<p>P.S. I'm using Lean v4.2.0 and Mathlib4 v4.2.0 (according to <code>lake-manifest.json</code>).</p>",
        "id": 420221554,
        "sender_full_name": "Full name or 名前",
        "timestamp": 1707302031
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span></p>",
        "id": 420221723,
        "sender_full_name": "Full name or 名前",
        "timestamp": 1707302075
    },
    {
        "content": "<p>Maybe <code>field_simp</code>?</p>",
        "id": 420222184,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707302228
    },
    {
        "content": "<p>Division and inverses are not axioms of a ring, so one should not expect <code>ring</code> to know things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>×</mo><msup><mi>y</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">y\\times y^{-1}=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> for nonzero <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>.</p>",
        "id": 420222627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707302383
    },
    {
        "content": "<p>Neither do this work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">addarith</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">cancel</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">numbers</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n  <span class=\"n\">cancel</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"n\">h4</span> <span class=\"c1\">-- application type mismatch nonneg_of_mul_nonneg_left ...</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">nonneg_of_mul_nonneg_left</span> <span class=\"n\">h4</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">h4</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">m.113395</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 420224995,
        "sender_full_name": "Full name or 名前",
        "timestamp": 1707303070
    },
    {
        "content": "<p>You've got <code>x</code> on the left and then on the right</p>",
        "id": 420225559,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707303254
    },
    {
        "content": "<p>Yeah, but how can I cancel them out? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 420226025,
        "sender_full_name": "Full name or 名前",
        "timestamp": 1707303422
    },
    {
        "content": "<p>I mean, you have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>y</mi><mo>=</mo><mn>1</mn><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">xy = 1x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\">x</span></span></span></span> rather than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>y</mi><mo>=</mo><mi>x</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">xy = x1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">1</span></span></span></span></p>",
        "id": 420226954,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707303731
    },
    {
        "content": "<p>Interesting... Now it compiles, but I get this error:</p>\n<blockquote>\n<p>(deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</p>\n</blockquote>",
        "id": 420227242,
        "sender_full_name": "Full name or 名前",
        "timestamp": 1707303843
    },
    {
        "content": "<p>The code is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- (deterministic) timeout ...</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">addarith</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">cancel</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">numbers</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n  <span class=\"n\">cancel</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"n\">h4</span>\n</code></pre></div>",
        "id": 420227391,
        "sender_full_name": "Full name or 名前",
        "timestamp": 1707303899
    },
    {
        "content": "<p>Strangely enough a colleague reported this exact example to me yesterday, as well.  I think it's a reducibility setting -- but I also think the best fix will be a complete reimplementation (to mathlib standards of robustness) of this tactic, at which point I will also PR it to mathlib.  Some previous discussion:<br>\n<a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20The.20mechanics.20of.20proof.3A.20cancel.20tactic.20on.20a.5E2.20.3F/near/401470618\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20The.20mechanics.20of.20proof.3A.20cancel.20tactic.20on.20a.5E2.20.3F/near/401470618</a></p>",
        "id": 420388547,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1707368713
    },
    {
        "content": "<p>In the short term: try the following endgame, which doesn't involve your last <code>cancel</code> step:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mn>1</mn><mo>⋅</mo><mi>y</mi><mo>≤</mo><mi>x</mi><mi>y</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">y = 1\\cdot y \\le x y = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>",
        "id": 420388645,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1707368778
    }
]