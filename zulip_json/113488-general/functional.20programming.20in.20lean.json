[
    {
        "content": "<p>i've been reading through chapter 1.6  but got stuck on the exercise to write a function with the type α × (β ⊕ γ) → (α × β) ⊕ (α × γ).<br>\nDon't know how much i should go into the detail, to not spoil the exercise for other but my current approach would give me either α × β : Type or α × γ : Type, depending on how things are arranged.<br>\ncan't wrap my head around, how to return both choices of the sum. what am i missing here?</p>",
        "id": 413248921,
        "sender_full_name": "grafoo",
        "timestamp": 1705443519
    },
    {
        "content": "<p>It sounds like you pretty much have the idea: how do you express <code>either α × β : Type or α × γ </code> as a single type?</p>",
        "id": 413249557,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1705443794
    },
    {
        "content": "<p>Hint: use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sum.inl#doc\">docs#Sum.inl</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sum.inr#doc\">docs#Sum.inr</a> depending on context.</p>",
        "id": 413249679,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705443843
    },
    {
        "content": "<p>no way, this seems so wrong to me.<br>\ndon't know why this wasn't obvious in the first place.<br>\nbut still something feels really off looking at it.<br>\nmaybe i should call it a day for now :D</p>\n<p>thanks anyway!</p>",
        "id": 415378553,
        "sender_full_name": "grafoo",
        "timestamp": 1705445603
    },
    {
        "content": "<p>maybe due to the unicode symbols, it looks so much like multiplication and addition, that it seems like somehow you'd loose information when returning the products like this.</p>",
        "id": 415379143,
        "sender_full_name": "grafoo",
        "timestamp": 1705445851
    },
    {
        "content": "<p>It's meant to be analogous to multiplication and addition. There's is a sort of distributive law for product and sum types.</p>",
        "id": 415379709,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705446073
    },
    {
        "content": "<p>sure, as a concept it absolutely makes sense. but in terms of syntax, looking at it just deeply confused me.<br>\ngreat experience though  : )</p>",
        "id": 415380761,
        "sender_full_name": "grafoo",
        "timestamp": 1705446513
    },
    {
        "content": "<p>These two types are equivalent, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.prodSumDistrib#doc\">docs#Equiv.prodSumDistrib</a></p>",
        "id": 415381020,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705446634
    },
    {
        "content": "<p>A more readable version is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.sumProdDistrib#doc\">docs#Equiv.sumProdDistrib</a></p>",
        "id": 415381094,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705446671
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 415383047,
        "sender_full_name": "grafoo",
        "timestamp": 1705447540
    }
]