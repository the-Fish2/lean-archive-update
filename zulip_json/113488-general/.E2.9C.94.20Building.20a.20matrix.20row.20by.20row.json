[
    {
        "content": "<p>Hi, this is probably a very common question - I thought I'd define my own matrix (rather, 2D array) type like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Mat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n  <span class=\"n\">correct</span> <span class=\"o\">:</span> <span class=\"n\">data.data.length</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>(btw, not sure yet if including a proof in the structure is good practice - is it erased at runtime?)</p>\n<p>When I try to build up such a matrix from a list of lists (the outer lists are rows, i.e. <code>m</code>), I'm running into a problem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ofLists</span><span class=\"bp\">?</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Mat</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Except.error</span> <span class=\"s2\">\"Empty list\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">l.length</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">c.length</span>\n  <span class=\"k\">let</span> <span class=\"n\">mat</span> <span class=\"bp\">←</span> <span class=\"n\">build</span> <span class=\"mi\">0</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n                <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">Array.empty</span><span class=\"o\">,</span> <span class=\"n\">correct</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n                <span class=\"o\">(</span><span class=\"n\">NonEmptyList.mk</span> <span class=\"n\">c</span> <span class=\"n\">cs</span><span class=\"o\">)</span>\n  <span class=\"n\">Except.ok</span> <span class=\"bp\">$</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">mat</span><span class=\"o\">⟩⟩</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">build</span>\n    <span class=\"o\">(</span><span class=\"n\">m0</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"o\">:</span> <span class=\"n\">Mat</span> <span class=\"n\">m0</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">elems</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">Mat</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">elems</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">append_row</span><span class=\"bp\">?</span> <span class=\"n\">mat</span> <span class=\"n\">head</span>\n    <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mat</span> <span class=\"bp\">←</span> <span class=\"n\">append_row</span><span class=\"bp\">?</span> <span class=\"n\">mat</span> <span class=\"n\">x</span>\n    <span class=\"n\">build</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m0</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">mat</span> <span class=\"o\">{</span> <span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>The non-recursive case, i.e. the call to <code>append_row?</code> doesn't compile. The error is <code>has type Except String (Mat (Nat.succ m0) n α) but is expected to have type Except String (Mat m n α)</code>. How can I convince Lean that at this point, the two are the same? The invariant <code>elems.tail.length + m0 + 1 = m</code> holds over the <code>build</code> loop, but I'm not sure how to \"rewrite\" the type of the expression even if I have a proof of that invariant.</p>",
        "id": 410537842,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1703935185
    },
    {
        "content": "<p>Not an answer to your question but surely the empty list is fine if m=0? (and in this case it's impossible to read off n)</p>",
        "id": 410539060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703936188
    },
    {
        "content": "<p>I excluded it because like you said n is unknown in that case, and my program won't need to deal with empty matrices.</p>",
        "id": 410540095,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1703937151
    },
    {
        "content": "<p>The problem can be reformulated to \"how do I write this function\": </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">substituteVar</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">invariant</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">Mat</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">Mat</span> <span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410540440,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1703937530
    },
    {
        "content": "<p>With <code>congrArg</code> I can probably obtain <code>Except String (Mat x n α) = Except String (Mat y n α)</code>, but I'm still unclear how to \"apply\" that to the expression</p>",
        "id": 410540660,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1703937705
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">invariant</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>fill in the goal with what you want?</p>",
        "id": 410540804,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1703937802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Yes! I didn't know about the <code>subst</code> tactic, thanks.</p>",
        "id": 410540910,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1703937920
    },
    {
        "content": "<p>Is there a way to do it without tactics too?</p>",
        "id": 410540929,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1703937948
    },
    {
        "content": "<p>invariant \\t expr</p>",
        "id": 410541001,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1703937993
    },
    {
        "content": "<p>Perfect. The book mentioned <code>▸</code>, but not that it can substitute things other than <code>Prop</code>, I think.</p>",
        "id": 410541168,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1703938181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674793\">Nikolai Morin</span> has marked this topic as resolved.</p>",
        "id": 410541175,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703938186
    },
    {
        "content": "<p>Small follow-up question:  In the second match arm of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Except.error</span> <span class=\"s2\">\"Empty list\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>can I somehow get proof that <code>l = c :: cs</code>?</p>",
        "id": 410542695,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1703939764
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">match</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Except.error</span> <span class=\"s2\">\"Empty list\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>should do</p>",
        "id": 410542887,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703939955
    }
]