[
    {
        "content": "<p>While discussing the \"flexible tactic\" linter, the broader question of \"what constitutes solid, maintainable code\" arose.  This would be a precursor to then implementing these changes (e.g. via style-guides, linters and code-review).</p>\n<p>The typical example of a maintenance burden is <code>simp</code> in the middle of a proof.</p>\n<p>What other stability/maintenance concerns do you have/want to discuss?</p>",
        "id": 431699679,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712431773
    },
    {
        "content": "<p>I think there's a conversation to be had about the proper use of <code>variable</code> – some library files are prone to reusing type variables while repeatedly changing the instance assumptions on them, making it very hard to find what's being assumed at a given point.</p>\n<p>Maybe we could make it a rule (enforced by a linter) that <code>variable</code> is only permitted at the start of a <code>section</code> (or other scoping construct e.g. <code>namespace</code>)?</p>",
        "id": 431805798,
        "sender_full_name": "David Loeffler",
        "timestamp": 1712515931
    },
    {
        "content": "<p>#where tells you the current assumptions in scope.</p>",
        "id": 431808263,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712517404
    },
    {
        "content": "<p>I'd be in favor of reducing \"non-locality\" in uses of variables!</p>",
        "id": 431816675,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712524269
    },
    {
        "content": "<p>I agree that the situation described by David is problematic.</p>",
        "id": 431816699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712524306
    },
    {
        "content": "<p>Aren't variables mid-section isomorphic to just putting more sections? What does it buy exactly?</p>",
        "id": 431817311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712524835
    },
    {
        "content": "<p>Is there an official guideline saying that <code>variable</code>s can be data or instance declarations but not assumptions? It is desirable that copy-pasting a declaration either works or fails with an error, but an assumption in a <code>variable</code> can make the copied declaration valid but with a different meaning.</p>",
        "id": 431817512,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712525029
    },
    {
        "content": "<p>Mario, it buys that variables are easier to find. But I think the main thing should be to use different names for the types that have different type classes.</p>",
        "id": 431817958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712525450
    },
    {
        "content": "<p>No, we have never made that recommendation explicitly, but maybe we should. <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/430532850\">This example</a> was particularly compelling to me as a mistake caused by misreading a <code>variable</code></p>",
        "id": 431817960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712525450
    },
    {
        "content": "<p>there's a big difference between <code>PNT</code> and <code>ChebyshevBound -&gt; PNT</code>!</p>",
        "id": 431818058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712525529
    },
    {
        "content": "<p>Yes, that's exactly the example I had in mind</p>",
        "id": 431819143,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712526531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Proof.20stability.20and.20maintenance/near/431817958\">said</a>:</p>\n<blockquote>\n<p>Mario, it buys that variables are easier to find.</p>\n</blockquote>\n<p>Is the idea here that you are using the document structure to find the variables? (e.g. folding regions or the sticky header feature) If so, then it's also possible to add this as a server functionality without changing the text: make variables also act as folding regions, and then they will show up in the sticky scroll as well</p>",
        "id": 431819573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712526961
    },
    {
        "content": "<p>that sounds even more useful in fact, since I'd rather see <code>variable [Group G]</code> in the sticky header than the <code>section</code> line that precedes it</p>",
        "id": 431819637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712526992
    },
    {
        "content": "<p>That’s a good idea, except there are some files where that would take half of the reading space <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 431819804,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1712527134
    },
    {
        "content": "<p>I think the point is more to make sure that <code>variable</code>s are used in a \"structured\" and scoped way, instead of altering them piecemeal. It helps with reasoning about them, for maintenance too.</p>",
        "id": 431819857,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712527186
    },
    {
        "content": "<p>Sometimes I've wondered (not very seriously) about <code>variable</code> and <code>open</code> being clauses to <code>section</code> and <code>namespace</code>, rather than being commands of their own.</p>",
        "id": 431819972,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712527245
    },
    {
        "content": "<p>One easy rule we can add is to prefer <code>variable (x) in</code> to make <code>x</code> explicit rather than do a lot of back and forth</p>",
        "id": 431820124,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1712527372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113488-general/topic/Proof.20stability.20and.20maintenance/near/431819804\">said</a>:</p>\n<blockquote>\n<p>That’s a good idea, except there are some files where that would take half of the reading space <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>I believe VSCode already has some heuristics to avoid the sticky scroll taking up too much space. But I think it may not know what to prioritize in the case where the limit is exceeded</p>",
        "id": 431820234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712527469
    },
    {
        "content": "<p>you can try stacking up <code>section</code>s to see the behavior</p>",
        "id": 431820240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712527494
    },
    {
        "content": "<blockquote>\n<p>then it's also possible to add this as a server functionality without changing the text: make variables also act as folding regions, and then they will show up in the sticky scroll as well</p>\n</blockquote>\n<p>This sounds incredibly useful. So often I have to scroll and search just to find out what the typeclass assumptions on a lemma are or make the mistake of thinking I have to declare a variable when it already exists in a <code>variable</code> above.</p>",
        "id": 431820682,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712528028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Proof.20stability.20and.20maintenance/near/431817958\">said</a>:</p>\n<blockquote>\n<p>But I think the main thing should be to use different names for the types that have different type classes.</p>\n</blockquote>\n<p>I think in the face of named arguments this is not so clear-cut idea. If I invoke a lemma as <code>foo (R := _)</code>, and then someone comes along and say \"actually, foo works for semirings\", then it's a bit annoying for users to have to change to <code>foo (S := _)</code></p>",
        "id": 431822077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712529221
    },
    {
        "content": "<p>Obviously for rings/semirings this is perhaps close to desired behavior, but for large piles of typeclass variants without simple one-letter names, changing between <code>(X := _)</code> and <code>(X''' := _)</code> is going to be very annoying</p>",
        "id": 431822141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712529284
    },
    {
        "content": "<p>That’s a good point that requires some attention.</p>",
        "id": 431822829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712530008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/113488-general/topic/Proof.20stability.20and.20maintenance/near/431805798\">said</a>:</p>\n<blockquote>\n<p>I think there's a conversation to be had about the proper use of <code>variable</code> – some library files are prone to reusing type variables while repeatedly changing the instance assumptions on them, making it very hard to find what's being assumed at a given point.</p>\n<p>Maybe we could make it a rule (enforced by a linter) that <code>variable</code> is only permitted at the start of a <code>section</code> (or other scoping construct e.g. <code>namespace</code>)?</p>\n</blockquote>\n<p>I'd rather ban overriding declared variables. Forcing variables to be declared only at the start of a section will either make the Infoview messy or make the code \"too much nested\".</p>",
        "id": 431869014,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712557898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Proof.20stability.20and.20maintenance/near/431819972\">said</a>:</p>\n<blockquote>\n<p>Sometimes I've wondered (not very seriously) about <code>variable</code> and <code>open</code> being clauses to <code>section</code> and <code>namespace</code>, rather than being commands of their own.</p>\n</blockquote>\n<p>I like this idea a lot!  I have often wished that <code>variable {R} [Semiring R] in section ... end</code> meant <code>section variable {R} [Semiring R] ... end</code>!</p>",
        "id": 431978630,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712585138
    },
    {
        "content": "<p>i just thought of a small (probably fixable) issue with this:<br>\ni sometimes use multiple <code>variable</code> clauses to get <code>variable?</code> to work its magic. for flexibility, i then leave it behind like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"c1\">-- possibly also some other parameters to help `variable?` do its magic</span>\n<span class=\"kd\">variable</span> <span class=\"c1\">--? [Foo T] =&gt;</span>\n  <span class=\"o\">[</span><span class=\"n\">Bar</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Baz</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>i don't know how this kind of pattern should/could be done (syntactically) when you make <code>variable</code> a clause to <code>section</code> or <code>namespace</code>, because the pattern (seems to) require multiple <code>variable</code> declarations...</p>",
        "id": 432167273,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712651733
    }
]