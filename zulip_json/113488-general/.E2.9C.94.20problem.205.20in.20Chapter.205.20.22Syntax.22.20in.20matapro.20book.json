[
    {
        "content": "<p>The solution of this problem does not work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Classes.SetNotation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Util.ExtendedBinder</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">bigsumin</span><span class=\"o\">)</span> <span class=\"s2\">\"∑ \"</span> <span class=\"n\">Std.ExtendedBinder.extBinder</span> <span class=\"s2\">\"in \"</span> <span class=\"n\">term</span> <span class=\"s2\">\",\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">term_elab</span> <span class=\"n\">bigsumin</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabSum</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">tp</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">return</span> <span class=\"n\">mkNatLit</span> <span class=\"mi\">666</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">{</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"o\">},</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hi</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">{</span> <span class=\"s2\">\"apple\"</span><span class=\"o\">,</span> <span class=\"s2\">\"banana\"</span><span class=\"o\">,</span> <span class=\"s2\">\"cherry\"</span> <span class=\"o\">},</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">hi</span>\n</code></pre></div>",
        "id": 434461560,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713580096
    },
    {
        "content": "<p>see: <a href=\"https://leanprover-community.github.io/lean4-metaprogramming-book/main/05_syntax.html#exercises\">https://leanprover-community.github.io/lean4-metaprogramming-book/main/05_syntax.html#exercises</a></p>",
        "id": 434461568,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713580124
    },
    {
        "content": "<p>see: <a href=\"https://leanprover-community.github.io/lean4-metaprogramming-book/solutions/05_syntax.html\">https://leanprover-community.github.io/lean4-metaprogramming-book/solutions/05_syntax.html</a></p>",
        "id": 434461579,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713580140
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Util.ExtendedBinder</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">bigsumin</span><span class=\"o\">)</span> <span class=\"s2\">\"∑ \"</span> <span class=\"n\">Std.ExtendedBinder.extBinder</span> <span class=\"s2\">\"in \"</span> <span class=\"n\">term</span> <span class=\"s2\">\",\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">term_elab</span> <span class=\"n\">bigsumin</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabSum</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">tp</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">return</span> <span class=\"n\">mkNatLit</span> <span class=\"mi\">666</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">{</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"o\">},</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hi</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">{</span> <span class=\"s2\">\"apple\"</span><span class=\"o\">,</span> <span class=\"s2\">\"banana\"</span><span class=\"o\">,</span> <span class=\"s2\">\"cherry\"</span> <span class=\"o\">},</span> <span class=\"n\">x.length</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">hi</span>\n</code></pre></div>",
        "id": 434462663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713581133
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 434464786,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713583250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 434464790,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713583253
    }
]