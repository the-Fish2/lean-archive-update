[
    {
        "content": "<p>Hi, newcomer here. I have some experience with Agda, but Lean is pretty new to me. I'm exploring the language, and to start I tried formalizing some of the arguments I was studying recently, which among other things involve possibly infinite sequences. I tried the Stream'.Seq type, though I was not very satisfied, so I tried to write my own, also as a way to better understand how the language works.</p>\n<p>I thus wrote this simplified <code>Sequence</code> type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span>\n</code></pre></div>\n<p>and I wanted to extend it with a <code>Sequence.iterate</code> function, similar to <code>Stream'.iterate</code> (which doesn't seem to exist for <code>Stream'.Seq</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">get</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">none</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">seq</span>\n</code></pre></div>\n<p>I'm however stuck at proving <code>seq</code>. The goal is <code>get (n + 1) = none</code> but I would expect this to automatically reduce using the definition of <code>get</code> to something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">none</span>\n<span class=\"w\">  </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span>\n</code></pre></div>\n<p>Then I would rewrite using the equality <code>e</code> (of type <code>get n = none</code>) and after a final reduction I would expect a goal of type <code>none = none</code>, which should be trivially solvable with <code>rfl</code>.</p>\n<p>However I cannot get the goal to perform the first reduction. None <code>simp</code>, <code>unfold get</code>, <code>unfold_let</code>, whnf<code> or </code>reduce` seem to reduce the goal.</p>\n<p>(Also, bonus points if this is doable without tactics. They feel very much magic and at least initially I would like to understand how to do things manually, and let tactics do the work only after I've understood what that work is)</p>\n<p>For comparison, this is what I would write in Agda:</p>\n<div class=\"codehilite\" data-code-language=\"Agda\"><pre><span></span><code><span class=\"kr\">open</span><span class=\"w\"> </span><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"n\">Agda.Builtin.Equality</span>\n<span class=\"kr\">open</span><span class=\"w\"> </span><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"n\">Agda.Builtin.Maybe</span>\n<span class=\"kr\">open</span><span class=\"w\"> </span><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"n\">Agda.Builtin.Nat</span>\n\n<span class=\"kr\">record</span><span class=\"w\"> </span>Sequence<span class=\"w\"> </span><span class=\"o\">{</span>a<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span>T<span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"w\"> </span>a<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"kr\">where</span>\n<span class=\"w\">  </span><span class=\"kr\">field</span>\n<span class=\"w\">    </span><span class=\"nf\">get</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>Nat<span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span>Maybe<span class=\"w\"> </span>T\n<span class=\"w\">    </span><span class=\"nf\">seq</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"o\">(</span>n<span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>Nat<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span>get<span class=\"w\"> </span>n<span class=\"w\"> </span>≡<span class=\"w\"> </span>nothing<span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span>get<span class=\"w\"> </span><span class=\"o\">(</span>suc<span class=\"w\"> </span>n<span class=\"o\">)</span><span class=\"w\"> </span>≡<span class=\"w\"> </span>nothing\n\n<span class=\"nf\">iterate</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"ow\">∀</span><span class=\"w\"> </span><span class=\"o\">{</span>a<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span>T<span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"w\"> </span>a<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span>T<span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span><span class=\"o\">(</span>T<span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span>Maybe<span class=\"w\"> </span>T<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span>Sequence<span class=\"w\"> </span>T\niterate<span class=\"w\"> </span><span class=\"o\">{</span>_<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span>T<span class=\"o\">}</span><span class=\"w\"> </span>x<span class=\"w\"> </span>f<span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kr\">record</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span>get<span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span>get;<span class=\"w\"> </span>seq<span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span>seq<span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"kr\">where</span>\n<span class=\"w\">  </span><span class=\"nf\">get</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>Nat<span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span>Maybe<span class=\"w\"> </span>T\n<span class=\"w\">  </span>get<span class=\"w\"> </span>zero<span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span>just<span class=\"w\"> </span>x\n<span class=\"w\">  </span>get<span class=\"w\"> </span><span class=\"o\">(</span>suc<span class=\"w\"> </span>n<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kr\">with</span><span class=\"w\"> </span>get<span class=\"w\"> </span>n\n<span class=\"w\">  </span><span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"ow\">|</span><span class=\"w\"> </span>nothing<span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span>nothing\n<span class=\"w\">  </span><span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"ow\">|</span><span class=\"w\"> </span>just<span class=\"w\"> </span>y<span class=\"w\">  </span><span class=\"ow\">=</span><span class=\"w\"> </span>f<span class=\"w\"> </span>y\n<span class=\"w\">  </span><span class=\"nf\">seq</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"o\">(</span>n<span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>Nat<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span>get<span class=\"w\"> </span>n<span class=\"w\"> </span>≡<span class=\"w\"> </span>nothing<span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span>get<span class=\"w\"> </span><span class=\"o\">(</span>suc<span class=\"w\"> </span>n<span class=\"o\">)</span><span class=\"w\"> </span>≡<span class=\"w\"> </span>nothing\n<span class=\"w\">  </span>seq<span class=\"w\"> </span>n<span class=\"w\"> </span>e<span class=\"w\"> </span><span class=\"kr\">rewrite</span><span class=\"w\"> </span>e<span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span>refl\n</code></pre></div>",
        "id": 444842140,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1718440176
    },
    {
        "content": "<p>(It's super helpful when asking questions to post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, i.e. a single chunk of code that people can copy and paste, or open in the live sandbox.)</p>",
        "id": 444844817,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718442569
    },
    {
        "content": "<p>The first two snippets together make up a mwe. In hindsight I should have put them in the same code block. For convenience I will repost them here together so they're simplier to copy-paste or open in the live sandbox. I've also added an <code>import Mathlib</code>, which seems to be needed to use some tactics like <code>whnf</code> and <code>reduce</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">get</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">none</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">seq</span>\n</code></pre></div>",
        "id": 444845172,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1718442858
    },
    {
        "content": "<p>I feel your pain. An intermediate definition solves the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">none</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_all</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">iterate_get</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 444845206,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718442903
    },
    {
        "content": "<p>but I'm sad I can't find any way to unfold the <code>let rec</code> (or using a <code>where</code> clause...)</p>",
        "id": 444845223,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718442919
    },
    {
        "content": "<p>I see. Is there an explanation somewhere of why this makes a difference?</p>",
        "id": 444845328,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1718443023
    },
    {
        "content": "<p>If there is I am looking forward to reading it as well! :-)</p>",
        "id": 444847523,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718444904
    },
    {
        "content": "<p>Now onto unraveling what <code>simp_all</code> is doing. Using <code>set_option trace.Meta.Tactic.simp true</code> I saw that it's using <code>iterate_get.eq_def</code> to reduce the call to <code>iterate_get</code> to its body. There doesn't seem to be a way to get the equivalent for a <code>let rec</code> binding or a <code>where</code> closure however, maybe that's why it didn't work? Using <code>iterate_get.eq_def</code> I also managed to write this without tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">iterate_get</span><span class=\"bp\">.</span><span class=\"n\">eq_def</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">substr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Actually, nevermind, <code>iterate_get.eq_def</code> doesn't seem to be necessary, as this work too, which is a bit confusing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">substr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now, in Agda I would use dependent pattern matching instead of <code>Eq.substr</code>. Using dependent pattern matching with <code>iterate_get.eq_def</code> seems to work, as it reduces the goal (check the goal at the <code>sorry</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">generalizing</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">iterate_get</span><span class=\"bp\">.</span><span class=\"n\">eq_def</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However further trying to use dependent pattern matching with <code>h</code> doesn't seem to work (check the goal at <code>sorry</code>, it's still the same as before; not even the lhs of <code>h</code> has been generalized)</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">generalizing</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">iterate_get</span><span class=\"bp\">.</span><span class=\"n\">eq_def</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">generalizing</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Am I mistaking how <code>match (generalizing := true)</code> works?</p>\n<p>(Edit: I should mention that all of these snippets are to be used in place of your definition of <code>Sequence.iterate</code>)</p>",
        "id": 444850656,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1718446689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"728068\">Giacomo Stevanato</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20reduce.20a.20goal/near/444850656\">said</a>:</p>\n<blockquote>\n<p>There doesn't seem to be a way to get the equivalent for a <code>let rec</code> binding or a <code>where</code> closure however, maybe that's why it didn't work?</p>\n</blockquote>\n<p>Actually, looks like there is an equivalent, but it becomes defined only after the <code>def</code> is concluded (however I need it inside the <code>def</code>!)</p>",
        "id": 444854482,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1718450044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"728068\">Giacomo Stevanato</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20reduce.20a.20goal/near/444850656\">said</a>:</p>\n<blockquote>\n<p>However further trying to use dependent pattern matching with <code>h</code> doesn't seem to work (check the goal at <code>sorry</code>, it's still the same as before; not even the lhs of <code>h</code> has been generalized)</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">generalizing</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">iterate_get</span><span class=\"bp\">.</span><span class=\"n\">eq_def</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">generalizing</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Am I mistaking how <code>match (generalizing := true)</code> works?</p>\n</blockquote>\n<p>I found out there is a more specific <code>iterate_get.eq_2</code> that also simplifies the <code>match</code>. This, combined with reversing the order of the <code>match</code>es, fixes the issue. </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">iterate_get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">iterate_get</span><span class=\"bp\">.</span><span class=\"n\">eq_2</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It's not that visually pleasing, but I guess it's as simple as this can get.</p>",
        "id": 444856272,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1718451749
    },
    {
        "content": "<p>Update: I'm trying to prove some properties of this <code>Sequence</code> type, particular the relation between elements when created using the <code>iterate</code> function. It's mostly fine except one step where I need to simplify <code>{ get := x, seq := y }.get</code> into just <code>x</code>. <code>simp</code> works but <code>set_option trace.Meta.Tactic.simp true</code> doesn't tell me what it's doing. I would expect this to be <code>Sequence.get.eq_def</code>, but that actually proves that <code>s.get = s.1</code>, which seems useless. Moreover I see I can prove <code>{ get := x, seq := y }.get</code> (called <code>Sequence.get.eq_def'</code> in the MWE) by just using <code>rfl</code> (no tactics needed!), but I don't understand how to do this without an additional binding.</p>\n<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">iterate</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bind</span><span class=\"w\"> </span><span class=\"n\">f</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">iterate</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">iterate</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"bp\">.</span><span class=\"n\">bind</span><span class=\"o\">])</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">.</span><span class=\"n\">eq_def'</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">seq</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">succ_iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bind</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">iterate</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">.</span><span class=\"n\">eq_def'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 444866658,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1718460495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20reduce.20a.20goal/near/444845223\">said</a>:</p>\n<blockquote>\n<p>but I'm sad I can't find any way to unfold the <code>let rec</code> (or using a <code>where</code> clause...)</p>\n</blockquote>\n<p>Yeah, it'd be nice if this worked. My understanding is that <code>let rec</code> is a shorthand for creating a <code>mutual</code> block, setting up a mutual recursion, and in any recursion you can't unfold the definition(s) being defined. The <code>where</code> clause is a macro for a <code>let rec</code> by the way.</p>\n<p>It would be nice if somehow there were a way to detect whether a definition in a <code>let rec</code> could be defined outside the <code>mutual</code> block, letting you unfold it.</p>",
        "id": 444873620,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718465344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"728068\">@Giacomo Stevanato</span> I'm not sure what your current question is. Are you wanting to avoid <code>simp</code> for some reason? This looks fine to me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">iterate</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bind</span><span class=\"w\"> </span><span class=\"n\">f</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">iterate</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">iterate</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">succ_iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bind</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">iterate</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">iterate</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 444874041,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718465578
    },
    {
        "content": "<blockquote>\n<p>It's mostly fine except one step where I need to simplify <code>{ get := x, seq := y }.get</code> into just <code>x</code>. <code>simp</code> works but <code>set_option trace.Meta.Tactic.simp true</code> doesn't tell me what it's doing.</p>\n</blockquote>\n<p>This <code>{ get, seq : Sequence α }.get = get</code> reduction is built in to <code>simp</code>/<code>dsimp</code>. There are a number of basic reductions these tactics will do, and you can take a look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.Simp.Config#doc\">docs#Lean.Meta.Simp.Config</a> to see most of them.</p>\n<p>If you want to only do these reductions without any rewriting, you can do <code>dsimp only</code>.</p>",
        "id": 444874335,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718465749
    },
    {
        "content": "<p>For example here's configuring <code>dsimp</code> to <em>only</em> do projection reduction.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Sequence</span><span class=\"bp\">.</span><span class=\"n\">succ_iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bind</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">iterate</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">dsimp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">Simp</span><span class=\"bp\">.</span><span class=\"n\">neutralConfig</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">})</span><span class=\"w\"> </span><span class=\"n\">only</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">iterate</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>It's not normal to configure <code>dsimp</code> in this way, so don't be alarmed by how complicated this might seem! More often, but still rare, is something like <code>dsimp (config := {zeta := false}) only</code> to prevent reducing <code>let</code> expressions.</p>",
        "id": 444874705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718465971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20reduce.20a.20goal/near/444874041\">said</a>:</p>\n<blockquote>\n<p>Are you wanting to avoid <code>simp</code> for some reason?</p>\n</blockquote>\n<p>In the long run I will probably be fine with using <code>simp</code>, but at least initially I would like to avoid it in favour of doing things manually, in order to understand what's going on under the hood.</p>",
        "id": 444879339,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1718468328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20reduce.20a.20goal/near/444874335\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>It's mostly fine except one step where I need to simplify <code>{ get := x, seq := y }.get</code> into just <code>x</code>. <code>simp</code> works but <code>set_option trace.Meta.Tactic.simp true</code> doesn't tell me what it's doing.</p>\n</blockquote>\n<p>This <code>{ get, seq : Sequence α }.get = get</code> reduction is built in to <code>simp</code>/<code>dsimp</code>. There are a number of basic reductions these tactics will do, and you can take a look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.Simp.Config#doc\">docs#Lean.Meta.Simp.Config</a> to see most of them.</p>\n<p>If you want to only do these reductions without any rewriting, you can do <code>dsimp only</code>.</p>\n</blockquote>\n<p>If this is built into the tactic then how does it work when I \"force\" it with a separate definition? I'm not using any tactic there.</p>",
        "id": 444879562,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1718468400
    },
    {
        "content": "<p><code>rfl</code> works because the two sides are defeq. I'm not sure exactly how that works, but you can probably trace it</p>",
        "id": 444883830,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718470555
    },
    {
        "content": "<blockquote>\n<p>If this is built into the tactic then how does it work when I \"force\" it with a separate definition? I'm not using any tactic there.</p>\n</blockquote>\n<p>The <code>simp</code>/<code>dsimp</code> tactics are pretty much doing the same thing. They have code that can reduce <code>e</code> to <code>e'</code> using some rules, and then in the proof term they make use of the fact that <code>rfl : e = e'</code> (you might see <code>@id e' p</code>, where <code>p : e</code>, to change the type of the proof <code>p</code>). That is to say, they know that <code>e</code> and <code>e'</code> are defeq, so they can replace <code>e</code> with <code>e'</code> without changing whether the expression is type correct.</p>",
        "id": 444886129,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718471924
    },
    {
        "content": "<p>Something you can do yourself is use the <code>change</code> tactic to replace the goal with something that's defeq.</p>\n<p>The convenience of <code>dsimp</code> is that it computes what the new goal should be and does <code>change</code> for you.</p>",
        "id": 444886337,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718472038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20reduce.20a.20goal/near/444886129\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>If this is built into the tactic then how does it work when I \"force\" it with a separate definition? I'm not using any tactic there.</p>\n</blockquote>\n<p>The <code>simp</code>/<code>dsimp</code> tactics are pretty much doing the same thing. They have code that can reduce <code>e</code> to <code>e'</code> using some rules, and then in the proof term they make use of the fact that <code>rfl : e = e'</code> (you might see <code>@id e' p</code>, where <code>p : e</code>, to change the type of the proof <code>p</code>). That is to say, they know that <code>e</code> and <code>e'</code> are defeq, so they can replace <code>e</code> with <code>e'</code> without changing whether the expression is type correct.</p>\n</blockquote>\n<p>Let me see if I properly understood. The compiler will automatically use definitional equality to convert between terms but only when \"prompted\" somehow (for example when unifying, e.g. what happened in the <code>Sequence.get.eq_def'</code> above), meaning it won't happen if I'm just trying to do a plain rewriting. Then what <code>simp</code>/<code>dsimp</code> do is to automatically find when such conversions are needed (i.e. when some <code>e'</code> is needed but an <code>e</code> is present, and they are definitionally equal) and behave as if a rewrite by <code>rfl : e = e'</code> was used.</p>\n<p>Moreover the automatically generated <code>x.eq_def</code> are basically just a definitions of type <code>e = e'</code> with <code>e</code> and <code>e'</code> definitionally equal and <code>rfl</code> as body.</p>\n<p>One thing I'm missing is how to trace this behaviour of <code>simp</code>/<code>dsimp</code>. Using <code>set_option trace.Meta.Tactic.simp true</code> doesn't seem to show when definitional equality is used (it will show unification attemps with the already simplified term according to definition equality).</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20reduce.20a.20goal/near/444886129\">said</a>:</p>\n<blockquote>\n<p>you might see <code>@id e' p</code>, where <code>p : e</code>, to change the type of the proof <code>p</code></p>\n</blockquote>\n<p>Where would I see this?</p>",
        "id": 444953782,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1718525048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"728068\">Giacomo Stevanato</span> <a href=\"#narrow/stream/113488-general/topic/How.20to.20reduce.20a.20goal/near/444953782\">said</a>:</p>\n<blockquote>\n<p>Kyle Miller <a href=\"#narrow/stream/113488-general/topic/How.20to.20reduce.20a.20goal/near/444886129\">said</a>:</p>\n<blockquote>\n<p>you might see <code>@id e' p</code>, where <code>p : e</code>, to change the type of the proof <code>p</code></p>\n</blockquote>\n<p>Where would I see this?</p>\n</blockquote>\n<p>Oh nevermind, I see the environment can show the expanded term after tactics are applied.</p>",
        "id": 444971311,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1718540085
    }
]