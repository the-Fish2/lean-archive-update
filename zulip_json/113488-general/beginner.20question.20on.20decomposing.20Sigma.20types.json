[
    {
        "content": "<p>I have a very basic beginner question:</p>\n<p>Of the following two proofs, the first one works but the second one doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">assumption</span>\n    <span class=\"n\">assumption</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">assumption</span>\n    <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>What's the easiest way to decompose  a product or Sigma in the context into two named hypotheses? I think in earlier lean versions I could do something like <code>cases p with x y</code>, but that doesn't seem to work anymore.</p>",
        "id": 423727329,
        "sender_full_name": "Jonas Frey",
        "timestamp": 1709081526
    },
    {
        "content": "<p>A new syntax is <code>cases' p with x y</code>.</p>\n<p>When you use <code>cases .. with</code>, what you need after <code>|</code> is the name of the constructor. For <code>And</code>, that's <code>intro</code>, and for <code>Prod</code>, that's <code>mk</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">assumption</span>\n    <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 423727989,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709082019
    },
    {
        "content": "<p>There's also <code>let</code> for pattern matching:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 423728038,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709082062
    },
    {
        "content": "<p>As well as <code>intro</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 423728048,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709082076
    },
    {
        "content": "<p>Ahh thanks! the last one looks like the slickest solution</p>",
        "id": 423728140,
        "sender_full_name": "Jonas Frey",
        "timestamp": 1709082132
    },
    {
        "content": "<p>OK another question: how do I select / focus on the other goal at the end of the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pcons</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">dpcons</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">PProd</span> <span class=\"n\">q</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">abc</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pcons</span> <span class=\"o\">(</span><span class=\"n\">pcons</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">dpcons</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n  <span class=\"n\">constructor</span>\n</code></pre></div>",
        "id": 423729534,
        "sender_full_name": "Jonas Frey",
        "timestamp": 1709083171
    },
    {
        "content": "<p><del>I want to give <code>a</code> as first component of the pair, but it's asking me for the second component first apparently?</del></p>\n<p>(i figured it out, with <code>case fst =&gt;</code>)</p>",
        "id": 423729919,
        "sender_full_name": "Jonas Frey",
        "timestamp": 1709083458
    }
]