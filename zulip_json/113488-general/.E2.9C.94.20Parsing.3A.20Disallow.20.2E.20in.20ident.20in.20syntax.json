[
    {
        "content": "<p>Hello, I would like to have something to use as Syntax cat, that works like ident, but does not allow . to be used in it or to diallow the use of . in ident (in my file). </p>\n<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"s2\">\"#12\"</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>allows </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">comm</span><span class=\"bp\">.</span><span class=\"k\">with</span><span class=\"bp\">.</span><span class=\"n\">dots</span>\n</code></pre></div>\n<p>I would like so only letters and Numbers are allowed like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">commWithoutDots2</span>\n</code></pre></div>\n<p>Is this possible?</p>",
        "id": 443465605,
        "sender_full_name": "Codegoblin",
        "timestamp": 1717851116
    },
    {
        "content": "<p>You could write a custom parser for it but it's much easier to check for this in the macro/elaborator, especially for generating a better error message if people do try to use a dot there</p>",
        "id": 443478794,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717859443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <br>\nHm, my problem is, that I would like to use . as operator between two other idents like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"s2\">\".\"</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">comand</span>\n</code></pre></div>\n<p>And my Problem here is, that . gets parsed as Part of the ident (at least that's what I think). And thus I only have one Ident with a dot instad of two idents</p>\n<p>I tried to replace ident with another category, but failed like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span><span class=\"w\"> </span><span class=\"n\">cChar</span>\n<span class=\"n\">declare_syntax_cat</span><span class=\"w\"> </span><span class=\"n\">cName</span>\n\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s2\">\"a\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"A\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cChar</span>\n<span class=\"bp\">...</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s2\">\"z\"</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"Z\"</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">cChar</span>\n\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">cChar</span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cName</span><span class=\"w\"> </span><span class=\"c1\">-- pssoobile to let the spearator be nothing? I think not ?</span>\n</code></pre></div>\n<p>What do you mean with writing a custom Parser? Is there a tutorial for that? :D</p>",
        "id": 443484165,
        "sender_full_name": "Codegoblin",
        "timestamp": 1717862256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"710184\">Codegoblin</span> <a href=\"#narrow/stream/113488-general/topic/Parsing.3A.20Disallow.20.2E.20in.20ident.20in.20syntax/near/443484165\">said</a>:</p>\n<blockquote>\n<p>And my Problem here is, that . gets parsed as Part of the ident (at least that's what I think). And thus I only have one Ident with a dot instad of two idents</p>\n</blockquote>\n<p>Why is that a problem, why can't you extract the ident parts after parsing?</p>",
        "id": 443484963,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717862607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <br>\n I called -&gt;  ident.getId.getString.  I just found out that you can call components to get a list.</p>\n<p>Now i have another Problem. How can I create a TSyntax of a specific syntax_cat from a String -&gt;<br>\nI now want to run through my recursive function. E.g something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span><span class=\"w\"> </span><span class=\"n\">myCat</span>\n\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">myCat</span><span class=\"w\"> </span><span class=\"s2\">\"+\"</span><span class=\"w\"> </span><span class=\"n\">myCat</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">myCat</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">myCat</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">myFun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inSyntax</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`myCat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">inSyntax</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myCat</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">myCat</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">myCat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Id</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">          </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">myFun</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">myFun</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myCat</span><span class=\"bp\">|</span><span class=\"w\">  </span><span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"n\">Id</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\">  </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">parts</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"bp\">.</span><span class=\"n\">components</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">parts</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">          </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">      </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">sub1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">parts</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">sub2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">parts</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"c1\">-- or rather all that are left (ToDO)</span>\n\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`myCat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Unhygienic</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myCat</span><span class=\"bp\">|</span><span class=\"w\">  </span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span><span class=\"w\"> </span><span class=\"n\">sub1</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">subE1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`myCat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">({</span>\n<span class=\"w\">                  </span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">atom</span><span class=\"w\"> </span><span class=\"n\">SourceInfo</span><span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"n\">sub1</span><span class=\"bp\">.</span><span class=\"n\">getString</span>\n<span class=\"w\">                </span><span class=\"o\">}:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`myCat</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- is None, what to put as SourceInfo</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">subE2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`myCat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">({</span>\n<span class=\"w\">                  </span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">atom</span><span class=\"w\"> </span><span class=\"n\">SourceInfo</span><span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"n\">sub2</span><span class=\"bp\">.</span><span class=\"n\">getString</span>\n<span class=\"w\">                </span><span class=\"o\">}:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`myCat</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- is None, what to put as SourceInfo</span>\n<span class=\"w\">        </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">myFun</span><span class=\"w\"> </span><span class=\"n\">subE1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">myFun</span><span class=\"w\"> </span><span class=\"n\">subE2</span><span class=\"o\">)</span>\n\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">unreachable!</span>\n</code></pre></div>\n<p>Problem here is, hat i dont know what to put in SourceInfo. I just wish to create Something like my Input so i can call the function recursively again :D</p>",
        "id": 443493115,
        "sender_full_name": "Codegoblin",
        "timestamp": 1717864776
    },
    {
        "content": "<p>You used <code> `(myCat|  $name: ident) </code> to match on an ident, correspondingly you can use the term <code>Unhygienic.run `(myCat|  $(quote sub1): ident) </code> to create one. The <code>Unhygienic.run</code> avoids a monad dependency and is fine in this context.</p>",
        "id": 443493992,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717865097
    },
    {
        "content": "<p>Though depending on your specific application, it might be easier to just not call <code>myFun</code> recursively in this case but to compute the result directly from a fold over the components</p>",
        "id": 443494416,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717865185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <br>\nI get the Error : failed to synthesize instance Quote Name `ident</p>\n<p>in</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`myCat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Unhygienic</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myCat</span><span class=\"bp\">|</span><span class=\"w\">  </span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span><span class=\"w\"> </span><span class=\"n\">sub1</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 443497477,
        "sender_full_name": "Codegoblin",
        "timestamp": 1717866050
    },
    {
        "content": "<p>Oh, I think <code>Lean.mkIdent</code> instead of <code>quote</code> should work</p>",
        "id": 443498172,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717866248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  This works :D</p>\n<p>Is it also possible to create something else that Indets this way? like a myCat? e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`myCat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Unhygienic</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myCat</span><span class=\"bp\">|</span><span class=\"w\">  </span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkMyCat</span><span class=\"w\"> </span><span class=\"n\">sub1</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">myCat</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\">  </span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkMyCat</span><span class=\"w\"> </span><span class=\"n\">sub1</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">myCat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>i tried to copy mkIdent but i dont knwo what to put in the first field for my owny syntax_cat</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">mkMyCat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Ident</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">⟨</span><span class=\"n\">myCat</span><span class=\"w\"> </span><span class=\"n\">SourceInfo</span><span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 443500108,
        "sender_full_name": "Codegoblin",
        "timestamp": 1717867153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"710184\">Codegoblin</span> has marked this topic as resolved.</p>",
        "id": 444174388,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718179998
    }
]