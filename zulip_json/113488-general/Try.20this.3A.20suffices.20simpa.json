[
    {
        "content": "<p>Besides squeezing simps, we should also consider the pattern</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">suffices</span> <span class=\"s2\">\"expr after simp\"</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span>\n</code></pre></div>\n<p>Because often it will be shorter, more readable, and possibly more robust</p>",
        "id": 425653791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709964606
    },
    {
        "content": "<p>Sure, should I add that as part of the warning message?</p>",
        "id": 425654182,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709964856
    },
    {
        "content": "<p>I think I would love to have a little tactic that replaces a <code>simp</code> call by such a <code>suffices-simpa</code> pattern.</p>",
        "id": 425660321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709969751
    },
    {
        "content": "<p>Using <code>Try this:</code> etc</p>",
        "id": 425660375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709969766
    },
    {
        "content": "<p>Ah, something like <code>suffa?</code>?  <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 425660393,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709969791
    },
    {
        "content": "<p>Right</p>",
        "id": 425660404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709969800
    },
    {
        "content": "<p>Ok, that would not be a linter, though.</p>",
        "id": 425660419,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709969823
    },
    {
        "content": "<p>I like the idea, though.</p>",
        "id": 425660439,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709969838
    },
    {
        "content": "<p>But ideally it is a very small modification of <code>simp</code>. So that you just add one or two letters to a <code>simp</code> invocation to get the suggestion.</p>",
        "id": 425660444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709969844
    },
    {
        "content": "<p><code>ssimp</code>, for <code>suffices simp</code>?</p>",
        "id": 425660463,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709969871
    },
    {
        "content": "<p><code>sufsimp</code>, maybe? Or <code>simpsuf?</code>?</p>",
        "id": 425660464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709969872
    },
    {
        "content": "<p>Shall we move this discussion to a separate thread, though?</p>",
        "id": 425660533,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709969913
    },
    {
        "content": "<p>Looking at the output of the linter, there are very few false positives.  Almost by definition, I do not know how many false negatives there are.</p>",
        "id": 425660625,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709969987
    },
    {
        "content": "<p><code>simpa!?</code> could generate a <code>suffices simpa</code> when called in a non-terminal spot</p>",
        "id": 425661014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709970185
    },
    {
        "content": "<p>14 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews/topic/.2311247.20non-terminal.20.02klzzwxh.3A0000.03.20linter\">#PR reviews &gt; #11247 non-terminal <code>simp</code> linter</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 425661059,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709970212
    },
    {
        "content": "<p>The part that I see will be tricky with this tactic is getting the syntax of the expected type to print right.</p>",
        "id": 425661890,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709970628
    },
    {
        "content": "<p>Could <code>simp?</code> just generate multiple <code>try this</code>s?</p>",
        "id": 425684938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709989654
    },
    {
        "content": "<p>This isn't really simp-specific, you could always add a suffices block for any tactic which changes the goal state, or a <code>show</code> to any goal state. This seems like a general tactic code action</p>",
        "id": 425769351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710073489
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12006\">#12006</a> implements a version of this.</p>",
        "id": 431979537,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712585395
    },
    {
        "content": "<p>Although I am starting to wonder whether caching unwieldy squeezes is potentially a better approach.  Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span> <span class=\"n\">says</span>\n</code></pre></div>\n<p>except that the <code>says</code> part gets written to a cache file and <code>says</code></p>\n<ul>\n<li>retrieves the cache from file, if it exists, or</li>\n<li>adds it to the file, if it does not.</li>\n</ul>",
        "id": 431980014,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712585511
    }
]