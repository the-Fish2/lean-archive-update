[
    {
        "content": "<p>I want to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mem3</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Submodule.pair</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{⟨</span><span class=\"n\">i.1</span><span class=\"o\">,</span> <span class=\"n\">i.2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">j.1</span><span class=\"o\">,</span> <span class=\"n\">j.2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">⟩}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_span1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">Submodule.pair</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.subset_span</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rangevec</span> <span class=\"o\">:</span> <span class=\"n\">Set.range</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Submodule.pair_basis</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Submodule.pair</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Basis.span</span>\n    <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[⟨</span><span class=\"n\">i.1</span><span class=\"o\">,</span><span class=\"n\">i.2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">j.1</span><span class=\"o\">,</span><span class=\"n\">j.2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">⟩])</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linearIndependent_fin2</span><span class=\"o\">]</span>\n      <span class=\"n\">aesop</span>\n    <span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rangevec</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">repr_pair_basis_first</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Submodule.pair_basis</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">repr</span> <span class=\"o\">⟨⟨</span><span class=\"n\">i.1</span><span class=\"o\">,</span><span class=\"n\">i.2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">⟩,</span> <span class=\"n\">mem_span1</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Submodule.pair_basis</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I want to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis.span_apply#doc\">docs#Basis.span_apply</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis.repr_self#doc\">docs#Basis.repr_self</a> there, but the <code>cast</code> there is weird. How can I prove <code>repr_pair_basis_first</code>?</p>",
        "id": 425792826,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1710094330
    },
    {
        "content": "<p>The <code>cast</code> is caused by you using <code>rw</code> to produce \"data\", which is usually a bad idea unless you have no other options</p>",
        "id": 425809059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710107723
    },
    {
        "content": "<p>You should be composing the basis with a linear equivalence instead</p>",
        "id": 425809206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710107866
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 425810083,
        "sender_full_name": "Eric Chen",
        "timestamp": 1710108621
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 425810214,
        "sender_full_name": "Eric Chen",
        "timestamp": 1710108755
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis.map#doc\">docs#Basis.map</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.ofEq#doc\">docs#LinearEquiv.ofEq</a> should be what you need</p>",
        "id": 425812917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710111528
    },
    {
        "content": "<p>Or just index the spanning family with <code>Fin 2</code> from the start.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">appendone</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Submodule.pair</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">appendone</span> <span class=\"bp\">∘</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_span1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">appendone</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">Submodule.pair</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">↦</span> <span class=\"n\">Submodule.subset_span</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_range</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">exists_apply_eq_apply</span><span class=\"o\">])</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Submodule.pair_basis</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Submodule.span</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">appendone</span> <span class=\"bp\">∘</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Basis.span</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">appendone</span> <span class=\"bp\">∘</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linearIndependent_fin2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">appendone</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">Prod.mk_eq_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">one_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">and_false</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Prod.smul_mk</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">Prod.mk.injEq</span><span class=\"o\">,</span>\n    <span class=\"n\">not_and</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">ha2</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha1</span> <span class=\"n\">ha2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">repr_pair_basis_first</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Submodule.pair_basis</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">repr</span> <span class=\"o\">⟨</span><span class=\"n\">appendone</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">mem_span1</span> <span class=\"n\">i</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span><span class=\"n\">appendone</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">mem_span1</span> <span class=\"n\">i</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">Submodule.pair_basis</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">SetCoe.ext_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Submodule.pair_basis</span><span class=\"o\">,</span> <span class=\"n\">Basis.span_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">ext</span> <span class=\"n\">r</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Basis.repr_self</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.single_apply</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 425838958,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710134436
    },
    {
        "content": "<p>Thanks, although I already used Eric's approach</p>",
        "id": 425839043,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1710134555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690858\">Daniel Weber</span> has marked this topic as resolved.</p>",
        "id": 425839045,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710134560
    }
]