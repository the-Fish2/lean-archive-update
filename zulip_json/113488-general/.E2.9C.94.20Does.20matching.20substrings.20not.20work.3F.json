[
    {
        "content": "<p>The following code (<code>s_cube</code> is a <code>Substring</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">cube</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">s_cube</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"red\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Except.ok</span> <span class=\"n\">Cube.red</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"green\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Except.ok</span> <span class=\"n\">Cube.green</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"blue\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Except.ok</span> <span class=\"n\">Cube.blue</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Except.error</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Could not parse '{s_cube}' as cube\"</span>\n</code></pre></div>\n<p>returns <code>Except.error \"Could not parse 'red' as cube\"</code>. I'm very surprised by this, since it should logically never happen. Is pattern matching on substrings broken?</p>",
        "id": 409821641,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1703430531
    },
    {
        "content": "<p>Changing it to <code>match (Substring.toString s_cube) with</code> makes it work.</p>",
        "id": 409821766,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1703430630
    },
    {
        "content": "<p>Here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.String.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isRed</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Substring</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"s2\">\"red\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">isRed</span> <span class=\"s2\">\"red\"</span> <span class=\"c1\">-- true</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Substring.mk</span> <span class=\"s2\">\".red.\"</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">4</span><span class=\"o\">⟩</span> <span class=\"c1\">-- \"red\".toSubstring</span>\n<span class=\"k\">#eval</span> <span class=\"n\">isRed</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"s2\">\".red.\"</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">4</span><span class=\"o\">⟩)</span> <span class=\"c1\">-- false</span>\n</code></pre></div>",
        "id": 409823545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703432031
    },
    {
        "content": "<p>The reason this fails is that <code>\"red\"</code> at position 0 of the string is not the same as \"red\" at position 1 of the string:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">for</span> <span class=\"n\">Substring</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Substring.mk</span> <span class=\"s2\">\".red.\"</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">4</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"s2\">\"red\"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span>  <span class=\"c1\">-- false</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Substring.mk</span> <span class=\"s2\">\".red.\"</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">4</span><span class=\"o\">⟩</span> <span class=\"bp\">==</span> <span class=\"s2\">\"red\"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span> <span class=\"c1\">-- true</span>\n</code></pre></div>\n<p>though this is made extra confusing by the fact that <code>BEq</code> (<code>==</code>) is not lawful on <code>Substring</code></p>",
        "id": 409823809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703432255
    },
    {
        "content": "<p>So, not a bug?</p>",
        "id": 409833437,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1703442365
    },
    {
        "content": "<p>There's no language bug here, but the library behavior looks like a trap, suggesting that there is a design flaw somewhere</p>",
        "id": 409842448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703452055
    },
    {
        "content": "<p>I opened an issue just in case: <a href=\"https://github.com/leanprover/lean4/issues/3117\">https://github.com/leanprover/lean4/issues/3117</a></p>",
        "id": 409921476,
        "sender_full_name": "Nikolai Morin",
        "timestamp": 1703518486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674793\">Nikolai Morin</span> has marked this topic as resolved.</p>",
        "id": 409921480,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703518495
    }
]