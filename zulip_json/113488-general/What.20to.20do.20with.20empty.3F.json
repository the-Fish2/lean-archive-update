[
    {
        "content": "<p>Hi. Why does this code not work? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wtf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 437225181,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1714987344
    },
    {
        "content": "<p>It would be a contradiction if you could <em>prove</em> False, but it isn't a contradiction to have a boolean value that's equal to false.</p>",
        "id": 437226115,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1714987713
    },
    {
        "content": "<p>I think you meant something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">notWTF</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n</code></pre></div>",
        "id": 437226258,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714987776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437226258\">said</a>:</p>\n<blockquote>\n<p>I think you meant something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">notWTF</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Why is it necessary to pass b twice? In the original example, the goal becomes Empty too. What should I do in such cases? Passing the argument twice doesn't look like the cleanest solution possible...</p>",
        "id": 437248510,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1714997038
    },
    {
        "content": "<p>This is not passing <code>b</code> twice. It is passing a boolean and then a proof that the boolean equals <code>true</code>.</p>",
        "id": 437250233,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714997687
    },
    {
        "content": "<p>If the boolean is <code>false</code>, there is no way you are going to construct a term of type <code>Empty</code>.</p>",
        "id": 437250314,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714997714
    },
    {
        "content": "<p>Perhaps it's more clear if you write it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">notWTF</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n</code></pre></div>\n<p>which means exactly the same thing as what <span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>  wrote</p>",
        "id": 437250638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714997850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437250638\">said</a>:</p>\n<blockquote>\n<p>Perhaps it's more clear if you write it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">notWTF</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n</code></pre></div>\n<p>which means exactly the same thing as what <span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>  wrote</p>\n</blockquote>\n<p>Now I am even more confused.  How is it legal to do <code>h : b</code>? b is already an instance of type Bool, right? Still not clear what I have to do when the goal of some expression evaluates to an empty type.</p>",
        "id": 437251357,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1714998115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437251357\">said</a>:</p>\n<blockquote>\n<p>Still not clear what I have to do when the goal of some expression evaluates to an empty type.</p>\n</blockquote>\n<p>Find a term of the empty type in your local context. If there is none, construct one using stuff from your local context.</p>",
        "id": 437251758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714998271
    },
    {
        "content": "<blockquote>\n<p>How is it legal to do <code>h : b</code>?</p>\n</blockquote>\n<p><code>h : b</code> actually elaborates as  <code>h : b = true</code></p>",
        "id": 437251831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714998295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437251758\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437251357\">said</a>:</p>\n<blockquote>\n<p>Still not clear what I have to do when the goal of some expression evaluates to an empty type.</p>\n</blockquote>\n<p>Find a term of the empty type in your local context. If there is none, construct one using stuff from your local context.</p>\n</blockquote>\n<p>In my local context, I got just b being pattern-matched to true and false with the goals in arms being respectively Unit and Empty types. I supposed I wouldn't need anything else to state some trivia...</p>",
        "id": 437252548,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1714998558
    },
    {
        "content": "<p>Johan missed one thing from his list. \"If you can't construct one, then you need to backtrack and undo a previous wrong turn\". Here, your pattern match was fine, but your original definition is nonsense.</p>",
        "id": 437253130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714998784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437253130\">said</a>:</p>\n<blockquote>\n<p>Johan missed one thing from his list. \"If you can't construct one, then you need to backtrack and undo a previous wrong turn\". Here, your pattern match was fine, but your original definition is nonsense.</p>\n</blockquote>\n<p>Nonesense how?</p>",
        "id": 437253288,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1714998829
    },
    {
        "content": "<p>If (and only if) you are still trying to make this work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wtf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>then I suggest that you first try to understand why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zero</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>doesn't work</p>",
        "id": 437253295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714998832
    },
    {
        "content": "<p>Nonsense in this sense:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wtf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- if the `sorry` above can be filled, then false is true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">wtf</span> <span class=\"n\">false</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>",
        "id": 437253432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714998873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437253295\">said</a>:</p>\n<blockquote>\n<p>If (and only if) you are still trying to make this work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wtf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>then I suggest that you first try to understand why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zero</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>doesn't work</p>\n</blockquote>\n<p>In case you didnt notice I asking why it doesnt work, which implies that I would like to have an answer to this.</p>\n<p>Anyway, since you just said the case with zero? doesn't work it makes me question usefulness of lean at this point.</p>",
        "id": 437254460,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1714999275
    },
    {
        "content": "<p>Do you understand why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>doesn't work?</p>",
        "id": 437254632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714999331
    },
    {
        "content": "<p>It isn't too much of an exaggeration to say that Lean is useful <em>precisely</em> because examples like yours don't work.</p>",
        "id": 437254732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714999373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437253432\">said</a>:</p>\n<blockquote>\n<p>Nonsense in this sense:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wtf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- if the `sorry` above can be filled, then false is true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">wtf</span> <span class=\"n\">false</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>What would make it true? I expected that any attempt to pattern match empty type would just lead to nowhere.</p>",
        "id": 437254777,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1714999386
    },
    {
        "content": "<p>That's the opposite of the case: pattern matching an empty type leads to <em>everywhere</em>!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AProofOfAnyMilleniumProblem</span> <span class=\"o\">:=</span> <span class=\"n\">nomatch</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 437254937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714999444
    },
    {
        "content": "<p>You are trying to define something of type <code>Empty</code>. I think it shouldn't be surprising that it is not possible.</p>",
        "id": 437254995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714999460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437254632\">said</a>:</p>\n<blockquote>\n<p>Do you understand why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>doesn't work?</p>\n</blockquote>\n<p>I feel like it should. Because an attempt to use it would be never possible. <br>\nLike nothing compromises things like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 437255219,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1714999559
    },
    {
        "content": "<p>Maybe you're confused by the <code>(b : Bool) →</code> notation? This is exactly the same as your original example, but using <code>∀</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wtf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 437255223,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714999562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437255219\">said</a>:</p>\n<blockquote>\n<p>Like nothing compromises things like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"bp\">...</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>\"given a thing that can't exist, produce X\", is very different to \"produce a thing that can't exist\".  There is a very fundamental difference between the left and right of <code>-&gt;</code>.</p>",
        "id": 437255406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714999641
    },
    {
        "content": "<p>So <code>wtf</code> is the collection for every Boolean <code>b</code> of an element of type <code>if b then Unit else Empty</code>. Equivalently, it's the data of an element of <code>Unit</code> and of an element of <code>Empty</code>.</p>",
        "id": 437255434,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714999653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437255406\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437255219\">said</a>:</p>\n<blockquote>\n<p>Like nothing compromises things like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"bp\">...</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>\"given a thing that can't exist, produce X\", is very different to \"produce a thing that can't exist\".  There is a very fundamental difference between the left and right of <code>-&gt;</code>.</p>\n</blockquote>\n<p>I meant that inexistence of such functions woulndt suddenly be allowed</p>",
        "id": 437255671,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1714999739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437255219\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437254632\">said</a>:</p>\n<blockquote>\n<p>Do you understand why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>doesn't work?</p>\n</blockquote>\n<p>I feel like it should.</p>\n</blockquote>\n<p>But that means that <code>oops</code> will be an element of <code>Empty</code>. But <code>Empty</code> is empty! It can't have any elements. That's its nature!</p>\n<p>So really, it is a fantastic feature of Lean that you cannot complete the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 437255962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714999817
    },
    {
        "content": "<p>Btw, there certainly is a function <code>Empty -&gt; Type</code>. Lean is perfectly happy with that. For every element of <code>Empty</code>, you need to tell Lean to which type you want to send it. But because <code>Empty</code> doesn't have any elements, you are done before you even started.</p>",
        "id": 437256199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714999903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437255223\">said</a>:</p>\n<blockquote>\n<p>Maybe you're confused by the <code>(b : Bool) →</code> notation? This is exactly the same as your original example, but using <code>∀</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wtf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think I want confused by notation, as long as (a:T) -&gt; expr a means a dependent function. Only about what I should do when the goal is empty type. Like... what should I write there? How just pattern matching leading to an impossible case is not enough for contradiction to work?</p>",
        "id": 437256206,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1714999907
    },
    {
        "content": "<p>\"you can use emptiness, but you cannot create emptiness\"</p>",
        "id": 437256320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714999928
    },
    {
        "content": "<p>Contradiction requires impossible <em>assumptions</em>, not impossible <em>conclusions</em></p>",
        "id": 437256348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714999944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437255962\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437255219\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437254632\">said</a>:</p>\n<blockquote>\n<p>Do you understand why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>doesn't work?</p>\n</blockquote>\n<p>I feel like it should.</p>\n</blockquote>\n<p>But that means that <code>oops</code> will be an element of <code>Empty</code>. But <code>Empty</code> is empty! It can't have any elements. That's its nature!</p>\n<p>So really, it is a fantastic feature of Lean that you cannot complete the line</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Nothing in this statement add any elements to empty</p>",
        "id": 437256370,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1714999957
    },
    {
        "content": "<p>Everything in <code>def oops : Empty :=</code> is adding an element to <code>Empty</code>!!!</p>",
        "id": 437256435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714999989
    },
    {
        "content": "<p>If you could replace this <code>sorry</code> with something, that would mean you could prove <code>False</code>, which would mean that Lean's logic is inconsistent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">oops</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 437256845,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715000149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437256320\">said</a>:</p>\n<blockquote>\n<p>\"you can use emptiness, but you cannot create emptiness\"</p>\n</blockquote>\n<p>Well then, why is this code legal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">notWTF</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n</code></pre></div>",
        "id": 437256958,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715000181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437256845\">said</a>:</p>\n<blockquote>\n<p>If you could replace this <code>sorry</code> with something, that would mean you could prove <code>False</code>, which would mean that Lean's logic is inconsistent:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">oops</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I thought sorry in lean mean 'this definition has no computational content' exactly like Empty</p>",
        "id": 437257193,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715000272
    },
    {
        "content": "<p>Because in the false branch you have assumed something that is false.</p>",
        "id": 437257194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715000272
    },
    {
        "content": "<p>That's shorthand for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">notWTF</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span>\n</code></pre></div>\n<p>and when <code>b</code> is false, then the second argument is <code>false = true</code>, which is empty, and from that emptiness you can \"produce\" a value of <code>Empty</code>.</p>",
        "id": 437257198,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715000274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"672445\">@provemeifyoucan</span> No, <code>sorry</code> means \"just assume this can be done, stop complaining\".</p>",
        "id": 437257329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715000316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437256348\">said</a>:</p>\n<blockquote>\n<p>Contradiction requires impossible <em>assumptions</em>, not impossible <em>conclusions</em></p>\n</blockquote>\n<p>You're missing the point, I believe. <span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> is confused about the fact that the assumptions are not impossible, not the conclusions</p>",
        "id": 437257350,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715000326
    },
    {
        "content": "<p>So <code>sorry</code> makes Lean very unsafe.</p>",
        "id": 437257354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715000328
    },
    {
        "content": "<p><code>sorry</code> is the axiom is that everything is true, which we use to fill in unfinished proofs or values, but its use is recorded and warnings are logged so that we can make sure they're all dealt with eventually</p>",
        "id": 437257447,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715000374
    },
    {
        "content": "<p><code>sorry</code> is not allowed to be used in mathlib. And in general, it shouldn't appear in \"end products\".</p>",
        "id": 437257460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715000381
    },
    {
        "content": "<blockquote>\n<p>Well then, why is this code legal?</p>\n</blockquote>\n<p>Here's it written as a tactic proof you can step through in case it makes it clearer.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">notWTF</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">Unit</span> <span class=\"k\">else</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"n\">contradiction</span> <span class=\"c1\">-- h : false = true is a contradiction</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 437257721,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715000470
    },
    {
        "content": "<blockquote>\n<p>I thought <code>sorry</code> in lean mean 'this definition has no computational content' exactly like Empty</p>\n</blockquote>\n<p>That is instead indicated by the keyword <code>noncomputable</code>, by the way.</p>",
        "id": 437283151,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1715008271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437254732\">said</a>:</p>\n<blockquote>\n<p>It isn't too much of an exaggeration to say that Lean is useful <em>precisely</em> because examples like yours don't work.</p>\n</blockquote>\n<p>This works and it is what I wanted to do.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Empty2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">def</span> <span class=\"n\">impossible</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">nofun</span>\n<span class=\"kd\">def</span> <span class=\"n\">n3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Empty2</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">impossible</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">n3</span> <span class=\"mi\">1</span> <span class=\"c1\">-- works</span>\n<span class=\"c1\">-- #eval n3 0 -- doesnt</span>\n</code></pre></div>\n<p>Is lean still useful?</p>",
        "id": 437714915,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715196075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437714915\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437254732\">said</a>:</p>\n<blockquote>\n<p>It isn't too much of an exaggeration to say that Lean is useful <em>precisely</em> because examples like yours don't work.</p>\n</blockquote>\n<p>This works and it is what I wanted to do.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Empty2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">def</span> <span class=\"n\">impossible</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">nofun</span>\n<span class=\"kd\">def</span> <span class=\"n\">n3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Empty2</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">impossible</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">n3</span> <span class=\"mi\">1</span> <span class=\"c1\">-- works</span>\n<span class=\"c1\">-- #eval n3 0 -- doesnt</span>\n</code></pre></div>\n<p>Is lean still useful?</p>\n</blockquote>\n<p>The stranger thing is that it is possible to define <code>impossible</code> as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">impossible2</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>Which is the same thing. Why is it called nofun haha? I have lots so far!</p>",
        "id": 437716031,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715196495
    },
    {
        "content": "<p>You're just using a type that doesn't support eval for the type of <code>n3 0</code>. It's still a valid expression.</p>",
        "id": 437716559,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715196672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437716559\">said</a>:</p>\n<blockquote>\n<p>You're just using a type that doesn't support eval for the type of <code>n3 0</code>. It's still a valid expression.</p>\n</blockquote>\n<p>Thats the point!</p>",
        "id": 437716642,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715196703
    },
    {
        "content": "<p>Why are you giving <code>Empty2</code> that name?</p>",
        "id": 437716824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715196779
    },
    {
        "content": "<p>And also, why are you giving <code>impossible</code> that name?</p>",
        "id": 437716894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715196817
    },
    {
        "content": "<blockquote>\n<p>Is lean still useful?</p>\n</blockquote>\n<p>Certainly!</p>",
        "id": 437717070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715196890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"672445\">@provemeifyoucan</span> what is it that you are actually after here? An understanding of how empty types work?</p>",
        "id": 437717812,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715197177
    },
    {
        "content": "<p>I'm confused about <code>Empty2</code> being called that. The cardinality of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\varnothing \\to X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6633em;vertical-align:-0.0817em;\"></span><span class=\"mord amsrm\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is always <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, it's not empty.</p>",
        "id": 437725542,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715200475
    },
    {
        "content": "<p>(<code>impossible</code> is that single function in this set of functions, at least when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>=</mo><mrow><mi mathvariant=\"normal\">U</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">X=\\mathrm{Unit}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Unit</span></span></span></span></span>)</p>",
        "id": 437725643,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715200527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437717812\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> what is it that you are actually after here? An understanding of how empty types work?</p>\n</blockquote>\n<p>You apparently cant read: I wanted a tactic that closes goals of an empty type. I found one.</p>",
        "id": 437757180,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715220620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437725542\">said</a>:</p>\n<blockquote>\n<p>I'm confused about <code>Empty2</code> being called that. The cardinality of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\varnothing \\to X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6633em;vertical-align:-0.0817em;\"></span><span class=\"mord amsrm\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is always <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, it's not empty.</p>\n</blockquote>\n<p>What? Are you trying to make up an excuse or smth?</p>",
        "id": 437757441,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715220846
    },
    {
        "content": "<p>Make up an excuse for what?</p>\n<p>The type <code>Empty2</code> is certainly not empty. It's well-known that when the domain set is empty, <a href=\"https://planetmath.org/functionsfromemptyset\">there exists a function</a>. (I just linked to Planet Math because it came up to find a quick reference.)</p>\n<p>The <code>nofun</code> function, despite its name, is actually a function. It's called that because there are no cases to consider when making a function whose domain isempty, not that there are no functions.</p>",
        "id": 437760155,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715223141
    },
    {
        "content": "<blockquote>\n<p>You apparently cant read</p>\n</blockquote>\n<p>We try to be a bit more civil that that here. Please assume Henrik is asking his question in good faith. I too am wondering what the context is for your question, what you were doing to end up with the question about trying to construct a function of type <code>(b:Bool) -&gt; if b then Unit else Empty</code>.</p>",
        "id": 437760369,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715223268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437760155\">said</a>:</p>\n<blockquote>\n<p>The type <code>Empty2</code> is certainly not empty. It's well-known that when the domain set is empty, <a href=\"https://planetmath.org/functionsfromemptyset\">there exists a function</a>. (I just linked to Planet Math because it came up to find a quick reference.)</p>\n</blockquote>\n<p>His argument relies on the fact that n^0 = 1. This doesn't look convincing. </p>\n<p>That type is empty. Intuitively because you can't use it to compute anything.</p>",
        "id": 437763303,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715225714
    },
    {
        "content": "<p>Maybe you are more familiar with set-theoretic foundations? Under such a foundation, a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is a subset <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>⊆</mo><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">S \\subseteq A \\times B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>a</mi><mo>∈</mo><mi>A</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi><mo stretchy=\"false\">!</mo><mi>b</mi><mo>∈</mo><mi>B</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">\\forall a \\in A, \\exists! b \\in B, (a, b) \\in S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∃</span><span class=\"mclose\">!</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>. Now if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is empty, it is a fun exercise to verify that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>⊆</mo><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">\\varnothing \\subseteq A \\times B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord amsrm\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> indeed satisfies the condition, and thus defines a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>. This is called the empty function.</p>",
        "id": 437763900,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1715226281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437763900\">said</a>:</p>\n<blockquote>\n<p>Maybe you are more familiar with set-theoretic foundations? Under such a foundation, a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is a subset <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>⊆</mo><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">S \\subseteq A \\times B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>a</mi><mo>∈</mo><mi>A</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi><mo stretchy=\"false\">!</mo><mi>b</mi><mo>∈</mo><mi>B</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">\\forall a \\in A, \\exists! b \\in B, (a, b) \\in S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∃</span><span class=\"mclose\">!</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>. Now if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is empty, it is a fun exercise to verify that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>⊆</mo><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">\\varnothing \\subseteq A \\times B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord amsrm\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> indeed satisfies the condition, and thus defines a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>. This is called the empty function.</p>\n</blockquote>\n<p>I read the last part as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>⊆</mo><mi mathvariant=\"normal\">∅</mi><mo>×</mo><mo stretchy=\"false\">{</mo><mo>⋆</mo><mo stretchy=\"false\">}</mo><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi mathvariant=\"normal\">∅</mi><mo>⊆</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\varnothing \\subseteq  \\varnothing \\times \\{\\star\\}  \\implies \\varnothing \\subseteq \\varnothing</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord amsrm\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord amsrm\">∅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">⋆</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord amsrm\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6633em;vertical-align:-0.0817em;\"></span><span class=\"mord amsrm\">∅</span></span></span></span>. Which means... it is not inhabited aka empty function</p>",
        "id": 437764515,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715226879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"672445\">@provemeifyoucan</span> Please read <a href=\"#narrow/stream/270676-lean4/topic/Community.20Guidelines/near/235207529\">#butterfly</a>.<br>\nAlso, if you can define a term of type <code>False</code> then you show that lean is inconsistent. Can you use <code>impossible</code> to do that?</p>",
        "id": 437765965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715228079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437765965\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> Please read <a href=\"#narrow/stream/270676-lean4/topic/Community.20Guidelines/near/235207529\">#butterfly</a>.<br>\nAlso, if you can define a term of type <code>False</code> then you show that lean is inconsistent. Can you use <code>impossible</code> to do that?</p>\n</blockquote>\n<p>I was hoping some of you would do it! To me, inconsistency is the ability to perform bad computations. And computation that doesn't happen can't be bad.</p>\n<p>And so far, what I did does not look like it can lead to inconsistencies.</p>",
        "id": 437766089,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715228173
    },
    {
        "content": "<p>Ok, then I suggest we stop this discussion. Nobody here is surprised by your <code>impossible</code> and <code>Empty2</code>. Only by the names that you chose.</p>",
        "id": 437766231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715228312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437766231\">said</a>:</p>\n<blockquote>\n<p>Ok, then I suggest we stop this discussion. Nobody here is surprised by your <code>impossible</code> and <code>Empty2</code>. Only by the names that you chose.</p>\n</blockquote>\n<p>Nice of you to assume nobody else may be interested in this, because of some dogmatic belief that hold you back from accepting this. </p>\n<p>Ive shown the term that closes empty type, btw. </p>\n<p>Also, please read <a href=\"#narrow/stream/270676-lean4/topic/Community.20Guidelines/near/235207529\">#butterfly</a></p>",
        "id": 437766360,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715228450
    },
    {
        "content": "<p>You can't simply call a random type <code>Empty2</code>, define a term of it, and declare victory.<br>\nJust like you can't call a random statement \"Riemann Hypothesis 2\", prove it, and collect 1M bucks.</p>",
        "id": 437766574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715228641
    },
    {
        "content": "<p>If you want to \"show the term that closes empty types\" then your approach must close goals of type <code>Empty</code>. Not just <code>Empty2</code>.</p>",
        "id": 437766701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715228729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437766574\">said</a>:</p>\n<blockquote>\n<p>You can't simply call a random type <code>Empty2</code>, define a term of it, and declare victory.<br>\nJust like you can't call a random statement \"Riemann Hypothesis 2\", prove it, and collect 1M bucks.</p>\n</blockquote>\n<p>Its not a random type. Its an empty type. </p>\n<p>Dont write anymore in this thread, please.</p>",
        "id": 437766804,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715228799
    },
    {
        "content": "<p>Fwiw, your <code>impossible</code> shows up in dozens of places in mathlib and other projects. It is incredibly useful.</p>",
        "id": 437766882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715228874
    },
    {
        "content": "<p>We just don't give it that name.</p>",
        "id": 437766952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715228909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437766882\">said</a>:</p>\n<blockquote>\n<p>Fwiw, your <code>impossible</code> shows up in dozens of places in mathlib and other projects. It is incredibly useful.</p>\n</blockquote>\n<p>Link please</p>",
        "id": 437766980,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715228939
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#Empty.elim\">https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#Empty.elim</a></p>",
        "id": 437767130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715229027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437767130\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#Empty.elim\">https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#Empty.elim</a></p>\n</blockquote>\n<p>Nice! Lean can close goals which are empty types. <br>\nIt would be great to add one convenience tactic to deal with the following </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">impossible</span>\n</code></pre></div>",
        "id": 437767815,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715229655
    },
    {
        "content": "<p>Textual communication can be tricky, as we lose a lot of information about tone and intention (at least, I feel this way); but <span class=\"user-mention\" data-user-id=\"672445\">@provemeifyoucan</span> please rest assured that while people might be repeatedly saying you’re incorrect here, they are all very nice people and are earnestly trying to help (also, they know what they’re talking about!).</p>\n<p>Let me try to pinpoint a potential source of confusion. Are you under the impression that a term of type <code>Empty → Unit</code> closes a goal of type <code>Empty</code>? If so, this is the issue, because that is not the case! (Happy to explain why further, but first let me see if my guess is correct.)</p>",
        "id": 437767828,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1715229666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"672445\">@provemeifyoucan</span> I will write that tactic if you tell me exactly which term should be generated by <code>by impossible</code> (and it typechecks).</p>",
        "id": 437768052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715229847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437767828\">said</a>:</p>\n<blockquote>\n<p>Are you under the impression that a term of type <code>Empty → Unit</code> closes a goal of type <code>Empty</code>? If so, this is the issue, because that is not the case!</p>\n</blockquote>\n<p><code>Empty → Unit</code> is an empty type and when it's a goal there is a term that closes it, yes.</p>",
        "id": 437768059,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715229855
    },
    {
        "content": "<p>I will only believe that a type is empty if you implement an instance of <code>IsEmpty</code> for it.</p>",
        "id": 437768154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1715229960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437768059\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437767828\">said</a>:</p>\n<blockquote>\n<p>Are you under the impression that a term of type <code>Empty → Unit</code> closes a goal of type <code>Empty</code>? If so, this is the issue, because that is not the case!</p>\n</blockquote>\n<p><code>Empty → Unit</code> is an empty type and when it's a goal there is a term that closes it, yes.</p>\n</blockquote>\n<p>Why do you believe <code>Empty → Unit</code> is empty?</p>",
        "id": 437768243,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1715230028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437768243\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437768059\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437767828\">said</a>:</p>\n<blockquote>\n<p>Are you under the impression that a term of type <code>Empty → Unit</code> closes a goal of type <code>Empty</code>? If so, this is the issue, because that is not the case!</p>\n</blockquote>\n<p><code>Empty → Unit</code> is an empty type and when it's a goal there is a term that closes it, yes.</p>\n</blockquote>\n<p>Why do you believe <code>Empty → Unit</code> is empty?</p>\n</blockquote>\n<p>I explained it <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437764515\">here</a></p>",
        "id": 437768662,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715230380
    },
    {
        "content": "<p><code>Empty → Unit</code> is not an empty type, as others have said. What evidence would it take for you believe it is not empty? (Note: Johan has explained what evidence it would take for him to believe it <em>is</em> empty, an instance of <code>IsEmpty</code> for it.)</p>",
        "id": 437768904,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1715230604
    },
    {
        "content": "<p>Hmm, I’m not sure I follow your explanation <span class=\"user-mention\" data-user-id=\"672445\">@provemeifyoucan</span>. There is a unique function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi mathvariant=\"normal\">∅</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">f : \\emptyset \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> for any set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>; do you not agree with that? If not, let me ask you: what is your definition of a function, either in terms of sets or types?</p>",
        "id": 437769210,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1715230839
    },
    {
        "content": "<p>Erhm, is lean okay? <br>\n<a href=\"/user_uploads/3121/9TDWMl1ezLOnR5zvpLq-SNKl/Screenshot_20240509_110709.png\">Screenshot_20240509_110709.png</a><br>\n<a href=\"/user_uploads/3121/T_Vo2ZHD2V68dMfzF_rbR1Gf/Screenshot_20240509_110714.png\">Screenshot_20240509_110714.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9TDWMl1ezLOnR5zvpLq-SNKl/Screenshot_20240509_110709.png\" title=\"Screenshot_20240509_110709.png\"><img src=\"/user_uploads/3121/9TDWMl1ezLOnR5zvpLq-SNKl/Screenshot_20240509_110709.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/T_Vo2ZHD2V68dMfzF_rbR1Gf/Screenshot_20240509_110714.png\" title=\"Screenshot_20240509_110714.png\"><img src=\"/user_uploads/3121/T_Vo2ZHD2V68dMfzF_rbR1Gf/Screenshot_20240509_110714.png\"></a></div>",
        "id": 437769792,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715231309
    },
    {
        "content": "<p>Yep, that makes sense. You are trying to tell Lean that there are no matches for <code>i : Empty -&gt; Unit</code>, but there is one!</p>\n<p>If you delete line 81 (and leave line 82), you will have constructed the function.</p>",
        "id": 437770377,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1715231858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437770377\">said</a>:</p>\n<blockquote>\n<p>Yep, that makes sense. You are trying to tell Lean that there are no matches for <code>i : Empty -&gt; Unit</code>, but there is one!</p>\n<p>If you delete line 81 (and leave line 82), you will have constructed the function.</p>\n</blockquote>\n<p>Any idea about what I can write here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">oof</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">empty_fun_b</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Empty.elim</span>\n<span class=\"kd\">def</span> <span class=\"n\">empty_fun_f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"n\">oof</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 437770976,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715232413
    },
    {
        "content": "<p>It's impossible to write anything there (for <code>empty_fun_f</code>) because the domain, namely <code>Empty -&gt; Unit</code> has a single element (which is the function <code>fun _ =&gt; ()</code>), whereas the codomain, namely <code>Empty</code>, has no elements.</p>",
        "id": 437771918,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1715233276
    },
    {
        "content": "<p>Does it mean I cannot show that there are no function from any set to empty set?</p>",
        "id": 437772039,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715233377
    },
    {
        "content": "<p>It's impossible to construct <code>oof T</code> unless you also assume <code>T</code> is empty.</p>",
        "id": 437772053,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1715233392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437772053\">said</a>:</p>\n<blockquote>\n<p>It's impossible to construct <code>oof T</code> unless you also assume <code>T</code> is empty.</p>\n</blockquote>\n<p>Does it mean I cannot show that there are no functions from any set to empty set?</p>",
        "id": 437772075,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715233420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437772039\">said</a>:</p>\n<blockquote>\n<p>Does it mean I cannot show that there are no function from any set to empty set?</p>\n</blockquote>\n<p>Of course, unless the set for the domain is empty.</p>",
        "id": 437772076,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1715233422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437772076\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437772039\">said</a>:</p>\n<blockquote>\n<p>Does it mean I cannot show that there are no function from any set to empty set?</p>\n</blockquote>\n<p>Of course, unless the set for the domain is empty.</p>\n</blockquote>\n<p>Leans logic is weak then</p>",
        "id": 437772192,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715233507
    },
    {
        "content": "<p>??? It's weak because it doesn't allow you to build things that don't exist? No, that's what makes it useful. If you could build things that don't exist, then you could prove <code>False</code>.</p>",
        "id": 437772298,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1715233580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437772075\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437772053\">said</a>:</p>\n<blockquote>\n<p>It's impossible to construct <code>oof T</code> unless you also assume <code>T</code> is empty.</p>\n</blockquote>\n<p>Does it mean I cannot show that there are no functions from any set to empty set?</p>\n</blockquote>\n<p>Yeah, just pluging in nofun for sorry gives again this error of missing _ case.</p>",
        "id": 437772385,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715233670
    },
    {
        "content": "<p>Sure. <code>nofun</code> is for when the <em>domain</em> is an empty inductive type.</p>",
        "id": 437772567,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1715233810
    },
    {
        "content": "<p>no wait its actually this <br>\n<a href=\"/user_uploads/3121/UO1AnZeWQdmvKdiRwE4ejTxA/Screenshot_20240509_115559.png\">Screenshot_20240509_115559.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/UO1AnZeWQdmvKdiRwE4ejTxA/Screenshot_20240509_115559.png\" title=\"Screenshot_20240509_115559.png\"><img src=\"/user_uploads/3121/UO1AnZeWQdmvKdiRwE4ejTxA/Screenshot_20240509_115559.png\"></a></div>",
        "id": 437772581,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715233831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437772581\">said</a>:</p>\n<blockquote>\n<p>no wait its actually this <br>\n<a href=\"/user_uploads/3121/N6h4tAjSryj5wc7EHM6LbMEt/Screenshot_20240509_115007.png\">Screenshot_20240509_115007.png</a></p>\n</blockquote>\n<p>Zero missing cases</p>",
        "id": 437772590,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715233841
    },
    {
        "content": "<p>No, it's not zero missing cases, it's that <code>T</code> is an unspecified type, so Lean cannot give you the cases corresponding to its inductive constructors.</p>",
        "id": 437772645,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1715233916
    },
    {
        "content": "<p>A constructorless type!! I wonder what that means.....</p>",
        "id": 437772727,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715233962
    },
    {
        "content": "<p>It's not constructorless necessarily, it's <em>unspecified</em> (i.e., arbitrary).</p>",
        "id": 437772761,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1715234011
    },
    {
        "content": "<p>For example, <code>T</code> could be <code>Nat</code> or <code>Bool</code>, or ... whatever.</p>",
        "id": 437772828,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1715234061
    },
    {
        "content": "<p>(and because I couldn't tell whether or not your comment above was sarcastic: there <em>are</em> constructorless types, such as <code>False</code> or <code>Empty</code>)</p>",
        "id": 437773012,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1715234264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437772076\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437772039\">said</a>:</p>\n<blockquote>\n<p>Does it mean I cannot show that there are no function from any set to empty set?</p>\n</blockquote>\n<p>Of course, unless the set for the domain is empty.</p>\n</blockquote>\n<p>So if we let function be products i.e. <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> A \\times B </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> <br>\nit is possible to represent function <code>A -&gt; Empty</code> and <code>Empty -&gt; A</code> as  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\"> A \\to  \\emptyset  </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span> and  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\"> \\emptyset \\to A </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> respectively.<br>\nAs product they can be written like this<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>×</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\"> \\emptyset \\times A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.0833em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">A \\times \\emptyset </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span><br>\nIf we apply rule that product of an empty set with anything else is an empty set we get an empty set which means<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>×</mo><mi>A</mi><mo>≡</mo><mi>A</mi><mo>×</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\"> \\emptyset \\times A \\equiv A \\times \\emptyset </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.0833em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span> <br>\nbecause <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>≡</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\"> \\emptyset \\equiv \\emptyset </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span></p>\n<p>And you are trying to convince me that <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo mathvariant=\"normal\">≠</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\"> \\emptyset \\neq \\emptyset </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9444em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span></p>\n<p>Do you see the problem?</p>",
        "id": 437774087,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715235050
    },
    {
        "content": "<p>A function is not the product. It's a subset <span class=\"tex-error\">$$s \\subst A \\times B$$</span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>a</mi><mo>∈</mo><mi>A</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi><mo stretchy=\"false\">!</mo><mi>b</mi><mo>∈</mo><mi>B</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">\\forall a \\in A, \\exists! b \\in B, (a, b) \\in s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∃</span><span class=\"mclose\">!</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>. In case of a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\emptyset \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, you get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>a</mi><mo>∈</mo><mi mathvariant=\"normal\">∅</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\forall a \\in \\emptyset, ...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9444em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∅</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">...</span></span></span></span> which is true, because the empty set has no elements. For <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">A \\to \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span> with nonempty <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, you get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>a</mi><mo>∈</mo><mi>A</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi><mo stretchy=\"false\">!</mo><mi>b</mi><mo>∈</mo><mi mathvariant=\"normal\">∅</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\forall a \\in A, \\exists! b \\in \\emptyset, ...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∃</span><span class=\"mclose\">!</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9444em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∅</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">...</span></span></span></span>, which can't be true: take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">a \\in A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> (this is possible since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is nonempty); then we get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mo stretchy=\"false\">!</mo><mi>b</mi><mo>∈</mo><mi mathvariant=\"normal\">∅</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\exists! b \\in \\emptyset, ...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∃</span><span class=\"mclose\">!</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9444em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∅</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">...</span></span></span></span> which is false, because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span> has no elements.</p>",
        "id": 437774557,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715235440
    },
    {
        "content": "<p>Sure, we can work in set-theoretic terminolgy. Functions are not products. They are <em>subsets</em> of products <em>with the property</em> that for every element of the domain, there is a unique element of the codomain such that the pair is in the subset.</p>\n<p>So, a function from <code>Empty -&gt; Unit</code> would be a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>×</mo><mo stretchy=\"false\">{</mo><mo>∗</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\emptyset \\times \\{*\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.0833em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">∗</span><span class=\"mclose\">}</span></span></span></span> with that property, and the empty set suffices for this. Crucially, the property is satisfied because the <em>domain</em> is empty.</p>\n<p>However, a function from <code>Unit -&gt; Empty</code> would be a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo>∗</mo><mo stretchy=\"false\">}</mo><mo>×</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\{*\\} \\times \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">∗</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span> with the property, but no such subset exists. Indeed the only subset is the empty set, but there is no pair of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>∗</mo><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(*,b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∗</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> for some b in the empty set.</p>",
        "id": 437774665,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1715235536
    },
    {
        "content": "<blockquote>\n<p>Do you see the problem?</p>\n</blockquote>\n<p>You can actually use Lean to prove that</p>\n<blockquote>\n<p>So if we let function be products i.e.</p>\n</blockquote>\n<p>is the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"sd\">/-- Functions are not products (if they were, we could prove `False`) -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- counterexample: use types with two and three elements</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- count them</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.card_congr</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- the function has 9 elements, but the product only 6</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">9</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Fintype.card_pi</span><span class=\"o\">,</span> <span class=\"n\">Fintype.card_fin</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- this is nonsense</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 437778348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715238482
    },
    {
        "content": "<p>Meta-point: if you want to be assured that the weight of mathematical opinion is with the statement \"there's only one domain which admits a function to the empty set, namely the empty set itself with its identity\", the search term you can easily verify with Google is that the empty set is a <em>strict initial object</em> in the category of sets. Whether you believe the weight of mathematical opinion is up to you, but you should expect mathematicians to go with the standard!</p>",
        "id": 437784638,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1715242480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437778348\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Do you see the problem?</p>\n</blockquote>\n<p>You can actually use Lean to prove that</p>\n<blockquote>\n<p>So if we let function be products i.e.</p>\n</blockquote>\n<p>is the problem:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"sd\">/-- Functions are not products (if they were, we could prove `False`) -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- counterexample: use types with two and three elements</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- count them</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.card_congr</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- the function has 9 elements, but the product only 6</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">9</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Fintype.card_pi</span><span class=\"o\">,</span> <span class=\"n\">Fintype.card_fin</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- this is nonsense</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I was thinking about this tbh</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bw</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n  <span class=\"n\">contradiction</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>Should I say that they are inhabited by contradiction?</p>",
        "id": 437935484,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715325119
    },
    {
        "content": "<p>If I just swap arguments I can no longer write code that means same thing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">y7</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Empty</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Empty</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y8</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Empty</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Empty</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>Does this mean A * B != B * A in lean?</p>",
        "id": 437936677,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715325727
    },
    {
        "content": "<p><code>A × B</code> is indeed not the same thing as <code>B × A</code>, if this is what you mean.</p>",
        "id": 437937268,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715326017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437937268\">said</a>:</p>\n<blockquote>\n<p><code>A × B</code> is indeed not the same thing as <code>B × A</code>, if this is what you mean.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">swap</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">swap_same</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>WDYM?</p>",
        "id": 437937482,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715326115
    },
    {
        "content": "<p>I am trying to interpret your \"Does this mean A * B != B * A in lean?\" <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> <code>A × B</code> and <code>B × A</code> are in bijection but they are not \"the same\".</p>",
        "id": 437937719,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715326215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437937719\">said</a>:</p>\n<blockquote>\n<p>I am trying to interpret your \"Does this mean A * B != B * A in lean?\" <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> <code>A × B</code> and <code>B × A</code> are in bijection but they are not \"the same\".</p>\n</blockquote>\n<p>Hold on, I am trying to do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">same</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>at the moment</p>",
        "id": 437937970,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715326362
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod.swap_swap#doc\">docs#Prod.swap_swap</a> ?</p>",
        "id": 437938051,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715326412
    },
    {
        "content": "<p>So <code>(Empty × (Empty -&gt; Unit)) -&gt; (Empty × Unit)</code> should be same as <code>(Unit × (Unit -&gt; Empty)) -&gt; (Unit × Empty)</code> <br>\nWhat yall think?</p>",
        "id": 437938654,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715326762
    },
    {
        "content": "<p>If by \"the same\" you mean \"in bijection\", then yes</p>",
        "id": 437938802,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715326838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437938802\">said</a>:</p>\n<blockquote>\n<p>If by \"the same\" you mean \"in bijection\", then yes</p>\n</blockquote>\n<p>So it is an empty type then</p>",
        "id": 437938862,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715326886
    },
    {
        "content": "<p>How can I show that <code>Unit -&gt; Empty</code> is an empty type in lean?</p>",
        "id": 437939034,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715326989
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsEmpty</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Empty</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">false</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 437939184,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715327087
    },
    {
        "content": "<p>Side note: Your <code>y7</code> from above can be implemented:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">y7</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Empty</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Empty</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 437942585,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1715328753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437942585\">said</a>:</p>\n<blockquote>\n<p>Side note: Your <code>y7</code> from above can be implemented:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">y7</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Empty</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Empty</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Now we only need to fill this blank in the way I did for <code>y8</code> to show something really interesting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 437948062,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715331155
    },
    {
        "content": "<p>But  Yael proved that blank is impossible to fill above</p>",
        "id": 437950591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715332339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437950591\">said</a>:</p>\n<blockquote>\n<p>But  Yael proved that blank is impossible to fill above</p>\n</blockquote>\n<p>Maybe there's some tactic I don't know about <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 437950703,
        "sender_full_name": "provemeifyoucan",
        "timestamp": 1715332391
    },
    {
        "content": "<p>There is one: <code>sorry</code>.</p>",
        "id": 437951638,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715332823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437938862\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437938802\">said</a>:</p>\n<blockquote>\n<p>If by \"the same\" you mean \"in bijection\", then yes</p>\n</blockquote>\n<p>So it is an empty type then</p>\n</blockquote>\n<p>I am not sure what you mean when you say \"empty type\", but this is definitely a different notion that what most people in this chat probably think:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.IsEmpty</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">((</span><span class=\"n\">Empty</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">instIsEmptyEmpty</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">((</span><span class=\"n\">Empty</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">instSubsingletonForall</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">((</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Empty</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Empty</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">instIsEmptyEmpty</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">((</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Empty</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Empty</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">instSubsingletonForall</span>\n</code></pre></div>",
        "id": 437969551,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715341873
    },
    {
        "content": "<p>If you can fill in the blank in <code>def empty : Unit -&gt; Empty := sorry</code>, then you can prove literally any mathematical statement. You can always construct something of type <code>Unit</code>; so every statement (regardless of whether it's true) can be proved by \"<code>let x : False := empty(); contradiction</code>\" (which is pseudocode, sorry, I don't have mathlib or a Lean compiler in my head). So you'd better hope that you <em>can't</em> fill in that blank, because once you've done that, we need to find a different logic that lets us prove less stuff!</p>",
        "id": 437974554,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1715344328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"672445\">provemeifyoucan</span> <a href=\"#narrow/stream/113488-general/topic/What.20to.20do.20with.20empty.3F/near/437938654\">said</a>:</p>\n<blockquote>\n<p>So <code>(Empty × (Empty -&gt; Unit)) -&gt; (Empty × Unit)</code> should be same as <code>(Unit × (Unit -&gt; Empty)) -&gt; (Unit × Empty)</code> <br>\nWhat yall think?</p>\n</blockquote>\n<p>Both types are singletons:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">Empty</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Empty</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"bp\">≃</span> <span class=\"o\">((</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Empty</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Empty</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Equiv.equivOfUnique</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 437994826,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715352597
    },
    {
        "content": "<p>In more details, <code>Empty × (Empty -&gt; Unit)</code>, <code>Empty × Unit</code>, <code>Unit × (Unit -&gt; Empty)</code>, and  <code>Unit × Empty</code> are all empty types, and there is a unique function from an empty type to any other type (<code>IsEmpty.elim</code>).</p>",
        "id": 437995111,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715352707
    },
    {
        "content": "<p>It’s perhaps worth noting explicitly here that, in terms of sets, the set of all functions from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> which I’ll denote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> (analogous to the type <code>A → B</code>) is not a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\times B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, but a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo>×</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}(A \\times B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> (since each function is a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\times B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>).</p>\n<p>And since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∅</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}(\\emptyset)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">∅</span><span class=\"mclose\">)</span></span></span></span> is singleton (namely, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∅</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">∅</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}(\\emptyset) = \\{\\emptyset\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">∅</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">∅</span><span class=\"mclose\">}</span></span></span></span>, and so always contains exactly one element, namely <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span>), you’ve always got at least one <em>candidate</em> function (the empty set) when considering <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">A \\to \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\emptyset \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.</p>\n<p>To find out which elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo>×</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}(A \\times B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> are actually functions, we filter out using the criterion Yury mentioned earlier. Importantly, <strong>this criterion is asymmetric in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>.</strong> So in the generic case, we filter out meaningfully different subsets (i.e. not related by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>w</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">swap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span>) in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> when compared to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">B \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.</p>\n<p>The empty set (recall that it’s always a candidate function, i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>∈</mo><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\emptyset \\in \\mathcal{P}(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>) fails to meet the criteria of “actually being a function” in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">A \\to \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span> case exactly when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is nonempty.</p>\n<p>In the case of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\emptyset \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, the empty set always <em>does</em> meet the criteria of being a function, and, since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>∈</mo><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∅</mi><mo>×</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>≅</mo><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∅</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\emptyset \\in \\mathcal{P}(\\emptyset \\times A) \\cong \\mathcal{P}(\\emptyset)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">∅</span><span class=\"mclose\">)</span></span></span></span> is the unique such element, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\emptyset \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is always singleton.</p>\n<p>So to sum up, the point here is that while you are correct that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>×</mo><mi>A</mi><mo>≅</mo><mi>A</mi><mo>×</mo><mi mathvariant=\"normal\">∅</mi><mo>≅</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\emptyset \\times A \\cong A \\times \\emptyset \\cong \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.0833em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span></p>\n<ul>\n<li>the function type sticks a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span></span></span> in front, which always grants us at least one candidate element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>→</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>⊂</mo><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo>×</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A \\to B) \\subset \\mathcal{P}(A \\times B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> (as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>∈</mo><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\emptyset \\in \\mathcal{P}(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>)</li>\n<li>the function <em>criterion</em> is asymmetric, so different elements will be filtered out as “non-functions” depending on whether we’re looking at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo>×</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}(A \\times B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo>×</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}(B \\times A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span>. So <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">A \\to \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span> may wind up empty by filtering out the empty function while <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\emptyset \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> may not.</li>\n</ul>\n<p>(As an example, to prove to yourself that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> in general has a different size than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">B \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mo>⋆</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">A = \\{\\star\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">⋆</span><span class=\"mclose\">}</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> to have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> elements. You’ll see there are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> but only one element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">B \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>. It’s not a stretch for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">A \\to \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span> to be reduced to 0 elements while <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\emptyset \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> has 1 element!)</p>\n<p>Do you have any specific objections to any part of this? Also happy to clarify anything. (In any case this was fun to type out! :) )</p>",
        "id": 438126904,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1715453015
    }
]