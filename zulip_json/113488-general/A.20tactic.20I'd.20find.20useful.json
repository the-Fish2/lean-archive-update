[
    {
        "content": "<p>At the moment, <code>field_simp</code> is great for multiplying out equalities in a field. It would be nice if we have something which could also multiply out denominators in an ordered field, potentially using <code>positivity</code> to know what's positive (or negative). Here's the example that made me think of this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test_case</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_mul_le_iff</span> <span class=\"n\">hK</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hE</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_assoc'</span><span class=\"o\">,</span> <span class=\"n\">div_le_div_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sq</span><span class=\"o\">]</span>\n  <span class=\"n\">rotate_left</span>\n  <span class=\"bp\">·</span> <span class=\"n\">positivity</span>\n  <span class=\"bp\">·</span> <span class=\"n\">positivity</span>\n  <span class=\"n\">refine</span> <span class=\"n\">hE.trans_eq</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>\n<p>The proof is pretty ad-hoc but really this feels like it should be simpler... <code>nlinarith</code> can't do it either, even knowing positivity for A,B as reals.</p>",
        "id": 412194376,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1704909909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> has this for teaching IIRC</p>",
        "id": 412208030,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704915731
    },
    {
        "content": "<p>Here is a proof which is much more complicated, but has the virtue of requiring only a single tactic call.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">div_eq_iff'</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq_comm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h'</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_div_cancel'</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h'</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">mul_div_cancel_left</span> <span class=\"n\">c</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">div_le_iff''</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h'</span> <span class=\"n\">h'</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">lt_asymm</span> <span class=\"n\">h'</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_le_iff_of_neg</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">lt_asymm</span> <span class=\"n\">h'</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_le_iff</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_div_iff''</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h'</span> <span class=\"n\">h'</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">lt_asymm</span> <span class=\"n\">h'</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff_of_neg</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"n\">lt_asymm</span> <span class=\"n\">h'</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">div_mul_eq_mul_div</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_lt_zero_iff'''</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_case</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">div_mul_eq_mul_div</span><span class=\"o\">,</span> <span class=\"n\">div_le_iff''</span><span class=\"o\">,</span> <span class=\"n\">le_div_iff''</span><span class=\"o\">,</span> <span class=\"n\">mul_lt_zero_iff'''</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.cast_pos.mpr</span><span class=\"o\">,</span> <span class=\"n\">Nat.pos_iff_ne_zero.mp</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span><span class=\"o\">,</span> <span class=\"n\">lt_asymm</span><span class=\"o\">,</span> <span class=\"n\">inv_eq_one_div</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">mul_left_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">hK</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hE</span>\n</code></pre></div>",
        "id": 412212943,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1704917867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/A.20tactic.20I'd.20find.20useful/near/412208030\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> has this for teaching IIRC</p>\n</blockquote>\n<p>No, I don't.  I faked this tactic (i.e. gave a hack implementation) once or twice for talks (e.g. <a href=\"https://youtu.be/bwVPSzT9QEw?t=494\">here</a>) and Terry <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20a.20field_simp.20variant.20that.20generates.20hypotheses.3F/near/397863993\">also proposed it</a> at some point.  I think this would be a great tactic, but as you can see at that thread, it seems to require a more principled implementation than <code>field_simp</code>'s current implementation.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"bwVPSzT9QEw\" href=\"https://youtu.be/bwVPSzT9QEw?t=494\"><img src=\"https://uploads.zulipusercontent.net/7c3cabb3a38885810099d74527b8e4cc6b6a424a/68747470733a2f2f692e7974696d672e636f6d2f76692f62775650537a54395145772f64656661756c742e6a7067\"></a></div>",
        "id": 412215315,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704918856
    }
]