[
    {
        "content": "<p><a href=\"https://lean-lang.org/lean4/doc/lean3changes.html#library-changes\">https://lean-lang.org/lean4/doc/lean3changes.html#library-changes</a></p>\n<p>Why they remove Monad instance of List from Lean4?</p>",
        "id": 436347641,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714508473
    },
    {
        "content": "<p>Instances of the List monad still seem to exist in the library.<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Init/Data/List/Instances.lean#L39-L42\">https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Init/Data/List/Instances.lean#L39-L42</a></p>",
        "id": 436347817,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714508556
    },
    {
        "content": "<p>I think it was intentionally removed from the Lean4 upstream.</p>",
        "id": 436347941,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714508625
    },
    {
        "content": "<p>I don't know what the intention is. I think this has already been discussed somewhere, but I couldn't find it.</p>",
        "id": 436348092,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714508678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> <a href=\"#narrow/stream/113488-general/topic/question.3A.20why.20List.20is.20nolonger.20Monad.3F/near/436347941\">said</a>:</p>\n<blockquote>\n<p>I think it was intentionally removed from the Lean4 upstream.</p>\n</blockquote>\n<p>Having non lazy lists as a monad is an performance issue when used in do notation style is the short reasoning</p>",
        "id": 436348352,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1714508787
    },
    {
        "content": "<p>If you search for \"monad list\" (with the quotes) you can find previous discussions</p>",
        "id": 436348536,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714508870
    },
    {
        "content": "<p>Thanks for the answer, I thought List was a monad in Haskell, but Haskell uses lazy evaluation. Now I understand why.</p>",
        "id": 436348547,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714508873
    },
    {
        "content": "<p>I feel like there should be a lazy evaluation version of List.</p>",
        "id": 436351112,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714509938
    },
    {
        "content": "<p>That's <code>MLList</code>, although it also has performance issues</p>",
        "id": 436351319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714510038
    },
    {
        "content": "<p>Does this mean that list comprehensions are not available in Lean 4?</p>",
        "id": 436351718,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714510190
    },
    {
        "content": "<blockquote>\n<p>That's <code>MLList</code>, although it also has performance issues</p>\n</blockquote>\n<p>oh...</p>",
        "id": 436351815,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714510225
    },
    {
        "content": "<p>List comprehension syntax doesn't really exist, but you can use <code>do</code> notation for it if you are downstream of the <code>Monad List</code> definition, or use <code>filter</code> and <code>bind</code> otherwise</p>",
        "id": 436353464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714510910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> <a href=\"#narrow/stream/113488-general/topic/question.3A.20why.20List.20is.20nolonger.20Monad.3F/near/436351718\">said</a>:</p>\n<blockquote>\n<p>Does this mean that list comprehensions are not available in Lean 4?</p>\n</blockquote>\n<p>Is that related to laziness. I guess you can have list comprehensions syntax by translating the comprehension into a <code>def</code> that constructs the list.</p>",
        "id": 436353570,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714510945
    },
    {
        "content": "<p><code>do</code> notation is not too far from list comprehension syntax, but it does require that the type have a <code>Monad</code> instance or something like it</p>",
        "id": 436354247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714511264
    },
    {
        "content": "<p>you can also add a monad instance in 3 lines if you want it for your project</p>",
        "id": 436354342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714511297
    },
    {
        "content": "<p>See also  <a href=\"#narrow/stream/270676-lean4/topic/List.20Functor/near/290456697\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/List.20Functor/near/290456697</a></p>",
        "id": 436354590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714511426
    },
    {
        "content": "<p>Here's another version of this, which is a lot more flexible, <code>collect_array ... yield ...</code> expressions for <code>Array</code>. It's just defining a monad with <code>Array</code> state and using <code>do</code> notation with a different head keyword.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Array comprehension</span>\n<span class=\"k\">#eval</span> <span class=\"n\">collect_array</span> <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">]</span> <span class=\"k\">do</span> <span class=\"n\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">]</span> <span class=\"k\">do</span> <span class=\"n\">for</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"n\">yield</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">#[(3, 4, 5), (4, 3, 5), (5, 12, 13), (6, 8, 10), (8, 6, 10), (8, 15, 17), (9, 12, 15), (12, 5, 13), (12, 9, 15),</span>\n<span class=\"cm\">  (15, 8, 17)]</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- Interleave IO actions</span>\n<span class=\"k\">#eval</span> <span class=\"n\">do_array</span><span class=\"o\">[</span><span class=\"n\">IO</span><span class=\"o\">]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"yielding {i}\"</span>\n      <span class=\"n\">yield</span> <span class=\"n\">i</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">yielding 2</span>\n<span class=\"cm\">yielding 4</span>\n<span class=\"cm\">yielding 6</span>\n<span class=\"cm\">yielding 8</span>\n<span class=\"cm\">#[2, 4, 6, 8]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- probably should have used WriterT, in Mathlib.Control.Monad.Writer</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">ArrayT</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">StateT</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">ArrayM</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ArrayT</span> <span class=\"n\">α</span> <span class=\"n\">Id</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ArrayT.yield</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ArrayT</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.push</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ArrayT.yield'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ArrayT</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ArrayT.run'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ArrayT</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">StateT.run</span> <span class=\"n\">x</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ArrayM.run'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ArrayM</span> <span class=\"n\">α</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Prod.snd</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">StateT.run</span> <span class=\"n\">x</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"yield \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">ArrayT.yield</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"yield' \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">ArrayT.yield'</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"do_array \"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">doSeq</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ArrayT.run'</span> <span class=\"k\">do</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"do_array\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"] \"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">doSeq</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">ArrayT.run'</span> <span class=\"k\">do</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">m</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"collect_array \"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">doSeq</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ArrayM.run'</span> <span class=\"k\">do</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Array comprehension</span>\n<span class=\"k\">#eval</span> <span class=\"n\">collect_array</span> <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">]</span> <span class=\"k\">do</span> <span class=\"n\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">]</span> <span class=\"k\">do</span> <span class=\"n\">for</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"n\">yield</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">#[(3, 4, 5), (4, 3, 5), (5, 12, 13), (6, 8, 10), (8, 6, 10),</span>\n<span class=\"cm\">  (8, 15, 17), (9, 12, 15), (12, 5, 13), (12, 9, 15), (15, 8, 17)]</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- Interleave IO actions</span>\n<span class=\"k\">#eval</span> <span class=\"n\">do_array</span><span class=\"o\">[</span><span class=\"n\">IO</span><span class=\"o\">]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"yielding {i}\"</span>\n      <span class=\"n\">yield</span> <span class=\"n\">i</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">yielding 2</span>\n<span class=\"cm\">yielding 4</span>\n<span class=\"cm\">yielding 6</span>\n<span class=\"cm\">yielding 8</span>\n<span class=\"cm\">#[2, 4, 6, 8]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n</div></div>",
        "id": 436363120,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714515711
    },
    {
        "content": "<p>I've also had this problem of needing a nondeterminism monad. <code>MLList</code> was not useable in my use case due to performance, so I'm using a strict monad that is essentially the same as <code>Monad List</code>. It also has performance issues, but these are acceptable. But I just saw <a href=\"#narrow/stream/270676-lean4/topic/List.20Functor/near/295114141\">this</a> message by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> defining a nondeterminism monad in a lazy way using <code>Array</code>. I have extended this definition to be a monad transformer. It seems to me that this behaves identically to MLList for the purpose of being a nondeterminism monad, but it is very performant.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ArrayT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">κ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">κ</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">κ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">κ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">ArrayT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"n\">a</span>\n  <span class=\"n\">bind</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">·</span> <span class=\"n\">_</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MonadLift</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ArrayT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">monadLift</span> <span class=\"n\">l</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">l.foldlM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MonadLift</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">ArrayT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">monadLift</span> <span class=\"n\">l</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">l.foldlM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MonadLift</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ArrayT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">monadLift</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">arr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ArrayT.run</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ArrayT</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">r.push</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Alternative</span> <span class=\"o\">(</span><span class=\"n\">ArrayT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">failure</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span>\n  <span class=\"n\">orElse</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"n\">arr</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">b</span> <span class=\"o\">()</span> <span class=\"n\">_</span> <span class=\"n\">k</span>\n\n\n<span class=\"k\">#eval</span> <span class=\"n\">ArrayT.run</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Option</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">some</span> <span class=\"mi\">100</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"n\">return</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- some #[111, 112, 113, 121, 122, 123, 131, 132, 133]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ArrayT</span> <span class=\"n\">Id</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"n\">return</span> <span class=\"mi\">4</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"mi\">20</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run.size</span> <span class=\"bp\">==</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">20</span> <span class=\"c1\">-- true</span>\n</code></pre></div>\n<p>The function foo handles 2^20 case splits in less than a second. All the other nondeterminism monads I have seen so far in Lean crash when trying to do this many splits. Has this implementation not been considered before or am I misunderstanding something?</p>",
        "id": 436375050,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1714523345
    },
    {
        "content": "<p>You can use it for comprehension as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ArrayT.ofForIn</span> <span class=\"o\">[</span><span class=\"n\">ForIn</span> <span class=\"n\">m</span> <span class=\"n\">ρ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ArrayT</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr</span>\n  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">as</span> <span class=\"k\">do</span>\n    <span class=\"n\">arr</span> <span class=\"bp\">←</span> <span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">arr</span>\n  <span class=\"n\">return</span> <span class=\"n\">arr</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">ArrayT.run</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Id</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">ArrayT.ofForIn</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">ArrayT.ofForIn</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"bp\">←</span> <span class=\"n\">ArrayT.ofForIn</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">]</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">#[(3, 4, 5), (4, 3, 5), (5, 12, 13), (6, 8, 10), (8, 6, 10), (8, 15, 17), (9, 12, 15), (12, 5, 13), (12, 9, 15),</span>\n<span class=\"cm\">  (15, 8, 17)]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 436377344,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1714525364
    },
    {
        "content": "<p>Thank you all for your kindness! <br>\nI think it would be a good idea to add a note in the Lean Manual as to why developers deleted the List Monad instance.</p>",
        "id": 436448689,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714539091
    },
    {
        "content": "<p>I've tried to implement <code>ArrayT</code> into my code, but it is not able to handle deep recursion. The following crashes Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ArrayT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">κ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">κ</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">κ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">κ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">ArrayT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"n\">a</span>\n  <span class=\"n\">bind</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">·</span> <span class=\"n\">_</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">ArrayT.run</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ArrayT</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">r.push</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ArrayT</span> <span class=\"n\">Id</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span><span class=\"bp\">==</span><span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"mi\">4</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n\n<span class=\"k\">#eval</span> <span class=\"n\">ArrayT.run</span>  <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"mi\">5000</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>On this example <code>List</code> also fails, but <code>MLList</code> works fine. My understanding of how <code>return</code> works, is that this function is the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ArrayT</span> <span class=\"n\">Id</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span><span class=\"bp\">==</span><span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"mi\">4</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"o\">()</span>\n    <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(with an extra let-expression abstracting the <code>bar (n-1)</code>). But somehow, this example does not crash. Is my understanding of do notation flawed?</p>\n<p>There is also this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">Id</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"n\">return</span> <span class=\"mi\">4</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">MLList.force</span>  <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"mi\">6000</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This crashes Lean, while the same with <code>ArrayT</code> or <code>List</code> works fine. In my mind, all of these examples are just a sequence of <code>n</code> times <code>pure ()</code> followed by <code>pure 4</code>. But they all give different results.</p>",
        "id": 436507103,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1714572689
    },
    {
        "content": "<p>The do notation looks like it works how I thought. So, I can make two functions that give the exact same output when using <code>#print</code>, but one crashes and the other doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ArrayT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">κ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">κ</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">κ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">κ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">ArrayT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"n\">a</span>\n  <span class=\"n\">bind</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">·</span> <span class=\"n\">_</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">ArrayT.run</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ArrayT</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">r.push</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ArrayT</span> <span class=\"n\">Id</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ArrayT</span> <span class=\"n\">Id</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">__do_jp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span>\n      <span class=\"n\">bar'</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"mi\">4</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n      <span class=\"n\">__do_jp</span> <span class=\"n\">y</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">bar</span>\n<span class=\"k\">#print</span> <span class=\"n\">bar'</span>\n<span class=\"k\">#eval</span> <span class=\"n\">ArrayT.run</span>  <span class=\"o\">(</span><span class=\"n\">bar'</span> <span class=\"mi\">50000</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">ArrayT.run</span>  <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"mi\">50000</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 436519357,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1714576240
    },
    {
        "content": "<p>I have now found an example where <code>ArrayT</code> crashes, but both <code>List</code> and <code>MLList</code> succeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ArrayT</span> <span class=\"n\">Id</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n    <span class=\"n\">return</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span>\n\n<span class=\"k\">#eval</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">12</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span>\n</code></pre></div>\n<p>Because <code>ArrayT</code> doesn't store intermediate results, this example of adding 1 to itself 2^12 times creates a recursion depth of that size <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span> . So it turns out that it really depends on the exact function that you're using which nondeterminism monad is the best. In my use case it is still the list-like one.</p>",
        "id": 436560999,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1714592348
    }
]