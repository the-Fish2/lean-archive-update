[
    {
        "content": "<p>Hello, I am trying to develop something for Lean4. I noticed that there is a <code>lean-client-js</code> library, but there is not many examples, and the <code>vscode-lean4</code> repo does not refer to it (except the <code>old/</code> dir). I am curious about is <code>lean-client-js</code> library still usable for current Lean4?</p>",
        "id": 409529759,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1703226307
    },
    {
        "content": "<p>The lean-client-js library is for the Lean 3 language server, which used a custom protocol (the <em>Lean</em> Server Protocol). The Lean 4 language server uses a different standardized protocol (the <a href=\"https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/\">*Language* Server Protocol</a>) that is also used by many other programming languages with some additional extensions to support interactive theorem proving.</p>\n<p>To communicate with the Lean 4 language server, vscode-lean4 can mostly reuse an existing client library for the Language Server Protocol called <a href=\"https://www.npmjs.com/package/vscode-languageclient\">vscode-languageclient</a>. A TypeScript library with types for the protocol can be found at <a href=\"https://www.npmjs.com/package/vscode-languageserver-protocol\">vscode-languageserver-protocol</a>. <br>\nThe extensions to the Language Server Protocol by Lean 4 can be found in <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Data/Lsp/Extra.lean\">Extra.lean</a>. Some other types have been extended as well and <a href=\"https://github.com/leanprover/vscode-lean4/blob/master/vscode-lean4/src/utils/converters.ts\">converters.ts</a> provides a clue on what those are.</p>\n<p>If you want to develop something for Lean 4, then unless you are writing a new editor plugin, it is unlikely that you want to communicate with Lean 4 using the Language Server Protocol. Instead, you may want to use the meta-programming facilities of Lean 4 or write a custom frontend (see e.g. <a href=\"https://github.com/leanprover-community/repl/blob/ac9ff738068b1e2b0edb8f4af15641e91150c75b/REPL/Frontend.lean\">REPL</a>). Perhaps REPL itself already does what you need, too.</p>",
        "id": 409543486,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1703234047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/113488-general/topic/Is.20.60lean-client-js.60.20library.20still.20usable.20for.20current.20Lean4.3F/near/409543486\">发言道</a>：</p>\n<blockquote>\n<p>The lean-client-js library is for the Lean 3 language server, which used a custom protocol (the <em>Lean</em> Server Protocol). The Lean 4 language server uses a different standardized protocol (the <a href=\"https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/\">*Language* Server Protocol</a>) that is also used by many other programming languages with some additional extensions to support interactive theorem proving.</p>\n<p>To communicate with the Lean 4 language server, vscode-lean4 can mostly reuse an existing client library for the Language Server Protocol called <a href=\"https://www.npmjs.com/package/vscode-languageclient\">vscode-languageclient</a>. A TypeScript library with types for the protocol can be found at <a href=\"https://www.npmjs.com/package/vscode-languageserver-protocol\">vscode-languageserver-protocol</a>. <br>\nThe extensions to the Language Server Protocol by Lean 4 can be found in <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Data/Lsp/Extra.lean\">Extra.lean</a>. Some other types have been extended as well and <a href=\"https://github.com/leanprover/vscode-lean4/blob/master/vscode-lean4/src/utils/converters.ts\">converters.ts</a> provides a clue on what those are.</p>\n<p>If you want to develop something for Lean 4, then unless you are writing a new editor plugin, it is unlikely that you want to communicate with Lean 4 using the Language Server Protocol. Instead, you may want to use the meta-programming facilities of Lean 4 or write a custom frontend (see e.g. <a href=\"https://github.com/leanprover-community/repl/blob/ac9ff738068b1e2b0edb8f4af15641e91150c75b/REPL/Frontend.lean\">REPL</a>). Perhaps REPL itself already does what you need, too.</p>\n</blockquote>\n<p>Thank you for your comprehensive explanation, the suggestions are quiet useful!</p>",
        "id": 409682981,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1703306249
    }
]