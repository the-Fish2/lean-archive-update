[
    {
        "content": "<p>I'm having a bit of trouble with extending functions on Fin n and proving trivial things about the extensions. </p>\n<p>Ideally the theorems below should follow trivially, but I am failing at expanding the definition of extend_fin in the proofs of the theorems. </p>\n<p>extend_fin works fine in explicit cases with #eval, but I still think I'm misunderstanding something fundamental in how one should define extend_fin. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Fin.Lemmas</span>\n\n\n\n<span class=\"kd\">def</span> <span class=\"n\">extend_fin</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>  <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_extension</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>  <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">extend_fin</span> <span class=\"n\">g</span> <span class=\"n\">e</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">last_matches_extension</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>  <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">extend_fin</span> <span class=\"n\">g</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 424496340,
        "sender_full_name": "Miek Messerschmidt",
        "timestamp": 1709462258
    },
    {
        "content": "<p>Never mind. This is exactly the following from Std.Data.Fin.Lemmas</p>\n<p>def Fin.lastCases<br>\ntheorem Fin.lastCases_last<br>\ntheorem Fin.lastCases_castSucc</p>\n<p>My approach in manually defining extend_fin instead of using Fin.lastCases appears to be the main issue.</p>",
        "id": 424502924,
        "sender_full_name": "Miek Messerschmidt",
        "timestamp": 1709467606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"471725\">Miek Messerschmidt</span> has marked this topic as resolved.</p>",
        "id": 424502932,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709467616
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cons#doc\">docs#Fin.cons</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.snoc#doc\">docs#Fin.snoc</a> are also relevant</p>",
        "id": 424505835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709469939
    }
]