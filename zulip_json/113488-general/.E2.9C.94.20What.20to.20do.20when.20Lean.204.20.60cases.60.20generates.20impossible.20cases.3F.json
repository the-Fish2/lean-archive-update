[
    {
        "content": "<p>Consider the following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Animal</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">fish</span> <span class=\"o\">:</span> <span class=\"n\">Animal</span>\n<span class=\"bp\">|</span> <span class=\"n\">bird</span> <span class=\"o\">:</span> <span class=\"n\">Animal</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Part</span> <span class=\"o\">:</span> <span class=\"n\">Animal</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Part</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">wing</span> <span class=\"o\">:</span> <span class=\"n\">Part</span> <span class=\"n\">bird</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Part</span> <span class=\"n\">fish</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span>\n  <span class=\"n\">case</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">42</span>\n  <span class=\"n\">case</span> <span class=\"n\">wing</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- impossible case</span>\n</code></pre></div>\n<p>When defining <code>f</code>, the argument <code>x</code> must be <code>tail</code> because that is the only inhabitant of <code>Part fish</code>. However, Lean insists that <code>f</code> should consider the case <code>x = wing</code> as well. How can I convince it that this is an impossible case?</p>",
        "id": 432922361,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712933994
    },
    {
        "content": "<p>I'm afraid you shot your foot, add <code>set_option autoImplicit false</code> to the top and it will work as you expect</p>",
        "id": 432923338,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712934237
    },
    {
        "content": "<p><code>bird</code> and <code>fish</code> are free variables in your code</p>",
        "id": 432923532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712934278
    },
    {
        "content": "<p>Arrrgh! Replacing <code>Part fish</code> with <code>Part .fish</code> does the job, of course.</p>\n<p>But I have <code>moreLeanArgs := #[\"-DautoImplicit=false\"]</code> in my <code>lakefile.lean</code>! Why isn't that working? Whoever thought that setting auto-implicits to true by default was a good idea is going to hell, I tell you.</p>",
        "id": 432925436,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712934775
    },
    {
        "content": "<p>Anyhow, thanks!</p>",
        "id": 432925985,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1712934955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> has marked this topic as resolved.</p>",
        "id": 432926005,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712934962
    },
    {
        "content": "<p>Can you say more about your setup? That should work (although the lakefile syntax has since changed - but the old syntax should still work)</p>",
        "id": 432926135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712935004
    },
    {
        "content": "<p><code>moreLeanArgs</code> is outdated syntax (though should still work), I think the new spelling is with <code>leanOptions</code></p>",
        "id": 432926139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712935005
    },
    {
        "content": "<p>what lean version are you on</p>",
        "id": 432926207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712935023
    },
    {
        "content": "<p>PS: this gives me an idea for a linter: warn when an autoImplicit has a type which is an inductive type, and the variable name matches one of the constructors. That's a pretty specific combination of things, so it should hopefully not have many false positives</p>",
        "id": 432927322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712935323
    },
    {
        "content": "<p>Another idea that I've heard is to have autoimplicits use the \"monomorphism restriction\" -- i.e., if the expression isn't a function, then don't make it a function. At least for structure fields, the justification is the same as for Haskell's monomorphism restriction: avoid unexpectedly changing whether a field is a value or a computation.</p>",
        "id": 432930558,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712936311
    },
    {
        "content": "<p>Another idea is just to have them off by default and let power users switch them on, because it's the people who don't have a clue what a lakefile is who are most likely to get shot.</p>",
        "id": 432933839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712937267
    },
    {
        "content": "<p>I agree with Kevin: I do not consider myself a newbie, but when I see a file that starts with <code>set_option autoImplicit true</code> I get quite nervous...</p>",
        "id": 432934526,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712937471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20What.20to.20do.20when.20Lean.204.20.60cases.60.20generates.20impossible.20cases.3F/near/432930558\">said</a>:</p>\n<blockquote>\n<p>Another idea that I've heard is to have autoimplicits use the \"monomorphism restriction\" -- i.e., if the expression isn't a function, then don't make it a function. At least for structure fields, the justification is the same as for Haskell's monomorphism restriction: avoid unexpectedly changing whether a field is a value or a computation.</p>\n</blockquote>\n<p>If I understand correctly that would catch only the first error here (the <code>| wing : Part bird</code>) and not the second (<code>f (x : Part fish)</code>)</p>",
        "id": 432935297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712937700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20What.20to.20do.20when.20Lean.204.20.60cases.60.20generates.20impossible.20cases.3F/near/432933839\">said</a>:</p>\n<blockquote>\n<p>Another idea is just to have them off by default and let power users switch them on, because it's the people who don't have a clue what a lakefile is who are most likely to get shot.</p>\n</blockquote>\n<p>Sure, but this is about defense in depth. There might be reasons you have autoImplicits on, that doesn't mean you should be on your own if there is something else we can do to catch mistakes</p>",
        "id": 432935694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712937822
    },
    {
        "content": "<p>actually, the issue I mentioned also gets me frequently even without autoImplicits:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">true</span> <span class=\"bp\">←</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span> <span class=\"c1\">-- parse error</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">true</span> <span class=\"bp\">←</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- true is a variable</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"bp\">←</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 432936578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712938084
    },
    {
        "content": "<p>Rust has a lint for this which is set to deny-by-default (a.k.a. \"it's technically a lint but almost certainly a mistake so fix your code\"):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">variant</span> <span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"bp\">`</span> <span class=\"n\">should</span> <span class=\"k\">have</span> <span class=\"n\">an</span> <span class=\"n\">upper</span> <span class=\"n\">camel</span> <span class=\"n\">case</span> <span class=\"n\">name</span>\n <span class=\"c1\">--&gt; src/main.rs:2:5</span>\n  <span class=\"bp\">|</span>\n<span class=\"mi\">2</span> <span class=\"bp\">|</span>     <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"bp\">|</span>     <span class=\"bp\">^</span> <span class=\"n\">help</span><span class=\"o\">:</span> <span class=\"n\">convert</span> <span class=\"n\">the</span> <span class=\"n\">identifier</span> <span class=\"n\">to</span> <span class=\"n\">upper</span> <span class=\"n\">camel</span> <span class=\"n\">case</span><span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"n\">A</span><span class=\"bp\">`</span>\n  <span class=\"bp\">|</span>\n  <span class=\"bp\">=</span> <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"bp\">`#</span><span class=\"o\">[</span><span class=\"n\">warn</span><span class=\"o\">(</span><span class=\"n\">non_camel_case_types</span><span class=\"o\">)]</span><span class=\"bp\">`</span> <span class=\"n\">on</span> <span class=\"kd\">by</span> <span class=\"n\">default</span>\n\n<span class=\"n\">error</span><span class=\"o\">[</span><span class=\"n\">E0170</span><span class=\"o\">]:</span> <span class=\"n\">pattern</span> <span class=\"n\">binding</span> <span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">named</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"n\">as</span> <span class=\"n\">one</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">variants</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">type</span> <span class=\"bp\">`</span><span class=\"n\">Foo</span><span class=\"bp\">`</span>\n <span class=\"c1\">--&gt; src/main.rs:7:9</span>\n  <span class=\"bp\">|</span>\n<span class=\"mi\">7</span> <span class=\"bp\">|</span>         <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(),</span>\n  <span class=\"bp\">|</span>         <span class=\"bp\">^</span> <span class=\"n\">help</span><span class=\"o\">:</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">variant</span><span class=\"o\">,</span> <span class=\"n\">qualify</span> <span class=\"n\">the</span> <span class=\"n\">path</span><span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"n\">Foo</span><span class=\"o\">::</span><span class=\"n\">a</span><span class=\"bp\">`</span>\n  <span class=\"bp\">|</span>\n  <span class=\"bp\">=</span> <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"bp\">`#</span><span class=\"o\">[</span><span class=\"n\">deny</span><span class=\"o\">(</span><span class=\"n\">bindings_with_variant_name</span><span class=\"o\">)]</span><span class=\"bp\">`</span> <span class=\"n\">on</span> <span class=\"kd\">by</span> <span class=\"n\">default</span>\n\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">unused</span> <span class=\"kd\">variable</span><span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"bp\">`</span>\n <span class=\"c1\">--&gt; src/main.rs:7:9</span>\n  <span class=\"bp\">|</span>\n<span class=\"mi\">7</span> <span class=\"bp\">|</span>         <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(),</span>\n  <span class=\"bp\">|</span>         <span class=\"bp\">^</span> <span class=\"n\">help</span><span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"n\">intentional</span><span class=\"o\">,</span> <span class=\"kd\">prefix</span> <span class=\"n\">it</span> <span class=\"k\">with</span> <span class=\"n\">an</span> <span class=\"n\">underscore</span><span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"n\">_a</span><span class=\"bp\">`</span>\n  <span class=\"bp\">|</span>\n  <span class=\"bp\">=</span> <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"bp\">`#</span><span class=\"o\">[</span><span class=\"n\">warn</span><span class=\"o\">(</span><span class=\"n\">unused_variables</span><span class=\"o\">)]</span><span class=\"bp\">`</span> <span class=\"n\">on</span> <span class=\"kd\">by</span> <span class=\"n\">default</span>\n</code></pre></div>\n<p>(note that the casing convention for enum variants also avoids issues of this kind, since variables are snake_case and enum variants are TitleCase)</p>",
        "id": 432937734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712938503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20What.20to.20do.20when.20Lean.204.20.60cases.60.20generates.20impossible.20cases.3F/near/432925436\">said</a>:</p>\n<blockquote>\n<p>But I have <code>moreLeanArgs := #[\"-DautoImplicit=false\"]</code> in my <code>lakefile.lean</code>! Why isn't that working?</p>\n</blockquote>\n<p>I think <code>modeLeanArgs</code> (or according to Eric <code>moreLeanOptions</code>) is for setting the options on building (<code>lake build</code>), while <code>moreServerOptions</code> is what sets the options in VSCode.</p>\n<p>The snippet from my lakefile sets both of them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">Demo</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"c1\">-- \"-DrelaxedAutoImplicit=false\",</span>\n    <span class=\"s2\">\"-DautoImplicit=false\"</span>\n       <span class=\"o\">]</span>\n  <span class=\"n\">moreServerOptions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"c1\">-- ⟨`relaxedAutoImplicit, false⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">autoImplicit</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩</span> <span class=\"o\">]</span>\n</code></pre></div>\n<p>Only setting <code>modeLeanArgs</code> will cause VSCode to evaluate the file fine, but <code>lake build</code> will throw the expected \"unknown identifier\".</p>",
        "id": 433056032,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713022349
    },
    {
        "content": "<p>Also, \"just turn autoImplicits off\" is not a complete solution, as for now other parts of the ecosystem want it on, so we will continue to have the \"dialects\" problem.</p>",
        "id": 433206330,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713161024
    },
    {
        "content": "<p>how about a command like <code>#checkImplicits</code> that turns on warnings on autoImplicit uses in a file, say even upto the point where it is invoked. It could be a handy debugging tool</p>",
        "id": 433530313,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1713276257
    }
]