[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ?A -&gt; ?M →ₗ[?A] ?M</p>",
        "id": 444555861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718310612
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 444555914,
        "sender_full_name": "loogle",
        "timestamp": 1718310634
    },
    {
        "content": "<p>Web error is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>(deterministic) timeout at `isDefEq`, maximum number of heartbeats (200000) has been reached\nuse `set_option maxHeartbeats &lt;num&gt;` to set the limit\nuse `set_option diagnostics true` to get diagnostic information\n</code></pre></div>\n<p>Is that a bad query? I'm looking for the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M\\to M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> defined by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>↦</mo><mi>a</mi><mo>⋅</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m\\mapsto a\\cdot m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> for a given <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">a\\in A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> (here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-module).</p>",
        "id": 444556121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718310709
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.lsmul#doc\">docs#Algebra.lsmul</a> ?</p>",
        "id": 444556305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718310784
    },
    {
        "content": "<p>Though <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DistribMulAction.toLinearMap#doc\">docs#DistribMulAction.toLinearMap</a> may be enough</p>",
        "id": 444556412,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718310827
    },
    {
        "content": "<p>Thanks, this is enough. What about (again <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> a commutative ring and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-module) the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">A\\to M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>↦</mo><mi>a</mi><mo>⋅</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">a\\mapsto a\\cdot m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> for some given <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>∈</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">m\\in M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>? (there seems to be no <code>rsmul</code>or <code>smulr</code> in mathlib)</p>",
        "id": 444642150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718351729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ?M -&gt; ?A →ₗ[?A] ?M</p>",
        "id": 444642433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718351838
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 444642480,
        "sender_full_name": "loogle",
        "timestamp": 1718351859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ?A →ₗ[?B] ?C →ₗ[?D] ?E</p>",
        "id": 444642704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718351937
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 444642760,
        "sender_full_name": "loogle",
        "timestamp": 1718351958
    },
    {
        "content": "<p>Very generic queries can make the bot crash, this is unfortunately well known. It may work better if you throw in some constants, like <code>Module</code>, to restrict the search. </p>\n<p>Also, everytime it crashes it takes a minute or so to start again :-/</p>",
        "id": 444642944,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1718352009
    },
    {
        "content": "<p>Hmm, but yes, for this query it’s really hard to work with constants to narrow down the search</p>",
        "id": 444643194,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1718352091
    },
    {
        "content": "<p>Oh sorry! I had no idea I was causing trouble. I don't know how to add typeclass inference parameters. I had assumed that the <code>→ₗ[?B]</code> was doing this for me: for that to even make sense we need that ?A is a ?B-module so I thought that this would be quickly inferred.</p>",
        "id": 444643258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718352111
    },
    {
        "content": "<p>Here is a query that is more general than what you want, but specific enough to make loogle not crash, and yields an acceptable number of results (11)<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  |- ?A →ₗ[?A] _</p>",
        "id": 444643460,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1718352148
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/LinearMap/Basic.html#Module.compHom.toLinearMap\">Module.compHom.toLinearMap</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Algebra/Defs.html#Algebra.linearMap\">Algebra.linearMap</a>, and <a href=\"https://loogle.lean-lang.org/?q=%7C-%20%3FA%20%E2%86%92%E2%82%97%5B%3FA%5D%20_\">9 more</a></p>",
        "id": 444643464,
        "sender_full_name": "loogle",
        "timestamp": 1718352150
    },
    {
        "content": "<p>For the query to even typecheck we need something like : ?A is a ?B-module and both ?C and ?E are ?D-modules.</p>",
        "id": 444643478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718352155
    },
    {
        "content": "<p>You are not causing trouble, loogle is causing trouble. </p>\n<p>I don’t know exactly why your query is so expensive. Maybe <code>withReducible</code> <code>isDefEq</code> still isn’t as fast as I would like it to be. Maybe I need a <code>matchesPattern</code> that doesn’t reduce, and works purely syntactically, to make loogle more reliable here. <code>isDefEq</code> is just too dangerous</p>",
        "id": 444643803,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1718352259
    },
    {
        "content": "<p>The benefit of a query like <code>AddCommMonoid, Module, LinearMap</code> is that it is much faster and more reliable: There is no unification happening, just checking which constants are mentioned. In your particular case it’s too non-specific though, and thus not helpful.</p>",
        "id": 444644250,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1718352402
    },
    {
        "content": "<p>The 11-result-query points to <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.lsmul\">LinearMap.lsmul</a> (so some success), and I’d expect that that file would also contain the other direction if it existed.</p>",
        "id": 444644449,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1718352479
    },
    {
        "content": "<p>My real world problem here is that I have undergraduates in Bonn constructing random linear maps and giving them names, and people like Eric (see example above) have put in these hugely general constructions which are almost always in far more generality than you need, because you usually only want A-modules but Eric has done something more general where there's some other ring R and everything is an R-module etc etc. There are too many of these maps like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.lsmul#doc\">docs#Algebra.lsmul</a> for me to remember, and when I see student code like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/-- Scalar multiplication in the first variable as a linear map. -/</span>\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">smul₁</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">):</span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">•</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">  </span><span class=\"n\">map_add'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">map_smul'</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mul_smul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">LinearMap</span><span class=\"bp\">.</span><span class=\"n\">prodfst</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">toFun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"w\">  </span><span class=\"n\">map_add'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"n\">map_smul'</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>\n<p>my first thought is \"do we have that already?\" and my second thought is \"how do I check?\"</p>",
        "id": 444644734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718352569
    },
    {
        "content": "<p>Of course <code>exact?</code> is quick to suggest <code>0</code>, so I can't use that trick.</p>",
        "id": 444644898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718352625
    },
    {
        "content": "<p>Yeah, that’s not trivial; Loogle doesn't take the type class hierarchy into account (yet), and struggles with some pattern queries. I wish I could offer something better</p>",
        "id": 444645002,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1718352667
    },
    {
        "content": "<p>The community here offers so much stuff that I am definitely not complaining :-)</p>",
        "id": 444645168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718352726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>⇑(_ : LinearMap ..) = fun x =&gt; _ • x</p>",
        "id": 444779535,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718395536
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 444779544,
        "sender_full_name": "loogle",
        "timestamp": 1718395539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ⇑(_ : AlgHom ..) = fun x =&gt; _ • x</p>",
        "id": 444779672,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718395571
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 444779675,
        "sender_full_name": "loogle",
        "timestamp": 1718395572
    },
    {
        "content": "<p>Shouldn't this match <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.lsmul_coe#doc\">docs#Algebra.lsmul_coe</a> ?</p>",
        "id": 444779748,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718395604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  _ = fun x =&gt; _ • x</p>",
        "id": 444780586,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718395904
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 444780702,
        "sender_full_name": "loogle",
        "timestamp": 1718395925
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 444781240,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1718396112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ⇑(_ : Module.End ..) = fun x =&gt; _ • x</p>",
        "id": 444781290,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1718396136
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Algebra/Tower.html#Algebra.lsmul_coe\">Algebra.lsmul_coe</a></p>",
        "id": 444781293,
        "sender_full_name": "loogle",
        "timestamp": 1718396137
    },
    {
        "content": "<p>the LinearMap is hidden behind an abbreviation, apparently</p>",
        "id": 444781394,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1718396168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> fun x =&gt; x</p>",
        "id": 444812133,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1718411970
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> Cannot search: No constants or name fragments in search pattern.</p>",
        "id": 444812136,
        "sender_full_name": "loogle",
        "timestamp": 1718411973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20is.20live!/near/444644898\">said</a>:</p>\n<blockquote>\n<p>Of course <code>exact?</code> is quick to suggest <code>0</code>, so I can't use that trick.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, you know about <code>exact? using m</code>, right?</p>",
        "id": 444839606,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718437858
    },
    {
        "content": "<p>This will only report solutions that use the specified hypotheses.</p>",
        "id": 444839629,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718437889
    },
    {
        "content": "<p>Yes I do know that trick and it's helped in the past, but I'm not sure I know how to use it to ask if prod.fst has been linearmap-ised for modules</p>",
        "id": 444841200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718439256
    },
    {
        "content": "<p>39 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Loogle.20is.20live.21\">#general &gt; Loogle is live!</a> by <span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span>.</p>",
        "id": 444844630,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718442404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ⇑(_ : LinearMap ..) (_ : Prod _ _) = Prod.fst _</p>",
        "id": 444854943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718450479
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Prod.html#LinearMap.fst_apply\">LinearMap.fst_apply</a></p>",
        "id": 444854945,
        "sender_full_name": "loogle",
        "timestamp": 1718450481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"690858\">@Daniel Weber</span> was on the right track</p>",
        "id": 444854968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718450520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ⇑(_ : LinearMap ..) ?m = HSMul.hSMul ?a ?m</p>",
        "id": 444855035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718450558
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/LinearMap/End.html#DistribMulAction.toLinearMap_apply\">DistribMulAction.toLinearMap_apply</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.lsmul_apply\">LinearMap.lsmul_apply</a>, and <a href=\"https://loogle.lean-lang.org/?q=%E2%87%91%28_%20%3A%20LinearMap%20..%29%20%3Fm%20%3D%20HSMul.hSMul%20%3Fa%20%3Fm\">5 more</a></p>",
        "id": 444855041,
        "sender_full_name": "loogle",
        "timestamp": 1718450564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ⇑(_ : LinearMap ..) ?a = HSMul.hSMul ?a ?m</p>",
        "id": 444855071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718450603
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 444855087,
        "sender_full_name": "loogle",
        "timestamp": 1718450624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"644391\">loogle</span> <a href=\"#narrow/stream/113488-general/topic/loogling.20for.20linear.20maps/near/444854945\">said</a>:</p>\n<blockquote>\n<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Prod.html#LinearMap.fst_apply\">LinearMap.fst_apply</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"697518\">@Hannah Scholz</span> <span class=\"user-mention\" data-user-id=\"671805\">@Ludwig Monnerjahn</span> some of the auxiliary linear maps you define in your FLT PR might be already in mathlib.</p>",
        "id": 444855660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718451130
    }
]