[
    {
        "content": "<p>I am working on interfacing Lean and Oscar. You can find code at <a href=\"https://github.com/todbeibrot/Lean-Oscar\">my repo</a>. I would love to get some comments and feedback.</p>\n<p>Currently working:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>proving that a permutation is in the closure of some permutation</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">b0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">b1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">b2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">b3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">b4</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">Perm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"bp\">.</span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">b0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b4</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">perm_group_membership</span>\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>proving some equalities in presented groups/proving that a presented group is trivial</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">FreeGroup</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">FreeGroup</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)]</span>\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">FreeGroup</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">rels_list</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">]</span>\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">rels</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">toSet</span><span class=\"w\"> </span><span class=\"n\">rels_list</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">PresentedGroup</span><span class=\"w\"> </span><span class=\"n\">rels</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">maxRecDepth</span><span class=\"w\"> </span><span class=\"mi\">10000000000000000000000</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">maxHeartbeats</span><span class=\"w\"> </span><span class=\"mi\">1000000000000000000000</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">g_triv</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">kbmag</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">a_eq_b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">PresentedGroup</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">PresentedGroup</span><span class=\"bp\">.</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">kbmag</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>\n<p>and some more small stuff.</p>\n<p>The later is not well tested. I am happy that it works.<br>\nIt's my master's thesis. Text will follow within a month.<br>\n<span class=\"user-mention\" data-user-id=\"263407\">@Laurent Bartholdi</span></p>",
        "id": 440134619,
        "sender_full_name": "Cedric Holle",
        "timestamp": 1716395742
    },
    {
        "content": "<p>How does this work in proofs? Are you getting a proof certificate from Oscar and converting that into a proper Lean proof? Are there additional axioms involved that assume the correctness of (parts of) Oscar?</p>",
        "id": 440135211,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716395910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20Oscar.20Interface/near/440135211\">said</a>:</p>\n<blockquote>\n<p>How does this work in proofs? Are you getting a proof certificate from Oscar and converting that into a proper Lean proof? Are there additional axioms involved that assume the correctness of (parts of) Oscar?</p>\n</blockquote>\n<p>I am getting a proof certificate in Oscar and using it to build a proof in Lean. No additional axioms.</p>",
        "id": 440135712,
        "sender_full_name": "Cedric Holle",
        "timestamp": 1716396064
    },
    {
        "content": "<p>That's awesome! Is this limited to a certain fragment of what Oscar can do or is your proof recovery procedure complete with respect to everything that Oscar might output?</p>",
        "id": 440135955,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716396128
    },
    {
        "content": "<p>It's using Oscar's <a href=\"https://docs.oscar-system.org/stable/DeveloperDocumentation/serialization/\">serialization</a> to send data forth and back. So we are limited to data types for which it is implemented in Oscar and for which I have implemented the same in Lean.</p>",
        "id": 440136695,
        "sender_full_name": "Cedric Holle",
        "timestamp": 1716396328
    },
    {
        "content": "<p>Very nice! </p>\n<p>How does the communication Lean&lt;-&gt; Oscar  work?</p>",
        "id": 440191969,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1716415353
    },
    {
        "content": "<p>(It took me a moment to find the Oscar homepage: <a href=\"https://www.oscar-system.org/\">https://www.oscar-system.org/</a>)</p>",
        "id": 440196829,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716417536
    },
    {
        "content": "<p>Thanks Kim, I did not have the patience to search for it.</p>",
        "id": 440199632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716418698
    },
    {
        "content": "<p>The presentation of the project goal sounds awfully similar to Sage. Why did they start something else?</p>",
        "id": 440199694,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716418729
    },
    {
        "content": "<p>probably because julia is obviously the right language to be writing a CAS in</p>",
        "id": 440201403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716419387
    },
    {
        "content": "<p>It's really nice to see Lean interfacing a Julia CAS!</p>\n<p>My understanding is that Julia aims to be a modern Fortran (which still is the language for fast math routines that C calls) that CAS made by it could replace the slow Python based symbolic calculation ecosystem with much better type and abstraction support.</p>\n<p>As a maintainer of a SymPy based symbolic package, Julia was my dream language before Rust and Lean, unfortunately Rust has less support for rich operators and symbolic calculation except for egg, and Lean has its emphasis on theorem proving and it's still at a prototype stage interfacing with existing CAS systems.</p>\n<p>Julia based Oscar has one more potential advantage, to be interfaced via FFI and have performance gain, over other IO based CAS interfacing. Maybe it could be a better choice over C++ library GiNaC, thanks to its matched performance and previous work on proof generation.</p>",
        "id": 440210665,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716424199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20Oscar.20Interface/near/440191969\">said</a>:</p>\n<blockquote>\n<p>Very nice! </p>\n<p>How does the communication Lean&lt;-&gt; Oscar  work?</p>\n</blockquote>\n<p>Start a julia file as a child with a lean command/tactic. The julia file is then a simple <code>while true</code> loop waiting for a command. I use <code>Std.Tactic.Cache</code> for the definition of the child to make it possible to access the child multiple times in a file.<br>\nThe Code can be found in <a href=\"https://github.com/todbeibrot/Lean-Oscar/blob/main/Mrdi/Server.lean\">Mrdi/Server.lean</a> and <a href=\"https://github.com/todbeibrot/Lean-Oscar/blob/main/Mrdi/server.jl\">Mrdi/server.jl</a>.<br>\nDoes this answer your question? It is so general that I'm not sure what exactly to elaborate on.</p>",
        "id": 440211104,
        "sender_full_name": "Cedric Holle",
        "timestamp": 1716424465
    },
    {
        "content": "<p>this is really cool! I'm confused that Oscar gives you proof certificates! I thought especially for group theory like in your examples, Oscar itself would be just calling <a href=\"https://www.gap-system.org/\">GAP</a> under the hood? does oscar build the proofs on its own on top of the gap computation, or how does that work?</p>",
        "id": 440252847,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1716443775
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span></p>",
        "id": 440252865,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1716443790
    },
    {
        "content": "<p>Judging from the code, Lean-Oscar mainly uses Oscar (so far, mostly GAP behind it) to construct complex objects then convert them to Lean for definitions, as for theorems, Oscar seems to be helpful to generate intermediate goals, and the proof recontruction is still done in Lean, with tactics and some heuristics around the intermediate goals.</p>",
        "id": 440267314,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716451063
    },
    {
        "content": "<p>Chiming in: e.g. Julia contains Oscar which delegates to GAP which<br>\ndelegates to KBMAG (Knuth-Bendix) which quickly and cleverly produces new<br>\nrules in a rewriting system. Asking it to print a trace of the new rules<br>\nthat it produced, and how it obtained them (\"exploit the overlap of rule #i<br>\nwith rule #j\") makes it possible to replicate the operation in Lean. There<br>\nwould still be work to do to have, e.g., KBMAG only print the new rules<br>\nthat were actually used. In principle there could be an arbitrarily large<br>\nnumber of going-nowhere explorations done by KBMAG, but a very small number<br>\nof useful ones which are the only one needed in a certificate to be checked<br>\nby Lean.</p>",
        "id": 440286761,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1716457756
    },
    {
        "content": "<p>If I would have managed to let KBMAG also print which rules were used, the reconstruction in Lean would be much more simple and less compute heavy. But this isn't gonna happen in time.</p>",
        "id": 440335566,
        "sender_full_name": "Cedric Holle",
        "timestamp": 1716474484
    },
    {
        "content": "<p>We were looking for more complex examples beyond just finding a witness. Additionally, I had a lot more fun with the challenging problems. If you want to see a simpler example, take a look at </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>matrix_inverse</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">A_inv</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">matrix_inverse</span><span class=\"w\"> </span><span class=\"n\">A</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">A_inv</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">A_inv</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span>\n<span class=\"w\">  </span><span class=\"n\">fin_cases</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">  </span><span class=\"n\">all_goals</span><span class=\"w\"> </span><span class=\"n\">fin_cases</span><span class=\"w\"> </span><span class=\"n\">j</span>\n<span class=\"w\">  </span><span class=\"n\">any_goals</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">mkRat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">normalize</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">any_goals</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>\n</div></div>",
        "id": 440335718,
        "sender_full_name": "Cedric Holle",
        "timestamp": 1716474530
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"452637\">Cedric Holle</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20Oscar.20Interface/near/440211104\">said</a>:</p>\n<p>Does this answer your question? It is so general that I'm not sure what exactly to elaborate on.</p>\n</blockquote>\n<p>Mostly yes. So it sounds like a trick that could be easily generalized to other CAS systems, right?</p>\n<p>I am thinking mostly on having a version of <code>polyrith</code> that relies on a local install of a CAS instead of an online service.</p>",
        "id": 440390305,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1716494708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20Oscar.20Interface/near/440390305\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"452637\">Cedric Holle</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20Oscar.20Interface/near/440211104\">said</a>:</p>\n<p>Does this answer your question? It is so general that I'm not sure what exactly to elaborate on.</p>\n</blockquote>\n<p>Mostly yes. So it sounds like a trick that could be easily generalized to other CAS systems, right?</p>\n<p>I am thinking mostly on having a version of <code>polyrith</code> that relies on a local install of a CAS instead of an online service.</p>\n</blockquote>\n<p>Should work.<br>\nI like the way it is handled in polyrith. It skips all the setup problems for the user.</p>",
        "id": 440393761,
        "sender_full_name": "Cedric Holle",
        "timestamp": 1716496146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20Oscar.20Interface/near/440390305\">said</a>:</p>\n<blockquote>\n<p>I am thinking mostly on having a version of <code>polyrith</code> that relies on a local install of a CAS instead of an online service.</p>\n</blockquote>\n<p>Yes, IMHO, a mature practice of interfacing CAS should probably be able to (modulos the cache invalidation stuff):</p>\n<ol>\n<li>use a cached result if available</li>\n<li>use bundled FFI if available</li>\n<li>use the local CAS if available</li>\n<li>if steps above fail, and the online option is off or not set, fail the tactic with hint for users to opt-in to rely on an online service, or a guide to set up a local CAS</li>\n<li>if the online option is on, use the online service, and cache the result.</li>\n</ol>\n<p>Relying on a Python installation  and a package <code>requests</code> that might not be installed properly and an online service that might not be accessible or stable silently is not really how it should be in the long run.</p>\n<p>But this is a little off-topic, and was discussed <a href=\"#narrow/stream/113488-general/topic/What.20should.20Sage.20look.20like.20in.20Lean.3F\">here</a>, and people clearly have different preferences on this.</p>",
        "id": 440468031,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716540979
    }
]