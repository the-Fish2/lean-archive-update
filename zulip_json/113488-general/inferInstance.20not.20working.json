[
    {
        "content": "<p>Can someone explain why this is happening?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">lmao</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">dvd_zero</span><span class=\"o\">,</span> <span class=\"n\">forall_const</span><span class=\"o\">]</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">dvd_sub_comm.mp</span> <span class=\"n\">h</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">Int.dvd_add</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n    <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lmao</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type class instance expected</span>\n<span class=\"cm\">  Equivalence (r n)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 434590625,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1713707712
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equivalence#doc\">docs#Equivalence</a> is not a typeclass, its just a structure, not registered with the typeclass system, which is what <code>inferInstance</code> is doing. What are you trying to accomplish more generally?</p>",
        "id": 434596585,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1713713076
    }
]