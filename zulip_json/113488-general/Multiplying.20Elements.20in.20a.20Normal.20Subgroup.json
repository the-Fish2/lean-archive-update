[
    {
        "content": "<p>I am trying to use the normality of P to show that k*g^(-1)*k^(-1) is in P so the full product is an element of P. I am unsure of what lemmas to apply here. Would it be a good idea to have a subgoal to show the conjugate of g^(-1) is an element of P first?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Normal</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Normal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">g</span><span class=\"bp\">⁻¹*</span><span class=\"n\">k</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422056303,
        "sender_full_name": "Roshan Kohli",
        "timestamp": 1708219343
    },
    {
        "content": "<p>How is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.Normal#doc\">docs#Subgroup.Normal</a> defined?</p>",
        "id": 422056928,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708220280
    },
    {
        "content": "<p>It's specifically that for any <code>h ∈ H</code>, where <code>H</code> is a normal subgroup, <code>∀ g : G, MulAut.conj g • h ∈ H</code></p>",
        "id": 422056993,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708220338
    },
    {
        "content": "<p>Right so I would use associativity to write it as g times the rest, use <code>P.mul_mum</code> then <code>Normal.conj_mem</code></p>",
        "id": 422056998,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708220349
    },
    {
        "content": "<p>I'll give this a go, thank you</p>",
        "id": 422057010,
        "sender_full_name": "Roshan Kohli",
        "timestamp": 1708220380
    },
    {
        "content": "<p>I believe you can also go the other route of showing that since <code>k ∈ Q</code>, <code>g * k * g⁻¹ ∈ Q</code> and <code>k⁻¹ ∈ Q</code></p>",
        "id": 422057088,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708220469
    },
    {
        "content": "<p>Which indicates that you can drop one of <code>hP</code> or <code>hQ</code> :)</p>",
        "id": 422057104,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708220512
    },
    {
        "content": "<p>Also, things will be smoother if you take hypotheses of the form \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is a member of <code>H</code>\" instead of \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is of type <code>↥H</code>\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P.Normal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">Q.Normal</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422057143,
        "sender_full_name": "Richard Copley",
        "timestamp": 1708220526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380890\">Emilie (Shad Amethyst)</span> <a href=\"#narrow/stream/113488-general/topic/Multiplying.20Elements.20in.20a.20Normal.20Subgroup/near/422057088\">said</a>:</p>\n<blockquote>\n<p>I believe you can also go the other route of showing that since <code>k ∈ Q</code>, <code>g * k * g⁻¹ ∈ Q</code> and <code>k⁻¹ ∈ Q</code></p>\n</blockquote>\n<p>Yes I will need that too for the larger proof I am in the process of completing thank you</p>",
        "id": 422057147,
        "sender_full_name": "Roshan Kohli",
        "timestamp": 1708220531
    },
    {
        "content": "<p>Thanks I have managed to prove this now.</p>",
        "id": 422057538,
        "sender_full_name": "Roshan Kohli",
        "timestamp": 1708221121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671777\">Roshan Kohli</span> has marked this topic as resolved.</p>",
        "id": 422057983,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708221469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671777\">Roshan Kohli</span> has marked this topic as unresolved.</p>",
        "id": 422060015,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708224069
    },
    {
        "content": "<p>As per my previous post I was attempting to adapt the proof I had to use in my larger proof. However since in the previous post I assumed g was in P it made it a lot easier. I do not necessarily have the same hypothesis here. I have broken down my code to include only the important points necessary to show the product is in P. Can someone help me with converting the type of g to be what it needs to be. Thanks</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">q.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bigtheorem</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Sylow</span> <span class=\"n\">p</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Sylow</span> <span class=\"n\">q</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsCyclic</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"c1\">-- obtain the generator of P and say P is normal</span>\n  <span class=\"k\">have</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">IsCyclic</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">gP</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IsCyclic.exists_generator</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">p8</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Normal</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- obtain the generator of Q and say Q is normal</span>\n  <span class=\"k\">have</span> <span class=\"n\">q3</span> <span class=\"o\">:</span> <span class=\"n\">IsCyclic</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">kQ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IsCyclic.exists_generator</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">q8</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Normal</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- what I am having trouble proving given my previous post</span>\n  <span class=\"k\">have</span> <span class=\"n\">in_P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">g</span><span class=\"bp\">⁻¹*</span><span class=\"n\">k</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422060019,
        "sender_full_name": "Roshan Kohli",
        "timestamp": 1708224079
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">in_P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">g</span><span class=\"bp\">⁻¹*</span><span class=\"n\">k</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">P.mul_mem</span> <span class=\"n\">g.prop</span>\n    <span class=\"n\">apply</span> <span class=\"n\">p8.conj_mem</span>\n    <span class=\"n\">apply</span> <span class=\"n\">P.inv_mem</span> <span class=\"n\">g.prop</span>\n</code></pre></div>",
        "id": 422060931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708225283
    },
    {
        "content": "<p>you could easily golf the last three lines if you want.</p>",
        "id": 422061013,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708225368
    },
    {
        "content": "<p>I still get this error in my actual full proof<br>\n<a href=\"/user_uploads/3121/djdxinSqXXIL4SS0raIodi07/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/djdxinSqXXIL4SS0raIodi07/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/djdxinSqXXIL4SS0raIodi07/image.png\"></a></div>",
        "id": 422061213,
        "sender_full_name": "Roshan Kohli",
        "timestamp": 1708225619
    },
    {
        "content": "<p>I don't know how to switch to ↑P</p>",
        "id": 422061237,
        "sender_full_name": "Roshan Kohli",
        "timestamp": 1708225655
    },
    {
        "content": "<p>it looks like you have two <code>P</code>s`</p>",
        "id": 422061243,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708225659
    },
    {
        "content": "<p>the tombstone tells you that a new <code>P</code> was introduced, while <code>g : P</code> was a term of the original <code>P</code>.</p>",
        "id": 422061294,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708225697
    },
    {
        "content": "<p>ah i see, I'll see what I can do to resolve this issue</p>",
        "id": 422061586,
        "sender_full_name": "Roshan Kohli",
        "timestamp": 1708226159
    }
]