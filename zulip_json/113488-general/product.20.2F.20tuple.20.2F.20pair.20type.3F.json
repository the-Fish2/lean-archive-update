[
    {
        "content": "<p>Hello! I would like to write something like <code>| tuple (fields : List (Product (Option Key) Value))</code>, but have been unable to find what the equivalent of a <code>Tuple</code> is in Lean...</p>",
        "id": 445755630,
        "sender_full_name": "JJ",
        "timestamp": 1718856726
    },
    {
        "content": "<p>I know I could do this by defining a <code>structure Field where (key: Option Key) (value: Value)</code> and pointing the <code>List</code> to that, but it feels unnecessary - I think I'm definitely missing some sort of inline product type. But, I've been searching through documentation and code and have been unable to find one. Any pointers would be appreciated!</p>",
        "id": 445756099,
        "sender_full_name": "JJ",
        "timestamp": 1718856876
    },
    {
        "content": "<p>(also - would this be the correct topic for questions &amp; discussion of lean as a general purpose programming language?)</p>",
        "id": 445756168,
        "sender_full_name": "JJ",
        "timestamp": 1718856911
    },
    {
        "content": "<p><code>Prod</code></p>",
        "id": 445756177,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718856919
    },
    {
        "content": "<p>We just use iterated pairs for tuples (with a bit of syntax help).</p>",
        "id": 445756210,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718856942
    },
    {
        "content": "<p>Syntax help? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 445756286,
        "sender_full_name": "JJ",
        "timestamp": 1718856979
    },
    {
        "content": "<p>i.e. you can just write <code>(a, b, c)</code> and Lean understands it as <code>(a, (b, c))</code></p>",
        "id": 445756317,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718857001
    },
    {
        "content": "<p>Ah nice! is there any sugar for type declarations or would that just be <code>(Prod A (Prod B C))</code>?</p>",
        "id": 445756409,
        "sender_full_name": "JJ",
        "timestamp": 1718857079
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">C</span>\n</code></pre></div>",
        "id": 445756475,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718857106
    },
    {
        "content": "<p>I suggest reading #FPIL</p>",
        "id": 445756541,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718857172
    },
    {
        "content": "<p>Oops: <a href=\"https://lean-lang.org/functional_programming_in_lean/getting-to-know/polymorphism.html?highlight=Prod#prod\">https://lean-lang.org/functional_programming_in_lean/getting-to-know/polymorphism.html?highlight=Prod#prod</a></p>",
        "id": 445756543,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718857176
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/functional_programming_in_lean/\">#fpil</a></p>",
        "id": 445756544,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718857178
    },
    {
        "content": "<p>Oh, I don't know how I missed that... looks like I missed everything after Options, whoops</p>",
        "id": 445757074,
        "sender_full_name": "JJ",
        "timestamp": 1718857539
    },
    {
        "content": "<p>Ty <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 445757085,
        "sender_full_name": "JJ",
        "timestamp": 1718857553
    },
    {
        "content": "<p>Follow-up question: is it possible to define names <code>((a : A) × (b : B) × (c : C))</code> in product types or does that require a named <code>structure</code>?</p>",
        "id": 445758292,
        "sender_full_name": "JJ",
        "timestamp": 1718858343
    },
    {
        "content": "<p>No</p>",
        "id": 445758718,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718858698
    }
]