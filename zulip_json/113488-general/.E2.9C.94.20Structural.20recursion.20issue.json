[
    {
        "content": "<p>I am trying to sort out why termination via structural recursion fails to be proven in cases where I invoke <code>List.map f</code> instead of creating a custom function of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mapAlt</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Thing</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">Thing</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">mapAlt</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>which embeds that <code>f</code> function directly in its implementation. If I call that in place of <code>List.map f</code> in some definition, the termination is proven via structural recursion. Is there a workaround that is less ugly than this <code>mapAlt</code> thing?</p>",
        "id": 412774547,
        "sender_full_name": "Michael Swan",
        "timestamp": 1705200876
    },
    {
        "content": "<p>Could you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of your problem? I don't understand what you are asking.</p>",
        "id": 412774797,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705201128
    },
    {
        "content": "<p>I'm guessing this is about how recursive definitions over nested inductives don't really work</p>",
        "id": 412775182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705201455
    },
    {
        "content": "<p>The following code is what I was working with: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">num</span>  <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>                <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>  <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>          <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span>  <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>       <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Bool</span>\n<span class=\"kn\">open</span> <span class=\"n\">expr</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">expr_subst</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">subst_var</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expr</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">subst_var</span> <span class=\"k\">then</span>\n        <span class=\"n\">subst</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">var</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">num</span> <span class=\"n\">n</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">num</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">add</span>  <span class=\"o\">(</span><span class=\"n\">expr_subst</span> <span class=\"n\">subst_var</span> <span class=\"n\">subst</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr_subst</span> <span class=\"n\">subst_var</span> <span class=\"n\">subst</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">name</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">expr_subst_pred_args</span> <span class=\"n\">subst_var</span> <span class=\"n\">subst</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">expr_subst_pred_args</span> <span class=\"o\">(</span><span class=\"n\">subst_var</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arg</span> <span class=\"o\">::</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">expr_subst</span> <span class=\"n\">subst_var</span> <span class=\"n\">subst</span> <span class=\"n\">arg</span> <span class=\"o\">::</span> <span class=\"n\">expr_subst_pred_args</span> <span class=\"n\">subst_var</span> <span class=\"n\">subst</span> <span class=\"n\">args</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>this works but if I change that <code>expr_subst</code> to the following it fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">expr_subst</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">subst_var</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expr</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"c1\">-- Same ...</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">name</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">expr_subst</span> <span class=\"n\">subst_var</span> <span class=\"n\">subst</span><span class=\"o\">)</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 412778498,
        "sender_full_name": "Michael Swan",
        "timestamp": 1705204746
    },
    {
        "content": "<p>Like I have to write out this explicit <code>expr_subst_pred_args</code> function or it fails to prove termination using structural recursion even though it is equivalent to <code>List.map (expr_subst subst_var subst)</code></p>",
        "id": 412778680,
        "sender_full_name": "Michael Swan",
        "timestamp": 1705204901
    },
    {
        "content": "<p>I don’t know what the consensus is, but if I want to always (or almost always) recurse through <a href=\"http://List.map\">List.map</a>, then I had been using a ‘{N} -&gt; Fin N -&gt; a’ instead of ‘List a’. Although it’s also awkward since you have to explicitly call it (instead of using Function.comp for example). Also I don’t know what I’d do if I wanted both forms of recursion.</p>",
        "id": 412790050,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1705216359
    },
    {
        "content": "<p>You can use <code>List.attach</code> to help Lean understand that this is well-founded:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">num</span>  <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>                <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>  <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>          <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span>  <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>       <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Bool</span>\n<span class=\"kn\">open</span> <span class=\"n\">expr</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">expr_subst</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">subst_var</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expr</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">subst_var</span> <span class=\"k\">then</span>\n        <span class=\"n\">subst</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">var</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">num</span> <span class=\"n\">n</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">num</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">add</span>  <span class=\"o\">(</span><span class=\"n\">expr_subst</span> <span class=\"n\">subst_var</span> <span class=\"n\">subst</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr_subst</span> <span class=\"n\">subst_var</span> <span class=\"n\">subst</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">name</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">expr_subst</span> <span class=\"n\">subst_var</span> <span class=\"n\">subst</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">args.attach</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 412793214,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1705219648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432410\">@Arthur Adjedj</span> oh wow, that is very interesting. So within the context of that closure is also a proof of <code>x ∈ args</code> which allows that scope to know that each application of the closure invocation is decreasing the size of things being applied to <code>expr_subst</code>. I think that explanation type-checks though it has been a mystery to me how smart the termination proof automation is.</p>",
        "id": 412844144,
        "sender_full_name": "Michael Swan",
        "timestamp": 1705264054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367128\">Michael Swan</span> has marked this topic as resolved.</p>",
        "id": 412844212,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705264102
    }
]