[
    {
        "content": "<p>I wanted to learn a bit more about how to use <code>aesop</code>, so I tried getting it to solve my <a href=\"https://github.com/dwrensha/lean4-maze\">maze game</a> (previously discussed <a href=\"#narrow/stream/270676-lean4/topic/maze.20game/near/240774662\">here</a>).</p>\n<p>After adding a few attributes and configuration options ... it works! See the main file on Github <a href=\"https://github.com/dwrensha/lean4-maze/blob/aesop/Maze.lean\">here</a> or try playing with it in your browser <a href=\"https://live.lean-lang.org/#url=https%3A%2F%2Fraw.githubusercontent.com%2Fdwrensha%2Flean4-maze%2Fc4f0555afc861d0d3e4afcc58bf5cfa1bfdb8be3%2FMaze.lean\">here</a>.</p>\n<p>We can can even read off a solution from the <code>aesop?</code> output.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">maze2</span> <span class=\"o\">:=</span> <span class=\"bp\">┌────────┐</span>\n             <span class=\"bp\">│▓▓▓▓▓▓▓▓│</span>\n             <span class=\"bp\">│▓░▓░▓░▓▓│</span>\n             <span class=\"bp\">│▓░▓░░░▓▓│</span>\n             <span class=\"bp\">│▓░░▓░▓▓▓│</span>\n             <span class=\"bp\">│▓▓░▓░▓░░│</span>\n             <span class=\"bp\">│▓░░░░▓░▓│</span>\n             <span class=\"bp\">│▓░▓▓▓▓░▓│</span>\n             <span class=\"bp\">│▓░░░@░░▓│</span>\n             <span class=\"bp\">│▓▓▓▓▓▓▓▓│</span>\n             <span class=\"bp\">└────────┘</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">2000</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">can_escape</span> <span class=\"n\">maze2</span> <span class=\"o\">:=</span>\n <span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">norm</span> <span class=\"n\">maze2</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">maxRuleApplications</span> <span class=\"o\">:=</span> <span class=\"mi\">10000</span><span class=\"o\">})</span>\n           <span class=\"o\">(</span><span class=\"n\">simp_options</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Try this:</span>\n<span class=\"cm\">  simp_all (config := ({ decide := true } : Aesop.SimpConfig✝).toConfigCtx✝) only [maze2, game_state_from_cells,</span>\n<span class=\"cm\">      game_state_from_cells_aux, update_state_with_row, update_state_with_row_aux, Nat.zero_add]</span>\n<span class=\"cm\">    apply step_east</span>\n<span class=\"cm\">    · simp_all (config := ({ decide := true } : Aesop.SimpConfig✝).toConfigCtx✝) only</span>\n<span class=\"cm\">    · simp_all (config := ({ decide := true } : Aesop.SimpConfig✝).toConfigCtx✝) only</span>\n<span class=\"cm\">    · apply step_east</span>\n<span class=\"cm\">      · simp_all (config := ({ decide := true } : Aesop.SimpConfig✝).toConfigCtx✝) only</span>\n<span class=\"cm\">      · simp_all (config := ({ decide := true } : Aesop.SimpConfig✝).toConfigCtx✝) only</span>\n<span class=\"cm\">      · apply step_north</span>\n<span class=\"cm\">        · simp_all (config := ({ decide := true } : Aesop.SimpConfig✝).toConfigCtx✝) only</span>\n<span class=\"cm\">        · apply step_north</span>\n<span class=\"cm\">          · simp_all (config := ({ decide := true } : Aesop.SimpConfig✝).toConfigCtx✝) only</span>\n<span class=\"cm\">          · apply step_north</span>\n<span class=\"cm\">            · simp_all (config := ({ decide := true } : Aesop.SimpConfig✝).toConfigCtx✝) only</span>\n<span class=\"cm\">            · apply step_east</span>\n<span class=\"cm\">              · simp_all (config := ({ decide := true } : Aesop.SimpConfig✝).toConfigCtx✝) only</span>\n<span class=\"cm\">              · simp_all (config := ({ decide := true } : Aesop.SimpConfig✝).toConfigCtx✝) only</span>\n<span class=\"cm\">              · apply escape_east</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 411844810,
        "sender_full_name": "David Renshaw",
        "timestamp": 1704761964
    },
    {
        "content": "<p>It is, however, very inefficient. My understanding is that it does no deduplication of goal nodes (i.e. no detecting transpositions), so the search tree gets big quite quickly.</p>",
        "id": 411844981,
        "sender_full_name": "David Renshaw",
        "timestamp": 1704762054
    },
    {
        "content": "<p>(And the <code>GameState</code> representation is not very efficient to begin with.)</p>",
        "id": 411845084,
        "sender_full_name": "David Renshaw",
        "timestamp": 1704762113
    },
    {
        "content": "<p>There is a test file doing best first search of mazes in (Mathlib's) <code>test/search/BestFirst.lean</code>, and a somewhat idiosyncratic implementation of A* search in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3973\">#3973</a>.</p>",
        "id": 411845639,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704762430
    }
]