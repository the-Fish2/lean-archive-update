[
    {
        "content": "<p>How can I make Lean coerce elements of <code>range n</code> to elements of type <code>Fin n</code>? It works for a specific <code>n</code> like <code>2</code> but not for a general <code>n</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"c1\">-- no error</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 435064736,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1713904731
    },
    {
        "content": "<p>Try adding <code>[NeZero n]</code>.</p>",
        "id": 435065002,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713904861
    },
    {
        "content": "<p>It worked! But why? If <code>n</code> is zero, the set is empty, and the type is non-inhabited. Why is that an issue?</p>",
        "id": 435065181,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1713904956
    },
    {
        "content": "<p>With <code>NeZero</code>, it goes via a semiring instance, I believe, which uses the fact that the types are non-empty.  I am not sure whether an instance is expected or not otherwise.</p>",
        "id": 435065318,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713905038
    },
    {
        "content": "<p>Lean has so many peculiarities! Thank you</p>",
        "id": 435065708,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1713905201
    },
    {
        "content": "<p>Btw, you can manufacture the two terms as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">i.1</span><span class=\"o\">,</span> <span class=\"n\">mem_range.mpr</span> <span class=\"n\">i.isLt</span><span class=\"o\">⟩</span>\n<span class=\"k\">#check</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">j.1</span><span class=\"o\">,</span> <span class=\"n\">mem_range.mp</span> <span class=\"o\">(</span><span class=\"n\">coe_mem</span> <span class=\"n\">j</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>(this does not need the <code>NeZero</code> assumption.)</p>",
        "id": 435066214,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713905451
    },
    {
        "content": "<p>Or you can compare projections to natural numbers</p>",
        "id": 435102060,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713929162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> has marked this topic as resolved.</p>",
        "id": 435273374,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713993129
    }
]