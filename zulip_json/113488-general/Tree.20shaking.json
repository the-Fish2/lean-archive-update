[
    {
        "content": "<p>Inspired by <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>'s <a href=\"#narrow/stream/113488-general/topic/Minimizer.20script\">Minimizer script thread</a>, I was wondering again, how hard is it now to write a tree shaker for Lean 4 files?</p>\n<p>I'm not yet sure what interacting with the treeshaker should look like. But to get a conversation going: I would like to autogenerate a new project <code>ZeroToRealInSixThousandLines</code> starting from Std and Mathlib, that contains everything needed for the construction of the real numbers, and nothing else. And the resulting project shouldn't depend on anything (except core, of course).</p>",
        "id": 396132359,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697043588
    },
    {
        "content": "<p>It sounds like <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> has essentially already written it? From what I read in the linked thread if you made a file with only <code>#check Real</code> Anne's minimizer would eventually make such a file? Though perhaps it could get stuck at present, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> when your tool replaces an import by the file contents does it put everyhing in a section at least?</p>",
        "id": 396143331,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697048327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Tree.20shaking/near/396143331\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> when your tool replaces an import by the file contents does it put everyhing in a section at least?</p>\n</blockquote>\n<p>It does!</p>",
        "id": 396143381,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1697048354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Tree.20shaking/near/396143331\">said</a>:</p>\n<blockquote>\n<p>It sounds like <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> has essentially already written it? From what I read in the linked thread if you made a file with only <code>#check Real</code> Anne's minimizer would eventually make such a file?</p>\n</blockquote>\n<p>That's the ideal case, and if you're lucky it can get quite close. But you probably want to disable some of the more invasive passes, such as sorrying everything it can, though :)</p>",
        "id": 396143539,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1697048426
    },
    {
        "content": "<p>Huh, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> Will your tool expand (aka inline) imports?</p>",
        "id": 396147691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697050191
    },
    {
        "content": "<p>Aah, I see now that is indeed one of the features</p>",
        "id": 396147769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697050212
    },
    {
        "content": "<p>Yes! It probably goes wrong with files outside of the current project but that should be fixable :)</p>",
        "id": 396147814,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1697050235
    },
    {
        "content": "<p>But I guess tree-shaking can be done deterministically, and much faster than using the minimizer script.</p>",
        "id": 396147817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697050236
    },
    {
        "content": "<p>So I think both tools are valuable, and probably deserve separate implementations</p>",
        "id": 396147868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697050260
    },
    {
        "content": "<p>I just saw <a href=\"https://github.com/leanprover-community/mathlib4/pull/9322\">#9322</a> that reduce imports in one file. Is there a reason against doing this to every file in mathlib via some automated script?</p>",
        "id": 410367913,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703811729
    },
    {
        "content": "<p>That would require that the code to minimise imports is fully reliable, which I don't think it is yet</p>",
        "id": 410404002,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703837857
    },
    {
        "content": "<p>In particular, I think that the core code around minimise imports is the same as the one for <code>find_home</code> and certainly <code>find_home</code> is unaware of where notation is defined.</p>",
        "id": 410404230,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1703837983
    },
    {
        "content": "<p>The standard caveat here is that removing transitively-implied imports can be harmful; it's only import removals that genuinely reduce the size of the closure that are uncontroversially a good idea</p>",
        "id": 410406312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703839602
    },
    {
        "content": "<p>This reminds me also of an experiment (<a href=\"https://github.com/leanprover-community/mathlib4/pull/6763\">#6763</a>) where I sorted the imports (no removal, simply sorting what was present):</p>\n<ul>\n<li>build times were affected;</li>\n<li>one file stopped compiling.</li>\n</ul>",
        "id": 410413127,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1703843910
    },
    {
        "content": "<p>What is the standard argument against removing redundant imports?</p>",
        "id": 410449412,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1703867119
    },
    {
        "content": "<p>I disagree with it, but the usual argument is that they carry semantic information about the relation between the importing file and the imported file</p>",
        "id": 410449831,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703867399
    },
    {
        "content": "<p>If B imports C and A imports only B explicitly, but uses code from both B and C, then removing the import from B to C is a bit harder. Not sure that's \"standard\", though</p>",
        "id": 410449905,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703867423
    },
    {
        "content": "<p>One positive outcome of removing transitive imports is that it makes you realize just how bonkers our dependency structure is</p>",
        "id": 410452304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703868932
    },
    {
        "content": "<p>Yep. Until last week, you could talk about finite sums in vector spaces just by importing the definition of the indicator function of a set.</p>",
        "id": 410452543,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703869112
    },
    {
        "content": "<p>It would be nice to have some tools to help keep things in check; the graphs we had when porting were useful in that regard. Perhaps we need to produce something similar as part of the doc build</p>",
        "id": 410458441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703871704
    },
    {
        "content": "<p>But the graphs will be huge</p>",
        "id": 410460332,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703872478
    },
    {
        "content": "<p>At the last stages of the port, the graphs were manageable (then small) because most of the library was already ported.</p>",
        "id": 410460431,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703872521
    },
    {
        "content": "<p>Probably, we should add more <code>assert_not_exists</code>s</p>",
        "id": 410460479,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703872544
    },
    {
        "content": "<p>I think the trick is to come up with useful heuristics for truncating graphs</p>",
        "id": 410462101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703873342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Tree.20shaking/near/410460479\">said</a>:</p>\n<blockquote>\n<p>Probably, we should add more <code>assert_not_exists</code>s</p>\n</blockquote>\n<p>I have plans regarding the algebraic order hierarchy (some imports are still abberrations) but I probably won't have time to implement them before this summer.</p>",
        "id": 410470226,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703878242
    },
    {
        "content": "<p>I wrote a tree shaker for olean files (so no recompilation is necessary). It's pretty fast (8 seconds to shake <code>Mathlib</code> and all dependencies), but it is subject to the usual caveats about ignoring compile-time dependencies that don't make it to the olean files. Here are the results:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Init.WFTactics</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Init.SizeOf</span><span class=\"o\">,</span> <span class=\"n\">Init.MetaTypes</span><span class=\"o\">,</span> <span class=\"n\">Init.WF</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Init.Prelude</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Init.SizeOf</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Init.Data.Nat.Div</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Init.MetaTypes</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Init.Meta</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Init.WF</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Init.Data.Nat.Div</span><span class=\"o\">]</span>\n<span class=\"n\">Init.Data.Format.Macro</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Init.Data.ToString.Macro</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Init.Meta</span><span class=\"o\">]</span>\n<span class=\"n\">Init.Hints</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Init.NotationExtra</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Init.Prelude</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Init.NotationExtra</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Data.Lsp.Ipc</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.Instances</span><span class=\"o\">,</span> <span class=\"n\">Lean.Parser.Module</span><span class=\"o\">]</span>\n<span class=\"n\">Lean.Compiler.Options</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Util.Trace</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Util.Profile</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Lean.Util.Trace</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Compiler.LCNF.Main</span><span class=\"o\">]</span>\n<span class=\"n\">Lean.Compiler.Main</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Compiler.LCNF</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Compiler.LCNF.Main</span><span class=\"o\">]</span>\n<span class=\"n\">Std.Lean.Format</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Std.Tactic.OpenPrivate</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Std.Tactic.OpenPrivate</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Util.Imports</span><span class=\"o\">]</span>\n<span class=\"n\">Std.Control.Lemmas</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Std.Tactic.Ext</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Std.Tactic.Ext</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Prod.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Data.Sigma.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Combinatorics.Quiver.SingleObj</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Init.Data.Int.Basic</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Mathport.Rename</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Init.Data.Nat.Notation</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Init.ZeroOne</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Mathlib.Init.ZeroOne</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Group.Defs</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Data.Set.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Init.Data.Int.Bitwise</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Data.Num.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Init.Data.Int.CompLemmas</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Tactic.Attr.Register</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Meta.Tactic.Simp</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Meta.Tactic.Simp.SimpTheorems</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Data.Rat.Init</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Mathport.Rename</span><span class=\"o\">,</span> <span class=\"n\">Std.Data.Rat.Basic</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Std.Data.Rat.Basic</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Field.Defs</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Data.Rat.Defs</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Data.Rat.Encodable</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Tactic.Attr.Core</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Tactic.Attr.Register</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Lean.Elab.Term</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Elab</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Elab.SyntheticMVars</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Tactic.Contrapose</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Tactic.PushNeg</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Logic.Basic</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Mathlib.Tactic.PushNeg</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Logic.Equiv.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.GroupWithZero.Units.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Lemmas</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Tactic.Existsi</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Tactic.Basic</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Tactic.HaveI</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Std.Tactic.HaveI</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Tactic.SetLike</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Aesop</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Aesop.Frontend.Extension</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Control.Monad.Basic</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Init.Control.Lawful</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Tactic.Common</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Mathlib.Init.Control.Lawful</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Control.Monad.Cont</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Tactic.Linarith.Lemmas</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.GroupPower.Order</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Mathlib.Algebra.GroupPower.Order</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Nat.Factorization.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Data.Real.ENNReal</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.ContinuedFractions.Computation.Approximations</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Combinatorics.Additive.PluenneckeRuzsa</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Computability.Ackermann</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Data.Polynomial.Degree.CardPowDegree</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.RingTheory.Valuation.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.NumberTheory.PellMatiyasevic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.NumberTheory.PythagoreanTriples</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.NumberTheory.LucasLehmer</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.NumberTheory.Multiplicity</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Tactic.NoncommRing</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Tactic.Abel</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.GroupPower.Lemmas</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Mathlib.Tactic.Abel</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Algebra.Spectrum</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.Lie.SkewAdjoint</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.MStructure</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Init.Meta.WellFoundedTactics</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Init.Data.Nat.Lemmas</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Std.Data.Nat.Lemmas</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Mathlib.Init.Data.Nat.Lemmas</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.Floor</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.NumberTheory.Multiplicity</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Init.IteSimp</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Init.Data.Bool.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Init.Data.Bool.Lemmas</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Mathlib.Init.Data.Bool.Lemmas</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Analysis.BoxIntegral.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Topology.Category.Profinite.Nobeling</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Tactic.Continuity</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Tactic.Continuity.Init</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Topology.UniformSpace.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Topology.Support</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Topology.LocalExtr</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Topology.Algebra.Semigroup</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Algebra.GroupPower.Identities</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Tactic.Ring</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Tactic.Ring.Basic</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.RingTheory.QuotientNoetherian</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.RingTheory.QuotientNilpotent</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.RingTheory.Ideal.QuotientOperations</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Tactic.Measurability</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Tactic.Measurability.Init</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.LinearAlgebra.AffineSpace.Basic</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.AddTorsor</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Mathlib.Algebra.AddTorsor</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.LinearAlgebra.AffineSpace.AffineMap</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Algebra.Order.Field.Pi</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Fintype.Lattice</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Fintype.Card</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Data.Finset.Lattice</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Algebra.Order.Sub.Prod</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.Sub.Basic</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.Sub.Defs</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.AlgebraicTopology.DoldKan.Notations</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.AlgebraicTopology.AlternatingFaceMapComplex</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Mathlib.AlgebraicTopology.AlternatingFaceMapComplex</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.AlgebraicTopology.DoldKan.Homotopies</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Analysis.SpecificLimits.IsROrC</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Analysis.Complex.ReImTopology</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Data.IsROrC.Basic</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.CategoryTheory.Preadditive.Yoneda.Projective</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Category.ModuleCat.EpiMono</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Mathlib.Algebra.Category.ModuleCat.EpiMono</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.CategoryTheory.Abelian.Projective</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Data.Array.Basic</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Std.Tactic.HaveI</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Data.List.Basic</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Data.Finset.Pointwise.Interval</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Finset.Interval</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Data.Fintype.Small</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Logic.Small.Basic</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Logic.Small.Defs</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Init.Data.Nat.GCD</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Init.Data.Nat.Lemmas</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Init.Meta.WellFoundedTactics</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Std.Data.Nat.Lemmas</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Probability.Notation</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Probability.ProbabilityMassFunction.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.MeasureTheory.Decomposition.Lebesgue</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Probability.Martingale.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Probability.ConditionalExpectation</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Probability.Kernel.CondDistrib</span><span class=\"o\">]</span>\n  <span class=\"n\">fix</span> <span class=\"n\">Mathlib.MeasureTheory.Decomposition.Lebesgue</span><span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Probability.Distributions.Gaussian</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Probability.ConditionalExpectation</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Probability.Notation</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib.Tactic.ReduceModChar.Ext</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Meta.Tactic.Simp</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Meta.Tactic.Simp.SimpTheorems</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 410480728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703885747
    },
    {
        "content": "<p>That doesn't seem like a lot</p>",
        "id": 410481389,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703886334
    },
    {
        "content": "<p>It is supposed to be an empty list, so I suppose this isn't so bad</p>",
        "id": 410481489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703886397
    },
    {
        "content": "<p>This is the most basic kind of unnecessary import, we can do much better with file splitting</p>",
        "id": 410481516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703886423
    },
    {
        "content": "<p>I'm thinking now about how we can have a nolints.json file and add this as a linter script to mathlib CI</p>",
        "id": 410481552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703886452
    },
    {
        "content": "<p>Also, this reminds me that we have a bunch of files in <code>Mathlib/Init/</code> that I don't think are actually special, so perhaps should be moved elsewhere</p>",
        "id": 410481927,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703886756
    },
    {
        "content": "<p>By the way, the way to read this data:</p>\n<ul>\n<li><code>remove X</code> means that the import is unnecessary and should be removed</li>\n<li><code>add X</code> means that removing something else caused a transitive import to go missing so it has to be added back in</li>\n<li><code>fix X: Y</code> means that <code>Y</code> transitively depends on <code>X</code> through this file, so you have to add it back in in <code>Y</code></li>\n</ul>",
        "id": 410482119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703886917
    },
    {
        "content": "<p>I've added the tree shaking tool to mathlib in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9346\">#9346</a>, and updated mathlib in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9347\">#9347</a></p>",
        "id": 410510854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703910704
    },
    {
        "content": "<p>I ended up with the following <code>noshake.json</code> file:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span><span class=\"nt\">\"ignoreImport\"</span><span class=\"p\">:</span>\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Init\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s2\">\"Lean\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s2\">\"Mathlib.Mathport.Rename\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s2\">\"Mathlib.Init.Data.Nat.Notation\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s2\">\"Mathlib.Data.Rat.Init\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s2\">\"Mathlib.Probability.Notation\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s2\">\"Mathlib.AlgebraicTopology.DoldKan.Notations\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s2\">\"Mathlib.Tactic.Ring\"</span><span class=\"p\">],</span>\n<span class=\"w\"> </span><span class=\"nt\">\"ignore\"</span><span class=\"p\">:</span>\n<span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nt\">\"Mathlib.Tactic.SetLike\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Aesop\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.Tactic.NoncommRing\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Mathlib.Tactic.Abel\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.Tactic.Measurability\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Mathlib.Tactic.Measurability.Init\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.Tactic.HaveI\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Std.Tactic.HaveI\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.Tactic.Contrapose\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Mathlib.Tactic.PushNeg\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.Tactic.Continuity\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Mathlib.Tactic.Continuity.Init\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.Tactic.Attr.Register\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Lean.Meta.Tactic.Simp.SimpTheorems\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.Tactic.Attr.Core\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Mathlib.Tactic.Attr.Register\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.Probability.Notation\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"Mathlib.MeasureTheory.Decomposition.Lebesgue\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.LinearAlgebra.AffineSpace.Basic\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Mathlib.Algebra.AddTorsor\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.Init.Data.Nat.GCD\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Std.Data.Nat.Gcd\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.Data.Rat.Init\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Std.Data.Rat.Basic\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.Data.Array.Basic\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Std.Tactic.Alias\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.Control.Monad.Basic\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Mathlib.Init.Control.Lawful\"</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"nt\">\"Mathlib.AlgebraicTopology.DoldKan.Notations\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Mathlib.AlgebraicTopology.AlternatingFaceMapComplex\"</span><span class=\"p\">]}}</span>\n</code></pre></div>\n<p>These are all the actual false positives, either because of a tactic or notation dependency or because we just want to allow an unnecessarily broad import like <code>import Lean</code>.</p>",
        "id": 410511138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703911026
    },
    {
        "content": "<p>That's a surprisingly short list!!</p>",
        "id": 410550682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703947871
    },
    {
        "content": "<p>Is this tree-shake a \"one-time\" or does it calculate the smallest possible tree based on what we use?</p>",
        "id": 410591052,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703986692
    },
    {
        "content": "<p>The tool I just wrote has aspirations of being a CI step</p>",
        "id": 410591080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703986724
    },
    {
        "content": "<p>and it's really only about catching unused imports, not really rejiggering declarations and splitting files</p>",
        "id": 410591138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703986774
    },
    {
        "content": "<p>A fun consequence of this can be found <a href=\"http://speed.lean-fro.org/mathlib4/run-detail/cfba95c3-7dd2-4303-857c-ac99c0673524\">here</a></p>",
        "id": 419737862,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707086294
    },
    {
        "content": "<p>what are you pointing to specifically?</p>",
        "id": 419743406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707090637
    },
    {
        "content": "<p>One fairly-large untouched file lost 32% of its instructions</p>",
        "id": 419743527,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707090770
    },
    {
        "content": "<p>somehow the build got more expensive though, is that just within the noise threshold?</p>",
        "id": 419745537,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707092656
    },
    {
        "content": "<p>Expensive by what measure?</p>",
        "id": 419746383,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707093526
    },
    {
        "content": "<p>wall-clock up 0.67%</p>",
        "id": 419746499,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707093654
    },
    {
        "content": "<p>That’s well within tolerance</p>",
        "id": 419746722,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707093880
    },
    {
        "content": "<p>Overall instructions are more stable</p>",
        "id": 419746754,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707093910
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/7781663201/job/21216508799?pr=10232\">https://github.com/leanprover-community/mathlib4/actions/runs/7781663201/job/21216508799?pr=10232</a> <code>lake exe shake</code> says that I need to import <code>Data.Set.Lattice</code> in <code>Order.Cover</code> but it compiles fine without <code>Data.Set.Lattice</code>.</p>",
        "id": 419816797,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707132433
    },
    {
        "content": "<p>It's a4af199b9b in <a href=\"https://github.com/leanprover-community/mathlib4/tree/YK-set-notation\">branch#YK-set-notation</a></p>",
        "id": 419816953,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707132485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113488-general/topic/Tree.20shaking/near/419743527\">said</a>:</p>\n<blockquote>\n<p>One fairly-large untouched file lost 32% of its instructions</p>\n</blockquote>\n<p>That's surprising because most probably <code>import</code> closure of that file didn't change.</p>",
        "id": 419817605,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707132683
    },
    {
        "content": "<p>UPD: no, I removed Uryshohn's metrization theorem (and its dependencies) from the <code>import</code> closure.</p>",
        "id": 419818014,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707132837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I don't think shake has any false positives when it comes to dependencies, which is to say that if it says <code>Data.Set.Lattice</code> is needed in <code>Order.Cover</code> then it really is, at least in the original version of the file. However, it may be the case that <code>Data.Set.Lattice</code> is already transitively imported by another path, or that removing the import somehow changed the behavior of the tactics in such a way that the transitive import is no longer necessary (i.e. some simp lemma was being applied even though it doesn't really help anything and now that it is not imported it is being skipped)</p>",
        "id": 419978945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707197600
    },
    {
        "content": "<p>more specifically, on a4af199 <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.covBy_insert#doc\">docs#Set.covBy_insert</a> and several other functions make use of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Set.completeAtomicBooleanAlgebra#doc\">docs#Set.Set.completeAtomicBooleanAlgebra</a>, so if you remove the import then typeclass inference takes an alternative path which does not need this instance</p>",
        "id": 419979671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707198262
    },
    {
        "content": "<p>Thank you for the explanation!</p>",
        "id": 419981828,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707199803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think I have a false <em>negative</em> for shake. That is, it told me to remove a dependency, and I did, but then the file didn't have access to a declaration it needed. See <a href=\"https://github.com/leanprover-community/mathlib4/pull/10369\">#10369</a>, after the first commit shake complained, and after the second (implementing shake's suggestion), it didn't build.</p>",
        "id": 420668477,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707490591
    },
    {
        "content": "<p>Shake has lots of false negatives, that's why <code>noshake.json</code> exists</p>",
        "id": 420684283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707495132
    },
    {
        "content": "<p>In this case it's because the constant is used only inside <code>attribute [foo]</code>. In that case you want to add it to the <code>import</code> list of <code>noshake.json</code></p>",
        "id": 420684582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707495221
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/7875771521/job/21488387831?pr=10466\">https://github.com/leanprover-community/mathlib4/actions/runs/7875771521/job/21488387831?pr=10466</a> <code>shake</code> told me to move the <code>PartENat</code> import to the new file. However, it led to quite a few compile failures because other files relied on dependencies of <code>PartENat</code> being available via transitive import.</p>",
        "id": 421130624,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707772634
    },
    {
        "content": "<p>It's <a href=\"https://github.com/leanprover-community/mathlib4/pull/10466/commits/67444598927170940bc7570879f792a790f96245\">this</a> revision.</p>",
        "id": 421130767,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707772683
    },
    {
        "content": "<p>Huh, it's supposed to list all downstream files that will now need to import it themselves</p>",
        "id": 421131766,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707773020
    },
    {
        "content": "<p>what compile failures? Do you have a failing run?</p>",
        "id": 421131780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707773027
    },
    {
        "content": "<p>Shake is not supposed to be completely foolproof, it is limited by incomplete information. I always check the results of <code>--fix</code> first, and the consequence might be that there is an unseen dependency due to attributes or tactics</p>",
        "id": 421131975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707773102
    },
    {
        "content": "<p>No, it's just <code>ENat</code> not available in a dependency.</p>",
        "id": 421132038,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707773128
    },
    {
        "content": "<p>constants not being available should not happen though</p>",
        "id": 421132124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707773160
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10466/commits/5c00d7a2dc75baa3b6f96985b7ea2e392795673f\">this</a> is the next commit</p>",
        "id": 421132125,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707773161
    },
    {
        "content": "<p>I manually moved an <code>import</code> as suggested.</p>",
        "id": 421132218,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707773185
    },
    {
        "content": "<p>Oh but the other thing to keep in mind is that if you run shake on outdated oleans you will get the wrong answer</p>",
        "id": 421132228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707773189
    },
    {
        "content": "<p>It was <code>shake</code> in the CI</p>",
        "id": 421132262,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707773204
    },
    {
        "content": "<p>you should only run it after a clean <code>lake build</code></p>",
        "id": 421132264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707773204
    },
    {
        "content": "<p>I see in your link shake making a suggestion, what file is missing what declaration in what other file afterward?</p>",
        "id": 421132389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707773247
    },
    {
        "content": "<p>On that commit the first error is <code>expected token</code>, on a line containing <code>@[coe]</code>. So probably that attribute is not imported</p>",
        "id": 421132576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707773306
    },
    {
        "content": "<p>the missing <code>ENat</code> is due to the previous command failing</p>",
        "id": 421132629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707773325
    },
    {
        "content": "<p>actually it's more likely the notation <code>ℕ∞</code> which causes <code>expected token</code></p>",
        "id": 421132920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707773433
    },
    {
        "content": "<p>actually you are right, it is a shake bug</p>",
        "id": 421134818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707774150
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"c1\">-- In `downstream` mode, we should also check all the other modules to find out if</span>\n    <span class=\"c1\">-- we have a situation like `A -/&gt; B -&gt; C`, where we are removing the `A -&gt; B` import</span>\n    <span class=\"c1\">-- but `C` depends on `A` and only directly imports `B`.</span>\n    <span class=\"c1\">-- This situation occurs when `A ∈ needs[C]` and `B ∈ transDeps[C]`.</span>\n</code></pre></div>\n<p>This is not correct, because it could be that module <code>A</code> is not needed directly but it imports module <code>A'</code> which is needed by <code>C</code></p>",
        "id": 421134942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707774215
    },
    {
        "content": "<p>This happened in this case, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib.Data.ENat.Basic</span> <span class=\"bp\">-&gt;</span>\n<span class=\"n\">Mathlib.Data.Nat.PartENat</span> <span class=\"bp\">-/&gt;</span>\n<span class=\"n\">Mathlib.SetTheory.Cardinal.Basic</span> <span class=\"bp\">-&gt;</span>\n<span class=\"n\">Mathlib.SetTheory.Cardinal.ENat</span>\n</code></pre></div>\n<p>where the second link was severed and the first file is used in the last</p>",
        "id": 421135215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707774331
    },
    {
        "content": "<p>Here's the new output on that commit with the fixed <code>shake</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">SetTheory</span><span class=\"bp\">/</span><span class=\"n\">Cardinal</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Nat.PartENat</span><span class=\"o\">]</span>\n  <span class=\"n\">instead</span><span class=\"o\">:</span>\n    <span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Nat.PartENat</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.PartENat</span>\n    <span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Nat.SuccPred</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">Mathlib.SetTheory.Ordinal.Arithmetic</span>\n    <span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Nat.SuccPred</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">Mathlib.Data.Nat.Nth</span>\n    <span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Finset.Preimage</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">Mathlib.ModelTheory.Definability</span>\n    <span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Data.ENat.Lattice</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.ENat</span>\n</code></pre></div>\n<p>The last line is the one that is relevant to this error</p>",
        "id": 421146176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707778953
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10469\">#10469</a></p>",
        "id": 421149670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707780739
    },
    {
        "content": "<p>Thank you! The output looks good (in the last case, <code>ENat.Basic</code> is enough but if you import <code>ENat.Lattice</code>, then probably Lean uses some instance from there).</p>",
        "id": 421157627,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707785669
    },
    {
        "content": "<p>I encountered two mild usability issues in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9697\">#9697</a>:</p>\n<ul>\n<li><code>shake</code> is not idempotent: in commit <code>2150373</code>, <code>shake</code> replaced one import of <code>Polynomial.FieldDivision</code> with two lower-level imports, one of which, <code>EuclideanDomain.Instances</code>, in turn got removed by <code>shake</code> in <code>8900cb3</code>.</li>\n<li><code>shake</code> requires fresh oleans but does not detect when they are out of date. So initially I couldn't reproduce the shake output in CI.</li>\n</ul>\n<p>I assume the non-idempotency is caused by something like diamond inheritance of instances first choosing a path through <code>EuclideanDomain.Instances</code> and then another, so not something directly in <code>shake</code>'s control, but might be worth investigating anway.</p>\n<p>Making <code>shake</code> detect out of date oleans is going to help a lot with usability IMO.</p>",
        "id": 421206132,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707816865
    },
    {
        "content": "<p>The second issue is fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10484\">#10484</a></p>",
        "id": 421208118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707817521
    },
    {
        "content": "<p>The thing with instances isn't likely to be fixed. I am considering implementing <code>lake exe shake --slow</code> which does essentially the same thing as your minimizer script, deleting import lines and seeing if it still compiles, but that will be way too slow to run most of the time</p>",
        "id": 421208444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707817624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , does <code>shake</code> take into account #align statements? I <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/7884157221/job/21512548620\">just had</a> a bad suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Int</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Std.Data.Int.Order</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Std.Data.Int.Init.Order</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which caused #aligns to fail.</p>",
        "id": 421222323,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707822754
    },
    {
        "content": "<p>No, aligns are similar to attributes and tactics, shake doesn't track them. Then again, generally aligns shouldn't be referring to definitions from other files under normal circumstances anyway</p>",
        "id": 421230470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707826111
    },
    {
        "content": "<p>If the issue is that <code>#align</code> itself is not found, the relevant import for that is already in noshake.json but you have to add it to the file</p>",
        "id": 421230566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707826147
    },
    {
        "content": "<p>This is expected behavior and you fixed it the way I would have recommended</p>",
        "id": 421231814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707826615
    },
    {
        "content": "<p>Can we have <code>shake --fix</code> insert the new imports alphabetically?</p>",
        "id": 421392790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707898974
    },
    {
        "content": "<p>what if the original imports are not sorted?</p>",
        "id": 421392866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707899002
    },
    {
        "content": "<p>You could still do a sorted insertion (insert D ACBF = ACBDF)</p>",
        "id": 421395869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707900183
    },
    {
        "content": "<p>Appending in that case is probably also fine</p>",
        "id": 421395920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707900208
    },
    {
        "content": "<p>I just encountered a (minor) shake bug. On 17736f5d6f8411937ad801767f96e8ce60d857ef, the output is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">BigOperators</span><span class=\"bp\">/</span><span class=\"n\">Ring</span><span class=\"bp\">/</span><span class=\"n\">Multiset.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Multiset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.BigOperators.Multiset.Basic</span><span class=\"o\">]</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Nat</span><span class=\"bp\">/</span><span class=\"n\">Choose</span><span class=\"bp\">/</span><span class=\"n\">Sum.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">GeomSum.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">instead</span>\n    <span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">Mathlib.Algebra.Order.CauSeq.BigOperators</span>\n    <span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">Mathlib.Combinatorics.Colex</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">NumberTheory</span><span class=\"bp\">/</span><span class=\"n\">Divisors.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Combinatorics</span><span class=\"bp\">/</span><span class=\"n\">Enumerative</span><span class=\"bp\">/</span><span class=\"n\">Composition.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">instead</span>\n    <span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Multiset</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">Mathlib.Combinatorics.Enumerative.Partition</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">LinearAlgebra</span><span class=\"bp\">/</span><span class=\"n\">Multilinear</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Topology</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">LiminfLimsup.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.BigOperators.Ring</span><span class=\"o\">]</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Sign.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.GroupWithZero.Units.Lemmas</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Chebyshev.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Interval.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Combinatorics</span><span class=\"bp\">/</span><span class=\"n\">Pigeonhole.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Combinatorics</span><span class=\"bp\">/</span><span class=\"n\">Enumerative</span><span class=\"bp\">/</span><span class=\"n\">DoubleCounting.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">instead</span>\n    <span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Rat.Field</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.Ring.Regular</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">Mathlib.Combinatorics.SetFamily.LYM</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Combinatorics</span><span class=\"bp\">/</span><span class=\"n\">Configuration.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Combinatorics</span><span class=\"bp\">/</span><span class=\"n\">SetFamily</span><span class=\"bp\">/</span><span class=\"n\">AhlswedeZhang.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Tactic.Positivity.Basic</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Ring</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Combinatorics</span><span class=\"bp\">/</span><span class=\"n\">SetFamily</span><span class=\"bp\">/</span><span class=\"n\">FourFunctions.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Set</span><span class=\"bp\">/</span><span class=\"n\">Equitable.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">instead</span>\n    <span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Ring.Regular</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Regularity.Equitabilise</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Combinatorics</span><span class=\"bp\">/</span><span class=\"n\">SimpleGraph</span><span class=\"bp\">/</span><span class=\"n\">Regularity</span><span class=\"bp\">/</span><span class=\"n\">Energy.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">NumberTheory</span><span class=\"bp\">/</span><span class=\"n\">Harmonic</span><span class=\"bp\">/</span><span class=\"n\">Defs.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 430215312,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711697708
    },
    {
        "content": "<p>what's the bug?</p>",
        "id": 430215463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711697795
    },
    {
        "content": "<p>... with suggestions like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Combinatorics</span><span class=\"bp\">/</span><span class=\"n\">Enumerative</span><span class=\"bp\">/</span><span class=\"n\">DoubleCounting.lean</span><span class=\"o\">:</span>\n  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">instead</span>\n    <span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Rat.Field</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.Ring.Regular</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">Mathlib.Combinatorics.SetFamily.LYM</span>\n</code></pre></div>\n<p>making no sense. How can you need to import <code>Mathlib.Algebra.Order.BigOperators.Group.Finset</code> in <code>Mathlib.Combinatorics.SetFamily.LYM</code> if you already add it to <code>Mathlib.Combinatorics.Enumerative.DoubleCounting</code>, which is imported by <code>Mathlib.Combinatorics.SetFamily.LYM</code>?</p>",
        "id": 430215584,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711697854
    },
    {
        "content": "<p>The individual per-file suggestions are considered independently; making some of the earlier changes can make later ones no longer applicable. This is one of the reasons shake is better suited for small scale changes rather than bulk updates</p>",
        "id": 430215968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711698058
    },
    {
        "content": "<p>the block</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">instead</span>\n    <span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Rat.Field</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.Ring.Regular</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">Mathlib.Combinatorics.SetFamily.LYM</span>\n</code></pre></div>\n<p>is correct, for editing a single file and fixing the downstream changes of it</p>",
        "id": 430216020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711698101
    },
    {
        "content": "<p>My claim is that it is overdoing, even on its own</p>",
        "id": 430216045,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711698122
    },
    {
        "content": "<p>but once you do this, downstream files can change in unpredictable ways and you should re-run shake for best results</p>",
        "id": 430216097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711698140
    },
    {
        "content": "<p>The block</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Ring.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Mathlib.Algebra.Order.BigOperators.Group.Finset</span><span class=\"o\">]</span>\n  <span class=\"n\">instead</span>\n    <span class=\"kn\">import</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Rat.Field</span><span class=\"o\">,</span> <span class=\"n\">Mathlib.Algebra.Ring.Regular</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">Mathlib.Combinatorics.SetFamily.LYM</span>\n</code></pre></div>\n<p>would be enough</p>",
        "id": 430216111,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711698157
    },
    {
        "content": "<p>No, because apparently all of those files have unnecessary imports</p>",
        "id": 430216137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711698186
    },
    {
        "content": "<p>but the downstream effects of all of the changes of all of the files is complex and order-dependent</p>",
        "id": 430216164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711698207
    },
    {
        "content": "<p>so the \"instead import\" section only shows the effect of the remove/add pair in the same block</p>",
        "id": 430216189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711698231
    },
    {
        "content": "<p>Sorry, I don't get it. If it only showed the effect of the remove/add pair in the same block, I shouldn't see the <code>instead add [Mathlib.Algebra.Order.BigOperators.Group.Finset]</code>. So it must take the other remove/add pairs into account.</p>",
        "id": 430216339,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711698331
    },
    {
        "content": "<p>A related feature-request: Would it be possible to accept/refuse shake suggestions on a per-block basis?</p>",
        "id": 430216523,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711698470
    },
    {
        "content": "<p>For example, with your first example, it's saying: Let's fix <code>Mathlib/Combinatorics/Enumerative/DoubleCounting.lean</code>. To do so, first remove <code>Mathlib.Algebra.Order.BigOperators.Ring.Finset</code>, then add <code>Mathlib.Algebra.Order.BigOperators.Group.Finset</code>. Doing this has broken some transitive imports in <code>Mathlib.Combinatorics.SetFamily.LYM</code> so you should add <code>Mathlib.Data.Rat.Field, Mathlib.Algebra.Ring.Regular, Mathlib.Algebra.Order.BigOperators.Group.Finset</code> to the imports for that file. Okay now everything should be working again and that one file is fixed.</p>\n<p>Also, <code>Mathlib/Data/Set/Equitable.lean</code> has unnecessary imports. (Not assuming you've made the previous fix,) to fix it remove <code>Ring.Finset</code>, ...</p>",
        "id": 430216620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711698514
    },
    {
        "content": "<p>No sorry I still don't get it. How can it need to add <code>Mathlib.Algebra.Order.BigOperators.Group.Finset</code> to <code>Mathlib.Combinatorics.SetFamily.LYM</code> if we already added it to <code>Mathlib.Combinatorics.Enumerative.DoubleCounting</code>?</p>",
        "id": 430216738,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711698592
    },
    {
        "content": "<p>Oh, I see what you mean now. (These file names make me go cross-eyed...)</p>",
        "id": 430216842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711698659
    },
    {
        "content": "<p>The error to me is very simple: You calculate the <code>instead add</code> suggestion from the <code>remove</code> suggestion, without taking the <code>add</code> suggestion into account.</p>",
        "id": 430216849,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711698664
    },
    {
        "content": "<p>Yeah sorry I should have foobarred it, but I was pretty certain I would be making a mistake in doing so</p>",
        "id": 430216919,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711698712
    },
    {
        "content": "<p>Okay yes you were right, that is exactly the issue and I tested the fix</p>",
        "id": 430217497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711699035
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11763\">#11763</a></p>",
        "id": 430217655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711699139
    }
]