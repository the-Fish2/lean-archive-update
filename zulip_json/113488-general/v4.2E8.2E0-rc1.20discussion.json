[
    {
        "content": "<p>Let's discuss the <a href=\"#narrow/stream/113486-announce/topic/v4.2E8.2E0-rc1\">new release</a> here</p>",
        "id": 436773206,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714682371
    },
    {
        "content": "<p>This is a great new release! <br>\nEven the new def-eq changes that I've seen look good. I looked through a few failing and succeeding def-eq traces, and there seems to be room for speedups. I don't have time to find another minimal example in the next 2 weeks, but after that I'll see if I can see if I can minimize some other non-optimal behavior.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Non-minimal example</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Here is an example where the trace seems to show the elaborator do a few very similar tasks, each taking a few seconds each to fail. Probably I'm recording this mostly for myself, to look at this again in a few weeks.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Manifold.ContMDiff.NormedSpace</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">ChartedSpace</span> <span class=\"n\">SmoothManifoldWithCorners</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Topology</span> <span class=\"n\">Manifold</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- declare a smooth manifold `M` over the pair `(E, H)`.</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- declare a smooth manifold `M'` over the pair `(E', H')`.</span>\n  <span class=\"o\">{</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H'</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">I'</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E'</span> <span class=\"n\">H'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H'</span> <span class=\"n\">M'</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I'</span> <span class=\"n\">M'</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- declare a smooth manifold `N` over the pair `(F, G)`.</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">G</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">J</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- declare a smooth manifold `N'` over the pair `(F', G')`.</span>\n  <span class=\"o\">{</span><span class=\"n\">F'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G'</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">J'</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F'</span> <span class=\"n\">G'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">N'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">G'</span> <span class=\"n\">N'</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">J'</span> <span class=\"n\">N'</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- F₁, F₂, F₃, F₄ are normed spaces</span>\n  <span class=\"o\">{</span><span class=\"n\">F₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F₁</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F₂</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F₃</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F₃</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F₃</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F₄</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F₄</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F₄</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- declare functions, sets, points and smoothness indices</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ContMDiffWithinAt.cle_arrowCongr'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">F₁</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">F₃</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">ContMDiffWithinAt</span> <span class=\"n\">I</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">F₂</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₁</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">F₂</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₁</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">ContMDiffWithinAt</span> <span class=\"n\">I</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">F₃</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F₃</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ContMDiffWithinAt</span> <span class=\"n\">I</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F₁</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₃</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F₂</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">))</span> <span class=\"n\">n</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">arrowCongr</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">F₁</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₃</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F₂</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"n\">ContMDiffWithinAt</span> <span class=\"n\">I</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F₁</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₃</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F₂</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">))</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"o\">(((</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">F₂</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">precomp</span> <span class=\"n\">F₄</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F₃</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">postcomp</span> <span class=\"n\">F₁</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"n\">x</span>\n  <span class=\"k\">from</span> <span class=\"n\">hf.clm_precomp.clm_comp</span> <span class=\"n\">hg.clm_postcomp</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> the following has an intentional mistake, and is even slower before it fails. -/</span>\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ContMDiffWithinAt.cle_arrowCongr''</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">F₁</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">F₃</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">ContMDiffWithinAt</span> <span class=\"n\">I</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">F₂</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₁</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">F₂</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₁</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">ContMDiffWithinAt</span> <span class=\"n\">I</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">F₃</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F₃</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ContMDiffWithinAt</span> <span class=\"n\">I</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F₁</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₃</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F₂</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">))</span> <span class=\"n\">n</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">arrowCongr</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">F₁</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₃</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F₂</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"n\">ContMDiffWithinAt</span> <span class=\"n\">I</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F₁</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₃</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F₂</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">))</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"o\">(((</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">F₂</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">precomp</span> <span class=\"n\">F₃</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F₃</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F₄</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">postcomp</span> <span class=\"n\">F₁</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"n\">x</span>\n  <span class=\"k\">from</span> <span class=\"n\">hf.clm_precomp.clm_comp</span> <span class=\"n\">hg.clm_postcomp</span>\n</code></pre></div>\n</div></div>",
        "id": 436774319,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714682873
    },
    {
        "content": "<p>Has docgen been updated yet?</p>",
        "id": 436776443,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714683774
    },
    {
        "content": "<p>(For those like me who didn't know what \"functional induction\" was, the first PR for this feature seems to be <a href=\"https://github.com/leanprover/lean4/pull/3432\">https://github.com/leanprover/lean4/pull/3432</a> which has a nice example of when to use it.)</p>",
        "id": 436790878,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1714691559
    },
    {
        "content": "<p>The pretty printer now uses dot notation by default, so no need for <code>@[pp_dot]</code> anymore in mathlib (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12609\">#12609</a> deprecates it)</p>",
        "id": 436791359,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714691909
    },
    {
        "content": "<p>The lake update <a href=\"https://github.com/leanprover/lean4/pull/3835\">lean4#3835</a> is very big! Looks like some major improvements! It will take a while to digest...</p>\n<p>Quick question: how do you properly use <code>download</code> in a lake script now? </p>\n<p>Old script snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">file</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"s2\">\"UnicodeData.txt\"</span><span class=\"o\">,</span> <span class=\"s2\">\"PropList.txt\"</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n     <span class=\"k\">let</span> <span class=\"n\">url</span> <span class=\"o\">:=</span> <span class=\"s2\">\"https://www.unicode.org/Public/UCD/latest/ucd/\"</span> <span class=\"bp\">++</span> <span class=\"n\">file</span>\n     <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Downloading UCD/{file}\"</span>\n     <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">LogIO.captureLog</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">download</span> <span class=\"n\">file</span> <span class=\"n\">url</span> <span class=\"o\">(</span><span class=\"n\">dataDir</span><span class=\"bp\">/</span><span class=\"n\">file</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It looks like <code>download</code> lost the first argument and it also looks like I no longer need to drop the log. But <code>LogIO.captureLog</code> seems to have disappeared. Maybe this is an old x with a new  and improved y?</p>",
        "id": 436955464,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714768751
    },
    {
        "content": "<p>^^^ cc <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 436955634,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714768819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> You are correct that the first argument has been removed. I am not quite sure why you were dropping the log originally, so I am not sure exactly what you should do now. <code>captureLog</code> still exists. It is just not part of  the<code>LogIO</code>  namespace. The following should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">download</span> <span class=\"n\">url</span> <span class=\"o\">(</span><span class=\"n\">dateDir</span><span class=\"bp\">/</span><span class=\"n\">file</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">captureLog</span>\n</code></pre></div>",
        "id": 436956451,
        "sender_full_name": "Mac Malone",
        "timestamp": 1714769227
    },
    {
        "content": "<p>That was very quick! Your patch works fine. I found where <code>captureLog</code> went now. This is old code, I'm not sure why I was dropping the log. It's on my todo list to review that but now I can update my repo. Thanks Mac!</p>",
        "id": 436957837,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714769876
    },
    {
        "content": "<p>PS: I haven't done any serious testing, but it feels like solid performance improvements for lake too! Thanks Mac! I'm loving this update!</p>",
        "id": 436971290,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714777097
    },
    {
        "content": "<p>This is a strange one! Both of these alias declarations make lean crash:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"n\">alias</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">And.left</span>\n<span class=\"n\">alias</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">And.right</span>\n</code></pre></div>\n<p>So far, this seems to be localized to <code>And.left</code> and <code>And.right</code>. No issues with <code>Or.left</code>, <code>Prod.fst</code>, <code>And.intro</code>, nor anything else I tried.</p>",
        "id": 437019955,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714827408
    },
    {
        "content": "<p>The new <code>rfl</code> tactic error message is great! It seems to override the default \"no goals to be solved\" message though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"c1\">-- The rfl tactic failed. Possible reasons ...</span>\n</code></pre></div>",
        "id": 437025013,
        "sender_full_name": "Christian Merten",
        "timestamp": 1714831840
    },
    {
        "content": "<p>A few comments about the new build progress:</p>\n<ul>\n<li>I used to be able to see all build errors resurface during the linting step in mathlib CI. Now they are drowned in 4.5k lines of \"Building ...\" and all I get is a list of \"Some build steps logged failures:\" without actually telling me what the errors are, meaning that I can't start thinking about how to solve them while cache is downloading. Could the full errors resurface, rather than just their location?</li>\n<li>Building doesn't seem to stop once all files depending only on non-erroring files have been built, meaning that I have no clear indicator of eg how far in mathlib I have pushed a refactor. Could we recover the indicator of how many files were successfully built?</li>\n</ul>",
        "id": 437025352,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714832193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648495\">Christian Merten</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E8.2E0-rc1.20discussion/near/437025013\">said</a>:</p>\n<blockquote>\n<p>The new <code>rfl</code> tactic error message is great! It seems to override the default \"no goals to be solved\" message though:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"c1\">-- The rfl tactic failed. Possible reasons ...</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks for the feedback, glad you like it! Can you open an issue?</p>",
        "id": 437035189,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714841890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E8.2E0-rc1.20discussion/near/437035189\">said</a>:</p>\n<blockquote>\n<p>Can you open an issue?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/pull/4063\">lean4#4063</a></p>",
        "id": 437042844,
        "sender_full_name": "Christian Merten",
        "timestamp": 1714847736
    },
    {
        "content": "<p>The alias command issue I mentioned above appears to be due to malformed constant info for <code>And.left</code> and <code>And.right</code>. I filed an issue: <a href=\"https://github.com/leanprover/lean4/pull/4064\">lean4#4064</a></p>",
        "id": 437053225,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1714858105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E8.2E0-rc1.20discussion/near/437025352\">said</a>:</p>\n<blockquote>\n<p>A few comments about the new build progress:</p>\n<ul>\n<li>I used to be able to see all build errors resurface during the linting step in mathlib CI. Now they are drowned in 4.5k lines of \"Building ...\" and all I get is a list of \"Some build steps logged failures:\" without actually telling me what the errors are, meaning that I can't start thinking about how to solve them while cache is downloading. Could the full errors resurface, rather than just their location?</li>\n<li>Building doesn't seem to stop once all files depending only on non-erroring files have been built, meaning that I have no clear indicator of eg how far in mathlib I have pushed a refactor. Could we recover the indicator of how many files were successfully built?</li>\n</ul>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, could you please open (separate) issues about these requests? In the first one, please explain carefully what you want in the first case without assuming that the current mathlib CI steps are known to all. :-)</p>",
        "id": 437089832,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714895661
    },
    {
        "content": "<p>Relating to mathlib CI, it seems that the problem matcher is no longer annotating the diff with build failures</p>",
        "id": 437090277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714896049
    },
    {
        "content": "<p>I think this is probably because the messages are of the form <code>error: ././././Mathlib/Algebra/MvPolynomial/Basic.lean:721:23-721:35</code>, and nothing understands the <code>-</code> notation (VSCode also no longer lets you click the message to jump to the error)</p>",
        "id": 437090310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714896088
    },
    {
        "content": "<p>Hmm, I've been successfully jumping to errors locally?</p>",
        "id": 437091502,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714897157
    },
    {
        "content": "<p>When I click on an error message, vscode gives me this behavior:</p>\n<p><a href=\"/user_uploads/3121/VsxS7eZOJlBIOvx0iHirMn3h/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VsxS7eZOJlBIOvx0iHirMn3h/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/VsxS7eZOJlBIOvx0iHirMn3h/image.png\"></a></div>",
        "id": 437091637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714897248
    },
    {
        "content": "<p>Removing the trailing <code>-$line:$col</code> fixes it</p>",
        "id": 437091657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714897275
    },
    {
        "content": "<p>Maybe this is a gitpod quirk</p>",
        "id": 437091666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714897292
    },
    {
        "content": "<p>Seem reasonable to open an issue for this one. Other tools are likely to get confused by the <code>:</code> in a way they wouldn't if it were just a space.</p>",
        "id": 437091730,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714897348
    },
    {
        "content": "<p>I think support for the colon(s?) is pretty standard but the dash may not be</p>",
        "id": 437093146,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714898632
    },
    {
        "content": "<p>I was discussing this with <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> . Apparently <code>l:c-l.c</code> works but it's a bit weird. Doing some quick comparative analysis, most other tools just show the initial <code>l:c</code> (including 4.7.0), which I think is fine since when you get there the line will be highlighted anyway</p>",
        "id": 437093504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714898907
    },
    {
        "content": "<p>Yes, the problem is the dash not the colon</p>",
        "id": 437097457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714902399
    },
    {
        "content": "<p>Though it looks like this can be fixed with extra configuration</p>",
        "id": 437097582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714902536
    },
    {
        "content": "<p>Certainly problem-matchers support carrying this data, just not the parsers that vs code / our CI uses</p>",
        "id": 437097708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714902665
    },
    {
        "content": "<p>tiny issue ..<br>\n<a href=\"/user_uploads/3121/vnGGORHcn9097lqj0jKYT390/image.png\">image.png</a><br>\nInstead of being maked \"latest\", isn't an rc release supposed to be marked as \"pre-release\" like so<br>\n<a href=\"/user_uploads/3121/fp1DJ5PSSJ1pCKnvCFqil4xq/image.png\">image.png</a><br>\n?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vnGGORHcn9097lqj0jKYT390/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/vnGGORHcn9097lqj0jKYT390/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/fp1DJ5PSSJ1pCKnvCFqil4xq/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/fp1DJ5PSSJ1pCKnvCFqil4xq/image.png\"></a></div>",
        "id": 437109769,
        "sender_full_name": "Somo S.",
        "timestamp": 1714914232
    },
    {
        "content": "<p>Fixed.</p>",
        "id": 437184469,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714964681
    },
    {
        "content": "<p>Re: <code>lakefile.toml</code>, I would like to see projects switch if possible / helpful! I'm hoping the <code>toml</code> file is useful, and that projects will try using it and come back with bug reports and feature requests. While we're unlikely to drop support for <code>lakefile.lean</code> anytime soon (perhaps ever), I hope that life is going to be simpler if most projects are using non-interpreted configuration files.</p>",
        "id": 437194698,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714971325
    },
    {
        "content": "<p>I've switched <code>importGraph</code> (see <a href=\"https://github.com/leanprover-community/mathlib4/pull/12690\">#12690</a> verifying that Mathlib is still happy). I think it should be no problem to switch <code>std</code>/<code>batteries</code>, but will wait to do so until after the rename.</p>",
        "id": 437194775,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714971375
    },
    {
        "content": "<p>We won't update <code>Qq</code> for now, as we prefer to leave that on the oldest compatible toolchain.</p>",
        "id": 437194797,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714971401
    },
    {
        "content": "<p>Similarly <code>Cli</code>? <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span>?</p>",
        "id": 437194812,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714971415
    },
    {
        "content": "<p><code>proofwidgets</code> has complicated requirements that can't be support from the toml yet.</p>",
        "id": 437194824,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714971433
    },
    {
        "content": "<p>I'll try <code>aesop</code> now, hopefully that is straightforward? (edit: <a href=\"https://github.com/leanprover-community/aesop/pull/131\">https://github.com/leanprover-community/aesop/pull/131</a>)</p>",
        "id": 437194830,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714971442
    },
    {
        "content": "<p>I'd be happy to hear reports of people making the migration in downstream projects, too!</p>",
        "id": 437194838,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714971457
    },
    {
        "content": "<p>It looks to me like <code>meta if get_config? env = some \"dev\" then</code> is the biggest blocker to moving more repositories to <code>lakefile.toml</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, do we have an issue about this?</p>",
        "id": 437195794,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714972259
    },
    {
        "content": "<p>That's <code>lake install</code> I think: issue <a href=\"https://github.com/leanprover/lean4/pull/3423\">lean4#3423</a>, PR <a href=\"https://github.com/leanprover/lean4/pull/3998\">lean4#3998</a></p>",
        "id": 437199845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714975947
    },
    {
        "content": "<p>I think it would be good to have an issue specifically for conditional dependencies in toml though, independently of <code>lake install</code> (which is poised to eliminate doc-gen from everyone's lakefiles)</p>",
        "id": 437200014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714976053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E8.2E0-rc1.20discussion/near/437195794\">said</a>:</p>\n<blockquote>\n<p>It looks to me like <code>meta if get_config? env = some \"dev\" then</code> is the biggest blocker to moving more repositories to <code>lakefile.toml</code>.</p>\n</blockquote>\n<p>Sadly, all of LeanAPAP, LeanCamCombi, Con(NF), PFR use conditional dependencies to avoid everyone having to download doc-gen, so I can't actually switch to <code>lakefile.toml</code> in any of my projects</p>",
        "id": 437207335,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714979889
    },
    {
        "content": "<p>Mario's message immediately above is about avoiding the need to have a dependency at all (conditional or otherwise) on doc-gen once <code>lake install</code> lands.</p>",
        "id": 437213981,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714982860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E8.2E0-rc1.20discussion/near/437194812\">said</a>:</p>\n<blockquote>\n<p>Similarly <code>Cli</code>? <span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span>?</p>\n</blockquote>\n<p>Sure.</p>",
        "id": 437216961,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1714984068
    },
    {
        "content": "<p>This is is probably more a featrue request more than anything else. Most of my <code>lakefile</code>s currently have the following pattern in there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">leanVersion</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"v{Lean.versionString}\"</span>\n\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n\n<span class=\"n\">require</span> <span class=\"n\">std</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/std4.git\"</span> <span class=\"bp\">@</span> <span class=\"n\">leanVersion</span>\n<span class=\"n\">require</span> <span class=\"n\">i18n</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/hhu-adam/lean-i18n.git\"</span> <span class=\"bp\">@</span> <span class=\"n\">leanVersion</span>\n\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This is mainly to ensure that packages that do not import <code>mathlib</code> are still compatible with the stable releases. So far that's been the most ideomatic way I know of: You update <code>leantoolchain</code> to the version you want, call <code>lake update</code> and you're good. I think it would be nice if the <code>.toml</code> files also supported an easy way to follow stable releases without editing the version once per dependency. My reasons are mainly:</p>\n<ul>\n<li>non-mathlib/batteries projects should probably be encouraged to follow the stable releases. After all that's why there are releases, right?</li>\n<li><code>lake update</code> is a bit of a false friend for beginners/intermediates as it might mess up your project. Therefore, I like to set up my config in a way that <code>rm -rf ./lake lake-manifest.json &amp;&amp; lake update</code> is a 100% reliable way to recover if things went wrong.</li>\n</ul>",
        "id": 437228497,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1714988607
    },
    {
        "content": "<p><a href=\"https://github.com/dwrensha/tryAtEachStep/commit/b32d615ece7cf7b864119ad3569571a0cb261373\">Updated tryAtEachStep.</a><br>\nAfter <code>lake translate-config toml</code>, I needed to manually move the <code>defaultTargets</code> line up that that it did not fall under <code>[leanOptions]</code>.</p>",
        "id": 437248320,
        "sender_full_name": "David Renshaw",
        "timestamp": 1714996958
    },
    {
        "content": "<p>I seem to have trouble upgrading when meta-programming from a Lean script. Concretely, lines of the following form worked fine in earlier versions (after running <code>initSearchPath</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">env'</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"bp\">#</span><span class=\"o\">[{</span><span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">LeanAide</span><span class=\"o\">}]</span> <span class=\"o\">{}</span>\n</code></pre></div>\n<p>But now I get the error <code>uncaught exception: unknown package 'ImportGraph'</code>.</p>\n<p>This does not seem to depend on what the array of modules being imported is so long as it is non-empty. I get the same error with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">env'</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"bp\">#</span><span class=\"o\">[{</span><span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib</span><span class=\"o\">}]</span> <span class=\"o\">{}</span>\n</code></pre></div>",
        "id": 437269910,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1715004374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span>, you might have to give us more context to be able to help you.</p>",
        "id": 437271664,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715004841
    },
    {
        "content": "<p>Does running <code>lake build</code> help?</p>",
        "id": 437274900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715005853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E8.2E0-rc1.20discussion/near/437248320\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/dwrensha/tryAtEachStep/commit/b32d615ece7cf7b864119ad3569571a0cb261373\">Updated tryAtEachStep.</a><br>\nAfter <code>lake translate-config toml</code>, I needed to manually move the <code>defaultTargets</code> line up that that it did not fall under <code>[leanOptions]</code>.</p>\n</blockquote>\n<p>Could you elaborate on this and/or create an issue with a failing <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 437278956,
        "sender_full_name": "Mac Malone",
        "timestamp": 1715007101
    },
    {
        "content": "<p>I am trying.</p>",
        "id": 437282784,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1715008174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> this does sound like it would help to check if <code>importGraph</code> is in your <code>lake-manifest.json</code> and also in <code>.lake/packages/importGraph</code>. That might give a hint whether your dependencies are imported correctly, it sounds a bit as if mathlib itself wouldnt properly work in your project, but that's a very far speculation.</p>",
        "id": 437286049,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715009185
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> </p>\n<p>It was the case that this was missing from my <code>initSearchPath</code>. Adding this fixed the error <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> thanks.</p>\n<p><del>Unfortunately there is another error. I will try to minimize and then report.</del><br>\nI was doing things in a needlessly complicated way. Cleaning my code (and the <code>initSearchPath</code> correction) fixes all issues.</p>",
        "id": 437287441,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1715009636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> The root cause of the error was my manually including all the places where lake places oleans in my <code>initSearchPath</code>.  For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">initFiles</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">System.FilePath</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">\".lake/build/lib\"</span><span class=\"o\">,</span> <span class=\"s2\">\".lake/packages/mathlib/.lake/build/lib\"</span><span class=\"o\">,</span>  <span class=\"s2\">\".lake/packages/std/.lake/build/lib\"</span><span class=\"o\">,</span> <span class=\"s2\">\".lake/packages/Qq/.lake/build/lib\"</span><span class=\"o\">,</span> <span class=\"s2\">\".lake/packages/aesop/.lake/build/lib\"</span><span class=\"o\">,</span> <span class=\"s2\">\".lake/packages/proofwidgets/.lake/build/lib\"</span><span class=\"o\">,</span> <span class=\"s2\">\".lake/packages/importGraph/.lake/build/lib\"</span> <span class=\"o\">]</span>\n</code></pre></div>\n<p>Is there a function in the Lake API I can use instead?</p>",
        "id": 437366816,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1715048693
    },
    {
        "content": "<p>Maybe it is helpful to <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> here, and explain why you need those locations?</p>",
        "id": 437366887,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715048753
    },
    {
        "content": "<p>I need them because I write files in my main library that run to core, and then run in <code>lean_exe</code>  targets by building and passing an environment. The relevant lines in my code are (within IO):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.findSysroot</span><span class=\"o\">)</span> <span class=\"n\">initFiles</span>\n<span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span>\n    <span class=\"n\">importModules</span> <span class=\"bp\">#</span><span class=\"o\">[{</span><span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">module</span><span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">LeanAide.TheoremElab</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">module</span><span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">LeanCodePrompts.Translate</span><span class=\"o\">}]</span> <span class=\"o\">{}</span>\n</code></pre></div>",
        "id": 437367208,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1715048935
    },
    {
        "content": "<p>By \"run\" above I meant use <code>Core.run</code> to get an <code>EIO</code> before passing to <code>IO</code> etc.</p>",
        "id": 437367318,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1715049005
    },
    {
        "content": "<p>Just read what <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> means and my actual goal is to pass an environment to run <code>CoreM</code> stuff in compiled Lean code.</p>",
        "id": 437367487,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1715049124
    },
    {
        "content": "<p>What about <code>searchPathRef.set compile_time_search_path%</code>?</p>",
        "id": 437368100,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715049547
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> <br>\nIndeed this worked fine as a replacement to my hacky <code>initSearchpath</code></p>",
        "id": 437368466,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1715049773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E8.2E0-rc1.20discussion/near/437278956\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E8.2E0-rc1.20discussion/near/437248320\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/dwrensha/tryAtEachStep/commit/b32d615ece7cf7b864119ad3569571a0cb261373\">Updated tryAtEachStep.</a><br>\nAfter <code>lake translate-config toml</code>, I needed to manually move the <code>defaultTargets</code> line up that that it did not fall under <code>[leanOptions]</code>.</p>\n</blockquote>\n<p>Could you elaborate on this and/or create an issue with a failing <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>\n</blockquote>\n<p>I've encountered the same problem as <span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> has. I have filed an issue: <a href=\"https://github.com/leanprover/lean4/issues/4099\">https://github.com/leanprover/lean4/issues/4099</a></p>",
        "id": 437533600,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1715117024
    },
    {
        "content": "<p>Thanks for the report. Hopefully we'll be able to include a fix for this in <code>v4.8.0-rc2</code> (perhaps next week?)</p>",
        "id": 437545351,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715122459
    },
    {
        "content": "<p>At yesterday's Lean workshop in Berlin, some participants had trouble installing Lean. I was particularly puzzled by one error message: typing <code>lake exe cache get</code> in the project's root directory resulted in the error <code>could not find file ./lakefile.lean</code>.</p>\n<p>This was puzzling since the user <em>was</em> in the root directory --- but the <a href=\"https://github.com/Happyves/BerLean_Workshop\">repository</a> we were using had a <code>lakefile.toml</code> and not <code>lakefile.lean</code>. (This error didn't occur for <em>all</em> users, just some.) Is this</p>\n<ul>\n<li>just a bug in the error message (i.e., <code>cache</code> also checks for a <code>lakefile.toml</code>, but the error doesn't mention it)?</li>\n<li>a bug in cache (not checking for <code>lakefile.toml</code>)</li>\n<li>something else (mumble mumble paths) --- which belongs into a different thread?</li>\n</ul>",
        "id": 438088905,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715414236
    },
    {
        "content": "<p>Alternatively, a pointer to <code>cache</code>'s source code so I can check myself is also welcome.</p>",
        "id": 438088979,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715414306
    },
    {
        "content": "<p>is there a <code>find</code> in there, or did it really say <code>could not file</code>?</p>",
        "id": 438088987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715414319
    },
    {
        "content": "<p>this is a lake error message, most likely caused by using a lake version that doesn't know about toml</p>",
        "id": 438089015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715414378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E8.2E0-rc1.20discussion/near/438088987\">said</a>:</p>\n<blockquote>\n<p>is there a <code>find</code> in there, or did it really say <code>could not file</code>?</p>\n</blockquote>\n<p>I don't remember precisely, but am pretty sure I just omitted the <code>find</code> now - fixed, thanks!</p>",
        "id": 438089103,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715414427
    },
    {
        "content": "<p>i.e. you need to make sure the <code>lean-toolchain</code> says <code>v4.8.0-rc1</code></p>",
        "id": 438089121,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715414458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E8.2E0-rc1.20discussion/near/438089015\">said</a>:</p>\n<blockquote>\n<p>this is a lake error message, most likely caused by using a lake version that doesn't know about toml</p>\n</blockquote>\n<p>So the fix would be to ensure participants have the right version of <code>lake</code>... I see!<br>\n(The <code>lean-toolchain</code> does say <code>v4.8.0-rc1</code>.)</p>",
        "id": 438089153,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715414497
    },
    {
        "content": "<p>Hmm -- as soon as the lean-toolchain is right, you should have the right version of lake.</p>",
        "id": 438090181,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715415554
    },
    {
        "content": "<p>That is determined by the lean-toolchain.</p>",
        "id": 438090186,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715415560
    }
]