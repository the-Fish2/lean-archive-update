[
    {
        "content": "<p>Any idea how I can get this instance, which is needed for μ below? I have already constructed a metric on <code>ℕ → Bool</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"bp\">@</span><span class=\"n\">BorelSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">UniformSpace</span><span class=\"bp\">.</span><span class=\"n\">toTopologicalSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">PseudoEMetricSpace</span><span class=\"bp\">.</span><span class=\"n\">toUniformSpace</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">MeasurableSpace</span><span class=\"bp\">.</span><span class=\"n\">pi</span><span class=\"w\">  </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">μ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MeasureTheory</span><span class=\"bp\">.</span><span class=\"n\">Measure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">MeasureTheory</span><span class=\"bp\">.</span><span class=\"n\">Measure</span><span class=\"bp\">.</span><span class=\"n\">hausdorffMeasure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 444517455,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1718298697
    },
    {
        "content": "<p>I get</p>\n<p><em>synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized  Pi.topologicalSpace inferred UniformSpace.toTopologicalSpace</em></p>\n<p>from</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">BorelSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"o\">)</span>\n<span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">UniformSpace</span><span class=\"bp\">.</span><span class=\"n\">toTopologicalSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"o\">)</span>\n<span class=\"n\">PseudoEMetricSpace</span><span class=\"bp\">.</span><span class=\"n\">toUniformSpace</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">MeasurableSpace</span><span class=\"bp\">.</span><span class=\"n\">pi</span>\n<span class=\"w\">  </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">measurable_eq</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 444534367,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1718303859
    },
    {
        "content": "<p>What happens if you fill in the sorry? Or delete the instance in the example?I didn't think too hard but the error might be \"I can find this instance in two ways, and can't check that they're the same because this involves proving that some explicit Borel space structure is equal to <code>sorry</code>?</p>",
        "id": 444631301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718347909
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , I'm not sure how to fill in the (first) <code>sorry</code> and if I delete the instance I get<br>\n<code>failed to synthesize instance BorelSpace (ℕ → Bool)</code><br>\nWell, I can make a <code>BorelSpace (ℕ → Bool)</code> instance without problems but I get a more specific error message unless it is of the complicated form</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">BorelSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">UniformSpace</span><span class=\"bp\">.</span><span class=\"n\">toTopologicalSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">PseudoEMetricSpace</span><span class=\"bp\">.</span><span class=\"n\">toUniformSpace</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">MeasurableSpace</span><span class=\"bp\">.</span><span class=\"n\">pi</span>\n</code></pre></div>",
        "id": 444638823,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1718350425
    },
    {
        "content": "<p>To clarify, the first sorry I pasted is not an error but the second one is... which is confusing to me.</p>",
        "id": 444643473,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1718352152
    },
    {
        "content": "<p>The error says \"you put two different topological space structures on the same type\" and judging by your code with all these <code>@</code>s you seem to be doing something very non-canonical (although whether or not this is necessary in your case is currently unknown). It's very hard to give more specific help without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> .</p>",
        "id": 444643975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718352322
    },
    {
        "content": "<p>When you define a metric space instance, you should ensure that protection to uniform space agrees with the existing instance</p>",
        "id": 444706321,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1718373404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/hausdorffMeasure/near/444706321\">said</a>:</p>\n<blockquote>\n<p>When you define a metric space instance, you should ensure that protection to uniform space agrees with the existing instance</p>\n</blockquote>\n<p>I defined the \"usual\" metric on `(ℕ → Bool) at <a href=\"https://github.com/bjoernkjoshanssen/jla/blob/main/2017-pauly-fouche.lean\">https://github.com/bjoernkjoshanssen/jla/blob/main/2017-pauly-fouche.lean</a><br>\nPresumably the induced uniform structure agrees with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UniformSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Pi</span><span class=\"bp\">.</span><span class=\"n\">uniformSpace</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bool</span>\n</code></pre></div>\n<p>Would Lean accept a proof that the two structures are the same somehow? How do you give such a proof to Lean?</p>",
        "id": 444767036,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1718390853
    },
    {
        "content": "<p>There is more than one way for two things to be \"the same\", and typeclass inference (for we're not talking about \"Lean\", we're specifically talking about the typeclass inference system) will basically only recognise two things as \"the same\" if the proof is <code>rfl</code>. So you need to be careful here. If Lean can already find a uniform space structure on <code>ℕ → Bool</code> then you must not put another one on it, you can only put exactly the same one (i.e. proof is <code>rfl</code>), not even one which you can prove is the same but the proof involves rewrites or whatever.</p>",
        "id": 444781341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718396162
    },
    {
        "content": "<p>Hmm so it's impossible to define <code>hausdorffMeasure</code> on <code>ℕ → Bool</code> because <code>ℕ → Bool</code> already has a uniform structure but no metric?</p>",
        "id": 444782139,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1718396470
    },
    {
        "content": "<p>No, you can define a type synonym and put a different uniform structure on it.</p>",
        "id": 444782307,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718396523
    },
    {
        "content": "<p>Is the uniform structure mathematically equal to the one induced from the metric? If it is then just prove this, if it isn't then make a type synonym.</p>",
        "id": 444785865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718397702
    },
    {
        "content": "<p>Probably equal but not by <code>rfl</code><br>\nWhere can I  read about type synonyms?</p>",
        "id": 444792624,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1718400444
    },
    {
        "content": "<p>If they're equal mathematically, then the \"forgetful inheritance\" setup of metric spaces means that that is enough</p>",
        "id": 444793361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718400778
    },
    {
        "content": "<p>What's the metric you're using?</p>",
        "id": 444793370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718400785
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>e</mi><mrow><mi>min</mi><mo>⁡</mo><mo stretchy=\"false\">{</mo><mi>n</mi><mtext> </mtext><mo>∣</mo><mtext> </mtext><msub><mi>a</mi><mi>n</mi></msub><mo mathvariant=\"normal\">≠</mo><msub><mi>b</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow></msup></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle e^{\\min\\{n \\,\\mid\\, a_n \\ne b_n\\}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">m</span><span class=\"mtight\">i</span><span class=\"mtight\">n</span></span><span class=\"mopen mtight\">{</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mrel mtight\">∣</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord mtight\"><span class=\"mrel mtight\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight\">}</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 444800939,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1718404632
    },
    {
        "content": "<p>If the projection to <code>UniformSpace</code> agrees, then you can add <code>toUniformSpace := inferInstance</code> and <code>uniformity_dist := (proof)</code> fields to your instance.</p>",
        "id": 444801140,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1718404792
    },
    {
        "content": "<p>If you want to ensure that <code>Bornology.IsBounded</code> instance agrees with the instance for a generic pi type, then you also need <code>toBornology := inferInstance</code> and <code> cobounded_sets := (proof)</code>.</p>",
        "id": 444801269,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1718404870
    },
    {
        "content": "<p>(note: I have no time to check if either/both of these projections agree with usual instances now; if either of them doesn't agree, then I recommend using a type synonym)</p>",
        "id": 444801354,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1718404935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/hausdorffMeasure/near/444800939\">said</a>:</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>e</mi><mrow><mi>min</mi><mo>⁡</mo><mo stretchy=\"false\">{</mo><mi>n</mi><mtext> </mtext><mo>∣</mo><mtext> </mtext><msub><mi>a</mi><mi>n</mi></msub><mo mathvariant=\"normal\">≠</mo><msub><mi>b</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow></msup></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle e^{\\min\\{n \\,\\mid\\, a_n \\ne b_n\\}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">m</span><span class=\"mtight\">i</span><span class=\"mtight\">n</span></span><span class=\"mopen mtight\">{</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mrel mtight\">∣</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord mtight\"><span class=\"mrel mtight\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight\">}</span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p>Then I think you probably want a type synonym, given that this is not the usual norm we attach to pi types</p>",
        "id": 444801931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718405353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/hausdorffMeasure/near/444801931\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/hausdorffMeasure/near/444800939\">said</a>:</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>e</mi><mrow><mi>min</mi><mo>⁡</mo><mo stretchy=\"false\">{</mo><mi>n</mi><mtext> </mtext><mo>∣</mo><mtext> </mtext><msub><mi>a</mi><mi>n</mi></msub><mo mathvariant=\"normal\">≠</mo><msub><mi>b</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow></msup></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle e^{\\min\\{n \\,\\mid\\, a_n \\ne b_n\\}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">m</span><span class=\"mtight\">i</span><span class=\"mtight\">n</span></span><span class=\"mopen mtight\">{</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mrel mtight\">∣</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord mtight\"><span class=\"mrel mtight\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight\">}</span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p>Then I think you probably want a type synonym, given that this is not the usual norm we attach to pi types</p>\n</blockquote>\n<p>What's the usual norm? I'd be glad to switch to anything that works.<br>\nBy the way, I'm using<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>e</mi><mrow><mo>−</mo><mi>min</mi><mo>⁡</mo><mo stretchy=\"false\">{</mo><mi>n</mi><mtext> </mtext><mo>∣</mo><mtext> </mtext><msub><mi>a</mi><mi>n</mi></msub><mo mathvariant=\"normal\">≠</mo><msub><mi>b</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow></msup></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle e^{-\\min\\{n \\,\\mid\\, a_n \\ne b_n\\}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mop mtight\"><span class=\"mtight\">m</span><span class=\"mtight\">i</span><span class=\"mtight\">n</span></span><span class=\"mopen mtight\">{</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mrel mtight\">∣</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord mtight\"><span class=\"mrel mtight\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight\">}</span></span></span></span></span></span></span></span></span></span></span></span><br>\nsince the one I am most used to,<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mn>2</mn><mrow><mo>−</mo><mi>min</mi><mo>⁡</mo><mo stretchy=\"false\">{</mo><mi>n</mi><mtext> </mtext><mo>∣</mo><mtext> </mtext><msub><mi>a</mi><mi>n</mi></msub><mo mathvariant=\"normal\">≠</mo><msub><mi>b</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow></msup></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle 2^{-\\min\\{n \\,\\mid\\, a_n \\ne b_n\\}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mop mtight\"><span class=\"mtight\">m</span><span class=\"mtight\">i</span><span class=\"mtight\">n</span></span><span class=\"mopen mtight\">{</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mrel mtight\">∣</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord mtight\"><span class=\"mrel mtight\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight\">}</span></span></span></span></span></span></span></span></span></span></span></span><br>\nwas slightly more inconvenient to use.</p>",
        "id": 444802958,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1718406022
    },
    {
        "content": "<p>We use max-norm but we only put it on <code>α → X</code> with finite <code>α</code>. So, unless you're going to PR it to Mathlib, there is no diamond here (yet).</p>",
        "id": 444803098,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1718406107
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PiNat.dist#doc\">docs#PiNat.dist</a> for the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{...}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4369em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">...</span></span></span></span></span></span></span></span></span></span></span></span> distance.</p>",
        "id": 444803233,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1718406191
    },
    {
        "content": "<p>Probably, you need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PiNat.metricSpaceOfDiscreteUniformity#doc\">docs#PiNat.metricSpaceOfDiscreteUniformity</a></p>",
        "id": 444803360,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1718406271
    },
    {
        "content": "<p>Awesome, that takes care of the <code>hausdorffMeasure</code> problem, all that's needed is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Topology</span><span class=\"bp\">.</span><span class=\"n\">MetricSpace</span><span class=\"bp\">.</span><span class=\"n\">PiNat</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">MeasureTheory</span><span class=\"bp\">.</span><span class=\"n\">Measure</span><span class=\"bp\">.</span><span class=\"n\">Hausdorff</span>\n\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"w\">  </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">MetricSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\">  </span><span class=\"n\">PiNat</span><span class=\"bp\">.</span><span class=\"n\">metricSpaceOfDiscreteUniformity</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">μ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MeasureTheory</span><span class=\"bp\">.</span><span class=\"n\">Measure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">MeasureTheory</span><span class=\"bp\">.</span><span class=\"n\">Measure</span><span class=\"bp\">.</span><span class=\"n\">hausdorffMeasure</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 444803655,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1718406481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347475\">Bjørn Kjos-Hanssen</span> has marked this topic as resolved.</p>",
        "id": 444804334,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718406995
    }
]