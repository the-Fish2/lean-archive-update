[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">NumeralParser</span><span class=\"bp\">^</span>\n  <span class=\"kd\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Parsec.pstring</span> <span class=\"s2\">\"zero\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">Lean.Parsec.pstring</span> <span class=\"s2\">\"0\"</span>\n  <span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">NumeralParser.zero</span><span class=\"o\">)</span>  <span class=\"s2\">\"0\"</span><span class=\"bp\">.</span><span class=\"n\">iter</span>\n  <span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">Lean.Parsec.pstring</span> <span class=\"s2\">\"0\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">Lean.Parsec.pstring</span> <span class=\"s2\">\"zero\"</span><span class=\"o\">)</span> <span class=\"s2\">\"0\"</span><span class=\"bp\">.</span><span class=\"n\">iter</span>\n<span class=\"kd\">end</span> <span class=\"n\">NumeralParser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">String.reverse</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">s.toList.reverse.map</span> <span class=\"n\">Char.toString</span> <span class=\"bp\">|&gt;</span> <span class=\"bp\">.</span><span class=\"n\">join</span>\n<span class=\"k\">#eval</span> <span class=\"s2\">\"a132\"</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"bp\">=</span> <span class=\"s2\">\"231a\"</span>\n</code></pre></div>\n<p>hitting the shortcut to expand selection when cursor is at caret (^), it selects the word NumeralParser, then whole namespace first line, then entire file. it should stop at a block boundary</p>",
        "id": 411337386,
        "sender_full_name": "Alok Singh",
        "timestamp": 1704448272
    },
    {
        "content": "<p>I'm struggling to find documentation on supporting this feature, but my hunch is that it operates on the textmate grammar, which can't hope to correctly parse Lean code precisely enough for this</p>",
        "id": 411345179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704450933
    },
    {
        "content": "<p>Ah, it's <code>registerSelectionRangeProvider</code>!</p>",
        "id": 411345403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704451039
    },
    {
        "content": "<p>This is likely because Lean does not implement LSP's <code>textDocument/selectionRange</code> request.</p>",
        "id": 411733615,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1704718722
    },
    {
        "content": "<p>Ah, so this would need no change to the extension, and only to the language server?</p>",
        "id": 411739959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704721248
    },
    {
        "content": "<p>Yes, I think so. I haven't double-checked whether VS Code actually uses this request when expanding a selection, but it seems likely.</p>",
        "id": 411741457,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1704721783
    }
]