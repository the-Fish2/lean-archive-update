[
    {
        "content": "<p><a href=\"https://github.com/utensil/lean4_jupyter\">lean4_jupyter</a> is a Lean 4 Jupyter kernel via <a href=\"https://github.com/leanprover-community/repl\">repl</a>. It just released v0.0.1, an initial release that covers all basic features of <code>repl</code>.</p>\n<h2>What's already working</h2>\n<p><span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span> See it in action: <a href=\"https://nbviewer.org/github/utensil/lean4_jupyter/blob/18e8d701982d640aa443195f5ca287eec45313e3/examples/00_tutorial.ipynb?flush_cache=true\">Tutorial notebook</a>.</p>\n<p>The kernel can:</p>\n<ul>\n<li>execute Lean 4 commands (including definitions, theorems, etc.)</li>\n<li>execute Lean 4 tatics with magic like <code>%proof</code> immediately after a <code>sorry</code>ed theorem</li>\n<li>backtrack to earlier environment or proof states with magic like <code>%env 1</code> or <code>%prove 3</code></li>\n<li>support magics like <a href=\"https://nbviewer.org/github/utensil/lean4_jupyter/blob/v0.0.1/examples/01_cd.ipynb?flush_cache=true\"><code>%cd</code></a> or <a href=\"https://nbviewer.org/github/utensil/lean4_jupyter/blob/v0.0.1/examples/02_load.ipynb?flush_cache=true\"><code>%load</code></a> (loading a file)</li>\n<li>support for importing modules from projects and their dependencies, e.g. <code>Mathlib</code> ( <a href=\"https://nbviewer.org/github/utensil/lean4_jupyter/blob/v0.0.1/examples/03_import.ipynb?flush_cache=true\">demo</a> ).</li>\n</ul>\n<p>Output:</p>\n<ul>\n<li>In <code>jupyter notebook</code> and alike: echos the input annotated in <a href=\"https://github.com/cpitclaudel/alectryon?tab=readme-ov-file#as-a-library\">alectryon</a> style, at the corresponding line (not columns yet), with messages, proof states</li>\n<li>In <code>jupyter console</code> and alike: echos the input annotated in <a href=\"https://github.com/brendanzab/codespan\">codespan</a> style, at the corresponding <code>line:column</code>, with messages, proof states</li>\n<li>Raw <code>repl</code> input/output in JSON format can be inspected by click-to-expand in the WebUI.</li>\n</ul>\n<p>For what's next, check out <a href=\"https://github.com/utensil/lean4_jupyter?tab=readme-ov-file#whats-next\">TODOs in README</a>.</p>",
        "id": 439946692,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716346398
    },
    {
        "content": "<h2>Rationale</h2>\n<p>I've always wanted to do literate programming with Lean 4 in Jupyter, but Lean LSP and Infoview in VS Code has provided an immersive experience with immediate feedback, so I could never imagine a better way to interact with Lean 4, until interacting with repl makes me believe that <em>limitless backtrack</em> is another feature that best accompanies the <em>reproducible interactivity</em> of alectryon style annotations.</p>\n<p>The idea came to me in an afternoon, and I thought it's technically trivial to implement overnight thanks to repl. It took me a bit longer to work out the logistics of UX and polish the code, but it's fun to see the potential.</p>",
        "id": 439946847,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716346500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/lean4_jupyter.3A.20A.20Lean.204.20Jupyter.20kernel.20via.20repl/near/439946692\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/utensil/lean4_jupyter\">lean4_jupyter</a> is a Lean 4 Jupyter kernel via <a href=\"https://github.com/leanprover-community/repl\">repl</a>. It just released v0.0.1, an initial release that covers all basic features of <code>repl</code>.</p>\n<h2>What's already working</h2>\n<p><span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span> See it in action: <a href=\"https://nbviewer.org/github/utensil/lean4_jupyter/blob/18e8d701982d640aa443195f5ca287eec45313e3/examples/00_tutorial.ipynb?flush_cache=true\">Tutorial notebook</a>.</p>\n<p>The kernel can:</p>\n<ul>\n<li>execute Lean 4 commands (including definitions, theorems, etc.)</li>\n<li>execute Lean 4 tatics with magic like <code>%proof</code> immediately after a <code>sorry</code>ed theorem</li>\n<li>backtrack to earlier environment or proof states with magic like <code>%env 1</code> or <code>%prove 3</code></li>\n<li>support magics like <a href=\"https://nbviewer.org/github/utensil/lean4_jupyter/blob/v0.0.1/examples/01_cd.ipynb?flush_cache=true\"><code>%cd</code></a> or <a href=\"https://nbviewer.org/github/utensil/lean4_jupyter/blob/v0.0.1/examples/02_load.ipynb?flush_cache=true\"><code>%load</code></a> (loading a file)</li>\n<li>support for importing modules from projects and their dependencies, e.g. <code>Mathlib</code> ( <a href=\"https://nbviewer.org/github/utensil/lean4_jupyter/blob/v0.0.1/examples/03_import.ipynb?flush_cache=true\">demo</a> ).</li>\n</ul>\n<p>Output:</p>\n<ul>\n<li>In <code>jupyter notebook</code> and alike: echos the input annotated in <a href=\"https://github.com/cpitclaudel/alectryon?tab=readme-ov-file#as-a-library\">alectryon</a> style, at the corresponding line (not columns yet), with messages, proof states</li>\n<li>In <code>jupyter console</code> and alike: echos the input annotated in <a href=\"https://github.com/brendanzab/codespan\">codespan</a> style, at the corresponding <code>line:column</code>, with messages, proof states</li>\n<li>Raw <code>repl</code> input/output in JSON format can be inspected by click-to-expand in the WebUI.</li>\n</ul>\n<p>For what's next, check out <a href=\"https://github.com/utensil/lean4_jupyter?tab=readme-ov-file#whats-next\">TODOs in README</a>.</p>\n</blockquote>\n<p>Hi great work. I wonder if you can help me. I'm trying to call repl from c#.</p>\n<p>I can make a process calling \"cmd\" with arguments \"lake exe repl\".</p>\n<p>Then I can send data to the stdin such as {\"cmd\":\"#eval 2+3\"}\\n</p>\n<p>Unfortunately it is only sending back the replies once the repl has exited out either by closing the shell window or forcing an error such as sending \\n\\n.  I am not sure if there is a way to force it to send a reply back to the stdout as soon as I've sent one command. It seems to be holding on to the replies until the end.</p>\n<p>Are you able to shed any light on this or point to the place in your code where you send the commands and get the replies?</p>\n<p>I am using this version of repl: <a href=\"https://github.com/leanprover-community/repl\">https://github.com/leanprover-community/repl</a></p>",
        "id": 443883965,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718063235
    },
    {
        "content": "<p>Sounds like buffering problems in the way you are calling it. It certainly responds separately to each command.</p>",
        "id": 443885366,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718063923
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/jkc7agOJy_iTFyKDii6LunLx/8B47A1CE-3A43-49F8-BC4B-F47643FA2ED1.jpg\">8B47A1CE-3A43-49F8-BC4B-F47643FA2ED1.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/jkc7agOJy_iTFyKDii6LunLx/8B47A1CE-3A43-49F8-BC4B-F47643FA2ED1.jpg\" title=\"8B47A1CE-3A43-49F8-BC4B-F47643FA2ED1.jpg\"><img src=\"/user_uploads/3121/jkc7agOJy_iTFyKDii6LunLx/8B47A1CE-3A43-49F8-BC4B-F47643FA2ED1.jpg\"></a></div><p><a href=\"https://github.com/leanprover-community/repl/pull/5#discussion_r1595010942\">https://github.com/leanprover-community/repl/pull/5#discussion_r1595010942</a></p>",
        "id": 443888096,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718065215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"725689\">@Mr Proof</span> To interact with repl, I was under the working assumption that it's a \\r\\n\\r\\n ending protocol, otherwise I can't make it respond reliably. This is a recurring theme that you always need a way to know when to stop receiving and start processing. I hope this would be explicitly stablized as the protocol, because the PRed Python implementation relies on the ending <code>env</code> which is not guaranteed to be there, and Eric's proposal of using one line ending as the request/response ending will also be fragile.</p>",
        "id": 443888574,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718065583
    },
    {
        "content": "<p>Tried and still didn't work :( <br>\nI'm doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">       </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"bp\">=</span><span class=\"s2\">\"{</span><span class=\"se\">\\\"</span><span class=\"s2\">cmd</span><span class=\"se\">\\\"</span><span class=\"s2\">:</span><span class=\"se\">\\\"</span><span class=\"s2\">def x:Nat:=3</span><span class=\"se\">\\\"</span><span class=\"s2\">}</span><span class=\"err\">\\</span><span class=\"s2\">r</span><span class=\"se\">\\n</span><span class=\"err\">\\</span><span class=\"s2\">r</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"bp\">;</span>\n<span class=\"w\">        </span><span class=\"n\">writer</span><span class=\"bp\">.</span><span class=\"n\">Write</span><span class=\"o\">(</span><span class=\"n\">text</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"w\">        </span><span class=\"n\">writer</span><span class=\"bp\">.</span><span class=\"n\">Flush</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>So I must be doing something wrong. Only way so far I can get it to return a reply is to force an error for example doing three \\r\\n in a row or if I close the cmd window. Then it returns the error plus all the other replies.  Oh well. Back to the drawing board.</p>",
        "id": 443889435,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718066154
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/9QbHnR2cdyClLt7blT0Q-_5E/1CD45548-F78F-43AF-BC92-AD527F278AC6.jpg\">1CD45548-F78F-43AF-BC92-AD527F278AC6.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9QbHnR2cdyClLt7blT0Q-_5E/1CD45548-F78F-43AF-BC92-AD527F278AC6.jpg\" title=\"1CD45548-F78F-43AF-BC92-AD527F278AC6.jpg\"><img src=\"/user_uploads/3121/9QbHnR2cdyClLt7blT0Q-_5E/1CD45548-F78F-43AF-BC92-AD527F278AC6.jpg\"></a></div><p><a href=\"/user_uploads/3121/dcsM2g2xzElLlP7KNIlYK11Y/310C37B1-81FB-40C3-94CB-414D2BCDFF45.jpg\">310C37B1-81FB-40C3-94CB-414D2BCDFF45.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dcsM2g2xzElLlP7KNIlYK11Y/310C37B1-81FB-40C3-94CB-414D2BCDFF45.jpg\" title=\"310C37B1-81FB-40C3-94CB-414D2BCDFF45.jpg\"><img src=\"/user_uploads/3121/dcsM2g2xzElLlP7KNIlYK11Y/310C37B1-81FB-40C3-94CB-414D2BCDFF45.jpg\"></a></div><p>These simple code work in Python. I can't tell the difference between it and your code. I suspect that it's not that sending is not working, it's that receiving is not working, i.e. repl has responded but you didn't finish your receiving.</p>",
        "id": 443893569,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718067973
    },
    {
        "content": "<p>Can you point me at the file which sends the replies? Maybe it's just missing a \"Flush\" command. <br>\nIt could be my code but I'd just like to check.</p>",
        "id": 443899143,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718071374
    },
    {
        "content": "<p><a href=\"https://github.com/utensil/lean4_jupyter/blob/main/lean4_jupyter/repl.py\">https://github.com/utensil/lean4_jupyter/blob/main/lean4_jupyter/repl.py</a></p>",
        "id": 443904949,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718075116
    },
    {
        "content": "<p><strong>UPDATE FIXED!!!!</strong> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> (with a little help from ChatGPT)<br>\nI manage to fix it! For anyone else having this problem here is the solution:</p>\n<p>In the Main.lean file in the REPL folder add:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">printFlush</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ToString</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">getStdout</span>\n<span class=\"w\">  </span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">putStr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">out</span><span class=\"bp\">.</span><span class=\"n\">flush</span><span class=\"w\"> </span><span class=\"c1\">-- Flush the output</span>\n</code></pre></div>\n<p>Then you can change the line which prints a newline after the output as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">printFlush</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"w\"> </span><span class=\"c1\">-- easier to parse the output if there are blank lines</span>\n</code></pre></div>\n<p>Now it will flush the output appropriately. Now I just got to work out how to send multiline commands.</p>\n<p><strong>Next Tasks</strong><br>\nThe next thing on my list which I'm not sure how to do is to find a way to list all the available tactics. Ideally I would like to filter them by the ones that fit the current goals. Guess that's something I'll have to write in Lean</p>",
        "id": 444053505,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718124968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"725689\">@Mr Proof</span>, if you make a PR I'll merge it.</p>",
        "id": 444130285,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718156668
    }
]