[
    {
        "content": "<p>Lean version: 4.9.0-rc1<br>\nSystem: wsl, ubuntu 22.04<br>\nVscode version: 1.84.2<br>\n<del>mwe</del>  (update: a smaller example is in the following reply.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Vect</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">//</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Vect</span><span class=\"bp\">.</span><span class=\"n\">rep</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">Vect</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">replicate</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Vect</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vect</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">v</span>\n<span class=\"w\">  </span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">▸</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">proofs</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Vect</span><span class=\"bp\">.</span><span class=\"n\">rep_zero</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Vect</span><span class=\"bp\">.</span><span class=\"n\">rep</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">get</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">rep</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"c1\">-- ↑ just copy and paste</span>\n<span class=\"w\">  </span><span class=\"n\">generalize</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"bp\">.</span><span class=\"n\">proof_1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">replicate</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"n\">revert</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"c1\">-- apoidsfpoiasqhwe</span>\n<span class=\"w\">  </span><span class=\"n\">generalize</span><span class=\"w\"> </span><span class=\"n\">hb</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">replicate</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">  </span><span class=\"n\">replace</span><span class=\"w\"> </span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">congrArg</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">hb</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hb</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/3tpuaLmSM4T0zw3L7f_jyQ3p/Snipaste_2024-06-07_18-19-47.png\">Snipaste_2024-06-07_18-19-47.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3tpuaLmSM4T0zw3L7f_jyQ3p/Snipaste_2024-06-07_18-19-47.png\" title=\"Snipaste_2024-06-07_18-19-47.png\"><img src=\"/user_uploads/3121/3tpuaLmSM4T0zw3L7f_jyQ3p/Snipaste_2024-06-07_18-19-47.png\"></a></div><p>Note that the bug behavior is related to the comment in code, and it doesn't seem to be 100% triggered.</p>\n<p>I speculate the bug is related to cache. If I change the code(just press Enter) before the theorem, InfoView will only show one goal. But I'm not sure whether the bug is related to vscode-extension or lean's incrementality.</p>",
        "id": 443265753,
        "sender_full_name": "fonqL",
        "timestamp": 1717756636
    },
    {
        "content": "<p>(I can't reproduce on v4.8.0 BTW)</p>",
        "id": 443266931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717756993
    },
    {
        "content": "<p>Thanks, I can reproduce on master</p>",
        "id": 443276948,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717759269
    },
    {
        "content": "<p>Now I find a smaller example. It is definitely trigger now, and is less relevant to the comments.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">True</span>\n<span class=\"w\">  </span><span class=\"c1\">-- ↑ just copy and paste</span>\n<span class=\"w\">  </span><span class=\"c1\">-- It seems that the more lines of comments</span>\n<span class=\"w\">  </span><span class=\"c1\">--  the more targets can be generated.</span>\n<span class=\"w\">  </span><span class=\"c1\">-- It seems that the more lines of comments</span>\n<span class=\"w\">  </span><span class=\"c1\">--  the more targets can be generated.</span>\n<span class=\"w\">  </span><span class=\"c1\">-- It seems that the more lines of comments</span>\n<span class=\"w\">  </span><span class=\"c1\">--  the more targets can be generated.</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/flncECw9VNTghmoDwHh54W2f/Snipaste_2024-06-07_20-08-49.png\">screen shot</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/flncECw9VNTghmoDwHh54W2f/Snipaste_2024-06-07_20-08-49.png\" title=\"screen shot\"><img src=\"/user_uploads/3121/flncECw9VNTghmoDwHh54W2f/Snipaste_2024-06-07_20-08-49.png\"></a></div>",
        "id": 443281536,
        "sender_full_name": "fonqL",
        "timestamp": 1717761063
    },
    {
        "content": "<p>There is a fix up at <a href=\"https://github.com/leanprover/lean4/pull/4395\">lean#4395</a>. Note that this is purely a UI issue, subsequent tactics are not affected by these ghost goals.</p>",
        "id": 443319343,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717773697
    }
]