[
    {
        "content": "<blockquote>\n<p>not sure this is the appropriate stream for this, kindly move it if it's not</p>\n</blockquote>\n<p>I'd like to discuss contributing a couple of theorems regarding basic properties of <code>Array.swap</code>. <br>\nHere are some examples of what I'd like to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.size</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">a.size_swap</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.size_swap</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">a.swap</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there an interest in seeing these added to one of the lean libraries ... if so , what would be the most appropriate one (std, mathlib)?</p>",
        "id": 425217700,
        "sender_full_name": "Somo S.",
        "timestamp": 1709780502
    },
    {
        "content": "<p>this is will be my first ever contribution to open source lean, so I am not sure what the appropriate procedures are</p>",
        "id": 425218050,
        "sender_full_name": "Somo S.",
        "timestamp": 1709780701
    },
    {
        "content": "<p>Std.Data.Array.Lemmas, please!</p>",
        "id": 425227292,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709786902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  on what branch/version-tag should I base this change on? </p>\n<p>Everything is working fine if I base my PR on v4.6.1 but currently on v4.7.0-rc1 and main branch, I get a bunch of simplification errors. I have been able to fix all such errors successfully by simply adding <code>(config := { zetaDelta := true })</code> to almost all <code>simp</code>s and some of the <code>getElem</code> notation. Also, to make the linter happy I for example have changed the statement of some theorems in similar fashion e.g.<br>\nin v4.6.1 what was,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>in v4.7.0-rc becomes,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)[</span><span class=\"n\">j.val</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">zetaDelta</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}))</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>even though this all is working.. It's just all looking a lot uglier in v4.7.0-rc.</p>\n<p>So <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>,  on what branch/version-tag should I base my PR on?</p>",
        "id": 425333738,
        "sender_full_name": "Somo S.",
        "timestamp": 1709825424
    },
    {
        "content": "<p>By the way, here is what it looks like when based on v4.6.1</p>\n<p><a href=\"https://github.com/leanprover/std4/pull/688/files\">https://github.com/leanprover/std4/pull/688/files</a></p>",
        "id": 425336416,
        "sender_full_name": "Somo S.",
        "timestamp": 1709826146
    },
    {
        "content": "<p>For PRs to Std you just base off <code>main</code>. That is currently using <code>v4.7.0-rc2</code>.</p>",
        "id": 425411602,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709852624
    },
    {
        "content": "<p>Please don't use <code>zetaDelta</code> in new material.</p>",
        "id": 425411638,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709852634
    },
    {
        "content": "<p>Can you show a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> here of where you seem to new zetaDelta?</p>",
        "id": 425411746,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709852671
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>. I have updated PR <a href=\"https://github.com/leanprover/std4/pull/688\">std#688</a> to base it off of <code>main</code> and removed all usages of <code>zetaDelta</code> in my proofs .. I instead, simply updated the <code>simp</code> hypotheses lists as appropriate, and (to make the linter happy) I restated the theorems as in the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Array</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ### swap -/</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- üëá new hypotheses for linter</span>\n<span class=\"kd\">variable</span>\n  <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">‚Äπ</span><span class=\"n\">_</span><span class=\"o\">‚Ä∫‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">‚Äπ</span><span class=\"n\">_</span><span class=\"o\">‚Ä∫‚ü©)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">‚Äπ</span><span class=\"n\">_</span><span class=\"o\">‚Ä∫‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">‚Äπ</span><span class=\"n\">_</span><span class=\"o\">‚Ä∫‚ü©)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">swap_def_jeqi</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©)[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">swap_def_ieqj</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©)[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.size</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">swap_def_else</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">i.val</span> <span class=\"bp\">‚â†</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">j.val</span> <span class=\"bp\">‚â†</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.size</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">swap_p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"k\">if</span> <span class=\"n\">i.val</span><span class=\"bp\">=</span><span class=\"n\">p.val</span> <span class=\"k\">then</span> <span class=\"n\">j</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">j.val</span><span class=\"bp\">=</span><span class=\"n\">p.val</span> <span class=\"k\">then</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">swap_p'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)[</span><span class=\"k\">if</span> <span class=\"n\">i.val</span><span class=\"bp\">=</span><span class=\"n\">p.val</span> <span class=\"k\">then</span> <span class=\"n\">j</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">j.val</span><span class=\"bp\">=</span><span class=\"n\">p.val</span> <span class=\"k\">then</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">swap_swap_id</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">a.size_swap</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a.size_swap</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">swap_comm</span> <span class=\"o\">:</span> <span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">a.swap</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 426113974,
        "sender_full_name": "Somo S.",
        "timestamp": 1710246535
    },
    {
        "content": "<p>The PR is now ready for review. I am not exactly pleased with the names I came up with for these theorems, but please let me know if there are better names I can use or other improvements to the PR you think I can make in general.</p>\n<p>Thanks</p>",
        "id": 426200364,
        "sender_full_name": "Somo S.",
        "timestamp": 1710272663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"582386\">@Somo S.</span>, I left some comments. The proofs themselves I think can be significantly shortened.</p>",
        "id": 426224400,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710283259
    },
    {
        "content": "<p>thanks <span class=\"user-mention silent\" data-user-id=\"110524\">Scott Morrison</span> I will look over then and get back to you</p>",
        "id": 426235253,
        "sender_full_name": "Somo S.",
        "timestamp": 1710289664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  I would like some guidance on how best to state <code>get_swap_of_ne</code> <br>\nSee <a href=\"https://github.com/leanprover/std4/pull/688/files#r1523023413\">https://github.com/leanprover/std4/pull/688/files#r1523023413</a></p>",
        "id": 426313994,
        "sender_full_name": "Somo S.",
        "timestamp": 1710328978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I've pushed an update to the PR that addresses your feedback from the previous review. I've also streamlined the scope a bit by focusing on 5 core lemmas. While I was initially exploring 7, when I re-wrote some proofs I ended up not needing 2 of the lemmas. Let me know what you think when you have a chance to take another look.</p>",
        "id": 426698782,
        "sender_full_name": "Somo S.",
        "timestamp": 1710493050
    },
    {
        "content": "<p>I think the proofs are all too difficult.</p>\n<p>The first theorem proved should be <code>get_swap</code>, analogous to the existing <code>get?_swap</code>. After that, aren't all these results essentially by <code>ext</code>, followed by <code>split</code> and some minor cleanup?</p>",
        "id": 426719104,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710500354
    },
    {
        "content": "<p>(I take that back, there is apparently not an <code>ext</code> lemma for <code>Array</code>??! That is the first thing to fix.)</p>",
        "id": 426719824,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710500594
    },
    {
        "content": "<p>i.e. things should look like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ext_get</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">a.size</span> <span class=\"bp\">=</span> <span class=\"n\">b.size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.size</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">get_swap</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)[</span><span class=\"n\">k</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">hk</span> <span class=\"bp\">=</span>\n    <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">swap_swap</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">a.size</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a.swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"o\">(</span><span class=\"n\">a.size_swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"o\">(</span><span class=\"n\">a.size_swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ext_get</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">intros</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">get_swap</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">simp_all</span>\n    <span class=\"bp\">¬∑</span> <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 426720864,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710500972
    },
    {
        "content": "<p>(This is a good example of my rule: if it's at all possible that a proof could essentially be <code>by ext; simp</code>, then it should be, and the important thing to do is add the <code>@[ext]</code> and <code>@[simp]</code> rules that make it possible!)</p>",
        "id": 426721078,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710501047
    },
    {
        "content": "<p>Notice also the use of <code>Fin.cast</code> here instead of <code>‚ñ∏</code>. It works much better with the simplifier. In particular <code>(Fin.cast h i).1</code> simplifies to <code>i.1</code>.</p>",
        "id": 426721256,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710501119
    },
    {
        "content": "<p>thanks I will take a look</p>",
        "id": 426760389,
        "sender_full_name": "Somo S.",
        "timestamp": 1710514545
    },
    {
        "content": "<p>Thanks for your continued feedback <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  .. I have updated the PR yet again.  I tend to think term-based by default (because for some reason. I still consider myself fairly new to lean, so I need to get better at thinking in \"tactic mode\" ..  I appreciate your help in showing me how to improve my proving!</p>",
        "id": 426856158,
        "sender_full_name": "Somo S.",
        "timestamp": 1710560058
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 427521437,
        "sender_full_name": "Somo S.",
        "timestamp": 1710778093
    },
    {
        "content": "<p>hello <span class=\"user-mention silent\" data-user-id=\"110524\">Scott Morrison</span>, I updated the PR  using simp only as you suggested, let me know if I can improve anything else</p>",
        "id": 427522006,
        "sender_full_name": "Somo S.",
        "timestamp": 1710778246
    },
    {
        "content": "<p>I made a few more suggestions. We're hopefully getting close now, thanks for your quick engagement with the reviews!</p>",
        "id": 427598215,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710807464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  My pleasure <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  I have updated the PR removing the superfluous proofs within the first to theorem statements. This update has \"outdated\" the discussion on whether to use <code>j.val</code> vs. <code>j</code> but I figure we can just continue it on the same <a href=\"https://github.com/leanprover/std4/pull/688#discussion_r1529486228\">outdated thread</a>. I raised a <a href=\"https://github.com/leanprover/std4/pull/688#discussion_r1529586601\">comment</a> clarifying why I originally changed from <code>j</code> to <code>j.val</code></p>",
        "id": 427608941,
        "sender_full_name": "Somo S.",
        "timestamp": 1710815269
    }
]