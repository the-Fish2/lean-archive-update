[
    {
        "content": "<p>I am getting the following error message from polyrith<br>\n<code>polyrith found the following certificate, but it failed to close the goal:</code><br>\nHow should I interpret this?</p>\n<p>Interestingly, I don't get the error message when I write a bunch of <code>set</code> statements to simplify terms in the state, <code>polyrith</code> just works fine. Does polyrith refuse to work on states that are too complicated in some way?</p>",
        "id": 412294769,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1704963241
    },
    {
        "content": "<p>Hmm, perhaps the issue could be a multiplication inside a binder that is throwing the <code>linear_combination</code> call off?</p>",
        "id": 412295338,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1704963430
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">linear_combination</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h0022</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n      <span class=\"n\">Polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">prover.2</span> <span class=\"n\">Proof_Right_Idx.B</span> <span class=\"n\">CRS_Elements_Right_Idx.δ</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n          <span class=\"n\">Polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">prover.1</span> <span class=\"n\">Proof_Left_Idx.A</span> <span class=\"n\">CRS_Elements_Left_Idx.α</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n        <span class=\"n\">h0121</span> <span class=\"bp\">+</span>\n    <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span>\n              <span class=\"n\">List.sum</span>\n                <span class=\"o\">(</span><span class=\"n\">List.map</span>\n                  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n                    <span class=\"n\">Polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">prover.1</span> <span class=\"n\">Proof_Left_Idx.A</span> <span class=\"o\">(</span><span class=\"n\">CRS_Elements_Left_Idx.x_pow_times_t</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span>\n                      <span class=\"o\">(</span><span class=\"n\">Polynomial.X</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n_wit</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.X</span> <span class=\"bp\">-</span> <span class=\"n\">Polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">))))</span> <span class=\"c1\">--- failed to synthesize instance HPow</span>\n                  <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"o\">(</span><span class=\"n\">n_var</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">*</span>\n            <span class=\"n\">Polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">prover.2</span> <span class=\"n\">Proof_Right_Idx.B</span> <span class=\"n\">CRS_Elements_Right_Idx.δ</span><span class=\"o\">))</span> <span class=\"bp\">-</span>\n        <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">Polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">prover.2</span> <span class=\"n\">Proof_Right_Idx.B</span> <span class=\"n\">CRS_Elements_Right_Idx.δ</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n          <span class=\"n\">List.sum</span>\n            <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">prover.1</span> <span class=\"n\">Proof_Left_Idx.A</span> <span class=\"o\">(</span><span class=\"n\">CRS_Elements_Left_Idx.q</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">w_wit</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"n\">n_wit</span><span class=\"o\">)))</span> <span class=\"bp\">*</span>\n      <span class=\"n\">h1122</span>\n</code></pre></div>",
        "id": 412296063,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1704963683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> has marked this topic as resolved.</p>",
        "id": 412296072,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704963687
    },
    {
        "content": "<p>I usually see this when I try polyrith on types that aren't \"fully-featured\", eg the certificate requires division but I'm actually in Z (although obviously this could be made to work as it's a domain, but I digress)</p>",
        "id": 412298359,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704964498
    },
    {
        "content": "<p>Can you minimise?</p>",
        "id": 412300518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704965240
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">10</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">10</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">polyrith</span>\n</code></pre></div>",
        "id": 412302674,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1704965955
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">polyrith</span> <span class=\"n\">found</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">certificate</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">it</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">close</span> <span class=\"n\">the</span> <span class=\"n\">goal</span><span class=\"o\">:</span>\n<span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"bp\">↑</span><span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 412302702,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1704965970
    },
    {
        "content": "<p>Does <code>((a : Fin 37) : Nat)</code> work instead?</p>",
        "id": 412302867,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704966022
    },
    {
        "content": "<p>No same error.</p>",
        "id": 412302947,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1704966059
    },
    {
        "content": "<p>It seems the <code>↑</code> is messing it up. I feel like whenever I copy paste something from the infoview to the file it's often this that breaks.</p>",
        "id": 412303011,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1704966089
    },
    {
        "content": "<p><code>linear_combination c * h + a ^ ((10 : Fin 37) : ℕ) * h2</code> does close the goal, so it does look like it's an up-arrow issue.</p>",
        "id": 412303219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704966161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> has marked this topic as unresolved.</p>",
        "id": 412303315,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704966197
    },
    {
        "content": "<p>Is there any way to fix this, perhaps by forking <code>polyrith</code> and making some small tweak? For that matter, is there a way to make it so that casts that the infoview displays are displayed as <code>(x : T)</code> rather than <code>↑x</code>?</p>",
        "id": 412849791,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1705269422
    },
    {
        "content": "<p>For numeric literals, <a href=\"https://github.com/leanprover/lean4/pull/2933\">lean4#2933</a> gives <code>pp.numericTypes</code> to make numbers pretty print with type ascriptions, though that might not help here.</p>\n<p>For <code>↑</code> in general, that's controlled by <a href=\"https://github.com/leanprover/std4/blob/main/Std/Tactic/CoeExt.lean\">https://github.com/leanprover/std4/blob/main/Std/Tactic/CoeExt.lean</a> and it doesn't have any option to pretty print type ascriptions (yet?).</p>",
        "id": 412850391,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705270050
    },
    {
        "content": "<p>Type ascriptions aren't the same as coercions, so maybe it would need to pretty print as <code>(↑(x : T1) : T2)</code> to be accurate.</p>",
        "id": 412850469,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705270117
    }
]