[
    {
        "content": "<p>In Chapter 3 of <em>Theorem proving in Lean</em> is found the following </p>\n<blockquote>\n<p>the type Prop is syntactic sugar for Sort 0, the very bottom of the type hierarchy described in the last chapter. [...] Prop has some special features, but like the other type universes, it is closed under the arrow constructor</p>\n</blockquote>\n<p>Where can one find out about these \"some special features\" of Prop?</p>",
        "id": 417450630,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1706018175
    },
    {
        "content": "<p>I’ve found this helpful:  <a href=\"https://lean-forward.github.io/logical-verification/2018/41_notes.html\">https://lean-forward.github.io/logical-verification/2018/41_notes.html</a>  (The syntax is Lean 3, but I think all or most of the ideas still apply.)</p>",
        "id": 417464308,
        "sender_full_name": "Jason Rute",
        "timestamp": 1706022018
    },
    {
        "content": "<p>Also some of this is talked about in TPIL, especially in the chapter about axioms.</p>",
        "id": 417464502,
        "sender_full_name": "Jason Rute",
        "timestamp": 1706022083
    },
    {
        "content": "<p>One special feature of <code>Prop</code> is that if <code>P : Prop</code> and <code>p : P</code> and <code>q : P</code>, then <code>p = q</code> (this is a definitional equality). In other words, any two proofs of the same statement are equal. As a consequence, proofs don't actually contain data.</p>",
        "id": 417480519,
        "sender_full_name": "Niels Voss",
        "timestamp": 1706026660
    },
    {
        "content": "<p>Another special feature is that terms like <code>forall n : Nat, P n</code> have type <code>Prop</code>. If <code>Prop</code> didn't have special handling, then this would instead have type <code>Type</code></p>",
        "id": 417481249,
        "sender_full_name": "Niels Voss",
        "timestamp": 1706026876
    },
    {
        "content": "<p>Note, this first property mentioned by <span class=\"user-mention\" data-user-id=\"521331\">@Niels Voss</span> is called \"proof irrelevance\" in TPiL, and is discussed in the chapter 3 you are reading.  It indeed makes <code>Prop</code> behave very different from <code>Type</code>.  (And to be clear, the property is not called \"definitional equality\", but I think Neils is saying in Lean it is implemented via a definitional equality rule.)</p>",
        "id": 417481861,
        "sender_full_name": "Jason Rute",
        "timestamp": 1706027029
    },
    {
        "content": "<p>The second one is called impredicativity, as far as I remember</p>",
        "id": 417484590,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706027799
    },
    {
        "content": "<p>Thanks for the explanations and pointers. I'll need some time to digest. If one wants to go down the rabbit hole and learn more, what are some good resources?</p>",
        "id": 417562246,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1706061743
    },
    {
        "content": "<p>Theorem Proving in Lean is a pretty good resource to learn about these types of things. In particular, you should look at the chapter on axioms and computation.</p>\n<p>In general, both of these are very important, but it takes a while to understand why. I would also try to understand the difference between <code>Inhabited</code> and <code>Nonempty</code>, since both types look the same but one lies in <code>Type</code> (or at least the same level as the type you provide as input) and the other is in <code>Prop</code>.</p>",
        "id": 417568945,
        "sender_full_name": "Niels Voss",
        "timestamp": 1706066787
    },
    {
        "content": "<p>Lucky me, it looks like the 2023 version of <em><a href=\"https://lean-forward.github.io/hitchhikers-guide/2023/\">The Hitchhiker’s Guide to Logical Verification</a></em> covers these things in Chapter 12! This will keep me busy for a while.</p>",
        "id": 417626650,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1706096072
    }
]