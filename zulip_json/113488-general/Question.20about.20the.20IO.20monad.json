[
    {
        "content": "<p>I haven't used lean since Lean3 and have been trying to get back into it. I'm currently trying to relearn how monads work and was playing around with some toy code which is throwing errors at me, but I can't for the life of me understand how to fix it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"enter a line of text:\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdin</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStdin</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">stdin.getLine</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">fifth</span> <span class=\"bp\">←</span> <span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"input not long enough\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">fifth</span>\n</code></pre></div>\n<p>I think it's pretty clear what I want the code to do - it should read in a user entered line of text, and then attempt to print it's 5th character, provided it is long enough to have a 5th character.</p>\n<p>The error shows up  at <code>input[6]?</code>and says</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch\n  input[6]?\nhas type\n  Option ?m.280 : Type\nbut is expected to have type\n  IO ?m.274 : Type\n</code></pre></div>\n<p>I suppose the error is caused because bind wants to take in an <code>IO (Option String)</code>, not an <code>Option String</code>, which, fair enough. But if that's the case, does that mean I can never nest the Option monad into the IO monad? I saw this in the lean manual:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">showUserInfo</span> <span class=\"o\">(</span><span class=\"n\">getUsername</span> <span class=\"n\">getFavoriteColor</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">String</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">getUsername</span> <span class=\"bp\">|</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"no username!\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"username: {n}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">getFavoriteColor</span> <span class=\"bp\">|</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"user didn't provide a favorite color!\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"favorite color: {c}\"</span>\n</code></pre></div>\n<p>and I thought: \"a-ha! If I just write a function of type <code>String  -&gt; IO (Option String)</code> that takes a string and optionally returns it's 5th character, maybe I can fix this\". Here's what I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fifth</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"input: {str}\"</span> <span class=\"c1\">-- this is just to demonstrate that it is using the IO monad</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"c1\">-- this is the part I really care about</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"enter a line of text:\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdin</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStdin</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">stdin.getLine</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">fifth</span> <span class=\"n\">input</span> <span class=\"bp\">|</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Input not long enough\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>However, while now <code>main</code> has no complaints, inexplicably <code>str[6]?</code> also throws an error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to synthesize instance\n  GetElem String Nat String (?m.358 str x✝)\n</code></pre></div>\n<p>which I have no clue how to interpret! If someone could please explain what I can do to make this code do what I want, I would really appreciate it! Thanks :)</p>",
        "id": 431241758,
        "sender_full_name": "Dhruv Bhatia",
        "timestamp": 1712215560
    },
    {
        "content": "<p>In your first example, you want <code>let some fifth := _</code> not <code>let some fifth ← _</code>; the latter is for when you need to run a monad, but that's not what you have here</p>",
        "id": 431245787,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712216611
    },
    {
        "content": "<p>Just tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"enter a line of text:\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdin</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStdin</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">stdin.getLine</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">fifth</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Input not long enough\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">fifth</span>\n</code></pre></div>\n<p>but there's still an error! At <code>input[6]?</code> it says</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to synthesize instance\n  GetElem String Nat ?m.244 ?m.245\n</code></pre></div>\n<p>which seems like a similar error to my second example above. Any idea what's going on here?</p>",
        "id": 431249237,
        "sender_full_name": "Dhruv Bhatia",
        "timestamp": 1712217670
    },
    {
        "content": "<p>The <code>String</code> type doesn't have the necessary type-classes to use the <code>foo[n]</code> notation. You could either use the function <code>input.get? ⟨6⟩</code>, or add an instance for the notation. Such a notation would look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">GetElem</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"n\">Char</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.1.length</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">getElem</span> <span class=\"n\">xs</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">xs.data</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 431250499,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1712218060
    },
    {
        "content": "<p>Wow! I guess I never considered the possibility that this instance didn't already exist! Thanks for the help, this fixed it!</p>",
        "id": 431251119,
        "sender_full_name": "Dhruv Bhatia",
        "timestamp": 1712218293
    },
    {
        "content": "<p>This is a bit sad. Does anyone know an explanation for why there isn't such an instance? Seems like something newcomers will try!</p>",
        "id": 431276293,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712225219
    },
    {
        "content": "<p>Two things: (1) I think it should not take character positions, it should be a byte offset like everything else in the string API (this design is I think borrowed from Rust). But: (2) We don't currently have any way of determining whether a byte position is valid. This would need to be implemented in the C code.</p>",
        "id": 431277001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712225496
    },
    {
        "content": "<p>indexing by character position is slow because it requires counting up from the bottom of the string. As such I think it's okay that it has the relatively long spelling <code>s.get (s.nextn 0 i)</code></p>",
        "id": 431277206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712225581
    },
    {
        "content": "<p>I believe Rust deliberately omits the <code>str[i]</code> indexing syntax though, because this issue with some positions not being valid is a footgun. It's almost never okay to just pick a number and index into the string there, and this is why <code>String.Pos</code> doesn't allow numerals other than <code>0</code></p>",
        "id": 431277510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712225708
    },
    {
        "content": "<p>I wonder if we could do something crazy like provide a dummy deprecated GetElem instance, so <code>s[37]?</code> always returned <code>?</code> or something, but in doing so gave a message explaining what one should be doing.</p>",
        "id": 431279159,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712226396
    },
    {
        "content": "<p>I would love this as an API designer</p>",
        "id": 431281300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712227216
    },
    {
        "content": "<p>like an erroring version of <code>@[deprecated]</code></p>",
        "id": 431281325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712227226
    },
    {
        "content": "<p>Does <code>@[deprecated]</code> work on instances?</p>",
        "id": 431281363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712227245
    },
    {
        "content": "<p>not really</p>",
        "id": 431281377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712227254
    },
    {
        "content": "<p>the thing that triggers the deprecation check is the ident parser</p>",
        "id": 431281430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712227279
    },
    {
        "content": "<p>so if you didn't write it directly you won't get a deprecation message</p>",
        "id": 431281458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712227293
    },
    {
        "content": "<p>which is kind of a problem when you are trying to use deprecation to find and convert all uses</p>",
        "id": 431281498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712227313
    },
    {
        "content": "<p>we should probably have a backup deprecation linter as an environment linter</p>",
        "id": 431281661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712227369
    },
    {
        "content": "<p>Is this related to deprecation not triggering when the lemma is used through dot notation?</p>",
        "id": 431281725,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712227398
    },
    {
        "content": "<p>yes, but I think it does trigger in that case?</p>",
        "id": 431281764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712227417
    },
    {
        "content": "<p>I've encountered a few cases where it didn't this week, but I wouldn't be able to tell you where <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 431281890,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712227452
    },
    {
        "content": "<p>just tested, still broken (on lean4 master too)</p>",
        "id": 431281977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712227487
    },
    {
        "content": "<p>Can't the deprecation linter inspect the infotree somehow?</p>",
        "id": 431282944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712227877
    },
    {
        "content": "<p>it's not actually a linter, that's the thing</p>",
        "id": 431283892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712228250
    },
    {
        "content": "<p>it's the <code>elab</code> itself that does the check and pretends to be a linter</p>",
        "id": 431283934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712228270
    },
    {
        "content": "<p>I'm not exactly sure why it was implemented this way. Maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> knows</p>",
        "id": 431284120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712228347
    },
    {
        "content": "<p>(this is also the source of another bug, mentioned in a TODO in the code: if the identifier is ambiguous and is resolved by the types, it may be too late to take back the deprecation warning if the second attempt is successful and the first attempt is to a deprecated constant)</p>",
        "id": 431284427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712228453
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">A.foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">B.foo</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello\"</span>\n<span class=\"kn\">open</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"c1\">-- B.foo : String</span>\n<span class=\"c1\">-- `A.foo` has been deprecated</span>\n</code></pre></div>",
        "id": 431284798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712228587
    },
    {
        "content": "<p>It was probably easier to implement it this way but I wasn't involved</p>",
        "id": 431286583,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1712229241
    },
    {
        "content": "<p>I was thinking it might predate the linter system</p>",
        "id": 431286917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712229359
    },
    {
        "content": "<p>do you think it would be reasonable to (submit a PR to) convert it to a linter (and maybe add some other features to it in the process)? There were several independent suggestions for improvement just now here and in the <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431285179\">other thread</a></p>",
        "id": 431287382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712229521
    },
    {
        "content": "<p>Gathering these in an RFC would be a good first step</p>",
        "id": 431304963,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1712234810
    }
]