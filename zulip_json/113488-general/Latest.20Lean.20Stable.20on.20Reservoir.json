[
    {
        "content": "<p>Is this expected? I assume that an rc releases are not stable.</p>\n<p><a href=\"/user_uploads/3121/ixbXHikQNHr9PPf2evRvIpT8/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ixbXHikQNHr9PPf2evRvIpT8/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ixbXHikQNHr9PPf2evRvIpT8/image.png\"></a></div>",
        "id": 443288530,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717763451
    },
    {
        "content": "<p>I set the release to pre-release now, ideally we should automate that /cc <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span></p>",
        "id": 443294362,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717765441
    },
    {
        "content": "<p>Another unrelated observation:</p>\n<p><a href=\"/user_uploads/3121/w9XlY0ushgqaRzoMobVRTYGB/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/w9XlY0ushgqaRzoMobVRTYGB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/w9XlY0ushgqaRzoMobVRTYGB/image.png\"></a></div><p>This is due to</p>\n<p><a href=\"/user_uploads/3121/lnX27dwwI2RzSov9EzXxnDPx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lnX27dwwI2RzSov9EzXxnDPx/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/lnX27dwwI2RzSov9EzXxnDPx/image.png\"></a></div><p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>  Is there a better mechanism to determine the package name? Names like these make me worry about more serious package naming confliction issues than other package registries.</p>",
        "id": 443315380,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717772259
    },
    {
        "content": "<p>I have also seen names like <code>examples</code>, <code>render</code>, <code>workshop</code>, <code>Game</code> where the repo is more seriously named but the package is named very casually.</p>\n<p><a href=\"/user_uploads/3121/oHrBajNjRuFRiHYfrcgLJ9Mk/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/oHrBajNjRuFRiHYfrcgLJ9Mk/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/oHrBajNjRuFRiHYfrcgLJ9Mk/image.png\"></a></div>",
        "id": 443315951,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717772422
    },
    {
        "content": "<p>And a third unrelated observation is that <a href=\"https://github.com/leanprover-community/repl\">https://github.com/leanprover-community/repl</a> is not on Reservoir , which is a surprise.</p>",
        "id": 443316246,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717772521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Latest.20Lean.20Stable.20on.20Reservoir/near/443315380\">said</a>:</p>\n<blockquote>\n<p>Is there a better mechanism to determine the package name? Names like these make me worry about more serious package naming confliction issues than other package registries.</p>\n</blockquote>\n<p>I asked this recently here <a href=\"https://github.com/leanprover/reservoir/issues/34\">reservoir#34</a> and I guess something I figured from the answer is that all these marked entries should eventually vanish from reservoir in a future update of reservoir  as they aren't really providing packages one can import.</p>\n<p>Regarding <code>repl</code>, I think it misses a License file and therefore cannot be included.</p>",
        "id": 443317683,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1717773069
    },
    {
        "content": "<p>In that case, maybe in future there would be a linter for package naming so we would not be seeing this scene on the front page of reservor.</p>\n<p>Scoped naming maybe a good approach, as npm is also using it.</p>",
        "id": 443319900,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717773922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> package names are scoped by owner, so Reservoir conflicts can only occur within one. A linter seems like a good diea, but creating good heuristic is hard. Things like <code>lib</code> and <code>examples</code> are easy to mark, <code>render</code> less so.</p>\n<p>It is also worth noting that these names would also make the package difficult to require as downstreams users can only require one package with  each distinct name.</p>",
        "id": 443322372,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717774882
    },
    {
        "content": "<p>Yes, I actually mean being able to require packages in a scoped way to avoid name confliction.</p>",
        "id": 443322731,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717775017
    }
]