[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Option.elim#doc\">docs#Option.elim</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Option.elim%27#doc\">docs#Option.elim'</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Option.casesOn%27#doc\">docs#Option.casesOn'</a> which are all basically the same function. My understanding of the naming convention around recursors was that</p>\n<ul>\n<li><code>∀ o : Option α, motive none → (∀ a : α, motive (some a)) → motive o</code> is <code>Option.rec</code> (correct <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span>)</li>\n<li><code>motive none → (∀ a : α, motive (some a)) → ∀ o : Option α, motive o</code> is <code>Option.recOn</code> (correct <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span>)</li>\n<li><code>Option α → β → (α → β) → β</code> is <code>Option.casesOn</code> (wrong <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span>, currently it's called <code>Option.casesOn'</code> and also <code>Option.elim</code>)</li>\n<li><code>β → (α → β) → Option α → β</code> is <code>Option.elim</code> (wrong <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span>, currently it's called <code>Option.elim'</code>)</li>\n</ul>",
        "id": 424607742,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709543339
    },
    {
        "content": "<p>.. the general pattern being that</p>\n<ul>\n<li>the suffix <code>On</code> indicates that the inductive type argument comes first</li>\n<li><code>rec</code> indicates a dependent recursor</li>\n<li><code>elim</code>/<code>cases</code> indicate a non-dependent recursor</li>\n</ul>",
        "id": 424607969,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709543437
    },
    {
        "content": "<p>Is there any opposition to cleaning up the current mess? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I will need your approval since <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Option.elim#doc\">docs#Option.elim</a> is now in Std (but not the other two, somehow)</p>",
        "id": 424608080,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709543487
    },
    {
        "content": "<p>Also, why is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Option.elim#doc\">docs#Option.elim</a> simp?</p>",
        "id": 424611354,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709544668
    },
    {
        "content": "<p>As far as I know, <code>T.elim</code> has always been used conventionally for the non-dependent version of <code>T.recOn</code>. There is no <code>T.elimOn</code></p>",
        "id": 424708545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709573228
    },
    {
        "content": "<p><del>docs#Sum.elim and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.elim\">docs3#option.elim</a> contradict that claim</del></p>",
        "id": 424708914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709573337
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Option.elim#doc\">docs#Option.elim</a> matches <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sum.elim#doc\">docs#Sum.elim</a>, so I think <code>Option.elim'</code> should probably go (which is a porting artefact)</p>",
        "id": 424709067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709573386
    },
    {
        "content": "<p>No I think your first claim was correct and existing functions are inconsistent:</p>\n<ul>\n<li><code>Option.elim</code> is nondependent <code>Option.recOn</code></li>\n<li><code>Option.elim'</code> is nondependent <code>Option.rec</code></li>\n<li><code>Sum.elim</code> is nondependent <code>Sum.rec</code></li>\n</ul>",
        "id": 424709729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709573595
    },
    {
        "content": "<p>Can someone do a census of all <code>T.elim</code> functions?</p>",
        "id": 424709972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709573665
    },
    {
        "content": "<p>My claim is that <code>Sum.elim</code> is pretty heavily used as a definition for building vectors, where the argument order has to be this way around, and so must be the \"right\" one</p>",
        "id": 424710658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709573895
    },
    {
        "content": "<p><code>Option.elim'</code> is what <code>option.elim</code> got renamed to in the port</p>",
        "id": 424710776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709573924
    },
    {
        "content": "<p>We <a href=\"#narrow/stream/113488-general/topic/option.2Eelim/near/278748002\">discussed this all before</a></p>",
        "id": 424710897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709573955
    },
    {
        "content": "<p>The example with <code>option.cons</code> from that thread shows that similar reasoning also applies to <code>Option</code></p>",
        "id": 424711415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709574140
    },
    {
        "content": "<p>I definitely agree that when you want to partially apply the function putting the major premise last is always the right answer</p>",
        "id": 424711530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709574187
    },
    {
        "content": "<p>and moreover that nondependent eliminators are particularly good for partial application</p>",
        "id": 424711604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709574222
    },
    {
        "content": "<p>the main reason to want the major premise to come first is when using it as a poor-man's <code>match</code> statement you want to specify the scrutinee before the branches</p>",
        "id": 424711769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709574290
    },
    {
        "content": "<p>You can avoid this issue when using dot-notation since in that case it doesn't matter, but if you want to specify the full name of the function or use <code>@</code> then dot-notation is not available</p>",
        "id": 424712006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709574368
    },
    {
        "content": "<p>Using named arguments also allows you to manually reorder arguments (I do this <em>so much</em> for <code>Array.foldl</code>, I want the <code>init</code> argument first), but it means we should probably also be sure to name the major premise and name it consistently (currently neither <code>Option.elim</code> nor <code>Sum.elim</code> names the major premise)</p>",
        "id": 424712150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709574437
    },
    {
        "content": "<p>you also want to name the minor premises if you want it to be usable with <code>induction</code>/<code>cases</code>, although TBH I've never tried this with nondependent recursors and I'm not sure if it works</p>",
        "id": 424712555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709574597
    }
]