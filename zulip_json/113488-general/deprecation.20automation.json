[
    {
        "content": "<p>Dear All,</p>\n<p>a few times the question arose of what is the \"correct deprecation syntax\".  What do you think of adding something like what is below to get some approximately standardized answer to this question?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.TryThis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Alias</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"depr \"</span> <span class=\"n\">newId</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">oldId</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">newId.getId</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"'{newId.getId}' has already been declared\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">oldId</span> <span class=\"n\">none</span>\n    <span class=\"n\">Std.Tactic.TryThis.addSuggestion</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"bp\">$</span><span class=\"n\">newId</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">oldId</span><span class=\"o\">))</span>\n\n<span class=\"n\">depr</span> <span class=\"n\">oldName</span> <span class=\"n\">Nat</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Try this: @[deprecated]</span>\n<span class=\"cm\">alias oldName := Nat</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 422776195,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708593440
    },
    {
        "content": "<p>Isn't it easier to use text snippets?</p>",
        "id": 422964541,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708674256
    },
    {
        "content": "<p>At least in Emacs, they can insert current date.</p>",
        "id": 422964570,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708674283
    },
    {
        "content": "<p>I guess, VSCode has a similar functionality.</p>",
        "id": 422964583,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708674297
    },
    {
        "content": "<p>What I had in mind was something that would (eventually) also be able to figure out what the old name to be deprecated was and be aware of auto-generated declarations associated with the initial declaration.</p>\n<p>A prototype of this is <a href=\"https://github.com/leanprover-community/mathlib4/pull/10864\">#10864</a>: it does not work as well as I would like yet, but it is aware, for instance of the fact that <code>@[to_additive]</code> adds two declarations to the environment and proposes to deprecate both.</p>",
        "id": 422966851,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708675422
    },
    {
        "content": "<p>The command currently behaves as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- write `deprecate to` and a sequence of names before the declaration to deprecate</span>\n<span class=\"n\">deprecate</span> <span class=\"n\">to</span> <span class=\"n\">good_mul</span> <span class=\"n\">good_add</span>\n<span class=\"sd\">/-- I also have a doc-string -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"s2\">\"As do I\"</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">aDeprecatable_mul</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Try this:</span>\n<span class=\"cm\">/-- I also have a doc-string -/</span>\n<span class=\"cm\">  @[to_additive \"As do I\"]</span>\n<span class=\"cm\">  theorem aDeprecatable_mul : True :=</span>\n<span class=\"cm\">    .intro</span>\n<span class=\"cm\">  @[deprecated]</span>\n<span class=\"cm\">  alias aDeprecatable_mul := good_mul</span>\n<span class=\"cm\">  @[deprecated]</span>\n<span class=\"cm\">  alias aDeprecatable_add := good_add</span>\n</code></pre></div>\n<p>There are currently 3 main issues:</p>\n<ul>\n<li>the suggested \"repeat\" command still uses the old name, not the new one;</li>\n<li>the date is not inserted;</li>\n<li>the formatting of the suggested output is not ideal.</li>\n</ul>",
        "id": 422967747,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708675892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/deprecation.20automation/near/422964570\">said</a>:</p>\n<blockquote>\n<p>At least in Emacs, they can insert current date.</p>\n</blockquote>\n<p>Yes, this is possible in VSCode as well and, in fact, the copyright snippet inserts the current year automatically.</p>",
        "id": 422968119,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708676065
    },
    {
        "content": "<p>I fixed (somewhat hackily) the issues that were present with the deprecation tool.  Now, it works as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deprecate</span> <span class=\"n\">to</span> <span class=\"n\">id₁</span> <span class=\"n\">id₂</span> <span class=\"bp\">...</span> <span class=\"n\">idₙ</span> <span class=\"s2\">\"2024-02-23\"</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">easy</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n</code></pre></div>\n<p>produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">easy</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n\n<span class=\"c1\">-- 2024-02-23</span>\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">easy</span> <span class=\"o\">:=</span> <span class=\"n\">id₁</span>\n\n<span class=\"c1\">-- 2024-02-23</span>\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">d₂</span> <span class=\"o\">:=</span> <span class=\"n\">id₂</span>\n<span class=\"bp\">...</span>\n\n<span class=\"c1\">-- 2024-02-23</span>\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">dₙ</span> <span class=\"o\">:=</span> <span class=\"n\">idₙ</span>\n</code></pre></div>\n<p>assuming that <code>easy</code> autogenerated <code>n</code> non-blacklisted declarations (e.g. <code>to_additive</code> ones).</p>\n<p>There is still a small issue with namespaces (i.e. the tool is unaware of them).  Other than that, it is up for review!</p>\n<p>Also, since it auto-eliminates itself, any major bugs should not affect much: once the deprecations are placed in, the command disappears.</p>",
        "id": 423059064,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708708237
    },
    {
        "content": "<p>Following a suggestion of <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>, I've updated the deprecation tool of <a href=\"https://github.com/leanprover-community/mathlib4/pull/10864\">#10864</a>.  Now it stays in-place and it is essentially a macro that expands</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deprecate_to</span> <span class=\"n\">id₁</span> <span class=\"n\">id₂</span> <span class=\"bp\">...</span> <span class=\"n\">idₙ</span> <span class=\"mi\">2024</span><span class=\"bp\">-</span><span class=\"mi\">02</span><span class=\"bp\">-</span><span class=\"mi\">23</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">easy₁</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">easy₁</span> <span class=\"o\">:=</span> <span class=\"n\">id₁</span>\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">easy₂</span> <span class=\"o\">:=</span> <span class=\"n\">id₂</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">easyₙ</span> <span class=\"o\">:=</span> <span class=\"n\">idₙ</span>\n</code></pre></div>\n<p>This has the advantage of</p>\n<ul>\n<li>reducing duplication,</li>\n<li>automatically taking care of finding the auto-generated lemmas and</li>\n<li>having the date as part of the syntax.</li>\n</ul>\n<p>In particular, using this tool, the date must be present and, if this is desired, the tool may stop autogenerating the deprecated aliases automatically once a certain grace period has passed (this is not implemented).</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11195\">#11195</a> applies the tool in a couple of places, to showcase its usage.</p>",
        "id": 424984972,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709685998
    },
    {
        "content": "<p>Do you have an example with multiple <code>idₙ</code>s?</p>",
        "id": 424985191,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709686147
    },
    {
        "content": "<p>I failed to parse the one in your message above.</p>",
        "id": 424985215,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709686165
    },
    {
        "content": "<p>Ah, good point!  I will update the PR: my main use-case was deprecating a lemma tagged with <code>to_additive</code>.</p>",
        "id": 424985242,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709686197
    },
    {
        "content": "<p>(There are tests in the PR that use <code>to_additive</code> already, but I will look for a \"real-world\" example.)</p>",
        "id": 424985312,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709686228
    },
    {
        "content": "<p>In any case, the first <code>id₁</code> matches the name shown in the declaration.  The others line up (randomly) with the remaining auto-generated declarations.  You can check what the order is by using <code>deprecate_to! ...</code>: you get a table of what the pairings are and you can update as you want.</p>",
        "id": 424985510,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709686330
    },
    {
        "content": "<p>Very nice! :) (Btw, as the suggester I feel obligated to say that I do like the macro, but given that it was one of two suggestions, I'm not sure which the community will like best (if either)! :) )</p>\n<p>One possible issue with it (which admittedly I'm just thinking through now, apologies) is that it seems to leave the deprecated theorem as the actual theorem, so that we wind up with <code>theorem old_foo ...</code> in source. I suspect we want the source code to be biased towards the current situation, so that we wind up with <code>theorem new_foo ...</code> and a deprecation-based command nearby.</p>\n<p>One way to achieve this would be to simply invert things: we have something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deprecating</span> <span class=\"n\">old_mul_foo</span> <span class=\"n\">old_add_foo</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">new_mul_foo</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>(Not sure how much work this would be, apologies for suggesting more.)</p>\n<p>I also wonder if the assignments should be in source just in case e.g. the decls later get generated in different orders due to e.g. changes to the internals of <code>@[to_additive]</code>. So maybe it would look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deprecating</span> <span class=\"n\">old_mul_foo</span> <span class=\"k\">with</span> <span class=\"n\">old_add_foo</span> <span class=\"o\">:=</span> <span class=\"n\">new_add_foo</span><span class=\"o\">,</span> <span class=\"n\">old_other_bar</span> <span class=\"o\">:=</span> <span class=\"n\">new_other_bar</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">new_mul_foo</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>or some other syntax, I'm not sure.</p>\n<p>I also think there's room for automation here (though I don't know if it would be in the same PR)! In that case it would be nice to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deprecating</span><span class=\"bp\">?</span> <span class=\"n\">old_mul_foo</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">new_mul_foo</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and get a clickable suggestion of how many assignments you need and what the pairings should be. (We could even maybe guess the old names by replacing <code>new_mul_foo</code> with <code>old_mul_foo</code> and seeing what the environment would be?)</p>\n<p>What do you think?</p>",
        "id": 424987584,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709687767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, I looked around, but it seems that <code>to_additive</code> already handles the <code>deprecated</code> attribute, so the gain for multiple declarations arising from <code>to_additive</code> is slightly diminished, as you have to write the old additivized name manually: it would be an extra twist to make the deprecation tool handle automatically the <code>to_additive</code> name-replacement.</p>",
        "id": 424988107,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709688167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>, if I understand correctly, the name that is visible in the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deprecate_to</span> <span class=\"n\">depr_name</span> <span class=\"n\">date</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">new_name</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>is already as you say, right?  The <code>theorem new_name</code> is the name that should stay, the one that should disappear is the one on the line above.  Or maybe I misunderstood your comment!  (EDIT: the original version of the PR started with the \"wrong\" name appearing and replaced it with the \"correct\" one as a Try this suggestion.  The newer version starts with the \"correct\" syntax already present.)</p>",
        "id": 424988243,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709688257
    },
    {
        "content": "<p>Also, currently, the multi-name assignment is mostly a non-issue: it is a struggle to find lemmas that generate more than one extra declaration, and I would have to think hard before I can find one that auto-generated 2 new ones and is deprecated!</p>",
        "id": 424988316,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709688334
    },
    {
        "content": "<p>As for the ordering issue, I also think that a simpler approach would be to match the identifiers that the user types with the new environment declarations in the following order:</p>\n<ul>\n<li>first, the one that is actually in the source syntax;</li>\n<li>next, all the remaining ones in alphabetical order.</li>\n</ul>\n<p>This way, the two orders are fixed: the user one on one hand and the (almost) alphabetical on the other hand.  The tool does give an option to show what the assignment is, so the user can tweaks the names that they provide to adjust to the auto-generated ones.</p>",
        "id": 424988604,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709688578
    },
    {
        "content": "<p>(But, as I said, more than 2 declarations per lemma is really rare and, with up to two declarations, there is no ambiguity in the ordering.)</p>",
        "id": 424988696,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709688630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/deprecation.20automation/near/424988243\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span>, if I understand correctly, the name that is visible in the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deprecate_to</span> <span class=\"n\">depr_name</span> <span class=\"n\">date</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">new_name</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>is already as you say, right?  The <code>theorem new_name</code> is the name that should stay, the one that should disappear is the one on the line above.  Or maybe I misunderstood your comment!  (EDIT: the original version of the PR started with the \"wrong\" name appearing and replaced it with the \"correct\" one as a Try this suggestion.  The newer version starts with the \"correct\" syntax already present.)</p>\n</blockquote>\n<p>Oh, ok, is the PR description/comment above out of date? Currently it says that given</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deprecate_to</span> <span class=\"n\">bar</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">…</span>\n</code></pre></div>\n<p>we get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n</code></pre></div>\n<p>which would deprecate <code>foo</code>.</p>",
        "id": 424991256,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709690434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/deprecation.20automation/near/424988604\">said</a>:</p>\n<blockquote>\n<p>As for the ordering issue, I also think that a simpler approach would be to match the identifiers that the user types with the new environment declarations in the following order:</p>\n<ul>\n<li>first, the one that is actually in the source syntax;</li>\n<li>next, all the remaining ones in alphabetical order.</li>\n</ul>\n<p>This way, the two orders are fixed: the user one on one hand and the (almost) alphabetical on the other hand.  The tool does give an option to show what the assignment is, so the user can tweaks the names that they provide to adjust to the auto-generated ones.</p>\n</blockquote>\n<p>Ah, ok, that makes sense! (I didn’t really have a sense of how frequently this would be used for deprecating multiple generated declarations. :) ) (There’s some extant order on <code>Name</code> which makes this easy, right?)</p>",
        "id": 424991588,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709690673
    },
    {
        "content": "<p>Yes, the comment above talks about the old version of the PR: this started with the \"unwanted\" syntax and, via a <code>Try this</code> converted it to the \"wanted\" one.</p>",
        "id": 424991600,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709690685
    },
    {
        "content": "<p>The ordering is not implemented, but, at worst, it can go via alphabetical in <code>Name.toString</code>.</p>",
        "id": 424991755,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709690769
    },
    {
        "content": "<p>Ah, maybe it’s just a definition and not an instance of anything? (I could swear there’s something out there that I’ve encountered before…)</p>",
        "id": 424991865,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709690846
    },
    {
        "content": "<p>Sorry, by \"not implemented\", I meant \"not implemented in the PR\".  Certainly the order is there already in Core/Std.</p>",
        "id": 424991977,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709690903
    },
    {
        "content": "<p>Ah, gotcha!</p>",
        "id": 424992465,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709691234
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10864\">#10864</a> just received a positive comment: can I ping this PR for some further comments?</p>\n<p>Thanks!</p>",
        "id": 427201340,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710704142
    },
    {
        "content": "<p>I’ll try to give it a proper review today or tomorrow, looking forward to it landing soon if there are no objections! :)</p>",
        "id": 427240092,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710714392
    },
    {
        "content": "<p>(Also I expect there might be further discussion on whether to keep it as a macro or not, so I’ll try to make this simply a “technical” review on the rest of the code if no consensus is reached before I review it. That way it’s at least just the one remaining question.)</p>",
        "id": 427241333,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710714699
    },
    {
        "content": "<p>Thomas, thank you for the offer to review!  As you will see from the PR comments, Scott is not too positive about the PR.</p>\n<p>I wonder whether making it an attribute as <code>@[deprecate! old_name YYY-MM-DD]</code> would be better.  Where the <code>!</code> means, create the alias as well.</p>\n<p>So there would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- currently available</span>\n<span class=\"kd\">@[</span><span class=\"n\">deprecate</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">x</span> <span class=\"bp\">...</span> <span class=\"c1\">-- simply deprecate, do not propose a replacement version</span>\n<span class=\"kd\">@[</span><span class=\"n\">deprecate</span> <span class=\"n\">new_name</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">x</span> <span class=\"bp\">...</span> <span class=\"c1\">-- deprecate, proposing `new_name`</span>\n\n<span class=\"c1\">-- extension</span>\n<span class=\"kd\">@[</span><span class=\"n\">deprecate</span><span class=\"bp\">!</span> <span class=\"n\">old_name</span> <span class=\"n\">YYY</span><span class=\"bp\">-</span><span class=\"n\">MM</span><span class=\"bp\">-</span><span class=\"n\">DD</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">x</span> <span class=\"bp\">...</span> <span class=\"c1\">-- create an alias and deprecate `old_name`</span>\n</code></pre></div>\n<p>There is an asymmetry in this approach in that the deprecation tag goes on the <em>new</em> lemma, rather than the old one, but there is no need for the explicit <code>alias</code> to be present in the code.</p>",
        "id": 427371830,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710747576
    },
    {
        "content": "<p>I guess I don't understand what problem this is solving. Could you explain what is not working or unpleasant about the current setup?</p>",
        "id": 427373440,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710747937
    },
    {
        "content": "<p>For me, these were the main motivations.</p>\n<ul>\n<li>Avoid having to write a separate <code>alias</code> command, that is completely determined once you know the new lemma name and the old one.  Also, there were several questions on Zulip about how to correctly deprecate a lemma and fixing an easy-to-remember \"standard\" seemed helpful.</li>\n<li>The date is part of the syntax.</li>\n<li>As a mild stylistic bonus, I like that <code>deprecate x</code> means that <code>x</code> is deprecated, as opposed to something like <code>prefer x</code>.</li>\n</ul>\n<p>I initially also thought that it would be useful with auto-generated lemma names (which it is), but it turned out that <code>to_additive</code> already has a deprecation flag and <code>to_additive</code> is the biggest source of autogenerated names that should really be deprecated as a whole.</p>",
        "id": 427377832,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710748909
    },
    {
        "content": "<p>Ah, great, not having to write the <code>alias</code> is what I was missing.</p>",
        "id": 427378183,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710748973
    },
    {
        "content": "<p>As long as you're sure avoiding creating too many ways to say the same thing, then I remove my objection!</p>\n<p>(Can we forbid or discourage the old style with an alias??)</p>",
        "id": 427378456,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710749038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/deprecation.20automation/near/427378456\">said</a>:</p>\n<blockquote>\n<p>As long as you're sure avoiding creating too many ways to say the same thing, then I remove my objection!</p>\n<p>(Can we forbid or discourage the old style with an alias??)</p>\n</blockquote>\n<p>I cannot be sure, but the new syntax seems easier to remember than having to add a separate <code>alias</code> command.</p>\n<p>As for \"deprecating the deprecation alias\", I can look into it: since it is a Std extension, I am pretty sure that we can make it so that if the deprecate alias has an actual syntax reference, then it might emit a warning.  I have not thought about it carefully, though.</p>",
        "id": 427378973,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710749144
    },
    {
        "content": "<p>Or simply, the <code>deprecated alias</code> emits a warning and the \"preferred syntax\" catches the warining.</p>",
        "id": 427379534,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710749257
    },
    {
        "content": "<p>I also don't really understand the motivation. You say \"Avoid having to write a separate alias command, that is completely determined once you know the new lemma name and the old one\" but <code>alias</code> asks for very little information beyond the old and new names. I don't see much benefit in a separate syntax for the same thing, and the attribute syntax is more limited in the other metadata you can provide (e.g. docstrings).</p>",
        "id": 427379775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710749303
    },
    {
        "content": "<p>I don't think you can deprecate the <code>@[deprecated] alias</code> syntax since your new syntax only works when the lemma to be deprecated is defined in the same file as the lemma it is deprecated to</p>",
        "id": 427379979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710749341
    },
    {
        "content": "<p>These are all fair points.  In fact, in my initial proposal I had a <code>Try this</code> that took the <em>old</em> command and the new name and did the renaming and the writing of the alias command.</p>",
        "id": 427380794,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710749522
    },
    {
        "content": "<p>However, it then evolved into hiding the \"boiler-plate syntax\" and this is its current form.  So, my conclusion is:</p>\n<ul>\n<li>the <code>Try this</code> was nice, but maybe not too useful;</li>\n<li>the new macro version is nice, but it is limited enough that it may not be a good replacement for \"deprecate alias\".</li>\n</ul>",
        "id": 427381540,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710749680
    },
    {
        "content": "<p>Since I \"re-sparked\" this discussion, let me weigh in. My personal motivation was ergonomics: I did the renamings and was <em>then</em> asked to add the deprecations (which meant having to go over the whole diff and having to switch between the diff and VS Code to actually make the change). And reading up on/cargo-culting the deprecation syntax first.</p>\n<p>Having to write or copy-paste a long name twice was a tad annoying... but thinking again, that was actually not so bad and I don't see such a strong case any more.</p>",
        "id": 427410333,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710755180
    },
    {
        "content": "<p>I wonder, however, if there's a way to automate the deprecation in a different way:</p>\n<ul>\n<li>can we have a code action for deprecating a lemma (which uses the syntax will have agreed on), and</li>\n<li>can the <em>rename handler</em> trigger this code action?<br>\nThis would solve all the issues for me while avoiding this particular bikeshed about a new tool.</li>\n</ul>",
        "id": 427410364,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710755186
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/13206\">#13206</a> for a code snippet which I found useful</p>",
        "id": 440633541,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716640807
    }
]