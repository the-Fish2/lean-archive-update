[
    {
        "content": "<p>Hi all,</p>\n<p>I wanted to know if there was an online chat for SMT solvers. While we're at it I would also like to know if there is an SMT solver that can solve the following </p>\n<p>Construct a list with a 100 elements such that list has only 2 elements equal to 1</p>\n<p>Best,<br>\nVatsa</p>",
        "id": 434472110,
        "sender_full_name": "Srivatsa Srinivas",
        "timestamp": 1713591047
    },
    {
        "content": "<p>SMT solvers like Z3 do have a theory of inductive data types so I'd guess you can certainly define this constraint</p>",
        "id": 434483024,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1713602316
    },
    {
        "content": "<p>Not sure if this what you meant by \"online chat\", or if the answer is at all correct, but: <a href=\"https://chat.openai.com/share/d1046f16-61fb-41e2-a189-033b17c6e0cb\">https://chat.openai.com/share/d1046f16-61fb-41e2-a189-033b17c6e0cb</a></p>",
        "id": 434486193,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713605604
    },
    {
        "content": "<p>Or do you mean something like this Zulip, but for discussing SMT solvers.</p>",
        "id": 434492668,
        "sender_full_name": "Jason Rute",
        "timestamp": 1713612076
    },
    {
        "content": "<p>z3 has an online playground here: <a href=\"https://microsoft.github.io/z3guide/playground/Freeform%20Editing/\">https://microsoft.github.io/z3guide/playground/Freeform%20Editing/</a></p>",
        "id": 434494526,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713613778
    },
    {
        "content": "<p>(for submitting code to be run, not for talking to other humans)</p>",
        "id": 434494545,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713613800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20an.20online.20chat.20for.20SMT.20solvers.3F/near/434492668\">said</a>:</p>\n<blockquote>\n<p>Or do you mean something like this Zulip, but for discussing SMT solvers.</p>\n</blockquote>\n<p>Yep!</p>",
        "id": 434520241,
        "sender_full_name": "Srivatsa Srinivas",
        "timestamp": 1713634442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20an.20online.20chat.20for.20SMT.20solvers.3F/near/434483024\">said</a>:</p>\n<blockquote>\n<p>SMT solvers like Z3 do have a theory of inductive data types so I'd guess you can certainly define this constraint</p>\n</blockquote>\n<p>That is true, but is there a concrete reference to a solver that can actually solve the above problem with a list of length 100? Other people online showed me examples in z3 which work when the list length is small, about 10 elements long</p>",
        "id": 434520330,
        "sender_full_name": "Srivatsa Srinivas",
        "timestamp": 1713634543
    },
    {
        "content": "<p>The are constraint solvers.  I don’t know much, but I think they handle stuff like this.</p>",
        "id": 434525812,
        "sender_full_name": "Jason Rute",
        "timestamp": 1713639350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"688984\">Srivatsa Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Is.20there.20an.20online.20chat.20for.20SMT.20solvers.3F/near/434520330\">said</a>:</p>\n<blockquote>\n<p>That is true, but is there a concrete reference to a solver that can actually solve the above problem with a list of length 100? Other people online showed me examples in z3 which work when the list length is small, about 10 elements long</p>\n</blockquote>\n<p>surely prolog should be able to do this?</p>",
        "id": 434662497,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1713767443
    },
    {
        "content": "<p>Here's a naive, first-attempt prolog solution:</p>\n<div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code><span class=\"c1\">% Base case.</span>\n<span class=\"nf\">ocurrenceof</span><span class=\"p\">([],</span> <span class=\"k\">_</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">).</span>\n\n<span class=\"c1\">% Count the head of the list</span>\n<span class=\"nf\">ocurrenceof</span><span class=\"p\">([</span><span class=\"nv\">H</span><span class=\"p\">|</span><span class=\"nv\">T</span><span class=\"p\">],</span> <span class=\"nv\">H</span><span class=\"p\">,</span> <span class=\"nv\">NewCount</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n    <span class=\"nf\">ocurrenceof</span><span class=\"p\">(</span><span class=\"nv\">T</span><span class=\"p\">,</span> <span class=\"nv\">H</span><span class=\"p\">,</span> <span class=\"nv\">OldCount</span><span class=\"p\">),</span>\n    <span class=\"nv\">NewCount</span> <span class=\"o\">is</span> <span class=\"nv\">OldCount</span> <span class=\"o\">+</span> <span class=\"mf\">1.</span>\n\n<span class=\"c1\">% Don't Count the head of the list</span>\n<span class=\"nf\">ocurrenceof</span><span class=\"p\">([</span><span class=\"nv\">H</span><span class=\"p\">|</span><span class=\"nv\">T</span><span class=\"p\">],</span> <span class=\"nv\">H2</span><span class=\"p\">,</span> <span class=\"nv\">Count</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n    <span class=\"nf\">dif</span><span class=\"p\">(</span><span class=\"nv\">H</span><span class=\"p\">,</span> <span class=\"nv\">H2</span><span class=\"p\">),</span>\n    <span class=\"nf\">ocurrenceof</span><span class=\"p\">(</span><span class=\"nv\">T</span><span class=\"p\">,</span> <span class=\"nv\">H2</span><span class=\"p\">,</span> <span class=\"nv\">Count</span><span class=\"p\">).</span>\n\n<span class=\"c1\">% Query for a list of length 100 with two occurrences of 1</span>\n<span class=\"s s-Atom\">?-</span>  <span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"nv\">MyList</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"nf\">ocurrenceof</span><span class=\"p\">(</span><span class=\"nv\">MyList</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>which will find  lot of solutions. Something like 4950 solutions — one for each unique way you can place two 1s in a list of length 100. The first solution looks like (The ... just means \"and so on\"):</p>\n<div class=\"codehilite\" data-code-language=\"Prolog\"><pre><span></span><code><span class=\"nv\">MyList</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">_</span><span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"k\">_</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"k\">_</span><span class=\"nv\">C</span><span class=\"p\">,</span> <span class=\"p\">...],</span>\n<span class=\"nf\">dif</span><span class=\"p\">(</span><span class=\"k\">_</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"nf\">dif</span><span class=\"p\">(</span><span class=\"k\">_</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"nf\">dif</span><span class=\"p\">(</span><span class=\"k\">_</span><span class=\"nv\">C</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>\n</code></pre></div>\n<p>So, that's conclusive proof that Prolog can do this. </p>\n<hr>\n<p>Mind you, I'm sure prolog has a compiled version of <code>ocurrenceof</code> that would run this MUCH faster (This is pretty slow for me).  I'm also certain that somebody who didn't last use Prolog 10+ years ago could do this with more elegance and style.</p>",
        "id": 434817051,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1713809765
    }
]