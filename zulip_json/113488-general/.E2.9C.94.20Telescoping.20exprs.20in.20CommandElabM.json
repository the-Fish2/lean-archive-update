[
    {
        "content": "<p>Hello, as an exercise using the elaborator and commands, I would like to create a command that takes the name of a theorem and lists the unused hypotheses, similar to the unused variables linter. Here's what I have so far,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#checkHyps \"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">env.constants.toList</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">name.getId</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">c.value</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">continue</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">conclusion</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">val</span>\n      <span class=\"n\">for</span> <span class=\"n\">e</span> <span class=\"k\">in</span> <span class=\"n\">args</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">conclusion.getUsedConstantsAsSet.contains</span> <span class=\"bp\">`</span><span class=\"n\">e</span> <span class=\"k\">then</span>\n          <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{e} not used in proof of {name}\"</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">hypsTest</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n\n<span class=\"bp\">#</span><span class=\"n\">checkHyps</span> <span class=\"n\">hypsTest</span>\n</code></pre></div>\n<p>I get an error under the <code>forallMetaTelescopeReducing</code> stating,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">val</span> <span class=\"n\">none</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">BinderInfo</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">CommandElabM</span> <span class=\"bp\">?</span><span class=\"n\">m.454</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I uinderstand this to mean I'm in the wrong monad. Is there some way to do telescoping of exprs in the CommandElabM monad?</p>",
        "id": 438140323,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715468909
    },
    {
        "content": "<p>You probably want to use <code>find?</code> rather than looping over <code>toList</code> there, as it will be much faster</p>",
        "id": 438141887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715471283
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.liftTermElabM#doc\">docs#Lean.Elab.Command.liftTermElabM</a> will let you jump into the right monad</p>",
        "id": 438141922,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715471320
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 438141972,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715471403
    },
    {
        "content": "<p>Here's a start:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#checkHyps \"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">realizeGlobalConstNoOverloadWithInfo</span> <span class=\"n\">name</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">c.type</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">c.value</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"constant {n} has no value\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{n} has type{indentD type}</span><span class=\"se\">\\n</span><span class=\"s2\">and value{indentD val}\"</span>\n</code></pre></div>",
        "id": 438142189,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715471708
    },
    {
        "content": "<p>The <code>...WithInfo</code> function resolves the name and makes <code>hypsTest</code> in <code>#checkHyps hypsTest</code> hoverable in the source code.</p>",
        "id": 438142243,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715471764
    },
    {
        "content": "<p>I copy pasted, but I get an <code>unknown identifier 'realizeGlobalConstNoOverloadWithInfo'</code> error. I did a search for  \"realizeGlobalConstNoOverloadWithInfo\" on the documentation page and it lives in <code>Lean.Elab.InfoTree.Main</code> but adding <code>import Lean.Elab.InfoTree.Main</code> did nothing, which makes sense I think, since I already have <code>import Lean</code>. What am I missing?</p>",
        "id": 438146055,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715476198
    },
    {
        "content": "<p>This works though,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#checkHyps \"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">name.getId</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">c.type</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">c.value</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"constant {name} has no value\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{name} has type{indentD type}</span><span class=\"se\">\\n</span><span class=\"s2\">and value{indentD val}\"</span>\n</code></pre></div>",
        "id": 438146440,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715476582
    },
    {
        "content": "<p>It means you're on an older version of Lean. I think it used to be <code>resolveGlobalConstNoOverloadWithInfo</code>.</p>",
        "id": 438146478,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715476636
    },
    {
        "content": "<p>Yeah that worked. I'll do a <code>Lake update</code>.</p>",
        "id": 438146582,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715476745
    },
    {
        "content": "<p>I did a <code>lake update</code>but <code>resolveGlobalConstNoOverloadWithInfo</code> still works while <code>realizeGlobalConstNoOverloadWithInfo</code> still fails. I have to wonder if it's because I'm using windows. <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span> </p>\n<p>Anyway, I've broken the problem down,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.InfoTree.Main</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#proof_contains \"</span> <span class=\"n\">thmName</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">termName</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstNoOverloadWithInfo</span> <span class=\"n\">thmName</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstNoOverloadWithInfo</span> <span class=\"n\">termName</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">c.type</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">c.value</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"constant {n} has no value\"</span>\n  <span class=\"k\">if</span> <span class=\"n\">val.getUsedConstantsAsSet.contains</span> <span class=\"n\">m</span> <span class=\"k\">then</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"The proof of {thmName} contains {termName}.\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"The proof of {thmName} does not contain {termName}.\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#list_hyps \"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstNoOverloadWithInfo</span> <span class=\"n\">name</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">c.value</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"constant {n} has no value\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"val has value {indentD val}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">c.type</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"type has value {indentD type}\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">typeArgs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">typeConclusion</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">type</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"the conclusion has value {indentD typeConclusion}\"</span>\n  <span class=\"n\">for</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">type.getForallBinderNames</span> <span class=\"k\">do</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"this arg has value {indentD l}\"</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pctest</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pctest'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">pctest</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">hypsTest</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n\n<span class=\"bp\">#</span><span class=\"n\">proof_contains</span> <span class=\"n\">pctest</span> <span class=\"n\">pctest'</span>\n<span class=\"bp\">#</span><span class=\"n\">proof_contains</span> <span class=\"n\">pctest'</span> <span class=\"n\">pctest</span>\n<span class=\"bp\">#</span><span class=\"n\">proof_contains</span> <span class=\"n\">pctest'</span> <span class=\"n\">g</span> <span class=\"c1\">--unknown constant 'g'</span>\n\n<span class=\"bp\">#</span><span class=\"n\">list_hyps</span> <span class=\"n\">pctest</span>\n<span class=\"bp\">#</span><span class=\"n\">list_hyps</span> <span class=\"n\">hypsTest</span>\n</code></pre></div>\n<p><code>#proof_contains </code> determines whether the proof of one theorem uses another theorem, and <code>#list_hyps</code> lists the names of the hypotheses of a theorem. However, when I do a <code>lambdaMetaTelescope</code> on the value expr of a theorem, I lose the name of the hypotheses and I'm just left with metavariables. </p>\n<p>Is there some way to pull the names out of the conclusion expr of a lambda expression after using <code>lambdaMetaTelescope</code>?</p>",
        "id": 438163131,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715496593
    },
    {
        "content": "<p>It seems like you want <code>forallTelescopeReducing</code> instead</p>",
        "id": 438193189,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715528821
    },
    {
        "content": "<p>Then for the <code>val</code> you can do <code>val.beta args</code> to substitute in all the argument fvars you get from <code>forallTelescopeReducing</code>. Using <code>lambdaTelescope</code> would be brittle here, depending on actual lambda expressions appearing for the arguments (this is not a safe assumption)</p>",
        "id": 438193269,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715528899
    },
    {
        "content": "<p>Here's where I'm at now,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#checkHyps \"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"c1\">--let n ← realizeGlobalConstNoOverloadWithInfo name</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">name.getId</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">c.type</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">c.value</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"constant {name} has no value\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">typeArgs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">typeConclusion</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">type</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">conclusion</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"o\">(</span><span class=\"n\">val.beta</span> <span class=\"n\">typeArgs</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"conclusion {indentD conclusion}\"</span>\n  <span class=\"n\">for</span> <span class=\"n\">e</span> <span class=\"k\">in</span> <span class=\"n\">typeArgs</span> <span class=\"k\">do</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"The hypotheses contain: {indentD e}\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">checkHyps</span> <span class=\"n\">hypsTest</span>\n</code></pre></div>\n<p>This outputs the conclusion with the named metavariables, and a bunch of named metavariables from the hypotheses. Is there a way to determine if an expression contains  a particular metavariable? Or is there a way to pull the name out of a named metavariable?</p>",
        "id": 438218283,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715554858
    },
    {
        "content": "<p>It took me a while, but I've got something working,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">containsMvar</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mv</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">mv.isMVar</span> <span class=\"k\">then</span>\n    <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n                <span class=\"k\">let</span> <span class=\"n\">inP</span> <span class=\"bp\">←</span> <span class=\"n\">containsMvar</span> <span class=\"n\">P</span> <span class=\"n\">mv</span>\n                <span class=\"k\">let</span> <span class=\"n\">inQ</span> <span class=\"bp\">←</span> <span class=\"n\">containsMvar</span> <span class=\"n\">Q</span> <span class=\"n\">mv</span>\n                <span class=\"n\">return</span> <span class=\"n\">inP</span> <span class=\"bp\">||</span> <span class=\"n\">inQ</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">id</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">mv.mvarId</span><span class=\"bp\">!</span> <span class=\"bp\">==</span> <span class=\"n\">id</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"mv is not a metavariable\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#checkHyps\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"c1\">--let n ← realizeGlobalConstNoOverloadWithInfo name</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">name.getId</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">c.type</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">c.value</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"constant {name} has no value\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">typeArgs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">typeConclusion</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">type</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">conclusion</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"o\">(</span><span class=\"n\">val.beta</span> <span class=\"n\">typeArgs</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"conclusion {indentD conclusion}\"</span>\n  <span class=\"n\">for</span> <span class=\"n\">e</span> <span class=\"k\">in</span> <span class=\"n\">typeArgs</span> <span class=\"k\">do</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"The hypotheses contain: {indentD e}\"</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">containsMvar</span> <span class=\"n\">conclusion</span> <span class=\"n\">e</span> <span class=\"k\">then</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"The proof of {name} contains {indentD e}\"</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"The proof of {name} does not contain {indentD e}\"</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pctest</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pctest'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">pctest</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">hypsTest</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n\n<span class=\"bp\">#</span><span class=\"n\">checkHyps</span> <span class=\"n\">hypsTest</span>\n<span class=\"bp\">#</span><span class=\"n\">checkHyps</span> <span class=\"n\">pctest</span>\n<span class=\"bp\">#</span><span class=\"n\">checkHyps</span> <span class=\"n\">pctest'</span>\n</code></pre></div>\n<p>Is there something in the library that can replace <code>containsMvar</code> in the code above?</p>\n<p>I'll keep working on this later.</p>",
        "id": 438229931,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715566916
    },
    {
        "content": "<p>I think I've finally completed this exercise to my satisfaction,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">containsMvar</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mv</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">mv.isMVar</span> <span class=\"k\">then</span>\n    <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>         <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n                <span class=\"k\">let</span> <span class=\"n\">inP</span> <span class=\"bp\">←</span> <span class=\"n\">containsMvar</span> <span class=\"n\">P</span> <span class=\"n\">mv</span>\n                <span class=\"k\">let</span> <span class=\"n\">inQ</span> <span class=\"bp\">←</span> <span class=\"n\">containsMvar</span> <span class=\"n\">Q</span> <span class=\"n\">mv</span>\n                <span class=\"n\">return</span> <span class=\"n\">inP</span> <span class=\"bp\">||</span> <span class=\"n\">inQ</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">id</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">mv.mvarId</span><span class=\"bp\">!</span> <span class=\"bp\">==</span> <span class=\"n\">id</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">_</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n                <span class=\"k\">let</span> <span class=\"n\">inP</span> <span class=\"bp\">←</span> <span class=\"n\">containsMvar</span> <span class=\"n\">P</span> <span class=\"n\">mv</span>\n                <span class=\"k\">let</span> <span class=\"n\">inQ</span> <span class=\"bp\">←</span> <span class=\"n\">containsMvar</span> <span class=\"n\">Q</span> <span class=\"n\">mv</span>\n                <span class=\"n\">return</span> <span class=\"n\">inP</span> <span class=\"bp\">||</span> <span class=\"n\">inQ</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"mv is not a metavariable\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#checkHyps\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"c1\">--let n ← realizeGlobalConstNoOverloadWithInfo name</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">name.getId</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">c.type</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">c.value</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"constant {name} has no value\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">typeArgs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">typeConclusion</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">type</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">conclusion</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"o\">(</span><span class=\"n\">val.beta</span> <span class=\"n\">typeArgs</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"conclusion {indentD conclusion}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">conclusionType</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">conclusion</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"conclusion type: {indentD conclusionType}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">eList</span> <span class=\"bp\">←</span> <span class=\"n\">typeArgs.toList.mapM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">containsMvar</span> <span class=\"n\">conclusion</span> <span class=\"n\">e</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n     <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">nextelist</span> <span class=\"bp\">←</span> <span class=\"n\">eList.mapM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"k\">do</span>\n      <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">,</span><span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">eList</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"n\">b'</span> <span class=\"k\">then</span>\n          <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e'</span>\n          <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">containsMvar</span> <span class=\"n\">l</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n            <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">nextelist</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"The proof of {name} does contain {indentD e} : {← inferType e}\"</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"The proof of {name} does not contain {indentD e} : {← inferType e}\"</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Expr.getUsedConstants</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pctest</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pctest'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">pctest</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">hypsTest</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n\n<span class=\"bp\">#</span><span class=\"n\">checkHyps</span> <span class=\"n\">hypsTest</span>\n<span class=\"bp\">#</span><span class=\"n\">checkHyps</span> <span class=\"n\">pctest</span>\n<span class=\"bp\">#</span><span class=\"n\">checkHyps</span> <span class=\"n\">pctest'</span>\n</code></pre></div>\n<p>I think maybe it could be better, but I'm still going to give myself full marks. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<p>I pretty happy, thanks for the help. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 438463738,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715640626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209436\">Lucas Allen</span> has marked this topic as resolved.</p>",
        "id": 438463776,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715640646
    }
]