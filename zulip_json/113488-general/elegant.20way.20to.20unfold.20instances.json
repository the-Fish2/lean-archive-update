[
    {
        "content": "<p>I find myself unfolding a lot of type classes when proving basic theorems about a new operation. Is there a more elegant way to do it? An example for what I mean looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">unitInterval</span>\n\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">unitDiv</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Div</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"bp\">/</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">unitInterval</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h_lt</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">h_one</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">HDiv</span><span class=\"bp\">.</span><span class=\"n\">hDiv</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">instHDiv</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Div</span><span class=\"bp\">.</span><span class=\"n\">div</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">unitDiv</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h_one</span><span class=\"w\"> </span><span class=\"c1\">-- more elegant for this one?</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">dite_eq_ite</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ite_eq_right_iff</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h_one</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span><span class=\"w\"> </span><span class=\"c1\">-- more clever proof</span>\n</code></pre></div>",
        "id": 444014637,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1718115850
    },
    {
        "content": "<p>Write <code>lemma div_def (i j : I) : i / j = if h : i &lt; j then ⟨i/j, sorry⟩ else 1 := rfl</code> and, more specifically to that case, <code>@[simp, norm_cast] lemma coe_div : ↑(i / j) = if h : i &lt; j then (i / j : ℝ) else 1 := by rw [div_def]; split_ifs &lt;;&gt; rfl</code></p>",
        "id": 444015366,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718116007
    },
    {
        "content": "<p>Makes a nice change to have 1/0=1 :-)</p>",
        "id": 444037873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718121203
    },
    {
        "content": "<p>Thats the adjoint of * in the interval [0,1] <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 444038279,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1718121303
    }
]