[
    {
        "content": "<p><a href=\"https://lean-lang.org/lean4/doc/lean3changes.html#sugar-for-simple-functions\">https://lean-lang.org/lean4/doc/lean3changes.html#sugar-for-simple-functions</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- this notation.</span>\n<span class=\"c1\">-- syntax sugar of lambda expression</span>\n<span class=\"kd\">def</span> <span class=\"n\">sample</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>what should we call this function of Lean4? I have never seen this feature called by its short name.<br>\n\"sugar for simple function\" is the official name?</p>",
        "id": 434404782,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713547103
    },
    {
        "content": "<p>I call this function \"Emoji-like lambda expression\" usually...</p>",
        "id": 434405552,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713547470
    },
    {
        "content": "<p>my mind jumped to dot-notation, but that's a different thing...</p>",
        "id": 434405823,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1713547616
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 434406048,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713547722
    },
    {
        "content": "<p>these are emoji-like!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sample</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"c1\">-- cute</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sample1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">-</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"c1\">-- cute</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sample2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">^</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"c1\">-- cute</span>\n</code></pre></div>",
        "id": 434406702,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713548060
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 434406868,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713548137
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 434409025,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713549117
    },
    {
        "content": "<p>In the code it's just referred to as the cdot parser. I don't think it has any official name</p>",
        "id": 434413931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713551207
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Term.cdot#doc\">docs#Lean.Parser.Term.cdot</a> uses the name \"implicit lambda abstraction\", although this sounds too similar to <code>fun {x y} =&gt; _</code> implicit lambdas</p>",
        "id": 434414251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713551352
    },
    {
        "content": "<p>In error messages, it's called \"<code>·</code> notation\" (cdot notation). I sometimes call them \"anonymous lambdas\" but I don't like that name. \"Cdot function\" seems reasonable.</p>",
        "id": 434414461,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713551452
    },
    {
        "content": "<p>I know there are other languages with a similar feature, but I can't remember what they are -- what do they call it?</p>",
        "id": 434414714,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713551585
    },
    {
        "content": "<p>Haskell has <code>(+)</code> which I think are called \"sections\"</p>",
        "id": 434414913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713551696
    },
    {
        "content": "<p>named after the categorical notion IIUC</p>",
        "id": 434414939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713551712
    },
    {
        "content": "<p>There are languages that have this style where placeholders are considered in left-to-right order, like perhaps <code>(# + # * #)</code> or <code>(_ + _ * _)</code>, though they might require a sigil to indicate where the lambda is supposed to be.</p>",
        "id": 434415190,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713551823
    },
    {
        "content": "<p>oh yes scala has something like that</p>",
        "id": 434415227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713551841
    },
    {
        "content": "<p>You know that <code>_</code> is sometimes called hole. The cdot in this notation shall simply be referred to as cdot?</p>",
        "id": 434415484,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713551945
    },
    {
        "content": "<p><a href=\"https://www.geeksforgeeks.org/placeholder-syntax-in-scala/\">https://www.geeksforgeeks.org/placeholder-syntax-in-scala/</a> suggests it's called \"placeholder syntax\", although this terminology sounds specific to the usage of underscore (which has many other meanings in scala as well)</p>",
        "id": 434415641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713552007
    },
    {
        "content": "<p>in lean there are basically two usages of cdot, this one and the one in tactic syntax for focusing goals</p>",
        "id": 434415743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713552054
    },
    {
        "content": "<p>and in both cases you can use <code>.</code> in place of <code>·</code> (so it's not necessarily a cdot \"central dot\")</p>",
        "id": 434415800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713552086
    },
    {
        "content": "<blockquote>\n<p>oh yes scala has something like that</p>\n</blockquote>\n<p>Yeah, Scala must be one of the languages I've seen this in.</p>\n<p>I found that PureScript has <code>(_ * 2)</code>, <code>(2 * _)</code>, <code>(_ * _)</code> for sections. I'm not sure how much this generalizes to other expressions, but it does work for records as well.</p>",
        "id": 434415878,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713552118
    },
    {
        "content": "<blockquote>\n<p>so it's not necessarily a cdot \"central dot\"</p>\n</blockquote>\n<p>Too bad \"dot function\" could also mean things like <code>.cons</code>, etc.</p>",
        "id": 434416039,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713552168
    },
    {
        "content": "<p>It makes sense to call the cdot in this notation a \"placeholder dot\" (similar to \"focusing dot\").</p>",
        "id": 434416078,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713552188
    },
    {
        "content": "<p>I think \"placeholder\" is more commonly used to refer to <code>_</code></p>",
        "id": 434416237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713552245
    },
    {
        "content": "<p>or <code>?_</code></p>",
        "id": 434416254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713552248
    },
    {
        "content": "<blockquote>\n<p>I think \"placeholder\" is more commonly used to refer to <code>_</code></p>\n</blockquote>\n<p>I see ... Then perhaps cdot in this notation deserves a completely new name?</p>",
        "id": 434416463,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713552352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/name.20of.20.22syntax.20sugar.20of.20simple.20function.22/near/434416039\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>so it's not necessarily a cdot \"central dot\"</p>\n</blockquote>\n<p>Too bad \"dot function\" could also mean things like <code>.cons</code>, etc.</p>\n</blockquote>\n<p>yes, this syntactic construction is very much lacking unique syntax. The things that make it distinctive are the use of \"parentheses\" and \"dot\" and both of those are used in other places</p>",
        "id": 434416573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713552397
    },
    {
        "content": "<p>so it's pretty hard to name it just after these components</p>",
        "id": 434416638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713552436
    },
    {
        "content": "<p>What about 'eye'?</p>",
        "id": 434416681,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713552462
    },
    {
        "content": "<p>Yeah, <code>_</code> is a placeholder, but <code>?_</code> is a \"synthetic hole\" (according to the docstrings). In <a href=\"https://github.com/leanprover/lean4/pull/3494\">lean4#3494</a> I was trying to add the terminology \"synthetic placeholder\" for <code>?_</code> to parallel <code>_</code> better. (While also adding notation for delayed assignment metavariables.)</p>\n<p>There's (eventually) going to be an official glossary of all Lean concepts with their recommended names.</p>",
        "id": 434416877,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713552538
    },
    {
        "content": "<h3>summary</h3>\n<p>\"cdot\" → It is not necessarily a cdot, can be a period.<br>\n\"placeholder\" → conflicts with <code>_</code><br>\n\"dot\" → overused</p>",
        "id": 434417174,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713552662
    },
    {
        "content": "<p>well the trouble is that we aren't just trying to name the character <code>·</code> / <code>.</code> itself, I think \"cdot\" is fine for that, but rather the whole construction involving <code>·</code> and <code>( ... )</code> in some combination that produces a lambda</p>",
        "id": 434417428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713552758
    },
    {
        "content": "<p>maybe we should just use the \"section\" name</p>",
        "id": 434417550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713552813
    },
    {
        "content": "<p>Since there are no variable names, we could say that it is an \"anonymous lambda\".</p>",
        "id": 434417551,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713552814
    },
    {
        "content": "<p>that's a possibility, although lambdas are already \"anonymous functions\" for a different notion of anonymous</p>",
        "id": 434417744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713552887
    },
    {
        "content": "<p>\"dot lambda\"... \"hidden lambda\"...</p>",
        "id": 434418236,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713553091
    },
    {
        "content": "<p>\"arrowless lambda\"...</p>",
        "id": 434418625,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713553252
    },
    {
        "content": "<p>\"operation dot\"...</p>",
        "id": 434419042,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713553423
    },
    {
        "content": "<p>I like \"arrowless lambda\" among the ones I just mentioned.</p>",
        "id": 434419182,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713553483
    },
    {
        "content": "<p>\"placeholder lambda\"?</p>",
        "id": 434439472,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713562606
    },
    {
        "content": "<p>lambdaless lambda</p>",
        "id": 434466593,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1713585301
    },
    {
        "content": "<p>Implicit parameters.<br>\nPattern function.<br>\nPartial expression.<br>\nNameless binders.<br>\nNo-fun-function.<br>\nDot product.<br>\nHidden variables.<br>\nMutlivalued expression.<br>\nTemplate.</p>",
        "id": 434478367,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1713597827
    },
    {
        "content": "<p>I guess we need voting..?</p>",
        "id": 434479932,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713599141
    },
    {
        "content": "<p>I like \"Pattern function\" and \"lambdaless lambda\"....</p>",
        "id": 434522629,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713636465
    }
]