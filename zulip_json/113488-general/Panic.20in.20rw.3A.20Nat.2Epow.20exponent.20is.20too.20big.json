[
    {
        "content": "<p>This works in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_right_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"mi\">1</span> <span class=\"n\">_</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but in Lean 4 this panics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">add_right_comm</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This looks to me like some numeric normalizer issue; the analogous version not in <code>Nat</code> works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">add_right_comm</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 431515691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712320863
    },
    {
        "content": "<p>It's pretty unexpected to me that <code>rewrite</code> is even performing this normalization; but maybe I'm misdiagnosing and this is coming from the kernel</p>",
        "id": 431515812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712320909
    },
    {
        "content": "<p>large closed terms of type nat are kind of like live hand grenades, because calling <code>whnf</code> on them will cause them to be worked out in full, and many tactics do this when looking for structure</p>",
        "id": 431516891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712321259
    },
    {
        "content": "<p>Is <code>whnf</code> in a tactic an anti-pattern? (vs <code>let ~q(desiredHead $args) := e</code> or the sugar-free alternative, for instance)</p>",
        "id": 431517231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712321373
    },
    {
        "content": "<p>I think even <code>whnfR</code> is bad, although this may depend on the nat function</p>",
        "id": 431517446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712321437
    },
    {
        "content": "<p>Surely <code>whnfR</code> shouldn't be unfolding <code>+</code> / <code>Nat.add</code>?</p>",
        "id": 431517575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712321488
    },
    {
        "content": "<p>there's an issue open about that (<a href=\"https://github.com/leanprover/lean4/pull/1994\">lean4#1994</a>)</p>",
        "id": 431517610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712321499
    },
    {
        "content": "<p>it does</p>",
        "id": 431517634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712321507
    },
    {
        "content": "<p>even though <code>Nat.add</code> is not reducible</p>",
        "id": 431517658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712321517
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">eq_refl</span>\n</code></pre></div>",
        "id": 431517839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712321575
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OfNat.ofNat#doc\">docs#OfNat.ofNat</a> is also not reducible and yet gets unfolded here too, I guess</p>",
        "id": 431517976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712321625
    },
    {
        "content": "<p>just tested, <code>2 ^ 2 = 4</code> also works, so I think this is the culprit</p>",
        "id": 431518102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712321662
    },
    {
        "content": "<p>Defining a <code>Mathlib.Nat</code> that is a copy of <code>Nat</code> would fix all this, right? Because whatever strange special casing that is going on would presumably not apply here?</p>",
        "id": 431518317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712321728
    },
    {
        "content": "<p>(obviously that's a bad idea for other reasons, but panicking in a proof is pretty awful too)</p>",
        "id": 431518456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712321768
    },
    {
        "content": "<p>yes, let me double check what the check is</p>",
        "id": 431518666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712321858
    },
    {
        "content": "<p>it's a hard coded list of nat functions, including <code>pow</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">match</span> <span class=\"n\">fn</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.add</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatOp</span> <span class=\"n\">Nat.add</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.sub</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatOp</span> <span class=\"n\">Nat.sub</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.mul</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatOp</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.div</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatOp</span> <span class=\"n\">Nat.div</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.mod</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatOp</span> <span class=\"n\">Nat.mod</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.pow</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatOp</span> <span class=\"n\">Nat.pow</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.gcd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatOp</span> <span class=\"n\">Nat.gcd</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.beq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatPred</span> <span class=\"n\">Nat.beq</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.ble</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatPred</span> <span class=\"n\">Nat.ble</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.land</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatOp</span> <span class=\"n\">Nat.land</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.lor</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatOp</span> <span class=\"n\">Nat.lor</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.xor</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatOp</span> <span class=\"n\">Nat.xor</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.shiftLeft</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatOp</span> <span class=\"n\">Nat.shiftLeft</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">``</span><span class=\"n\">Nat.shiftRight</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduceBinNatOp</span> <span class=\"n\">Nat.shiftRight</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 431518911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712321902
    },
    {
        "content": "<p>Should this be conditioned on the reducibility being \"default\" or higher?</p>",
        "id": 431518989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712321936
    },
    {
        "content": "<p>I think it should</p>",
        "id": 431519008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712321943
    },
    {
        "content": "<p>This optimized reduction seems like a good idea, but only in the cases where reduction should happen in the first place</p>",
        "id": 431519033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712321953
    },
    {
        "content": "<p>it's a bit unclear whether <code>Nat.succ 3 = 4</code> should be considered a reducible defeq or not</p>",
        "id": 431519244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712322022
    },
    {
        "content": "<p>since <code>Nat.succ</code> isn't a function with a definition in the first place</p>",
        "id": 431519280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712322035
    },
    {
        "content": "<p><code>attribute [reducible] Nat.succ</code> is legal</p>",
        "id": 431519316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712322047
    },
    {
        "content": "<p>yeah but that doesn't mean anything, it has no associated defeq</p>",
        "id": 431519382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712322073
    },
    {
        "content": "<p>it's an opaque</p>",
        "id": 431519401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712322081
    },
    {
        "content": "<p>Ah, I'm thinking of projections not constructors</p>",
        "id": 431519438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712322103
    },
    {
        "content": "<p>I guess ditto for <code>Nat.zero = 0</code></p>",
        "id": 431519574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712322132
    },
    {
        "content": "<p>Both of these should be not reducible because <code>OfNat.ofNat</code> isn't reducible, right?</p>",
        "id": 431519659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712322164
    },
    {
        "content": "<p>I think these are operating on raw literals?</p>",
        "id": 431519757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712322199
    },
    {
        "content": "<p>that actually seems somewhat surprising, this is the elaborator's WHNF function</p>",
        "id": 431519840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712322229
    },
    {
        "content": "<p>I guess the literal-wrapping must happen somewhere else, after getting the result of the WHNF</p>",
        "id": 431520046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712322300
    },
    {
        "content": "<p>I don't know if this is related, but I've found that in unification, ground Nat terms often get normalized into numerals. e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `Nat.zero.succ` gets normalized to `1`:</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Nat.zero.succ.succ</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">_</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Nat.zero.succ.succ = Nat.succ 1</span>\n</code></pre></div>",
        "id": 431543687,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1712328703
    },
    {
        "content": "<p>yes, that would definitely explain the <code>rw</code> behavior, even if the matching itself is not at fault</p>",
        "id": 431613146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712355948
    }
]