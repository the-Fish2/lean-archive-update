[
    {
        "content": "<p>How can I replace the <code>have simp_if : ...</code> with a <code>rw</code>, <code>simp</code> or anything natural really? I wrote that <code>have</code> statement with <code>aesop</code>'s suggestion. <code>simp</code> alone does not simplify that <code>if</code> statement.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">simpifly_if</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ProjectiveGeometry</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ell</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">l1</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n  <span class=\"n\">l2</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n  <span class=\"n\">l3</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rel_sym_cab</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">PG</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">abc_col</span> <span class=\"o\">:</span> <span class=\"n\">PG.ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">PG.ell</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">bc_neq</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">PG.l1</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">PG.l2</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">PG.l1</span> <span class=\"n\">c</span> <span class=\"n\">b</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">abc_col</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">bc_neq</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rel_sym_bca</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">PG</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">abc_col</span> <span class=\"o\">:</span> <span class=\"n\">PG.ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">PG.ell</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">rel_sym_cab</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">apply</span> <span class=\"n\">rel_sym_cab</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n  <span class=\"n\">exact</span> <span class=\"n\">abc_col</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">star</span>\n  <span class=\"o\">{</span><span class=\"n\">PG</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"bp\">|</span> <span class=\"n\">PG.ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">p_2</span>\n  <span class=\"o\">{</span><span class=\"n\">PG</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">PG</span> <span class=\"o\">:=</span> <span class=\"n\">PG</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">star</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ab_neq</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">simp_if</span> <span class=\"o\">:</span>\n        <span class=\"n\">PG.ell</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"bp\">|</span> <span class=\"n\">PG.ell</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">aesop</span>\n    <span class=\"n\">apply</span> <span class=\"n\">simp_if</span>\n    <span class=\"n\">apply</span> <span class=\"n\">rel_sym_bca</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n    <span class=\"n\">apply</span> <span class=\"n\">PG.l1</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 433128449,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1713095429
    },
    {
        "content": "<p><code>split</code> is the tactic which makes progress with <code>if</code>.</p>",
        "id": 433129440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713096256
    },
    {
        "content": "<p>Thank you. That worked pretty well.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">p_2</span>\n  <span class=\"o\">{</span><span class=\"n\">PG</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">PG</span> <span class=\"o\">:=</span> <span class=\"n\">PG</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">star</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">split</span>\n    <span class=\"n\">case</span> <span class=\"n\">inr.inl</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n    <span class=\"n\">case</span> <span class=\"n\">inr.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">apply</span> <span class=\"n\">rel_sym_bca</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n      <span class=\"n\">apply</span> <span class=\"n\">PG.l1</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 433129884,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1713096685
    }
]