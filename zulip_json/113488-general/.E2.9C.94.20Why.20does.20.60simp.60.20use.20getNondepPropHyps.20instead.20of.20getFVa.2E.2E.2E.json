[
    {
        "content": "<p>EDIT: I've renamed this discussion. The first few messages are discussing the issue that was motivation for the getNondepPropHyps v. getFVarIds question, posed <a href=\"#narrow/stream/113488-general/topic/Why.20does.20.60simp.60.20use.20getNondepPropHyps.20instead.20of.20getFVarIds.3F/near/441074275\">here</a>.</p>\n<p>I have a proof that two types are equal, and I prefer to work with one type over the other. However, using <code>rewrite</code> causes a new variable to appear while the old variable is still the one used in the goal (see <code>quux_rw</code> below). I've only been able to get this to work by using <code>simp</code> or <code>simp_rw</code> after <code>revert</code>ing the variables (see <code>quux_simp'</code> below). Is there any way to do this without reverting (and, ideally, without the \"magic\" of <code>simp</code>)?</p>\n<p>Minimum working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Foo</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">foobar</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- sanity check: obvious solution works (rfl outside tactics mode also works)</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">quux_rfl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">done</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">quux_rw</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rewrite</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">foobar</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\">  </span><span class=\"c1\">-- (x✝ : Foo) (x y : Bar) ⊢ x✝ = y</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"n\">done</span>\n\n<span class=\"c1\">-- same behavior with simp_rw instead of simp</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">quux_simp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">foobar</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\">  </span><span class=\"c1\">-- does nothing (but, weirdly, doesn't yell about it)</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"n\">done</span>\n\n<span class=\"c1\">-- simp_rw also works here</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">quux_simp'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">revert</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">foobar</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"c1\">-- ⊢ ∀ (x y : Bar), x = y</span>\n<span class=\"w\">  </span><span class=\"n\">intros</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"n\">done</span>\n\n<span class=\"c1\">-- reverting doesn't help 'rewrite'</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">quux_rw'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">revert</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">  </span><span class=\"n\">rewrite</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">foobar</span><span class=\"o\">]</span><span class=\"w\">  </span><span class=\"c1\">-- tactic 'rewrite' failed, motive is not type correct</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 441066699,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1716910794
    },
    {
        "content": "<p>Is this want you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">quux_change</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">change</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</code></pre></div>\n<p>After that, the infoview looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bar</span>\n<span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">y</span>\n</code></pre></div>",
        "id": 441067814,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1716911188
    },
    {
        "content": "<p>If <code>foobar</code> is a <code>rfl</code> lemma in your actual use case, you could use <code>dsimp [foobar] at x</code></p>",
        "id": 441069313,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716911715
    },
    {
        "content": "<p>Huh, this is strange:<code>simp</code> also works if I specify <code>at x</code> rather than <code>at *</code>. In my case, I have to apply this to a few different variables, so it's a bit annoying but fine. <code>dsimp</code> seems like a nicer interface to <code>change</code> if they are definitionally equal (since I don't need to specify the entire target type when it is some longer expression).<br>\nEither way, this works. Thanks!</p>",
        "id": 441071466,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1716912385
    },
    {
        "content": "<p>Still quite confused why <code>at *</code> is behaving differently from <code>at x</code> here. Maybe it has something to do with the use of <code>getNondepPropHyps</code> in <code>simpLocation</code> (<a href=\"https://github.com/leanprover/lean4/blob/873ef2d894af80d8fc672e35f7e28bae314a1f6f/src/Lean/Elab/Tactic/Simp.lean#L406\">here</a>)?</p>",
        "id": 441072539,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1716912759
    },
    {
        "content": "<p>Seems like it. Changing that branch to the below fixes it. Now, why did they choose to not do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Location</span><span class=\"bp\">.</span><span class=\"n\">wildcard</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">withMainContext</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"n\">go</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getFVarIds</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simplifyTarget</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 441074275,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1716913422
    },
    {
        "content": "<p>When <code>simp</code> rewrites with non-defeq equations in a hypothesis <code>h1 : A</code> that another hypothesis <code>h2 : B</code> depends on (i.e., <code>h1</code> occurs in <code>B</code>), then <code>B</code> is no longer type-correct. So the best <code>simp</code> can do is to duplicate <code>h1</code> and rewrite in the copy. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">eq</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h1</span>\n<span class=\"w\">  </span><span class=\"c\">/-</span>\n<span class=\"cm\">  m n : Nat</span>\n<span class=\"cm\">  P : Fin m → Type</span>\n<span class=\"cm\">  h1 : Fin m</span>\n<span class=\"cm\">  h2 : P h1</span>\n<span class=\"cm\">  eq : m = n</span>\n<span class=\"cm\">  h1 : Fin n</span>\n<span class=\"cm\">  ⊢ Foo</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>If  <code>simp at *</code> could trigger this behaviour, it would arguably be more confusing than helpful.</p>",
        "id": 441116746,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1716931118
    },
    {
        "content": "<p>Ah, so it only works when it's definitional equality, and it doesn't automatically detect that. Is there some other way to make this work in your example? Maybe by rewriting <code>h1</code> and all types that use <code>h1</code>?</p>",
        "id": 441121377,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1716933383
    },
    {
        "content": "<p><code>cases eq</code> and <code>subst eq</code> should work.</p>",
        "id": 441122052,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1716933715
    },
    {
        "content": "<p>That works, thank you!</p>",
        "id": 441122950,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1716934181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620085\">Ricardo Prado Cunha</span> has marked this topic as resolved.</p>",
        "id": 441122957,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716934182
    },
    {
        "content": "<p><code>revert h1</code> followed by <code>simp_rw [eq]</code> works in a slightly more general case</p>",
        "id": 441132335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716939807
    }
]