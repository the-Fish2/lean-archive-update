[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Padic</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">HappyNewYear</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nat.card</span> <span class=\"o\">((</span><span class=\"n\">ZMod</span> <span class=\"mi\">7</span> <span class=\"bp\">×</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">≃+</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">7</span> <span class=\"bp\">×</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">))</span> <span class=\"bp\">+</span>\n    <span class=\"n\">Nat.card</span> <span class=\"o\">((</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">+</span>\n    <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">≃+*</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n    <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"bp\">≃+*</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">2024</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410688960,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704083026
    },
    {
        "content": "<p>(Sorry for the edits, it should be doable now :))</p>",
        "id": 410689958,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704084287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/Happy.20new.20year!/near/410688960\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Padic</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">HappyNewYear</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nat.card</span> <span class=\"o\">((</span><span class=\"n\">ZMod</span> <span class=\"mi\">7</span> <span class=\"bp\">×</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">≃+</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">7</span> <span class=\"bp\">×</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">))</span> <span class=\"bp\">+</span>\n    <span class=\"n\">Nat.card</span> <span class=\"o\">((</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">+</span>\n    <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">≃+*</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n    <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"bp\">≃+*</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">2024</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Sorry if this is a stupid question but how are you able to chain equivalence together like that. What does it mean?</p>",
        "id": 410728580,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1704120069
    },
    {
        "content": "<p>The code snippet sums cardinalities of different sets of equivalences/isomorphisms</p>\n<p>Edit: having read Yaël's answer I now understand the question</p>",
        "id": 410728724,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1704120185
    },
    {
        "content": "<p><code>Fin 3 ≃ Fin 3</code> is a group, namely the symmetric group on three elements. In particular, we can talk about endomorphisms of it.</p>",
        "id": 410728856,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704120278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Happy.20new.20year!/near/410728856\">said</a>:</p>\n<blockquote>\n<p><code>Fin 3 ≃ Fin 3</code> is a group, namely the symmetric group on three elements. In particular, we can talk about endomorphisms of it.</p>\n</blockquote>\n<p>Is there a coercion from equivalence to endomorphism to group?</p>",
        "id": 410782212,
        "sender_full_name": "Frederick Pu",
        "timestamp": 1704161241
    },
    {
        "content": "<p>It's just a Group isntance <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.Perm.permGroup#doc\">docs#Equiv.Perm.permGroup</a> on <code>Equiv.perm α</code> which is defined to be <code>α ≃ α</code> reducibly.</p>",
        "id": 410786866,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704164394
    }
]