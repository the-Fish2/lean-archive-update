[
    {
        "content": "<p>I am proving that groups of order pq (with p not dividing q-1) are isomorphic to the cyclic group of order pq. I have defined the Sylow p-subgroup and Sylow q-subgroup. I have then taken their generators (say g and k) then I am trying to show that gk has order pq. However I am unsure on how to make lean understand that g and k are also elements of G. I have tried coercion but I am not sure how to correctly implement it. At the moment lean does not like that I want to multiply g and k together as they are from different subgroups. The code is below, thank you. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- A group of order pq for primes p and q and such that p doesn't divide q-1, is the cyclic group of pq elements</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">C_pq</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">q.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hpq</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">&lt;</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpqq</span><span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">*</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">q</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)):</span> <span class=\"n\">IsCyclic</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c1\">-- Define the Sylow p-subgroup</span>\n  <span class=\"k\">have</span> <span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hpqq</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.dvd_mul_right</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n  <span class=\"k\">have</span> <span class=\"n\">p1</span> <span class=\"o\">:=</span> <span class=\"n\">Sylow.exists_subgroup_card_pow_prime</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">pow_one</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">p0</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p1</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">hP</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">p1</span>\n  <span class=\"k\">have</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hP</span>\n<span class=\"c1\">-- Show P is cyclic and generated by an element g of order p</span>\n  <span class=\"k\">have</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">IsCyclic</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">isCyclic_of_prime_card</span> <span class=\"n\">hP</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">gP</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IsCyclic.exists_generator</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">p4</span> <span class=\"o\">:</span> <span class=\"n\">orderOf</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">orderOf_eq_card_of_forall_mem_zpowers</span> <span class=\"n\">gP</span>\n\n<span class=\"c1\">-- Define the Sylow q-subgroup</span>\n  <span class=\"k\">have</span> <span class=\"n\">q0</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hpqq</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.dvd_mul_left</span> <span class=\"n\">q</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"n\">q1</span> <span class=\"o\">:=</span> <span class=\"n\">Sylow.exists_subgroup_card_pow_prime</span> <span class=\"n\">q</span> <span class=\"o\">((</span><span class=\"n\">pow_one</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">q0</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">q1</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">hQ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">q1</span>\n  <span class=\"k\">have</span> <span class=\"n\">q2</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hQ</span>\n<span class=\"c1\">-- Show Q is cyclic and generated by an element k of order q</span>\n  <span class=\"k\">have</span> <span class=\"n\">q3</span> <span class=\"o\">:</span> <span class=\"n\">IsCyclic</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">isCyclic_of_prime_card</span> <span class=\"n\">hQ</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">kQ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IsCyclic.exists_generator</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">q4</span> <span class=\"o\">:</span> <span class=\"n\">orderOf</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">orderOf_eq_card_of_forall_mem_zpowers</span> <span class=\"n\">kQ</span>\n\n<span class=\"c1\">-- Show gh generates G ie gh has order pq</span>\n  <span class=\"k\">have</span> <span class=\"n\">pq</span> <span class=\"o\">:</span> <span class=\"n\">orderOf</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">*</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 421480483,
        "sender_full_name": "Roshan Kohli",
        "timestamp": 1707927166
    },
    {
        "content": "<p>(could someone move this to <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a>?)</p>",
        "id": 421481347,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707927416
    },
    {
        "content": "<p>I am currently getting <code>failed to synthesize instance  Fintype G</code>. Care to make this a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> <span class=\"user-mention\" data-user-id=\"671777\">@Roshan Kohli</span> ?</p>",
        "id": 421484626,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707928333
    },
    {
        "content": "<p>my imports are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Index</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.OrderOfElement</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Choose.Dvd</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Choose.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.SpecificGroups.Cyclic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Sylow</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Coset</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Defs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The open scoped Classical should fix that error.  Sorry for not providing earlier <span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span></p>",
        "id": 421484806,
        "sender_full_name": "Roshan Kohli",
        "timestamp": 1707928388
    },
    {
        "content": "<p>Thanks. Does <code>((g : G) * k)</code> work?</p>",
        "id": 421485205,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707928503
    },
    {
        "content": "<p>Yes thanks a lot. Surprised it was that simple. <span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span></p>",
        "id": 421485471,
        "sender_full_name": "Roshan Kohli",
        "timestamp": 1707928574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671777\">Roshan Kohli</span> has marked this topic as resolved.</p>",
        "id": 421485655,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707928638
    },
    {
        "content": "<p>Well, don't thank me yet, you will now have to deal with the casting to the G, but this should at least be the first step.</p>",
        "id": 421485657,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707928641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671777\">Roshan Kohli</span> has marked this topic as unresolved.</p>",
        "id": 421498257,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707932470
    }
]