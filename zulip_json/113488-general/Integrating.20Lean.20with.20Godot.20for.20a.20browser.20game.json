[
    {
        "content": "<p>Hi everyone,</p>\n<p>I'm working on a project where I want to integrate Lean with a Godot-based math game that will be deployed as a static page on GitHub Pages. Based on search results, it seems like I have to compile Lean to WebAssembly (WASM) so it can run in the browser and interact with the game.</p>\n<p>Are there resources that can help me get started with this task? Something like a tutorial would be very helpful because I am new to this, being only familiar with Godot and JavaScript, but not working between different languages in the same application.</p>\n<p>Thanks in advance for any help!</p>",
        "id": 441146497,
        "sender_full_name": "Victor Liu",
        "timestamp": 1716947767
    },
    {
        "content": "<p>You may get started by trying out <a href=\"#narrow/stream/270676-lean4/topic/wasm.20build/near/407817554\">lean2wasm</a>, but in general using Lean in a browser only game is still a dream in the long run. At the present stage you might want to also evaluate the <a href=\"https://github.com/leanprover-community/lean4web/tree/main/server\">lean4web</a> approach, i.e. you need a backend server to run Lean in \"containers\" (not docker).</p>",
        "id": 441149811,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716949502
    },
    {
        "content": "<p>What kind of games are you planning to make?</p>",
        "id": 441149926,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716949554
    },
    {
        "content": "<p>For now probably just procedural operations like taking derivatives and integrals, and I would like to extend it later which is why I am looking into Lean</p>",
        "id": 441151097,
        "sender_full_name": "Victor Liu",
        "timestamp": 1716950111
    },
    {
        "content": "<p>Ideally I want the application to be client-side and self-contained to avoid additional headache</p>",
        "id": 441151512,
        "sender_full_name": "Victor Liu",
        "timestamp": 1716950325
    },
    {
        "content": "<p>would the gamer be provide proofs for these derivatives/integrals? if you're trying to calculate derivatives/integrals, there aren't tactics for that (yet), though you can do that in JavaScript with some symbolic maths or autodiff library</p>",
        "id": 441152192,
        "sender_full_name": "llllvvuu",
        "timestamp": 1716950702
    },
    {
        "content": "<p>For interactive math games, you might also have better luck with <a href=\"https://github.com/leanprover-community/ProofWidgets4?tab=readme-ov-file\">ProofWidgets</a>.</p>",
        "id": 441160369,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716955330
    },
    {
        "content": "<p>For compiling to WASM, maybe <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> can give you more details (once back from holidays). He did the heavy lifting behind lean2wasm linked above..</p>\n<p>I dont know enough about godot, but you might be able to set up a game at <a href=\"http://adam.math.hhu.de\">adam.math.hhu.de</a> (which isnt published on the front page) and then integrate this directly inside your app (which would require internet access, but at least you're not bound to serting up your own lean server...). And if you describe in more details how you would like to embed this project (or parts of it) into yours at <a href=\"https://github.com/leanprover-community/lean4game\">https://github.com/leanprover-community/lean4game</a> there might be a small chance that it'll be done.</p>\n<p>I've also had it on my mind to clean up lean4web to make it easier to import just the editor in any other project, so again if you have a very specific usecase, having a github issue describing it would be helpful</p>",
        "id": 441189511,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1716970620
    },
    {
        "content": "<p>[I read the title too fast and I thought you wanted to enable Lean 4 programming to create games in Godot, which is something I wanted to do a few months ago <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>]</p>",
        "id": 441223780,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1716983513
    },
    {
        "content": "<p>(Lean4 game engine when)</p>",
        "id": 441252365,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1716992704
    },
    {
        "content": "<p>Thanks to everyone for the advice. I'm thinking of making the front-end UI with Godot as it is more suited for making great game visuals and logic, whereas I could keep Lean in the backend logic for handling the actual mathematics. In this light, I am not sure if ProofWidgets is appropriate for this goal, as it appears to be its own UI library?</p>",
        "id": 441313752,
        "sender_full_name": "Victor Liu",
        "timestamp": 1717015425
    },
    {
        "content": "<p>I have found the following resource on GitHub: <a href=\"https://github.com/leanprover/lean-client-js\">lean-client-js</a>, a \"JavaScript library to interface with the server mode of the Lean theorem prover\". However, it appears that it was made 7 years ago and is for the Lean 3 version. Is it possible to make this work for Lean 4?</p>",
        "id": 441326555,
        "sender_full_name": "Victor Liu",
        "timestamp": 1717020280
    },
    {
        "content": "<p>I don't think that exists as a standalone library for Lean 4. Your best bet would be looking at the source code of <a href=\"https://github.com/leanprover-community/lean4web\">lean4web</a> and perhaps <a href=\"https://github.com/Paper-Proof/paperproof\">Paperproof</a> which also contains its own, standalone connection to the Lean server.</p>",
        "id": 441342675,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1717026349
    },
    {
        "content": "<p>Is the Lean server an external online-hosted one? Or can you host it client-side? I'm a bit confused by the terminology, sorry.</p>",
        "id": 441361479,
        "sender_full_name": "Victor Liu",
        "timestamp": 1717035802
    },
    {
        "content": "<p>My goal is to minimize external dependencies, and make it as standalone as possible</p>",
        "id": 441361780,
        "sender_full_name": "Victor Liu",
        "timestamp": 1717035935
    },
    {
        "content": "<p>I'll probably look for symbolic languages in JavaScript for now, I think it will be quite a lot simpler. Thanks a lot for the help!</p>",
        "id": 441361863,
        "sender_full_name": "Victor Liu",
        "timestamp": 1717035963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"724646\">Victor Liu</span> <a href=\"#narrow/stream/113488-general/topic/Integrating.20Lean.20with.20Godot.20for.20a.20browser.20game/near/441361479\">said</a>:</p>\n<blockquote>\n<p>Is the Lean server an external online-hosted one? Or can you host it client-side? I'm a bit confused by the terminology, sorry.</p>\n</blockquote>\n<p>It is a language server in the sense of <a href=\"https://microsoft.github.io/language-server-protocol/\">LSP</a>. It usually runs on the same machine as the editor, but as a separate process. It can also run on a different machine when using a remote setup such as via the VSCode SSH extension.</p>",
        "id": 441378340,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1717044664
    }
]