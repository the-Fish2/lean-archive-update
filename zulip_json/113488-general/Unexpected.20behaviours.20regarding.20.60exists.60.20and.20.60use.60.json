[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Common</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exists</span> <span class=\"bp\">?</span><span class=\"n\">x</span>\n  <span class=\"c1\">-- the result is as if `exists a` had been executed</span>\n  <span class=\"c1\">-- why...?</span>\n  <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"bp\">?</span><span class=\"n\">x</span>\n  <span class=\"n\">case</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"c1\">-- the infoview displays `No goals`</span>\n  <span class=\"c1\">-- which is a wrong message</span>\n  <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">simp_arith</span>\n</code></pre></div>",
        "id": 412923909,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1705313486
    },
    {
        "content": "<p>The implementation of <code>exists</code> is in this case <code>refine ⟨?_, ?_⟩; trivial</code>. The <code>refine</code> generates two goals, the first of which is a natural number and <code>trivial</code> tries <code>assumption</code>, filling that natural number with <code>a</code>.<br>\nI'd say this is a bug. <code>trivial</code> should probably not use assumption for (non-propositional) goals whose metavariable occur in other goals...</p>",
        "id": 412930704,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1705315844
    },
    {
        "content": "<p>why is <code>trivial</code> even being called on the first \"goal\"?</p>",
        "id": 412936989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705318117
    },
    {
        "content": "<p>I think it's worth adding here that non-Prop goals are in practice not really supported in tactic mode (experts might do this but I strongly discourage beginners from doing so), so <code>exists ?x</code> is in some sense an unsupported move and if you get into trouble then this might be your own fault. However is it possible to get <code>assumption</code> to solve a goal with metavariables and thus assign a metavariable to a \"random\" thing without ever having a non-Prop goal? That would be bad I guess (in the sense that a move which the user considers 100% safe may not be safe)</p>",
        "id": 412943819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705320511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/Unexpected.20behaviours.20regarding.20.60exists.60.20and.20.60use.60/near/412930704\">said</a>:</p>\n<blockquote>\n<p>The implementation of <code>exists</code> is in this case <code>refine ⟨?_, ?_⟩; trivial</code>. The <code>refine</code> generates two goals, the first of which is a natural number and <code>trivial</code> tries <code>assumption</code>, filling that natural number with <code>a</code>.<br>\nI'd say this is a bug. <code>trivial</code> should probably not use assumption for (non-propositional) goals whose metavariable occur in other goals...</p>\n</blockquote>\n<p>Could it be something like <code>refine \\&lt;..., ?_X&gt;; case _X =&gt; try trivial</code> or whatever?</p>",
        "id": 412949358,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705322642
    }
]