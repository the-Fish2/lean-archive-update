[
    {
        "content": "<p>Hello, as an exercise I'd like to write a solve_by_elim tactic similar to the one in Mathlib 3. Here's what I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Expr</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mySolveByElim</span> <span class=\"o\">(</span><span class=\"n\">mvarIds</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">return</span> <span class=\"n\">mvarIds.allM</span> <span class=\"k\">fun</span> <span class=\"n\">goal</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"n\">goal.checkNotAssigned</span> <span class=\"bp\">`</span><span class=\"n\">mySolveByElim5</span>\n          <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">target</span> <span class=\"bp\">←</span> <span class=\"n\">goal.getType</span>\n          <span class=\"k\">let</span> <span class=\"n\">ldecl</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n          <span class=\"n\">ldecl.anyM</span> <span class=\"k\">fun</span> <span class=\"n\">decl</span><span class=\"o\">:</span> <span class=\"n\">Lean.LocalDecl</span> <span class=\"bp\">=&gt;</span>  <span class=\"k\">do</span>\n            <span class=\"k\">if</span> <span class=\"n\">decl.isImplementationDetail</span> <span class=\"k\">then</span>\n              <span class=\"n\">return</span> <span class=\"n\">false</span>\n            <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">conclusion</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">decl.type</span>\n            <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">target</span> <span class=\"n\">conclusion</span> <span class=\"k\">then</span>\n              <span class=\"n\">goal.assign</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">decl.toExpr</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n              <span class=\"k\">let</span> <span class=\"n\">newGoals</span> <span class=\"bp\">←</span> <span class=\"n\">args.filterMapM</span> <span class=\"bp\">λ</span> <span class=\"n\">mvar</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n                <span class=\"k\">let</span> <span class=\"n\">newGoal</span> <span class=\"o\">:=</span> <span class=\"n\">mvar.mvarId</span><span class=\"bp\">!</span>\n                  <span class=\"k\">if</span> <span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">newGoal.isAssigned</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">newGoal.isDelayedAssigned</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n                    <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"n\">newGoal</span>\n                  <span class=\"k\">else</span>\n                    <span class=\"n\">return</span> <span class=\"n\">none</span>\n              <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">mySolveByElim</span> <span class=\"n\">newGoals</span> <span class=\"n\">n</span>\n\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"mySolveByElim\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getMainGoal</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">mySolveByElim</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span> <span class=\"mi\">4</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"worked\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"mySolveByElim failed\"</span>\n</code></pre></div>\n<p>For the line</p>\n<p><code>if ← isDefEq target conclusion then</code></p>\n<p>I get the error</p>\n<p><code>application type mismatch\n  pure PUnit.unit\nargument\n  PUnit.unit\nhas type\n  PUnit : Sort ?u.2533\nbut is expected to have type\n  Bool : Type</code> </p>\n<p>and on the line</p>\n<p><code>let newGoal := mvar.mvarId!</code></p>\n<p>I get the error</p>\n<p><code>invalid field notation, type is not of the form (C ...) where C is a constant\n  mvar\nhas type\n  ?m.2128</code></p>\n<p>I don't understand these errors. Does anyone know what I'm doing wrong and how to fix it?</p>",
        "id": 437349983,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715035993
    },
    {
        "content": "<p>It looks like it's because you have a single-branch <code>if</code>. If you add <code>else return false</code> at the end it should get through the first error. (Single-branch ifs have to have type <code>m PUnit</code> where <code>m</code> is the monad.)</p>\n<p>The second error means Lean isn't able to figure out the type of <code>mvar</code>. It needs the type to be able to resolve dot notation.</p>",
        "id": 437354286,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715038661
    },
    {
        "content": "<p>Ok, that fixed everything. Thank you.</p>",
        "id": 437358474,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715041695
    },
    {
        "content": "<p>Here is what I ended up with. I'm surprised it seems to work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Expr</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mySolveByElim</span> <span class=\"o\">(</span><span class=\"n\">mvarIds</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">mvarIds.allM</span> <span class=\"k\">fun</span> <span class=\"n\">goal</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"n\">goal.checkNotAssigned</span> <span class=\"bp\">`</span><span class=\"n\">mySolveByElim</span>\n          <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">target</span> <span class=\"bp\">←</span> <span class=\"n\">goal.getType</span>\n          <span class=\"k\">let</span> <span class=\"n\">ldecl</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n          <span class=\"n\">ldecl.anyM</span> <span class=\"k\">fun</span> <span class=\"n\">decl</span><span class=\"o\">:</span> <span class=\"n\">Lean.LocalDecl</span> <span class=\"bp\">=&gt;</span>  <span class=\"k\">do</span>\n            <span class=\"k\">if</span> <span class=\"n\">decl.isImplementationDetail</span> <span class=\"k\">then</span>\n              <span class=\"n\">return</span> <span class=\"n\">false</span>\n            <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">conclusion</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">decl.type</span>\n            <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">target</span> <span class=\"n\">conclusion</span> <span class=\"k\">then</span>\n              <span class=\"n\">goal.assign</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">decl.toExpr</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n              <span class=\"k\">let</span> <span class=\"n\">newGoals</span> <span class=\"bp\">←</span> <span class=\"n\">args.filterMapM</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n                <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">mvar.mvarId</span><span class=\"bp\">!</span>\n                  <span class=\"k\">if</span> <span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.isAssigned</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.isDelayedAssigned</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n                    <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"n\">mvarId</span>\n                  <span class=\"k\">else</span>\n                    <span class=\"n\">return</span> <span class=\"n\">none</span>\n              <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">mySolveByElim</span> <span class=\"n\">newGoals</span> <span class=\"n\">n</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">return</span> <span class=\"n\">false</span>\n\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"mySolveByElim\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getMainGoal</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">mySolveByElim</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span> <span class=\"mi\">6</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"worked\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"mySolveByElim failed\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mySolveByElim</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mySolveByElim</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mySolveByElim</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">T</span> <span class=\"n\">S</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mySolveByElim</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g3</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mySolveByElim</span>\n</code></pre></div>",
        "id": 437359087,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715042297
    },
    {
        "content": "<p>There's a bit of a bug, which is that if the goal or local context has metavariables, the <code>isDefEq</code> might assign them even when mySolveByElim untimately fails in that particular choice, and that assignment will carry over to the next choice.</p>\n<p>One way to do this is to make your tactic return <code>MetaM Unit</code> instead and communicate failure using <code>throwError</code>/<code>failure</code>. Then, around the body of the function <code>ldecl.anyM</code> you use either <code>observing?</code> (or one of the combinators in the module that defines <code>observing?</code>) or you save state yourself and use a try/finally to restore the state on failure.</p>",
        "id": 437360561,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715043622
    },
    {
        "content": "<p>Does this do the trick?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Expr</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mySolveByElim</span> <span class=\"o\">(</span><span class=\"n\">mvarIds</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">mvarIds.allM</span> <span class=\"k\">fun</span> <span class=\"n\">goal</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"n\">goal.checkNotAssigned</span> <span class=\"bp\">`</span><span class=\"n\">mySolveByElim</span>\n          <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">target</span> <span class=\"bp\">←</span> <span class=\"n\">goal.getType</span>\n          <span class=\"k\">let</span> <span class=\"n\">ldecl</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n          <span class=\"n\">ldecl.anyM</span> <span class=\"k\">fun</span> <span class=\"n\">decl</span><span class=\"o\">:</span> <span class=\"n\">Lean.LocalDecl</span> <span class=\"bp\">=&gt;</span>  <span class=\"k\">do</span>\n            <span class=\"k\">if</span> <span class=\"n\">decl.isImplementationDetail</span> <span class=\"k\">then</span>\n              <span class=\"n\">return</span> <span class=\"n\">false</span>\n            <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">conclusion</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">decl.type</span>\n            <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">saveState</span>\n            <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">target</span> <span class=\"n\">conclusion</span> <span class=\"k\">then</span>\n              <span class=\"n\">goal.assign</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">decl.toExpr</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n              <span class=\"k\">let</span> <span class=\"n\">newGoals</span> <span class=\"bp\">←</span> <span class=\"n\">args.filterMapM</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n                <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">mvar.mvarId</span><span class=\"bp\">!</span>\n                  <span class=\"k\">if</span> <span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.isAssigned</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.isDelayedAssigned</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n                    <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"n\">mvarId</span>\n                  <span class=\"k\">else</span>\n                    <span class=\"n\">return</span> <span class=\"n\">none</span>\n              <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">mySolveByElim</span> <span class=\"n\">newGoals</span> <span class=\"n\">n</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">restoreState</span> <span class=\"n\">s</span>\n              <span class=\"n\">return</span> <span class=\"n\">false</span>\n\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"mySolveByElim\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getMainGoal</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">mySolveByElim</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span> <span class=\"mi\">6</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"worked\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"mySolveByElim failed\"</span>\n</code></pre></div>\n<p>I was thinking I would need to do something with saveState/restoreState at some point, but I thought it would be for the <code>goal.assign (mkAppN decl.toExpr args)</code> line. That's why I was surprised that the examples worked, I figured it was because <code>instantiateMVars</code> was never called. Does <code>isDefEq</code> instantiate metavariables?</p>\n<p>Originally, I tried making my tactic return <code>MetaM Unit</code>, but I coudn't figure out how to get it to work.</p>",
        "id": 437361621,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715044675
    },
    {
        "content": "<p><code>isDefEq</code> has the side effect of assigning metavariables (not instantiating them — instantiation means replacing <code>Expr.mvar</code>'s with their values in a particular expression, but assignment means recording the value of a metavariable in the metavariable assignment state).</p>\n<p>If you put the <code>saveState</code> line before the <code>forallMetaTelescopeReducing</code> line, then you can also revert the creation of those metavariables. That's not necessary, but it's nice for cleanup.</p>\n<p>I don't offhand see any bugs now. Looks good.</p>",
        "id": 437380303,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715058860
    },
    {
        "content": "<p>Here's an exception-based version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mySolveByElim</span> <span class=\"o\">(</span><span class=\"n\">mvarIds</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">mvarIds.allM</span> <span class=\"k\">fun</span> <span class=\"n\">goal</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">goal.checkNotAssigned</span> <span class=\"bp\">`</span><span class=\"n\">mySolveByElim</span>\n    <span class=\"k\">let</span> <span class=\"n\">target</span> <span class=\"bp\">←</span> <span class=\"n\">goal.getType</span>\n    <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">anyM</span> <span class=\"k\">fun</span> <span class=\"n\">decl</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">saveState</span>\n      <span class=\"n\">try</span>\n        <span class=\"n\">guard</span> <span class=\"bp\">!</span><span class=\"n\">decl.isImplementationDetail</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">conclusion</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">decl.type</span>\n        <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">target</span> <span class=\"n\">conclusion</span>\n        <span class=\"n\">goal.assign</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkAppN</span> <span class=\"n\">decl.toExpr</span> <span class=\"n\">args</span>\n        <span class=\"k\">let</span> <span class=\"n\">newGoals</span> <span class=\"bp\">←</span> <span class=\"n\">args.filterMapM</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvar.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">isAssignedOrDelayedAssigned</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n            <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"n\">mvar.mvarId</span><span class=\"bp\">!</span>\n          <span class=\"k\">else</span>\n            <span class=\"n\">return</span> <span class=\"n\">none</span>\n        <span class=\"n\">mySolveByElim</span> <span class=\"n\">newGoals</span> <span class=\"n\">n</span>\n        <span class=\"n\">return</span> <span class=\"n\">true</span>\n      <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">restoreState</span> <span class=\"n\">s</span>\n        <span class=\"n\">return</span> <span class=\"n\">false</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"mySolveByElim\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getMainGoal</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">mySolveByElim</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span> <span class=\"mi\">6</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"worked\"</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"mySolveByElim failed\"</span>\n</code></pre></div>",
        "id": 437381418,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715059794
    },
    {
        "content": "<p>And here's an exception-based and <code>for</code>-loop-based version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mySolveByElim</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">mvarId.withContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">mvarId.checkNotAssigned</span> <span class=\"bp\">`</span><span class=\"n\">mySolveByElim</span>\n    <span class=\"k\">let</span> <span class=\"n\">target</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span>\n    <span class=\"n\">for</span> <span class=\"n\">decl</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">saveState</span>\n      <span class=\"n\">try</span>\n        <span class=\"n\">guard</span> <span class=\"bp\">!</span><span class=\"n\">decl.isImplementationDetail</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">conclusion</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">decl.type</span>\n        <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">target</span> <span class=\"n\">conclusion</span>\n        <span class=\"n\">mvarId.assign</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkAppN</span> <span class=\"n\">decl.toExpr</span> <span class=\"n\">args</span>\n        <span class=\"n\">for</span> <span class=\"n\">goal</span> <span class=\"k\">in</span> <span class=\"n\">args</span> <span class=\"k\">do</span>\n          <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">goal.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">isAssignedOrDelayedAssigned</span> <span class=\"k\">do</span>\n            <span class=\"n\">mySolveByElim</span> <span class=\"n\">goal.mvarId</span><span class=\"bp\">!</span> <span class=\"n\">n</span>\n        <span class=\"n\">return</span>\n      <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">restoreState</span> <span class=\"n\">s</span>\n    <span class=\"n\">failure</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"mySolveByElim\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Tactic.getMainGoal</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">mySolveByElim</span> <span class=\"n\">mvarId</span> <span class=\"mi\">6</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"worked\"</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"mySolveByElim failed\"</span>\n</code></pre></div>",
        "id": 437381777,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715060139
    },
    {
        "content": "<p>Oh wow. I think I like the  exception-based and <code>for</code>-loop-based version the best.</p>",
        "id": 437413921,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715074092
    },
    {
        "content": "<p>I moved the <code>let s ← saveState</code> line so that it's just before the <code>for decl in ← getLCtx do</code> line, and my (limited number of) tests still work. Is there any reason we need to save the state in the loop, instead of outside it?</p>",
        "id": 437414476,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715074319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209436\">Lucas Allen</span> has marked this topic as resolved.</p>",
        "id": 437414591,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715074354
    },
    {
        "content": "<p>I don't see any problem hoisting that <code>let</code> outside the loop. It might be epsilon faster too, since there'd be less reference count manipulation in the generated code.</p>",
        "id": 437473911,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715094418
    }
]