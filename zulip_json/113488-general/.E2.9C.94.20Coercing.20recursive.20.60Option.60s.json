[
    {
        "content": "<p>I was trying to do the following, somewhat with the expectation that such a coercion would be defined in the core of lean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n<span class=\"k\">#check</span> <span class=\"o\">(((</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"s2\">\"a\"</span><span class=\"o\">))):</span> <span class=\"n\">Option</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, this actually results in the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"s2\">\"a\"</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">some</span> <span class=\"s2\">\"a\"</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Option</span> <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"n\">TypeLean</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>Is there a way of achieving the above coercion - and if not, what are the mechanics of lean that prevent such recursive coercions?</p>",
        "id": 422643899,
        "sender_full_name": "Jesse Wright",
        "timestamp": 1708529520
    },
    {
        "content": "<p>It work if you force lean to delay inserting the coercion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"s2\">\"a\"</span><span class=\"o\">)</span> <span class=\"o\">:)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 422644963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708529765
    },
    {
        "content": "<p>Note you can write the coercion more succintly as <code>a &gt;&gt;= id</code></p>",
        "id": 422645311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708529848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"680656\">Jesse Wright</span> has marked this topic as resolved.</p>",
        "id": 422648703,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708530712
    }
]