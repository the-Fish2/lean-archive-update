[
    {
        "content": "<p>I'm trying to get bindings to OCCT working (an old and large C++ CAD kernel) I'm finding I can't build a minimal project if certain headers are included in my <code>ffi.cpp</code>, the error is  <code>undefined symbol: _ZTVN10__cxxabiv117__class_type_infoE</code>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>ffi.cpp</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;lean/lean.h&gt;</span>\n\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;BRepGProp.hxx&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;BRepGProp_Face.hxx&gt;</span>\n<span class=\"c1\">// #include &lt;BRepMesh_IncrementalMesh.hxx&gt;</span>\n<span class=\"c1\">// #include &lt;BRepPrimAPI_MakeBox.hxx&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;Standard.hxx&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;Standard_Integer.hxx&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;Standard_Real.hxx&gt;</span>\n<span class=\"c1\">// #include &lt;StlAPI_Writer.hxx&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;TopAbs.hxx&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;TopAbs_Orientation.hxx&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;TopExp.hxx&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;TopExp_Explorer.hxx&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;TopoDS.hxx&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;TopoDS_Shape.hxx&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n</code></pre></div>\n</div></div>\n<p><a href=\"https://github.com/Open-Cascade-SAS/OCCT/blob/master/src/StlAPI/StlAPI_Writer.hxx\">https://github.com/Open-Cascade-SAS/OCCT/blob/master/src/StlAPI/StlAPI_Writer.hxx</a><br>\n<a href=\"https://github.com/Open-Cascade-SAS/OCCT/blob/master/src/BRepMesh/BRepMesh_IncrementalMesh.hxx\">https://github.com/Open-Cascade-SAS/OCCT/blob/master/src/BRepMesh/BRepMesh_IncrementalMesh.hxx</a><br>\n<a href=\"https://github.com/Open-Cascade-SAS/OCCT/blob/master/src/BRepPrimAPI/BRepPrimAPI_MakeBox.hxx\">https://github.com/Open-Cascade-SAS/OCCT/blob/master/src/BRepPrimAPI/BRepPrimAPI_MakeBox.hxx</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>lakefile.lean</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span> <span class=\"n\">System</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">link_libs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n  <span class=\"s2\">\"stdc++\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKernel\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKBRep\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKMesh\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKTopAlgo\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKGeomBase\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKGeomAlgo\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKOffset\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKG3d\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKG2d\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKMath\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKBO\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKFillet\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKService\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKPrim\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKSTL\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKStd\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKV3d\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKRWMesh\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKLCAF\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKXCAF\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKShHealing\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKXSBase\"</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"TKSTEP\"</span>\n\n<span class=\"o\">]</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">Keyboard</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- add package configuration options here</span>\n  <span class=\"n\">precompileModules</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n\n<span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">Keyboard</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"n\">precompileModules</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"n\">target</span> <span class=\"n\">occt.o</span> <span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"native\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"leanocct.o\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcJob</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"C\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"ffi.cpp\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">flags</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span><span class=\"s2\">\"/usr/include/opencascade\"</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">link_libs.foldl</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">++</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-l\"</span><span class=\"o\">,</span><span class=\"bp\">·</span><span class=\"o\">])</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"bp\">++</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span>\n  <span class=\"n\">buildO</span> <span class=\"s2\">\"ffi.cpp\"</span> <span class=\"n\">oFile</span> <span class=\"n\">srcJob</span> <span class=\"n\">flags</span>\n\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">libleanffi</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"leanocct\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">ffiO</span> <span class=\"bp\">←</span> <span class=\"n\">fetch</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.target</span> <span class=\"bp\">``</span><span class=\"n\">occt.o</span>\n  <span class=\"n\">buildStaticLib</span> <span class=\"o\">(</span><span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ffiO</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">keyboard</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n  <span class=\"c1\">-- Enables the use of the Lean interpreter by the executable (e.g.,</span>\n  <span class=\"c1\">-- `runFrontend`) at the expense of increased binary size on Linux.</span>\n  <span class=\"c1\">-- Remove this line if you do not need such functionality.</span>\n  <span class=\"n\">supportInterpreter</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>\n</div></div>\n<p>Looking through the offending  headers, apart from the fact one throws an exception, I can't see why some will build and some won't?</p>",
        "id": 429766502,
        "sender_full_name": "Conor Bergin",
        "timestamp": 1711503231
    },
    {
        "content": "<p>I am also getting this problem with a header only json library which uses modern c++ features, do I need to wrap everything in a c interface before I start linking it to lean?</p>",
        "id": 429868519,
        "sender_full_name": "Conor Bergin",
        "timestamp": 1711548713
    },
    {
        "content": "<p>the json lib is producing <code>undefined symbol: __gxx_personality_v0</code>,  which  something to do with exceptions. </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Full output</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[0/5] Compiling ffi.cpp\n[0/5] Creating libleanocct.a\n[0/5] Linking libleanocct.so\n[0/5] Building Keyboard\nerror: &gt; LEAN_PATH=./.lake/build/lib LD_LIBRARY_PATH=./.lake/build/lib:./.lake/build/lib /home/conor/.elan/toolchains/leanprover--lean4---stable/bin/lean ./././Keyboard.lean -R ././. -o ./.lake/build/lib/Keyboard.olean -i ./.lake/build/lib/Keyboard.ilean -c ./.lake/build/ir/Keyboard.c --load-dynlib=./.lake/build/lib/libleanocct.so\nerror: stderr:\nlibc++abi: terminating due to uncaught exception of type lean::exception: error loading library, ./.lake/build/lib/libleanocct.so: undefined symbol: __gxx_personality_v0\nerror: external command `/home/conor/.elan/toolchains/leanprover--lean4---stable/bin/lean` exited with code 134\n</code></pre></div>\n</div></div>",
        "id": 429872061,
        "sender_full_name": "Conor Bergin",
        "timestamp": 1711549665
    },
    {
        "content": "<p>The general suggestion in these cases is to link in the foreign parts dynamically so as to avoid any conflicts with Lean's own copy of the C++ stdlib. There are some older threads about this approach.</p>",
        "id": 429899604,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1711556571
    }
]