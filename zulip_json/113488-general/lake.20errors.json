[
    {
        "content": "<p>I ran into this while trying to get duper to run. I'm not sure exactly what's going on, but it seems like <code>lake</code> should not throw an error and then tell me to rerun the same command.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">drafting</span> <span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">update</span> <span class=\"n\">duper</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">drafting</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">Duper'</span> <span class=\"n\">was</span> <span class=\"n\">required</span> <span class=\"n\">as</span> <span class=\"bp\">'</span><span class=\"n\">duper'</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">running</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">update</span> <span class=\"n\">hooks</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">dependency</span> <span class=\"bp\">'</span><span class=\"n\">duper'</span> <span class=\"n\">not</span> <span class=\"k\">in</span> <span class=\"n\">manifest</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">update</span> <span class=\"n\">duper</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">it</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">fetch</span> <span class=\"n\">cache</span>\n<span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">drafting</span> <span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">update</span> <span class=\"n\">duper</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">drafting</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">Duper'</span> <span class=\"n\">was</span> <span class=\"n\">required</span> <span class=\"n\">as</span> <span class=\"bp\">'</span><span class=\"n\">duper'</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">running</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">update</span> <span class=\"n\">hooks</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">dependency</span> <span class=\"bp\">'</span><span class=\"n\">duper'</span> <span class=\"n\">not</span> <span class=\"k\">in</span> <span class=\"n\">manifest</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">update</span> <span class=\"n\">duper</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">it</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">fetch</span> <span class=\"n\">cache</span>\n<span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">drafting</span> <span class=\"bp\">%</span>\n</code></pre></div>",
        "id": 409252251,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1703102638
    },
    {
        "content": "<p>Does <code>lake update -R Duper</code> help?</p>",
        "id": 409265968,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1703109031
    },
    {
        "content": "<p>or actually, is it that you just need to write <code>require Duper ...</code> instead of <code>require duper ...</code>?</p>",
        "id": 409266302,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1703109200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/113488-general/topic/lake.20errors/near/409266302\">said</a>:</p>\n<blockquote>\n<p>or actually, is it that you just need to write <code>require Duper ...</code> instead of <code>require duper ...</code>?</p>\n</blockquote>\n<p>Yes, that seems to have fixed it <span aria-label=\"thanks\" class=\"emoji emoji-1fac2\" role=\"img\" title=\"thanks\">:thanks:</span></p>",
        "id": 409269111,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1703110488
    },
    {
        "content": "<p>Nevertheless, I still think that the error message here just can't be right, so I think that should be fixed too, if it's not too hard.</p>",
        "id": 409269946,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1703110928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/lake.20errors/near/409269946\">said</a>:</p>\n<blockquote>\n<p>Nevertheless, I still think that the error message here just can't be right, so I think that should be fixed too, if it's not too hard.</p>\n</blockquote>\n<p>absolutely. But at least the first line is a warning saying something useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">drafting</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">Duper'</span> <span class=\"n\">was</span> <span class=\"n\">required</span> <span class=\"n\">as</span> <span class=\"bp\">'</span><span class=\"n\">duper'</span>\n</code></pre></div>",
        "id": 409270409,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1703111202
    },
    {
        "content": "<p>Hmm yeah ok, perhaps I would have gotten it from that if I were a bit more experienced with lake.</p>",
        "id": 409270531,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1703111277
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 409314626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703137461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I am not quite sure how to fix this. I guess the warning should just be an error?</p>",
        "id": 409315424,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703137984
    },
    {
        "content": "<p>the warning message could be a bit more explicit about what went wrong and how to fix it</p>",
        "id": 409315463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703138017
    },
    {
        "content": "<p>Regardless, <span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> would you mind making this an issue on <a href=\"https://github.com/leanprover/lean4\">leanprover/lean4</a>?</p>",
        "id": 409315479,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703138032
    },
    {
        "content": "<p><code>package 'X' was required as 'Y'</code> makes sense in hindsight but it is hard to interpret for someone who does not know the lake DSL</p>",
        "id": 409315568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703138065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> If you want to PR a fix, I'd appreciate it.</p>",
        "id": 409315581,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703138072
    },
    {
        "content": "<p>do we have multiline string literals yet?</p>",
        "id": 409315778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703138196
    },
    {
        "content": "<p>Coming tomorrow. :-)</p>",
        "id": 409315850,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1703138254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> We have string gaps now (<a href=\"https://github.com/leanprover/lean4/pull/2821\">lean4#2821</a>), but I honestly find string appending prettier than that. Escaping an invisible character feels icky and can easily be broken by accidental trailing whitespace (though the lean core does have a VSCode setting to help avoid this).</p>",
        "id": 409315990,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703138332
    },
    {
        "content": "<p>there is no accidental trailing whitespace in any of the lean related repos</p>",
        "id": 409316084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703138383
    },
    {
        "content": "<p>I forget where we landed on spaces after the <code>\\</code>, but both possible behaviors I can think of (ignoring it and erroring) are not error-prone</p>",
        "id": 409316314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703138447
    },
    {
        "content": "<p>And as I've suggested before, I think <code>lake init</code> should ensure everyone in the Lean world gets to enjoy no trailing whitespace. :-)</p>",
        "id": 409316361,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1703138460
    },
    {
        "content": "<p>I know. The principle and aesthetic of the matter just bugs me. I much prefer heredoc/YAML style multiline indents.</p>",
        "id": 409316362,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703138461
    },
    {
        "content": "<p>(The principle bugs me because it a writing it just always induces a little stress until I remember that the accidental whitespace is solved by something else.)</p>",
        "id": 409316576,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703138526
    },
    {
        "content": "<p>Surely it's better than the current hackaround of using </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"foo</span><span class=\"se\">\\n</span><span class=\"s2\">{</span>\n<span class=\"s2\">  \"\"}bar\"</span>\n</code></pre></div>",
        "id": 409316705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703138590
    },
    {
        "content": "<p>I see though that in lake you are using multiple <code>s!\"foo\" ++ s!\"bar\"</code> instead</p>",
        "id": 409316883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703138691
    },
    {
        "content": "<p>I also dislike it from a pedagogical point-of-view, as code with it requires ensuring  students have an understanding of newlines and control characters, which may easily be more advanced than the current topic.</p>",
        "id": 409316885,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703138691
    },
    {
        "content": "<p>I find this to be a dubious argument</p>",
        "id": 409316928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703138711
    },
    {
        "content": "<p>You are going to have to understand what <code>\\</code> does if you want to write a string literal containing any nonprintable characters</p>",
        "id": 409316977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703138747
    },
    {
        "content": "<p>From personal experience, I know when I learned of heredocs I indenting I intuitively understood it. Learning newline escapes in C took a bit of thinking to wrap my head around.</p>",
        "id": 409317082,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703138777
    },
    {
        "content": "<p>I mean, string literals already exist with the backslash stuff</p>",
        "id": 409317143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703138815
    },
    {
        "content": "<p>And I don't know of any language that uses only heredocs without also having a backslash-based string literal syntax</p>",
        "id": 409317229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703138865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/lake.20errors/near/409316977\">said</a>:</p>\n<blockquote>\n<p>You are going to have to understand what <code>\\</code> does if you want to write a string literal containing any nonprintable characters</p>\n</blockquote>\n<p><code>\\n</code> is a very different beast from <code>\\&lt;newline&gt;</code>. The latter is much more similar to <code>\\\"</code> or <code>\\\\</code>, the later of which is not what (at least) my mind goes to when thinking of control characters.</p>",
        "id": 409317266,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703138882
    },
    {
        "content": "<p>I first learned about this escape in the context of C macros, and I always conceptualized it as \"<code>\\</code> at the end of a line\", not \"<code>\\&lt;newline&gt;</code>\"</p>",
        "id": 409317373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703138936
    },
    {
        "content": "<p>Well, I guess we acquired different mental models?</p>",
        "id": 409317432,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703138976
    },
    {
        "content": "<p>which isn't even entirely correct because <code>&lt;newline&gt;</code> could be a CRLF (or possibly some trailing whitespace and then a newline, depending on the details)</p>",
        "id": 409317445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703138983
    },
    {
        "content": "<p><code>crlf</code> is a &lt;newline&gt;.</p>",
        "id": 409317520,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703139007
    },
    {
        "content": "<p>Does C allow trailing whitespace after <code>\\</code>?</p>",
        "id": 409317597,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703139039
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 409317616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703139051
    },
    {
        "content": "<p>Okay, now I am confused by what you just said then.</p>",
        "id": 409317666,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703139075
    },
    {
        "content": "<p>actually no it is accepted with a warning</p>",
        "id": 409317735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703139114
    },
    {
        "content": "<p>in gcc at least</p>",
        "id": 409317763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703139123
    },
    {
        "content": "<p>rust gives an uncharacteristically unhelpful error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">character</span> <span class=\"n\">escape</span><span class=\"o\">:</span> <span class=\"bp\">`</span> <span class=\"bp\">`</span>\n  <span class=\"c1\">--&gt; &lt;source&gt;:10:18</span>\n   <span class=\"bp\">|</span>\n<span class=\"mi\">10</span> <span class=\"bp\">|</span>    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"s2\">\"foo</span><span class=\"err\">\\</span>\n<span class=\"s2\">   |                  ^ unknown character escape</span>\n<span class=\"s2\">   |</span>\n<span class=\"s2\">   = help: for more information, visit &lt;https://doc.rust-lang.org/reference/tokens.html#literals&gt;</span>\n<span class=\"s2\">help: if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal</span>\n<span class=\"s2\">   |</span>\n<span class=\"s2\">10 ~    let x = r\"</span><span class=\"n\">bar</span><span class=\"bp\">\\</span>\n<span class=\"mi\">11</span> <span class=\"bp\">~</span>      <span class=\"n\">bar</span><span class=\"s2\">\";</span>\n<span class=\"s2\">   |</span>\n</code></pre></div>",
        "id": 409317931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703139219
    },
    {
        "content": "<p>but like I said, neither erroring about it nor ignoring it (possibly with a warning) is error prone in the sense that you wrote code that produces different behavior than you expect</p>",
        "id": 409318095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703139295
    },
    {
        "content": "<p>regular multiline strings and heredocs do have this issue though, in that the existence of trailing whitespace can change the behavior of the program</p>",
        "id": 409318212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703139357
    },
    {
        "content": "<p>Apparently, <a href=\"https://en.cppreference.com/w/cpp/language/translation_phases#Phase_2\">accepting trailing whitespace is a C++23 feature</a></p>",
        "id": 409318325,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703139409
    },
    {
        "content": "<p>The warning is thus nonstandard (pre-C++23)</p>",
        "id": 409318368,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703139434
    },
    {
        "content": "<p>No I think that's what makes the warning standard</p>",
        "id": 409318403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703139449
    },
    {
        "content": "<p>presumably it's an error and not a warning on earlier C's</p>",
        "id": 409318456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703139479
    },
    {
        "content": "<p>Well, now. But what I had previously understood was the standard until literally this year.</p>",
        "id": 409318518,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703139486
    },
    {
        "content": "<p>also I just did a C test not C++</p>",
        "id": 409318528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703139489
    },
    {
        "content": "<p>Like I said, I also understood that whitespace is not allowed after <code>\\</code> in C</p>",
        "id": 409318645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703139562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/lake.20errors/near/409318456\">said</a>:</p>\n<blockquote>\n<p>presumably it's an error and not a warning on earlier C's</p>\n</blockquote>\n<p>No, <a href=\"https://en.cppreference.com/w/c/language/translation_phases#Phase_3\"><code>\\</code> is a valid preprocessor token</a></p>",
        "id": 409318791,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703139616
    },
    {
        "content": "<p>and a lot of C \"warnings\" are actually errors that are somehow forced not to be errors by some convoluted process involving backwards compatibility and standard compliance</p>",
        "id": 409318797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703139619
    },
    {
        "content": "<p>One of the reasons I believe I was confident of this was that I believe I have been burned by improper newline backslashing in a  macro before (i.e., some of the code did not end up in the macro as expected, but was treated as a separate declaration and this took me a while to figure out).</p>",
        "id": 409319174,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703139809
    },
    {
        "content": "<p>However, this is a vague feeling. I do not remeber a concrete example, so I could be imagining it.</p>",
        "id": 409319267,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703139847
    },
    {
        "content": "<p>true, it is error prone to leave out the backslash if multiline strings are accepted</p>",
        "id": 409319305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703139864
    },
    {
        "content": "<p>And Lean does accept multiline strings.</p>",
        "id": 409319349,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703139890
    },
    {
        "content": "<p>maybe there could be a warning if you mix backslash newlines and explicit newlines?</p>",
        "id": 409319389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703139912
    },
    {
        "content": "<p>That sounds like a good idea to me.</p>",
        "id": 409319443,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703139941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/lake.20errors/near/409318212\">said</a>:</p>\n<blockquote>\n<p>regular multiline strings and heredocs do have this issue though, in that the existence of trailing whitespace can change the behavior of the program</p>\n</blockquote>\n<p>Yes, but the change is just to insert trailing whitespace into the string, which is usually much less suprising and more easily diagnosable.</p>",
        "id": 409319649,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703140036
    },
    {
        "content": "<p>it is just as difficult to spot as the original error</p>",
        "id": 409319737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140074
    },
    {
        "content": "<p>the reason trailing whitespace is banned in most codebases is because it's invisible</p>",
        "id": 409319856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140122
    },
    {
        "content": "<p>Noticing it may be hard, but that is as hard as noticing trailing whitespace in general (and is usually as important as have trailing whitespace in ones program is).</p>",
        "id": 409319924,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703140147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/lake.20errors/near/409319856\">said</a>:</p>\n<blockquote>\n<p>the reason trailing whitespace is banned in most codebases is because it's invisible</p>\n</blockquote>\n<p>I think ithe more promenient reason is because it causes suprious Git diffs.</p>",
        "id": 409320000,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703140190
    },
    {
        "content": "<p>there was some case I forget now where there was a genuine use for a trailing whitespace, and people were universally against using it or finding a way to locally disable the trailing whitespace ban</p>",
        "id": 409320107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140225
    },
    {
        "content": "<p>If Git was whitespace insensitive (which it good it isn't, but simply as a hypothesis), I am confident that the precentage of codebases with this rule would be significantly smaller.</p>",
        "id": 409320201,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703140263
    },
    {
        "content": "<p>No, that's even worse, if you have a file with a bunch of random trailing whitespace and a programming language that <em>might</em> be making use of it you never know what you have to pay attention to</p>",
        "id": 409320407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140369
    },
    {
        "content": "<p>However, I do agree the trailing whitespace is undesirable because it is invisible. But, I would argue, that is why string gaps are also displeasing, they operate on an invisible character (the newline).</p>",
        "id": 409320408,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703140369
    },
    {
        "content": "<p>they don't operate on the invisible character</p>",
        "id": 409320468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140394
    },
    {
        "content": "<p>I think they should act like the examples shown thus far: either ignore or mandate no trailing whitespace, so in either case you don't have to care or know whether there is any</p>",
        "id": 409320536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140435
    },
    {
        "content": "<p>Yes, they do? As we just demonstrated, C, Rust, and Lean all model the string gap as a newline escape.</p>",
        "id": 409320592,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703140445
    },
    {
        "content": "<p>(Rust and Lean just makes the alternative behavior an error.)</p>",
        "id": 409320656,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703140486
    },
    {
        "content": "<p>just tested, <code>\\</code> at the end of a file with no newline is also accepted by gcc</p>",
        "id": 409320748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"https://en.cppreference.com/w/c/language/translation_phases#Phase_2\">This is because the C standard mandates adding a fake newline at the end of the file if one does not exist.</a></p>",
        "id": 409320887,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703140588
    },
    {
        "content": "<p>although I think files which don't end in a newline are technically UB in the C spec so this is more about what compilers do in practice than what the spec says</p>",
        "id": 409320892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140592
    },
    {
        "content": "<p>that page explicitly says \"a <code>\\</code> at the end of the line\" not \"<code>\\</code> followed by a newline\"</p>",
        "id": 409321009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140680
    },
    {
        "content": "<p>One note from that specification that reinforces my newline escape model is the a file <code>\\&lt;newline&gt;</code> is actually translated to the empty file and then a new newline is added.</p>",
        "id": 409321059,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703140691
    },
    {
        "content": "<p>but I'm not sure why you are pushing for this model if it is also confusing for you?</p>",
        "id": 409321117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140733
    },
    {
        "content": "<p><code>\\</code> at the end of a line is a very visual thing</p>",
        "id": 409321141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140749
    },
    {
        "content": "<p>you see a <code>\\</code> with nothing after it</p>",
        "id": 409321165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140759
    },
    {
        "content": "<p>and whether that is because there is actually nothing or a LF or CRLF or whitespace and then a CRLF doesn't matter</p>",
        "id": 409321232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140788
    },
    {
        "content": "<p>I do not think of the \"end of the line\" as a very visual things. The visual end-of-the-line to me is the end of the relevant text area (or piece of paper IRL).</p>",
        "id": 409321247,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703140800
    },
    {
        "content": "<p>you can't play games with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"foo</span><span class=\"err\">\\</span><span class=\"s2\">                       lol not the end</span>\n<span class=\"s2\"> bar\"</span>\n</code></pre></div>\n<p>because the compiler rejects it</p>",
        "id": 409321357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140842
    },
    {
        "content": "<p>To me, I naturally model a text line as a bunch of whitespace until the end of the text area (which I should note some editors also do -- moving up and down will keep you in the same column and insert trailing whitespace).</p>",
        "id": 409321430,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703140881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Are you talking about Lean?</p>",
        "id": 409321567,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703140939
    },
    {
        "content": "<p>okay, that's fine, <code>\\</code> at the end of the line means a <code>\\</code> with only whitespace in the text area to the right of it in that model</p>",
        "id": 409321568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140940
    },
    {
        "content": "<p>I'm talking about all languages with a backslash newline construct of some kind</p>",
        "id": 409321612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703140963
    },
    {
        "content": "<p><code>#define foo bar \\                  lol not the end</code> definitely works in C.</p>",
        "id": 409321638,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703140978
    },
    {
        "content": "<p>uh, what does it do?</p>",
        "id": 409321746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703141035
    },
    {
        "content": "<p>It creates the macro <code>foo</code> which expands to <code>bar \\ lol not the end</code>.</p>",
        "id": 409321813,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703141056
    },
    {
        "content": "<p>I see that you are right but I have never encountered that in the wild</p>",
        "id": 409321816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703141059
    },
    {
        "content": "<p>what is <code>\\</code> as a token?</p>",
        "id": 409321837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703141068
    },
    {
        "content": "<p>A preprocessor token?</p>",
        "id": 409321861,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703141077
    },
    {
        "content": "<p>no, you are already past the preprocessor at that point, that's supposed to be C code</p>",
        "id": 409321909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703141103
    },
    {
        "content": "<p>I don't think <code>\\</code> means anything as a C token</p>",
        "id": 409321996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703141143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> One case I found is that <a href=\"https://en.cppreference.com/w/c/preprocessor/include\"><code>#include</code> directives support macro replacement</a>, so you can use <code>\\</code> in macros and then use the macro as part of <code>#include</code>. More generally, they could be concatenated with other tokens via <code>##</code> (but it would need to form a valid token, which I am not sure there is one).</p>",
        "id": 409322622,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703141424
    },
    {
        "content": "<p>well in any case I think it's a bit of a distraction, C has all kind of weird things</p>",
        "id": 409322725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703141483
    },
    {
        "content": "<p>it's not used in practice which is good enough for me</p>",
        "id": 409322751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703141502
    },
    {
        "content": "<p>It could create some interesting security exploits, though. <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 409322862,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703141536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/lake.20errors/near/409321357\">said</a>:</p>\n<blockquote>\n<p>you can't play games with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"foo</span><span class=\"err\">\\</span><span class=\"s2\">                       lol not the end</span>\n<span class=\"s2\"> bar\"</span>\n</code></pre></div>\n<p>because the compiler rejects it</p>\n</blockquote>\n<p>Maybe you should read this as \"any self respecting language would have a compiler that rejects this, because it is easy to detect and prevent this class of bugs/exploits\"</p>",
        "id": 409322959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703141597
    },
    {
        "content": "<p>I think C is a self-respecting language.</p>",
        "id": 409322996,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703141616
    },
    {
        "content": "<p>But, I get your point.</p>",
        "id": 409323008,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703141626
    },
    {
        "content": "<p>C is not overly concerned with detection and prevention of bugs</p>",
        "id": 409323082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703141648
    },
    {
        "content": "<p>True.</p>",
        "id": 409323101,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703141657
    },
    {
        "content": "<p>My overal point was that string gaps allow for a <code>\\&lt;newline&gt;</code> mental model, which is nerve-racking for the reasons we just described. Thus, I much prefer the heredoc/YAML approach which does not produce (at least in me) such stress.</p>",
        "id": 409323376,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703141788
    },
    {
        "content": "<p>And I should note, that this is already the model used in docstrings, so applying it to some form of string literal seems reasonable.</p>",
        "id": 409323635,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703141905
    },
    {
        "content": "<p>We don't have heredocs though</p>",
        "id": 409323693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703141936
    },
    {
        "content": "<p>at least not yet</p>",
        "id": 409323703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703141940
    },
    {
        "content": "<p>Yes, I am expressing a future feature request.</p>",
        "id": 409323751,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703141978
    },
    {
        "content": "<p>if you want to propose them then we can talk about whether to prefer one or the other for string literals in code, but right now the option is multiline string literals or string gaps (or appending or other dynamic options, depending on the context)</p>",
        "id": 409323858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703142012
    },
    {
        "content": "<p>In my mind:<br>\ndocstring style &gt; heredoc &gt; string append &gt; string gap</p>",
        "id": 409323889,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703142025
    },
    {
        "content": "<p>but when string gaps land I'm going to try to make them the standard for multiline string literals in std+mathlib</p>",
        "id": 409324015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703142068
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 409324103,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703142099
    },
    {
        "content": "<p>string appending doesn't always work when you have a macro that expects a <code>interpolatedStr</code></p>",
        "id": 409324153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703142118
    },
    {
        "content": "<p>it's also higher edit distance to add a line to a single line string</p>",
        "id": 409324358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703142189
    },
    {
        "content": "<p>I do agree that string gaps are functionally superior, but they are not aesthetically, which I care more about.</p>",
        "id": 409324558,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703142258
    },
    {
        "content": "<p>docstring style is certainly good but it is also most limited. Lean 3 had a <code>/-\" ... \"-/</code> syntax for docstring style string literals</p>",
        "id": 409324589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703142279
    },
    {
        "content": "<p>Oh, I love that! That sounds wonderful!</p>",
        "id": 409324666,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703142312
    }
]