[
    {
        "content": "<p>I'm trying to make something like pre-processed global constants using typeclass. But I ran into some problems</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"c\">/-</span><span class=\"cm\"> may have some parameters -/</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"!\"</span>\n    <span class=\"mi\">1</span> <span class=\"c1\">-- may be some calculations</span>\n  <span class=\"n\">x_def</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">open</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"n\">z</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"mi\">4</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">bar</span>\n</code></pre></div>\n<p>dbg_trace prints 5 <code>!</code>s, does this mean that x is evaluated 5 times? How can I make it only evaluated once?</p>",
        "id": 409458343,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1703189627
    },
    {
        "content": "<p>It seems that it will only be evaluated once if not using instance parameter... I don't know what's happening</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"c\">/-</span><span class=\"cm\"> may have some parameters -/</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"!\"</span>\n    <span class=\"mi\">1</span> <span class=\"c1\">-- may be some calculations</span>\n  <span class=\"n\">x_def</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">open</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">s.x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"n\">z</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"mi\">1</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"mi\">2</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"mi\">3</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"mi\">4</span> <span class=\"n\">s</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">bar</span>\n</code></pre></div>",
        "id": 409459341,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1703190206
    },
    {
        "content": "<p><code>z</code> is automatically specialized for instance arguments, and the specialized instance of <code>z n ({} : foo)</code> evaluates the <code>dbg_trace</code></p>",
        "id": 409460597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703190839
    },
    {
        "content": "<p>You normally don't have to do anything special to get constants to evaluate only once, lean automatically hoists them into globals</p>",
        "id": 409460775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703190911
    },
    {
        "content": "<p>extracting <code>dbg_trace \"!\"; 1</code> into a definition makes it evaluate only once</p>",
        "id": 409461019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703191043
    }
]