[
    {
        "content": "<p>I'm struggling with proofs that involve matching over an application (i.e. <code>match f x with ...</code>): it seems to rewrite the expression in the goal but not any of the parameters/hypotheses. In tactic mode I can work around this by using <code>generalize</code> to create a new name for the application, which will then be rewritten by <code>cases</code> and I can use as a hypothesis as necessary (or can use <code>at *</code> to rename the expression everywhere and then <code>cases</code> will rewrite all of them).</p>\n<p>Is there a trick like <code>generalize</code> I can use in non-tactic mode, or is there a way to get <code>match</code> to emit a hypothesis that the matched expression equals the case?</p>\n<p>My lean version: Lean (version 4.7.0, x86_64-w64-windows-gnu, commit 6fce8f7d5cd1, Release)</p>\n<p>Minimal to the point of silliness code example demonstrating the behaviour:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- match over application rewrite behaviour</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- hfx wasn't rewritten by match, so can't prove this</span>\n\n<span class=\"c1\">-- same behaviour with cases</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">contradiction</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"c1\">-- can use generalize to get evidence that the matched objected equals the case</span>\n<span class=\"c1\">-- can use generalize at * to rewrite all instances</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">_fx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fx</span> <span class=\"c1\">-- at *</span>\n  <span class=\"k\">match</span> <span class=\"n\">fx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">_fx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hfx</span> <span class=\"c1\">-- can drop with at *</span>\n    <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 437091854,
        "sender_full_name": "Freddie Nash",
        "timestamp": 1714897474
    },
    {
        "content": "<p>Is it <code>| h@true =&gt;</code>?</p>",
        "id": 437092543,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714898089
    },
    {
        "content": "<p>I can't immediately work out how that would help: still a mismatch between the target and the parameters: that said, this is new syntax for me in lean, so maybe it's giving me more than I realise.</p>",
        "id": 437092943,
        "sender_full_name": "Freddie Nash",
        "timestamp": 1714898458
    },
    {
        "content": "<p>Is is actually <code>match h : f x with</code></p>",
        "id": 437093248,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714898697
    },
    {
        "content": "<p>That's exactly what I was after: thank you! (works with cases as well)</p>",
        "id": 437093412,
        "sender_full_name": "Freddie Nash",
        "timestamp": 1714898838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"715788\">Freddie Nash</span> has marked this topic as resolved.</p>",
        "id": 437099245,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714904251
    }
]