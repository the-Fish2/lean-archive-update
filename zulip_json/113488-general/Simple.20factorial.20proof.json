[
    {
        "content": "<p>I'm a beginner to Lean and am trying to prove that n! &gt; 2^n for n &gt;= 4. Here is my proof so far, but I'm getting a bit stuck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">factorial_power2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.factorial</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorial</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">exfalso</span>\n      <span class=\"n\">contradiction</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">nn</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorial</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.pow_succ</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">refine</span> <span class=\"n\">Nat.mul_lt_mul_of_le_of_lt'</span> <span class=\"bp\">?</span><span class=\"n\">succ.hac</span> <span class=\"bp\">?</span><span class=\"n\">succ.hbd</span> <span class=\"bp\">?</span><span class=\"n\">succ.ha</span>\n</code></pre></div>\n<p>I can't get either of the first two subgoals, even though I know how I would prove them on paper (the first one is relatively straightforward, for the second just use the inductive hypothesis). Any help on how to express it in Lean? Thanks in advance!</p>",
        "id": 432501485,
        "sender_full_name": "James Li",
        "timestamp": 1712754869
    },
    {
        "content": "<p>It does not appear provable at this point, because the induction hypothesis is too weak</p>",
        "id": 432503828,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712755607
    },
    {
        "content": "<p>Instead, you can use <code>Nat.le_induction</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">factorial_power2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.factorial</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span> <span class=\"n\">using</span> <span class=\"n\">Nat.le_induction</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorial</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorial</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.pow_succ</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Nat.mul_lt_mul_of_le_of_lt'</span> <span class=\"bp\">?</span><span class=\"n\">succ.hac</span> <span class=\"bp\">?</span><span class=\"n\">succ.hbd</span> <span class=\"bp\">?</span><span class=\"n\">succ.ha</span>\n    <span class=\"n\">all_goals</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 432504758,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712755862
    },
    {
        "content": "<p>Or you can do this (where <code>ih</code> is strong enough):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorial</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 432505092,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712755946
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Spoiler</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>example {n : ℕ} : 2 ^ (n + 4) ≤ (n + 4).factorial := by<br>\n  induction n with<br>\n  | zero =&gt; simp [Nat.factorial]<br>\n  | succ n ih =&gt;<br>\n    rw [Nat.factorial_succ, pow_succ']<br>\n    gcongr ; linarith</p>\n</div></div>",
        "id": 432505930,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712756186
    },
    {
        "content": "<p>Thanks, didn't realize there was le_induction! I'm still stuck at this last part of the proof... it should be trivial but I'm not sure what the right tactic is. \"simp\" doesn't work, and I remember there used to be \"ring\" but it doesn't seem to be a valid tactic anymore! What's the right way to finish it off?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">Nat.factorial</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 432601189,
        "sender_full_name": "James Li",
        "timestamp": 1712789739
    },
    {
        "content": "<p><code>ring</code> is a valid tactic (did you <code>import Mathlib.Tactic</code>?) but what you need here is <code>linarith</code> or <code>omega</code>.</p>",
        "id": 432607058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712793884
    },
    {
        "content": "<p>If you want to prove it by hand, there is also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_trans#doc\">docs#le_trans</a>.</p>",
        "id": 432618824,
        "sender_full_name": "Chris Wong",
        "timestamp": 1712803485
    }
]