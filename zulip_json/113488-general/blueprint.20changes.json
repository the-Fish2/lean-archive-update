[
    {
        "content": "<p>An important announcement for people who currently use my plasTeX blueprint plugin and install it directly from the git master branch (probably at least <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span>, <span class=\"user-mention\" data-user-id=\"387244\">@YaÃ«l Dillies</span>, <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span>). I just pushed a series of changes that require a little adjustment. The disturbance comes from the very long overdue split of the plugin into three pieces. A new <a href=\"https://github.com/PatrickMassot/plastexshowmore\">tiny piece</a> which adds the eye buttons and have nothing to do with graphs or Lean. A new <a href=\"https://github.com/PatrickMassot/plastexdepgraph\">dependency graph plugin</a> which allows to build dependency graphs using <code>\\uses</code> and <code>\\proves</code> but has nothing to do with Lean. And the <a href=\"https://github.com/PatrickMassot/leanblueprint\">blueprint plugin</a> which is now built on top of the graph plugin. Hopefully you should have nothing to change in your TeX code. However you need to install three python packages instead of one. I opened the corresponding <a href=\"https://github.com/teorth/pfr/pull/169\">PR to the PFR project</a> as a migration example. Of course you shouldn't hesitate to tell me whether something broke even after installing the three new packages.</p>",
        "id": 411444949,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704495219
    },
    {
        "content": "<p>Thanks! You can add me to the list, with a not-yet-public FLT blueprint.</p>",
        "id": 411445283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704495413
    },
    {
        "content": "<p>This change was a substantial piece of work that I wanted to do before more modifications, although it is barely visible for users. There are also a couple of user-visible changes. </p>\n<ul>\n<li>The dependency graph is now automatically reduced by default, so you can use <code>\\uses</code> everywhere without cluttering the graph with redundant edges. You can turn-off this reduction using the <code>nonreducedgraph</code> option when loading the <code>blueprint</code> package in your TeX code.</li>\n<li>You can mark a theorem statement or definition using the <code>\\notready</code> LaTeX command to flag it as not ready for formalization (presumably because its blueprint is not yet fleshed-out). It will appear with an orange border in the graph.</li>\n<li>Nodes which are fully formalized including all their dependencies are now darker (you can see it in the <a href=\"https://teorth.github.io/pfr/blueprint/dep_graph_document.html\">PFR graph</a> already).</li>\n<li>Speaking of colors, you can now changes the colors appearing in the graph  from the TeX code. But I haven't written the documentation yet.</li>\n<li>You can use <code>\\discussion{NNN}</code> inside a theorem statement or a definition, where <code>NNN</code> is a GitHub issue number. This will create a link to GitHub visible from the theorem header in the main text and at the bottom of statements in the graph.</li>\n</ul>",
        "id": 411446221,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704495949
    },
    {
        "content": "<p>Still on my TODO list for the near future:</p>\n<ul>\n<li>replace the <a href=\"https://www.pyinvoke.org\">invoke</a> script tradition by a <code>leanblueprint</code> command line client doing the same thing, and can also be used to create with a file layout and GitHub scripts.</li>\n<li>Write documentation.<br>\nMy longer term TODO also has graph filtering but I cannot say when this will happen because Lean Together 2024 will clearly come first and then the second term will start.</li>\n</ul>",
        "id": 411446606,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704496184
    },
    {
        "content": "<p><code>\\discussion</code> is a great addition!</p>",
        "id": 411447857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704496951
    },
    {
        "content": "<p>This is great! Also: <span class=\"user-mention\" data-user-id=\"557226\">@Ian Jauslin</span>  and I have been playing around with a tool which allows the following: rather than separately writing a TeX blueprint file, and bouncing back and forth between that and Lean, you write the TeX directly inside the comments of the Lean file, and then scrape that TeX into corresponding blueprint files. Please see: <a href=\"https://github.com/ianjauslin-rutgers/leanblueprint-extract\">https://github.com/ianjauslin-rutgers/leanblueprint-extract</a> Any comments/suggestions are welcome!</p>",
        "id": 411474463,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1704515713
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"571592\">@Paul Nelson</span> has an even cooler setup, where inside Emacs, his TeX shows already rendered inline. So he \"sees\" the blueprint as he types the Lean. The closest thing I could find that works with VS Code is \"conceal\": <a href=\"https://marketplace.visualstudio.com/items?itemName=BRBoer.vsc-conceal\">https://marketplace.visualstudio.com/items?itemName=BRBoer.vsc-conceal</a> but it's not as good...</p>",
        "id": 411474577,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1704515883
    },
    {
        "content": "<p>This all looks really great, thank you for all the work!</p>",
        "id": 411501762,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1704541782
    },
    {
        "content": "<p>This idea has been discussed in the past, and already implemented in format_lean (Lean 3 only) but the consensus is that we want the TeX code to be autonomous so that people with no Lean knowledge can write and maintain Lean blueprints.</p>",
        "id": 411524945,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704563676
    },
    {
        "content": "<p>Sure, it's not a good idea in every project. But another benefit to those who may want to use it is the following: with copilot running in the background, it often takes the natural language (TeX) immediately above the cursor and literally spits out exactly the corresponding Lean statement... (It doesn't do quite as well nearly as often if not prompted in this way...)</p>",
        "id": 411563353,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1704596534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/113488-general/topic/blueprint.20changes/near/411474577\">said</a>:</p>\n<blockquote>\n<p>Also, <span class=\"user-mention silent\" data-user-id=\"571592\">Paul Nelson</span> has an even cooler setup, where inside Emacs, his TeX shows already rendered inline. So he \"sees\" the blueprint as he types the Lean. The closest thing I could find that works with VS Code is \"conceal\": <a href=\"https://marketplace.visualstudio.com/items?itemName=BRBoer.vsc-conceal\">https://marketplace.visualstudio.com/items?itemName=BRBoer.vsc-conceal</a> but it's not as good...</p>\n</blockquote>\n<p>in case anyone's curious, this is what Alex mentioned (although to be honest, I usually fold away the tex to focus on the code)<br>\n<a href=\"/user_uploads/3121/X4D9A_tCuXqGOhKlWSR4BYsw/preview-lean4.png\">preview-lean4.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/X4D9A_tCuXqGOhKlWSR4BYsw/preview-lean4.png\" title=\"preview-lean4.png\"><img src=\"/user_uploads/3121/X4D9A_tCuXqGOhKlWSR4BYsw/preview-lean4.png\"></a></div>",
        "id": 411609785,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704642597
    }
]