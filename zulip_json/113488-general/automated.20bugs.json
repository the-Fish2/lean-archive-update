[
    {
        "content": "<p>I wrote a small testing suite for finding common meta-programming bugs.  It is quite rudimentary, but it found bugs in <code>abel</code> and in <code>cancel_denoms</code>.  I have not used it extensively, but here is the PR, in case someone is curious!</p>\n<p>Any comments are very welcome!</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12054\">#12054</a></p>",
        "id": 432582959,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712782219
    },
    {
        "content": "<p>Here are the two auto-bugs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.CancelDenoms</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Abel</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">cancel_denoms</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- found by automated testing</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>  <span class=\"c1\">-- works if you comment</span>\n  <span class=\"n\">cancel_denoms</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">cancel_denoms</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">abel</span>\n\n<span class=\"c1\">-- found by automated testing</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>  <span class=\"c1\">-- works if you comment</span>\n  <span class=\"n\">abel_nf</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">abel</span>\n</code></pre></div>",
        "id": 432582989,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712782231
    },
    {
        "content": "<p>Wow this is very very cool!</p>",
        "id": 432601561,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1712789973
    },
    {
        "content": "<p>Can we separate out the fixes to tactics in a separate PR?</p>",
        "id": 432861117,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712912161
    },
    {
        "content": "<p>Separated:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12083\">#12083</a> -- <code>cancel_denoms</code>;</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12084\">#12084</a> -- <code>abel</code>.</li>\n</ul>",
        "id": 432865278,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712913744
    },
    {
        "content": "<p>Eric just left comments on <a href=\"https://github.com/leanprover-community/mathlib4/pull/12083\">#12083</a>, and I've <span aria-label=\"peace sign\" class=\"emoji emoji-270c\" role=\"img\" title=\"peace sign\">:peace_sign:</span>'d <a href=\"https://github.com/leanprover-community/mathlib4/pull/12084\">#12084</a>.</p>",
        "id": 432869305,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712915404
    },
    {
        "content": "<p>I think my comments apply to both; I think we're solving the symptom not the problem here</p>",
        "id": 432869653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712915550
    },
    {
        "content": "<p>The problem is that we're performing syntactic matching when we should almost certainly be performing reducible defeq matching</p>",
        "id": 432869717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712915579
    },
    {
        "content": "<p>In both cases, I think a <code>whnfR</code>, immediately before doing expression matching, is the right approach</p>",
        "id": 432869874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712915639
    },
    {
        "content": "<p>(or switching to use <code>~q()</code>, but that's a more involved change with more downsides)</p>",
        "id": 432869962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712915661
    },
    {
        "content": "<p>Ok, so at least in one case, this means making a \"pure\" def into a \"monadic\" one: is that correct?</p>",
        "id": 432870022,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712915695
    },
    {
        "content": "<p>Oh, I see that this is what you wrote in the PR!</p>",
        "id": 432870121,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712915739
    },
    {
        "content": "<p>I'm going to wait for <a href=\"https://github.com/leanprover-community/mathlib4/pull/12084\">#12084</a> to build and then will merge: if you have anything against it, let me know!</p>\n<p>With the fix, <code>abel</code> should work at reducible transparency, which seems to be what everyone wants and there is a test checking this.</p>",
        "id": 432955626,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712945265
    }
]