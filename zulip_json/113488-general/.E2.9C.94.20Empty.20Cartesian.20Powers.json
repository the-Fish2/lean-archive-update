[
    {
        "content": "<p>I'm currently writing a category-theoretic inflected proof, and there are some cases involving empty cartesian products/powers. In particular, if alpha is a type, then we write alpha^n as the type (Fin n) -&gt; alpha, and in the case where n = 0 there should be a unique element of type (Fin 0) -&gt; alpha. In the edge case where alpha is itself an unihabited type, how do we access this element, or show that it is unique?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- how to define this unique map from empty type to empty type?</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- x is an element of an empty type, so somehow this should imply falsity, which should imply the conclusion?</span>\n</code></pre></div>",
        "id": 436573903,
        "sender_full_name": "Bashir",
        "timestamp": 1714598006
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- how to define this unique map from empty type to empty type?</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- x is an element of an empty type, so somehow this should imply falsity, which should imply the conclusion?</span>\n  <span class=\"n\">nomatch</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 436587973,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714605363
    },
    {
        "content": "<p>Note that you don't even need to think of the case where alpha is inhabited or uninhabited as separate cases. <code>Fin 0</code> initial. We should have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.elim0#doc\">docs#Fin.elim0</a> I think?</p>",
        "id": 436589118,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714605951
    },
    {
        "content": "<p>And since <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.elim0#doc\">docs#Fin.elim0</a> maps to a sort, not just a type, you can use it for proofs as well.</p>",
        "id": 436589224,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714605994
    },
    {
        "content": "<p>Thank you for your assistance</p>",
        "id": 436764175,
        "sender_full_name": "Bashir",
        "timestamp": 1714678729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"709197\">Bashir</span> has marked this topic as resolved.</p>",
        "id": 436764194,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714678738
    }
]