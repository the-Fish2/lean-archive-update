[
    {
        "content": "<p>I have an example of algebraic identity in a ring where <code>ring_nf</code> makes no progress but, if I assume that the ring in question is a field, then <code>ring_nf</code>  closes the goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">ring_nf</span> <span class=\"c1\">-- makes no progress</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">ring_nf</span>  <span class=\"c1\">-- closes the goal</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Is this expected behaviour?</p>\n<p>I must be doing something wrong, because specialising to the integers makes the proof work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">ring_nf</span> <span class=\"c1\">-- closes the goal</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 436204738,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1714459197
    },
    {
        "content": "<p><code>ring</code> only works for commutative rings</p>",
        "id": 436205094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714459339
    },
    {
        "content": "<p><code>noncomm_ring</code> sometimes suffices for non-commutative rings, but it is a \"best effort\" tactic, not a decision procedure.</p>",
        "id": 436207391,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714460332
    },
    {
        "content": "<p>I think “ring” tactic should provide a suggestion message …<br>\nfor example “ring tactic is for commutative ring”</p>",
        "id": 436208188,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714460633
    },
    {
        "content": "<p>“you probably want to use abel, noncomm_ring…”</p>",
        "id": 436208439,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714460682
    },
    {
        "content": "<p>Maybe the tactic docstring is the place for those comments?</p>",
        "id": 436208611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714460728
    },
    {
        "content": "<p>The docstring already mentions the commutativity constraint. But I think it is a nice suggestion that <code>ring</code> could complain with <code>Could not synthesize instance of [CommSemiRing ?R]</code> where <code>?R</code> is replaced by the type of the LHS/RHS in the goal.</p>",
        "id": 436208889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714460813
    },
    {
        "content": "<p>And it could then additionally suggest trying <code>abel</code> or <code>noncomm_ring</code>.</p>",
        "id": 436208940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714460834
    },
    {
        "content": "<p>Yes, an error message like that that would be good! Although in the present case, it is mostly my fault for thinking that <code>Ring</code> means <code>CommRing</code>, so the error message could also say <code>not all rings are commutative!</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 436209367,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1714460984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> it sounds good!! thank you very much</p>",
        "id": 436210740,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714461610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Behaviour.20of.20ring.20tactic/near/436208940\">said</a>:</p>\n<blockquote>\n<p>And it could then additionally suggest trying <code>abel</code> or <code>noncomm_ring</code>.</p>\n</blockquote>\n<p>Is it really the case that <code>ring</code> may fail on something non-abelian and <code>abel</code> would succeed?</p>",
        "id": 436212378,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714462397
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 436212663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714462505
    },
    {
        "content": "<p>Touché.  Still...</p>",
        "id": 436212774,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714462556
    },
    {
        "content": "<p>I'm inclined to say that <code>ring_nf_nf</code> should be <code>abel</code>!</p>",
        "id": 436212943,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714462623
    },
    {
        "content": "<p>The <code>ring1</code> tactic tells you about the instance failure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring1</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CommSemiring R</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>The issue with <code>ring</code> is that it's defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ring</span><span class=\"o\">)</span> <span class=\"s2\">\"ring\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">ring1</span> <span class=\"bp\">|</span> <span class=\"n\">try_this</span> <span class=\"n\">ring_nf</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and this error message is discarded once it goes to the second case.</p>\n<p>The <code>ring_nf</code> is a <code>ring1</code>-powered <code>simp</code>, and it's not able to diagnose a missing <code>CommRing</code> instance (it normalizes all CommRing subexpressions).</p>",
        "id": 436214064,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714463141
    },
    {
        "content": "<p>If <code>ring_nf</code> could detect that nothing was done (and fail), then the macro could be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ring</span><span class=\"o\">)</span> <span class=\"s2\">\"ring\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">ring1</span> <span class=\"bp\">|</span> <span class=\"n\">try_this</span> <span class=\"n\">ring_nf</span> <span class=\"bp\">|</span> <span class=\"n\">ring1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which should print that \"failed to synthesize\" error</p>",
        "id": 436214241,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714463230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Behaviour.20of.20ring.20tactic/near/436212378\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Behaviour.20of.20ring.20tactic/near/436208940\">said</a>:</p>\n<blockquote>\n<p>And it could then additionally suggest trying <code>abel</code> or <code>noncomm_ring</code>.</p>\n</blockquote>\n<p>Is it really the case that <code>ring</code> may fail on something non-abelian and <code>abel</code> would succeed?</p>\n</blockquote>\n<p>Just to be clear, <code>abel</code> is assuming the additive structure is commutative, <code>ring</code> is assuming the multiplicative structure is commutative.</p>",
        "id": 436270026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714483116
    },
    {
        "content": "<p>(and the additive structure is commutative even for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NonUnitalNonAssocSemiring#doc\">docs#NonUnitalNonAssocSemiring</a> s ...)</p>",
        "id": 436276790,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714485136
    },
    {
        "content": "<p>The only example I know of <code>+</code> being used in mathematics to indicate something non-commutative is for ordinals.</p>",
        "id": 436276979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714485194
    }
]