[
    {
        "content": "<p>This (very simple! no mathlib! no tactics!) code causes a stack overflow on the lean server immediately and deterministically. I have no clue why. This is minified, of course, from the actual code I was working on.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">H</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prop1</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prop2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prop2.prop1</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">prop2</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prop1</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">DataProp1</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">H</span>\n  <span class=\"n\">is_prop1</span> <span class=\"o\">:</span> <span class=\"n\">prop1</span> <span class=\"n\">data</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">DataProp2</span> <span class=\"kd\">extends</span> <span class=\"n\">DataProp1</span> <span class=\"n\">where</span>\n  <span class=\"n\">is_prop2</span> <span class=\"o\">:</span> <span class=\"n\">prop2</span> <span class=\"n\">data</span>\n  <span class=\"n\">is_prop1</span> <span class=\"o\">:=</span> <span class=\"n\">is_prop2.prop1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">breakingBug</span> <span class=\"o\">:</span> <span class=\"n\">DataProp2</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"n\">is_prop2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 434441960,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1713564027
    },
    {
        "content": "<p>It doesn't seem to matter what goes in the <code>sorry</code>s, or the \"0\" value (or using something other than Nat), or if you make the <code>def</code> noncomputable or not.</p>",
        "id": 434442200,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1713564172
    },
    {
        "content": "<p>Oddly -- if I change the \"by sorry\" at the bottom to \"sorry\", then it doesn't crash.</p>",
        "id": 434442241,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1713564200
    },
    {
        "content": "<p>So I have to conclude that, somehow, there is a bug in the <code>sorry</code> tactic!?</p>",
        "id": 434442349,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1713564247
    },
    {
        "content": "<p>There's a chance it's a bug in default values in structures that that are for fields from parent structures. I've seen some oddities in it before.</p>",
        "id": 434445621,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713566530
    },
    {
        "content": "<p>Evidence pointing toward that is that this avoids the stack overflow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">DataProp2</span> <span class=\"kd\">extends</span> <span class=\"n\">DataProp1</span> <span class=\"n\">where</span>\n  <span class=\"n\">is_prop2</span> <span class=\"o\">:</span> <span class=\"n\">prop2</span> <span class=\"n\">data</span>\n  <span class=\"n\">is_prop1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 434445785,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713566646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> do you think it could involve _entering tactic mode_ that is triggering it? Because the \"sorry\" itself shouldn't do anything</p>",
        "id": 434451987,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1713571120
    },
    {
        "content": "<p>Something like this (sorry v by sorry crashing) came up a week or so ago -- I think it might have been Jz Pan when doing algebra but I'm on mobile and can't search. Maybe Floris minimised it and an issue was opened?</p>",
        "id": 434455073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713573545
    },
    {
        "content": "<p>It crashes the moment you type <code>by</code>, so <code>sorry</code> has nothing to do with it. I believe when lean is creating the type for <code>is_prop2</code> it needs to construct a <code>DataProp1</code> to get the <code>data</code> field which then tries to use <code>is_prop1 := is_prop2.prop1</code> and this causes infinite recursion.</p>",
        "id": 434459369,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1713577899
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3150\">lean4#3150</a></p>",
        "id": 435891002,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1714323215
    }
]