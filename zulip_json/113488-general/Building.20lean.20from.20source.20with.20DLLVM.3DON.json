[
    {
        "content": "<p>Hi, I am trying to build lean4 from source in order to get bc generation working. I build LLVM 15 and I tried to set the location of llvm-config when running cmake but I still get an error when running make. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cmake</span> <span class=\"bp\">-</span><span class=\"n\">DLLVM</span><span class=\"bp\">=</span><span class=\"n\">ON</span> <span class=\"bp\">-</span><span class=\"n\">DLLVM_CONFIG</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">user</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">-</span><span class=\"n\">project</span><span class=\"bp\">-</span><span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">-</span><span class=\"n\">config</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_CXX_COMPILER</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">user</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">-</span><span class=\"n\">project</span><span class=\"bp\">-</span><span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">clang</span><span class=\"bp\">++</span> <span class=\"bp\">-</span><span class=\"n\">DCMAKE_C_COMPILER</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">user</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">-</span><span class=\"n\">project</span><span class=\"bp\">-</span><span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">clang</span> <span class=\"bp\">../..</span>\n</code></pre></div>\n<p>The error is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CMake</span> <span class=\"n\">Error</span> <span class=\"n\">at</span> <span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">CMakeLists.txt</span><span class=\"o\">:</span><span class=\"mi\">22</span> <span class=\"o\">(</span><span class=\"n\">message</span><span class=\"o\">):</span>\n  <span class=\"n\">building</span> <span class=\"bp\">'</span><span class=\"n\">lean.h.bc'</span><span class=\"o\">,</span> <span class=\"n\">need</span> <span class=\"n\">CMAKE_CXX_COMPILER_ID</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"n\">Clang</span> <span class=\"n\">to</span> <span class=\"n\">build</span>\n  <span class=\"n\">LLVM</span> <span class=\"n\">bitcode</span> <span class=\"n\">file</span> <span class=\"n\">of</span> <span class=\"n\">Lean</span> <span class=\"n\">runtime.</span>\n</code></pre></div>\n<p>Any idea whats wrong here ?</p>",
        "id": 413191302,
        "sender_full_name": "Ahmed Zaki",
        "timestamp": 1705422007
    },
    {
        "content": "<p>I usually compile with the env vars CC and CXX set to clang and clang++ respectively, that works without issues.</p>",
        "id": 413193973,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705422806
    },
    {
        "content": "<p>Note that the generated LLVM IR is currently worse than what you get from C code performance wise so unless you have a good reason to use the LLVM backend you probably do not want to right now</p>",
        "id": 413194077,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705422838
    },
    {
        "content": "<p>Thanks ! For some reason even using the env vars didn't do it and I still get the same error. I am using LLVM 15.0.0.7 and I built that , not sure if there is a specific config of LLVM 15 that needs to be set ? I do need the IR but not for performance reasons I just want to see what the IR looks like for some cases.</p>",
        "id": 413195150,
        "sender_full_name": "Ahmed Zaki",
        "timestamp": 1705423183
    },
    {
        "content": "<p>I just set it up with this: <code>cmake -DLLVM=ON -DLLVM_CONFIG=$(which llvm-config)  ../../</code> where I included the  bin of my llvm installation int he path and set the CXX/CC to the values above and it worked without issues for me.</p>\n<p>The LLVM IR that we generate is almost in 1:1 correspondence with the C output which in turn is a straight forward translation from the internal IR that you can view with <code>set_option trace.compiler.ir.result true</code> if you want to.</p>",
        "id": 413196817,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705423686
    },
    {
        "content": "<p>Thank you ! Turns out I had a cacheing issue that caused it to fail building. All good now :) . Thank you for the pointer to view the internal IR. That's very useful ! So I can do that on per project basis without having to build lean with LLVM=ON ?</p>",
        "id": 413201926,
        "sender_full_name": "Ahmed Zaki",
        "timestamp": 1705425162
    },
    {
        "content": "<p>the IR that I am referring to with the tracing option is not LLVM IR, it is the internal compiler IR that is generic across all backends so yes you can always use this.</p>",
        "id": 413202660,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705425406
    },
    {
        "content": "<p>Can you tell me what you wish to do with the IR exactly? Maybe I can provide further pointers in that case.</p>",
        "id": 413203126,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705425588
    },
    {
        "content": "<p>I am looking at doing some program analysis using the IR</p>",
        "id": 413203736,
        "sender_full_name": "Ahmed Zaki",
        "timestamp": 1705425803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Building.20lean.20from.20source.20with.20DLLVM.3DON/near/413194077\">said</a>:</p>\n<blockquote>\n<p>Note that the generated LLVM IR is currently worse than what you get from C code performance wise so unless you have a good reason to use the LLVM backend you probably do not want to right now</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Do we have a tracking issue for this?</p>",
        "id": 416056801,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1705505848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Building.20lean.20from.20source.20with.20DLLVM.3DON/near/416056801\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Building.20lean.20from.20source.20with.20DLLVM.3DON/near/413194077\">said</a>:</p>\n<blockquote>\n<p>Note that the generated LLVM IR is currently worse than what you get from C code performance wise so unless you have a good reason to use the LLVM backend you probably do not want to right now</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> Do we have a tracking issue for this?</p>\n</blockquote>\n<p>I don't think so, when I originally discovered this it seemed like some failure of LLVM to do inlining (the generated IR itself is okay, it's what happens with it after -O3) and I planned to fix it with <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> but then a ton of stuff happen on Siddharth's side so its still not fixed :(. Do you want me to open one?</p>",
        "id": 416084761,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705512895
    },
    {
        "content": "<p>Yes please!</p>",
        "id": 416085202,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1705513061
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/3192\">https://github.com/leanprover/lean4/issues/3192</a> This is a rather rudimentary description but I recently switched laptops so I dont have the entire example at hand right now.</p>",
        "id": 416091881,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705515401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> can you try adding alwaysinline attributes onto the llvmir functions inside lean.h.bc?</p>",
        "id": 416583374,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1705588382
    },
    {
        "content": "<p>They are already there</p>",
        "id": 416583466,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705588413
    },
    {
        "content": "<p>The fact they are not working is precisely the reason we are confused</p>",
        "id": 416583704,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705588480
    },
    {
        "content": "<p>one can try opt -always-inline to see how llvm transforms the fucntions</p>",
        "id": 416584148,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1705588606
    },
    {
        "content": "<p>Already did that, the always inliner ignores then</p>",
        "id": 416584315,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705588659
    },
    {
        "content": "<p>that’s interesting</p>",
        "id": 416584489,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1705588699
    },
    {
        "content": "<p>Indeed</p>",
        "id": 416584521,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705588712
    },
    {
        "content": "<p>Hence why this issue isn't already fixed :P</p>",
        "id": 416584603,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705588737
    },
    {
        "content": "<p>If someone is investigating this: Siddharth and I now have a patch that fixes this, we'll clean it up and upstream it this or next week.</p>",
        "id": 417550142,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1706054225
    },
    {
        "content": "<p>Would like to see the patch once ready <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 418004100,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1706154266
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3225\">https://github.com/leanprover/lean4/pull/3225</a> <span class=\"user-mention\" data-user-id=\"639630\">@Schrodinger ZHU Yifan</span></p>",
        "id": 418454250,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1706397806
    }
]