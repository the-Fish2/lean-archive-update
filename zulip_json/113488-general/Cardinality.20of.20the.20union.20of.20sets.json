[
    {
        "content": "<p>I'm having trouble proving that the cardinality of a union of sets is equal to the sum of the cardinalities when the sets are disjoint.  The only theorem that I see in mathlib for this is Finset.card_biUnion, which is for finsets.  I can also prove by induction that the sum of the encards of the subsets is equal to the encard of the union, using Set.encard_union_eq, but the Disjoint property is unwieldy to prove by unfolding the definition, and generally this is a rather complicated approach.  I have a few questions</p>\n<p>1.) Is there an easier way to do all of this<br>\n2.) Should I first find the cardinalities of the subsets to show that they are finite, so that I can use Finset.card_biUnion</p>\n<p>Here is an mwe, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">encard_union</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"gr\">sorry</span><span class=\"o\">}):</span>\n  <span class=\"n\">S.encard</span> <span class=\"bp\">=</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">Sₙ</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">50</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">union_eq</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">Set.iUnion</span> <span class=\"n\">Sₙ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">S.encard</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">Finset.univ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Sₙ</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">encard</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n    <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">50</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">):</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">union_eq</span><span class=\"o\">]</span>\n\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Any suggestions or help would be appreciated!</p>",
        "id": 409468844,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1703195282
    },
    {
        "content": "<p>You're definitely in trouble with your statement, since it contains <code>sorry</code>! I think the statement that you want to prove is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.encard_iUnion_eq</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">Disjoint</span> <span class=\"n\">on</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">encard</span> <span class=\"bp\">=</span> <span class=\"bp\">∑ᶠ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">encard</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 409471973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703196712
    },
    {
        "content": "<p>How about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set.encard</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Set.encard</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">Finset.cons_induction</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">cons</span> <span class=\"n\">i</span> <span class=\"n\">s</span> <span class=\"n\">hi</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.encard_union_eq</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">congr</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ih</span>\n      <span class=\"n\">intros</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">hjk</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hj</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">]</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">Set.disjoint_iUnion₂_right.mpr</span> <span class=\"bp\">?</span><span class=\"n\">cons.a</span>\n      <span class=\"n\">intros</span> <span class=\"n\">j</span> <span class=\"n\">hj</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hj</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Ne.symm</span> <span class=\"o\">(</span><span class=\"n\">ne_of_mem_of_not_mem</span> <span class=\"n\">hj</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set.encard</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Set.encard</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo'</span> <span class=\"n\">α</span> <span class=\"n\">ι</span>  <span class=\"n\">f</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">j</span> <span class=\"bp\">-</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 409475446,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703198108
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 409478092,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1703199465
    },
    {
        "content": "<p>(This sniped me into trying to go via the existing proof for <code>Cardinal</code>, which probably needs <a href=\"https://github.com/leanprover-community/mathlib4/pull/9187\">#9187</a>)</p>",
        "id": 409479053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703199917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Cardinality.20of.20the.20union.20of.20sets/near/409471973\">said</a>:</p>\n<blockquote>\n<p>You're definitely in trouble with your statement, since it contains <code>sorry</code>! I think the statement that you want to prove is:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.encard_iUnion_eq</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">Disjoint</span> <span class=\"n\">on</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">encard</span> <span class=\"bp\">=</span> <span class=\"bp\">∑ᶠ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">encard</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This isn’t true - if all the sets in s are infinite and there are infinitely many of them, then the RHS is zero and the LHS is infinite.</p>\n<p>The right generality here is <code>tsum</code> or cardinals.</p>",
        "id": 409586780,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1703253511
    },
    {
        "content": "<p>Nice catch! I almost wrote <code>tsum</code>, but thought I would be safe...</p>",
        "id": 409590242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703254903
    },
    {
        "content": "<p>I have a PR almost ready with that lemma and many others proved for <code>tsum</code>, but the annoying thing is that it doesn’t properly generalize the corresponding <code>ENNReal</code> statements.</p>",
        "id": 409593987,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1703256549
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9187\">#9187</a> (linked above) has the cardinal versions</p>",
        "id": 409602040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703259477
    },
    {
        "content": "<p>Why doesn't that PR use <code>PairwiseDisjoint</code>?</p>",
        "id": 409610744,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1703262704
    },
    {
        "content": "<p>The short answer is that I was matching the style of the existing lemmas there</p>",
        "id": 409612635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703263608
    },
    {
        "content": "<p>A follow-up could indeed make that cleanup</p>",
        "id": 409612665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703263628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329425\">Peter Nelson</span> <a href=\"#narrow/stream/113488-general/topic/Cardinality.20of.20the.20union.20of.20sets/near/409610744\">said</a>:</p>\n<blockquote>\n<p>Why doesn't that PR use <code>PairwiseDisjoint</code>?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9236\">#9236</a></p>",
        "id": 409703878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703325454
    }
]