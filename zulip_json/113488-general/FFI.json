[
    {
        "content": "<p>Is it possible return a lean string from a cpp function without wrapping it in an IO monad? Every thing I try produces errors to do with symbols not being found. This works :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern</span> <span class=\"s2\">\"C\"</span> <span class=\"n\">lean_obj_res</span> <span class=\"n\">my_string</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">return</span> <span class=\"n\">lean_io_result_mk_ok</span><span class=\"o\">(</span><span class=\"n\">lean_mk_string</span><span class=\"o\">(</span><span class=\"s2\">\"hello\"</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"my_string\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">myString</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span>\n</code></pre></div>\n<p>Can I just return a string?</p>",
        "id": 424536470,
        "sender_full_name": "Conor Bergin",
        "timestamp": 1709493917
    },
    {
        "content": "<p>You should be able to just use <code>lean_mk_string</code> and remove the <code>IO</code>. What errors are you getting?</p>",
        "id": 424539946,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1709496806
    },
    {
        "content": "<p>I think the issue is that <code>@[extern \"my_string\"] opaque myString : String</code> does not have any arguments. Compiler considers it to be a constant that is supposed to be set during initialization and that does not seem to play well with FFI.</p>\n<p>If you call <code>lean myString.lean -c myString.c</code> on <br>\n<code>myString.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"my_string\"</span><span class=\"kd\">]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">myString</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n</code></pre></div>\n<p>It generates</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// Lean compiler output</span>\n<span class=\"c1\">// Module: myString</span>\n<span class=\"c1\">// Imports: Init</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;lean/lean.h&gt;</span>\n<span class=\"cp\">#if defined(__clang__)</span>\n<span class=\"cp\">#pragma clang diagnostic ignored \"-Wunused-parameter\"</span>\n<span class=\"cp\">#pragma clang diagnostic ignored \"-Wunused-label\"</span>\n<span class=\"cp\">#elif defined(__GNUC__) &amp;&amp; !defined(__CLANG__)</span>\n<span class=\"cp\">#pragma GCC diagnostic ignored \"-Wunused-parameter\"</span>\n<span class=\"cp\">#pragma GCC diagnostic ignored \"-Wunused-label\"</span>\n<span class=\"cp\">#pragma GCC diagnostic ignored \"-Wunused-but-set-variable\"</span>\n<span class=\"cp\">#endif</span>\n<span class=\"cp\">#ifdef __cplusplus</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"cp\">#endif</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">my_string</span><span class=\"p\">;</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">initialize_Init</span><span class=\"p\">(</span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">builtin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"p\">);</span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">_G_initialized</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">initialize_myString</span><span class=\"p\">(</span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">builtin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_G_initialized</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"n\">_G_initialized</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">initialize_Init</span><span class=\"p\">(</span><span class=\"n\">builtin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_io_mk_world</span><span class=\"p\">());</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lean_io_result_is_error</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"n\">lean_dec_ref</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span>\n<span class=\"n\">l_myString</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_init_l_myString</span><span class=\"p\">();</span>\n<span class=\"n\">lean_mark_persistent</span><span class=\"p\">(</span><span class=\"n\">l_myString</span><span class=\"p\">);</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#ifdef __cplusplus</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#endif</span>\n</code></pre></div>\n</div></div>\n<p>You can see that it is trying to initialize <code>myString</code> with</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">l_myString</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_init_l_myString</span><span class=\"p\">();</span>\n<span class=\"n\">lean_mark_persistent</span><span class=\"p\">(</span><span class=\"n\">l_myString</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>When you write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"my_string\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">myString</span> <span class=\"o\">:</span> <span class=\"n\">BaseIO</span> <span class=\"n\">String</span>\n</code></pre></div>\n<p>Then for the compiler the function is effectively <code>Unit → String×Unit</code> and it won't try to initialize it as a constant.</p>\n<p>I would consider this as a bug. A solution to it would be to define your function as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"my_string_thunk\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">myStringThunk</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myString</span> <span class=\"o\">:=</span> <span class=\"n\">myStringThunk</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>and on C side </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">my_string_thunk</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">){</span>\n  <span class=\"n\">return</span> <span class=\"n\">lean_mk_string</span><span class=\"o\">(</span><span class=\"s2\">\"hello\"</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>(I didn't test this fully so there might be a detail I missed)</p>",
        "id": 424545584,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709502024
    },
    {
        "content": "<p>I'm not sure if this should go in a new thread, but I'm trying to use the C FFI to callout to <code>libcurl</code>. <code>pkg-config</code> is showing the library in scope:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">➜</span> <span class=\"n\">pkg</span><span class=\"bp\">-</span><span class=\"n\">config</span> <span class=\"c1\">--list-all | grep libcurl</span>\n<span class=\"n\">libcurl</span>         <span class=\"n\">libcurl</span> <span class=\"bp\">-</span> <span class=\"n\">Library</span> <span class=\"n\">to</span> <span class=\"n\">transfer</span> <span class=\"n\">files</span> <span class=\"k\">with</span> <span class=\"n\">ftp</span><span class=\"o\">,</span> <span class=\"n\">http</span><span class=\"o\">,</span> <span class=\"n\">etc.</span>\n</code></pre></div>\n<p>But its not getting picked up by Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">error</span> <span class=\"n\">loading</span> <span class=\"n\">library</span><span class=\"o\">,</span> <span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">curl_global_cleanup</span>\n</code></pre></div>\n<p>Any help would be appreciated.</p>\n<p>EDIT:</p>\n<p>Looks like I just needed to add <code>moreLinkArgs := #[\"-lcurl\"]</code> to my package declaration.</p>",
        "id": 424579359,
        "sender_full_name": "Solomon",
        "timestamp": 1709529194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"694514\">@Solomon</span> , please look at my Lean bindings package to libcurl <a href=\"https://github.com/bergmannjg/leanCurl\">https://github.com/bergmannjg/leanCurl</a></p>",
        "id": 424623443,
        "sender_full_name": "Jürgen Bergmann",
        "timestamp": 1709548598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"363199\">Jürgen Bergmann</span> <a href=\"#narrow/stream/113488-general/topic/FFI/near/424623443\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"694514\">Solomon</span> , please look at my Lean bindings package to libcurl <a href=\"https://github.com/bergmannjg/leanCurl\">https://github.com/bergmannjg/leanCurl</a></p>\n</blockquote>\n<p>Oh this looks great. Why don't you have it listed on <a href=\"https://reservoir.lean-lang.org/\">https://reservoir.lean-lang.org/</a> ?</p>",
        "id": 424680274,
        "sender_full_name": "Solomon",
        "timestamp": 1709565759
    },
    {
        "content": "<p>There is lower bound on starts to be listed on reservoir. Two stars might not be enough and there might be other necessary metric.</p>",
        "id": 424698990,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709570470
    },
    {
        "content": "<p>The metric is a root lakefile.lean, 2 stars and a OSI approved licence <a href=\"https://www.youtube.com/watch?v=RJbUtyevtKk\">How Reservoir boosts your Lean packages</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"RJbUtyevtKk\" href=\"https://www.youtube.com/watch?v=RJbUtyevtKk\"><img src=\"https://uploads.zulipusercontent.net/86df49ed0046fbe41c230cc4ab5da913b838f5c6/68747470733a2f2f692e7974696d672e636f6d2f76692f524a625574796576744b6b2f64656661756c742e6a7067\"></a></div>",
        "id": 424702393,
        "sender_full_name": "Jürgen Bergmann",
        "timestamp": 1709571435
    }
]