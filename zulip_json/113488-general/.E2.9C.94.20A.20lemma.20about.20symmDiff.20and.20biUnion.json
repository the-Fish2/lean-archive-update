[
    {
        "content": "<p>Hello,<br>\nI proved the following lemma for a project:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">biUnion_symmDiff_biUnion_subset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∆</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∆</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>But I have many questions. First where should it be put in mathlib? I can't find any lemmas about symmDiff and iUnion.</p>\n<p>Second I only need this version with biUnion but it is also true with iUnion, should I add both?</p>\n<p>And third, my proof goes like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">biUnion_symmDiff_biUnion_subset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∆</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∆</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_symmDiff</span><span class=\"o\">,</span> <span class=\"n\">mem_iUnion</span><span class=\"o\">,</span> <span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">not_and</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hi'</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hi'</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">hi'</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">Or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">hi'</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p>So I do it element by element, and I do not know if it is ok to do it that way or if it makes the proof too long.</p>",
        "id": 434611267,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1713725925
    },
    {
        "content": "<p>Can you prove it when <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.iUnion#doc\">docs#Set.iUnion</a> is replaced with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=iSup#doc\">docs#iSup</a> ?</p>",
        "id": 434611317,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713725998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Do you know the right TC assumptions?</p>",
        "id": 434611368,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713726021
    },
    {
        "content": "<p>I suspect <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CompleteBooleanAlgebra#doc\">docs#CompleteBooleanAlgebra</a> is enough, but I'm not yet sure</p>",
        "id": 434611407,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713726057
    },
    {
        "content": "<p><code>(⨆ i, f i) ∆ (⨆ i, g i) ≤ ⨆ i, f i ∆ g i</code><br>\niff<br>\n<code>(⨆ i, f i) \\ (⨆ i, g i) ≤ ⨆ i, f i ∆ g i</code> and <code>(⨆ i, g i) \\ (⨆ i, f i) ≤ ⨆ i, f i ∆ g i</code><br>\niff<br>\n<code>⨆ i, f i ≤ (⨆ i, f i ∆ g i) ⊔ (⨆ i, g i)</code> and ...<br>\niff<br>\n<code>⨆ i, f i ≤ ⨆ i, f i ∆ g i ⊔ g i</code> and ...<br>\nwhich is true</p>",
        "id": 434611633,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713726253
    },
    {
        "content": "<p>So <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Order.Coframe#doc\">docs#Order.Coframe</a> is enough, but you can't actually state it in that generality until <a href=\"https://github.com/leanprover-community/mathlib4/pull/10560\">#10560</a> goes through. You can state it for <code>CompleteBooleanAlgebra</code> in the meantime.</p>",
        "id": 434611717,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713726337
    },
    {
        "content": "<p>The first two steps can be done by a single lemma: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=symmDiff_le_iff#doc\">docs#symmDiff_le_iff</a></p>",
        "id": 434611820,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713726397
    },
    {
        "content": "<p>All right thank you!</p>",
        "id": 434611876,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1713726464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"703970\">Etienne Marion</span> has marked this topic as resolved.</p>",
        "id": 435636749,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714155174
    }
]