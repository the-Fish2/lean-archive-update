[
    {
        "content": "<p>The following code is proposed in <a href=\"https://lecopivo.github.io/scientific-computing-lean/working-with-arrays.html\">https://lecopivo.github.io/scientific-computing-lean/working-with-arrays.html</a> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">n</span>\n    <span class=\"n\">fib</span> <span class=\"o\">:=</span> <span class=\"n\">fib.push</span> <span class=\"mi\">0</span>\n    <span class=\"n\">fib</span> <span class=\"o\">:=</span> <span class=\"n\">fib.push</span> <span class=\"mi\">1</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"n\">fib</span> <span class=\"o\">:=</span> <span class=\"n\">fib.push</span> <span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"n\">fib</span>\n</code></pre></div>\n<p>The text says that <code>fib.push</code> actually mutates the array:</p>\n<blockquote>\n<p>The great thing about Lean is that the above code actually mutates the array fib. Each call of fib.push in the Fibonacci function modifies the array directly.</p>\n</blockquote>\n<p>I wanted to make sure that the array was actually being changed in a destructive way. So I wrote the following code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">n</span>\n    <span class=\"n\">fib</span> <span class=\"o\">:=</span> <span class=\"n\">fib.push</span> <span class=\"mi\">0</span>\n    <span class=\"n\">fib</span> <span class=\"o\">:=</span> <span class=\"n\">fib.push</span> <span class=\"mi\">1</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"n\">fib</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"share\"</span> <span class=\"n\">fib</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"n\">fib</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fibonacci</span> <span class=\"mi\">32</span>\n</code></pre></div>\n<p>My guess is that the share message should only be displayed once．In actuality, however, as many share messages as there are for statements are displayed. <br>\nWhat is wrong with my testing method?</p>",
        "id": 439325362,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1716007882
    },
    {
        "content": "<p>Haha I never tested if the claim is actually true :) </p>\n<p>The usual issue with testing this is that you hit compiler optimization which decides to turn something into a global variable. Not sure if this is happening here though but definitely have a look at previous Zulip questions getting confused by <code>dbgTraceIfShared</code> not working as naively expected.</p>",
        "id": 439327410,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1716010039
    },
    {
        "content": "<p>It is possible that the presence of the trace blocked the optimizations of <em>Functional but in place</em> and so the Array was not mutated. Maybe a good check is the generated C code.</p>",
        "id": 439330268,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1716013050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/113488-general/topic/fibonacci.20function.20in.20scientific-computing-lean/near/439327410\">said</a>:</p>\n<blockquote>\n<p>Haha I never tested if the claim is actually true :) </p>\n<p>The usual issue with testing this is that you hit compiler optimization which decides to turn something into a global variable. Not sure if this is happening here though but definitely have a look at previous Zulip questions getting confused by <code>dbgTraceIfShared</code> not working as naively expected.</p>\n</blockquote>\n<p>Global variables wouldn't need to be copied every iteration.</p>\n<p>Some evidence that the presence of <code>dbgTraceIfShared</code> is probably messing things up and that the code is at least morally linear (though compiler optimizations may still get in the way in the original code):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">noinline</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">checkedPush</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"share\"</span> <span class=\"n\">fib</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">n</span>\n    <span class=\"n\">fib</span> <span class=\"o\">:=</span> <span class=\"n\">fib.push</span> <span class=\"mi\">0</span>\n    <span class=\"n\">fib</span> <span class=\"o\">:=</span> <span class=\"n\">fib.push</span> <span class=\"mi\">1</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"n\">fib</span> <span class=\"o\">:=</span> <span class=\"n\">checkedPush</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"n\">fib</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fibonacci</span> <span class=\"mi\">32</span> <span class=\"c1\">-- no \"share\"</span>\n</code></pre></div>",
        "id": 439338299,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1716021168
    },
    {
        "content": "<p>The IR shows that it's indeed <code>dbgTraceIfShared</code> messing things up. The <code>dbgTraceIfShared</code> call is executed first and only then it executes <code>fib[i-1]!</code> and <code>fib[i-2]!</code>. So it becomes shared with the <code>dbgTraceIfShared</code> call and then again referentially unique just before the <code>push</code>. This is why it's typically a good idea to put <code>dbgTraceIfShared</code> calls on their own line, though the compiler may still decide to re-order things and break linearity (see <a href=\"#narrow/stream/270676-lean4/topic/Efficient.20hashmap.20counter.20from.20list/near/420899625\">this post</a> for an example).</p>\n<p>This works as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fibonacci</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">n</span>\n    <span class=\"n\">fib</span> <span class=\"o\">:=</span> <span class=\"n\">fib.push</span> <span class=\"mi\">0</span>\n    <span class=\"n\">fib</span> <span class=\"o\">:=</span> <span class=\"n\">fib.push</span> <span class=\"mi\">1</span>\n    <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"n\">fib</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"share\"</span> <span class=\"n\">fib</span>\n        <span class=\"n\">fib</span> <span class=\"o\">:=</span> <span class=\"n\">fib.push</span> <span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"n\">fib</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fibonacci</span> <span class=\"mi\">32</span>\n</code></pre></div>",
        "id": 439339652,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1716022603
    },
    {
        "content": "<p>Thank you all!!</p>",
        "id": 439348845,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1716032297
    },
    {
        "content": "<p>By the way, is it not possible to check which memory address the value of a variable is stored at in Lean?</p>",
        "id": 439349878,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1716033388
    },
    {
        "content": "<p>It is possible, with one of two methods:</p>\n<ul>\n<li><code>ptrAddrUnsafe (a : α) : USize</code>. This directly returns the address of a lean object. This is <code>unsafe</code> because it violates referenital transparency - the same (up to equality) object can result in different outputs depending on where it was allocated and how many other versions of the object exist in memory</li>\n<li><code>withPtrAddr (a : α) (k : USize → β) (h : ∀ u₁ u₂, k u₁ = k u₂) : β</code>: this is a safe function which gives access to the pointer value. The catch is that you can't actually use the value you get in any way which changes the final result - this is needed to avoid the possibility of defining non-functional functions caused by the raw getter above. This can still be used if you use the equality only for caching purposes and only the time taken to calculate the result changes depending on what address you get.</li>\n</ul>",
        "id": 439350217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716033718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> </p>\n<blockquote>\n<p>Haha I never tested if the claim is actually true :)</p>\n</blockquote>\n<p>That's actually true!!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- calculate fibonacci sequence  -/</span>\n<span class=\"n\">unsafe</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Id.run</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Array.mkEmpty</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib.push</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib.push</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"c1\">-- display memory address of `fib`</span>\n<span class=\"w\">    </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"n\">ptrAddrUnsafe</span><span class=\"w\"> </span><span class=\"n\">fib</span>\n<span class=\"w\">    </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fib.push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">fib</span>\n\n<span class=\"c1\">-- same address!</span>\n<span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"w\"> </span><span class=\"mi\">15</span>\n</code></pre></div>",
        "id": 441248885,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1716991734
    }
]