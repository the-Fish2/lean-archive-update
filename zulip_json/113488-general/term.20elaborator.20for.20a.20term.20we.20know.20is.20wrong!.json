[
    {
        "content": "<p>For the purpose of writing tutorials/documentation, it seems like it might be nice to have something like <code>expectFailure% t</code>, which checks that <code>t</code> <em>can not</em> be elaborated with the expected type, and then converts the type mismatch error into a warning.</p>\n<p>Or, to <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, how do people write \"iterative\" tutorials, where you show a few intermediate steps of constructing the desired term, without your file actually having errors?</p>",
        "id": 440067053,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716375843
    },
    {
        "content": "<p>Is one answer to use Verso's message-capturing support?</p>",
        "id": 440068668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716376512
    },
    {
        "content": "<p>Hmm... it is a good point that I need to learn Verso asap. However for now I really prefer \"hackable\" tutorials, i.e. plain Lean files you can give to the consumers.</p>",
        "id": 440068893,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716376614
    },
    {
        "content": "<p>I also needed something similar before, I wanted to demonstrate a weird parse issue that Lean will report \"<code>unexpected token '&lt;-'; expected ':=' or '‚Üê'</code>\", but I guess your <code>expectFailure% t</code> won't cover this?</p>\n<p>P.S. Is there a way to find all things (don't know what they are called either) that ends with <code>%</code>, I only see them on Zulip but haven't read about them anywhere else.</p>",
        "id": 440072728,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716378162
    },
    {
        "content": "<p>I found a list <a href=\"#narrow/stream/287929-mathlib4/topic/Useful.20term.20elaborators/near/434822026\">here</a>, and <code>type_of%</code> or <code>ensure_type_of%</code> might be able to be modified to suit your need?</p>",
        "id": 440073884,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716378586
    },
    {
        "content": "<p>Verso supports code blocks with configuration option <code>error:=true</code> that display error messages in the rendered text without breaking the entire source file.</p>",
        "id": 440112163,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1716389664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/term.20elaborator.20for.20a.20term.20we.20know.20is.20wrong!/near/440072728\">said</a>:</p>\n<blockquote>\n<p>P.S. Is there a way to find all things (don't know what they are called either) that ends with <code>%</code>, I only see them on Zulip but haven't read about them anywhere else.</p>\n</blockquote>\n<p>As I understand it, postfix <code>%</code> is supposed to mean \"implementation detail macro\", although I have seen people use it for general purpose macros as well</p>",
        "id": 440197757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716417918
    },
    {
        "content": "<p>I prefer the <code>my_mac(e)</code> syntax for general purpose macros</p>",
        "id": 440197899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716417974
    },
    {
        "content": "<p>In mathlib we've been using <code>%</code> for term elaborators in general, not just things that are meant to be implementation details. In core the <code>%</code> was originally meant to indicate implementation details. Using <code>%</code> is partly a way to avoid reserving identifiers as keywords, and it's partly a way to say \"this term is not just a normal application\".</p>",
        "id": 440344945,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716477284
    },
    {
        "content": "<p>Where have you seen <code>my_mac(e)</code> syntax? The only cases I know of are syntax/qq/congr quotations. If you want, you can include <code>syntax</code> command items.</p>",
        "id": 440345085,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716477331
    }
]