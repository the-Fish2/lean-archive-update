[
    {
        "content": "<p>I'm having a lot of trouble searching for this.  Lets say I have a project (maybe just with Mathlib) and I want to run <code>lean myfile.lean</code> from the command line (say I'm trying to benchmark a new tactic).  I know I can sort of do this with <code>lake build myfile.lean</code>, but is there a way (or any reason to) do it with <code>lean</code> instead?  Naively <code>lean myfile.lean</code> won't work since it can't recognize imports like <code>import Mathlib</code>.</p>",
        "id": 440381439,
        "sender_full_name": "Jason Rute",
        "timestamp": 1716490976
    },
    {
        "content": "<p>I guess while I'm asking, I can also ask about the <code>lean --server</code>.  How can that be run from within a project?</p>",
        "id": 440381610,
        "sender_full_name": "Jason Rute",
        "timestamp": 1716491044
    },
    {
        "content": "<p>Does <code>lake env lean foobar.lean</code> work?</p>",
        "id": 440381655,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1716491073
    },
    {
        "content": "<p>Lake is exactly the tool to handle lean with imports. What's the goal in avoiding it?</p>",
        "id": 440381682,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716491091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  I don't need to build a file, just check it.  (But maybe that isn't a big difference in execution time and doesn't matter.)</p>",
        "id": 440381919,
        "sender_full_name": "Jason Rute",
        "timestamp": 1716491179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Yes, that is it!  (I was mistakenly trying <code>exe</code> instead of <code>env</code>.)  I assume this also works for <code>lake env lean --server</code>.</p>",
        "id": 440382250,
        "sender_full_name": "Jason Rute",
        "timestamp": 1716491346
    },
    {
        "content": "<p>it should yes</p>",
        "id": 440382276,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1716491362
    },
    {
        "content": "<p>but there may be another way to run the server with lake? I'm not sure</p>",
        "id": 440382287,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1716491371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> To be clear, I was avoiding <code>lake build</code> not <code>lake</code> entirely.  Another thing for example is that <code>lake env lean</code> gives more computer-readable error messages than <code>lake build</code>.</p>",
        "id": 440382444,
        "sender_full_name": "Jason Rute",
        "timestamp": 1716491438
    },
    {
        "content": "<p><code>laker serve</code> is the Lake replacement for <code>lean --server</code>.</p>",
        "id": 440431441,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716520662
    },
    {
        "content": "<p>You can also use <code>lake lean myfile.lean</code> to have Lake build the imports of the file (if necessary) before run it via <code>lean</code>.</p>",
        "id": 440431501,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716520688
    },
    {
        "content": "<p><a href=\"https://github.com/utensil/lean4_jupyter\">lean4_jupyter</a> uses <code>lake env repl</code> to ensure it works well with projects.</p>\n<p>In general one would want to use <code>lake</code> to take care of things, or one will be writing code that duplicates lake, but subject to the risks of random Lean internal changes.</p>\n<p>If  <code>lake build</code> is not run beforehand, <code>lake env lean</code> might still suffer at lease slow startup, which might affect your benchmark, unless you intend to also benchmark deps handling time and the build time of the target file. <code>lake exe something</code> will also handle deps and build.</p>",
        "id": 440434575,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716523259
    },
    {
        "content": "<p>I was also surprised by the fact that <code>lake clean</code> will download all deps again, if I run <code>rm -rf .lake</code> first.</p>",
        "id": 440435167,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716523631
    },
    {
        "content": "<p>And that lake is silent during the process, until it finishes fetching all git repos. An impatient user will thought that it's trying to clean up a huge amount of files which might be dangerous, and abort the process, until trying it again in a container then is rest assured by that it's just fetching deps.</p>",
        "id": 440436363,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716524520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/113488-general/topic/Run.20lean.20from.20command.20line.20inside.20project/near/440431501\">said</a>:</p>\n<blockquote>\n<p>You can also use <code>lake lean myfile.lean</code> to have Lake build the imports of the file (if necessary) before run it via <code>lean</code>.</p>\n</blockquote>\n<p>Just noticed this in the change log, this is really nice!</p>\n<p><a href=\"/user_uploads/3121/RuIsutS9BKmwf6UB9VYesU7h/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RuIsutS9BKmwf6UB9VYesU7h/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/RuIsutS9BKmwf6UB9VYesU7h/image.png\"></a></div>",
        "id": 440440013,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716527503
    }
]