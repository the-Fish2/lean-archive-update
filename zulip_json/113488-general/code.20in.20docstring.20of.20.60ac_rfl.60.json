[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">syntax \"ac_rfl\"... [Lean.Parser.Tactic.acRfl]</span>\n<span class=\"cm\">  `ac_rfl` proves equalities up to application of an associative and commutative operator.</span>\n<span class=\"cm\">  ```</span>\n<span class=\"cm\">  instance : Associative (α := Nat) (.+.) := ⟨Nat.add_assoc⟩</span>\n<span class=\"cm\">  instance : Commutative (α := Nat) (.+.) := ⟨Nat.add_comm⟩</span>\n\n<span class=\"cm\">  example (a b c d : Nat) : a + b + c + d = d + (b + c) + a := by ac_rfl</span>\n<span class=\"cm\">  ```</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#help</span> <span class=\"n\">tactic</span> <span class=\"n\">ac_rfl</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">invalid constructor ⟨...⟩, expected type must be an inductive type</span>\n<span class=\"cm\">  ∀ (a b c : ℕ),</span>\n<span class=\"cm\">    (fun x x_1 =&gt; x + x_1) ((fun x x_1 =&gt; x + x_1) a b) c = (fun x x_1 =&gt; x + x_1) a ((fun x x_1 =&gt; x + x_1) b c)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Associative</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.+.</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Commutative</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.+.</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ac_rfl</span>\n</code></pre></div>",
        "id": 435379246,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714048517
    },
    {
        "content": "<p>The code doesn't work, even though it is written exactly as described in the ac_rfl docstring.</p>",
        "id": 435380306,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714048866
    },
    {
        "content": "<p>The docstring should say <code>Std.Associative</code> and <code>Std.Commutative</code>. The two instances are in mathlib anyway (and they will be in the next version of core Lean), so you can just remove them in your code and the last line will work. I will update the docstring.</p>",
        "id": 435380693,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1714049011
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 435384364,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714050172
    }
]