[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Int.modulo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"n\">a</span> <span class=\"s2\">\" ≃ \"</span> <span class=\"n\">b</span> <span class=\"s2\">\" mod \"</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.modulo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">≃</span> <span class=\"mi\">13</span> <span class=\"n\">mod</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">modulo</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span>\n\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  @[gcongr] attribute only applies to lemmas proving x₁ ~₁ x₁' → ... xₙ ~ₙ xₙ' → f x₁ ... xₙ ∼ f x₁' ... xₙ', got ∀</span>\n<span class=\"cm\">    {a b c k : ℤ}, (a ≃ b mod k) → a + c ≃ b + c mod k</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"kd\">@[</span><span class=\"n\">gcongr</span><span class=\"kd\">]</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">Int.add_right_modulo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≃</span> <span class=\"n\">b</span> <span class=\"n\">mod</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≃</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"n\">mod</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">modulo</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"n\">l</span>\n\n  <span class=\"kd\">@[</span><span class=\"n\">gcongr</span><span class=\"kd\">]</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">Int.mul_right_modulo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">use</span> <span class=\"n\">l</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span>\n    <span class=\"n\">ring</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">modulo</span>\n</code></pre></div>",
        "id": 431745063,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712478941
    },
    {
        "content": "<p>I thought <code>gcongr</code> was the appropriate attribute to attach to propositions like <code>Int.add_right_modulo</code> above.</p>",
        "id": 431745168,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712479038
    },
    {
        "content": "<p>But for some reason <code>Int.modulo</code> does not seem to be recognised as a relation that gcongr can handle.</p>",
        "id": 431745237,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712479105
    },
    {
        "content": "<ol>\n<li>why <code>gcongr</code> cannot handle <code>Int.modulo</code></li>\n<li>do you think it is a good idea to extend <code>gcongr</code> so that it can handle propositions like <code>Int.modulo</code></li>\n</ol>\n<p>I would be glad to hear your opinions on these questions.</p>",
        "id": 431745290,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712479193
    },
    {
        "content": "<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.ModEq#doc\">docs#Int.ModEq</a> ?</p>",
        "id": 431747268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712480975
    },
    {
        "content": "<p>No, I didn't know. Thank you! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p><del>But that's not the point of this question.</del></p>",
        "id": 431747330,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712481022
    },
    {
        "content": "<p>oh, why this does not cause an error...?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">gcongr</span><span class=\"kd\">]</span> <span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">add_right</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.add</span> <span class=\"n\">ModEq.rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">int.modeq.add_right</span> <span class=\"n\">Int.ModEq.add_right</span>\n</code></pre></div>\n<p>at <a href=\"https://github.com/leanprover-community/mathlib4/blob/7c41b87402b0684e4e87c1beee7a73e24101603a/Mathlib/Data/Int/ModEq.lean#L151C1-L153C47\">https://github.com/leanprover-community/mathlib4/blob/7c41b87402b0684e4e87c1beee7a73e24101603a/Mathlib/Data/Int/ModEq.lean#L151C1-L153C47</a></p>",
        "id": 431747875,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712481502
    },
    {
        "content": "<p>The relation is considered as being between the last two variables. So <code>(a b k : Int)</code> doesn't work but <code>(k a b : Int)</code> should.  (I think <code>calc</code> works the same way.)</p>",
        "id": 431748060,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1712481694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Thank you!!!</p>\n<p>I wish it would be mentioned in the gcongr error messages.</p>",
        "id": 431748218,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712481765
    },
    {
        "content": "<p>oh it still causes an error..</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Int.modulo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"n\">a</span> <span class=\"s2\">\" ≃ \"</span> <span class=\"n\">b</span> <span class=\"s2\">\" mod \"</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.modulo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">@[gcongr] attribute only applies to lemmas proving x₁ ~₁ x₁' → ... xₙ ~ₙ xₙ' → f x₁ ... xₙ ∼ f x₁' ... xₙ', got ∀</span>\n<span class=\"cm\">  {k a b : ℤ} (c : ℤ), (a ≃ b mod k) → a + c ≃ b + c mod k</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">gcongr</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Int.add_right_modulo</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≃</span> <span class=\"n\">b</span> <span class=\"n\">mod</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≃</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"n\">mod</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">modulo</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 431748511,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712482014
    },
    {
        "content": "<p>You need to change the order to <code>(k a b : Int)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Int.modulo</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"n\">a</span> <span class=\"s2\">\" ≃ \"</span> <span class=\"n\">b</span> <span class=\"s2\">\" mod \"</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.modulo</span> <span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 431748769,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1712482153
    },
    {
        "content": "<p>Thank you. I was so stupid! That's a simple mistake.</p>",
        "id": 431748957,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712482250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 431748990,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712482272
    }
]