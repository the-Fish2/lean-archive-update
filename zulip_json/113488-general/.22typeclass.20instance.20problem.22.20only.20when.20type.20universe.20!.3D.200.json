[
    {
        "content": "<p>Why does the following MWE run into typeclass resolution issues when <code>R : Type</code> is changed to <code>R : Type*</code>, <code>R : Type u</code>, or <code>R : Type [n]</code> where n &gt; 0?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Cardinal</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">#↑</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">ℵ₀</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">Set.range</span> <span class=\"n\">Nat.cast</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">mk_range_eq</span> <span class=\"n\">_</span> <span class=\"n\">Nat.cast_injective</span>\n</code></pre></div>",
        "id": 431623243,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712364171
    },
    {
        "content": "<p>I was mostly surprised that <code>Type*</code> and <code>Type u</code> don't work, since I figured that they provide flexibility and therefore things should be <em>more</em> likely to work, not less</p>",
        "id": 431623826,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712364693
    },
    {
        "content": "<p>To help debug, here's the <code>simpa</code> expanded out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">#</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">ℵ₀</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">Set.range</span> <span class=\"n\">Nat.cast</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">mk_range_eq</span> <span class=\"n\">_</span> <span class=\"n\">Nat.cast_injective</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mk_eq_aleph0</span>\n</code></pre></div>",
        "id": 431624470,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712365269
    },
    {
        "content": "<p>I think the issue is that <code>mk_range_eq</code> has the constraint that the universes for the types are equal, but <code>Nat.cast</code> is fixed to using <code>Nat</code> in <code>Type 0</code>.</p>",
        "id": 431624510,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712365309
    },
    {
        "content": "<p>ah, that makes sense</p>",
        "id": 431624604,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712365386
    },
    {
        "content": "<p>With some ULifting, you can get it to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">#</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">ℵ₀</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ULift</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.cast</span> <span class=\"n\">n.down</span><span class=\"o\">)</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">mk_range_eq</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.cast_injective.comp</span> <span class=\"n\">ULift.down_injective</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mk_eq_aleph0</span>\n</code></pre></div>",
        "id": 431624918,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712365682
    },
    {
        "content": "<p>I mean the issue is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Cardinal.mk_range_eq#doc\">docs#Cardinal.mk_range_eq</a> is not universe polymorphic?</p>",
        "id": 431650212,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712388870
    },
    {
        "content": "<p>Because it can't be polymorphic? The polymorphic version is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Cardinal.mk_range_eq_lift#doc\">docs#Cardinal.mk_range_eq_lift</a></p>",
        "id": 431653855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712391926
    }
]