[
    {
        "content": "<p>I get a cryptic error about metavriables and types in the example below, from MIL 4.2. Why does inverse_spec not work with <code>f x</code> but works with <code>y</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Delaborators</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Function</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">warningAsError</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">↦</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">Classical.choose</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inverse_spec</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">inverse</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inverse</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Classical.choose_spec</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">hx</span>\n<span class=\"k\">#check</span> <span class=\"n\">inverse_spec</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">hx</span> <span class=\"c1\">-- cryptic error</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">inverse_spec</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">hx</span> <span class=\"c1\">-- cryptic error</span>\n<span class=\"k\">#check</span> <span class=\"n\">inverse_spec</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 432048592,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1712603117
    },
    {
        "content": "<p>What's the error?</p>",
        "id": 432051167,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712604238
    },
    {
        "content": "<p>I edited the example so it actually runs. Errors are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">inverse_spec</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">hx</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">hx</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x_1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">m.3089</span> <span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">inverse_spec</span> <span class=\"n\">f</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.3242</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.3242</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 432051811,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1712604430
    },
    {
        "content": "<p>If you have a variable <code>x</code> then what do you expect <code>exists x, f x = f x</code> to mean? At the very least this is bad style and it might be the cause of your problems: you have both a free and a bound variable with the same name.</p>",
        "id": 432052111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712604513
    },
    {
        "content": "<p>Ah, that was it for the first error. Thank you!</p>",
        "id": 432052458,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1712604610
    },
    {
        "content": "<p>I was just looking at the error, where lean had helpfully changed one of them to x_1 but not the other one :-)</p>",
        "id": 432052587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712604659
    },
    {
        "content": "<p>I got stumped by <code>?m.3089</code> in place of <code>f</code>.</p>",
        "id": 432052814,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1712604726
    },
    {
        "content": "<p>For the other one (sorry I'm not at lean right now) do you understand what <code>@</code> does? <code>@inverse_spec f</code> won't typecheck.</p>",
        "id": 432052823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712604731
    },
    {
        "content": "<p>Because f will map X to Y and @ means \"you must give me X and Y before f\"</p>",
        "id": 432052938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712604768
    },
    {
        "content": "<p>It switches off implicit inputs</p>",
        "id": 432053036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712604807
    },
    {
        "content": "<p>Yes, this helps. The following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">inverse_spec</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">hx</span>\n</code></pre></div>\n<p>This time I got stumped by <code> Type ?u.3147 : Type (?u.3147 + 1)</code>. I am scared of these <code>?u.crazy_number</code> errors.</p>",
        "id": 432053322,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1712604933
    },
    {
        "content": "<p>Would you be less scared of it just said <code>u</code>? It's just a universe metavariable. Would you be less scared if it just set u to be 0 and the error said \"is expected to have type <code>Type : Type 1</code>? That's the sort of errors my students see because I encourage them, at the beginning, not to use universes at all.</p>",
        "id": 432053899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712605092
    },
    {
        "content": "<p>The error says \"you gave me a function, I was expecting a set\" (or a type, as lean calls them)</p>",
        "id": 432053975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712605116
    },
    {
        "content": "<p>I guess I would be less scared because it's fewer weird symbols on screen :). I will get used to it as some point, I'm sure</p>",
        "id": 432054178,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1712605188
    },
    {
        "content": "<p>Was there some recent change to lean which would enable people to switch off the numbers? Then you'd get \"expected to have type <code>Type ?u</code>\"</p>",
        "id": 432054412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712605301
    },
    {
        "content": "<p>That would be a nice QoL improvement.</p>",
        "id": 432135577,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1712643666
    },
    {
        "content": "<p>Maybe <code>set_option pp.mvars true</code>?</p>",
        "id": 432142718,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712645637
    }
]