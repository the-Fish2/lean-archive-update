[
    {
        "content": "<p>I have a (not clean) formalization of both cases of <a href=\"https://en.wikipedia.org/wiki/Buffon%27s_needle_problem\">Buffon's Needle</a>, in <a href=\"https://github.com/enricozb/buffon-lean/blob/main/Buffon/Rewrite.lean\">this file</a>. This is using a \"slightly\" older version of mathlib.</p>",
        "id": 419359856,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706833686
    },
    {
        "content": "<p>I chose to go the formalize the definition of the problem using random variables, just because I thought that definition was closer to the original statement of the problem. This is in contrast to the <a href=\"https://www.isa-afp.org/sessions/buffons_needle/#Buffons_Needle\">formalization done in Isabelle</a>, which defines a set and computes its measure.</p>",
        "id": 419360151,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706833831
    },
    {
        "content": "<p>If <a href=\"https://leanprover-community.github.io/100-missing.html\">the list</a> is up to date, I think this is the first lean formalization?</p>",
        "id": 419360269,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706833910
    },
    {
        "content": "<p>Also, my lean inexperience really shows in the length of this proof</p>",
        "id": 419360460,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706834001
    },
    {
        "content": "<p>Congratulations! I think this is indeed the first Lean formalization.</p>",
        "id": 419387580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706852294
    },
    {
        "content": "<p>Are you interested in contributing the more general lemmas in your file to mathlib? The rest of your formalization on Buffon's Needle would make a great contribution to the archive: <a href=\"https://github.com/leanprover-community/mathlib4/tree/master/Archive\">https://github.com/leanprover-community/mathlib4/tree/master/Archive</a></p>",
        "id": 419387792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706852460
    },
    {
        "content": "<p>Thanks! I'd definitely be interested in contributing any lemmas you feel are general enough to mathlib, and to the Archive. What's the process for this? Would I open some PRs first for the general lemmas and then modify the formalization so it imports the newly added lemmas?</p>",
        "id": 419442934,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706875131
    },
    {
        "content": "<p>Yes, this is the normal way to do. You can have a look <a href=\"https://leanprover-community.github.io/contribute/index.html\">here</a> for the PR process.</p>",
        "id": 419444238,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706875628
    },
    {
        "content": "<p>In general try to start with small PRs, you will get quicker reviews.</p>",
        "id": 419444346,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706875662
    },
    {
        "content": "<p>Who should be assigned to a PR like this?</p>",
        "id": 419564383,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706925024
    },
    {
        "content": "<p>The PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/10189\">#10189</a></p>",
        "id": 419568660,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706928807
    },
    {
        "content": "<p>If you add the <code>awaiting-review</code> label (I just did that for you -- usually that's up to an author, but it seemed like you're looking for review!), then if you see \"All checks have passed\", then it will appear in <a href=\"https://bit.ly/3cKk3ld\">#queue</a>, which is what reviewers tend to look at. There are also a number of <code>t-*</code> labels for different subjects.</p>",
        "id": 419571441,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706931419
    },
    {
        "content": "<p>Sweet, thanks a ton!</p>",
        "id": 419572081,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706931978
    },
    {
        "content": "<p>I looked for an 100 theorems label but I didn't see one, same with \"archive\", so I wasn't sure if there was another label I should use</p>",
        "id": 419572098,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706932003
    },
    {
        "content": "<p>Hello, just bumping this thread since the PR remains open. It's been about a month since the last review. Apologies if I should be the one driving this, I'm not super familiar with the customs / etiquette around a PR like this that doesn't really contribute to the stdlib</p>",
        "id": 427580596,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1710798485
    },
    {
        "content": "<p>I added a few minor comments, but it'd be nice if someone who knows more about probability also took a look</p>",
        "id": 427586077,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710800983
    },
    {
        "content": "<p>Thanks for the additional comments</p>",
        "id": 427781233,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1710870720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span>, pinging you here specifically since I see that you've recently touched a bunch of files under <code>Mathlib/Probability</code>, do you mind taking a look? Or pointing me towards someone else if not?</p>",
        "id": 427781458,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1710870790
    },
    {
        "content": "<p>Rémy is very busy right now. I might be able to review, but not right now. Feel free to ask for my review through the Github interface</p>",
        "id": 427781764,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710870912
    },
    {
        "content": "<p>Got it, thanks. I'll add you once I merge in master</p>",
        "id": 427785806,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1710872353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> thank you for your comments. One last thing about <code>100.yaml</code>, I added the lines as <code>decls</code> but there are some <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8362867760/job/22894523493?pr=10189\">build errors</a>. I don't think the imports in <code>Archive.lean</code> is visible when checking the declarations in <code>100.yaml</code>. Let me know if I'm missing something.</p>",
        "id": 427979096,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1710954975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, am I right to think that you were the one setting up the yaml file check? Can we make sure that the yaml files can refer access to archive declarations?</p>",
        "id": 428021888,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710971725
    },
    {
        "content": "<p>I don’t think I did that. I may have done the analogue check for the undergrad and overview files. But that would have been in 2020 so I wouldn’t really know more than you when looking at the code.</p>",
        "id": 428022431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710972005
    },
    {
        "content": "<p>I want to say \"Damn, you're old\" but actually I started using Lean in 2021 so I am old too <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 428022872,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710972245
    },
    {
        "content": "<p>Okay, I assume it's just a matter of adding some <code>Archive.lean</code> file and importing it in the right spot</p>",
        "id": 428022920,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710972280
    },
    {
        "content": "<p>Actually, thinking about it, this has to have been redone for Lean 4 and I’m more confident I wasn’t involved.</p>",
        "id": 428023160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710972412
    },
    {
        "content": "<p>I think all that needs to be done is in <code>checkYaml.lean</code>, we need to add a reference to <code>Archive</code> in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">CoreM.withImportModules</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Mathlib</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">Archive</span><span class=\"o\">]</span> <span class=\"c1\">-- added `Archive here</span>\n      <span class=\"o\">(</span><span class=\"n\">searchPath</span> <span class=\"o\">:=</span> <span class=\"n\">compile_time_search_path</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">1024</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kd\">constants</span>\n    <span class=\"k\">let</span> <span class=\"n\">results</span> <span class=\"bp\">←</span> <span class=\"n\">databases.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">processDb</span> <span class=\"n\">decls</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">results.any</span> <span class=\"n\">id</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.Process.exit</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 428064040,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1711002220
    },
    {
        "content": "<p>Testing this out in my branch now, I think it works as it passes the <code>100.yaml</code> build step</p>",
        "id": 428064992,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1711002939
    },
    {
        "content": "<p>Indeed, checks pass: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10189\">https://github.com/leanprover-community/mathlib4/pull/10189</a></p>",
        "id": 428080785,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1711011055
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/11562\">#11562</a> for the change to CI</p>",
        "id": 428081626,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711011419
    },
    {
        "content": "<p>I don't have merge permissions, but it looks like everything is ready to go?</p>",
        "id": 429544932,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1711421398
    },
    {
        "content": "<p>I've sent <a href=\"https://github.com/leanprover-community/mathlib4/pull/10189\">#10189</a> to bors (with delegation for some style nits); I can't comment on whether the approach is mathematically clean, but certainly the Lean code looks unusually structured</p>",
        "id": 434859967,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713825148
    },
    {
        "content": "<p>Any general comments on how to make the code more \"usually\" structured. Or any token examples of well-structured code that I can reference?</p>",
        "id": 434905040,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1713849667
    },
    {
        "content": "<p>I think Eric meant that your code is unusually <em>well</em>-structured, not that it is structured in an unusual manner <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 434906867,
        "sender_full_name": "David Loeffler",
        "timestamp": 1713851145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/113488-general/topic/Buffon's.20Needle/near/434906867\">said</a>:</p>\n<blockquote>\n<p>I think Eric meant that your code is unusually <em>well</em>-structured, not that it is structured in an unusual manner <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Hope so! :)</p>",
        "id": 434907762,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1713851785
    },
    {
        "content": "<p>Yeah, in an unusual manner [positive]</p>",
        "id": 434911469,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713853862
    },
    {
        "content": "<p>And thanks for your patience</p>",
        "id": 434911507,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713853888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113488-general/topic/Buffon's.20Needle/near/434911507\">said</a>:</p>\n<blockquote>\n<p>And thanks for your patience</p>\n</blockquote>\n<p>Likewise!</p>",
        "id": 434928551,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1713859993
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/100.html\">https://leanprover-community.github.io/100.html</a> update automatically? Or will it just be built whenever the next commit to the website happens?</p>",
        "id": 434929084,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1713860176
    },
    {
        "content": "<p>I think it's updated daily(?) with the documentation</p>",
        "id": 434929187,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713860221
    },
    {
        "content": "<p>Ah, that makes sense. I figured I was just being impatient :)</p>",
        "id": 434934600,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1713861950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256383\">Enrico Borba</span> <a href=\"#narrow/stream/113488-general/topic/Buffon's.20Needle/near/434907762\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/113488-general/topic/Buffon's.20Needle/near/434906867\">said</a>:</p>\n<blockquote>\n<p>I think Eric meant that your code is unusually <em>well</em>-structured, not that it is structured in an unusual manner <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Hope so! :)</p>\n</blockquote>\n<p>Sorry for the unclear wording, I meant this as praise not criticism!</p>",
        "id": 434957051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713869737
    }
]