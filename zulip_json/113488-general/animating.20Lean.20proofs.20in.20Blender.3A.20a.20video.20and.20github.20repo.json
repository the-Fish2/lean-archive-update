[
    {
        "content": "<p>I released a new video about automatically animating Lean proofs:<br>\n<a href=\"https://youtu.be/KuxFWwwlEtc\">https://youtu.be/KuxFWwwlEtc</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"KuxFWwwlEtc\" href=\"https://youtu.be/KuxFWwwlEtc\"><img src=\"https://uploads.zulipusercontent.net/1045fd5ac347d3573c4a77f827c07c35798132c3/68747470733a2f2f692e7974696d672e636f6d2f76692f4b7578465777776c4574632f64656661756c742e6a7067\"></a></div><p>You can try it yourself by downloading the code:<br>\n<a href=\"https://github.com/dwrensha/animate-lean-proofs\">https://github.com/dwrensha/animate-lean-proofs</a></p>",
        "id": 447306235,
        "sender_full_name": "David Renshaw",
        "timestamp": 1719428787
    },
    {
        "content": "<p>As part of this project, I implemented chess (well, most of the rules), including a syntax embedding so that you can do stuff like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">morphy_mates_in_two</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">ForcedWin</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">white</span>\n<span class=\"w\">      </span><span class=\"bp\">╔════════════════╗</span>\n<span class=\"w\">      </span><span class=\"bp\">║░░▓▓░░▓▓♚</span><span class=\"o\">]</span><span class=\"bp\">♝</span><span class=\"o\">]</span><span class=\"bp\">░░♜</span><span class=\"o\">]</span><span class=\"bp\">║</span>\n<span class=\"w\">      </span><span class=\"bp\">║♟</span><span class=\"o\">]</span><span class=\"bp\">░░▓▓♞</span><span class=\"o\">]</span><span class=\"bp\">▓▓♟</span><span class=\"o\">]</span><span class=\"bp\">♟</span><span class=\"o\">]</span><span class=\"bp\">♟</span><span class=\"o\">]</span><span class=\"bp\">║</span>\n<span class=\"w\">      </span><span class=\"bp\">║░░▓▓░░▓▓♛</span><span class=\"o\">]</span><span class=\"bp\">▓▓░░▓▓║</span>\n<span class=\"w\">      </span><span class=\"bp\">║▓▓░░▓▓░░♟</span><span class=\"o\">]</span><span class=\"bp\">░░♗</span><span class=\"o\">]</span><span class=\"bp\">░░║</span>\n<span class=\"w\">      </span><span class=\"bp\">║░░▓▓░░▓▓♙</span><span class=\"o\">]</span><span class=\"bp\">▓▓░░▓▓║</span>\n<span class=\"w\">      </span><span class=\"bp\">║▓▓♕</span><span class=\"o\">]</span><span class=\"bp\">▓▓░░▓▓░░▓▓░░║</span>\n<span class=\"w\">      </span><span class=\"bp\">║♙</span><span class=\"o\">]</span><span class=\"bp\">♙</span><span class=\"o\">]</span><span class=\"bp\">♙</span><span class=\"o\">]</span><span class=\"bp\">▓▓░░♙</span><span class=\"o\">]</span><span class=\"bp\">♙</span><span class=\"o\">]</span><span class=\"bp\">♙</span><span class=\"o\">]</span><span class=\"bp\">║</span>\n<span class=\"w\">      </span><span class=\"bp\">║▓▓░░♔</span><span class=\"o\">}</span><span class=\"bp\">♖</span><span class=\"o\">]</span><span class=\"bp\">▓▓░░▓▓░░║</span>\n<span class=\"w\">      </span><span class=\"bp\">╚════════════════╝</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">move</span><span class=\"w\"> </span><span class=\"s2\">\"Qb8\"</span>\n<span class=\"w\">  </span><span class=\"n\">opponent_move</span>\n<span class=\"w\">  </span><span class=\"n\">move</span><span class=\"w\"> </span><span class=\"s2\">\"Rd8\"</span>\n<span class=\"w\">  </span><span class=\"n\">checkmate</span>\n</code></pre></div>",
        "id": 447306696,
        "sender_full_name": "David Renshaw",
        "timestamp": 1719428888
    },
    {
        "content": "<p>check it out in Chess.lean in the above-linked repo</p>",
        "id": 447306731,
        "sender_full_name": "David Renshaw",
        "timestamp": 1719428895
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> )</p>",
        "id": 447307003,
        "sender_full_name": "David Renshaw",
        "timestamp": 1719428960
    },
    {
        "content": "<p>What is <code>opponent_move</code> doing?</p>",
        "id": 447368272,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719452053
    },
    {
        "content": "<p>It creates a new subgoal for each possible move.</p>",
        "id": 447368590,
        "sender_full_name": "David Renshaw",
        "timestamp": 1719452334
    },
    {
        "content": "<p>It could be rolled into the <code>move</code> tactic, but then the animation would show the two pieces moving at the same time.</p>",
        "id": 447373100,
        "sender_full_name": "David Renshaw",
        "timestamp": 1719455717
    },
    {
        "content": "<p>If <code>pos1</code> is a position with white to move, then:</p>\n<ul>\n<li>\n<p>the way to prove <code>ForcedWin .white pos1</code> is by showing that there exists a move to a position <code>pos2</code> such that <code>ForcedWin .White pos2</code>.</p>\n</li>\n<li>\n<p>the way to prove <code>ForcedWin .black pos1</code> is by  showing that for all legal next positions <code>pos2</code>, we have <code>ForcedWin .black pos2</code>.</p>\n</li>\n</ul>",
        "id": 447373452,
        "sender_full_name": "David Renshaw",
        "timestamp": 1719455979
    }
]