[
    {
        "content": "<p>I'm trying to optimize the computation for large <code>Fin</code>. But <code>@[csimp]</code> doesn't seem to work here. I realized that I need to redefine instance. Is there any way to make <code>@[csimp]</code> work automatically for all functions (I know there may be a lot) that use <code>Fin.add</code>? Also this implementation is slower for small numbers, is this because if-then-else in lean is slower?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Fin.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Fin</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addImpl</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n    <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n      <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_lt_left_of_lt_add</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_lt.mp</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_lt_add</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">csimp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_eq_addImpl</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Fin.add</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">addImpl</span> <span class=\"o\">:=</span>\n  <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">addImpl</span><span class=\"o\">,</span> <span class=\"n\">Fin.add</span><span class=\"o\">]</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">rename_i</span> <span class=\"n\">hx</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">hx</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mod_eq</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_lt_left_of_lt_add</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_lt_add</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- instance (priority := default + 1) : Add (Fin n) where add := Fin.add</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n.lt_succ_self</span><span class=\"o\">⟩</span> <span class=\"bp\">+</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n.lt_succ_self</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runAdd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.add</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n.lt_succ_self</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n.lt_succ_self</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runImpl</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">addImpl</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n.lt_succ_self</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n.lt_succ_self</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">100000</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">100000</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"run\"</span> <span class=\"o\">(</span><span class=\"n\">run</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"runAdd\"</span> <span class=\"o\">(</span><span class=\"n\">runAdd</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"runImpl\"</span> <span class=\"o\">(</span><span class=\"n\">runImpl</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 409333990,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1703146288
    },
    {
        "content": "<p>I think the <code>csimp</code> needs to be defined before anything else uses the function</p>",
        "id": 409350261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703152044
    },
    {
        "content": "<p>Otherwise it's too late because <code>Fin.instAdd</code> has already been compiled, and future <code>csimp</code>s won't force it to be recompiled</p>",
        "id": 409350322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703152073
    }
]