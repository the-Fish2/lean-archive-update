[
    {
        "content": "<p>I have defined a notation </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">α</span> <span class=\"s2\">\" →[\"</span> <span class=\"n\">M</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\"] \"</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">EquivariantMap</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>which conflicts with the one for <code>MulActionHom</code>. Because of that ambiguity, Lean stops.<br>\nI tried to insert <code>(priority := 1000) </code>, without success…<br>\nHow can I make mine to be chosen automatically?</p>",
        "id": 386202637,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692522575
    },
    {
        "content": "<p>I think 1000 is the default priority so providing that won't do anything</p>",
        "id": 386202779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692522690
    },
    {
        "content": "<p>By without success, I meant that I got an error message.<br>\nWhere should I insert the <code>priority</code> attribute? I tried <code>notation (priority := 1000) :25…</code></p>",
        "id": 386203628,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692523384
    },
    {
        "content": "<p>Many examples are found by <a href=\"https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4%20notation%20priority&amp;type=code\">searching the repo</a>, for example <a href=\"https://github.com/leanprover-community/mathlib4/blob/a1bb5932254a591f05aba4f28cee2310bbebc9b0/Mathlib/Topology/ContinuousFunction/ZeroAtInfty.lean#L49\">this</a>. <del><code>M:25</code> <code>β:0</code> don't feel right to me ...</del> Oops it's used <a href=\"https://github.com/leanprover-community/mathlib4/blob/a1bb5932254a591f05aba4f28cee2310bbebc9b0/Mathlib/LinearAlgebra/TensorProduct.lean#L118\">here</a>.</p>",
        "id": 386252151,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1692559913
    },
    {
        "content": "<p><code>:25</code> is precedence not priority</p>",
        "id": 386252222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692559983
    },
    {
        "content": "<p>What does it mean to put a precedence on a variable?</p>",
        "id": 386252301,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1692560044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> I believe the priority goes after the <code>:25</code>.</p>",
        "id": 386290941,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692585631
    },
    {
        "content": "<p>Just to confirm, <a href=\"https://github.com/leanprover/lean4/blob/63d2bdd4908b4df7db381537af754a7319e334e4/src/Lean/Parser/Syntax.lean#L75\">here is the syntax definition for <code>notation</code></a>.</p>\n<p>Here's what that means using simplified <code>syntax</code>-like notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">docComment</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">attributes</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">attrKind</span>\n<span class=\"s2\">\"notation\"</span> <span class=\"o\">(</span><span class=\"kd\">precedence</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">namedName</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">namedPrio</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">notationItem</span><span class=\"bp\">*</span> <span class=\"s2\">\"=&gt;\"</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>The <code>attrKind</code> is <code>(\"scoped\" &lt;|&gt; \"local\")?</code>, the <code>namedName</code> is <code>\"(name :=\" ident \")\"</code>, and the <code>namedPrio</code> is <code>\"(priority :=\" priority \")\"</code>.</p>",
        "id": 386349037,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692611291
    },
    {
        "content": "<p>The <code>priority</code> parser <a href=\"https://github.com/leanprover/lean4/blob/63d2bdd4908b4df7db381537af754a7319e334e4/src/Init/Notation.lean#L130\">has a number of named priority levels</a> by the way. There's <code>default</code>, <code>low</code>, <code>mid</code>, and <code>high</code>, and you can write expressions involving <code>+</code>, <code>-</code>, and parentheses.</p>",
        "id": 386349208,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692611351
    },
    {
        "content": "<p>I was looking for previous threads on <code>notation</code> and <code>precedence</code> and ended up here but I have not been able to use the explanations given above to solve the following problem (of which I am not sure that it is due to a precedence issue).</p>\n<p>Here is an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AddElem</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">P</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">AddElem</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>  <span class=\"c1\">-- AddElem S 0 : Set ℚ</span>\n<span class=\"k\">#check</span> <span class=\"n\">AddElem</span> <span class=\"n\">S</span> <span class=\"mi\">0</span>  <span class=\"c1\">-- AddElem S 0 : Set ℚ</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">P</span><span class=\"s2\">\"[\"</span><span class=\"n\">a</span><span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AddElem</span> <span class=\"n\">P</span> <span class=\"n\">a</span>\n<span class=\"k\">#check</span> <span class=\"n\">S</span><span class=\"o\">[(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)]</span> <span class=\"c1\">-- S[0] : Set ℚ</span>\n<span class=\"k\">#check</span> <span class=\"n\">S</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>  <span class=\"c1\">-- ambiguous, possible interpretations ⏎ S[0] : Set ℚ ⏎ ⏎ S[0] : ?m.8100</span>\n</code></pre></div>\n<p>The issue is that <code>S[0]</code> is not recognized if I do not write <code>S[(0 : ℚ)]</code>, while <code>AddElem S 0</code> works just fine without specifying <code>(0 : ℚ)</code>. I'm stuck!</p>",
        "id": 416627665,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1705602742
    },
    {
        "content": "<p>If you hover over the error message, you can see the second one is <code>getElem</code> (aka list indexing notation)</p>",
        "id": 416628124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705602909
    },
    {
        "content": "<p>You could set the priority. I think it's <code>notation:max (priority := high) P\"[\"a\"]\" =&gt; AddElem P a</code></p>\n<p>You might need to stick <code>noWs</code> (capitalization might be wrong) between <code>P</code> and <code>\"[\"</code> to force no whitespace.</p>",
        "id": 416628498,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705603077
    },
    {
        "content": "<p>Thank you both! The following options work, so it seems that <code>[</code> is more difficult to handle than <code>(</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AddElem</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">P</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">AddElem</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>  <span class=\"c1\">-- AddElem S 0 : Set ℚ</span>\n<span class=\"k\">#check</span> <span class=\"n\">AddElem</span> <span class=\"n\">S</span> <span class=\"mi\">0</span>  <span class=\"c1\">-- AddElem S 0 : Set ℚ</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">P</span><span class=\"s2\">\"(\"</span><span class=\"n\">a</span><span class=\"s2\">\")\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AddElem</span> <span class=\"n\">P</span> <span class=\"n\">a</span>\n<span class=\"k\">#check</span> <span class=\"n\">S</span><span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span>  <span class=\"c1\">-- S(0) : Set ℚ</span>\n<span class=\"k\">#check</span> <span class=\"n\">S</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>  <span class=\"c1\">-- S(0) : Set ℚ</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">P</span><span class=\"s2\">\"[\"</span><span class=\"n\">a</span><span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AddElem</span> <span class=\"n\">P</span> <span class=\"n\">a</span>\n<span class=\"k\">#check</span> <span class=\"n\">S</span><span class=\"o\">[(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)]</span>  <span class=\"c1\">-- S[0] : Set ℚ</span>\n<span class=\"k\">#check</span> <span class=\"n\">S</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>  <span class=\"c1\">-- S[0] : Set ℚ</span>\n</code></pre></div>",
        "id": 416656041,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1705615004
    },
    {
        "content": "<p>I think we might want to set the priority like this in parts of mathlib -- <code>[</code> and <code>]</code> are used in probability theory for things like expectations, and that also runs into this issue.</p>\n<p>By the way, there are two other ways to disambiguate this. The first is to give an expected type, like <code>(S[0] : Set ℚ)</code>, since that causes the elaborator to disambiguate. The second is to write <code>S [0]</code> since the GetElem notation requires there to be no space.</p>",
        "id": 416657007,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705615422
    },
    {
        "content": "<p>Speaking of precedence and priorities, does anyone know how to put precedence so that <code>notation (priority := high) a \" ⇒ \" b =&gt; a → b</code> works as expected? I did not manage to find where the arrow notation is defined in core.</p>",
        "id": 416663536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705618598
    },
    {
        "content": "<p>Is <code>notation:25 (priority := high) a \" ⇒ \" b:0 =&gt; a → b</code> the correct incantation?</p>",
        "id": 416664120,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705618875
    },
    {
        "content": "<p>It works on my sample of one example that failed without precedence info and is lifted from our linear maps notation.</p>",
        "id": 416664189,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705618911
    },
    {
        "content": "<p>And for extra credit, I'm interested in having a delaborator that triggers only when it should. Using <code>notation3</code> does create a delaborator but it triggers to much and I see <code>ℕ ⇒ n ≥ N ⇒ |u n - l| ≤ ε / 2</code></p>",
        "id": 416664875,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705619230
    },
    {
        "content": "<p>The core Lean <code>Lean.PrettyPrinter.Delaborator.delabForall</code> is full of call to <code>private</code> function whose code doesn't work when copy pasted in a project <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 416673947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705623720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Priority.20of.20notation/near/416663536\">said</a>:</p>\n<blockquote>\n<p>Speaking of precedence and priorities, does anyone know how to put precedence so that <code>notation (priority := high) a \" ⇒ \" b =&gt; a → b</code> works as expected? I did not manage to find where the arrow notation is defined in core.</p>\n</blockquote>\n<p>I think it would be <code>notation:25 (priority := high) a:26 \" ⇒ \" b:25 =&gt; a → b</code></p>",
        "id": 416679352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705625634
    },
    {
        "content": "<p>This also works on my sample.</p>",
        "id": 416680270,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705625986
    },
    {
        "content": "<p>Any idea about how to delaborate it?</p>",
        "id": 416680366,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705626016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> What does \"when it should\" mean? If you use <code>notation3</code> instead it'll be used for arrow functions in general. Do you want it to work just for propositions?</p>",
        "id": 416688847,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705630322
    },
    {
        "content": "<p>Yes.</p>",
        "id": 416688908,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705630341
    },
    {
        "content": "<p>I simply want to use normal notations for teaching.</p>",
        "id": 416688916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705630349
    },
    {
        "content": "<p>So <code>⇒</code> means implies and nothing else, and nothing else means implies.</p>",
        "id": 416688954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705630376
    },
    {
        "content": "<p>I tested this with three whole examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"s2\">\" ⇒ \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">forallE</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabDoubleArrow</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">getExpr</span>\n  <span class=\"n\">unless</span> <span class=\"n\">e.isArrow</span> <span class=\"k\">do</span> <span class=\"n\">failure</span>\n  <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">Meta.isProp</span> <span class=\"n\">e.bindingDomain</span><span class=\"bp\">!</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span> <span class=\"n\">Meta.isProp</span> <span class=\"n\">e.bindingBody</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"k\">do</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">withBindingDomain</span> <span class=\"n\">delab</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"bp\">←</span> <span class=\"n\">withBindingBody</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"n\">delab</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 416690572,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705630790
    },
    {
        "content": "<p>This is very promising but breaks bounded quantifiers.</p>",
        "id": 416691139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705630904
    },
    {
        "content": "<p>I see <code>∀ (ε : ℝ), ε &gt; 0 ⇒ ∃ N, ∀ (n : ℕ), n ≥ N ⇒ |u n - l| &lt; ε</code></p>",
        "id": 416691245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705630937
    },
    {
        "content": "<p>It needs to collaborate with <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Util/Delaborators.lean#L48\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Util/Delaborators.lean#L48</a></p>",
        "id": 416691619,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705631010
    },
    {
        "content": "<p>I guess there's this then:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"s2\">\" ⇒ \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">delabDoubleArrow</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">getExpr</span>\n  <span class=\"n\">unless</span> <span class=\"n\">e.isArrow</span> <span class=\"k\">do</span> <span class=\"n\">failure</span>\n  <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">Meta.isProp</span> <span class=\"n\">e.bindingDomain</span><span class=\"bp\">!</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span> <span class=\"n\">Meta.isProp</span> <span class=\"n\">e.bindingBody</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"k\">do</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">withBindingDomain</span> <span class=\"n\">delab</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"bp\">←</span> <span class=\"n\">withBindingBody</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"n\">delab</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">forallE</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabPi</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"n\">whenPPOption</span> <span class=\"n\">Lean.getPPNotation</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">delabDoubleArrow</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">delabForall</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">$</span><span class=\"n\">z</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">$</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">z</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">≥</span> <span class=\"bp\">$</span><span class=\"n\">z</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">≥</span> <span class=\"bp\">$</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">z</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">∉</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">∉</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">⊆</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">⊆</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">⊂</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">⊂</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">⊇</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">⊇</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">⊃</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">⇒</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">⊃</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n</code></pre></div>",
        "id": 416692601,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705631235
    },
    {
        "content": "<p>It seems to work, thanks!</p>",
        "id": 416693691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705631486
    },
    {
        "content": "<p>It is almost frightening to see Lean code that looks so much like real math. I fear Lean will spend more and more time spying on my traditional math courses to see whether I'm cheating.</p>",
        "id": 416694184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705631579
    },
    {
        "content": "<p>I really don't understand how we can end up with notations such as <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Order/SymmDiff.lean#L70-L76\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Order/SymmDiff.lean#L70-L76</a> unscoped. There is even a comment saying this is a bad idea!</p>",
        "id": 416695969,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705632152
    },
    {
        "content": "<p>And I am also curious to know why <code>import Mathlib.Tactic</code> pulls in that cursed file.</p>",
        "id": 416696338,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705632373
    },
    {
        "content": "<p>OMG, it is imported by <code>Mathlib/Data/Set/Basic.lean</code>!</p>",
        "id": 416696413,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705632431
    },
    {
        "content": "<p>Sanity is hopefully restored in  <a href=\"https://github.com/leanprover-community/mathlib4/pull/9844\">#9844</a> but I didn't try to build locally since there 26 files all over mathlib that use those notations (in at most three declarations in almost every case...).</p>",
        "id": 416699693,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705634472
    },
    {
        "content": "<p>And it seems to build!</p>",
        "id": 416704051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705637408
    },
    {
        "content": "<p>Why do you it is that bad? You're not working on the Laplacian yet, are you?</p>",
        "id": 416728681,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705652412
    },
    {
        "content": "<p>Maybe this is the blocker! We'll need it for FLT!</p>",
        "id": 416729533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705652770
    },
    {
        "content": "<p>The one that was in my way was <code>infixl:100 \" ⇔ \" =&gt; bihimp</code>. But having a single letter notation in global scope is bad independently of any other use.</p>",
        "id": 416770184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705668267
    },
    {
        "content": "<p>Well, the symbols do mean the same thing! (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=bihimp_iff_iff#doc\">docs#bihimp_iff_iff</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⇔</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 416772300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705669095
    },
    {
        "content": "<p>(the same is true for <code>example (A B : Prop) : (A ⇨ B) = (A → B) := rfl</code>)</p>",
        "id": 416772416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705669140
    },
    {
        "content": "<p>I wonder if <code>bihimp</code> should be adjusted so that the first one is also true by <code>rfl</code></p>",
        "id": 416772597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705669201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Priority.20of.20notation/near/416770184\">said</a>:</p>\n<blockquote>\n<p>The one that was in my way was <code>infixl:100 \" ⇔ \" =&gt; bihimp</code>. But having a single letter notation in global scope is bad independently of any other use.</p>\n</blockquote>\n<p>That's not a letter! That's <code>\\inc</code>.</p>",
        "id": 416776032,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705670294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Priority.20of.20notation/near/416772597\">said</a>:</p>\n<blockquote>\n<p>I wonder if <code>bihimp</code> should be adjusted so that the first one is also true by <code>rfl</code></p>\n</blockquote>\n<p>This is not possible without adding it as a field to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HeytingAlgebra#doc\">docs#HeytingAlgebra</a> since <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Iff#doc\">docs#Iff</a> is a custom structure instead of being defined using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=And#doc\">docs#And</a></p>",
        "id": 416776214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705670368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Priority.20of.20notation/near/416776032\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Priority.20of.20notation/near/416770184\">said</a>:</p>\n<blockquote>\n<p>The one that was in my way was <code>infixl:100 \" ⇔ \" =&gt; bihimp</code>. But having a single letter notation in global scope is bad independently of any other use.</p>\n</blockquote>\n<p>That's not a letter! That's <code>\\inc</code>.</p>\n</blockquote>\n<p>I'm pretty sure he's talking about <code>∆</code> just above it</p>",
        "id": 416777321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705670703
    },
    {
        "content": "<p>Yes, and that's not <code>\\D</code>, that's <code>\\inc</code>.</p>",
        "id": 416782568,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705672502
    },
    {
        "content": "<p>It used to be <code>\\D</code>, which caused trouble in category theory files which used <code>\\D</code> to denote shapes (IIRC), so I changed it to <code>\\inc</code>.</p>",
        "id": 416782889,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705672577
    },
    {
        "content": "<p>(And that was justified because we had found some sources where it said that in unicode, ∆ is for symmetric differences, among some other things.)</p>",
        "id": 416787487,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705673987
    },
    {
        "content": "<p>I am sorry about all this confusion. Again, the thing that triggered a bug in my code yesterday is <code>infixl:100 \" ⇔ \" =&gt; bihimp</code>. When I tracked it down I saw that the neighboring definition was explicitly flagged as problematic so I scoped both. But I didn't realize the delta-looking letter was not a unicode delta.</p>",
        "id": 416853717,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705693053
    },
    {
        "content": "<p>Should <code>\\inc</code> be unscoped notation, then?</p>",
        "id": 416984474,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1705751111
    }
]