[
    {
        "content": "<p>I noticed that if I use the tactic <code>measurability</code> in the proof of some lemma when there is a kernel (<code>ProbabilityTheory.kernel</code>)  already defined as a variable in the environment, then this kernel becomes a required argument for the lemma, even if it is otherwise never mentioned in the statement or proof of the lemma. The problem seems to be specifically with kernels, since the same does not happen with, for example, measures.</p>\n<p>Here is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Kernel.Basic</span>\n\n<span class=\"kd\">variable</span>  <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">MeasureTheory.Measure</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ProbabilityTheory.kernel</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_lemma1</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">measurability</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">my_lemma1 {k : ↥(ProbabilityTheory.kernel ℝ ℝ)} : Measurable fun x =&gt; x</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"n\">my_lemma1</span>\n<span class=\"c1\">-- In this case k is required as an argument, even if it does not appear in the lemma at all</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_lemma2</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"o\">⦃</span><span class=\"n\">t</span><span class=\"o\">⦄</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">my_lemma2 : Measurable fun x =&gt; x</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"n\">my_lemma2</span>\n<span class=\"c\">/-</span><span class=\"cm\"> The problem does not appear if we avoid using the measurability tactic; it is likely caused by</span>\n<span class=\"cm\">the fact that measurability automatically gives a name to the kernel that we defined implicitely,</span>\n<span class=\"cm\">so, even if it is not used in the lemma, it becomes an argument. -/</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_lemma3</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ProbabilityTheory.kernel</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">measurability</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">my_lemma3 {k k : ↥(ProbabilityTheory.kernel ℝ ℝ)} : Measurable fun x =&gt; x</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"n\">my_lemma3</span>\n<span class=\"c\">/-</span><span class=\"cm\"> If we try to declare the kernel as an argument explicitly in the statement, we end up with a</span>\n<span class=\"cm\">lemma that requires both kernels (and they have the same name) -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Note that this does not happen with the measure μ, that is also defined as a variable, just like</span>\n<span class=\"cm\">k, so the problem has likely something to do with kernels in  particular. -/</span>\n</code></pre></div>",
        "id": 436687226,
        "sender_full_name": "Lorenzo Luccioli",
        "timestamp": 1714654605
    },
    {
        "content": "<p>The short answer is that <code>variable</code> is not yet working the way you expect it to work in Lean 4. You shouldn’t use it for things that don’t go in <em>every</em> declaration in scope. This is a well known regression compared to Lean 3 that will get fixed eventually.</p>",
        "id": 436688626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714654997
    },
    {
        "content": "<p>Workaround, even with variables in scope:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Kernel.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FunProp.Measurable</span>\n\n<span class=\"kd\">variable</span>  <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">MeasureTheory.Measure</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ProbabilityTheory.kernel</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_lemma1</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">fun_prop</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">my_lemma1</span> <span class=\"c1\">-- my_lemma1 : Measurable fun x =&gt; x</span>\n</code></pre></div>\n<p><code>fun_prop</code> is an improved <code>measurability</code> tactic that also works for other function properties (continuity, etc.). Likely <code>fun_prop</code> will replace <code>measurability</code> at some point.</p>",
        "id": 436730107,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714666625
    },
    {
        "content": "<p>Should we try to redefine measurability as fun prop and see what breaks?</p>",
        "id": 436792154,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714692507
    }
]