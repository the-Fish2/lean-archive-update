[
    {
        "content": "<p>I've come across a user mistake which corresponds to the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- error: invalid universe level, ?u.5 is not greater than 0</span>\n</code></pre></div>\n<p>Writing <code>1 :</code> here  is nonsense, but does somebody understand why the error messages says what it says? Why is it about universes?</p>",
        "id": 442790005,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1717594594
    },
    {
        "content": "<p>It says that the universe of your type is 0 I.e. you have a Prop.</p>",
        "id": 442790645,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717594718
    },
    {
        "content": "<p>Is it trying to apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.instOne#doc\">docs#Pi.instOne</a> and failing to unify <code>f : ι → Type v₁</code> with <code>fun _ : Nat ↦ True</code>?</p>",
        "id": 442790676,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717594723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/cryptic.20error/near/442790676\">said</a>:</p>\n<blockquote>\n<p>Is it trying to apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.instOne#doc\">docs#Pi.instOne</a> and failing to unify <code>f : ι → Type v₁</code> with <code>fun _ : Nat ↦ True</code>?</p>\n</blockquote>\n<p>Would that also cause the same error on  <code>#check (2 : ∀ (n : Nat), True) </code></p>",
        "id": 442792273,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717595058
    },
    {
        "content": "<p>I think basically it complains because you are giving it a value that is data, which is at least universe 1 or higher and the type is a Prop</p>",
        "id": 442792715,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717595153
    },
    {
        "content": "<p>I am guessing that the part of the typechecker that performs universe unification runs early into typechecking, but I could be wrong.</p>",
        "id": 442793079,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717595228
    },
    {
        "content": "<p>My guess is wrong. This produces a normal type error : </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s2\">\"some_string\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 442793884,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717595413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/cryptic.20error/near/442790676\">said</a>:</p>\n<blockquote>\n<p>Is it trying to apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.instOne#doc\">docs#Pi.instOne</a> and failing to unify <code>f : ι → Type v₁</code> with <code>fun _ : Nat ↦ True</code>?</p>\n</blockquote>\n<p>That's not quite it, because it's also triggered without <code>import Mathlib</code> the following snippet shows that the error message from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=One#doc\">docs#One</a> are a bit better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  One (ℕ → True)</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  ℕ → True</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Prop : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type ?u.1 : Type (?u.1 + 1)</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">One</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The error <code>invalid universe level, {u} is not greater than 0</code> comes apparently <a href=\"https://github.com/leanprover/lean4/blob/e33c32fb00e7b2a01c6a7f186c18a7c97f54a635/src/Lean/Meta/DecLevel.lean#L62-L65\">from docs#Lean.Meta.decLevel core</a></p>",
        "id": 442795197,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1717595724
    },
    {
        "content": "<p>A little more debugging later:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Qq</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Qq</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Meta</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- error: invalid universe level, ?u.5 is not greater than 0</span>\n\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- produces the message below</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Expr</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Expr</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Expr</span><span class=\"bp\">.</span><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"ss\">`sorryAx</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Expr</span><span class=\"bp\">.</span><span class=\"n\">forallE</span>\n<span class=\"w\">      </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Expr</span><span class=\"bp\">.</span><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"ss\">`Nat</span><span class=\"w\"> </span><span class=\"o\">[])</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Expr</span><span class=\"bp\">.</span><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"ss\">`True</span><span class=\"w\"> </span><span class=\"o\">[])</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">BinderInfo</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">)))</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Expr</span><span class=\"bp\">.</span><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"ss\">`Bool.true</span><span class=\"w\"> </span><span class=\"o\">[])</span>\n</code></pre></div>",
        "id": 442795238,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717595732
    },
    {
        "content": "<p>Thanks for the insight, both of you!</p>",
        "id": 442795277,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1717595739
    },
    {
        "content": "<p><del>Lean is interpreting the <code>1</code> as a level expression for some unknown reason.</del> EDIT: <br>\nMy mistake. I was looking at this (<code>(Lean.Expr.const sorryAx [Lean.Level.zero])</code>)</p>",
        "id": 442795482,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717595775
    },
    {
        "content": "<p>Ah I understand now:</p>\n<p>Writing <code>1</code> triggers <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.elabNumLit#doc\">docs#Lean.Elab.Term.elabNumLit</a> and <a href=\"https://github.com/leanprover/lean4/blob/e33c32fb00e7b2a01c6a7f186c18a7c97f54a635/src/Lean/Elab/BuiltinTerm.lean#L192-L193\">on this line in core</a> this calls <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.getDecLevel#doc\">docs#Lean.Meta.getDecLevel</a> with an expected type of level <code>0</code> thus it triggers <a href=\"https://github.com/leanprover/lean4/blob/e33c32fb00e7b2a01c6a7f186c18a7c97f54a635/src/Lean/Meta/DecLevel.lean#L62-L65\">the error</a>.</p>",
        "id": 442799857,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1717596766
    },
    {
        "content": "<p>And this doesn't happen with strings because <code>elabStrLit</code> directly calls <code>mkStrLit</code>?</p>",
        "id": 442804176,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717597826
    },
    {
        "content": "<p>What is passed to the <code>expectedType?</code> parameter of <code>elabNumLit</code> here?</p>",
        "id": 442806617,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717598484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/cryptic.20error/near/442804176\">said</a>:</p>\n<blockquote>\n<p>And this doesn't happen with strings because <code>elabStrLit</code> directly calls <code>mkStrLit</code>?<br>\nWhat is passed to the <code>expectedType?</code> parameter of <code>elabNumLit</code> here?</p>\n</blockquote>\n<p>Looks like it. I think <code>expectedType?</code> here is <code>some (Nat → True)</code>.</p>\n<p>FWIW I've create a PR <a href=\"https://github.com/leanprover/lean4/pull/4366\">lean4#4366</a> which adds a more verbose error message.</p>",
        "id": 442818772,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1717601355
    },
    {
        "content": "<p>Could the error message also show the expected type?</p>",
        "id": 442833927,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717604656
    },
    {
        "content": "<p><del>it could, I just didnt know how to do that without either an additional <code>match</code> statement or a superfluous <code>some</code> floating around.</del></p>\n<p><del>Do you have a suggestion for the ideal wording?</del> Kyle made a very good suggestion, as always :)</p>",
        "id": 442887406,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1717619742
    },
    {
        "content": "<p>Oh. I don't see Kyle's suggestion, but I do see that Leo added more fine grained error reporting</p>",
        "id": 443014729,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717666501
    },
    {
        "content": "<p>Indeed that was way fast of Leo <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 443016616,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1717667140
    }
]