[
    {
        "content": "<p>Can this theorem be proven?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">congrDep</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hT</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(we don't need <code>hT</code> actually, I just included it for brevity). The closest thing I could find in the stdlib was <code>congrFun</code>, but that seems to imply that we need definitional equality between <code>x</code> and <code>y</code>. At first glance the cast on the RHS seems to get in the way of proving anything here, as you can't apply the (non-dependent) <code>congr</code> theorem since the application functions have different types.</p>\n<p>If it's not possible to prove, would it be problematic (i.e. inconsistent) to add it as an axiom?</p>",
        "id": 431124111,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1712159338
    },
    {
        "content": "<p>apparently yes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Tactics</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">congrDep</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hT</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hxy</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hfg</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 431125546,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712159761
    },
    {
        "content": "<p>i.e. yes, it can be proven</p>",
        "id": 431125626,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712159778
    },
    {
        "content": "<p>it's a trick i learnt in the last few weeks... when you'd like to rewrite in not only the goal but also the type of the goal, the <code>subst</code> tactic is your friend</p>",
        "id": 431125826,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712159855
    },
    {
        "content": "<p>Oh sweet, thanks a lot! I admit I kind of assumed it wasn't provable since it was a simple generalization of <code>congr</code>and couldn't find it in the stdlib, but thank you for showing me otherwise. I guess it's probably just something that is not actually needed very often.</p>",
        "id": 431127124,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1712160195
    },
    {
        "content": "<p>actually, i think it might be the case that the goal is typically written different? maybe you meant something like <code>HEq (f x) (f y)</code>? because in that case i think there might be better api... i'm not very familiar with this corner of lean, however, so my suggestions might not be the most helpful</p>",
        "id": 431128486,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712160597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373814\">Rish Vaishnav</span> <a href=\"#narrow/stream/113488-general/topic/Dependent.20congruence.20theorem.3F/near/431124111\">said</a>:</p>\n<blockquote>\n<p>If it's not possible to prove, would it be problematic (i.e. inconsistent) to add it as an axiom?</p>\n</blockquote>\n<p>As a small generic advice, there is this little known axiom:</p>\n<p><code>axiom</code>: if you are not <em>completely certain</em> that adding an <code>axiom</code> is consistent, then adding the axiom will create inconsistencies.</p>",
        "id": 431137134,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712163401
    },
    {
        "content": "<p>I have another small related question, is it simple to prove this theorem, or do I need to use some injectivity principle?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hAUBV</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 431368266,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1712252033
    },
    {
        "content": "<p>Is this true if <code>U</code> is <code>List</code> and <code>V</code> is <code>Array</code>?</p>",
        "id": 431369401,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712252408
    },
    {
        "content": "<p>It seems that <code>hAUBV</code> only asserts that <code>U</code> and <code>V</code> either both have or both do not have terms.</p>",
        "id": 431369583,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712252478
    },
    {
        "content": "<p>This is independent of Lean's logic</p>",
        "id": 431370709,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712252873
    },
    {
        "content": "<p>Hmm, in that case wouldn't it be true because the hypothesis <code>hAUBV</code> is false? Like, you can't prove <code>((a : A) -&gt; List a) = ((a : A) -&gt; Array a)</code></p>",
        "id": 431370931,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1712252938
    },
    {
        "content": "<p>...but conversely <code>hAUBV</code> doesn't bring you any information</p>",
        "id": 431371032,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712252981
    },
    {
        "content": "<p>It's not because something can't be proved that it is false</p>",
        "id": 431371061,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712252992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Dependent.20congruence.20theorem.3F/near/431370709\">said</a>:</p>\n<blockquote>\n<p>This is independent of Lean's logic</p>\n</blockquote>\n<p>Hmm okay, by that do you mean I can't expect to prove it? For context, I was trying to prove the theorem <code>congrDepEq</code> below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">congrDepEqAux</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hAUBV</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">congrDepEq</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAUBV</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hUaVb</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hAUBV</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hAB</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hUaVb</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hAB</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">congrDepEqAux</span> <span class=\"n\">hAUBV</span>\n  <span class=\"n\">subst</span> <span class=\"n\">this</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hab</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hfg</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I guess I could include the hypothesis <code>(hUV : U = Eq.mpr (congrArg (· → Type v) hAB) V)</code>, but would like to avoid doing so if possible.</p>",
        "id": 431372030,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1712253214
    },
    {
        "content": "<p>In Lean's logic, all you can deduce from <code>hAUBV : (∀ a, U a) = (∀ b, V b)</code> is that <code>∀ a, U a</code> and <code>∀ b, V b</code> have the same cardinality. That's it.</p>",
        "id": 431372795,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712253337
    },
    {
        "content": "<p>In particular, <code>f = Eq.mpr hAUBV g</code> doesn't let you deduce anything</p>",
        "id": 431373290,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712253409
    },
    {
        "content": "<p>Maybe <code>A := Bool</code>, <code>B := Bool</code>, <code>U := fun _ ↦ Nat</code>, <code>V := fun _ ↦ Nat</code> and <code>Eq.mpr hAUBV</code> is the permutation <code>(Bool → Nat) ≃ (Bool → Nat)</code> which sends <code>f : Bool → Nat</code> to <code>fun b ↦ f (!b)</code></p>",
        "id": 431373954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712253550
    },
    {
        "content": "<p>Replacing <code>Bool → Nat</code> with <code>Nat × Nat</code> is possibly clearer: For all you know, <code>Eq.mpr hAUBV</code> <em>could be</em> the map <code>fun (a, b) ↦ (b, a)</code>, which is <em>not</em> the identity</p>",
        "id": 431374207,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712253623
    },
    {
        "content": "<p>I simplified the theorem to <code>congrDepEq'</code>, and I was only able to prove it by adding a <code>Subsingleton</code> assumption. When the theorem is in this form, you can see that it's a statement about whether casting commutes with application, which I'm not sure is provable without additional assumptions (and what Yael says suggests \"no\").</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">congrDepEq'</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"c1\">-- True if this is a subsingleton</span>\n    <span class=\"o\">(</span><span class=\"n\">hAUBV</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hUaVb</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HEq</span> <span class=\"o\">((</span><span class=\"n\">cast</span> <span class=\"n\">hAUBV.symm</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">congr</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">congrDepEq</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAUBV</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hUaVb</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">hAB.symm</span> <span class=\"n\">b</span><span class=\"o\">))]</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hAUBV</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hAB</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hUaVb</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hAB</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hab</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hfg</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_mpr_eq_cast</span><span class=\"o\">,</span> <span class=\"n\">cast_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hUaVb</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">cast_eq_iff_heq</span><span class=\"o\">]</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">inst</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congrDepEq'</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 431381753,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712256583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Dependent.20congruence.20theorem.3F/near/431374207\">said</a>:</p>\n<blockquote>\n<p>Replacing <code>Bool → Nat</code> with <code>Nat × Nat</code> is possibly clearer: For all you know, <code>Eq.mpr hAUBV</code> <em>could be</em> the map <code>fun (a, b) ↦ (b, a)</code>, which is <em>not</em> the identity</p>\n</blockquote>\n<p>I may not be understanding completely, but wouldn't this only be the case if I had used some arbitrary <code>F : ((b : B) -&gt; V b) -&gt; (b : B) -&gt; V b</code> instead of <code>Eq.mpr hAUBV</code>, which is a particular defined function? I ask because it seems that the theorem is provable after adding the <code>hUV</code> hypothesis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">congrDepEq</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hUV</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">hAB</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hAUBV</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hUaVb</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hAUBV</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hAB</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hUaVb</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hAB</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hab</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hUV</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hfg</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I can't prove it without <code>hfg</code>, which would imply that this hypothesis does bring some useful information, right?</p>",
        "id": 431449501,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1712295075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Dependent.20congruence.20theorem.3F/near/431374207\">said</a>:</p>\n<blockquote>\n<p>Replacing <code>Bool → Nat</code> with <code>Nat × Nat</code> is possibly clearer: For all you know, <code>Eq.mpr hAUBV</code> <em>could be</em> the map <code>fun (a, b) ↦ (b, a)</code>, which is <em>not</em> the identity</p>\n</blockquote>\n<p>No, this is not true. If it's possible to prove the equality using reflexivity, then <code>Eq.mpr</code> <em>must</em> be the identity map</p>",
        "id": 431449741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712295249
    },
    {
        "content": "<p>Yes, which is what adding <code>hUV</code> does. In the absence of if, my claim holds.</p>",
        "id": 431453607,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712297779
    },
    {
        "content": "<p>your example here involves an equality <code>(Nat × Nat) = (Nat × Nat)</code> or <code>(Bool → Nat) = (Bool → Nat)</code>. Lean can prove that this equality is <code>rfl</code>, and the <code>cast</code> equivalent to <code>id</code>, because of proof irrelevance</p>",
        "id": 431454444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712298346
    },
    {
        "content": "<p>I actually don't know whether <code>((x : A) -&gt; T x) = ((x : A) -&gt; U x) -&gt; T = U</code> is provable or not. The cardinality model doesn't give a counterexample</p>",
        "id": 431454585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712298430
    },
    {
        "content": "<p>If you allow both the domain and codomain to be different then it's independent</p>",
        "id": 431454620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712298450
    },
    {
        "content": "<p>Actually I take it back, there is a cardinality model counterexample, where <code>A = Fin 2</code>, <code>T = ![Bool, Unit]</code> and <code>U = ![Unit, Bool]</code> since in this case the two function types each have cardinality 1* 2 = 2 * 1 but <code>T 0</code> is not equal to <code>U 0</code></p>",
        "id": 431454876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712298608
    },
    {
        "content": "<p>Yeah indeed that's what I was alluding to but I overminimised to the point where <code>rfl</code> worked</p>",
        "id": 431456231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712299359
    },
    {
        "content": "<p>Okay. So, I guess I'm stuck with <code>hUV</code> in that case, though I may eventually try to reformulate this theorem using <code>HEq</code>. On the bright side, thanks to <code>funext</code> I can reframe it as <code>(hUV : ∀ a : A, U a = V (Eq.mp hAB a))</code>, which I think makes it a bit easier to work with for my purposes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">congrDepEq</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hUV</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">Eq.mp</span> <span class=\"n\">hAB</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hAUBV</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hUaVb</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hAUBV</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hAB</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.mpr</span> <span class=\"n\">hUaVb</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hAB</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"n\">hUV</span>\n  <span class=\"n\">subst</span> <span class=\"n\">this</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hab</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hfg</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 431482351,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1712308345
    }
]