[
    {
        "content": "<p>I have a very big inductive definition. But I often need to prove something only for the one case and for all other cases (together). I currently work with meta variables. But this seem to be very slow, since Lean now checks the proof for every of those cases. Is there a way to make this more idiomatic/more performed?</p>\n<p>An illustrative example may be this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">BigDef</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">BigDef</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">BigDef</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">BigDef</span>\n  <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">BigDef</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigDef</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">BigDef</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"c1\">-- proof 1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"c1\">-- proof 2</span>\n</code></pre></div>\n<p>In this case, the proof 1 and 2 are here actually the same. This is mere because the example may already be too simple... In general I have two different proofs. Proof 2 however takes rather long, since Lean checks this for every case of x.</p>",
        "id": 434361408,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1713532807
    },
    {
        "content": "<p>what is the <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> here?<br>\nit might be the case that there is a better way than using an inductive type to encode this problem...</p>",
        "id": 434366075,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1713534268
    },
    {
        "content": "<p>In my use case, the inductive type I am working with is a program and the function f is a probability transition function</p>",
        "id": 434366572,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1713534426
    },
    {
        "content": "<p>could it be useful to write the program as multiple definitions which are mutually inductive?</p>",
        "id": 434368181,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1713534942
    },
    {
        "content": "<p>You mean in order to group statements with similar proofs?</p>",
        "id": 434369233,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1713535245
    }
]