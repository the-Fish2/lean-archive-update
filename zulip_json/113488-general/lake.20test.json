[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, some libraries, e.g. Aesop, have a <code>lean_lib</code> for their test suite.</p>\n<p>I'm pretty sure there's currently no way to annotate a <code>lean_lib</code> with <code>testRunner</code>, is that right? Would this be difficult to add?</p>",
        "id": 438219435,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715556248
    },
    {
        "content": "<p>I don't know what running a library would mean.</p>",
        "id": 438219465,
        "sender_full_name": "Mac Malone",
        "timestamp": 1715556299
    },
    {
        "content": "<p>building it</p>",
        "id": 438219473,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715556306
    },
    {
        "content": "<p>currently <code>./test</code> in Aesop is just <code>lake build AesopTest</code></p>",
        "id": 438219483,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715556325
    },
    {
        "content": "<p>how does that work?</p>",
        "id": 438219498,
        "sender_full_name": "Mac Malone",
        "timestamp": 1715556354
    },
    {
        "content": "<p>I'm confused by your question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">cat</span> <span class=\"n\">test</span>\n<span class=\"bp\">#!/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">env</span> <span class=\"n\">bash</span>\n\n<span class=\"n\">env</span> <span class=\"n\">LEAN_ABORT_ON_PANIC</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"n\">AesopTest</span>\n</code></pre></div>",
        "id": 438219552,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715556389
    },
    {
        "content": "<p>so that menas, that once a test passes it can't be run again?</p>",
        "id": 438219582,
        "sender_full_name": "Mac Malone",
        "timestamp": 1715556427
    },
    {
        "content": "<p>I mean, you can <code>lake clean</code>? And if dependencies change it will automatically run again. Seems like the desired behaviour, in fact?</p>",
        "id": 438219600,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715556464
    },
    {
        "content": "<p>I mean, I guess? That seems like kind of an abuse of the concept of building a library.</p>",
        "id": 438219714,
        "sender_full_name": "Mac Malone",
        "timestamp": 1715556603
    },
    {
        "content": "<p>So, what do we tell Aesop, then? \"No, you can't have <code>lake test</code> replace <code>./test</code> unless you ...\"?</p>",
        "id": 438219776,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715556665
    },
    {
        "content": "<p>I would generally default to the Batteries-style test runner for this. However, I will consider this style of testing library some more -- maybe it is worth supporting in the future? It is an interesting idea.</p>",
        "id": 438219959,
        "sender_full_name": "Mac Malone",
        "timestamp": 1715556860
    },
    {
        "content": "<p>The batteries style test runner is insufficient here.</p>",
        "id": 438219995,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715556906
    },
    {
        "content": "<p>AesopTest has files that import other files in AesopTest</p>",
        "id": 438220005,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715556915
    },
    {
        "content": "<p>which we can't do in the \"pile of lean files\" test suite that Batteries and Mathlib currently use</p>",
        "id": 438220017,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715556933
    },
    {
        "content": "<p>To be honest, I think we should just switch <em>all</em> test suites to <code>lean_lib</code>s.</p>",
        "id": 438220029,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715556955
    },
    {
        "content": "<p>Note that there is precedent in other systems for tests that are nothing other than \"does this target build\", <a href=\"https://github.com/bazelbuild/bazel-skylib/blob/main/docs/build_test_doc.md\">such as in bazel</a></p>",
        "id": 438220076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715556978
    },
    {
        "content": "<p>This would also mean we could ditch the ad-hoc test runner I wrote for Batteries, and instead just rely on lake's much more reliable build system!</p>",
        "id": 438220109,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715557039
    },
    {
        "content": "<p>I created <a href=\"https://github.com/leanprover/lean4/pull/4142\">lean#4142</a> to track this.</p>",
        "id": 438220756,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715557733
    },
    {
        "content": "<p>I'd love to sort out these <code>lake test</code> issues sooner rather than later. The <code>lean-action</code> repository is going to assume that <code>lake test</code> is the entry point for testing, and I would like to allow people to start using that everywhere if possible.</p>\n<p>If either or both of <a href=\"https://github.com/leanprover/lean4/pull/4142\">lean#4142</a> (lean_lib as test runner) and <a href=\"https://github.com/leanprover/lean4/pull/4121\">lean#4121</a> (allow using upstream executable as testRunner) were available in time I would love to backport these to <code>v4.8.0-rc2</code> so we can get started using <code>lake test</code> without just copying and pasting the Batteries test runner everywhere.</p>",
        "id": 438220854,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715557825
    },
    {
        "content": "<p>Also it's not that weird for testing a lean project to entail building some files, since files can use <code>#eval</code> and <code>#guard_msgs</code> etc to move testing to compile time</p>",
        "id": 438220857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715557832
    },
    {
        "content": "<p>Yes. #guard_msgs is basically our preferring testing mechanism at this point. Obviously it doesn't cover everything, but perhaps 99%!</p>",
        "id": 438220878,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715557863
    },
    {
        "content": "<p>any project which is primarily about metaprogramming (e.g. a tactic library) will probably have all its tests at build time</p>",
        "id": 438220895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715557896
    },
    {
        "content": "<p>and TBH that's the majority of lean projects (with tests) right now</p>",
        "id": 438220961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715557956
    },
    {
        "content": "<p>Agreed that the Batteries test battery is a hack and should be replaced by <code>lean_lib</code></p>",
        "id": 438221052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715558057
    },
    {
        "content": "<p>although it would be nice to have <code>lean_lib</code>s that can't be imported for this purpose</p>",
        "id": 438221089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715558105
    },
    {
        "content": "<p>If all tests will be using <code>lean_lib</code>, is there a way to flexibly include/exclude tests, or mark tests as skip/broken (test libs in other languages could)? For a <code>lean_lib</code> the former can be achieved by glob, I don't know about the rest. For now it seems the only solution is to move the to-skip/broken tests to separate directories, but that would confuse git when merging these moves with modifications to the tests.</p>",
        "id": 438223835,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715560909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>, I think these questions apply equally well to the test runner in <a href=\"https://github.com/leanprover-community/batteries/pull/787\">batteries#787</a>.</p>",
        "id": 438223930,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715561009
    },
    {
        "content": "<p>This is stuff that we can ask for in later, full-featured test runners, but I don't think should block anything we're doing right now.</p>\n<p>I'm not really a fan of supporting broken tests in a test runner, anyway. You comment it out, and create an issue, no?</p>",
        "id": 438224020,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715561098
    },
    {
        "content": "<p>Yes. I don't mean them to be blocking issues of using <code>lean_lib</code> which seems to a nice improvement.</p>",
        "id": 438224113,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715561180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/lake.20test/near/438224020\">said</a>:</p>\n<blockquote>\n<p>I'm not really a fan of supporting broken tests in a test runner, anyway. You comment it out, and create an issue, no?</p>\n</blockquote>\n<p>I used to have them marking test cases that fail for certain combination of inputs in other languages, e.g.<a href=\"/user_uploads/3121/pkzayy1x-9019Bd5Sn1PFBP-/733BCA30-2FCF-4410-8972-61C6E077C403.jpg\">733BCA30-2FCF-4410-8972-61C6E077C403.jpg</a> which is very flexible in a situation where fixing the test for some inputs will break for other inputs, this makes it clear that which tests should pass but are broken for now. A issue can only describe the general situation, and these executable marks will keep tracking what's going on specifically and more maintainable than comments.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pkzayy1x-9019Bd5Sn1PFBP-/733BCA30-2FCF-4410-8972-61C6E077C403.jpg\" title=\"733BCA30-2FCF-4410-8972-61C6E077C403.jpg\"><img src=\"/user_uploads/3121/pkzayy1x-9019Bd5Sn1PFBP-/733BCA30-2FCF-4410-8972-61C6E077C403.jpg\"></a></div>",
        "id": 438224832,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715561973
    },
    {
        "content": "<p>Just noticed that <code>lake test</code> is not documented in <a href=\"https://github.com/leanprover/lean4/blob/master/src/lake/README.md\">https://github.com/leanprover/lean4/blob/master/src/lake/README.md</a> , or is there another reference?</p>",
        "id": 438226236,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715563454
    },
    {
        "content": "<p>No, I don't think is documented yet. Issue (asking for documentation) or PR (adding some!) very welcome.</p>",
        "id": 438226432,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715563683
    },
    {
        "content": "<p>It can be valuable to keep running tests that fail so that ci tells you when they start passing again, as well</p>",
        "id": 438246326,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715578139
    },
    {
        "content": "<p>I think in the <code>lean_lib</code> scenario this will be okay: successive failures of <code>lake build AesopTest</code> show the failure error each time.</p>",
        "id": 438246704,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715578367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/lake.20test/near/438226432\">said</a>:</p>\n<blockquote>\n<p>No, I don't think is documented yet. Issue (asking for documentation) or PR (adding some!) very welcome.</p>\n</blockquote>\n<p>In light of <a href=\"https://github.com/leanprover/lean4/pull/4116\">lean4#4116</a>, I'll settle for <code>lake test --help</code> for now. The doc is subject to changes anyway.</p>",
        "id": 438307732,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715590264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/lake.20test/near/438221089\">said</a>:</p>\n<blockquote>\n<p>although it would be nice to have <code>lean_lib</code>s that can't be imported for this purpose</p>\n</blockquote>\n<p>There's now an issue tracking this at <a href=\"https://github.com/leanprover/lean4/pull/4168\">lean#4168</a>.</p>",
        "id": 438684609,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715732213
    },
    {
        "content": "<p>Hello. In <code>leanprover/lean4:v4.8.0-rc2</code> adding <code>@[test_runner]</code> triggers the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">unexpected</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"kd\">@[</span><span class=\"bp\">';</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">abbrev'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">axiom'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">binder_predicate'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">builtin_initialize'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">class'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">def'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">elab'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">elab_rules'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">example'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">extern_lib'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">inductive'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">infix'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">infixl'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">infixr'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">initialize'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">instance'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">lean_exe'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">lean_lib'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">library_facet'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">macro'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">macro_rules'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">module_facet'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">notation'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">opaque'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">package'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">package_facet'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">post_update'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">postfix'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">prefix'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">script'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">structure'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">syntax'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">target'</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">theorem'</span>\n</code></pre></div>",
        "id": 442883729,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717618761
    },
    {
        "content": "<p>Are there examples of usage?</p>",
        "id": 442884794,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717619035
    },
    {
        "content": "<p>Use <code>@[test_driver]</code> instead. (Although I thought there was a deprecation warning for this, not an error, so something else might be wrong with your setup.)</p>",
        "id": 442890880,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717620648
    },
    {
        "content": "<p>If <code>@[test_driver]</code> doesn't solve the problem, can you please post your <code>lakefile.lean</code>?</p>",
        "id": 442890920,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717620660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span>m <span class=\"user-mention\" data-user-id=\"671510\">@Bernardo Borges</span> error is on <code>v4.8.0-rc2</code> before the new test improvements. It seems like they may be putting the attribute on something that does not support attribues. <span class=\"user-mention\" data-user-id=\"671510\">@Bernardo Borges</span>, could you post your <code>lakefile.lean</code> and show were you are adding the attribute?</p>",
        "id": 442893487,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717621341
    },
    {
        "content": "<p>To be frank I could get rid of the error, it's just that I couldn't find documentation that explains how to make the script trigger the /test folder:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lake</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lake</span><span class=\"w\"> </span><span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">cutting</span><span class=\"bp\">-</span><span class=\"n\">planes</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n\n<span class=\"n\">require</span><span class=\"w\"> </span><span class=\"n\">mathlib</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">git</span>\n<span class=\"w\">  </span><span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span>\n\n<span class=\"n\">lean_lib</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">LeanCuttingPlanes</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">test_runner</span><span class=\"kd\">]</span>\n<span class=\"n\">script</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_exe</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">cutting</span><span class=\"bp\">-</span><span class=\"n\">planes</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"ss\">`Main</span>\n</code></pre></div>",
        "id": 442895191,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717621845
    },
    {
        "content": "<p>Ah, at this point <code>@[test_driver]</code> / <code>@[test_runner]</code> can only be put on a <code>lean_exe</code>.</p>",
        "id": 442915927,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717627555
    },
    {
        "content": "<p>On <code>v4.9.0-rc1</code>, hopefully coming out soon, you can also put it on a <code>lean_lib</code> (having the effect of just building that lib).</p>",
        "id": 442916178,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717627631
    },
    {
        "content": "<p>I think a <code>script</code> is still not supported. Could you open an issue if you think there's a workflow supported by a script that wouldn't be possible otherwise?</p>",
        "id": 442916247,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717627662
    },
    {
        "content": "<p>I'm setting this up just now so I don't have a workflow yet. What I would like to do is similar to the lean_lib you mentioned, where my ci will try to build the test folder</p>",
        "id": 442933569,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717633984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/lake.20test/near/442916247\">said</a>:</p>\n<blockquote>\n<p>I think a <code>script</code> is still not supported. Could you open an issue if you think there's a workflow supported by a script that wouldn't be possible otherwise?</p>\n</blockquote>\n<p>A <code>script</code> is supported (in fact, it is the most preferrd in the ordering).</p>",
        "id": 442953848,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717643486
    },
    {
        "content": "<p>Interesting! Is there a script that attempts to build all lean files in a directory?</p>",
        "id": 443045957,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717676921
    },
    {
        "content": "<p>My preference is that people avoid the use of scripts for now, as they are only supported in <code>lakefile.lean</code>, while I hope as many projects as possible will use <code>lakefile.toml</code> instead.</p>",
        "id": 443057471,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717680310
    },
    {
        "content": "<p>Why is a .toml preferred now?</p>",
        "id": 443059965,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717680774
    },
    {
        "content": "<p>Simplicity. It's always better to use a non-interpreted configuration file if you can, instead of having your configuration file being an arbitrary piece of interpreted code.</p>",
        "id": 443060924,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717680931
    },
    {
        "content": "<p>Interesting, will this be the standard option when <code>lake new</code> is run?</p>",
        "id": 443061248,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1717680978
    },
    {
        "content": "<p>This is proposed in <a href=\"https://github.com/leanprover/lean4/pull/4106\">lean#4106</a>, but a final decision hasn't been made.</p>",
        "id": 443182979,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717718351
    }
]