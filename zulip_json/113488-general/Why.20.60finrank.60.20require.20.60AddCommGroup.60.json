[
    {
        "content": "<p>In <code>Module.rank</code> it's <code>[Semiring R] [AddCommMonoid M]</code>, but in <code>FiniteDimensional.finrank</code> it's <code>[Semiring R] [AddCommGroup M]</code>. Are there design considerations in it?</p>",
        "id": 432890349,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712923861
    },
    {
        "content": "<p>I expect this is just a leftover from when <code>findim</code> was defined only for vector spaces. I suggest we can generalize this nothing will break.</p>",
        "id": 432896744,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1712926145
    },
    {
        "content": "<p>I think the discussion near the end of <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20.60E.2FL.2FF.60.20and.20.60K.2FL'.2FF.60.20isomorphic.20.3D.3E.20.60.5BE.3AL.5D.3D.5BK.3AL'.5D.60\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20.60E.2FL.2FF.60.20and.20.60K.2FL'.2FF.60.20isomorphic.20.3D.3E.20.60.5BE.3AL.5D.3D.5BK.3AL'.5D.60</a> suggests that we shouldn't bother ourselves with generalising before making sure we are using the correct definition for semimodules.</p>",
        "id": 432898377,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1712926668
    },
    {
        "content": "<p>I remembered that there was a discussion that whether <code>LinearIndependent</code> should use the kernel of <code>Finsupp.total</code> being zero (i.e. the preimage of zero is zero) or <code>Finsupp.total</code> being injective. The latter is stronger than the former.<br>\nThe former is equivalent to say any non-zero linear combination is not zero, and the latter is equivalent to say if two linear combinations are equal, then their coefficients are equal, or you can say formal subtraction is allowed (i.e. Grothendieck group). For rings, these two are equivalent.</p>",
        "id": 432974216,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712952420
    },
    {
        "content": "<p>My opinion is that let's keep the prerequisites of <code>Module.rank</code> and <code>FiniteDimensional.finrank</code> the same.</p>",
        "id": 432974301,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712952458
    },
    {
        "content": "<p>One could add the dual notion of “type”, the minimal cardinality of a generating set. That would be closer to what one wants to say.</p>",
        "id": 433023075,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712991946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/113488-general/topic/Why.20.60finrank.60.20require.20.60AddCommGroup.60/near/433023075\">said</a>:</p>\n<blockquote>\n<p>One could add the dual notion of “type”, the minimal cardinality of a generating set. That would be closer to what one wants to say.</p>\n</blockquote>\n<p>And then if these two definitions coincide, then I think that the module in question is very close to a free module.</p>",
        "id": 433037381,
        "sender_full_name": "Jz Pan",
        "timestamp": 1713005205
    }
]