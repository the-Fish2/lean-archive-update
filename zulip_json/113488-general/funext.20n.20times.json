[
    {
        "content": "<p>I want to prove inside a metaprogram <code>f = g</code>, where <code>f</code> and <code>g</code> are <code>n</code>-ary functions to <code>Prop</code>. Is there a way to ask Lean to run <code>funext</code> and return a list of <code>FVarId</code>s and a new <code>MVarId</code> like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.intros#doc\">docs#Lean.MVarId.intros</a> does for <code>intro</code>?</p>",
        "id": 410963812,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704263516
    },
    {
        "content": "<p>You should be able to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.apply#doc\">docs#Lean.MVarId.apply</a> funext n times I guess, I don't know of a better way</p>",
        "id": 410998585,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704281449
    },
    {
        "content": "<p>I came up with (not tested yet):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">funext1</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">FVarId</span> <span class=\"bp\">×</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">mvarId'</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.apply</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">funext</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Expected one goal\"</span>\n  <span class=\"n\">mvarId'.intro</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">n.getD</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshUserName</span> <span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">funextList</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">names</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Name</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">FVarId</span> <span class=\"bp\">×</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">names.foldlM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">fvarIds</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">⟩</span> <span class=\"n\">name</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">fvarId</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">funext1</span> <span class=\"n\">mvarId</span> <span class=\"n\">name</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">fvarIds</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">fvarId</span><span class=\"o\">],</span> <span class=\"n\">mvarId</span><span class=\"o\">))</span> <span class=\"o\">([],</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">funextN</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">FVarId</span> <span class=\"bp\">×</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">funextList</span> <span class=\"n\">mvarId</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">replicate</span> <span class=\"n\">n</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 411037215,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704297388
    },
    {
        "content": "<p>Is there a way to write <code>funextList</code> so that it doesn't rebuild <code>fvarIds</code> every time? Should I use <code>List.cons</code> instead, then reverse? Or there is a better function?</p>",
        "id": 411037350,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704297456
    },
    {
        "content": "<p>Have it return <code>Array FVarId</code> and use <code>fvarIds.push fvarId</code> instead</p>",
        "id": 411039755,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704298275
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">funext1</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">FVarId</span> <span class=\"bp\">×</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">mvarId'</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.apply</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">funext</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Expected one goal\"</span>\n  <span class=\"n\">mvarId'.intro</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">n.getD</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshUserName</span> <span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">funextArray</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">names</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Name</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">FVarId</span> <span class=\"bp\">×</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">names.foldlM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">fvarIds</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">⟩</span> <span class=\"n\">name</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">fvarId</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">funext1</span> <span class=\"n\">mvarId</span> <span class=\"n\">name</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">fvarIds.push</span> <span class=\"n\">fvarId</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mkEmpty</span> <span class=\"n\">names.size</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">funextN</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">FVarId</span> <span class=\"bp\">×</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">funextArray</span> <span class=\"n\">mvarId</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mkArray</span> <span class=\"n\">n</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 411042373,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704299310
    },
    {
        "content": "<p><code>mkConst</code> isn't right -- that doesn't set up universe level parameters correctly. You need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.mkConstWithFreshMVarLevels#doc\">docs#Lean.Meta.mkConstWithFreshMVarLevels</a> (Mathlib gives <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.mkConst%27#doc\">docs#Lean.mkConst'</a> for short, though it seems to be its own implementation)</p>",
        "id": 411043628,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704299768
    },
    {
        "content": "<p>I'll use&amp;test it later today. Thanks!</p>",
        "id": 411043962,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704299889
    }
]