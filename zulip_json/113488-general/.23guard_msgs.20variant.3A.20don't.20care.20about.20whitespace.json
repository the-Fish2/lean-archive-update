[
    {
        "content": "<p>In the following example, there is an unnatural space between <code>instance</code> and <code>Inv α</code>, but an error will occur if there is not a space of exactly this length. This behaviour of <code>#guard_msgs</code> is inconvenient.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">error: failed to synthesize instance   Inv α</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n</code></pre></div>",
        "id": 431747036,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712480696
    },
    {
        "content": "<p>see also: <a href=\"https://github.com/leanprover/std4/issues/717\">https://github.com/leanprover/std4/issues/717</a></p>",
        "id": 431747045,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712480708
    },
    {
        "content": "<p><a href=\"https://github.com/digama0\">Mario Carneiro</a> tells me that this <code>#guard_msgs</code> spec is intentional. I understand that, but I want a way to check output messages without worrying about size of whitespace (or indent level).</p>",
        "id": 431747137,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712480817
    },
    {
        "content": "<p>Can you add a config to <code>#guard_msgs</code> that doesn't care about whitespace size?</p>",
        "id": 431747221,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712480888
    },
    {
        "content": "<h3>why I need such a thing</h3>\n<p>Specifically, such a command is needed to improve the \"code examples that intentionally cause errors\" in textbook (including \"metaprogramming in lean\"!) so that they do not produce errors. I seriously want such a command!</p>\n<p>Since metaprogramming in lean uses mdgen (tool to generate <code>.md</code> files from <code>.lean</code> files), an unnaturally sized whitespace would look strange to the reader.</p>",
        "id": 431747380,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712481112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"626349\">@Asei Inoue</span>, I don't really understand the motivation you give. (Not that I disagree that it is a good motivation, I simply don't understand what you are trying to do.) Could you explain more?</p>",
        "id": 431751361,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712483463
    },
    {
        "content": "<p>Related to this, I've had an issue with the newline symbol in <code>#guard_msgs</code>, as a user of windows, because my editor automatically turned the pasted <code>\\n</code> newlines into <code>\\r\\n</code> newlines. It took me a while to figure out that I should change the setting from CRLF to LF.</p>",
        "id": 431751517,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712483528
    },
    {
        "content": "<p>There are lots of additional features #guard_msgs could have. (e.g. only check a prefix of the message? check the message matches a regex? normalize names of mvars/fvars to strip numerical indices...)</p>",
        "id": 431751603,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712483565
    },
    {
        "content": "<p>I'd prefer not to go down the path of adding such features heedlessly, but I agree more is needed here eventually. Ideas appreciated.</p>",
        "id": 431751749,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712483617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> <a href=\"#narrow/stream/113488-general/topic/.23guard_msgs.20variant.3A.20don't.20care.20about.20whitespace/near/431747380\">said</a>:</p>\n<blockquote>\n<h3>why I need such a thing</h3>\n<p>Specifically, such a command is needed to improve the \"code examples that intentionally cause errors\" in textbook (including \"metaprogramming in lean\"!) so that they do not produce errors. I seriously want such a command!</p>\n</blockquote>\n<p>Have you tried using verso for showing outputs?</p>",
        "id": 431757946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712487121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span> Addressing line endings is on the roadmap, and it will probably be fixed in the release after the next one. The plan is to make it so that Lean normalizes all line endings to just LF. (This is already done by <code>lake</code> when computing hashes.)</p>",
        "id": 431798877,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712510645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Regarding normalizing names of mvars, at least we'll have <code>set_option pp.mvars false</code> in the next Lean release to have them print as <code>?_</code>. There will also be <code>set_option pp.mvars.withType true</code> to print metavariables with type ascriptions. These options probably handle most cases, since having multiple mvars with the same type is rare in practice.</p>",
        "id": 431799250,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712510831
    },
    {
        "content": "<p>One annoying issue I had with #guard_msgs recently was diagnosing a timeout. I put a #guard_msgs in to ensure that the timeout didn't disappear while I tweaked things, but annoyingly the message kept flipping back and forth between complaining about <code>whnf</code> and <code>isDefEq</code>. In the end I just made a custom #guard_timeout that watched for either. This example was why I was thinking about testing for prefixes or regexes.</p>",
        "id": 431816594,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712524180
    },
    {
        "content": "<p>Here's an annoying issue I had with <code>guard_msgs</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">info:</span>\n<span class=\"sd\">---</span>\n<span class=\"sd\">error: oh no</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Lean.Elab.Command.CommandElabM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.logInfo</span> <span class=\"s2\">\"\"</span>\n  <span class=\"n\">Lean.logError</span> <span class=\"s2\">\"oh no\"</span>\n</code></pre></div>\n<p>I can't see to satisfy <code>guard_msgs</code> here</p>",
        "id": 431821283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712528458
    },
    {
        "content": "<p>At least in the web editor, it insists that my docstring is wrong, and that I replace it with an unchanged version, which of course it then still insists is wrong.</p>",
        "id": 431821342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712528499
    },
    {
        "content": "<p>the issue is the trailing whitespace after <code>info:</code>, which is <a href=\"https://github.com/leanprover/lean4/pull/3571\">lean4#3571</a>. The fix has already been merged, so it should be coming up in the next stable</p>",
        "id": 431821542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712528649
    },
    {
        "content": "<p>(it occurs to me that we will be seeing fixes to tactics-that-were-once-in-Std much slower now)</p>",
        "id": 431821583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712528703
    },
    {
        "content": "<p>a workaround until 3571 percolates through the pipeline is to put the space before the following line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">info:</span>\n<span class=\"sd\"> ---</span>\n<span class=\"sd\">error: oh no</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Lean.Elab.Command.CommandElabM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.logInfo</span> <span class=\"s2\">\"\"</span>\n  <span class=\"n\">Lean.logError</span> <span class=\"s2\">\"oh no\"</span>\n</code></pre></div>",
        "id": 431821720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712528832
    },
    {
        "content": "<p>Is the web editor stripping trailing space in a way that I can't see?</p>",
        "id": 431821818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712528928
    },
    {
        "content": "<p>Apparently? It works in vscode if I just put the trailing space in explicitly, but it breaks if I save since I have strip-trailing-whitespace-on-save enabled</p>",
        "id": 431821842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712528966
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"s2\">\"</span>\n<span class=\"s2\">\"</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n</code></pre></div>\n<p>in the web editor suggests the spaces are left intact</p>",
        "id": 431821896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712529003
    },
    {
        "content": "<p>(zulip is stripping them too it seems...)</p>",
        "id": 431821911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712529015
    },
    {
        "content": "<p>Actually I can't reproduce in the web editor</p>",
        "id": 431821914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712529018
    },
    {
        "content": "<p>I can manually place a trailing whitespace just fine, and I can also trigger the code action which puts the trailing whitespace in</p>",
        "id": 431821932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712529046
    },
    {
        "content": "<p>Ugh, I think I was getting cached error messages from an old server once again (and of course the web editor has no \"restart server\" button)</p>",
        "id": 431821953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712529082
    },
    {
        "content": "<p>Sorry for the noise</p>",
        "id": 431821961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712529087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.23guard_msgs.20variant.3A.20don't.20care.20about.20whitespace/near/431821953\">said</a>:</p>\n<blockquote>\n<p>(and of course the web editor has no \"restart server\" button)</p>\n</blockquote>\n<p>it does, it's just hidden in the dropdown menu.</p>\n<p>\"once again\", is that something you experience often?</p>",
        "id": 432359862,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1712705804
    },
    {
        "content": "<p>Yes, but the stale info is something I see in local lean too</p>",
        "id": 432360291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712706113
    },
    {
        "content": "<p>ok. The web editor does indeed import the infoview etc from <code>lean-vscode</code> (although might need a bump).</p>\n<p>However, if there is anything that can be fixes in the web editor, a short github issue is very much encouraged. I do occationally look at them and see if there is anything I can reproduce and fix.</p>",
        "id": 432420854,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1712731189
    },
    {
        "content": "<p>My experience (Linux/Firefox) with the Web editor is that after the server has crashed and it is restarted, the infoview does not refresh, and I have to click on the reload button of the browser to get it working again.</p>",
        "id": 432449195,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712738513
    },
    {
        "content": "<p>Thx,I'll add this comment to <a href=\"https://github.com/leanprover-community/lean4web/issues/17\">lean4web#17</a>. Don't fully understand yet where that's coming from</p>",
        "id": 432456255,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1712740378
    },
    {
        "content": "<p>Kyle has a PR at <a href=\"https://github.com/leanprover/lean4/pull/3883\">lean4#3883</a> that gives some options for dealing with whitespace in <code>#guard_msgs</code>.</p>",
        "id": 432862022,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712912442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"626349\">@Asei Inoue</span> In the next Lean release, you'll be able to use <code>#guard_msgs (whitespace := lax)</code></p>",
        "id": 433045443,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713013399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thanks!! This is very what I want!</p>",
        "id": 433114328,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713081649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/.23guard_msgs.20variant.3A.20don't.20care.20about.20whitespace/near/431799250\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> Regarding normalizing names of mvars, at least we'll have <code>set_option pp.mvars false</code> in the next Lean release to have them print as <code>?_</code>. There will also be <code>set_option pp.mvars.withType true</code> to print metavariables with type ascriptions. These options probably handle most cases, since having multiple mvars with the same type is rare in practice.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, <code>set_option pp.mvars false</code> unfortunately doesn't affect the printing of universe metavariables. I think it should! Is this easy to achieve?</p>",
        "id": 434906526,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713850908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> <a href=\"https://github.com/leanprover/lean4/pull/3978\">lean4#3978</a></p>",
        "id": 435015950,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713887686
    },
    {
        "content": "<p>Thanks to  <a href=\"https://github.com/leanprover/lean4/pull/3883\">lean4#3883</a>, now I can <code>#guard_msgs</code> on messages produced by <code>SlimCheck</code>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>mwe</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import Mathlib.Testing.SlimCheck.Functions</p>\n<p>/--<br>\ninfo:</p>\n<hr>\n<p>error:<br>\n===================<br>\nFound problems!<br>\nx := 0<br>\ny := 0<br>\nissue: 0 ≠ 0 does not hold<br>\n(0 shrinks)</p>\n<hr>\n<p>-/<br>\n#guard_msgs (whitespace := lax) in<br>\n#eval SlimCheck.Testable.check (∀ (x y : Nat), x + y ≠ y + x)</p>\n</div></div>",
        "id": 437972755,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715343535
    },
    {
        "content": "<p>I have a different feature request on ignoring things like <code>?m.2439</code> in the message when the number is changed, this happens when I bump Lean versions.</p>",
        "id": 437972974,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715343621
    },
    {
        "content": "<p><code>set_option pp.mvars false</code></p>",
        "id": 437973084,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715343677
    },
    {
        "content": "<p>Thanks, that works!</p>\n<p>Another case (sorry for listing more and more cases, they might not be useful for others):</p>\n<p>When I set <code>set_option trace.Meta.synthInstance true</code> for a failed synth, I would expect  <code>#guard_msgs</code> to have an option to match the synth error, but to ignore the info message generated by the trace.</p>",
        "id": 437974992,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715344506
    },
    {
        "content": "<p><code>#guard_msgs(drop info)</code></p>",
        "id": 437975150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715344574
    },
    {
        "content": "<p>Ah, thanks! I should have read the source of <code>#guard_msgs</code>.</p>",
        "id": 437975345,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715344681
    },
    {
        "content": "<p>Oh, unfortunately it doesn't work.</p>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Option'</span> <span class=\"o\">:=</span> <span class=\"n\">Option</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">error: fields missing: 'map', 'mapConst', 'seq', 'seqLeft'</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"o\">(</span><span class=\"n\">drop</span> <span class=\"n\">info</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">Option'</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">Option.some</span>\n  <span class=\"n\">bind</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Option.bind</span> <span class=\"n\">a</span> <span class=\"n\">f</span>\n    <span class=\"n\">b</span>\n</code></pre></div>\n<p>which was an unresolved case from <a href=\"#narrow/stream/113489-new-members/topic/Fields.20missing.20error.20while.20defining.20Monad\">this topic</a>.</p>",
        "id": 437975809,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715344904
    },
    {
        "content": "<p>Without <code>set_option trace.Meta.synthInstance true</code>, this would emit an error and make a raw <code>#guard_msgs</code> happy. With the option true and <code>(drop info)</code>, the error is gone with the trace info.</p>",
        "id": 437976165,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715345077
    },
    {
        "content": "<p>I had to go full debugger to figure this out but apparently this is by design: <code>#guard_msgs</code> alone (or <code>#guard_msgs()</code>) means to check everything but <code>#guard_msgs(...)</code> means to drop or check the specified things and passthrough everything not specified. So <code>#guard_msgs(drop info)</code> will passthrough everything and drop info, meaning that it is basically useless (it suppresses an info message but never produces anything to check in the doc comment). The correct way to do this is <code>#guard_msgs(error, drop info)</code>.</p>\n<p>cc: <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> is this really intentional? This seems like not a good default behavior.</p>",
        "id": 437978082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715345931
    },
    {
        "content": "<p>Thanks! <code>#guard_msgs(error, drop info)</code> works.</p>\n<p>I can find many usages of <code>#guard_msgs(drop info)</code> (in Mathlib and on Zulip) which might be omitting potential issues. The intuition of <code>drop info</code> is to have only effects on <code>info</code> messages, but not other types of messages.</p>",
        "id": 437979569,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715346559
    },
    {
        "content": "<p>for the purpose of asserting that there are no errors in a (chatty) command, either <code>#guard_msgs(drop info)</code> or <code>#guard_msgs(error, drop info)</code> will work, because in the former case if there is an error it will show up as a regular error message in the original location, while in the latter case <code>#guard_msgs</code> will complain that there is an unaccounted-for error diagnostic in the doc string</p>",
        "id": 437981451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715347359
    },
    {
        "content": "<p><code>#guard_msgs</code>'s design is that you select what you want to capture, but you can drop things too if you're sure you want to. I think it's generally a bad idea to drop messages in a test, but sometimes they're not useful (like linter warnings). The intent was to be able to do, say, <code>#guard_msgs (info)</code>, and then if an error popped up later it would still cause CI to fail as a normal error, rather than an error than <code>#guard_msgs</code> didn't match the expected string. A hole in its design is that it doesn't give you a way to explicitly decide to pass messages through.</p>\n<p><code>#guard_msgs in ...</code> is short for <code>#guard_msgs (all) in ...</code>. If you give your own descriptor, then this <code>all</code> is no longer part of the descriptor. A descriptor is processed in left-to-right order, and the first entry that has anything to say about a particular message is followed. If no entries have anything to say, the message is passed through. So, an empty descriptor, being the same as <code>(all)</code>, intercepts all messages.</p>\n<p>For example, <code>#guard_msgs (drop info, all)</code> would take everything but discard <code>info</code> messages, <code>#guard_msgs (info, drop all)</code> would take only <code>info</code> and drop everything else, <code>#guard_msgs (drop info)</code> would drop info and pass through everything else (odd, but for example <code>#guard_msgs (drop warning)</code> is useful in test suites to ignore warnings), and <code>#guard_msgs (info)</code> would take info and pass through everything else.</p>",
        "id": 437996213,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715353181
    },
    {
        "content": "<blockquote>\n<p>(odd, but for example <code>#guard_msgs (drop warning)</code> is useful in test suites to ignore warnings)</p>\n</blockquote>\n<p>this seems like a misleading usage, since it's not actually guarding anything</p>",
        "id": 437996793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715353379
    },
    {
        "content": "<p>It's guarding that there are no messages except maybe for warnings</p>",
        "id": 437996996,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715353445
    },
    {
        "content": "<p>but it's not - if there are messages they will be passed through and <code>#guard_msgs</code> will not complain</p>",
        "id": 437997052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715353476
    },
    {
        "content": "<p>if you have some global noisy files linter then you will still pick it up but <code>#guard_msgs</code> itself is not doing anything</p>",
        "id": 437997223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715353544
    },
    {
        "content": "<p>Oh right, I wasn't thinking with that last response. It's only useful in conjunction with a no-noisy-tests policy.</p>",
        "id": 437997726,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715353693
    },
    {
        "content": "<p>We never use it in mathlib, and it's only used ~10 of times across Lean and Batteries</p>",
        "id": 437997883,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715353745
    },
    {
        "content": "<p>It seems reasonable having <code>#guard_msgs</code> itself emit a warning if it detects that it's been given a configuration that can never capture anything.</p>",
        "id": 437997966,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715353780
    },
    {
        "content": "<p>Suggestion: add <code>keep $kind</code> for explicit passthrough and change the fallback to <code>all</code> instead of <code>keep all</code></p>",
        "id": 437998118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715353821
    },
    {
        "content": "<p>I think the only reason I didn't add that in the first place was I wasn't sure whether to spell it <code>passthrough</code> or <code>passthru</code>, and I didn't need it anyway.</p>",
        "id": 437998333,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715353899
    },
    {
        "content": "<p>I'm also not sure we need it, but if we don't then the conclusion would be to remove that variant entirely from <code>SpecResult</code></p>",
        "id": 437998494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715353944
    },
    {
        "content": "<p>but we do need it now for backcompat</p>",
        "id": 437998525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715353956
    },
    {
        "content": "<p>I believe I've found 2 new issues of <code>#guard_msgs</code>, with the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">info: \"3.14\"</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"3.14\"</span>\n</code></pre></div>\n<p>Issue 1 is the output is <code>\"3.14\"</code> but <code>#guard_msgs</code> expects the prefix \"info: \" which makes \"copy message to comment\" button can't work like before (before I can just use the copied comment to guard).</p>\n<p>Issue 2 is more serious, it might be related to <a href=\"#narrow/stream/270676-lean4/topic/Incrementality.20Call.20for.20Testing\">Incrementality Call for Testing</a>:</p>\n<p>If I backspace and delete the last <code>-</code> in the docstring openning, it becomes a normal comment, so <code>#guard_msgs</code> will error, but when I add the <code>-</code> back, <code>#guard_msgs</code> still errors, until I restart the file.</p>\n<p>I've tested this with Lean nightly on <a href=\"https://live.lean-lang.org/\">https://live.lean-lang.org/</a> .</p>",
        "id": 440040526,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716366244
    },
    {
        "content": "<p>Then at least it's independent of the unmerged incrementality PR. For issue 1, why are you not using the code action to update the docstring?</p>",
        "id": 440041343,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1716366512
    },
    {
        "content": "<p>Ah, sorry, I didn't realized that it's not merged.</p>\n<p>I'm not aware of the Code Action since code actions can't show on <a href=\"https://cursor.sh/\">Cursor</a>, and it seems to be not very obvious in VS Code too:</p>\n<p><a href=\"/user_uploads/3121/_7qowfksYPK-mgxB2nGd8P99/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_7qowfksYPK-mgxB2nGd8P99/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/_7qowfksYPK-mgxB2nGd8P99/image.png\"></a></div>",
        "id": 440042198,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716366812
    },
    {
        "content": "<p>The guard_msgs command should probably suggest using the code action in the error message</p>",
        "id": 440042342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716366859
    },
    {
        "content": "<p>note that vscode supports two kinds of code actions and if the lightbulb is blue then that means it's trying to get your attention</p>",
        "id": 440042541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716366938
    },
    {
        "content": "<p>regular code actions use a yellow lightbulb</p>",
        "id": 440042586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716366953
    },
    {
        "content": "<p>And the little blue lightbulb only appears if the cursor is on the same line as  <code>#guard_msgs </code>. If the cursor is on the line before, yellow stars from Copilot will pop out:</p>\n<p><a href=\"/user_uploads/3121/SC36uW8NrNpjbpAzqbNWAHV-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SC36uW8NrNpjbpAzqbNWAHV-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/SC36uW8NrNpjbpAzqbNWAHV-/image.png\"></a></div>",
        "id": 440043220,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716367189
    },
    {
        "content": "<p>yes, it's an autofix for the <code>#guard_msgs</code> error so you have to put your cursor on the error</p>",
        "id": 440043390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716367248
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4250\">lean#4250</a> adds a suggestion.</p>",
        "id": 440057078,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716372059
    },
    {
        "content": "<p>Thanks, this would definitely make the code action more visible. I was thinking about the click-to-replace variant like \"Try this\" when I was reading Mario's suggestion though.</p>",
        "id": 440066233,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716375548
    }
]