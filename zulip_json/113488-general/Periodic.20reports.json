[
    {
        "content": "<p>It was suggested in <a href=\"#narrow/stream/287929-mathlib4/topic/instance.20graphs\">this thread</a> that there might be interest to have a periodic report on some generic global information about mathlib.  I personally find this very interesting!</p>\n<p>This would be a bot that periodically posts a message on Zulip with some mathlib statistics.</p>\n<p>I think that there are two main decisions to take:</p>\n<ul>\n<li>what should be the frequency (possible ranges: never...daily -- more is probably too much?);</li>\n<li>what statistics would the community like to see!</li>\n</ul>\n<p>I am going to start two polls, one for frequency and one for possible topics: please vote your favourite or suggest more!</p>\n<p>PS  I am happy to try to implement the automation and the statistics, but if you ask for something too wild, I may not be able to do it!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 438846418,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715791723
    },
    {
        "content": "<p>/poll Frequency<br>\nDaily<br>\nWeekly<br>\nBiweekly<br>\nMonthly</p>",
        "id": 438846434,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715791731
    },
    {
        "content": "<p>/poll Mathlib statistic (could be more than one)<br>\nTop five popular tactics since last post<br>\nNet change in number of lines of Mathlib<br>\nNumber of new declarations<br>\nNumber of invisible (autogenerated) declarations<br>\nNumber of docstrings<br>\nLongest proof (expression)<br>\nLongest proof (syntax)<br>\nMost popular starting tactic<br>\nMost popular finishing tactic</p>",
        "id": 438846449,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715791739
    },
    {
        "content": "<p>Zulip is good but a bit incestuous. I was only half joking with the LinkedIn suggestion. Where does one disseminate this information to broader public these days?</p>",
        "id": 438850271,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715793046
    },
    {
        "content": "<p>We already have a statistics webpage. But we could indeed post something on mastodon for instance.</p>",
        "id": 438850734,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715793197
    },
    {
        "content": "<p>Ok, I guess that maybe I should also start a poll on where this should be posted!  Maybe I will wait to see what information surfaces above, though.</p>",
        "id": 438850942,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715793276
    },
    {
        "content": "<p>I can't seem to add options to the pole? I meant to add <code>Slowest proofs</code> and <code>Slowest files</code></p>",
        "id": 438855660,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715794949
    },
    {
        "content": "<p>I had forgotten about the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\">statistics page</a> that Patrick mentioned!  The number of theorems and the number of lines are already mentioned there, and these were the two most prominent features that were requested.  This was easy!</p>",
        "id": 438872370,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715801553
    },
    {
        "content": "<p>The next one up seems to be number of new modules with docstrings (I guess that this means a file that did not exist the previous week and that contains at least one doc-string?).</p>",
        "id": 438872468,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715801602
    },
    {
        "content": "<p>I can look into either incorporating this information on the webpage or prepare a bot that posts on Zulip.</p>",
        "id": 438872513,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715801630
    },
    {
        "content": "<p>Even if we decide to post somewhere else, probably testing it in-house is a good idea.</p>",
        "id": 438872593,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715801646
    },
    {
        "content": "<p>In particular, I think that longest pole/longest file(s)/longest proof(s) would be a good candidate for addition to the stats page rather than a  feed, since those ones are less of a \"here are new updates you might want to be made aware of\" and more of a \"long-running performance metrics we would like to track and optimize\"</p>",
        "id": 438876566,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715803371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/438855660\">said</a>:</p>\n<blockquote>\n<p>I can't seem to add options to the pole? I meant to add <code>Slowest proofs</code> and <code>Slowest files</code></p>\n</blockquote>\n<p>Now I can! Please move your reacts from my message to the poll <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 438876804,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715803475
    },
    {
        "content": "<p>I believe we should differentiate between:</p>\n<ul>\n<li>sexy statistics to boast mathlib</li>\n<li>gory statistics for people like Matthew or I trying to get mathlib faster/more organised</li>\n</ul>",
        "id": 438876986,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715803553
    },
    {
        "content": "<p>Another option that I think has been suggested for longest pole is to include it in the speed center report somehow</p>",
        "id": 438877449,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715803735
    },
    {
        "content": "<p>In terms of differentiating, my initial idea was to have a (weekly according to the poll) feed that would report on one or two statistics on Zulip.  I like the idea of advertising elsewhere, and I think that we should do it.  I also agree that I would likely post different statistics on the two places.</p>",
        "id": 438877902,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715803938
    },
    {
        "content": "<p>I hope that this is how people voted above -- those are statistics that a bot would post weekly in a dedicated stream on Zulip.  Feel free to change your answer, if this is not what you had intended!</p>",
        "id": 438878004,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715803989
    },
    {
        "content": "<p>I think that a little bit of testing of this model before we make another poll for a \"public\" posting is probably advisable.</p>",
        "id": 438878058,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715804019
    },
    {
        "content": "<p>You could also add links from the statistics page above to the speed center and to wherever stats are posted, so that it's easier to randomly stumble across them</p>",
        "id": 438885264,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715807049
    },
    {
        "content": "<p>Also, while I take the point that the longest pole is not exactly great at being outward-facing, there is something sexy about knowing that \"The ring of integers of a number field generated by a 5th-root of unity cyclotomic extension of the rationals is a principal ideal ring\" is the deepest theorem we have been able to prove in the library.</p>",
        "id": 438909068,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715820323
    },
    {
        "content": "<p>Except that people who like theorem X should be trying to make sure that X is <em>not</em> the longest pole. :-)</p>",
        "id": 438910613,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715821645
    },
    {
        "content": "<p>And where \"deepest\" here could instead mean \"least effort has been put into streamlining the dependencies\"!</p>",
        "id": 438910688,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715821698
    },
    {
        "content": "<p>Or it could mean \"streamlining is at the expense of this theorem because the fewest people care about it\". I think a fair bit of streamlining is subjective and optimizes the bits current contributors care about at the expense of bits they don't (which is good, but not necessarily stable)</p>",
        "id": 438920921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715828333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/438920921\">said</a>:</p>\n<blockquote>\n<p>I think a fair bit of streamlining is subjective and optimizes the bits current contributors care about at the expense of bits they don't</p>\n</blockquote>\n<p>I doubt that's actually true in practice. The library is currently so underoptimised that any streamlining is good. Maybe in a few months once I've reasonably straightened out the imports the situation will be different, but right now I can't see any streamlining being bad to some files.</p>",
        "id": 438934172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715835404
    },
    {
        "content": "<p>The fact that the integers of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mn>5</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\zeta_5)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> are a PID is a nontrivial result, needing inputs from both algebra and analysis, so maybe it deserves to be the longest pole</p>",
        "id": 438955264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715843705
    },
    {
        "content": "<p>Note that the proof is <em>very</em> close to the math proof (it is indeed quite short, and fast). To be honest I don't see anything wrong with it (for example we can avoid the Minkowski bound and make the proof more direct, but I don't see the point in doing it).</p>",
        "id": 438967368,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1715848303
    },
    {
        "content": "<p>I think the point is that we're seeing that this proof depends on a lot of prior work, and the question is whether this complexity is inherent or accidental - and it seems like it's inherent</p>",
        "id": 438967649,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715848412
    },
    {
        "content": "<p>But it's worth asking the question</p>",
        "id": 438967685,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715848429
    },
    {
        "content": "<p>I was referring more to the 4/5th of the longest pole leading up to the result that you wouldn't immediately notice have anything to do with it</p>",
        "id": 438967693,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715848434
    },
    {
        "content": "<p>The proof itself can be inherently complex, and still have way too much stuff transitively imported into it.</p>",
        "id": 438967815,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715848472
    },
    {
        "content": "<p>(Speaking of splitting, maybe someone should split this thread)</p>",
        "id": 438969132,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715848960
    },
    {
        "content": "<p>I have started looking into preparing a summary of the weekly increase.  Below is a first draft: please, feel free to comment on what you like, dislike, would like to add!</p>",
        "id": 439014807,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715864375
    },
    {
        "content": "<hr>\n<h2>Weekly stats (2024-05-09 2024-05-16)</h2>\n<p>615 files changed, 13859 insertions(+), 5864 deletions(-), 7995 total(insertions-deletions)</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: right;\">%</th>\n<th style=\"text-align: left;\">Folder</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: right;\">4.3%</td>\n<td style=\"text-align: left;\"><code>Mathlib/Algebra/CharP/</code></td>\n</tr>\n<tr>\n<td style=\"text-align: right;\">4.3%</td>\n<td style=\"text-align: left;\"><code>Mathlib/Algebra/Group/</code></td>\n</tr>\n<tr>\n<td style=\"text-align: right;\">11.8%</td>\n<td style=\"text-align: left;\"><code>Mathlib/Algebra/</code></td>\n</tr>\n<tr>\n<td style=\"text-align: right;\">3.1%</td>\n<td style=\"text-align: left;\"><code>Mathlib/Analysis/</code></td>\n</tr>\n<tr>\n<td style=\"text-align: right;\">11.1%</td>\n<td style=\"text-align: left;\"><code>Mathlib/CategoryTheory/</code></td>\n</tr>\n<tr>\n<td style=\"text-align: right;\">5.3%</td>\n<td style=\"text-align: left;\"><code>Mathlib/Data/</code></td>\n</tr>\n<tr>\n<td style=\"text-align: right;\">3.0%</td>\n<td style=\"text-align: left;\"><code>Mathlib/MeasureTheory/Measure/</code></td>\n</tr>\n<tr>\n<td style=\"text-align: right;\">3.6%</td>\n<td style=\"text-align: left;\"><code>Mathlib/NumberTheory/LSeries/</code></td>\n</tr>\n<tr>\n<td style=\"text-align: right;\">3.4%</td>\n<td style=\"text-align: left;\"><code>Mathlib/NumberTheory/</code></td>\n</tr>\n<tr>\n<td style=\"text-align: right;\">8.7%</td>\n<td style=\"text-align: left;\"><code>Mathlib/RingTheory/Ideal/</code></td>\n</tr>\n<tr>\n<td style=\"text-align: right;\">6.8%</td>\n<td style=\"text-align: left;\"><code>Mathlib/RingTheory/</code></td>\n</tr>\n<tr>\n<td style=\"text-align: right;\">10.1%</td>\n<td style=\"text-align: left;\"><code>Mathlib/Tactic/CC/</code></td>\n</tr>\n<tr>\n<td style=\"text-align: right;\">3.5%</td>\n<td style=\"text-align: left;\"><code>Mathlib/Topology/</code></td>\n</tr>\n<tr>\n<td style=\"text-align: right;\">16.9%</td>\n<td style=\"text-align: left;\"><code>Mathlib/</code></td>\n</tr>\n</tbody>\n</table>\n<p>commits: old fa33d89fc6, current 71f93293db.</p>\n<p>Take also a look at the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\"><code>Mathlib</code> stats page</a>.</p>",
        "id": 439014824,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715864379
    },
    {
        "content": "<p>What does the number in the <code>%</code> column mean?</p>",
        "id": 439015697,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1715864637
    },
    {
        "content": "<p>I'm not sure, but I think that it is the percentage of change, according to git?  The \"% graph\" is the output of <code>git diff --dirstat \"${commit}\"...HEAD</code>.</p>",
        "id": 439016042,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715864743
    },
    {
        "content": "<p>I found out about this by scavenging the git invocations, looking for \"insertions and deletions\".  Someone on the internet mentioned <code>--dirstat</code> and it looked cool!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 439016248,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715864808
    },
    {
        "content": "<p>From the git manual:<br>\n--dirstat[=&lt;param1,param2,…​&gt;]</p>\n<p>Output the distribution of relative amount of changes for each sub-directory. The behavior of <code>--dirstat</code> can be customized...</p>",
        "id": 439016502,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715864889
    },
    {
        "content": "<p>I guess that it is saying that <del>16</del>17% of mathlib changed in the last week?  <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 439016630,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715864935
    },
    {
        "content": "<p>So most likely those 17% reflect some large refactors of low level stuff, or changes of the names of lemmas used everywhere, rather than new things added to mathlib?<br>\nI am trying to see if that stat is actually meaningful.</p>",
        "id": 439017099,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1715865083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439014824\">said</a>:</p>\n<blockquote>\n<p>Take also a look at the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\"><code>Mathlib</code> stats page</a>.</p>\n</blockquote>\n<p>Is the recent part of the mathlib3 graph still relevant? Presumably the points after July 16, 2023 could be dropped?</p>",
        "id": 439017285,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1715865133
    },
    {
        "content": "<p>Yeah, I am also trying to figure out what it means.  Mathlib has 1,477,829 lines...</p>",
        "id": 439017301,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715865137
    },
    {
        "content": "<p>...and 13,859 is not really close to 17%.</p>",
        "id": 439017431,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715865180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439017285\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439014824\">said</a>:</p>\n<blockquote>\n<p>Take also a look at the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\"><code>Mathlib</code> stats page</a>.</p>\n</blockquote>\n<p>Is the recent part of the mathlib3 graph still relevant? Presumably the stuff after July 16, 2023 could be dropped?</p>\n</blockquote>\n<p>Yes, as the graph shows, mathlib3 became essentially obsolete as soon as the port was finished.  I do not maintain that web-page though.</p>",
        "id": 439017722,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715865256
    },
    {
        "content": "<p>Back to the percentages: since it is a default option that git gives, I imagine that it has its reason of being, however I do not really know what it is.  Unless someone is in favour of keeping it, I may as well drop it.</p>",
        "id": 439018132,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715865365
    },
    {
        "content": "<p>(Note that I am also planning to add the number of declarations to the first actual implementation, I just began with what did not require interacting simultaneously with the shell and lean in CI as a first attempt.)</p>",
        "id": 439018287,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715865418
    },
    {
        "content": "<p>The sum of all the percentages is 95.9, which may mean that this is explaining how the 13859 addition are spread across folders, where <code>Mathlib</code> presumably means \"everything that was not accounted before\".</p>",
        "id": 439018886,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715865618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439017431\">said</a>:</p>\n<blockquote>\n<p>...and 13,859 is not really close to 17%.</p>\n</blockquote>\n<p>Is it not 17% of the files?</p>",
        "id": 439034074,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715869889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439014824\">said</a>:</p>\n<blockquote>\n<p>commits: old fa33d89fc6, current 71f93293db.</p>\n</blockquote>\n<p>Can you make the commit hashes be links to the commits on github?</p>",
        "id": 439034174,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715869922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439034074\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439017431\">said</a>:</p>\n<blockquote>\n<p>...and 13,859 is not really close to 17%.</p>\n</blockquote>\n<p>Is it not 17% of the files?</p>\n</blockquote>\n<p>This could be.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439034174\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439014824\">said</a>:</p>\n<blockquote>\n<p>commits: old fa33d89fc6, current 71f93293db.</p>\n</blockquote>\n<p>Can you make the commit hashes be links to the commits on github?</p>\n</blockquote>\n<p>This should be easy, yes!</p>",
        "id": 439034694,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715870060
    },
    {
        "content": "<p>i'm curious if a \"top n merged PRs by diff size\" might be informative?</p>",
        "id": 439086385,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1715887277
    },
    {
        "content": "<p>i imagine this might highlight important changes/additions</p>",
        "id": 439086600,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1715887362
    },
    {
        "content": "<p>Depending on how you count, they might all be Yaël moving things</p>",
        "id": 439104630,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715894875
    },
    {
        "content": "<p>Here is another proposal: what do you think of this report?</p>",
        "id": 439330713,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716013504
    },
    {
        "content": "<hr>\n<h2>Weekly stats (2024-05-11 2024-05-18)</h2>\n<p>Reference commits: old <a href=\"https://github.com/leanprover-community/mathlib4/commit/3d4137543f4037209512bec880f240254d8aad78\">3d4137543f</a>, new <a href=\"https://github.com/leanprover-community/mathlib4/commit/712ef83de510992c182a0fcf289ab2a2e496ac28\">712ef83de5</a>.</p>\n<p>987 files changed, 19810 insertions(+), 11144 deletions(-), 8666 total(insertions-deletions)</p>\n<p>Declarations:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center;\">Type</th>\n<th style=\"text-align: center;\">New</th>\n<th style=\"text-align: center;\">Old</th>\n<th style=\"text-align: center;\">Change</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\">Definitions</td>\n<td style=\"text-align: center;\">73624</td>\n<td style=\"text-align: center;\">73161</td>\n<td style=\"text-align: center;\">463</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Theorems</td>\n<td style=\"text-align: center;\">231138</td>\n<td style=\"text-align: center;\">230101</td>\n<td style=\"text-align: center;\">1037</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Inductives</td>\n<td style=\"text-align: center;\">2451</td>\n<td style=\"text-align: center;\">2430</td>\n<td style=\"text-align: center;\">21</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Other</td>\n<td style=\"text-align: center;\">6148</td>\n<td style=\"text-align: center;\">6080</td>\n<td style=\"text-align: center;\">68</td>\n</tr>\n</tbody>\n</table>\n<p>Take also a look at the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\"><code>Mathlib</code> stats page</a>.</p>",
        "id": 439330718,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716013506
    },
    {
        "content": "<p>For an internal report, I think that's nice. For an external report, I guess many people will be confused about why \"Inductives\" is an entry.</p>",
        "id": 439335389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716018168
    },
    {
        "content": "<p>Yes, I was aiming to produce a report for Zulip, test it a little and then upgrade it to an \"external\" report.</p>",
        "id": 439346765,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716030338
    },
    {
        "content": "<p>I'm not sure counting inductives is interesting; <code>def MulOpposite X := X</code> is not really any different to <code>structure MulOpposite where val : X</code></p>",
        "id": 439346988,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716030556
    },
    {
        "content": "<p>I think the interesting counts are maybe:</p>\n<ul>\n<li>Things in <code>Sort _</code> (types / predicates)</li>\n<li>Things in <code>P</code> where <code>P : Prop</code> (theorems)</li>\n<li>Everything else (data)</li>\n</ul>",
        "id": 439347095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716030635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, is this the distinction that you had in mind?  The <code>ConstantInfo</code>:</p>\n<ul>\n<li>does not have a <code>value</code>;</li>\n<li>has a <code>value</code> whose type is <code>Prop</code>;</li>\n<li>has a <code>value</code> whose type is <code>Type _</code>.</li>\n</ul>",
        "id": 439350740,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716034262
    },
    {
        "content": "<p>I don't think the \"has a value\" is interesting, even things without a value (opaque, axiom) still have a type?</p>",
        "id": 439351154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716034790
    },
    {
        "content": "<p><code>defnInfo</code> and <code>thmInfo</code> have a <code>value</code>, all other <code>ConstantInfo</code>s do not.</p>",
        "id": 439351269,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716034884
    },
    {
        "content": "<p>(Though they still have a <code>type</code>.)</p>",
        "id": 439351271,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716034898
    },
    {
        "content": "<p>To be precise, I was thinking of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ConstantInfo.value%3F#doc\">docs#Lean.ConstantInfo.value?</a></p>",
        "id": 439351325,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716034933
    },
    {
        "content": "<p>I think just look at <code>type</code>?</p>",
        "id": 439351624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716035269
    },
    {
        "content": "<p>New contributors, total?</p>",
        "id": 439351940,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716035612
    },
    {
        "content": "<p>So,</p>\n<ul>\n<li><code>inferType type = Prop</code> =&gt; Theorem</li>\n<li><code>inferType type = Type _</code> =&gt; types/predicates</li>\n<li>everything else =&gt; data?</li>\n</ul>",
        "id": 439352181,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716035878
    },
    {
        "content": "<p>To detect types/ predicates you need to first introduce all the binders</p>",
        "id": 439353610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716037372
    },
    {
        "content": "<p>Your first bullet is correct</p>",
        "id": 439353623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716037385
    },
    {
        "content": "<p>Oh, let me try once more!</p>\n<ul>\n<li><code>inferType type = Prop</code> =&gt; Theorem</li>\n<li><del><code>inferType</code></del> <code>(whatever MetaTelescope type gives) = Sort _</code> =&gt; types/predicates</li>\n<li>everything else =&gt; data?</li>\n</ul>",
        "id": 439353742,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716037519
    },
    {
        "content": "<p>I think bullet two should not have an infertype</p>",
        "id": 439354199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716037954
    },
    {
        "content": "<p>updated the above.  I'll try to implement it!</p>",
        "id": 439354229,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716037998
    },
    {
        "content": "<p>Should be <code>= Sort _</code> too, but otherwise looks good!</p>",
        "id": 439354256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716038029
    },
    {
        "content": "<p>Ok, updated the above!</p>",
        "id": 439354368,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716038126
    },
    {
        "content": "<p>Here is the current iteration, with the tally as suggested by Eric:</p>",
        "id": 439356899,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716040477
    },
    {
        "content": "<hr>\n<h2>Weekly stats (2024-05-11 2024-05-18)</h2>\n<p>Reference commits: old <a href=\"https://github.com/leanprover-community/mathlib4/commit/82af17d1e5991b20817f74aef162f13c3504d77d\">82af17d1e5</a>, new <a href=\"https://github.com/leanprover-community/mathlib4/commit/964b14278e2e23ec57e1c0d18d4466dd0d72e16c\">964b14278e</a>.</p>\n<p>843 files changed, 19601 insertions(+), 11029 deletions(-), 8572 total(insertions-deletions)</p>\n<p>Declarations:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center;\">Type</th>\n<th style=\"text-align: center;\">New</th>\n<th style=\"text-align: center;\">Old</th>\n<th style=\"text-align: center;\">Change</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\">Theorems</td>\n<td style=\"text-align: center;\">246865</td>\n<td style=\"text-align: center;\">245737</td>\n<td style=\"text-align: center;\">1128</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Types/predicates</td>\n<td style=\"text-align: center;\">7649</td>\n<td style=\"text-align: center;\">7589</td>\n<td style=\"text-align: center;\">60</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Other</td>\n<td style=\"text-align: center;\">58879</td>\n<td style=\"text-align: center;\">58486</td>\n<td style=\"text-align: center;\">393</td>\n</tr>\n</tbody>\n</table>\n<p>Take also a look at the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\"><code>Mathlib</code> stats page</a>.</p>",
        "id": 439356902,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716040480
    },
    {
        "content": "<p>So what does \"Other\" actually contain?</p>",
        "id": 439357027,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716040583
    },
    {
        "content": "<p>Do you want to see some example?  If I did not mess up, I implemented the suggestion that Eric proposed.</p>",
        "id": 439357045,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716040614
    },
    {
        "content": "<p>It seems mostly garbage.<br>\nThis is a random sample from the middle of <code>other</code> in <code>Mathlib.Data.Nat.Defs</code> or below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Set.</span><span class=\"bp\">«</span><span class=\"n\">term</span><span class=\"o\">{</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">}</span><span class=\"n\">_1</span><span class=\"bp\">»</span>\n<span class=\"n\">Lean.Expr.isExplicitNumber</span>\n<span class=\"n\">Preorder.toLT</span>\n<span class=\"n\">Mathlib.getMathlibDir</span>\n<span class=\"n\">Simps.zsmulArgs</span>\n<span class=\"n\">ToAdditive.proceedFields</span>\n<span class=\"n\">Simps.elabSimpsRule</span>\n<span class=\"n\">Lean.Parser.Command.simpsRule</span>\n<span class=\"n\">Mathlib.Util.</span><span class=\"bp\">«</span><span class=\"n\">commandCompile_def</span><span class=\"bp\">%</span><span class=\"n\">_</span><span class=\"bp\">»</span>\n<span class=\"n\">instTransGeGt_mathlib</span>\n<span class=\"n\">Function.</span><span class=\"bp\">«</span><span class=\"n\">term</span><span class=\"bp\">↿</span><span class=\"n\">_</span><span class=\"bp\">»</span>\n<span class=\"n\">Simps.ParsedProjectionData.isPrefix</span>\n<span class=\"n\">ToAdditive.addToAdditiveAttr</span>\n<span class=\"n\">Function.extend</span>\n<span class=\"n\">Nat.leRecOn</span>\n<span class=\"n\">Lean.Meta.simpType</span>\n<span class=\"n\">to_additive_relevant_arg</span>\n<span class=\"n\">Mathlib.Prelude.Rename.align.precheck</span>\n<span class=\"n\">Classical.decRel</span>\n<span class=\"n\">ToAdditive.relevantArgAttr</span>\n<span class=\"n\">Lean.MVarId.gcongr</span>\n<span class=\"n\">Mathlib.Tactic.PushNeg.elabPushNegConv</span>\n<span class=\"n\">Parser.Attr.qify_simps_proc</span>\n<span class=\"n\">Trans.simple</span>\n<span class=\"n\">Mathlib.Notation.unexpandExistsUnique</span>\n<span class=\"n\">Nat.decidableLoHiLe</span>\n<span class=\"n\">Lean.Parser.Attr.attrSimps</span><span class=\"bp\">?</span><span class=\"n\">_</span>\n<span class=\"n\">Mathlib.Tactic.tacticTransitivity___</span>\n<span class=\"n\">Set.instSDiff</span>\n<span class=\"n\">Classical.decPred</span>\n<span class=\"n\">Mathlib.Tactic.tacticAssumption'</span>\n<span class=\"n\">One.toOfNat1</span>\n<span class=\"n\">ToAdditive.warnParametricAttr</span>\n<span class=\"n\">Simps.instInhabitedAutomaticProjectionData</span>\n<span class=\"n\">Simps.findAutomaticProjections</span>\n<span class=\"n\">Mathlib.Tactic.variables</span>\n<span class=\"n\">Simps.ProjectionRule.rename</span>\n<span class=\"n\">Nat.strongRec'</span>\n<span class=\"n\">Mathlib.Prelude.Rename.RenameMap.insert</span>\n<span class=\"n\">Mathlib.ProjectionNotation.mkExtendedFieldNotationUnexpander</span>\n<span class=\"n\">ToAdditive.applyReplacementFun.aux</span>\n</code></pre></div>",
        "id": 439357208,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716040774
    },
    {
        "content": "<p>They are all definitions, right?</p>",
        "id": 439357346,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716040886
    },
    {
        "content": "<p>It seems like it.  I wonder whether my code is not discriminating correctly.</p>",
        "id": 439357543,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716041055
    },
    {
        "content": "<p>This is what I am using, with hopefully clear names:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isProp</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">thms</span> <span class=\"o\">:=</span> <span class=\"n\">s.thms</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">forallTelescopeReducing</span> <span class=\"n\">type</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e.isSort</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">typesPreds</span> <span class=\"o\">:=</span> <span class=\"n\">s.typesPreds</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">other</span> <span class=\"o\">:=</span> <span class=\"n\">s.other</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 439357613,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716041134
    },
    {
        "content": "<p>I wonder whether the <code>other</code> field</p>\n<ul>\n<li>should be dropped, as it is junk;</li>\n<li>has interesting first difference, in that there is a lot of junk at the beginning, but (almost) everything that gets added week by week is interesting.</li>\n</ul>",
        "id": 439358096,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716041537
    },
    {
        "content": "<p>Yes, I think \"other\" is \"data\"</p>",
        "id": 439358131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716041576
    },
    {
        "content": "<p>And \"predicate\" should probably have been \"propositions\"</p>",
        "id": 439358156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716041598
    },
    {
        "content": "<p>So, should I simply label it by <code>data</code> and be happy with it?</p>",
        "id": 439358166,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716041609
    },
    {
        "content": "<p>Or \"definitions\"</p>",
        "id": 439358182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716041632
    },
    {
        "content": "<p><code>propositions</code> has a possibly ambiguous meaning for mathematicians, as in \"lemma, theorem, proposition\".</p>",
        "id": 439358186,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716041638
    },
    {
        "content": "<p>Data is junk! You've heard it here first <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 439358221,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716041660
    },
    {
        "content": "<p>So, it may be good for this Zulip to say <code>proposition</code>, but for the external tally, I would not use propositions where theorems is also used.</p>",
        "id": 439358236,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716041692
    },
    {
        "content": "<p>You could also split propositions (<code>Sort 0</code>) and types (everything else), though maybe those counts are too small</p>",
        "id": 439358242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716041701
    },
    {
        "content": "<p>Ok, I'll produce the finer splitting.</p>",
        "id": 439358326,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716041764
    },
    {
        "content": "<p>Some possible reasons that the stats page disagrees about theorems:</p>\n<ul>\n<li>It might be omitting internal theorems, like equation lemmas</li>\n<li>It might be counting all <code>instance</code>s as definitions</li>\n</ul>",
        "id": 439358381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716041811
    },
    {
        "content": "<p>The commits are possibly also different.</p>",
        "id": 439358400,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716041837
    },
    {
        "content": "<p>Not 100k theorems different I would hope</p>",
        "id": 439358427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716041858
    },
    {
        "content": "<p>I also filter out non-mathlib files and I screen for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">if</span> <span class=\"n\">c.isUnsafe</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">n.isBlackListed</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">s</span> <span class=\"k\">else</span>\n</code></pre></div>",
        "id": 439358433,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716041866
    },
    {
        "content": "<p>I think including core and std is probably interesting; most mathlib users don't care whether a lemma is in mathlib/batteries/core, just that it's available with <code>import Mathlib</code></p>",
        "id": 439358512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716041904
    },
    {
        "content": "<p>I think that a reasonable count should contain results that have either an actual syntax or \"should\" (such as <code>to_additive</code> generated stuff).</p>",
        "id": 439358555,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716041949
    },
    {
        "content": "<p>Yes, <code>to_additive</code> and <code>simps</code> lemmas are worth counting</p>",
        "id": 439358634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716042006
    },
    {
        "content": "<p>Ok, should I then include all declarations, not just the ones in mathlib?  (The difference will hardly notice the difference, I imagine).</p>",
        "id": 439358677,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716042049
    },
    {
        "content": "<p>The refined count with Mathlib only:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Theorems</span> <span class=\"mi\">157759</span>\n<span class=\"n\">Types</span> <span class=\"mi\">1492</span>\n<span class=\"n\">Predicates</span> <span class=\"mi\">3731</span>\n<span class=\"n\">Other</span> <span class=\"mi\">37490</span>\n</code></pre></div>\n<p>and with all declarations in the environment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Theorems</span> <span class=\"mi\">167953</span>\n<span class=\"n\">Types</span> <span class=\"mi\">3325</span>\n<span class=\"n\">Predicates</span> <span class=\"mi\">4148</span>\n<span class=\"n\">Other</span> <span class=\"mi\">60099</span>\n</code></pre></div>",
        "id": 439359050,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716042375
    },
    {
        "content": "<p>Oh, I forgot to rename <code>Other</code> to <code>Data</code>!</p>",
        "id": 439359094,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716042428
    },
    {
        "content": "<p>... and finally, screening out only <code>unsafe</code>, but keeping all blacklisted declarations, in std, core or mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Theorems</span> <span class=\"mi\">262537</span>\n<span class=\"n\">Types</span> <span class=\"mi\">3431</span>\n<span class=\"n\">Predicates</span> <span class=\"mi\">8053</span>\n<span class=\"n\">Data</span> <span class=\"mi\">106992</span>\n</code></pre></div>",
        "id": 439359210,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716042547
    },
    {
        "content": "<p>Here is what it seems that the discussion is converging to:</p>",
        "id": 439360381,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716043660
    },
    {
        "content": "<hr>\n<h2>Weekly stats (2024-05-11 2024-05-18)</h2>\n<p>Reference commits: old <a href=\"https://github.com/leanprover-community/mathlib4/commit/311c57e763368176a19af895c8a4a6ec1bcab3cc\">311c57e763</a>, new <a href=\"https://github.com/leanprover-community/mathlib4/commit/53364710b45b6e223ccb0a720e59c422a05dff1a\">53364710b4</a>.</p>\n<p>844 files changed, 19661 insertions(+), 11032 deletions(-), 8629 total(insertions-deletions)</p>\n<p>Declarations:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center;\">Type</th>\n<th style=\"text-align: center;\">New</th>\n<th style=\"text-align: center;\">Old</th>\n<th style=\"text-align: center;\">Change</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\">Theorems</td>\n<td style=\"text-align: center;\">168051</td>\n<td style=\"text-align: center;\">167286</td>\n<td style=\"text-align: center;\">765</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Types</td>\n<td style=\"text-align: center;\">3325</td>\n<td style=\"text-align: center;\">3317</td>\n<td style=\"text-align: center;\">8</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Predicates</td>\n<td style=\"text-align: center;\">4150</td>\n<td style=\"text-align: center;\">4117</td>\n<td style=\"text-align: center;\">33</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Data</td>\n<td style=\"text-align: center;\">60106</td>\n<td style=\"text-align: center;\">59820</td>\n<td style=\"text-align: center;\">286</td>\n</tr>\n</tbody>\n</table>\n<p>Take also a look at the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\"><code>Mathlib</code> stats page</a>.</p>",
        "id": 439360384,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716043664
    },
    {
        "content": "<p>Any further comments/additions?  Would having a total for each column of the table be better?  Worse?</p>",
        "id": 439360516,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716043787
    },
    {
        "content": "<p>All those numbers are rather difficult to read because there is no separation between groups of three digits.</p>",
        "id": 439360518,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716043790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439360518\">said</a>:</p>\n<blockquote>\n<p>All those numbers are rather difficult to read because there is no separation between groups of three digits.</p>\n</blockquote>\n<p>Ah, let me take care of that!</p>",
        "id": 439360582,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716043816
    },
    {
        "content": "<p>Also I think you should emphasize that theorems are to predicates what data is to types. What about ordering the rows as \"Theorems, Data, Predicates, Types\"?</p>",
        "id": 439360647,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716043905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439360516\">said</a>:</p>\n<blockquote>\n<p>Would having a total for each column of the table be better?</p>\n</blockquote>\n<p>I think it does not really matter since the different quantities are not really commensurable</p>",
        "id": 439360716,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716043950
    },
    {
        "content": "<p>Perhaps it would be better to have <code>Type | New | Change | Percentage</code>. It's not particularly meaningful to compare a number like 168051 to 167286.</p>",
        "id": 439361047,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1716044250
    },
    {
        "content": "<p>With thousands separator and Yaël reordered:</p>",
        "id": 439361119,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716044293
    },
    {
        "content": "<hr>\n<h2>Weekly stats (2024-05-11 2024-05-18)</h2>\n<p>Reference commits: old <a href=\"https://github.com/leanprover-community/mathlib4/commit/311c57e763368176a19af895c8a4a6ec1bcab3cc\">311c57e763</a>, new <a href=\"https://github.com/leanprover-community/mathlib4/commit/53364710b45b6e223ccb0a720e59c422a05dff1a\">53364710b4</a>.</p>\n<p>844 files changed, 19661 insertions(+), 11032 deletions(-), 8629 total(insertions-deletions)</p>\n<p>Declarations:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center;\">Type</th>\n<th style=\"text-align: center;\">New</th>\n<th style=\"text-align: center;\">Old</th>\n<th style=\"text-align: center;\">Change</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\">Theorems</td>\n<td style=\"text-align: center;\">168,051</td>\n<td style=\"text-align: center;\">167,286</td>\n<td style=\"text-align: center;\">765</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Data</td>\n<td style=\"text-align: center;\">60,106</td>\n<td style=\"text-align: center;\">59,820</td>\n<td style=\"text-align: center;\">286</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Predicates</td>\n<td style=\"text-align: center;\">4,150</td>\n<td style=\"text-align: center;\">4,117</td>\n<td style=\"text-align: center;\">33</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Types</td>\n<td style=\"text-align: center;\">3,325</td>\n<td style=\"text-align: center;\">3,317</td>\n<td style=\"text-align: center;\">8</td>\n</tr>\n</tbody>\n</table>\n<p>Take also a look at the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\"><code>Mathlib</code> stats page</a>.</p>",
        "id": 439361122,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716044295
    },
    {
        "content": "<p>That's very pretty as the bigger numbers are now on the top</p>",
        "id": 439361156,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716044346
    },
    {
        "content": "<p>Ok, the latest request is to have a percentage instead of/in addition to the <code>Change</code> column: any strong opinions?</p>",
        "id": 439361261,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716044414
    },
    {
        "content": "<p>Regarding the first line, I think you should link to <a href=\"https://github.com/leanprover-community/mathlib4/compare/311c57e763368176a19af895c8a4a6ec1bcab3cc...53364710b45b6e223ccb0a720e59c422a05dff1a\">https://github.com/leanprover-community/mathlib4/compare/311c57e763368176a19af895c8a4a6ec1bcab3cc...53364710b45b6e223ccb0a720e59c422a05dff1a</a></p>",
        "id": 439361303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716044453
    },
    {
        "content": "<p>(If not, I will simply add another column with the percentage.)</p>",
        "id": 439361306,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716044454
    },
    {
        "content": "<p>I think Richard wanted to remove the Old column instead. Personally, I think you should just add a new column</p>",
        "id": 439361309,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716044460
    },
    {
        "content": "<p>Oh, I misunderstood.  I'll definitely add a percentage column.  As to removing the <code>Old</code> one... don't particularly care, but maybe would keep it and try this format for a bit?</p>",
        "id": 439361416,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716044534
    },
    {
        "content": "<p>I don't mind keeping the old column either.</p>",
        "id": 439361421,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1716044543
    },
    {
        "content": "<p>It would be cool to represent the <code>change</code> column as <code>+X -Y</code>; even if the matching is just by name</p>",
        "id": 439361436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716044574
    },
    {
        "content": "<p>I also think the Old column is not very useful.</p>",
        "id": 439361465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716044607
    },
    {
        "content": "<p>Does this track when declarations move files? Or are those considered new declarations?</p>",
        "id": 439361610,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1716044725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439361436\">said</a>:</p>\n<blockquote>\n<p>It would be cool to represent the <code>change</code> column as <code>+X -Y</code>; even if the matching is just by name</p>\n</blockquote>\n<p>For this, I would have to restructure the code a bit, since currently I am just tallying the numbers, not recording the declaration names.</p>",
        "id": 439361627,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716044746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560559\">Richard Osborn</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439361610\">said</a>:</p>\n<blockquote>\n<p>Does this track when declarations move files? Or are those considered new declarations?</p>\n</blockquote>\n<p>No, this is just tracking numbers of declarations, it is not doing anything with file names, nor even with declaration names.  I loop over the declarations, classify them and maintain a tally of the types.</p>",
        "id": 439361768,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716044852
    },
    {
        "content": "<p>This could still be useful to track the \"largest\" PRs that aren't primarily organizational in nature (which touch many lines of code, but do not change the total number of declarations).</p>",
        "id": 439362037,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1716045078
    },
    {
        "content": "<p>There is already some automation for that with the <code>move-decls</code> label.</p>",
        "id": 439362250,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716045245
    },
    {
        "content": "<p>Once the comments settle, I can look into storing <code>HashSet</code>s of names of declarations, so that the <code>+X -Y</code> column could exist.</p>",
        "id": 439362295,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716045316
    },
    {
        "content": "<p>In the meantime:</p>",
        "id": 439362320,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716045343
    },
    {
        "content": "<hr>\n<h2>Weekly stats (2024-05-11 2024-05-18)</h2>\n<p>Reference commits: old <a href=\"https://github.com/leanprover-community/mathlib4/commit/4dffa6dc6e0f2f1959a710c92b4f23b325dc7fd2\">4dffa6dc6e</a>, new <a href=\"https://github.com/leanprover-community/mathlib4/commit/f9e2c517609645d6b420e6f42a6d025680b8b5b3\">f9e2c51760</a>.</p>\n<p>842 files changed, 19359 insertions(+), 11033 deletions(-), 8326 total(insertions-deletions)</p>\n<p>Declarations:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center;\">Type</th>\n<th style=\"text-align: center;\">New</th>\n<th style=\"text-align: center;\">Change</th>\n<th style=\"text-align: center;\">%</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\">Theorems</td>\n<td style=\"text-align: center;\">168,051</td>\n<td style=\"text-align: center;\">730</td>\n<td style=\"text-align: center;\">0.43%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Data</td>\n<td style=\"text-align: center;\">60,106</td>\n<td style=\"text-align: center;\">283</td>\n<td style=\"text-align: center;\">0.47%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Predicates</td>\n<td style=\"text-align: center;\">4,150</td>\n<td style=\"text-align: center;\">32</td>\n<td style=\"text-align: center;\">0.77%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Types</td>\n<td style=\"text-align: center;\">3,325</td>\n<td style=\"text-align: center;\">8</td>\n<td style=\"text-align: center;\">0.24%</td>\n</tr>\n</tbody>\n</table>\n<p>Take also a look at the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\"><code>Mathlib</code> stats page</a>.</p>",
        "id": 439362323,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716045344
    },
    {
        "content": "<p>I think you could collapse the new and change columns to just \"168 051  (+730)\"</p>",
        "id": 439366000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716048777
    },
    {
        "content": "<p>And then also the % column?</p>",
        "id": 439369936,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716052812
    },
    {
        "content": "<p>I got this to work</p>",
        "id": 439372096,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716055093
    },
    {
        "content": "<hr>\n<h2>Weekly stats (2024-05-11...2024-05-18)</h2>\n<p>Reference commits: old <a href=\"https://github.com/leanprover-community/mathlib4/commit/0e70892cf22954a8d9857e2501437265f100f76e\">0e70892cf2</a>, new <a href=\"https://github.com/leanprover-community/mathlib4/commit/57e4f13b3a884983be9d889144f546e63584fe9b\">57e4f13b3a</a>.</p>\n<p>882 files changed, 19159 insertions(+), 11425 deletions(-), 7734 total(insertions-deletions)</p>\n<p>Declarations:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center;\">Type</th>\n<th style=\"text-align: center;\">New</th>\n<th style=\"text-align: center;\">+-</th>\n<th style=\"text-align: center;\">Change</th>\n<th style=\"text-align: center;\">%</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\">Theorems</td>\n<td style=\"text-align: center;\">168,040</td>\n<td style=\"text-align: center;\">+745 -80</td>\n<td style=\"text-align: center;\">167,375</td>\n<td style=\"text-align: center;\">0.40%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Data</td>\n<td style=\"text-align: center;\">60,303</td>\n<td style=\"text-align: center;\">+307 -20</td>\n<td style=\"text-align: center;\">60,016</td>\n<td style=\"text-align: center;\">0.48%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Predicates</td>\n<td style=\"text-align: center;\">4,150</td>\n<td style=\"text-align: center;\">+31 -2</td>\n<td style=\"text-align: center;\">4,121</td>\n<td style=\"text-align: center;\">0.70%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Types</td>\n<td style=\"text-align: center;\">6,652</td>\n<td style=\"text-align: center;\">+16 -0</td>\n<td style=\"text-align: center;\">6,636</td>\n<td style=\"text-align: center;\">0.24%</td>\n</tr>\n</tbody>\n</table>\n<p>Take also a look at the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\"><code>Mathlib</code> stats page</a>.</p>",
        "id": 439372107,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716055108
    },
    {
        "content": "<p>Change = Old?</p>",
        "id": 439372506,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1716055462
    },
    {
        "content": "<p>Yes, sorry, I had added <code>Change</code> back for testing, this is closer taking into account some of the previous comments:</p>",
        "id": 439372540,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716055511
    },
    {
        "content": "<hr>\n<h2>Weekly stats (2024-05-11...2024-05-18)</h2>\n<p>Reference commits: old <a href=\"https://github.com/leanprover-community/mathlib4/commit/0e70892cf22954a8d9857e2501437265f100f76e\">0e70892cf2</a>, new <a href=\"https://github.com/leanprover-community/mathlib4/commit/57e4f13b3a884983be9d889144f546e63584fe9b\">57e4f13b3a</a>.</p>\n<p>882 files changed, 19159 insertions(+), 11425 deletions(-), 7734 total(insertions-deletions)</p>\n<p>Declarations:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center;\">Type</th>\n<th style=\"text-align: center;\">New</th>\n<th style=\"text-align: center;\">+-</th>\n<th style=\"text-align: center;\">%</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\">Theorems</td>\n<td style=\"text-align: center;\">168,040</td>\n<td style=\"text-align: center;\">+745 -80</td>\n<td style=\"text-align: center;\">0.40%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Data</td>\n<td style=\"text-align: center;\">60,303</td>\n<td style=\"text-align: center;\">+307 -20</td>\n<td style=\"text-align: center;\">0.48%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Predicates</td>\n<td style=\"text-align: center;\">4,150</td>\n<td style=\"text-align: center;\">+31 -2</td>\n<td style=\"text-align: center;\">0.70%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Types</td>\n<td style=\"text-align: center;\">6,652</td>\n<td style=\"text-align: center;\">+16 -0</td>\n<td style=\"text-align: center;\">0.24%</td>\n</tr>\n</tbody>\n</table>\n<p>Take also a look at the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\"><code>Mathlib</code> stats page</a>.</p>",
        "id": 439372545,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716055515
    },
    {
        "content": "<p>As suggested by Mario and Ruben, there could just be two or three columns.  I do not have a preference.</p>",
        "id": 439372606,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716055570
    },
    {
        "content": "<p>Btw, the cache for 0e70892cf2 is corrupted.</p>",
        "id": 439372655,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716055639
    },
    {
        "content": "<p>The name new without old is hard to understand</p>",
        "id": 439389543,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716074449
    },
    {
        "content": "<p>Maybe total is better</p>",
        "id": 439389554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716074464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439361303\">said</a>:</p>\n<blockquote>\n<p>Regarding the first line, I think you should link to <a href=\"https://github.com/leanprover-community/mathlib4/compare/311c57e763368176a19af895c8a4a6ec1bcab3cc...53364710b45b6e223ccb0a720e59c422a05dff1a\">https://github.com/leanprover-community/mathlib4/compare/311c57e763368176a19af895c8a4a6ec1bcab3cc...53364710b45b6e223ccb0a720e59c422a05dff1a</a></p>\n</blockquote>\n<p>Damiano, it looks like you might have missed this comment</p>",
        "id": 439395298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716080647
    },
    {
        "content": "<p>Patrick: I renamed <code>Change</code> to <code>Total</code>-- I agree that it is much better!<br>\nMario: I merged <code>Total</code> and <code>+-</code>.<br>\nEric: I totally missed your suggestion to link to <code>compare</code>!</p>",
        "id": 439402335,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716089285
    },
    {
        "content": "<hr>\n<h2>Weekly stats (<a href=\"https://github.com/leanprover-community/mathlib4/compare/11471621f49e3bd5f63828e41cf204a4ec689042...3015868dac1afc33f1027d8571b1fe90c5a0a2e2\">2024-05-12...2024-05-19</a>)</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center;\">Type</th>\n<th style=\"text-align: center;\">Total</th>\n<th style=\"text-align: center;\">%</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\">Theorems</td>\n<td style=\"text-align: center;\">168,072 (+772 -86)</td>\n<td style=\"text-align: center;\">0.41%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Data</td>\n<td style=\"text-align: center;\">60,129 (+320 -19)</td>\n<td style=\"text-align: center;\">0.50%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Predicates</td>\n<td style=\"text-align: center;\">4,150 (+31 -2)</td>\n<td style=\"text-align: center;\">0.70%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Types</td>\n<td style=\"text-align: center;\">3,325 (+8 -0)</td>\n<td style=\"text-align: center;\">0.24%</td>\n</tr>\n</tbody>\n</table>\n<p>892 files changed, 20516 insertions(+), 12696 deletions(-), 7820 total(insertions-deletions)</p>\n<p>Reference commits: old <a href=\"https://github.com/leanprover-community/mathlib4/commit/11471621f49e3bd5f63828e41cf204a4ec689042\">11471621f4</a>, new <a href=\"https://github.com/leanprover-community/mathlib4/commit/3015868dac1afc33f1027d8571b1fe90c5a0a2e2\">3015868dac</a>.</p>\n<p>Take also a look at the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\"><code>Mathlib</code> stats page</a>.</p>",
        "id": 439402338,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716089292
    },
    {
        "content": "<p>Excuse me for messaging here but what is a \"Longest pole\"? I've seen it mentioned a handful of times.</p>",
        "id": 439416629,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1716102335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256383\">Enrico Borba</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439416629\">said</a>:</p>\n<blockquote>\n<p>Excuse me for messaging here but what is a \"Longest pole\"? I've seen it mentioned a handful of times.</p>\n</blockquote>\n<p><a href=\"#narrow/stream/113488-general/topic/The.20long.20pole.20in.20mathlib\">See this topic</a>. The longest pole is the sequence of files, each of which imports the previous, which has the longest total compile time, and which is therefore the bottleneck for project build time in the limit as the building computer becomes more parallel.</p>",
        "id": 439417539,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1716103361
    },
    {
        "content": "<p>Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">- 892 files changed, 20516 insertions(+), 12696 deletions(-), 7820 total(insertions-deletions)</span>\n<span class=\"gi\">+ 892 files changed, 7820 lines changed (+20516 -12696)</span>\n</code></pre></div>\n<p>is less verbose and still clear?</p>",
        "id": 439431404,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716118098
    },
    {
        "content": "<p><code>+ 892 files changed (+892 -0), 7820 lines changed (+20516 -12696)</code> even?</p>",
        "id": 439431446,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716118188
    },
    {
        "content": "<p>Yaël, what does your <code>(+892 -0)</code> represent?</p>",
        "id": 439438640,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716125433
    },
    {
        "content": "<p>The number of added files and the number of removed files</p>",
        "id": 439439656,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716126308
    },
    {
        "content": "<p>Oh, I see, so a piece of information that was not actually present in the output that I wrote, right?</p>",
        "id": 439439681,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716126333
    },
    {
        "content": "<p>I think the usual git algorithm for the +- numbers would make the + number be added+changed and - is removed+changed</p>",
        "id": 439439892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716126509
    },
    {
        "content": "<p>Ok, I can work with that!</p>",
        "id": 439439949,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716126575
    },
    {
        "content": "<p>Although, does <code>git diff &lt;some annotation&gt;</code> give me that directly?</p>",
        "id": 439439964,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716126592
    },
    {
        "content": "<p>(<code>git diff --name-status</code> gives the information with filenames, but not the tally already)</p>",
        "id": 439440058,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716126652
    },
    {
        "content": "<p>I found <code>--compact-summary</code> but <code>--name-status</code> indeed looks easier to parse</p>",
        "id": 439440233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716126791
    },
    {
        "content": "<p>renames are interesting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">R087</span>    <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">BigOperators</span><span class=\"bp\">/</span><span class=\"n\">List</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>    <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">BigOperators</span><span class=\"bp\">/</span><span class=\"n\">Group</span><span class=\"bp\">/</span><span class=\"n\">List.lean</span>\n</code></pre></div>\n<p>I'm not sure what the <code>087</code> means</p>",
        "id": 439440293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716126844
    },
    {
        "content": "<p>Ok, for simplicity, I am going to produce counts of <code>A+M</code> (added and modified) and <code>D+M</code> (deleted and modified) and will not worry about renames and copies.</p>",
        "id": 439440328,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716126858
    },
    {
        "content": "<p>So, ultimately, report <code>A-D files changed (+(A+M) -(D+M))</code>.</p>",
        "id": 439440399,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716126928
    },
    {
        "content": "<p>maybe <code>A+D+M files changed</code>?</p>",
        "id": 439440525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716127054
    },
    {
        "content": "<p>it's a bit weird for that number to be negative because it doesn't sound like a net value</p>",
        "id": 439440535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716127073
    },
    {
        "content": "<p>Actually, git already has its own heuristic for which numbers of files changed to give: maybe I'll just use that and report <code>(+(A+M) -(D+M))</code> as +-?</p>",
        "id": 439440625,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716127147
    },
    {
        "content": "<p>(I have a feeling that <code>+</code> will be very often equal to what git considers to be the number of files changed, but <code>-</code> may be somewhat different.)</p>",
        "id": 439440856,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716127339
    },
    {
        "content": "<p>E.g. for the two commits that I was using as a test, I get these numbers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">92</span> <span class=\"n\">files</span> <span class=\"n\">changed</span><span class=\"o\">,</span> <span class=\"mi\">1711</span> <span class=\"n\">insertions</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"mi\">544</span> <span class=\"n\">deletions</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">92</span> <span class=\"bp\">-</span><span class=\"mi\">85</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I suspect that the coincidence of <code>92</code> is very stable, but we'll see!</p>",
        "id": 439440951,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716127409
    },
    {
        "content": "<p>hm, it seems hard to see when a deletion happens though, it would be nice to see that... sorry for waffling but maybe <code>(+A -D ~M)</code> would be better</p>",
        "id": 439441159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716127595
    },
    {
        "content": "<p>where a rename counts as A+D</p>",
        "id": 439441189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716127617
    },
    {
        "content": "<p>Sure, this is very easy to do.</p>",
        "id": 439441210,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716127629
    },
    {
        "content": "<p>In the previous example, I get these numbers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">7</span> <span class=\"bp\">-</span><span class=\"mi\">0</span> <span class=\"bp\">~</span><span class=\"mi\">85</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which indeed is probably a more faithful description of what happened.</p>",
        "id": 439441349,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716127745
    },
    {
        "content": "<p>Is it possible to collect up this information to get a graph over time, or is the mathlib stats page already doing this?</p>",
        "id": 439441604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716127983
    },
    {
        "content": "<p>The mathlib stats page has graphs plotted against time, but the information that I am extracting now is not in that page.</p>",
        "id": 439441644,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128027
    },
    {
        "content": "<p>I guess one cheap thing you could do is make sure that the weekly reports are distinctive enough that they can be harvested later via some zulip API</p>",
        "id": 439441708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716128078
    },
    {
        "content": "<p>How does this look like?</p>",
        "id": 439441709,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128078
    },
    {
        "content": "<hr>\n<h2>Weekly stats (<a href=\"https://github.com/leanprover-community/mathlib4/compare/3f8be61e1cfb12e7c067d481bc44b7d75bfeedc3...d874bdffd15c8aeb3e8bb150dcff8feaac40e4e4\">2024-05-12...2024-05-19</a>)</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center;\">Type</th>\n<th style=\"text-align: center;\">Total</th>\n<th style=\"text-align: center;\">%</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\">Theorems</td>\n<td style=\"text-align: center;\">168,073 (+772 -90)</td>\n<td style=\"text-align: center;\">0.41%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Data</td>\n<td style=\"text-align: center;\">60,131 (+320 -19)</td>\n<td style=\"text-align: center;\">0.50%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Predicates</td>\n<td style=\"text-align: center;\">4,150 (+31 -2)</td>\n<td style=\"text-align: center;\">0.70%</td>\n</tr>\n<tr>\n<td style=\"text-align: center;\">Types</td>\n<td style=\"text-align: center;\">3,325 (+8 -0)</td>\n<td style=\"text-align: center;\">0.24%</td>\n</tr>\n</tbody>\n</table>\n<p>895 files changed (+42 -11 ~839), 7725 lines changed (+20466 -12741)</p>\n<p>Reference commits: old <a href=\"https://github.com/leanprover-community/mathlib4/commit/3f8be61e1cfb12e7c067d481bc44b7d75bfeedc3\">3f8be61e1c</a>, new <a href=\"https://github.com/leanprover-community/mathlib4/commit/d874bdffd15c8aeb3e8bb150dcff8feaac40e4e4\">d874bdffd1</a>.</p>\n<p>Take also a look at the <a href=\"https://leanprover-community.github.io/mathlib_stats.html\"><code>Mathlib</code> stats page</a>.</p>",
        "id": 439441721,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128086
    },
    {
        "content": "<p>Now that we have the <code>+ - ~</code>, I wish git had something similar for the lines as well...</p>",
        "id": 439441779,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128150
    },
    {
        "content": "<p>I suppose you could just interpret the 7725 as <code>~</code></p>",
        "id": 439441856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716128195
    },
    {
        "content": "<p>although it seems to be just 20466-12741</p>",
        "id": 439441893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716128256
    },
    {
        "content": "<p>I think \"Data\" is confusing? Well, it's confusing me right now. What's the difference between \"Data\" and \"Types\"? Is Data = terms?</p>",
        "id": 439441898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716128270
    },
    {
        "content": "<p>The 7725 was computed by me and it is indeed just the difference of the (absolute values of the) + and -.</p>",
        "id": 439441955,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128301
    },
    {
        "content": "<p>Maybe they should be categorized by definition kind: <code>theorem</code>, <code>def</code>, <code>opaque</code>, <code>axiom</code></p>",
        "id": 439441967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716128309
    },
    {
        "content": "<p>and then separate between data, predicates, types for the relevant definition kind</p>",
        "id": 439441984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716128334
    },
    {
        "content": "<p>I had the names of the constructors initially, but it was suggested that this other splitting was better... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 439441988,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128341
    },
    {
        "content": "<p>I just don't know what people are going to think about the statement \"mathlib has 168073 theorems and 60131 datas\"</p>",
        "id": 439441998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716128375
    },
    {
        "content": "<p>I think someone said above this is not for external consumption</p>",
        "id": 439442010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716128398
    },
    {
        "content": "<p>For the moment, I was thinking that this report would be just in Zulip.</p>",
        "id": 439442053,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128406
    },
    {
        "content": "<p>Other stats which would be useful:</p>\n<ul>\n<li>number of instances</li>\n<li>number of simp lemmas</li>\n<li>number of classes</li>\n</ul>",
        "id": 439442071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716128434
    },
    {
        "content": "<p>It is certainly good to think about what to make public, but I was hoping to get a prototype up and running.</p>",
        "id": 439442072,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128437
    },
    {
        "content": "<p>Yes, these are good suggestions.  I focused on producing 1 git-based report and 1 lean-based report.</p>",
        "id": 439442108,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128497
    },
    {
        "content": "<p>Are there any other metrics people can think of which correlate with overall performance?</p>",
        "id": 439442116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716128513
    },
    {
        "content": "<p>Once this works, I can definitely add more statistics.</p>",
        "id": 439442117,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128515
    },
    {
        "content": "<ul>\n<li>number of linters</li>\n<li>number of environment extensions</li>\n</ul>",
        "id": 439442203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716128602
    },
    {
        "content": "<p>Ok, I'll look into how to make a bot post on Zulip the statistics above once per week and I'll make a PR.</p>",
        "id": 439442277,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128668
    },
    {
        "content": "<p>After that, we can see what else to add and what would be good \"external\" statistics.</p>",
        "id": 439442284,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128682
    },
    {
        "content": "<p>Should the bot post on this thread/topic?</p>",
        "id": 439442503,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128903
    },
    {
        "content": "<p>For testing, I may make it post a few times, just to get a feeling for how these things work.</p>",
        "id": 439442523,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716128940
    },
    {
        "content": "<p>It should be in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> stream, with a title like \"Mathlib weekly change report\"</p>",
        "id": 439442575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716129003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439441898\">said</a>:</p>\n<blockquote>\n<p>I think \"Data\" is confusing? Well, it's confusing me right now. What's the difference between \"Data\" and \"Types\"? Is Data = terms?</p>\n</blockquote>\n<p>\"Definitions\", maybe?</p>",
        "id": 439443305,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716129695
    },
    {
        "content": "<p>\"types\" is things like Nat, \"data\" is things like <code>Nat.factorial</code>.</p>",
        "id": 439445474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716131787
    },
    {
        "content": "<p>another possible subdivision of the \"data def\" category is noncomputable/computable</p>",
        "id": 439445622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716131944
    },
    {
        "content": "<p>lemma/theorem would also be a great split, although I think we don't have the metadata needed to differentiate</p>",
        "id": 439445732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716132052
    },
    {
        "content": "<p>maybe documented/undocumented theorem</p>",
        "id": 439445741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716132062
    },
    {
        "content": "<p>actually % documented would be useful on every category</p>",
        "id": 439445773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716132118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439445732\">said</a>:</p>\n<blockquote>\n<p>lemma/theorem would also be a great split, although I think we don't have the metadata needed to differentiate</p>\n</blockquote>\n<p>I was planning on doing that later.  My plan was to run <code>lake build</code> on a prepped version of mathlib that would log things like this.</p>",
        "id": 439445793,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716132123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439445773\">said</a>:</p>\n<blockquote>\n<p>actually % documented would be useful on every category</p>\n</blockquote>\n<p>This was one of the suggestions above, I think.</p>",
        "id": 439445832,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716132144
    },
    {
        "content": "<p>The reason I suggested we avoid counting <code>theorem</code> is that the choice of what's a theorem and what's part of the definition (ie a projection) is arbitrary, and not interesting mathematically</p>",
        "id": 439445837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716132150
    },
    {
        "content": "<p>I don't think we should just restrict to mathematically interesting distinctions</p>",
        "id": 439445857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716132173
    },
    {
        "content": "<p>(Note that in the doc-strings for the report, I am also putting in all the suggestions that came up.)</p>",
        "id": 439445860,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716132176
    },
    {
        "content": "<p>I think the main things we want to get out of this relate to proof engineering/maintenance aspects, which is why my suggestions relate to either performance or other code quality indicators</p>",
        "id": 439445914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716132243
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13038\">#13038</a></p>",
        "id": 439446352,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716132650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439445914\">said</a>:</p>\n<blockquote>\n<p>I think the main things we want to get out of this relate to proof engineering/maintenance aspects, which is why my suggestions relate to either performance or other code quality indicators</p>\n</blockquote>\n<p>I really like your suggestions!</p>\n<p>I am hoping that this current version will help setting up some infrastructure with some easy statistics, before we expand and actually use it for structural reports.</p>",
        "id": 439446463,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716132740
    },
    {
        "content": "<p>Maybe \"Data\" is better renamed to \"Definition\"? It's easier to comprehend, and would it be inaccurate?</p>",
        "id": 439492342,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716177938
    },
    {
        "content": "<p>I wonder whether calling it <code>Definition</code> would suggest that it is a count of <code>def</code>s, rather than what it is actually counting.</p>",
        "id": 439495033,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716180037
    },
    {
        "content": "<p>I think it <em>should</em> be a count of <code>def</code>s, subdivided accordingly</p>",
        "id": 439496149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716180752
    },
    {
        "content": "<p>theorems can't be <code>Data</code> anyway</p>",
        "id": 439496175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716180774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439496149\">said</a>:</p>\n<blockquote>\n<p>I think it <em>should</em> be a count of <code>def</code>s, subdivided accordingly</p>\n</blockquote>\n<p>\"subdivided accordingly\" means that if the <code>ConstantInfo</code> is a <code>defnInfo</code>, then you want so split further into <code>Def Type</code>, <code>Def Predicate</code> and <code>Def Data</code>?  What should be the labelling for <code>def</code>s that are in <code>Prop</code>?  With the current scheme, everything in <code>Prop</code> is a <code>Theorem</code>.</p>",
        "id": 439498347,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716181917
    },
    {
        "content": "<p>(The initial split was precisely by classifying declarations based on their <code>ConstantInfo</code> constructor, so it seems that we are going back to that.)</p>",
        "id": 439498543,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716182013
    },
    {
        "content": "<p>What about</p>\n<ul>\n<li><code>thmInfo</code> counts as <code>Theorem</code></li>\n<li><code>defnInfo</code> whose <code>type</code> is <code>Prop</code> counts as <code>Definition (Prop)</code></li>\n<li><code>defnInfo</code> whose <code>type</code>-after-binders is <code>Type</code> counts as <code>Definition (Type)</code></li>\n<li><code>defnInfo</code> whose <code>type</code>-after-binders is <code>Sort</code> counts as <code>Definition (Predicate)</code></li>\n<li><code>defnInfo</code> whose <code>type</code>-after-binders is something else counts as <code>Definition (Data)</code></li>\n</ul>\n<p>I suspect that this is close to what Mario was suggesting.  This would ignore other types of <code>ConstantInfo</code>, but maybe this is ok?</p>",
        "id": 439501440,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716183423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439498347\">said</a>:</p>\n<blockquote>\n<p>With the current scheme, everything in <code>Prop</code> is a <code>Theorem</code>.</p>\n</blockquote>\n<p>That's wrong, right? Everything <em>whose type has type Prop</em> is a <code>Theorem</code>.</p>",
        "id": 439508726,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716186448
    },
    {
        "content": "<p>Yaël, yes, this is the usual <code>isProp</code> vs <code>is*A*Prop</code> slip!  <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 439508975,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716186546
    },
    {
        "content": "<p>(However, I think that the code is doing it right, since I access the <code>type</code> of a declaration, not the <code>value</code>.)</p>",
        "id": 439509036,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716186579
    },
    {
        "content": "<p>I am testing the split suggested above: there may be a post in the other stream soon with the new format... hopefully!</p>",
        "id": 439544946,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716200790
    },
    {
        "content": "<p>I think you can throw all other constantinfo into \"other\"</p>",
        "id": 439628370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716229405
    },
    {
        "content": "<p>well, inductives should be a category</p>",
        "id": 439628532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716229463
    },
    {
        "content": "<p>Mario, what's your argument for why we care about the type of Constant info? My argument for why we don't is that those are counting implementation details, and what we actually want to measure is API surface. The API surface of a one-field structure is the same as a type synonym, but the constantinfos are very different.</p>",
        "id": 439679259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716238872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439496175\">said</a>:</p>\n<blockquote>\n<p>theorems can't be <code>Data</code> anyway</p>\n</blockquote>\n<p>Regarding the converse: are <code>Prop</code> instances still <code>def</code>s, or is that fixed in Lean 4.8.0?</p>",
        "id": 439679560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716238989
    },
    {
        "content": "<blockquote>\n<p>The API surface of a one-field structure is the same as a type synonym</p>\n</blockquote>\n<p>I disagree about this, a one-field structure adds to/from functions and several generated declarations</p>",
        "id": 439680814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716239477
    },
    {
        "content": "<p>but also, in line with my point about gathering better data up-front, I think it's better to have the information than not, if we can easily collect it, and if the more coarse metrics are also there then you can ignore the fine-grained metrics</p>",
        "id": 439681029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716239558
    },
    {
        "content": "<p>It's difficult to guess in advance which metrics are going to be important until we start collecting the data</p>",
        "id": 439681152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716239594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439679560\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Periodic.20reports/near/439496175\">said</a>:</p>\n<blockquote>\n<p>theorems can't be <code>Data</code> anyway</p>\n</blockquote>\n<p>Regarding the converse: are <code>Prop</code> instances still <code>def</code>s, or is that fixed in Lean 4.8.0?</p>\n</blockquote>\n<p>No, proofs can be <code>def</code> but data can't be <code>theorem</code></p>",
        "id": 439681335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716239654
    }
]