[
    {
        "content": "<p>Hello, I would like to make a Structure created in an elab avariable outside of it. For this my method of choice would be to create a corresponding command and execute it with elabCommand.</p>\n<p>However, I have Problems in transforming the String Repr of my Body to an Actual TSyntax `term. The String is essentially already the \"correct\" Syntax, but has the wrong Type, I think.<br>\nE.g:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"n\">Term</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">testS</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"testi\"</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">testSi</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">testS</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">({</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"bp\">.</span><span class=\"n\">getString</span><span class=\"o\">}:</span><span class=\"n\">testS</span><span class=\"o\">)</span>\n\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">nameIdent</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s2\">\"def_\"</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"bp\">.</span><span class=\"n\">getString</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`term</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">reprStr</span><span class=\"w\"> </span><span class=\"n\">testSi</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- Error Here because it is String but want TSyntax `term</span>\n\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">tCommand</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">nameIdent</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">:</span><span class=\"n\">testS</span><span class=\"o\">))</span>\n\n<span class=\"w\">  </span><span class=\"n\">elabCommand</span><span class=\"w\"> </span><span class=\"n\">tCommand</span>\n</code></pre></div>\n<p>Is there an easy way to do this? Is it even possible? Are there better Methods instead of using elabCommand ?<br>\nAll I really want is to use the resulting def after the elab.</p>",
        "id": 445134748,
        "sender_full_name": "Codegoblin",
        "timestamp": 1718631487
    },
    {
        "content": "<p>Im a bit confused, what do you want your <code>body</code> to be?</p>\n<p>Could you add one usage example? Do you need to go via strings?</p>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.runParserCategory#doc\">docs#Lean.Parser.runParserCategory</a> which does what you ask, but I'm not sure it's the right answer to the un-#xy-ified problem</p>",
        "id": 445150740,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718635566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span>  Hi, thank you for your answer.</p>\n<p>Ii want my body to be the Structure itself, e.g.  if I did </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">testi</span><span class=\"w\"> </span><span class=\"n\">testName</span>\n</code></pre></div>\n<p>it would be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\">  </span><span class=\"n\">testName</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>And thus the def would become </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">def_testName</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">({</span><span class=\"n\">name</span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">testName</span><span class=\"w\"> </span><span class=\"o\">}:</span><span class=\"n\">testS</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Usage: I want to create a Structure that contais functionality + data from an elab and make it avariable outside of the elab (for a DSL).</p>\n<p>I am not hellbent on using strings, I just thought that this might be an easy way but got stuck.</p>\n<p>How can I use ParserCategorys for this case?</p>",
        "id": 445153117,
        "sender_full_name": "Codegoblin",
        "timestamp": 1718636235
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.evalConstCheck#doc\">docs#Lean.evalConstCheck</a> might be what you're looking for.</p>",
        "id": 445157786,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718637326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Hi, thanks for your answer. </p>\n<p>How can i apply this function to my example? It seems this needs Type of Type 1 ? Atleast I get an error if i do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"n\">Term</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">testS</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"testi\"</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">testSi</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">testS</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">({</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"bp\">.</span><span class=\"n\">getString</span><span class=\"o\">}:</span><span class=\"n\">testS</span><span class=\"o\">)</span>\n\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">nameIdent</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s2\">\"def_\"</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"bp\">.</span><span class=\"n\">getString</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`term</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">evalConstCheck</span><span class=\"w\"> </span><span class=\"n\">testSi</span><span class=\"o\">))</span>\n\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">tCommand</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">nameIdent</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">elabCommand</span><span class=\"w\"> </span><span class=\"n\">tCommand</span>\n\n<span class=\"n\">testi</span><span class=\"w\"> </span><span class=\"n\">testName</span>\n</code></pre></div>",
        "id": 445162201,
        "sender_full_name": "Codegoblin",
        "timestamp": 1718638369
    },
    {
        "content": "<p>I don't fully understand what you're trying to do (<a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>). If you want to evaluate something that has been previously elaborated, that's what <code>evalConstCheck</code> will do for you. If you want to make a declaration that refers to a previously defined constant, you should use its <code>Name</code>. If you want to store arbitrary data during an elaboration and access it later, an environment extension may be the way to got.</p>",
        "id": 445163597,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718638734
    },
    {
        "content": "<p>Here's a working version of your example, but I don't know whether it does what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"n\">Term</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">testS</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">::</span>\n<span class=\"w\">  </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"testi\"</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">nameIdent</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Name</span><span class=\"bp\">.</span><span class=\"n\">mkSimple</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"s2\">\"def_\"</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"ss\">``testS</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">tCommand</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">nameIdent</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">elabCommand</span><span class=\"w\"> </span><span class=\"n\">tCommand</span>\n\n<span class=\"n\">testi</span><span class=\"w\"> </span><span class=\"n\">testName</span>\n\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">def_testName</span>\n</code></pre></div>",
        "id": 445165025,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718639116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Hi, thanks for your answers.</p>\n<p>I am trying to store arbitrary Data from Elaboration for later use. <br>\nI would like to create an instance of structure testS (stored in testSi) and \"save\" it to read out later. </p>\n<p>E.g. the structure could have a method to read out its name. Which could then be accessed from outside the elaboration.</p>\n<p>How can I extend my environment to store the values of the structure (is there a tutorial for that)?</p>\n<p>I tried to make the example better understandable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">testStructure</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">testStructure</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">getName</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">testStructure</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ts</span><span class=\"bp\">.</span><span class=\"n\">name</span>\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">testStructure</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">hygiene</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"testi\"</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">testSinstance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">testStructure</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">({</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"bp\">.</span><span class=\"n\">getString</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">testStructure</span><span class=\"o\">)</span>\n\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">nameIdent</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s2\">\"definition_\"</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"bp\">.</span><span class=\"n\">getString</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">definitionOfTheStructure</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"ss\">``testStructure</span><span class=\"o\">))</span>\n\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">tCommand</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">nameIdent</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">definitionOfTheStructure</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"c1\">-- the created Command should be</span>\n<span class=\"w\">  </span><span class=\"c1\">-- def definition_testName := ({name := testName}: testStructure)</span>\n\n<span class=\"w\">  </span><span class=\"n\">elabCommand</span><span class=\"w\"> </span><span class=\"n\">tCommand</span><span class=\"w\"> </span><span class=\"c1\">-- elaboration to create the definition</span>\n\n<span class=\"n\">testi</span><span class=\"w\"> </span><span class=\"n\">testName</span><span class=\"w\"> </span><span class=\"c1\">-- call of the command</span>\n\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">def_testName</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">def_testName</span><span class=\"w\"> </span><span class=\"c1\">-- I want it to tell me {name := testName}</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">def_testName</span><span class=\"bp\">.</span><span class=\"n\">getName</span><span class=\"w\"> </span><span class=\"c1\">-- I want it to tell me testName</span>\n</code></pre></div>",
        "id": 445173921,
        "sender_full_name": "Codegoblin",
        "timestamp": 1718641556
    },
    {
        "content": "<p>Are you looking for this function?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">quote</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">`term</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 445177652,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718642639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  Hi, thanks for your answer.</p>\n<p>Unfortunately, It's close, but not quite the right answer.  I basically want to create the Structure which is stored in a let in elab to a definition. This definition should then be usable outside the elab. </p>\n<p>I changed the title to hopefully better reflect this.</p>\n<p>Jannis Limperg suggested to use environment extensions. I don't quite get how you can add to these or read them comfortably. (So far I found that you can get the Environment with getEnv)</p>\n<p>Maybe the Idea of using string for this is complete wrong.</p>\n<p>My current Try with quote :</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"n\">Term</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">testStructure</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n\n<span class=\"w\">¬† </span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span>\n\n<span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">testStructure</span>\n\n<span class=\"w\">¬† </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">getName</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">testStructure</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ts</span><span class=\"bp\">.</span><span class=\"n\">name</span>\n\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">testStructure</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">hygiene</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"k\">in</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"testi\"</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n\n<span class=\"w\">¬† </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">testSinstance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">testStructure</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">({</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"bp\">.</span><span class=\"n\">getString</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">testStructure</span><span class=\"o\">)</span>\n\n<span class=\"w\">¬† </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">nameIdent</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s2\">\"def_\"</span><span class=\"bp\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"bp\">.</span><span class=\"n\">getString</span><span class=\"o\">)</span>\n\n<span class=\"w\">¬† </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">nameIdent</span><span class=\"w\"> </span><span class=\"c1\">-- def_testName</span>\n\n<span class=\"w\">¬† </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">structInstanceString</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">reprStr</span><span class=\"w\"> </span><span class=\"n\">testSinstance</span><span class=\"o\">)</span>\n\n<span class=\"w\">¬† </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">structInstanceString</span><span class=\"w\"> </span><span class=\"c1\">-- { name := \"testName\" }</span>\n\n<span class=\"w\">¬† </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">tCommand</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">nameIdent</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span><span class=\"w\"> </span><span class=\"n\">structInstanceString</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">testStructure</span><span class=\"o\">))</span>\n\n<span class=\"w\">¬† </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">tCommand</span>\n\n<span class=\"w\">¬† </span><span class=\"c1\">-- IS: def def_testName := (\"{ name := \\\"testName\\\" }\": testStructure)</span>\n\n<span class=\"w\">¬† </span><span class=\"c1\">-- SHOULD BE : def definition_testName := ({name := testName}: testStructure)</span>\n\n<span class=\"w\">¬† </span><span class=\"n\">elabCommand</span><span class=\"w\"> </span><span class=\"n\">tCommand</span><span class=\"w\"> </span><span class=\"c1\">-- elaboration to create the definition</span>\n\n<span class=\"n\">testi</span><span class=\"w\"> </span><span class=\"n\">testName</span><span class=\"w\"> </span><span class=\"c1\">-- call of the command</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  \"{ name := \\\"testName\\\" }\"</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  String : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  testStructure : Type</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 445182015,
        "sender_full_name": "Codegoblin",
        "timestamp": 1718643874
    },
    {
        "content": "<blockquote>\n<p><code>SHOULD BE : def definition_testName := ({name := testName}: testStructure)</code></p>\n</blockquote>\n<p>What is this supposed to mean? There is no <code>testName</code> in the context. Could you please add the desired output as a separate <code>def</code> to the example?</p>",
        "id": 445284154,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718693752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  Hello, thanks for the answer. </p>\n<p>Sorry for the obscurity, that \"should be\" is ofc only if the command after the elab is executed. Like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">testi</span><span class=\"w\"> </span><span class=\"n\">testName</span><span class=\"w\"> </span><span class=\"c1\">-- call of the command</span>\n</code></pre></div>\n<p>I will try my best to convey my desired result.</p>\n<p>My desired output is to create a definition that contains the instance (?) of the structure from the let-field (named TestSinstance in my previous Code) in elab. (Or another method of making the structure readable after the elaboration).</p>\n<p>Example:<br>\nIf I use the command</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">testi</span><span class=\"w\"> </span><span class=\"n\">testName</span><span class=\"w\">  </span><span class=\"c1\">-- call of the command (or the elaboration ?)</span>\n</code></pre></div>\n<p>I want it to create a definition like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">definition_testName</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">({</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">testName</span><span class=\"o\">}:</span><span class=\"w\"> </span><span class=\"n\">testStructure</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c\">/-</span><span class=\"cm\"> Here the definition should contain a instance (?) of the Structure testStructure -/</span>\n</code></pre></div>\n<p>Whith the purpose of reading the structure like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"n\">definition_testName.getName</span><span class=\"w\">  </span><span class=\"c1\">-- Output of this function -&gt; testName</span>\n</code></pre></div>\n<p>I hope this clears up the confusion. If there is another better or easier way to acces the structure from the let field in elab outside of the elab, then i will gladly use it.</p>",
        "id": 445334206,
        "sender_full_name": "Codegoblin",
        "timestamp": 1718710056
    },
    {
        "content": "<p>I think this does what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span>\n<span class=\"w\">  </span><span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"testi \"</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"bp\">.</span><span class=\"n\">toString</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">defId</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"bp\">.</span><span class=\"n\">mkSimple</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"s2\">\"definition_\"</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">defName</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkStrLit</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"n\">elabCommand</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">defId</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">defName</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">)</span>\n\n<span class=\"n\">testi</span><span class=\"w\"> </span><span class=\"n\">testName</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">definition_testName</span><span class=\"w\"> </span><span class=\"c1\">-- { name := \"testName\" }</span>\n</code></pre></div>\n<p>However, you mentioned that you're working on some DSL elaboration, in which case this approach is probably not optimal. If you tell us what you want to achieve (not how you think you might achieve it; see <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>), we may be able to help with that as well.</p>",
        "id": 445337443,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718711175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>  Hello and thanks for your answer + working example. It is (as you guessed) not completely applicable to my case.</p>\n<p>I will try to summarize what I want to archive:</p>\n<ul>\n<li>I created an DSL, which supports inheritance. </li>\n<li>To make it possible for the user to track the inheritance (e.g. usage in proofs, switch to parent) I created a Structure which contains this (an Inheritance tree). This structure is built of multiple substructures and Lists of Structures.</li>\n<li>The Inheritance tree is created in the elab (since I got the information from the Syntax here). The structure here is ready to use and can be used in the elab already. </li>\n<li>Now I would like to make this created structure available to use for the user outside the elab code. He should be able to use it just like how I can use it in the elab code.</li>\n</ul>\n<p>Thank you for your patience. I hope this is more understandable than before.</p>\n<p>With best regard, Codegoblin</p>",
        "id": 445342313,
        "sender_full_name": "Codegoblin",
        "timestamp": 1718712860
    },
    {
        "content": "<p>I managed to use the Example of Jannis Limperg to tweak my Use case so it works now. With the addition of quote, I now have solved this problem with the help of the participants in this thread. </p>\n<p>Thank you all for helping me. :)</p>",
        "id": 445544975,
        "sender_full_name": "Codegoblin",
        "timestamp": 1718788677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"710184\">Codegoblin</span> has marked this topic as resolved.</p>",
        "id": 445544989,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718788682
    }
]