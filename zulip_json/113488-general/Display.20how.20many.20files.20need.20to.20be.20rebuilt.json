[
    {
        "content": "<p>Now that oleans are rebuilt only when the user explicitly asks for it (<code>Ctrl + Shift + X</code>), I often find myself with a bit of a conundrum:</p>\n<blockquote>\n<p>If the extension tells me there are missing oleans for dependency files, do I need to get cache or can I just quickly rebuild everything on my machine?</p>\n</blockquote>",
        "id": 427905502,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710933816
    },
    {
        "content": "<p>The first situation usually happens after I switch branches and before I get cache. The second situation usually happens when I modify a file and then go to a later file. However there is a third case which can lead to either situation depending on the precise timing: If I switch branches, run <code>lake exe cache get</code> and quickly open the files I want to touch, they will tell me their dependencies are missing oleans. This could either mean that</p>\n<ul>\n<li><code>lake exe cache get</code> hasn't finished running yet</li>\n<li>the file isn't covered by the cache (because the build stopped at an earlier file due to an error</li>\n</ul>",
        "id": 427905518,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710933823
    },
    {
        "content": "<p>I believe the best way to distinguish between those two situations would be to display how many dependency files have out of date oleans. Note that that number would need to be recalculated every few seconds at least since we want to catch the point where <code>lake exe cache get</code> finishes unpacking the cache.</p>",
        "id": 427905529,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710933827
    },
    {
        "content": "<p>What do people think?</p>",
        "id": 427905541,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710933832
    },
    {
        "content": "<p>Ideally <code>lake build</code> and <code>lake exe cache get</code> would just run cooperatively. One is CPU bound, one is network bound, so they needn't interfere at all. As oleans arrive over the network, cancel the local build file by file. Obviously this would require deep integration with lake, so isn't happening immediately. I do hope it will happen, though!</p>",
        "id": 427906597,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710934219
    },
    {
        "content": "<p>it's even more complicated than that. In order to really take advantage of the parallelism I think it would be best to link to curl instead of just calling it in a fire-and-forget manner, so that you have full control over the communication pipeline and can launch new requests while old ones are still coming in. This is what I did in the <code>lean-cache</code> rewrite</p>",
        "id": 427907546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710934609
    },
    {
        "content": "<p>What's the state of that rewrite? I vaguely remember it being 5x faster, but blocked on design issues with lake - is that correct/still up to date?</p>",
        "id": 427933730,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710943093
    }
]