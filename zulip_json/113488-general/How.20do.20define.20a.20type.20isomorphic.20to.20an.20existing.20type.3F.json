[
    {
        "content": "<p>I want to define the type of uniform distributions over a nonempty subset of the (finite) universe. It's isomorphic to nonempty finite sets of elements, but I want to be able to treat it as a PMF. I could work directly with the sets, but I'd like to be able to use them as functions.<br>\nWhat would be the nicest/most convenient to define this type? I thought about </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">PMF</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">t.card</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}}</span>\n</code></pre></div>\n<p>But this seems to hide the isomorphism too much–it requires proof that for any nonempty set, there's such a uniform distribution, proof that any such distribution has exactly one matching nonempty set, and that a distribution is equal to the distribution produced by its set. These aren't hard to prove, but is there a way to create this type which automatically gives those?</p>",
        "id": 421605894,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1707986967
    },
    {
        "content": "<p>Are you familiar with <code>uniformOfFinset</code> in <code>Probability/Distributions/Uniform.lean</code>? (It also has <code>uniformOfFintype</code> and <code>ofMultiset</code>). They have some basic API. I also wrote the new <code>uniformMeasure</code> which might be useful (or not) to you, which is currently in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10456\">#10456</a>. There is a small part that is work-in-progress there, other than that I hope it should be available soon!</p>",
        "id": 421610360,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707988434
    }
]