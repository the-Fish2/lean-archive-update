[
    {
        "content": "<p><em>noob meta-programming question, sorry</em></p>\n<p>I'd like to elaborate a command <code>c</code> inside my custom command <code>#compile_check</code> and catch any error that pops up</p>\n<p>My naive unsuccessful version is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean.Elab</span> <span class=\"o\">(</span><span class=\"n\">throwUnsupportedSyntax</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Command</span> <span class=\"o\">(</span><span class=\"n\">CommandElab</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Term</span> <span class=\"o\">(</span><span class=\"n\">evalTerm</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">compileCheck</span><span class=\"o\">)</span>\n  <span class=\"s2\">\"#compile_check \"</span> <span class=\"n\">command</span>\n<span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">command_elab</span> <span class=\"n\">compileCheck</span><span class=\"kd\">]</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">elabCompileCheck</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">compile_check</span> <span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">Lean.Elab.Command.elabCommand</span> <span class=\"n\">c</span>\n  <span class=\"n\">catch</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">_stx</span> <span class=\"n\">msg</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">msg.format</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"exception: {e}\"</span>\n    <span class=\"n\">Lean.throwError</span> <span class=\"s2\">\"exception\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">internal</span> <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"internal: {id.toString}\"</span>\n    <span class=\"n\">Lean.throwError</span> <span class=\"s2\">\"internal\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"bp\">#</span><span class=\"n\">compile_check</span>\n  <span class=\"kd\">structure</span> <span class=\"n\">Test</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n    <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- red underline on `α` with the expected \"universe too big\" error</span>\n</code></pre></div>\n<p>So nothing but the original error happens, <em>i.e.</em> the command elaboration does not produce an exception that my elaborator catches</p>",
        "id": 438172884,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1715507226
    },
    {
        "content": "<p>I experimented with handling the state(s) explicitly, with something starting with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">command_elab</span> <span class=\"n\">compileCheck</span><span class=\"kd\">]</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">elabCompileCheck</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">compile_fail</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">err</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">state</span> <span class=\"n\">state'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- ...</span>\n</code></pre></div>\n<p>but that was unsuccessful too. Though I admittedly did not precisely know what I was doing at this stage. I was trying to backtrack the <code>state'</code> after the elaboration, thinking that might be where the error is \"emitted\", but I got lost on the way</p>",
        "id": 438173038,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1715507392
    },
    {
        "content": "<p>Does <code>elabCommand</code> just report errors directly to the server or something like that, meaning errors just cannot be caught? Or at least not be caught with that kind of relatively simple approach?</p>",
        "id": 438173131,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1715507470
    },
    {
        "content": "<p>For anyone wondering why I'm doing this, I'd like to have a command that checks that some code does not compile, and why.</p>\n<p>For now my main use-case is teaching Lean by showing Lean code, and I'd like to <em>i)</em> show things that don't compile so that I can explain why, <em>ii)</em> check they (still) produce the error I expected when I wrote the material, and <em>iii)</em> not have actual errors when I build the codebase</p>",
        "id": 438173444,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1715507811
    },
    {
        "content": "<p>You can extract the errors from <code>getThe Core.State</code> which contains a list of messages</p>",
        "id": 438174360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715508820
    },
    {
        "content": "<p>Oh, interesting! Hopefully I can unstage them too!</p>",
        "id": 438174420,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1715508882
    },
    {
        "content": "<p>Thanks <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 438174425,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1715508889
    },
    {
        "content": "<p>Yes, it's a state monad not a reader monad</p>",
        "id": 438176655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715511328
    },
    {
        "content": "<p>There might be some more specialized API somewhere</p>",
        "id": 438176665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715511354
    },
    {
        "content": "<p>You could take a look at the implementation of <code>#guard_msgs</code> in core (<code>Lean.Elab.GuardMsgs</code>)</p>",
        "id": 438192393,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715527958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Catching.20command.20elaboration.20errors/near/438192393\">said</a>:</p>\n<blockquote>\n<p>You could take a look at the implementation of <code>#guard_msgs</code> in core (<code>Lean.Elab.GuardMsgs</code>)</p>\n</blockquote>\n<p>Thank you, it's a good idea but I ended up using <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s hints and be successful quick enough to miss it</p>",
        "id": 438194350,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1715530046
    },
    {
        "content": "<p>For future readers, <a href=\"https://github.com/anzenlang/zen/blob/b082dc8806a72d1bf4e65319b451d3a384077220/Zen/Query/CompileFail.lean#L89-L121\">here is my version</a></p>\n<p>Note that <code>Core.State</code> did not store any messages when I tried it (at least with 4.8.0-rc1), but the normal state of <code>CommandElab</code> did. See <a href=\"https://github.com/anzenlang/zen/blob/b082dc8806a72d1bf4e65319b451d3a384077220/Zen/Query/CompileFail.lean#L95-L100\">here</a> for details.</p>",
        "id": 438194427,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1715530096
    },
    {
        "content": "<p>I am quite happy that <a href=\"https://github.com/anzenlang/zen/blob/b082dc8806a72d1bf4e65319b451d3a384077220/Zen/Query/CompileFail.lean#L135-L139\">I could check failures of my failure-checking macro using itself</a></p>",
        "id": 438194460,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1715530146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> has marked this topic as resolved.</p>",
        "id": 438195008,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715530701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span> Reading your code, it seems like you could use <code>#guard_msgs</code> directly rather than rolling your own solution</p>",
        "id": 438200455,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715536090
    },
    {
        "content": "<p>It would look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">error: invalid universe level in constructor 'Zen.CompileFail.Lst.cons', parameter has type</span>\n<span class=\"sd\">  α</span>\n<span class=\"sd\">at universe level</span>\n<span class=\"sd\">  2</span>\n<span class=\"sd\">it must be smaller than or equal to the inductive datatype universe level</span>\n<span class=\"sd\">  1</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Lst</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Lst</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Lst</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 438200615,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715536223
    },
    {
        "content": "<p>If you want to only capture errors and warnings, then you can change it to <code>#guard_msgs (error, warning) in</code></p>",
        "id": 438200658,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715536264
    },
    {
        "content": "<p>Kyle, it looks like your code is missing a <code>namespace Zen.CompileFail</code>.</p>",
        "id": 438200756,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715536357
    },
    {
        "content": "<p>It's missing it here, but I meant it to work as a drop-in replacement for these lines: <a href=\"https://github.com/anzenlang/zen/blob/b082dc8806a72d1bf4e65319b451d3a384077220/Zen/Query/CompileFail.lean#L123-L133\">https://github.com/anzenlang/zen/blob/b082dc8806a72d1bf4e65319b451d3a384077220/Zen/Query/CompileFail.lean#L123-L133</a></p>",
        "id": 438200816,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715536439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> well thank you for raining on my parade. More seriously, thank you for pointing that out, I’m glad there’s something already doing this available</p>",
        "id": 438201609,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1715537151
    },
    {
        "content": "<p>Maybe you can take solace in the fact that <code>#guard_msgs</code> tests itself in <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/guard_msgs.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/guard_msgs.lean</a> :-)</p>",
        "id": 438201699,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715537234
    }
]