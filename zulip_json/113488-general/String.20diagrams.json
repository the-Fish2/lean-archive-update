[
    {
        "content": "<p>String diagrams are graphical representations of morphisms in monoidal categories, which are extremely useful for rewriting computations. They are also related to e.g. knot theory.</p>\n<p>I have written a program that draws string diagrams from lean expressions. This is avalable in <a href=\"https://github.com/leanprover-community/mathlib4/tree/ymizuno-string\">branch#ymizuno-string</a>. <br>\n<a href=\"/user_uploads/3121/Bwt_ROLCyf_XRcDutzj5mNLo/string.png\">string.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Bwt_ROLCyf_XRcDutzj5mNLo/string.png\" title=\"string.png\"><img src=\"/user_uploads/3121/Bwt_ROLCyf_XRcDutzj5mNLo/string.png\"></a></div><p>The program depends on ProofWidgets, and in particular inspired by <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Widget/CommDiag.html\">CommDiag.lean</a>, which is written by <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>.</p>\n<p>I will be happy if this helps anyone in writing proofs involving monoidal categories. Suggestions and comments are welcome!</p>",
        "id": 421520311,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1707940133
    },
    {
        "content": "<p>I have been interested in using string diagrams for cryptography. Can you tell me: Is it possible to replicate the proof depicted in figure 6 of <a href=\"https://arxiv.org/pdf/2105.05949.pdf\">this paper</a> using this string diagram system?</p>",
        "id": 421521280,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707940490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/String.20diagrams/near/421521280\">said</a>:</p>\n<blockquote>\n<p>I have been interested in using string diagrams for cryptography. Can you tell me: Is it possible to replicate the proof depicted in figure 6 of <a href=\"https://arxiv.org/pdf/2105.05949.pdf\">this paper</a> using this string diagram system?</p>\n</blockquote>\n<p>Yes, I think it's possible. In fact, my main motivation was to provide a tool to help with such \"graphical rw\".</p>",
        "id": 421523459,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1707941153
    },
    {
        "content": "<p>It would be neat if this let you work with string diagrams in a similar manner as Globular. (<a href=\"https://ncatlab.org/nlab/show/Globular\">https://ncatlab.org/nlab/show/Globular</a> <a href=\"http://globular.science/\">http://globular.science/</a>)</p>\n<p>Globular uses a different sort of formalization (associative n-categories), but, at least, a nice feature would be if you could select certain elements of the string diagram and have the tool insert all the coherence maps, etc., to bring them all \"into one place\" so that you can rewrite that subdiagram.</p>",
        "id": 421524672,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707941607
    },
    {
        "content": "<p>I think globular has been replaced by <a href=\"http://homotopy.io\">homotopy.io</a></p>",
        "id": 421533438,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707945048
    },
    {
        "content": "<p>I am currently livestreaming my attempt at the diagrammatic proof from the paper I linked. I have come to the following goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">MonoidalCategory</span> <span class=\"n\">C</span>\n<span class=\"n\">XYZ</span><span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V₁</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₂</span> <span class=\"bp\">⟶</span> <span class=\"n\">V₂</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₁</span>\n<span class=\"n\">V₁V₂V₃V₄V₅V₆V₇V₈V₉</span><span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">V₅</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₆</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₇</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₈</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">V₅</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₇</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₆</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₈</span>\n</code></pre></div>\n<p>I want to do this in the obvious way: Using <code>R</code> to switch the<code>V6</code> and <code>V7</code> with lots of associativity on either side. Is there a tactic that solves this kind of category theoretic goal?</p>",
        "id": 421995500,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708160992
    },
    {
        "content": "<p>The tactic that uses the attribute <code>reassoc</code> although I have forgotten its name</p>",
        "id": 421995705,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708161135
    },
    {
        "content": "<p><code>ac_change</code>?</p>",
        "id": 421995760,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708161232
    },
    {
        "content": "<p>Does <a href=\"#narrow/stream/287929-mathlib4/topic/better.20rw_assoc/near/419335377\">this thread</a> help? (tl;dr: <code>slice</code>)</p>",
        "id": 421996233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708161611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/String.20diagrams/near/421996233\">said</a>:</p>\n<blockquote>\n<p>Does <a href=\"#narrow/stream/287929-mathlib4/topic/better.20rw_assoc/near/419335377\">this thread</a> help? (tl;dr: <code>slice</code>)</p>\n</blockquote>\n<p>This seems like it is more for categorical composition than monoidal-categorical tensoring</p>",
        "id": 421996761,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708161999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/String.20diagrams/near/421995500\">said</a>:</p>\n<blockquote>\n<p>I am currently livestreaming my attempt at the diagrammatic proof from the paper I linked. I have come to the following goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">MonoidalCategory</span> <span class=\"n\">C</span>\n<span class=\"n\">XYZ</span><span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V₁</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₂</span> <span class=\"bp\">⟶</span> <span class=\"n\">V₂</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₁</span>\n<span class=\"n\">V₁V₂V₃V₄V₅V₆V₇V₈V₉</span><span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">V₅</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₆</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₇</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₈</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">V₅</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₇</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₆</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₈</span>\n</code></pre></div>\n<p>I want to do this in the obvious way: Using <code>R</code> to switch the<code>V6</code> and <code>V7</code> with lots of associativity on either side. Is there a tactic that solves this kind of category theoretic goal?</p>\n</blockquote>\n<p>We can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.Coherence.monoidalComp#doc\">docs#Mathlib.Tactic.Coherence.monoidalComp</a> to do this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.CategoryTheory.Coherence</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">MonoidalCategory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonoidalCategory</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R'</span> <span class=\"o\">(</span><span class=\"n\">V₅</span> <span class=\"n\">V₆</span> <span class=\"n\">V₇</span> <span class=\"n\">V₈</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V₁</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₂</span> <span class=\"bp\">⟶</span> <span class=\"n\">V₂</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₁</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">V₅</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₆</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₇</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₈</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">V₅</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₇</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₆</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₈</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">𝟙</span> <span class=\"n\">_</span> <span class=\"bp\">⊗≫</span> <span class=\"n\">V₅</span> <span class=\"bp\">◁</span> <span class=\"n\">R</span> <span class=\"n\">V₆</span> <span class=\"n\">V₇</span> <span class=\"bp\">▷</span> <span class=\"n\">V₈</span> <span class=\"bp\">⊗≫</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 421996931,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1708162203
    },
    {
        "content": "<p>By the way the string diagram widget does not support <code>monoidalComp</code> at the moment, so we need to expand it to show the string diagram.</p>",
        "id": 421997089,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1708162363
    },
    {
        "content": "<p>The following works in <a href=\"https://github.com/leanprover-community/mathlib4/tree/ymizuno-string\">branch#ymizuno-string</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Widget.StringDiagram</span>\n<span class=\"kn\">import</span> <span class=\"n\">ProofWidgets.Component.Panel.SelectionPanel</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.CategoryTheory.Coherence</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ## Example use of string diagram widgets -/</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">MonoidalCategory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ProofWidgets</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">MonoidalCategory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonoidalCategory</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">V₅</span> <span class=\"n\">V₆</span> <span class=\"n\">V₇</span> <span class=\"n\">V₈</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V₁</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₂</span> <span class=\"bp\">⟶</span> <span class=\"n\">V₂</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₁</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V₅</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₆</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₇</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₈</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">V₅</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₇</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₆</span> <span class=\"bp\">⊗</span> <span class=\"n\">V₈</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">𝟙</span> <span class=\"n\">_</span> <span class=\"bp\">⊗≫</span> <span class=\"n\">V₅</span> <span class=\"bp\">◁</span> <span class=\"n\">R</span> <span class=\"n\">V₆</span> <span class=\"n\">V₇</span> <span class=\"bp\">▷</span> <span class=\"n\">V₈</span> <span class=\"bp\">⊗≫</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Tactic.Coherence.monoidalComp</span><span class=\"o\">,</span> <span class=\"n\">id_tensorHom</span><span class=\"o\">,</span> <span class=\"n\">tensorHom_id</span><span class=\"o\">]</span>\n  <span class=\"n\">with_panel_widgets</span> <span class=\"o\">[</span><span class=\"n\">SelectionPanel</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- -- Place your cursor here and shif-click the LHS.</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/s4tFZCVJ0Vk4HhGLFFugQi6Y/2024-02-17-184401.png\">2024-02-17-184401.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/s4tFZCVJ0Vk4HhGLFFugQi6Y/2024-02-17-184401.png\" title=\"2024-02-17-184401.png\"><img src=\"/user_uploads/3121/s4tFZCVJ0Vk4HhGLFFugQi6Y/2024-02-17-184401.png\"></a></div>",
        "id": 421997999,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1708163204
    },
    {
        "content": "<p>It should still be able to capture the leftmost side of diagram six though right?</p>",
        "id": 421998853,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708164069
    },
    {
        "content": "<p>Wait, I got it to work!!</p>",
        "id": 421998883,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708164102
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/cQBYzQxRVkejmy9NpPRkYhyw/Screenshot-2024-02-17-at-4.01.56-AM.png\">Screenshot-2024-02-17-at-4.01.56-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cQBYzQxRVkejmy9NpPRkYhyw/Screenshot-2024-02-17-at-4.01.56-AM.png\" title=\"Screenshot-2024-02-17-at-4.01.56-AM.png\"><img src=\"/user_uploads/3121/cQBYzQxRVkejmy9NpPRkYhyw/Screenshot-2024-02-17-at-4.01.56-AM.png\"></a></div>",
        "id": 421998935,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708164126
    },
    {
        "content": "<p>That's so cool!!</p>",
        "id": 421998941,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708164138
    },
    {
        "content": "<p>Ok, I am realizing now that I didn't need to spend four hours on the constructions of the individual string manipulations if I just wanted to see this, but still it's very satisfying.</p>",
        "id": 421999203,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708164389
    },
    {
        "content": "<p>Ah, but I can see those manipulations written out as well by shift-clicking!</p>",
        "id": 421999280,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708164476
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/eZOdZGjRG_SryXK930DClxK_/Screenshot-2024-02-17-at-4.08.04-AM.png\">Screenshot-2024-02-17-at-4.08.04-AM.png</a><br>\n<a href=\"/user_uploads/3121/Ca1HlhEbssF98rBmrzz7u6pf/Screenshot-2024-02-17-at-4.09.22-AM.png\">Screenshot-2024-02-17-at-4.09.22-AM.png</a><br>\n<a href=\"/user_uploads/3121/n37_spMHeZnoroC9uegnJCeQ/Screenshot-2024-02-17-at-4.08.54-AM.png\">Screenshot-2024-02-17-at-4.08.54-AM.png</a><br>\n<a href=\"/user_uploads/3121/eE3WIreKDL8gTGagnhzC69Ei/Screenshot-2024-02-17-at-4.10.01-AM.png\">Screenshot-2024-02-17-at-4.10.01-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/eZOdZGjRG_SryXK930DClxK_/Screenshot-2024-02-17-at-4.08.04-AM.png\" title=\"Screenshot-2024-02-17-at-4.08.04-AM.png\"><img src=\"/user_uploads/3121/eZOdZGjRG_SryXK930DClxK_/Screenshot-2024-02-17-at-4.08.04-AM.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Ca1HlhEbssF98rBmrzz7u6pf/Screenshot-2024-02-17-at-4.09.22-AM.png\" title=\"Screenshot-2024-02-17-at-4.09.22-AM.png\"><img src=\"/user_uploads/3121/Ca1HlhEbssF98rBmrzz7u6pf/Screenshot-2024-02-17-at-4.09.22-AM.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/n37_spMHeZnoroC9uegnJCeQ/Screenshot-2024-02-17-at-4.08.54-AM.png\" title=\"Screenshot-2024-02-17-at-4.08.54-AM.png\"><img src=\"/user_uploads/3121/n37_spMHeZnoroC9uegnJCeQ/Screenshot-2024-02-17-at-4.08.54-AM.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/eE3WIreKDL8gTGagnhzC69Ei/Screenshot-2024-02-17-at-4.10.01-AM.png\" title=\"Screenshot-2024-02-17-at-4.10.01-AM.png\"><img src=\"/user_uploads/3121/eE3WIreKDL8gTGagnhzC69Ei/Screenshot-2024-02-17-at-4.10.01-AM.png\"></a></div>",
        "id": 421999446,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708164609
    },
    {
        "content": "<p>Time well-spent! Thanks this has been super fun!</p>",
        "id": 421999467,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708164647
    },
    {
        "content": "<p>Here is the code <a href=\"https://github.com/leanprover-community/mathlib4/pull/10655\">#10655</a></p>",
        "id": 421999795,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708164984
    },
    {
        "content": "<p>... and here's the VOD when it uploads <a href=\"https://youtu.be/ueFbfwVzBfI\">https://youtu.be/ueFbfwVzBfI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ueFbfwVzBfI\" href=\"https://youtu.be/ueFbfwVzBfI\"><img src=\"https://uploads.zulipusercontent.net/fb96ff34c49db5c54b25d92c50ab314a7a0ce7d5/68747470733a2f2f692e7974696d672e636f6d2f76692f756546626677567a4266492f64656661756c742e6a7067\"></a></div>",
        "id": 422000500,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708165518
    },
    {
        "content": "<p>This looks really cool! Congrats!</p>\n<p>It's a private video... and I don't have a google account, so I can't watch it.</p>",
        "id": 422000565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708165601
    },
    {
        "content": "<p>Thanks, I have now set the video to public (it's still uploading though, so I think it'll be another few minutes before it's available).</p>",
        "id": 422000606,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708165655
    },
    {
        "content": "<p>(Oh right, google makes you sign in to watch age restricted videos, that's annoying. I had age-restricted it because I swore once or twice, but it wasn't \"gratuitous\" so I've turned off the restriction, hopefully that makes it possible to view without a google account. It looks like the video file will process for an hour or so as well)</p>",
        "id": 422001016,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708166094
    },
    {
        "content": "<p>(It's now available, but only in very low quality; it's also 4h30, which is why uploading is taking a while!)</p>",
        "id": 422005408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708170491
    },
    {
        "content": "<p>I opened a PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10581\">#10581</a> to share the issues I am aware of. I would be happy to receive someone's help.</p>",
        "id": 422006649,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1708171707
    },
    {
        "content": "<p>Yeah, the low quality is unfortunate - the video on my computer is better. Google says that it <a href=\"https://support.google.com/youtube/answer/71674?hl=en\">might still be processing the higher quality versions</a>.</p>",
        "id": 422008978,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708174115
    },
    {
        "content": "<p>Ok video seems to have a higher quality option now.</p>\n<p>Going over it, it was overall a very good proving session. One thing I was caught up on for around three and a half minutes was <a href=\"https://youtu.be/ueFbfwVzBfI?si=41C3M_cHubziC8x4&amp;t=11276\">this error</a>, where it is highlighting the first line of the composition in red, when it feels like it should be highlighting the <code>()</code> at the bottom in red.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ueFbfwVzBfI\" href=\"https://youtu.be/ueFbfwVzBfI?si=41C3M_cHubziC8x4&amp;t=11276\"><img src=\"https://uploads.zulipusercontent.net/fb96ff34c49db5c54b25d92c50ab314a7a0ce7d5/68747470733a2f2f692e7974696d672e636f6d2f76692f756546626677567a4266492f64656661756c742e6a7067\"></a></div>",
        "id": 422013296,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708178307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span>   this is really cool. Is it possible to modify this to work for Mathlib 4's strict bicategories?</p>",
        "id": 432812295,
        "sender_full_name": "E. Dean Young",
        "timestamp": 1712884429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"559197\">Dean Young</span> <a href=\"#narrow/stream/113488-general/topic/String.20diagrams/near/432812295\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"438192\">Yuma Mizuno</span>   this is really cool. Is it possible to modify this to work for Mathlib 4's strict bicategories?</p>\n</blockquote>\n<p>Yes, it's pretty straightforward. I wish I will do it in the near future.</p>",
        "id": 432815500,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1712886813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span> <span class=\"user-mention\" data-user-id=\"560873\">@Shanghe Chen</span> and I are very interested</p>",
        "id": 432914403,
        "sender_full_name": "E. Dean Young",
        "timestamp": 1712931578
    },
    {
        "content": "<p>Now the string diagram widget for bicategories are available in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12107\">#12107</a>! You can use it by importing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Widget.StringDiagram</span>\n<span class=\"kn\">import</span> <span class=\"n\">ProofWidgets.Component.Panel.SelectionPanel</span>\n<span class=\"kn\">import</span> <span class=\"n\">ProofWidgets.Component.Panel.GoalTypePanel</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ProofWidgets</span>\n</code></pre></div>\n<p>and inserting <code>with_panel_widgets [SelectionPanel]</code> or <code>with_panel_widgets [GoalTypePanel]</code> at the beginning of the proof you are interested in.<br>\n<a href=\"/user_uploads/3121/9aU7dTfESt4_fUwS_NGuzBeL/2024-04-13-20-14-41.mp4\">2024-04-13-20-14-41.mp4</a></p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"/user_uploads/3121/9aU7dTfESt4_fUwS_NGuzBeL/2024-04-13-20-14-41.mp4\" title=\"2024-04-13-20-14-41.mp4\"><video preload=\"metadata\" src=\"/user_uploads/3121/9aU7dTfESt4_fUwS_NGuzBeL/2024-04-13-20-14-41.mp4\"></video></a></div>",
        "id": 433040438,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1713008513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/String.20diagrams/near/422013296\">said</a>:</p>\n<blockquote>\n<p>One thing I was caught up on for around three and a half minutes was <a href=\"https://youtu.be/ueFbfwVzBfI?si=41C3M_cHubziC8x4&amp;t=11276\">this error</a>, where it is highlighting the first line of the composition in red, when it feels like it should be highlighting the <code>()</code> at the bottom in red.</p>\n</blockquote>\n<p>Can you make a MWE of this issue? Smaller versions of the example seem to behave as desired, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span>\n  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">()</span> <span class=\"c1\">-- error highlight is here</span>\n</code></pre></div>\n<p>By the way, you note in the video that it's weird that the error highlight doesn't encompass the whole expression. It actually does, you can tell because it shows the error message when your cursor is anywhere in the expression, but the red squiggle<br>\nitself is truncated to the first line because it can be distracting and confusing to have a giant red squiggle over everything</p>",
        "id": 433041391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713009540
    },
    {
        "content": "<p>I made a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> at the time, it's in this <a href=\"#narrow/stream/270676-lean4/topic/error.20location.20bug\">thread</a> (note I posted the video back in February)</p>",
        "id": 433058689,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1713024822
    },
    {
        "content": "<p>Kyle Miller said at the time he was working on a fix. Based on how the MWE in the thread now seems to have the right error, it looks like he did fix it. Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> !</p>",
        "id": 433058791,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1713024941
    }
]