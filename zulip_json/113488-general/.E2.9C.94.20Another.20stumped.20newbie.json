[
    {
        "content": "<p>Why is <code>f</code> ok but <code>g</code> has a type error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">E</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n  <span class=\"bp\">|</span> <span class=\"n\">builtin</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n\n<span class=\"c1\">-- def n (_e: Expr) : Except String Expr := throw \"TODO\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"s2\">\"TODO\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e1</span><span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">←</span> <span class=\"n\">n</span> <span class=\"n\">e1</span>\n  <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">c1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">e1</span><span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">←</span> <span class=\"n\">n</span> <span class=\"n\">e1</span>\n  <span class=\"c1\">--       ^ argument E has type Type 1 : Type 2 but is expected to have type Type : Type 1</span>\n  <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 430921134,
        "sender_full_name": "Mark Mendel",
        "timestamp": 1712121485
    },
    {
        "content": "<p>I don't get an error. Is that your complete file?</p>",
        "id": 430921983,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712122188
    },
    {
        "content": "<p>Gack! It was a simplified version of my file that <em>did</em> show the same error when I created my post.  But now it doesn't.  I'll have to sleep on it and try again tomorrow.   Thanks for replying.</p>",
        "id": 430923104,
        "sender_full_name": "Mark Mendel",
        "timestamp": 1712123017
    },
    {
        "content": "<p>It shows the error now.  I believe the error is the universe mismatch of the monadic type, but I have no idea how to fix it.</p>",
        "id": 430988638,
        "sender_full_name": "Mark Mendel",
        "timestamp": 1712146403
    },
    {
        "content": "<p>The fact that <code>E.builtin</code> quantifies over types, means that <code>E</code> lives in <code>Type 1</code>, the second lowest type universe. <br>\nThis causes a universe issue at the end: <code>n e1</code> might throw an error from a complicated type in <code>Type 1</code>, but you promise to throw errors only in <code>Bool</code>. One option to work around this is to make <code>α</code> a parameter in <code>E</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">builtin</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- def n (_e: Expr) : Except String Expr := throw \"TODO\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"s2\">\"TODO\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e1</span><span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">n</span> <span class=\"n\">e1</span>\n  <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">c1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">e1</span><span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">n</span> <span class=\"n\">e1</span>\n  <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 430991011,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712147165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"706751\">Mark Mendel</span> has marked this topic as resolved.</p>",
        "id": 431512663,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712319765
    }
]