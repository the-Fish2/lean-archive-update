[
    {
        "content": "<p>What's happening to cause this confusing message from <code>exact?</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.UniformSpace.Pi</span>\n\n<span class=\"c1\">-- or: \"import Mathlib\"</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">xxx</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>\n<span class=\"c1\">-- function expected</span>\n<span class=\"c1\">--   @ι' (φ j)</span>\n</code></pre></div>\n<p>When one has forgotten what <code>of_not_not</code> is called, <em>this</em> is sad, but at least the message makes sense; just one of life's little disappointments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">xxx</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>\n<span class=\"c1\">-- `exact?` could not close the goal. Try `apply?` to see partial suggestions.</span>\n</code></pre></div>",
        "id": 428327293,
        "sender_full_name": "Richard Copley",
        "timestamp": 1711113208
    },
    {
        "content": "<p>With the online server, both give the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `exact?` could not close the goal. Try `apply?` to see partial suggestions.</span>\n</code></pre></div>",
        "id": 428327658,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711113334
    },
    {
        "content": "<p>Note that you can get an actual suggestion with the iff version and no imports!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">xxx</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>  <span class=\"c1\">-- `Try this: exact Classical.not_not`</span>\n</code></pre></div>",
        "id": 428328261,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711113530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/function.20expected.3A.20.40.CE.B9'.20.28.CF.86.20j.29/near/428327658\">said</a>:</p>\n<blockquote>\n<p>With the online server, both give the error message<br>\n<code>-- `exact?` could not close the goal. Try `apply?` to see partial suggestions.</code></p>\n</blockquote>\n<p>So they do, thanks! This was fixed 12 days ago with the merger of <a href=\"https://github.com/leanprover-community/mathlib4/pull/10644\">#10644</a>, I think.</p>",
        "id": 428329335,
        "sender_full_name": "Richard Copley",
        "timestamp": 1711113943
    },
    {
        "content": "<p>Why did this pr affect <code>exact?</code>?</p>",
        "id": 429768759,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1711504499
    },
    {
        "content": "<p>This bug was subtle, but was fixed in <a href=\"https://github.com/leanprover/lean4/pull/3610\">lean4#3610</a>.  It should be fixed by updating to Lean v4.7.0-rc2 (or later).</p>",
        "id": 429769990,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711505181
    },
    {
        "content": "<p>What was happening was library search when converted to lazy discriminator trees had a bug where different free variables were assigned the same name.  They didn't appear in the same local context, but I wasn't clearing some caches when swapping out the local context so the cache contained invalid data.</p>\n<p>It was pretty tricky to actually trigger the bug though as it required very specific confusion and caching was only shared across a few modules when library search built the initial lazy discrimination tree.  I suspect the changes in that PR happened to change code in a way that re-hid the underlying initialization bug.</p>",
        "id": 429770724,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711505859
    },
    {
        "content": "<p>Thank you for the explanation.</p>",
        "id": 429777510,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1711511754
    }
]