[
    {
        "content": "<p>Not sure if this is the right place to ask. I wanted to try Lean and decided to start with <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C01_Introduction.html\">mathematics_in_lean</a>. So I was following <a href=\"https://leanprover-community.github.io/install/project.html#working-on-an-existing-project\">installation instructions</a> and after running <code>lake exe cach get</code> got this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span> <span class=\"n\">to</span> <span class=\"bp\">'./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">std4</span> <span class=\"n\">to</span> <span class=\"bp\">'./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Qq</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">quote4</span> <span class=\"n\">to</span> <span class=\"bp\">'./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">aesop</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">aesop</span> <span class=\"n\">to</span> <span class=\"bp\">'./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">proofwidgets</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets4</span> <span class=\"n\">to</span> <span class=\"bp\">'./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">buildArchive'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">field</span> <span class=\"n\">of</span> <span class=\"kd\">structure</span> <span class=\"bp\">'</span><span class=\"n\">Lake.PackageConfig'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div>\n<p>I was unable to find anything regarding that <code>buildArchive</code> issue. What should I do?</p>",
        "id": 422135339,
        "sender_full_name": "caralice",
        "timestamp": 1708295866
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathematics_in_lean.git</span>\n<span class=\"n\">cd</span> <span class=\"n\">mathematics_in_lean</span><span class=\"bp\">/</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n</code></pre></div>\n<p>works fine for me. Is this what you did? If so, what is the output of <code>elan show</code>? If you only just installed Lean then you might want to reboot or something, delete your previous attempt to install <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> completely, and then try again.</p>",
        "id": 422136025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708296531
    },
    {
        "content": "<p>FWIW my <code>elan show</code> output is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ elan show\ninstalled toolchains\n--------------------\n\nleanprover/lean4:nightly-2023-08-19\nleanprover/lean4:nightly-2024-02-01\nleanprover/lean4:stable\nleanprover/lean4:v4.3.0\nleanprover/lean4:v4.3.0-rc2\nleanprover/lean4:v4.4.0\nleanprover/lean4:v4.5.0\nleanprover/lean4:v4.5.0-rc1 (default)\nleanprover/lean4:v4.6.0-rc1\n\nactive toolchain\n----------------\n\nleanprover/lean4:v4.5.0-rc1 (default)\nLean (version 4.5.0-rc1, commit b614ff1d12bc, Release)\n</code></pre></div>",
        "id": 422136237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708296731
    },
    {
        "content": "<p>I installed Lean with nix (nixpkgs.lean4) so I do not have elan. Is elan a hard requirement?</p>",
        "id": 422136952,
        "sender_full_name": "caralice",
        "timestamp": 1708297401
    },
    {
        "content": "<p>I'm sorry, that question is beyond my pay grade -- I have no idea what nix is. Your error seems to indicate some mismatch with lean versions and elan is precisely the tool which sorts this sort of thing out.</p>",
        "id": 422137065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708297502
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># mathematics_in_lean on  master [!+] via ❄  impure (nix-shell-env)</span>\n<span class=\"p\">;</span><span class=\"w\"> </span>lake<span class=\"w\"> </span>--version\nLake<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">5</span>.0.0-v4.5.0<span class=\"w\"> </span><span class=\"o\">(</span>Lean<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">4</span>.5.0<span class=\"o\">)</span>\n\n<span class=\"c1\"># mathematics_in_lean on  master [!+] via ❄  impure (nix-shell-env)</span>\n<span class=\"p\">;</span><span class=\"w\"> </span>lean<span class=\"w\"> </span>--version\nLean<span class=\"w\"> </span><span class=\"o\">(</span>version<span class=\"w\"> </span><span class=\"m\">4</span>.5.0,<span class=\"w\"> </span>commit<span class=\"w\"> </span>v4.5.0,<span class=\"w\"> </span>Release<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 422137596,
        "sender_full_name": "caralice",
        "timestamp": 1708298064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"692637\">caralice</span> <a href=\"#narrow/stream/113488-general/topic/Problems.20with.20mathematics_in_lean/near/422136952\">said</a>:</p>\n<blockquote>\n<p>I installed Lean with nix (nixpkgs.lean4) so I do not have elan. Is elan a hard requirement?</p>\n</blockquote>\n<p>Nix packages seem to be maintained by a handful of nix enthusiasts. Elan is the textbook tool for handling toolchain installations. I recall <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>  knows a lot about nix.</p>",
        "id": 422137604,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708298073
    },
    {
        "content": "<p>that being said, your problem is not caused by not having elan.</p>",
        "id": 422137716,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708298215
    },
    {
        "content": "<p>Try deleting <code>./lake-manifest.json</code> and running <code>lake exe cache get!</code> again.</p>",
        "id": 422137857,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708298361
    },
    {
        "content": "<p>MIL is currently on toolchain 4.6.0-rc1</p>",
        "id": 422137876,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708298397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Problems.20with.20mathematics_in_lean/near/422137604\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"692637\">caralice</span> <a href=\"#narrow/stream/113488-general/topic/Problems.20with.20mathematics_in_lean/near/422136952\">said</a>:</p>\n<blockquote>\n<p>I installed Lean with nix (nixpkgs.lean4) so I do not have elan. Is elan a hard requirement?</p>\n</blockquote>\n<p>Nix packages seem to be maintained by a handful of nix enthusiasts. Elan is the textbook tool for handling toolchain installations. I recall <span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span>  knows a lot about nix.</p>\n</blockquote>\n<p>Well AFAICS elan is not unlike rustup which does a good job managing toolchains by itself but its functionality is better covered by a package manager. While managing Rust versions on, say, Arch Linux without rustup is expected to be hard, Nix has an <a href=\"https://github.com/oxalica/rust-overlay\">overlay</a> that removes the need in rustup.<br>\nAnyway, I'd expect everything to work fine on a single version.</p>",
        "id": 422137933,
        "sender_full_name": "caralice",
        "timestamp": 1708298425
    },
    {
        "content": "<p>So if you are inside the MIL folder and getting toolchain 4.5.0, I think that's where the trouble is</p>",
        "id": 422137955,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708298464
    },
    {
        "content": "<p>Regardless of the systemwide toolchain, the toolchain inside a project is fixed by the lean-toolchain file</p>",
        "id": 422137974,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708298497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Problems.20with.20mathematics_in_lean/near/422137876\">said</a>:</p>\n<blockquote>\n<p>MIL is currently on toolchain 4.6.0-rc1</p>\n</blockquote>\n<p>Alright, I'll try using that.</p>",
        "id": 422137980,
        "sender_full_name": "caralice",
        "timestamp": 1708298518
    },
    {
        "content": "<p>Is nix overriding the default toolchain that lake uses  in a project folder by presenting only v4.5.0? Can it even do that? I would be extremely surprised if nix could do such things and lake wasn't demanding the toolchain of the project folder  or alternatively just giving up.</p>",
        "id": 422138057,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708298578
    },
    {
        "content": "<p>I am surprised by this output. Did you by any chance clone mathematics_in_lean into a folder that already has a <code>lean-toolchain</code> file?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"692637\">caralice</span> <a href=\"#narrow/stream/113488-general/topic/Problems.20with.20mathematics_in_lean/near/422137596\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># mathematics_in_lean on  master [!+] via ❄  impure (nix-shell-env)</span>\n<span class=\"p\">;</span><span class=\"w\"> </span>lake<span class=\"w\"> </span>--version\nLake<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">5</span>.0.0-v4.5.0<span class=\"w\"> </span><span class=\"o\">(</span>Lean<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">4</span>.5.0<span class=\"o\">)</span>\n\n<span class=\"c1\"># mathematics_in_lean on  master [!+] via ❄  impure (nix-shell-env)</span>\n<span class=\"p\">;</span><span class=\"w\"> </span>lean<span class=\"w\"> </span>--version\nLean<span class=\"w\"> </span><span class=\"o\">(</span>version<span class=\"w\"> </span><span class=\"m\">4</span>.5.0,<span class=\"w\"> </span>commit<span class=\"w\"> </span>v4.5.0,<span class=\"w\"> </span>Release<span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422138141,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708298662
    },
    {
        "content": "<p>(I think it would be good if we were more emphatic in suggesting that new Lean users <strong>do not use Nix</strong>. :-)</p>",
        "id": 422138981,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708299520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Problems.20with.20mathematics_in_lean/near/422138981\">said</a>:</p>\n<blockquote>\n<p>(I think it would be good if we were more emphatic in suggesting that new Lean users <strong>do not use Nix</strong>. :-)</p>\n</blockquote>\n<p>alternatively we could create a stream for nix users and enthusiasts and direct nix questions there. I understand why people get excited about nix and in some sense we are re-inventing the wheel with lake and elan. Creating a separate stream allows nix enthusiasts to  help each other while also making it very clear that nix is currently a niche with no official support.</p>",
        "id": 422139278,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708299830
    },
    {
        "content": "<p>I would note that, while probably not what most nix users would prefer, you can use elan within a nix shell pretty painlessly (elan is on nixpkgs already).</p>\n<p>While Lean + Nix is definitely a niche, I'd guess there are a few of us out here! I would definitely support <span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span>'s idea of a nix stream. I'm not a nix expert either, but would be interested in seeing if there's enough interest to develop more support.</p>",
        "id": 422141336,
        "sender_full_name": "Chris Henson",
        "timestamp": 1708301752
    },
    {
        "content": "<p>I renamed the thread since it has nothing to do with mathematics in Lean and this will be easier to find.</p>",
        "id": 422150712,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708310629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Problems.20with.20nix/near/422138981\">said</a>:</p>\n<blockquote>\n<p>(I think it would be good if we were more emphatic in suggesting that new Lean users <strong>do not use Nix</strong>. :-)</p>\n</blockquote>\n<p>Well, by all means, do use nix (I certainly do), but do it to obtain <code>elan</code> (which is included in nixpkgs and works in a nix shell), and take it from there. That's what I do.</p>\n<p>As soon as there are actual <em>applications</em> written in lean that need to be packaged for end users we need a better story. Until then, this is the best advice I can give to people wanting to use lean.</p>",
        "id": 422174366,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1708327478
    },
    {
        "content": "<p>Yes, it is no different than any other distribution in that respect</p>",
        "id": 422174550,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1708327591
    },
    {
        "content": "<p>How does one get a new stream created for nix users?</p>",
        "id": 422268615,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708359529
    }
]