[
    {
        "content": "<p>Why do I have to manually specify these implicit arguments to <code>foldl_descend</code> when using <code>rw</code> tactic?</p>\n<p>If I try to use <code>... := by rw [fold_descend]</code> in <code>foldl_eq_foldr</code> I get two goals, exactly of types <code>f_comm</code> and <code>f_assoc</code> which I can then regularly close with <code>assumption</code>.</p>\n<p>What am I missing here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foldl_descend</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">f_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">f_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n    <span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">head</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">tail</span> <span class=\"n\">generalizing</span> <span class=\"n\">init</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">h₂</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">h₂</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"n\">tail</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.foldl</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">head</span> <span class=\"n\">h₂</span><span class=\"o\">))</span> <span class=\"n\">tail</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">h₂</span> <span class=\"n\">head</span><span class=\"o\">))</span> <span class=\"n\">tail</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"n\">f</span> <span class=\"n\">h₂</span> <span class=\"n\">head</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"n\">tail</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">f_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">List.foldl</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">head</span> <span class=\"n\">tail</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">h₂</span><span class=\"o\">)]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">head</span> <span class=\"n\">tail</span><span class=\"o\">))</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">ih</span> <span class=\"n\">h₂</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">h₂</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"n\">tail</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.foldl</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">head</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"n\">tail</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"n\">f</span> <span class=\"n\">head</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">List.foldl</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foldl_eq_foldr</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">f_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">f_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n    <span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">List.foldr</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">ha</span> <span class=\"n\">l</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rhs</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">List.foldr</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">List.foldl</span>\n    <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">hb</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n          <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">hb</span> <span class=\"n\">tail</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">foldl_descend</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f_comm</span> <span class=\"n\">f_assoc</span><span class=\"o\">]</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">hb</span> <span class=\"n\">tail</span><span class=\"o\">))</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f_assoc</span><span class=\"o\">]</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">hb</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"n\">ha</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f_comm</span><span class=\"o\">]</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">hb</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"n\">ha</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">f_assoc</span><span class=\"o\">]</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">List.foldl</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">foldl_descend</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f_comm</span> <span class=\"n\">f_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 438497625,
        "sender_full_name": "Dušan Gvozdenović",
        "timestamp": 1715659755
    },
    {
        "content": "<p>Lean will automatically fill in implicit arguments, but sometimes it fills in implicit arguments differently from how the user may have intended. This means that sometimes you need to specify implicit arguments in order to get the expression you actually want rewrite with.</p>",
        "id": 438709260,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715743394
    },
    {
        "content": "<p>Thanks, but I’m struggling to understand what <em>sometimes</em> means in this case. When? How does the algorithm work?</p>\n<p>Given that we have unique variables in the context that exactly match the type of those of implicit parameters (could there be any other?) why do we have to be explicit about them?</p>\n<p>Another observation is that I get the same result (need to manually close the goal(s)) when trying to do any of these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">foldl_descend</span> <span class=\"n\">α</span> <span class=\"n\">init</span> <span class=\"n\">hb</span> <span class=\"n\">tail</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">foldl_descend</span> <span class=\"n\">α</span> <span class=\"n\">init</span> <span class=\"n\">hb</span> <span class=\"n\">tail</span> <span class=\"n\">f</span> <span class=\"n\">f_comm</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">foldl_descend</span> <span class=\"n\">α</span> <span class=\"n\">init</span> <span class=\"n\">hb</span> <span class=\"n\">tail</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">f_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 438720915,
        "sender_full_name": "Dušan Gvozdenović",
        "timestamp": 1715748070
    },
    {
        "content": "<p>Is this not related to <a href=\"#narrow/stream/428973-nightly-testing/topic/.2312902.2C.20adaptations.20for.20nightly-2024-05-14/near/438566016\">https://leanprover.zulipchat.com/#narrow/stream/428973-nightly-testing/topic/.2312902.2C.20adaptations.20for.20nightly-2024-05-14/near/438566016</a> ?</p>",
        "id": 438728190,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715751820
    },
    {
        "content": "<p>I don't think so; what's referred to there is relevant for problems that have to switch back and forth between unification and synthesis, but it's not clear to me that's happening here. </p>\n<p>You could always try this code out of nightly-testing, now that the sandbox supports that!</p>",
        "id": 438732104,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715754006
    },
    {
        "content": "<p>Maybe I am confused, but why should <code>rw</code> close those side-goals?  <code>rw</code> does not look at the local context to fill in missing hypotheses, right?  So, it is not aware of an assumption that would close its side-goals.</p>",
        "id": 438734680,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715755249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>  Oh ok, what you are saying makes sense. I was under impression that it does look at the local context too (still learning). Thanks!</p>",
        "id": 438750339,
        "sender_full_name": "Dušan Gvozdenović",
        "timestamp": 1715761376
    },
    {
        "content": "<p>To expand a little on my comment, my understanding of <code>rw</code> is that it looks at the expression that you point it to, scans it searching for places where your equality/iff could be used and does the substitution.  What it can match just from this information, it tries to match, what it cannot, it leaves as side-goal.</p>\n<p>At least roughly, this is what it does.</p>\n<p>The matching is up to syntactic equality, which means (almost) that it will only happen on expression that are identically-printed (and even then, not always!).  However, nothing in the mechanism that <code>rw</code> uses looks at anything other than the target location and the given equality with which you want to rewrite.</p>\n<p>There are lots of surrounding subtleties, but this should be the gist of it.</p>",
        "id": 438783707,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715773704
    },
    {
        "content": "<p>In your examples, you can see that it did not leave <code>f</code> as a side-goal, since there was enough surrounding information in the target expression to deduce what <code>f</code> must have been, but the target has no memory/information about <code>f_comm, f_assoc</code>, so <code>rw</code> leaves that to you to fill in.</p>",
        "id": 438784158,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715773861
    }
]