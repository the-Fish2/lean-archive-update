[
    {
        "content": "<p>In order to prove that Zorn's Lemma implies the Well-Ordering Principle, I need to demonstrate that a set F is inductive. To do this, I have to define a <code>WellOrderedSet</code> structure and <code>F</code> as a set of this type. Now, in order to find an upper bound, I have to order the elements of <code>F</code>, and for this, I must create an instance of <code>PartialOrder</code>, but I am unable to complete the proof. I will leave here what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Order.Defs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">γ</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">is_chain</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_well_ordered</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">γ</span>  <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">Nonempty</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n<span class=\"kd\">def</span> <span class=\"n\">well_ordered_principle</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">γ</span>  <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">is_well_ordered</span> <span class=\"n\">γ</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">γ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">axiom_of_choice</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"n\">i</span>\n\n<span class=\"c1\">--def inductive_set (S : Set α) : Prop := ∀ (c : Set α), c ⊆ S → (∀ (x y : α), x ∈ c → y ∈ c → x ≤ y ∨ y ≤ x) → ∃ (ub : α), ∀ (x : α), x ∈ c → x ≤ ub</span>\n<span class=\"kd\">def</span> <span class=\"n\">inductive_set</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">is_chain</span> <span class=\"n\">γ</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ub</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ub</span>\n<span class=\"kd\">def</span> <span class=\"n\">zorn</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">inductive_set</span> <span class=\"n\">S</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">WellOrderedSet</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_well</span> <span class=\"o\">:</span> <span class=\"n\">is_well_ordered</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">WellOrderedSet</span> <span class=\"n\">γ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"o\">(</span><span class=\"n\">WellOrderedSet</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.s</span> <span class=\"bp\">⊆</span> <span class=\"n\">y.s</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x.s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ha'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">y.s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">x.s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">hb'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">y.s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x.r</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">y.r</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.s</span> <span class=\"bp\">⊂</span> <span class=\"n\">y.s</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x.s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ha'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">y.s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">x.s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">hb'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">y.s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x.r</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">y.r</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb'</span><span class=\"o\">⟩)</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">imp_self</span><span class=\"o\">,</span> <span class=\"n\">implies_true</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Set.Subset.refl</span>\n    <span class=\"n\">trivial</span>\n\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">hxy</span> <span class=\"n\">hyz</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Set.Subset.trans</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">hxy</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">hyz</span><span class=\"o\">)</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">ha'</span> <span class=\"n\">hb</span> <span class=\"n\">hb'</span> <span class=\"n\">hxr</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.right</span> <span class=\"n\">hyz</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">hxy</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">ha'</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">hxy</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"n\">hb'</span>\n    <span class=\"n\">exact</span> <span class=\"n\">And.right</span> <span class=\"n\">hxy</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">hxy</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">hxy</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"n\">hxr</span>\n\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n    <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n      <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n        <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n          <span class=\"n\">exact</span> <span class=\"n\">And.left</span> <span class=\"n\">h.1</span>\n        <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">ha'</span> <span class=\"n\">hb</span> <span class=\"n\">hb'</span> <span class=\"n\">hxr</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n        <span class=\"n\">exact</span> <span class=\"n\">And.right</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">h.1</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">h.1</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"n\">hxr</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h_le_yx</span>\n      <span class=\"k\">have</span> <span class=\"n\">not_h_s</span> <span class=\"o\">:=</span> <span class=\"n\">And.right</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n      <span class=\"k\">have</span> <span class=\"n\">h_s</span> <span class=\"o\">:=</span> <span class=\"n\">And.left</span> <span class=\"n\">h_le_yx</span>\n      <span class=\"n\">contradiction</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"n\">le_xy</span> <span class=\"o\">:=</span> <span class=\"n\">h.1.1</span>\n      <span class=\"k\">have</span> <span class=\"n\">lt_xy</span> <span class=\"o\">:=</span> <span class=\"n\">h.2</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">lt_xy</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">not_and_or</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">lt_xy</span>\n      <span class=\"n\">apply</span> <span class=\"n\">HasSubset.Subset.ssubset_of_not_subset</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_xy</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Or.elim</span> <span class=\"n\">lt_xy</span>\n      <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">this</span>\n        <span class=\"n\">exact</span> <span class=\"n\">this</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h.1.2</span>\n\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">le_xy</span> <span class=\"n\">le_yx</span>\n    <span class=\"k\">have</span> <span class=\"n\">s_eq</span> <span class=\"o\">:</span> <span class=\"n\">x.s</span> <span class=\"bp\">=</span> <span class=\"n\">y.s</span> <span class=\"o\">:=</span> <span class=\"n\">Set.Subset.antisymm</span> <span class=\"n\">le_xy.1</span> <span class=\"n\">le_yx.1</span>\n    <span class=\"k\">have</span> <span class=\"n\">r_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x.s</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">x.s</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x.r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">y.r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n      <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n        <span class=\"n\">exact</span> <span class=\"n\">le_xy.2</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_yx.2</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">le_xy.1</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_xy.1</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n\n    <span class=\"n\">rcases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x.s</span><span class=\"o\">,</span><span class=\"n\">x.r</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y.s</span><span class=\"o\">,</span><span class=\"n\">y.r</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"n\">exact</span> <span class=\"n\">s_eq</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If I manage to make progress in any aspect, I will update the information accordingly.</p>",
        "id": 431132908,
        "sender_full_name": "Santiago Mourenza Rivero",
        "timestamp": 1712161981
    }
]