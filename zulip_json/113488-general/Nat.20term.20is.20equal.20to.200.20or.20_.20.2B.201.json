[
    {
        "content": "<p>As part of teaching, I'm thinking about the following issue. In the middle of a proof, I have <code>(something complicated) : Nat</code>, and want to divide into cases where the complicated expression is <code>0</code> or equal to <code>_ + 1</code>, with minimal fuss. Something like the below is more fuss than I'd like, since it requires typing out the statement that I need fully, as well as a proof, and it includes the word 'induction', which is likely confusing to a mathematically literate novice. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">hak</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">-- solve the case `f a = 0`</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- solve the case `f a = k + 1`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>So my real question is why the following isn't in mathlib. Is there an approach to the above that I'm missing? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.exists_eq_zero_or_add_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>I'm also having an analogous issue splitting an <code>ENat</code> into the infinite and finite cases, where the relevant short proof is a bit longer and more annoying.</p>",
        "id": 434753075,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1713793332
    },
    {
        "content": "<p>Well, <code>induction n</code> or <code>cases n</code> is exactly this</p>",
        "id": 434753372,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713793412
    },
    {
        "content": "<p>So what would that look like applied in the first example?</p>",
        "id": 434753473,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1713793437
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- solve the case `f a = 0`</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- solve the case `f a = k + 1`</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 434753779,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713793508
    },
    {
        "content": "<p>That gives me <code>zero</code> and <code>succ</code> instead of <code>0</code> and <code>+1</code>. Can we not do better for the purposes of teaching?</p>",
        "id": 434754101,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1713793576
    },
    {
        "content": "<p>The approach also does annoying things that need rewriting in the <code>ENat</code> case.</p>",
        "id": 434754467,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1713793669
    },
    {
        "content": "<p>I think this may be fixed in an upcoming version of lean for Nat. For ENat you can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ENat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ENat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"n\">ENat.recTopCoe</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">top</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">coe</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 434755543,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713793917
    },
    {
        "content": "<p>How would I do this? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">htop</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_coe</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"n\">ENat.recTopCoe</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">top</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">htop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">coe</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- Nothing like `f a = ↑n` is in the context here.</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 434757456,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1713794323
    },
    {
        "content": "<p><code>cases h : f a using ENat.recTopCoe with</code></p>",
        "id": 434758644,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713794567
    },
    {
        "content": "<p>Right - it's the annotation <code>h : _</code> in <code>cases</code> that I've been missing. That answers my question - thanks!</p>",
        "id": 434758937,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1713794637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329425\">Peter Nelson</span> <a href=\"#narrow/stream/113488-general/topic/Nat.20term.20is.20equal.20to.200.20or.20_.20.2B.201/near/434754101\">said</a>:</p>\n<blockquote>\n<p>That gives me <code>zero</code> and <code>succ</code> instead of <code>0</code> and <code>+1</code>. Can we not do better for the purposes of teaching?</p>\n</blockquote>\n<p>Just to confirm, we do have this improvement in the next release of Lean. You'll see this for <code>induction</code>/<code>cases</code>/<code>rcases</code>/<code>obtain</code>/<code>rintro</code></p>",
        "id": 434763469,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713795626
    },
    {
        "content": "<p>Would it make sense to let <code>Cases</code> act more like <code>Match</code> when the arms (<code>| _ =&gt; ,,,</code>) are present?  (Ie, give them full pattern matching and exhaustiveness checking)</p>",
        "id": 434794881,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1713803433
    },
    {
        "content": "<p>Why not just use <code>match</code> in that case?</p>",
        "id": 434841305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713818264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Nat.20term.20is.20equal.20to.200.20or.20_.20.2B.201/near/434841305\">said</a>:</p>\n<blockquote>\n<p>Why not just use <code>match</code> in that case?</p>\n</blockquote>\n<p>Yeah, that's fair enough. I suppose it avoids switching from tactics to terms? Lessons some cognitive load, but it just pushes it down the line to tactics like <code>inductive</code>.</p>\n<p>Probably not a good enough reason though.</p>",
        "id": 434888495,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1713840076
    },
    {
        "content": "<p>I'd suggest not thinking of <code>match</code> as \"switching to terms\". Note that when you use <code>match</code> in tactic mode, you are still in tactic mode after the <code>=&gt;</code>.</p>",
        "id": 434891628,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713841682
    }
]