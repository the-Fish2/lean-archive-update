[
    {
        "content": "<p>I've got a problem defining an <code>inductive</code> datatype. A quick search through Zulip showed that this might be a kernel bug, or it might be tied to type parameters versus type indexes (which I don't entirely understand).</p>\n<p>Here's a MWE (on <code>leanprover/lean4:v4.8.0-rc2</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">OtherType</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">MyType</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">base</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">MyType</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">olist</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OtherType</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">MyType</span>\n</code></pre></div>\n<p>The error I get is <code>(kernel) arg #1 of 'MyType.olist' contains a non valid occurrence of the datatypes being declared</code>. The funny thing is that replacing <code>OtherType</code> with <code>List</code> makes the error go away. Yet <code>List</code> is the definition for <code>OtherType</code>!</p>\n<p>What's the fix here? And why is Lean having trouble with this?</p>",
        "id": 440414939,
        "sender_full_name": "Cayden Codel",
        "timestamp": 1716507581
    },
    {
        "content": "<p>The fix is to replace <code>OtherType</code> with <code>List</code>! Lean's positivity checker won't unfold definitions.</p>",
        "id": 440432550,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716521618
    },
    {
        "content": "<p>Perhaps I should clarify. My actual use-case does not only use wrappers for <code>List</code>, but to produce a MWE, a <code>List</code> wrapper was sufficient. In actuality, I'm trying to define an inductive type that uses a variety of type constructors (<code>List</code>, <code>Array</code>, and constructors I defined). The error goes away when I use <code>List</code> and <code>Array</code>, but persists if I use one of the type constructors I defined. What is it about <code>List</code> and <code>Array</code> that makes them special (or rather, what is it about a wrapper around <code>List</code>) that prevents the positivity checker from working?</p>\n<p>For example, replacing <code>List</code> with <code>Multiset</code> from mathlib also causes the error. Alternatively, defining the wrapper as</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">OtherType</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">OtherType</span><span class=\"w\"> </span><span class=\"n\">α</span>\n</code></pre></div>\n<p>fixes the problem.</p>",
        "id": 440570383,
        "sender_full_name": "Cayden Codel",
        "timestamp": 1716581153
    },
    {
        "content": "<p>Definitions and inductive declarations are different kernel objects. <code>Multiset</code> and <code>OtherType</code> are definitions with values that reference an inductive declaration, they're not themselves inductive declarations. <code>List</code> and <code>Array</code> are inductive declarations.</p>\n<p>Some definitions in this position can be reduced if they're marked properly, for example this works, but <code>Id'</code> does not  reference an inductive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Id'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">type</span>\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">MyType</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">base</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">MyType</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">olist</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Id'</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\">  </span><span class=\"n\">MyType</span>\n</code></pre></div>\n<p>Your examples involve nested inductives, which are more complex. I'd have to step through it, but I think your problem stems from the fact that the procedure to create temporary auxiliary declarations for the container types does not attempt to unfold at all, so it doesn't get replaced/specialized, which later leads to the positivity failure.</p>",
        "id": 440575099,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1716583551
    },
    {
        "content": "<p>Ah, that is clear. Right now the specific types I need to use are up in the air, but I'll keep in mind that <code>inductive</code> gets unfolded, while <code>def</code> needs a <code>@[reducible]</code> tag. Thanks!</p>",
        "id": 440575451,
        "sender_full_name": "Cayden Codel",
        "timestamp": 1716583729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424407\">Cayden Codel</span> has marked this topic as resolved.</p>",
        "id": 440575472,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716583738
    }
]