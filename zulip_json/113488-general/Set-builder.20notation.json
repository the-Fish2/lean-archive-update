[
    {
        "content": "<p>I have a pet peeve regarding the set-builder notation in the Infoview.<br>\nThere seem to be some technical limitations that prevent Infoview from displaying more than one token on the left from <code>|</code> in the set definition.<br>\nFor example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Canonical.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.UpperLower.Basic</span>\n\n<span class=\"sd\">/-- A canonically ordered additive cancellative commutative monoid is</span>\n<span class=\"sd\">    a canonically ordered additive commutative monoid in which</span>\n<span class=\"sd\">    addition is cancellative. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">CanonicallyOrderedAddCancelCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">CanonicallyOrderedAddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">OrderedCancelAddCommMonoid</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CanonicallyOrderedAddCancelCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addMink</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">UpperSet</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UpperSet</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨{</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">},</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">cd</span> <span class=\"n\">hc</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span> <span class=\"bp\">⊢</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">eq_c</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hc</span>\n    <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span>\n    <span class=\"k\">have</span> <span class=\"n\">ac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_add_le_left</span> <span class=\"n\">eq_c.le</span>\n    <span class=\"k\">have</span> <span class=\"n\">ad</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">ac.trans</span> <span class=\"n\">cd</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">d_eq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_add_of_le</span> <span class=\"n\">ad</span>\n    <span class=\"n\">use</span> <span class=\"n\">b'</span>\n    <span class=\"k\">have</span> <span class=\"n\">bb'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">eq_c</span><span class=\"o\">,</span> <span class=\"n\">d_eq</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_iff_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">cd</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">y.upper'</span> <span class=\"n\">bb'</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">d_eq.symm</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p>When I click at the very beginning of the proof that <code>{ a + b | (a ∈ x) (b ∈ y) }</code> is upper set, I get this ugly view:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">CanonicallyOrderedAddCancelCommMonoid</span> <span class=\"n\">M</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">UpperSet</span> <span class=\"n\">M</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">IsUpperSet</span> <span class=\"o\">{</span><span class=\"n\">x_1</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x_1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>This is essentially written as a predicate on <code>M</code> but displayed in the set-builder syntax.<br>\nInstead, I would like to see one of the following (ordered by \"what I would like best\" first):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n<span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">True</span> <span class=\"o\">}</span>\n<span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n<span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x_1</span>\n</code></pre></div>\n<p>This is the end of my rant. I'll fully understand if the answer is \"things are difficult; nobody will change it\".</p>",
        "id": 410420793,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703848087
    },
    {
        "content": "<p>What if the answer is \"learn how to fix it and then fix it yourself\" :-)</p>",
        "id": 410420890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703848148
    },
    {
        "content": "<p>Then I'll ask for study materials to learn the right toolkit!</p>",
        "id": 410420945,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703848191
    },
    {
        "content": "<p>However, I will be sufficiently at peace if I just hear that somebody tried to do it but it was too hard.</p>",
        "id": 410421159,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703848323
    },
    {
        "content": "<p>Is there a simple example where it <em>does</em> do what you expect?</p>",
        "id": 410433425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703857033
    },
    {
        "content": "<p>Sure!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 410435154,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703858364
    },
    {
        "content": "<p>That's normal set-builder notation, not the version with a function on the left of the <code>|</code>.</p>",
        "id": 410435774,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703858670
    },
    {
        "content": "<p>Yes.</p>",
        "id": 410436210,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703858976
    },
    {
        "content": "<p>I think it would be worth taking a census of real-world set builder notations from the literature and then using this to come up with a design for the Lean notations. We cover a lot of the cases I think, but this could really add some polish to sets in mathlib.</p>",
        "id": 410438420,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703860570
    },
    {
        "content": "<p>IMHO stuff like <code>{ a + b | (a ∈ x) (b ∈ y) }</code> is what makes the set-builder notation useful.</p>",
        "id": 410526820,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1703927241
    },
    {
        "content": "<p>It's unfortunate that <code>{a + b | (a b : ℕ) (h : a * b &lt; 4)}</code> is no longer legal</p>",
        "id": 410532441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703931771
    },
    {
        "content": "<p>(you have to write the types of <code>a</code> and <code>b</code> separately)</p>",
        "id": 410532474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703931817
    }
]