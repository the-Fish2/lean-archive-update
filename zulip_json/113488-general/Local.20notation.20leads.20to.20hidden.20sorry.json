[
    {
        "content": "<p>In the following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"m\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">test₁</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">a₁</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">test₁</span> <span class=\"c1\">-- does not depend on any axioms</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">test₂</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">a₂</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">test₂</span> <span class=\"c1\">-- depends on axioms [sorryAx]</span>\n</code></pre></div>\n<p>The only difference between <code>test₁</code> and <code>test₂</code> is that <code>test₂</code> uses a variable declared with <code>local notation</code>, yet <code>test₂</code> depends on <code>sorryAx</code>. Am I using <code>local notation</code> incorrectly?</p>\n<p>In tactic mode, it shows <code>a₂ : Fin (sorryAx Nat true)</code>.</p>",
        "id": 428044928,
        "sender_full_name": "Niels Voss",
        "timestamp": 1710986273
    },
    {
        "content": "<p>It looks like it's <a href=\"https://github.com/leanprover/lean4/issues/2535\">this issue</a></p>",
        "id": 428045173,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710986462
    },
    {
        "content": "<p>I have a longer example where it leads to an infinite loop in the typechecker. Would that be caused by the same bug?</p>",
        "id": 428045371,
        "sender_full_name": "Niels Voss",
        "timestamp": 1710986629
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">((</span><span class=\"n\">Finset.univ.toList.argmax</span> <span class=\"o\">(</span><span class=\"bp\">‖∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"bp\">·</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"bp\">‖</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span><span class=\"o\">)</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"h\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">test₁</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">a₁</span> <span class=\"c1\">-- Works fine</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">test₂</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">a₂</span> <span class=\"c1\">-- Infinite loop</span>\n</code></pre></div>",
        "id": 428045501,
        "sender_full_name": "Niels Voss",
        "timestamp": 1710986731
    }
]