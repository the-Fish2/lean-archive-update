[
    {
        "content": "<p>In Lean 3 there was a straightforward command (I don't remember but it might have been <code>lean --make</code>) which would just build all the files in <code>src</code>. This default functionality would be all that I'd ever need with a mathematics project. </p>\n<p>Now we have a different set-up whereby whenever I add a new file to mathlib I have to edit <code>Mathlib.lean</code>. I don't want to go through all this with <code>FLT.lean</code>. So what do I want to do here? I suspect I need some kind of \"trigger\" which, whenever I e.g. push or commit or whatever triggers this, something should go through the <code>FLT</code> directory and create <code>FLT.lean</code> based on the current contents of the <code>FLT</code> directory. What should I be doing here?</p>",
        "id": 429187732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711279545
    },
    {
        "content": "<p>I have a script for that in APAP: <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/master/scripts/mk_all.sh\">https://github.com/YaelDillies/LeanAPAP/blob/master/scripts/mk_all.sh</a></p>",
        "id": 429187994,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711279641
    },
    {
        "content": "<p>So instead of running <code>lake build</code> I run <code>./scripts/mk_all.sh; lake build</code></p>",
        "id": 429188072,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711279684
    },
    {
        "content": "<p>And since I build my project I push commits (because I don't use bors, so I discipline myself to keep the build green), <code>LeanAPAP.lean</code> is always up to date.</p>",
        "id": 429188240,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711279753
    },
    {
        "content": "<p>You can also just not create FLT.lean at all</p>",
        "id": 429219369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711293842
    },
    {
        "content": "<p>It only matters if you expect people to write <code>import FLT</code> rather than working in your repository directly</p>",
        "id": 429219538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711293919
    },
    {
        "content": "<p>I think leanblueprint needs that file in order to check that the lean declarations referenced in the blueprint actually exist in the project.</p>",
        "id": 429220055,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711294195
    },
    {
        "content": "<p>It would be pretty easy to teach leanblueprint to iterate over <code>FLT/**/*.lean</code> and import everything instead</p>",
        "id": 429221116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711294990
    },
    {
        "content": "<p>It's unfortunate that it can't just ask lake to give it the list of files (it's already easy to tell Lake to have this glob behavior)</p>",
        "id": 429221143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711295032
    },
    {
        "content": "<p>What I want is a way to compile all the files in the project. But now I remember that there's a way to do this in the lakefile.</p>",
        "id": 429224335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711297521
    },
    {
        "content": "<p>something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">EulerProducts</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"n\">globs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">submodules</span> <span class=\"bp\">`</span><span class=\"n\">EulerProducts</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- add any library configuration options here</span>\n</code></pre></div>\n<p>(replace <code>EulerProducts</code> by <code>FLT</code>).</p>",
        "id": 429227568,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711299842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I have a script for this purpose.</p>\n<p><a href=\"https://github.com/Seasawher/import-all\">https://github.com/Seasawher/import-all</a></p>",
        "id": 429692452,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1711469949
    },
    {
        "content": "<p>Actually, could we have a simple script inside mathlib to do this job? It's kind of annoying to do by hand every time.</p>",
        "id": 430236236,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711708649
    },
    {
        "content": "<p>And we could replace the review-dog suggestions (which are often off by one) by a suggestion to use the script.</p>",
        "id": 430236365,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711708688
    },
    {
        "content": "<p>In some sense, the script is already there, since CI uses it:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">(</span>\n<span class=\"w\">  </span><span class=\"nb\">cd</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"k\">$(</span>git<span class=\"w\"> </span>rev-parse<span class=\"w\"> </span>--show-toplevel<span class=\"k\">)</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nb\">exit</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span>gp<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib<span class=\"w\"> </span>MathlibExtras<span class=\"w\"> </span>Mathlib/Tactic<span class=\"w\"> </span>Counterexamples<span class=\"w\"> </span>Archive\n<span class=\"w\">  </span><span class=\"k\">do</span>\n<span class=\"w\">   </span>git<span class=\"w\"> </span>ls-files<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$gp</span><span class=\"s2\">/*.lean\"</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nv\">LC_ALL</span><span class=\"o\">=</span>C<span class=\"w\"> </span>sort<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>sed<span class=\"w\"> </span><span class=\"s1\">'s/\\.lean//;s,/,.,g;s/^/import /'</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$gp</span><span class=\"s2\">.lean\"</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 430284375,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711730871
    },
    {
        "content": "<p>To make it a bit more stable, there could be a first step [Edit: added above already] that makes sure to run from the git-root directory (which is guaranteed during CI, but may not be running it locally).</p>",
        "id": 430284570,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711730946
    },
    {
        "content": "<p>But also, what would be the problem if the step that builds these \"global\" files did not trigger a CI error if it notices differences?</p>\n<p>CI produces the file and builds <code>mathlib</code> against it.  The files are in <code>master</code> and you download them when you upgrade <code>mathlib</code> anyway.  If anyone wants to get the files synchronized locally, great, but if they are not, it simply means that <code>import Mathlib</code> locally may not mean the same as <code>import Mathlib</code> on master.</p>",
        "id": 430287331,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711732039
    },
    {
        "content": "<p>I think the issues are that</p>\n<ol>\n<li>If you add a leaf file, CI won't know about it unless you add it to <code>Mathlib</code> (that can be fixed by tweaking the lakefile)</li>\n<li>We don't know how to make bors run this \"Update <code>Mathlib</code>\" once on each batch</li>\n</ol>",
        "id": 430288044,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711732331
    },
    {
        "content": "<p>It is fine to not change this, but if you create in CI the files they will contain all leaf files and then wouldn't <code>lake build</code> build them as well?  Anyway, as I said, I am not trying to push for this change: I do in fact use a script that I run that automatically updates those files anyway.</p>",
        "id": 430288973,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711732709
    },
    {
        "content": "<p>Yes, but that means you (= beginners, mostly) won't see the build errors until the PR is handed to bors. Of course this already happens because mathlib keeps on changing, but it's easy to not make it worse (eg by instructing <code>lake build</code> to build all submodules of mathlib, rather than just <code>Mathlib</code>)</p>",
        "id": 430289343,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711732847
    },
    {
        "content": "<p>Anyway, the code above is essentially the script that will make the \"local\" files exactly the same as the ones that CI checks.  So simply PRing that as a further <code>scripts/mk_all.sh</code> file could work, right?</p>",
        "id": 430289664,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711732947
    },
    {
        "content": "<p>Certainly, at least for the short term</p>",
        "id": 430289735,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711732974
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11781\">#11781</a></p>",
        "id": 430290447,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711733256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, after <a href=\"https://github.com/leanprover-community/mathlib4/pull/11853\">#11853</a>, you will be able to run <code>lake exe mkAll</code> and your file <code>FLT.lean</code> will be automatically generated</p>",
        "id": 431127139,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712160201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, update: It has landed!</p>",
        "id": 442756143,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717585726
    },
    {
        "content": "<p><code>lake exe mk-all</code> in FLT as much as you want</p>",
        "id": 442756206,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717585744
    },
    {
        "content": "<p><code>lake exe mk_all</code>, right?</p>",
        "id": 442756511,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717585830
    },
    {
        "content": "<p>I'll push a mathlib bump in a little bit</p>",
        "id": 442757349,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717586068
    },
    {
        "content": "<p>(<a href=\"https://github.com/ImperialCollegeLondon/FLT/pull/96\">FLT#96</a>)</p>",
        "id": 442759328,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717586647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/113488-general/topic/automatically.20generate.20ProjectName.2Elean/near/442756511\">said</a>:</p>\n<blockquote>\n<p><code>lake exe mk_all</code>, right?</p>\n</blockquote>\n<p>Oh yeah, I couldn't call it <code>mk-all</code> for some unknown reason</p>",
        "id": 443000143,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717662187
    },
    {
        "content": "<p>I think that <code>-</code> is simply not allowed in declaration names.  I'm not completely sure why is that.  Maybe we could have forced it with \\f&lt;&lt;&gt;&gt;?</p>",
        "id": 443010381,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717665212
    },
    {
        "content": "<p>I just tried <code>lake exe mk_all</code> for the first time, and I ran into an error. This occurs both in Mathlib and on a downstream project:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>mk_all<span class=\"w\"> </span>--help\n<span class=\"go\">✔ [3/8] Built Mathlib.Util.GetAllModules:c.o</span>\n<span class=\"go\">✔ [4/8] Built Cli.Basic</span>\n<span class=\"go\">✔ [5/8] Built mk_all</span>\n<span class=\"go\">✔ [6/8] Built Cli.Basic:c.o</span>\n<span class=\"go\">✔ [7/8] Built mk_all:c.o</span>\n<span class=\"go\">✖ [8/8] Building mk_all</span>\n<span class=\"go\">trace: .&gt; c:\\Users\\Floris\\.elan\\toolchains\\leanprover--lean4---v4.9.0-rc1\\bin\\leanc.exe -o .\\.\\.lake/packages\\mathlib\\.lake\\build\\bin\\mk_all.exe .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\mk_all.c.o.noexport .\\.\\.lake/packages\\Cli\\.lake\\build\\ir\\Cli\\Basic.c.o.export .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export -leanshared</span>\n<span class=\"go\">info: stderr:</span>\n<span class=\"go\">ld.lld: error: undefined symbol: l_Lake_logToStream</span>\n<span class=\"go\">&gt;&gt;&gt; referenced by .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export:(l_getLeanLibs___lambda__1)</span>\n<span class=\"go\">&gt;&gt;&gt; referenced by .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export:(l_getLeanLibs___lambda__1___boxed)</span>\n\n<span class=\"go\">ld.lld: error: undefined symbol: l_Lake_findInstall_x3f</span>\n<span class=\"go\">&gt;&gt;&gt; referenced by .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export:(l_getLeanLibs)</span>\n\n<span class=\"go\">ld.lld: error: undefined symbol: l_Lake_LakeOptions_mkLoadConfig</span>\n<span class=\"go\">&gt;&gt;&gt; referenced by .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export:(l_getLeanLibs)</span>\n\n<span class=\"go\">ld.lld: error: undefined symbol: l_Lake_CliError_toString</span>\n<span class=\"go\">&gt;&gt;&gt; referenced by .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export:(l_getLeanLibs)</span>\n<span class=\"go\">&gt;&gt;&gt; referenced by .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export:(l_getLeanLibs)</span>\n\n<span class=\"go\">ld.lld: error: undefined symbol: l_Lake_OutStream_get</span>\n<span class=\"go\">&gt;&gt;&gt; referenced by .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export:(l_getLeanLibs)</span>\n\n<span class=\"go\">ld.lld: error: undefined symbol: l_Lake_AnsiMode_isEnabled</span>\n<span class=\"go\">&gt;&gt;&gt; referenced by .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export:(l_getLeanLibs)</span>\n\n<span class=\"go\">ld.lld: error: undefined symbol: l_Lake_loadWorkspace</span>\n<span class=\"go\">&gt;&gt;&gt; referenced by .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export:(l_getLeanLibs)</span>\n\n<span class=\"go\">ld.lld: error: undefined symbol: l_Lake_MainM_runLogIO_replay</span>\n<span class=\"go\">&gt;&gt;&gt; referenced by .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export:(l_getLeanLibs)</span>\n<span class=\"go\">&gt;&gt;&gt; referenced by .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export:(l_getLeanLibs)</span>\n\n<span class=\"go\">ld.lld: error: undefined symbol: initialize_Lake_CLI_Main</span>\n<span class=\"go\">&gt;&gt;&gt; referenced by .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export:(initialize_Mathlib_Util_GetAllModules)</span>\n\n<span class=\"go\">ld.lld: error: undefined symbol: l_Lake_defaultConfigFile</span>\n<span class=\"go\">&gt;&gt;&gt; referenced by .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export:(.refptr.l_Lake_defaultConfigFile)</span>\n<span class=\"go\">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span>\n<span class=\"go\">error: external command 'c:\\Users\\Floris\\.elan\\toolchains\\leanprover--lean4---v4.9.0-rc1\\bin\\leanc.exe' exited with code 1</span>\n<span class=\"go\">Some builds logged failures:</span>\n<span class=\"go\">- mk_all</span>\n<span class=\"go\">error: build failed</span>\n</code></pre></div>",
        "id": 443296636,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717766273
    },
    {
        "content": "<p>This looks like your cache is still broken. Did you force fetch cache after reinstalling the Lean toolchain?</p>",
        "id": 443298205,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717766770
    },
    {
        "content": "<p>Good point. It might be related to the errors I had earlier. I'll try it fresh now.</p>",
        "id": 443298653,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717766920
    },
    {
        "content": "<p>I now tried it again on a copy of Mathlib that I haven't touched earlier today, and I get the same errors, even after running <code>lake exe cache get!</code>. <code>lake build</code> succeeds normally.</p>\n<p>Can you check that <code>lake exe mk_all</code> works for you on Mathlib master?</p>",
        "id": 443299471,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717767192
    },
    {
        "content": "<p>Very few programs import <code>Lake</code> so it's not unthinkable that this is a new, Windows-only issue with linking against Lake</p>",
        "id": 443300182,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717767453
    },
    {
        "content": "<p>That was my alternative guess, that it is a Windows-only issue. Let me know if I can provide other information that is useful.</p>",
        "id": 443300399,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717767527
    },
    {
        "content": "<p>Same error on master on my (windows) computer.</p>",
        "id": 443303015,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1717768378
    },
    {
        "content": "<p>On Linux the command works for me (and it is also used by CI).</p>",
        "id": 443303674,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717768586
    },
    {
        "content": "<p>I think this might be related to <a href=\"https://github.com/leanprover/lean4/pull/3601\">lean4#3601</a> which has extra requirements to link on Windows.</p>\n<p><a href=\"/user_uploads/3121/GOAKMZqKMS1IUkAiI6KYRocB/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/GOAKMZqKMS1IUkAiI6KYRocB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/GOAKMZqKMS1IUkAiI6KYRocB/image.png\"></a></div>",
        "id": 443307452,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717769716
    },
    {
        "content": "<p>Damiano, can we leave it to you to summon whatever help is needed to get this fixed?</p>",
        "id": 443745485,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718017773
    },
    {
        "content": "<p>I can try, but it would help if someone who uses windows can do some testing, since I do not have any windows computer.</p>",
        "id": 443746611,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718018186
    },
    {
        "content": "<p>In fact, if someone who uses windows is willing to have a session where we try to work this out during a call, that might be the easiest.</p>",
        "id": 443746703,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718018229
    },
    {
        "content": "<p>Wild guess, but: is <code>supportInterpreter := true</code> required for <code>mk_all</code>? (Perhaps the answers is \"yes, obviously\" and I don't understand that flag well - in which case I'll be happy to be enlightened.)</p>",
        "id": 443757416,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718021865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/automatically.20generate.20ProjectName.2Elean/near/443307452\">said</a>:</p>\n<blockquote>\n<p>I think this might be related to <a href=\"https://github.com/leanprover/lean4/pull/3601\">lean4#3601</a> which has extra requirements to link on Windows.</p>\n<p><a href=\"/user_uploads/3121/GOAKMZqKMS1IUkAiI6KYRocB/image.png\">image.png</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Maybe you can try copying these 2 DLL files into where <code>mk_all</code> is located, and see if it runs?</p>",
        "id": 443774399,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718026916
    },
    {
        "content": "<p>If I copy these two files to <code>mathlib/scripts</code> (where <code>mk_all.lean</code> is located), then I get the same error when running <code>lake exe mk_all</code>. I looked into <code>mathlib/.lake/build/bin/</code> where <code>mk_all.exe</code> is supposed to be(?). Putting the DLL files there gives the same error as well. That folder does not contain <code>mk_all.exe</code>, btw. It does contain <code>cache.exe</code>, <code>shake.exe</code> and <code>mk_all.exe.log.json</code>. The last file contains (roughly) the error message that is output when running <code>lake exe mk_all</code>.</p>",
        "id": 443850579,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718048691
    },
    {
        "content": "<p>The changelog indicates that the DLLs has to be colocated with the exe, to verify if it's the case, we need to find the exe. The fact that it's not there with other built exe is weird. I'll do some more investigation later today on Github Actions Windows CI as I haven't turned on my Windows computer for months.</p>",
        "id": 443889232,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718066019
    },
    {
        "content": "<p>I believe the build errors while building the <code>exe</code>, not when executing it.</p>",
        "id": 444185877,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718183435
    },
    {
        "content": "<p>OK, I can reproduce the same build error on Windows CI, while the same works on Ubuntu and Mac CI. And <code>lake env lake exe mk_all</code> can't save it, too (it rescued my other Windows FFI build).</p>",
        "id": 444227329,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718196586
    },
    {
        "content": "<p>The missing symbols are in <code>.elan/toolchains/leanprover--lean4---v4.9.0-rc1/lib/lean/libLake.a</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">nm</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">gU</span><span class=\"w\"> </span><span class=\"n\">libLake</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">grep</span><span class=\"w\"> </span><span class=\"s2\">\"l_Lake_logToStream\"</span>\n<span class=\"mi\">0000000000003644</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">l_Lake_logToStream</span>\n<span class=\"mi\">0000000000003878</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">l_Lake_logToStream___boxed</span>\n</code></pre></div>\n<p>Judging by the command <code>trace: .&gt; c:\\Users\\runneradmin\\.elan\\toolchains\\leanprover--lean4---v4.9.0-rc1\\bin\\leanc.exe -o .\\.\\.lake/packages\\mathlib\\.lake\\build\\bin\\mk_all.exe .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\mk_all.c.o.noexport .\\.\\.lake/packages\\Cli\\.lake\\build\\ir\\Cli\\Basic.c.o.export .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Mathlib\\Util\\GetAllModules.c.o.export -leanshared</code></p>\n<p>It should be that it misses <code>-lLake</code> ? One example of adding this flag is <a href=\"https://github.com/leanprover/lean4/blob/bedcbfcfeed429428c3e7f008b6984fc8c2b2b76/src/CMakeLists.txt#L325C15-L325C40\">here</a>.</p>",
        "id": 444230223,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718197191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Can you try locally modify <code>.lake/packages/mathlib/lakefile.lean</code> so it looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/-- `lake exe mk_all` constructs the files containing all imports for a project. -/</span>\n<span class=\"n\">lean_exe</span><span class=\"w\"> </span><span class=\"n\">mk_all</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">srcDir</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span>\n<span class=\"w\">  </span><span class=\"n\">supportInterpreter</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span>\n<span class=\"w\">  </span><span class=\"n\">weakLinkArgs</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-lLake\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and run <code>lake -R exe mk_all</code>?</p>\n<p>I have <a href=\"https://github.com/utensil/lean-playground/actions/runs/9483553032/job/26130907816\">successfully run it on Windows CI</a>. </p>\n<p><a href=\"/user_uploads/3121/J5dUf9Tt2lJmkJCmkn-mLuzH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/J5dUf9Tt2lJmkJCmkn-mLuzH/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/J5dUf9Tt2lJmkJCmkn-mLuzH/image.png\"></a></div>",
        "id": 444239597,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718199557
    },
    {
        "content": "<p>Thanks for the investigation, I now see the bug</p>",
        "id": 444240370,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718199733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/automatically.20generate.20ProjectName.2Elean/near/444239597\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> Can you try locally modify <code>.lake/packages/mathlib/lakefile.lean</code> so it looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/-- `lake exe mk_all` constructs the files containing all imports for a project. -/</span>\n<span class=\"n\">lean_exe</span><span class=\"w\"> </span><span class=\"n\">mk_all</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">srcDir</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span>\n<span class=\"w\">  </span><span class=\"n\">supportInterpreter</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span>\n<span class=\"w\">  </span><span class=\"n\">weakLinkArgs</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-lLake\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and run <code>lake -R exe mk_all</code>?</p>\n<p>I have <a href=\"https://github.com/utensil/lean-playground/actions/runs/9483553032/job/26130907816\">successfully run it on Windows CI</a>. </p>\n<p><a href=\"/user_uploads/3121/J5dUf9Tt2lJmkJCmkn-mLuzH/image.png\">image.png</a></p>\n</blockquote>\n<p>With that it works without error! </p>\n<p>One note: it does change the order of the imports in <code>Mathlib.lean</code>, where <code>.</code> is sorted after any letter (I hope that is not platform-dependent?), e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-import Mathlib.GroupTheory.Order.Min</span>\n<span class=\"w\"> </span>import Mathlib.GroupTheory.OrderOfElement\n<span class=\"gi\">+import Mathlib.GroupTheory.Order.Min</span>\n</code></pre></div>",
        "id": 444253802,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718203442
    },
    {
        "content": "<p>I am so happy that this works!  Thank you all for helping debug this issue!</p>",
        "id": 444254074,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718203528
    },
    {
        "content": "<p>Wrt sorting, the previous shell script specifically used a flag to \"uniformize\" the sorting.  The lake executable uses the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=System.FilePath.walkDir#doc\">docs#System.FilePath.walkDir</a> (or <code>git ls-files '*.lean'</code>) and may not do an \"internal\" sorting of the output of either.  Maybe this should be added.</p>",
        "id": 444254727,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718203711
    },
    {
        "content": "<p>Actually, it <a href=\"https://github.com/leanprover-community/mathlib4/blob/81e2c63b8af1371a08072e40e50aeb41c26ed591/Mathlib/Util/GetAllModules.lean#L43\">does sort internally</a>.</p>",
        "id": 444254961,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718203790
    },
    {
        "content": "<p>Floris, I am not sure that I am reading your diff correctly, but the webserver sorts the two files as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span>\n\n<span class=\"n\">run_cmd</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span><span class=\"bp\">.</span><span class=\"n\">liftTermElabM</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">pair</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"Mathlib.GroupTheory.OrderOfElement\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"Mathlib.GroupTheory.Order.Min\"</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">pair</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"n\">pair</span><span class=\"bp\">.</span><span class=\"n\">qsort</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so <code>...Min</code> comes earlier.</p>",
        "id": 444256153,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718204119
    },
    {
        "content": "<p>After running <code>lake exe mk_all</code> there are modifications to my copy of <code>Mathlib.lean</code>, and it contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">GroupTheory</span><span class=\"bp\">.</span><span class=\"n\">NoncommPiCoprod</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">GroupTheory</span><span class=\"bp\">.</span><span class=\"n\">OrderOfElement</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">GroupTheory</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Min</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">GroupTheory</span><span class=\"bp\">.</span><span class=\"n\">PGroup</span>\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 444257002,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718204340
    },
    {
        "content": "<p>Mathlib commit <code>dd36c71ca81</code> (5 days ago).</p>",
        "id": 444257116,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718204372
    },
    {
        "content": "<p>Can you try running the code above, to see if it passes the check?</p>",
        "id": 444257227,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718204399
    },
    {
        "content": "<p>(On my computer with Linux, the test above passes and so does on the webserver.)</p>",
        "id": 444257631,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718204472
    },
    {
        "content": "<p>Yes, that code snippet passes without errors.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"Mathlib.GroupTheory.OrderOfElement\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"Mathlib.GroupTheory.Order.Min\"</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">qsort</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"Mathlib.GroupTheory.Order.Min\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"Mathlib.GroupTheory.OrderOfElement\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 444257682,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718204484
    },
    {
        "content": "<p>And this is what I see in <code>Mathlib.lean</code> around where you mention:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">GroupTheory</span><span class=\"bp\">.</span><span class=\"n\">NoncommCoprod</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">GroupTheory</span><span class=\"bp\">.</span><span class=\"n\">NoncommPiCoprod</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">GroupTheory</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Min</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">GroupTheory</span><span class=\"bp\">.</span><span class=\"n\">OrderOfElement</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">GroupTheory</span><span class=\"bp\">.</span><span class=\"n\">PGroup</span>\n</code></pre></div>",
        "id": 444257960,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718204550
    },
    {
        "content": "<p>Hmmm</p>",
        "id": 444258136,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718204589
    },
    {
        "content": "<p>But we're comparing a <code>System.FilePath</code> coerced to strings in your linked code, and that seems like it would use <code>\\</code> not <code>.</code></p>",
        "id": 444258220,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718204613
    },
    {
        "content": "<p>Ah, or <code>/</code> on a Unix system?</p>",
        "id": 444258486,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718204665
    },
    {
        "content": "<p>probably!?</p>",
        "id": 444258529,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718204678
    },
    {
        "content": "<p>This is the ordering for some characters that might be relevant for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">eval</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"/\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"M\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"se\">\\\\</span><span class=\"s2\">\"</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"bp\">.</span><span class=\"n\">qsort</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 444259136,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718204818
    },
    {
        "content": "<p>That evaluates to true for me, and seems like it would explain the difference :-)</p>",
        "id": 444259714,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718204962
    },
    {
        "content": "<p>Maybe the comparison should first replace the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=System.FilePath.pathSeparator#doc\">docs#System.FilePath.pathSeparator</a> with <code>.</code> and then do the sorting.</p>",
        "id": 444259730,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718204967
    },
    {
        "content": "<p>Let me PR that!</p>",
        "id": 444259835,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718204990
    },
    {
        "content": "<p>IIRC, there's some function <code>toModuleName</code> (or similar) in lake, which <code>mk_all</code> also uses for this purpose. (Or did you mean to do this already?)</p>",
        "id": 444272449,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718208007
    },
    {
        "content": "<p>Are you thinking of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=moduleNameOfFileName%3F#doc\">docs#moduleNameOfFileName?</a>  It is a little inconvenient to use it in the <code>qsort</code>, since the function is in <code>IO</code>, but the sort is pure.</p>",
        "id": 444274701,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718208594
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13777\">#13777</a><br>\nI tested it locally and it does not change the order of the files on my computer.  It also passed the relevant CI step, so CI is also on the same order.</p>\n<p>If someone using Windows/MacOS wants to try it out, checking out the branch <code>adomani/sort_all_files</code> and running <code>lake exe mk_all</code> (or <code>lake exe mk_all --git</code> if you have random files in your Mathlib dir) should report <code>No update necessary</code>.</p>",
        "id": 444276328,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718208951
    },
    {
        "content": "<p>I would map <code>Lean.moduleNameOfFileName</code>over <code>allModules</code> first and then sort afterwards. It's clunky doing it at the same time.</p>",
        "id": 444280346,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1718209850
    },
    {
        "content": "<p>But then you would have to convert back from Name to FilePath, right?</p>",
        "id": 444280870,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718210002
    },
    {
        "content": "<p>(and you would need to catch errors, in case the path does not exist, but this is a step that happens later anyway, so it would just be shuffling code around)</p>",
        "id": 444281090,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718210057
    },
    {
        "content": "<p>Yea, sorry. I didn't see that <code>getAllModules </code> is what is returning the module strings. It would make most sense to sort there. (Not really sure why they are sorting preemptively). The long term solution would be to write a proper sort for <code>System.FilePath</code>.</p>",
        "id": 444293102,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1718213716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/automatically.20generate.20ProjectName.2Elean/near/444240370\">said</a>:</p>\n<blockquote>\n<p>Thanks for the investigation, I now see the bug</p>\n</blockquote>\n<p>Is this bug still present? (Does it need a fix in mathlib?) I'd like to recommend <code>mk_all</code> more widely, and working on Windows would be nice for this :-)</p>",
        "id": 444696482,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718370318
    },
    {
        "content": "<p>Why not just apply the workaround from above for now?</p>",
        "id": 444698547,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718370964
    },
    {
        "content": "<p>Eventually, the script could disengage completely from Mathlib, in fact.</p>",
        "id": 444758916,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718388009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/automatically.20generate.20ProjectName.2Elean/near/444698547\">said</a>:</p>\n<blockquote>\n<p>Why not just apply the workaround from above for now?</p>\n</blockquote>\n<p>That is, adding sorting to the script and applying the patch from <a href=\"#narrow/stream/113488-general/topic/automatically.20generate.20ProjectName.2Elean/near/444239597\">this message</a> to mathlib? Sounds like two mathlib PRs then (the first of which is 13777).</p>",
        "id": 444761166,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718388743
    },
    {
        "content": "<p>By the way: why does <code>mkAll</code> need <code>supportsInterpreter</code>? Is this some obvious detail I'm not seeing?</p>",
        "id": 444761286,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718388793
    },
    {
        "content": "<p>I suspect that the <code>supportInterpreter</code> was cargo-culted (Yaël wrote most of the executable part of the command, so they may be able to comment on this better).</p>",
        "id": 444769764,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718391926
    },
    {
        "content": "<p>Yeah that was not a conscious choice</p>",
        "id": 444770193,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718392096
    },
    {
        "content": "<p>I just checked: it is in fact needed -&gt; let me PR the patch above.</p>",
        "id": 444846036,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718443645
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/leanprover-community/mathlib4/pull/13850\">#13850</a> to fix <code>mkAll</code> and <code>pole</code> on Windows.<br>\nCan some Windows users (e.g. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>) help me test this?</p>\n<ul>\n<li>head to the PR, check out the branch</li>\n<li>run <code>lake exe mk_all</code> resp. <code>lake exe pole</code><br>\nTell me if this runs without errors. Would be much appreciated!</li>\n</ul>",
        "id": 444846929,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718444329
    },
    {
        "content": "<p>I think it's worth it to set up a Ubuntu/Windows/Mac CI for simple tools like this. I've been testing this <a href=\"https://github.com/utensil/lean-playground/blob/2bc3ddeec5b92f5fba43a0cf079e4ba7ad0d704a/.github/workflows/lean4.yml#L83-L90\">via CI</a> anyway.</p>",
        "id": 444847415,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718444770
    },
    {
        "content": "<p>I've tested <a href=\"https://github.com/leanprover-community/mathlib4/pull/13850\">mathlib4#13850</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/13854\">mathlib4#13854</a> on my windows laptop.<br>\nBoth gave very similar errors:</p>\n<div class=\"codehilite\" data-code-language=\"PowerShell\"><pre><span></span><code><span class=\"n\">Γ</span><span class=\"err\">£</span><span class=\"n\">û</span> <span class=\"p\">[</span><span class=\"n\">5</span><span class=\"p\">/</span><span class=\"n\">8</span><span class=\"p\">]</span> <span class=\"n\">Building</span> <span class=\"n\">mk_all</span>\n<span class=\"n\">trace</span><span class=\"p\">:</span> <span class=\"p\">.&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"p\">=.\\.\\.</span><span class=\"n\">lake</span><span class=\"p\">/</span><span class=\"n\">packages</span><span class=\"p\">\\</span><span class=\"n\">batteries</span><span class=\"p\">\\.</span><span class=\"n\">lake</span><span class=\"p\">\\</span><span class=\"n\">build</span><span class=\"p\">\\</span><span class=\"n\">lib</span><span class=\"p\">;.\\.\\.</span><span class=\"n\">lake</span><span class=\"p\">/</span><span class=\"n\">packages</span><span class=\"p\">\\</span><span class=\"n\">Qq</span><span class=\"p\">\\.</span><span class=\"n\">lake</span><span class=\"p\">\\</span><span class=\"n\">build</span><span class=\"p\">\\</span><span class=\"n\">lib</span><span class=\"p\">;.\\.\\.</span><span class=\"n\">lake</span><span class=\"p\">/</span><span class=\"n\">packages</span><span class=\"p\">\\</span><span class=\"n\">aesop</span><span class=\"p\">\\.</span><span class=\"n\">lake</span><span class=\"p\">\\</span><span class=\"n\">build</span><span class=\"p\">\\</span><span class=\"n\">lib</span><span class=\"p\">;.\\.\\.</span><span class=\"n\">lake</span><span class=\"p\">/</span><span class=\"n\">packages</span><span class=\"p\">\\</span><span class=\"n\">proofwidgets</span><span class=\"p\">\\.</span><span class=\"n\">lake</span><span class=\"p\">\\</span><span class=\"n\">build</span><span class=\"p\">\\</span><span class=\"n\">lib</span><span class=\"p\">;.\\.\\.</span><span class=\"n\">lake</span><span class=\"p\">/</span><span class=\"n\">packages</span><span class=\"p\">\\</span><span class=\"n\">Cli</span><span class=\"p\">\\.</span><span class=\"n\">lake</span><span class=\"p\">\\</span><span class=\"n\">build</span><span class=\"p\">\\</span><span class=\"n\">lib</span><span class=\"p\">;.\\.\\.</span><span class=\"n\">lake</span><span class=\"p\">/</span><span class=\"n\">packages</span><span class=\"p\">\\</span><span class=\"n\">importGraph</span><span class=\"p\">\\.</span><span class=\"n\">lake</span><span class=\"p\">\\</span><span class=\"n\">build</span><span class=\"p\">\\</span><span class=\"n\">lib</span><span class=\"p\">;.\\.\\.</span><span class=\"n\">lake</span><span class=\"p\">\\</span><span class=\"n\">build</span><span class=\"p\">\\</span><span class=\"n\">lib</span> <span class=\"n\">PATH</span> <span class=\"n\">c</span><span class=\"p\">:\\</span><span class=\"n\">Users</span><span class=\"p\">\\</span><span class=\"n\">User</span><span class=\"p\">\\.</span><span class=\"n\">elan</span><span class=\"p\">\\</span><span class=\"n\">toolchains</span><span class=\"p\">\\</span><span class=\"n\">leanprover</span><span class=\"p\">-</span><span class=\"n\">-lean4</span><span class=\"p\">--</span><span class=\"n\">-v4</span><span class=\"p\">.</span><span class=\"n\">9</span><span class=\"p\">.</span><span class=\"n\">0-rc2</span><span class=\"p\">\\</span><span class=\"n\">bin</span><span class=\"p\">\\</span><span class=\"n\">lean</span><span class=\"p\">.</span><span class=\"n\">exe</span> <span class=\"n\">-Dpp</span><span class=\"p\">.</span><span class=\"n\">unicode</span><span class=\"p\">.</span><span class=\"n\">fun</span><span class=\"p\">=</span><span class=\"n\">true</span> <span class=\"n\">-DautoImplicit</span><span class=\"p\">=</span><span class=\"n\">false</span> <span class=\"n\">-DrelaxedAutoImplicit</span><span class=\"p\">=</span><span class=\"n\">false</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span> <span class=\"n\">-R</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span> <span class=\"n\">-o</span> <span class=\"p\">.\\.\\.</span><span class=\"n\">lake</span><span class=\"p\">\\</span><span class=\"n\">build</span><span class=\"p\">\\</span><span class=\"n\">lib</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">olean</span> <span class=\"n\">-i</span> <span class=\"p\">.\\.\\.</span><span class=\"n\">lake</span><span class=\"p\">\\</span><span class=\"n\">build</span><span class=\"p\">\\</span><span class=\"n\">lib</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">ilean</span> <span class=\"n\">-c</span> <span class=\"p\">.\\.\\.</span><span class=\"n\">lake</span><span class=\"p\">\\</span><span class=\"n\">build</span><span class=\"p\">\\</span><span class=\"n\">ir</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">c</span> <span class=\"p\">-</span><span class=\"n\">-json</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">6</span><span class=\"p\">:</span><span class=\"n\">0</span><span class=\"p\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">read</span> <span class=\"n\">file</span> <span class=\"s1\">'.\\.\\.lake/packages\\Cli\\.lake\\build\\lib\\Cli\\Basic.olean'</span><span class=\"p\">,</span> <span class=\"n\">invalid</span> <span class=\"n\">header</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">17</span><span class=\"p\">:</span><span class=\"n\">5</span><span class=\"p\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">namespace</span> <span class=\"s1\">'Lean'</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">19</span><span class=\"p\">:</span><span class=\"n\">5</span><span class=\"p\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">namespace</span> <span class=\"s1\">'Lake'</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">24</span><span class=\"p\">:</span><span class=\"n\">18</span><span class=\"p\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"s1\">'IO'</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">24</span><span class=\"p\">:</span><span class=\"n\">18</span><span class=\"p\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">constant</span> <span class=\"s1\">'sorryAx'</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">26</span><span class=\"p\">:</span><span class=\"n\">33</span><span class=\"p\">:</span> <span class=\"n\">expected</span> <span class=\"n\">token</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">35</span><span class=\"p\">:</span><span class=\"n\">5</span><span class=\"p\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">namespace</span> <span class=\"s1\">'IO.FS'</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">38</span><span class=\"p\">:</span><span class=\"n\">21</span><span class=\"p\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"s1\">'Parsed'</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">38</span><span class=\"p\">:</span><span class=\"n\">21</span><span class=\"p\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">constant</span> <span class=\"s1\">'sorryAx'</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">46</span><span class=\"p\">:</span><span class=\"n\">35</span><span class=\"p\">:</span> <span class=\"n\">expected</span> <span class=\"n\">token</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">67</span><span class=\"p\">:</span><span class=\"n\">20</span><span class=\"p\">:</span> <span class=\"s1\">'`'</span><span class=\"p\">;</span> <span class=\"n\">expected</span> <span class=\"s1\">'`('</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">67</span><span class=\"p\">:</span><span class=\"n\">12</span><span class=\"p\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"s1\">'Cmd'</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">81</span><span class=\"p\">:</span><span class=\"n\">17</span><span class=\"p\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"s1\">'List'</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"p\">.\\.\\.\\</span><span class=\"n\">scripts</span><span class=\"p\">\\</span><span class=\"n\">mk_all</span><span class=\"p\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"n\">81</span><span class=\"p\">:</span><span class=\"n\">17</span><span class=\"p\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">constant</span> <span class=\"s1\">'sorryAx'</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"n\">Lean</span> <span class=\"n\">exited</span> <span class=\"n\">with</span> <span class=\"n\">code</span> <span class=\"n\">1</span>\n<span class=\"n\">Some</span> <span class=\"n\">builds</span> <span class=\"n\">logged</span> <span class=\"n\">failures</span><span class=\"p\">:</span>\n<span class=\"p\">-</span> <span class=\"n\">mk_all</span>\n<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"n\">build</span> <span class=\"n\">failed</span>\n</code></pre></div>",
        "id": 444902954,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1718481566
    },
    {
        "content": "<p>I would be happy to get into a call with screen sharing in order to investigate this.</p>",
        "id": 444903155,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1718481667
    },
    {
        "content": "<p>I think I've figured out how to fix this one: Delete <code>.lake</code>, then run the command again</p>",
        "id": 444906635,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718483681
    },
    {
        "content": "<p>It seems that somehow lake calls the outdated executable instead of recompiling?</p>",
        "id": 444906661,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718483699
    },
    {
        "content": "<p>Nice, that worked on my machine too!</p>",
        "id": 444907130,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1718483964
    },
    {
        "content": "<p>To summarize: the code with the PR works on your machine, which runs Windows? That is excellent news, thanks a lot for testing!</p>",
        "id": 444907677,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718484277
    },
    {
        "content": "<p>Noo sorry for the misunderstanding!</p>",
        "id": 444908001,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1718484481
    },
    {
        "content": "<p>The code didn't work until I did Yaël's suggestion, which is to delete <code>.lake</code> first.</p>",
        "id": 444908070,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1718484510
    },
    {
        "content": "<p>Before doing so, I had the error that I showed above</p>",
        "id": 444908078,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1718484522
    },
    {
        "content": "<p><em>That</em> I understood - what happened after deleting <code>.lake</code>?</p>",
        "id": 444908699,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718484819
    },
    {
        "content": "<p>It worked. I thought you read the last message only. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nBut is it possible to make it so that we don't have to delete <code>.lake</code>?</p>",
        "id": 444909439,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1718485030
    },
    {
        "content": "<p>Good question, I don't know. Perhaps that's a one-time event which will not be too disruptive?</p>",
        "id": 444910465,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718485304
    },
    {
        "content": "<p>Also, I've only tried <code>mk_all</code>, trying <code>pole</code>, it gave me the following error:</p>\n<div class=\"codehilite\" data-code-language=\"PowerShell\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"p\">:</span> <span class=\"n\">object</span> <span class=\"n\">file</span> <span class=\"s1\">'.\\.\\.lake\\build\\lib\\Mathlib.olean'</span> <span class=\"n\">of</span> <span class=\"n\">module</span> <span class=\"n\">Mathlib</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">exist</span>\n</code></pre></div>",
        "id": 444910701,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1718485371
    },
    {
        "content": "<p>Wild guess: that sounds like a need to clear .lake again</p>",
        "id": 444914332,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718488695
    },
    {
        "content": "<p>Got the same error after deleting <code>.lake</code></p>",
        "id": 444915279,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1718489237
    },
    {
        "content": "<p>You need <code>lake -R build</code> after such modification to the lakefile as demonstrated in my Windows CI.</p>",
        "id": 444939780,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718512158
    },
    {
        "content": "<p>When dealing with such a delicate matter, a reproducible CI workflow is your friend and any local success could be volatile.</p>",
        "id": 444939970,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718512355
    },
    {
        "content": "<p>If you have used -R, you wouldn't need to delete .lake, now you need to fetch Mathlib cache again.</p>",
        "id": 444940043,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718512451
    },
    {
        "content": "<p>With <code>-R</code> these commands work withour error for me.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Floris</span><span class=\"bp\">@</span><span class=\"n\">Dell</span><span class=\"bp\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">MINGW64</span><span class=\"w\"> </span><span class=\"bp\">~/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlibf</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">MR</span><span class=\"bp\">-</span><span class=\"n\">fix</span><span class=\"bp\">-</span><span class=\"n\">mkall</span><span class=\"bp\">-</span><span class=\"n\">windows</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">lake</span><span class=\"w\"> </span><span class=\"n\">exe</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">mk_all</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Cli</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">mk_all</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Cli</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Util</span><span class=\"bp\">.</span><span class=\"n\">GetAllModules</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">mk_all</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">mk_all</span>\n<span class=\"n\">Updating</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">lean'</span>\n\n<span class=\"n\">Floris</span><span class=\"bp\">@</span><span class=\"n\">Dell</span><span class=\"bp\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">MINGW64</span><span class=\"w\"> </span><span class=\"bp\">~/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlibf</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">MR</span><span class=\"bp\">-</span><span class=\"n\">fix</span><span class=\"bp\">-</span><span class=\"n\">mkall</span><span class=\"bp\">-</span><span class=\"n\">windows</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">lake</span><span class=\"w\"> </span><span class=\"n\">exe</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">pole</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">21</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Classes</span><span class=\"bp\">.</span><span class=\"n\">BEq</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">24</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Name</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">25</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">SMap</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">27</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Classes</span><span class=\"bp\">.</span><span class=\"n\">SatisfiesM</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">28</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Array</span><span class=\"bp\">.</span><span class=\"n\">Monadic</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">29</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">30</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">String</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">34</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">AssocList</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">35</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Position</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">36</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">CodeAction</span><span class=\"bp\">.</span><span class=\"n\">Deprecated</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">37</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">ImportGraph</span><span class=\"bp\">.</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Name</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">38</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">LongestPole</span><span class=\"bp\">.</span><span class=\"n\">SpeedCenterJson</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">39</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">String</span><span class=\"bp\">.</span><span class=\"n\">Defs</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">40</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">ImportGraph</span><span class=\"bp\">.</span><span class=\"n\">CurrentModule</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">41</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Cli</span><span class=\"bp\">.</span><span class=\"n\">Extensions</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">42</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">NameMap</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">43</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">ImportGraph</span><span class=\"bp\">.</span><span class=\"n\">RequiredModules</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">44</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">Init</span><span class=\"bp\">.</span><span class=\"n\">Lemmas</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">45</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">CodeAction</span><span class=\"bp\">.</span><span class=\"n\">Attr</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">46</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">Process</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">47</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Util</span><span class=\"bp\">.</span><span class=\"n\">Path</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">48</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">ImportGraph</span><span class=\"bp\">.</span><span class=\"n\">Imports</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">49</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">CodeAction</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">50</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">HashMap</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">51</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">LongestPole</span><span class=\"bp\">.</span><span class=\"n\">SpeedCenterJson</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">52</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">ImportGraph</span><span class=\"bp\">.</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Name</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">53</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Mathport</span><span class=\"bp\">.</span><span class=\"n\">Rename</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">54</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">Alias</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">55</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Cli</span><span class=\"bp\">.</span><span class=\"n\">Extensions</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">56</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">Basic</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">57</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Cli</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">58</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">ImportGraph</span><span class=\"bp\">.</span><span class=\"n\">CurrentModule</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">59</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">ImportGraph</span><span class=\"bp\">.</span><span class=\"n\">Cli</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">60</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Cli</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">61</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">ImportGraph</span><span class=\"bp\">.</span><span class=\"n\">Cli</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">62</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">ImportGraph</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">63</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">LongestPole</span><span class=\"bp\">.</span><span class=\"n\">Main</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">64</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">ImportGraph</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">65</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">LongestPole</span><span class=\"bp\">.</span><span class=\"n\">Main</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span>\n<span class=\"bp\">✔</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">66</span><span class=\"bp\">/</span><span class=\"mi\">66</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">pole</span>\n<span class=\"n\">Analyzing</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"mi\">78</span><span class=\"n\">f57a416ef003c0b6e4d974faf97020ffd83425</span>\n<span class=\"n\">http</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">speed</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">fro</span><span class=\"bp\">.</span><span class=\"n\">org</span><span class=\"w\"> </span><span class=\"n\">says</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"n\">moving</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">older</span><span class=\"w\"> </span><span class=\"n\">commit?</span>\n</code></pre></div>",
        "id": 445306064,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718701053
    },
    {
        "content": "<p>But what if you first run them on a different Lean version, then switch versions and run them again?</p>",
        "id": 445369469,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718720342
    },
    {
        "content": "<p>The things I did were</p>\n<ul>\n<li>checkout branch (from a much older Lean version)</li>\n<li><code>lake exe cache get</code></li>\n<li>then the displayed commands above</li>\n</ul>\n<p>So with <code>-R</code> this just works.</p>",
        "id": 445419820,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718731935
    },
    {
        "content": "<p>Does that mean you ran <code>lake exe mk_all</code> on two different Lean versions?</p>",
        "id": 445420367,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718732117
    },
    {
        "content": "<p>Oh, I see what you mean... No I didn't do that...</p>",
        "id": 445424496,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718733370
    },
    {
        "content": "<p>Disclaimer: I think there are actually two bugs going on in this thread, and I suspect you have found a way to fix the one I didn't report</p>",
        "id": 445425158,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718733532
    },
    {
        "content": "<p>I guess .lake has the old lakefile.olean before the branch switch, so -R is required.</p>",
        "id": 445490344,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718760943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, what are our prospects of getting rid of <code>lakefile.olean</code> entirely? This is still causing much suffering. :-)</p>",
        "id": 445745899,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718852460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> I have a plan on how to remove the need for <code>-R</code> altogether, but I have not found the time to implement it.</p>",
        "id": 445746074,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718852531
    }
]