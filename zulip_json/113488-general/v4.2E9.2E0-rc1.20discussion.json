[
    {
        "content": "<p>The following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">getHexDigit</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">char.toNat</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0x0030</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"n\">none</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">char.toNat</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0xFF10</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">char.toNat</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">0x0030</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">char.toNat</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">0xFF10</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat.lt_trans</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span><span class=\"o\">)⟩</span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"w\">      </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">32</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">          </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">          </span><span class=\"n\">none</span>\n<span class=\"w\">      </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"n\">none</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">      </span><span class=\"n\">none</span>\n</code></pre></div>\n<p>gives me <code>(kernel) declaration has free variables 'Unicode.getHexDigit?'</code>. This is fixed by removing the second or the third let. Not sure what's going on here.</p>",
        "id": 443064939,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1717681635
    },
    {
        "content": "<p>Looks like a plain bug to me, maybe you can report it ay the lean issue tracker.</p>",
        "id": 443075422,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1717684469
    },
    {
        "content": "<p>I couldn't minimize much more. I submitted a report <a href=\"https://github.com/leanprover/lean4/pull/4375\">lean4#4375</a></p>",
        "id": 443142092,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1717701698
    },
    {
        "content": "<p>When updating Mathlib to the latest version (or a project depending on Mathlib) and trying to get the cache, I get an error when compiling the file <code>Cache.IO</code> to a C-file on a Windows laptop.</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">Floris@Dell-E MINGW64 ~/projects/BonnAnalysis (master)</span>\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>update\n<span class=\"go\">error: .\\.lake\\packages\\mathlib\\lakefile.lean:86:2: error: unknown attribute [test_driver]</span>\n<span class=\"go\">error: .\\.lake\\packages\\mathlib\\lakefile.lean: package configuration has errors</span>\n<span class=\"go\">mathlib: updating repository '.\\.lake\\packages\\mathlib' to revision '678f4912899df76cc45934a56bdf929ffe3cac50'</span>\n\n<span class=\"go\">Floris@Dell-E MINGW64 ~/projects/BonnAnalysis (master)</span>\n<span class=\"gp\">$ </span>cp<span class=\"w\"> </span>.lake/packages/mathlib/lean-toolchain<span class=\"w\"> </span>.\n\n<span class=\"go\">Floris@Dell-E MINGW64 ~/projects/BonnAnalysis (master)</span>\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>update\n<span class=\"go\">info: downloading component 'lean'</span>\n<span class=\"go\">info: installing component 'lean'</span>\n<span class=\"go\">✔ [1/10] Fetched proofwidgets:optRelease</span>\n<span class=\"go\">✔ [2/10] Built Cache.IO</span>\n<span class=\"go\">✔ [3/10] Built Cache.Hashing</span>\n<span class=\"go\">✖ [4/10] Building Cache.IO:c.o</span>\n<span class=\"go\">trace: .&gt; c:\\Users\\Floris\\.elan\\toolchains\\leanprover--lean4---v4.9.0-rc1\\bin\\leanc.exe -c -o .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Cache\\IO.c.o.noexport .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Cache\\IO.c -O3 -DNDEBUG</span>\n<span class=\"go\">info: stderr:</span>\n<span class=\"go\">uncaught exception: no such file or directory (error code: 2)</span>\n<span class=\"go\">error: external command 'c:\\Users\\Floris\\.elan\\toolchains\\leanprover--lean4---v4.9.0-rc1\\bin\\leanc.exe' exited with code 1</span>\n<span class=\"go\">✖ [5/10] Building Cache.Hashing:c.o</span>\n<span class=\"go\">trace: .&gt; c:\\Users\\Floris\\.elan\\toolchains\\leanprover--lean4---v4.9.0-rc1\\bin\\leanc.exe -c -o .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Cache\\Hashing.c.o.noexport .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Cache\\Hashing.c -O3 -DNDEBUG</span>\n<span class=\"go\">info: stderr:</span>\n<span class=\"go\">uncaught exception: no such file or directory (error code: 2)</span>\n<span class=\"go\">error: external command 'c:\\Users\\Floris\\.elan\\toolchains\\leanprover--lean4---v4.9.0-rc1\\bin\\leanc.exe' exited with code 1</span>\n<span class=\"go\">✔ [6/10] Built Cache.Requests</span>\n<span class=\"go\">✖ [7/10] Building Cache.Requests:c.o</span>\n<span class=\"go\">trace: .&gt; c:\\Users\\Floris\\.elan\\toolchains\\leanprover--lean4---v4.9.0-rc1\\bin\\leanc.exe -c -o .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Cache\\Requests.c.o.noexport .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Cache\\Requests.c -O3 -DNDEBUG</span>\n<span class=\"go\">info: stderr:</span>\n<span class=\"go\">uncaught exception: no such file or directory (error code: 2)</span>\n<span class=\"go\">error: external command 'c:\\Users\\Floris\\.elan\\toolchains\\leanprover--lean4---v4.9.0-rc1\\bin\\leanc.exe' exited with code 1</span>\n<span class=\"go\">✔ [8/10] Built Cache.Main</span>\n<span class=\"go\">✖ [9/10] Building Cache.Main:c.o</span>\n<span class=\"go\">trace: .&gt; c:\\Users\\Floris\\.elan\\toolchains\\leanprover--lean4---v4.9.0-rc1\\bin\\leanc.exe -c -o .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Cache\\Main.c.o.noexport .\\.\\.lake/packages\\mathlib\\.lake\\build\\ir\\Cache\\Main.c -O3 -DNDEBUG</span>\n<span class=\"go\">info: stderr:</span>\n<span class=\"go\">uncaught exception: no such file or directory (error code: 2)</span>\n<span class=\"go\">error: external command 'c:\\Users\\Floris\\.elan\\toolchains\\leanprover--lean4---v4.9.0-rc1\\bin\\leanc.exe' exited with code 1</span>\n<span class=\"go\">Some builds logged failures:</span>\n<span class=\"go\">- Cache.IO:c.o</span>\n<span class=\"go\">- Cache.Hashing:c.o</span>\n<span class=\"go\">- Cache.Requests:c.o</span>\n<span class=\"go\">- Cache.Main:c.o</span>\n<span class=\"go\">error: build failed</span>\n<span class=\"go\">info: batteries: updating repository '.\\.\\.lake\\packages\\batteries' to revision 'af2dda22771c59db026c48ac0aabc73b72b7a4de'</span>\n<span class=\"go\">info: Qq: updating repository '.\\.\\.lake\\packages\\Qq' to revision '44f57616b0d9b8f9e5606f2c58d01df54840eba7'</span>\n<span class=\"go\">info: aesop: updating repository '.\\.\\.lake\\packages\\aesop' to revision 'f744aab6fc4e06553464e6ae66730a3b14b8e615'</span>\n<span class=\"go\">info: proofwidgets: updating repository '.\\.\\.lake\\packages\\proofwidgets' to revision 'e6b6247c61280c77ade6bbf0bc3c66a44fe2e0c5'</span>\n<span class=\"go\">info: Cli: updating repository '.\\.\\.lake\\packages\\Cli' to revision 'a11566029bd9ec4f68a65394e8c3ff1af74c1a29'</span>\n<span class=\"go\">info: importGraph: updating repository '.\\.\\.lake\\packages\\importGraph' to revision '7983e959f8f4a79313215720de3ef1eca2d6d474'</span>\n<span class=\"go\">info: mathlib: running post-update hooks</span>\n<span class=\"go\">error: mathlib: failed to fetch cache</span>\n\n<span class=\"go\">Floris@Dell-E MINGW64 ~/projects/BonnAnalysis (master)</span>\n<span class=\"gp\">$ </span>lean<span class=\"w\"> </span>--version\n<span class=\"go\">Lean (version 4.9.0-rc1, x86_64-w64-windows-gnu, commit be6c4894e0a6, Release)</span>\n</code></pre></div>",
        "id": 443263406,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717755798
    },
    {
        "content": "<p>I get similar errors when running this in powershell, or using the VSCode menu item to get the Mathlib build cache.</p>",
        "id": 443265448,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717756531
    },
    {
        "content": "<p>It looks like a false alarm: I deleted the Lean toolchain and redownloaded it, and it works correctly now.</p>",
        "id": 443266160,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717756785
    },
    {
        "content": "<p>Ideally this should not happen with elan 3.1.1+, what version are you using?</p>",
        "id": 443275354,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717758660
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>elan<span class=\"w\"> </span>--version\n<span class=\"go\">elan 3.1.1 (71ddc6633 2024-02-22)</span>\n</code></pre></div>",
        "id": 443280376,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717760676
    },
    {
        "content": "<p>Thanks, that's disappointing. And we can see in your log that there was no error (or abort) downloading it, so how could it still be corrupted (and even semi-consistently, but only on Windows)? Unfortunately I have no idea.</p>",
        "id": 443281790,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717761174
    },
    {
        "content": "<p>Yeah, that is disappointing, indeed...</p>",
        "id": 443283170,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717761665
    },
    {
        "content": "<p>I added more detailed instructions on how to update Mathlib in downstream projects (including the fact that you have to update the Lean version first): <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/487\">leanprover-community.github.io#487</a>. <br>\nI also took the opportunity to add the workaround to this issue to the troubleshooting section.</p>",
        "id": 443292421,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717764764
    },
    {
        "content": "<p>I assume that <code>leanc.exe</code> really is just missing but it would be great to have a directory listing/diff from a broken toolchain. Or even some reproduction guidelines, e.g. whether simply reinstalling the toolchain has a nonzero chance of breaking it.</p>",
        "id": 443294702,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717765552
    },
    {
        "content": "<p>The next time I encounter it I will try to see if I can send the state of the toolchain that I downloaded. The only extra piece of information I have is that <code>leanc --version</code> also showed the \"no such file or directory\"-error, so it must indeed be missing something pretty basic.</p>",
        "id": 443295621,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717765898
    },
    {
        "content": "<p>Thanks, that basically confirms that the executable itself is missing</p>",
        "id": 443295740,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717765941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>I don't get incremental compilation in</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">explicit</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">sleep</span><span class=\"w\"> </span><span class=\"mi\">1000</span>\n<span class=\"w\">  </span><span class=\"n\">trivial</span>\n<span class=\"w\">  </span><span class=\"n\">sleep</span><span class=\"w\"> </span><span class=\"mi\">1000</span>\n<span class=\"w\">  </span><span class=\"n\">sleep</span><span class=\"w\"> </span><span class=\"mi\">1000</span>\n</code></pre></div>\n<p>That should work since <a href=\"https://github.com/leanprover/lean4/pull/4364\">lean4#4364</a>, right?</p>",
        "id": 443356495,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717787553
    },
    {
        "content": "<p>Actually, that is not right. The incremental compilation is working. However, when elaborating the example, it shows the yellow bar for the whole example, not just the remaining part to elaborate.</p>",
        "id": 443357142,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717787758
    },
    {
        "content": "<p>I just found a gem in a <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/9424074856/job/25963682876\">log</a>  for a failing build. The error is an unused argument warning (which is legitimate, the code is not finished yet). However, the output says</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `unusedArguments` linter reports:</span>\n<span class=\"cm\">UNUSED ARGUMENTS. -/</span>\n<span class=\"c1\">-- Mathlib.Tactic.Linter.TextBased</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Linter</span><span class=\"bp\">/</span><span class=\"n\">TextBased</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">180</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">invalid</span><span class=\"w\"> </span><span class=\"n\">MessageData</span><span class=\"bp\">.</span><span class=\"n\">lazy</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">mode</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OutputMode</span>\n</code></pre></div>\n<p>The <code>invalid MessageData</code> part should tell me the error instead.</p>",
        "id": 443441359,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717834640
    },
    {
        "content": "<p>I am probably to blame for this, although ideally you always have a context around when pretty-printing terms, for hovers etc. Can you produce a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and report an issue? It may just be a matter of inserting <code>withSaveInfoContext</code> in the right place, maybe in the linter.</p>",
        "id": 443445907,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1717838829
    },
    {
        "content": "<p>I can help you towards this: I did some minimisation and more testing:</p>\n<ul>\n<li>the #lint command in mathlib is fine: it's the <code>runLinter</code> step</li>\n<li>no code is required: anything with an unused argument is fine.<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/13634\">#13634</a> is pretty minimal, and CI shows the same error.</li>\n</ul>",
        "id": 443447949,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717840659
    },
    {
        "content": "<p>I just tried doing so in a new project, but I cannot even get <code>lake exe runLinter</code> to show me any errors... huh. New theory: it's about build warnings replayed by the linter step. Sorry, that's all I can do for now.</p>",
        "id": 443448891,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717841410
    },
    {
        "content": "<p>After moving the Lean toolchain in <a href=\"https://github.com/leanprover/std4/pull/743\">std#743</a> from <code>v4.8.0-rc2</code> to <code>v4.9.0-rc1</code>, <a href=\"https://github.com/leanprover-community/batteries/pull/743/files#diff-606adea9889aebe4dadc3a238d894c5f4a1e266e7b263cdfad53c8cf813e43d4R116-R117\">the following proof</a> in <code>Batteries.Data.List.SplitOnList</code> no longer works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span><span class=\"w\"> </span><span class=\"n\">splitOnList_nil_left</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sep</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">splitOnList</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"n\">sep</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">[[]]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">sep</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 443456323,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1717844793
    },
    {
        "content": "<p>I had to change the proof to <code>by cases sep &lt;;&gt; unfold splitOnList &lt;;&gt; rfl</code>.</p>",
        "id": 443457153,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1717845185
    },
    {
        "content": "<p>If splitOnList is defined by well-founded recursion that's expected, and your fix looks good.</p>",
        "id": 443457892,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1717845644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E9.2E0-rc1.20discussion/near/443357142\">said</a>:</p>\n<blockquote>\n<p>Actually, that is not right. The incremental compilation is working. However, when elaborating the example, it shows the yellow bar for the whole example, not just the remaining part to elaborate.</p>\n</blockquote>\n<p>Thanks, evidently I did not test all aspects of this late change. <a href=\"https://github.com/leanprover/lean4/pull/4407\">lean#4407</a> fixes it. Let's see when a good time for an rc2 would be.</p>",
        "id": 443484702,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717862497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E9.2E0-rc1.20discussion/near/443445907\">said</a>:</p>\n<blockquote>\n<p>I am probably to blame for this, although ideally you always have a context around when pretty-printing terms, for hovers etc. Can you produce a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and report an issue? It may just be a matter of inserting <code>withSaveInfoContext</code> in the right place, maybe in the linter.</p>\n</blockquote>\n<p>We can consistently reproduce this in the <code>unusedHaveSuffices</code> linter running on <code>nightly-testing</code>. e.g. see the build failure at <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/9473031464\">https://github.com/leanprover-community/mathlib4/actions/runs/9473031464</a>.</p>\n<p>However that is far from a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. :-)</p>",
        "id": 444127251,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718154788
    },
    {
        "content": "<p>Currently in <code>Batteries/Tactic/Lint/Misc.lean</code> we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Return a list of unused `let_fun` terms in an expression.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">findUnusedHaves</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Expr</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MetaM</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">MessageData</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">mkRef</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"w\">  </span><span class=\"n\">forEachExpr</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">letFun?</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">isInternal</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">return</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">hasLooseBVars</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">return</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">addMessageContextFull</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"unnecessary have {n.eraseMacroScopes} : {t}\"</span>\n<span class=\"w\">      </span><span class=\"n\">res</span><span class=\"bp\">.</span><span class=\"n\">modify</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">return</span>\n<span class=\"w\">  </span><span class=\"n\">res</span><span class=\"bp\">.</span><span class=\"n\">get</span>\n</code></pre></div>",
        "id": 444127280,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718154814
    },
    {
        "content": "<p>Shall I change this to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Return a list of unused `let_fun` terms in an expression.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">findUnusedHaves</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Expr</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MetaM</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">MessageData</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">mkRef</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"w\">  </span><span class=\"n\">forEachExpr</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">letFun?</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">isInternal</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">return</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">hasLooseBVars</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">return</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">withSaveInfoContext</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"n\">addMessageContextFull</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"unnecessary have {n.eraseMacroScopes} : {t}\"</span>\n<span class=\"w\">      </span><span class=\"n\">res</span><span class=\"bp\">.</span><span class=\"n\">modify</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">return</span>\n<span class=\"w\">  </span><span class=\"n\">res</span><span class=\"bp\">.</span><span class=\"n\">get</span>\n</code></pre></div>",
        "id": 444127287,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718154828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, I tried out this change, but it did not have any effect. Suggestions?</p>",
        "id": 444133727,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718159189
    },
    {
        "content": "<p>^I've diagnosed the issue: <a href=\"https://github.com/leanprover/lean4/pull/4432\">lean4#4432</a>. If this is the intended behavior in core, then Batteries <code>printWarning</code> can be patched like so: <a href=\"https://github.com/leanprover-community/batteries/pull/838\">batteries#838</a></p>",
        "id": 444140149,
        "sender_full_name": "llllvvuu",
        "timestamp": 1718163761
    },
    {
        "content": "<p>I can't reproduce it consistently, but sometimes, especially when having a bunch of nested proofs, the state shown in the infoview is the state of the previous level of nesting.</p>",
        "id": 444150699,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718170048
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">a</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">a</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">f_eq_g</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">f_eq_g</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">unfold</span><span class=\"w\"> </span><span class=\"n\">g</span>\n<span class=\"w\">  </span><span class=\"c1\">--&lt;--here</span>\n<span class=\"w\">  </span><span class=\"n\">rfl</span>\n</code></pre></div>\n<p>this seems to work fairly often, but note that it doesn't happen if you copy-paste the <code>example</code> - you have to type it by hand</p>",
        "id": 444151223,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718170366
    },
    {
        "content": "<p>Could you please test this on nightly-testing as well?</p>",
        "id": 444151547,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718170560
    },
    {
        "content": "<p>It doesn't seem to happen there</p>",
        "id": 444151720,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718170656
    },
    {
        "content": "<p>Thanks! Did your original example have a comment as well? The issue is very sensitive on the amount of whitespace and comments around</p>",
        "id": 444152047,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718170848
    },
    {
        "content": "<p>No, but adding the comment here didn't change it</p>",
        "id": 444154619,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718172283
    },
    {
        "content": "<p>15 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/MessageData.20without.20context\">#general &gt; MessageData without context</a> by <span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span>.</p>",
        "id": 444176467,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718180638
    },
    {
        "content": "<p>When editing in a long proof yesterday evening (in <code>Mathlib.NumberTheory.GaussSum</code>, while working on <a href=\"https://github.com/leanprover-community/mathlib4/pull/13737\">#13737</a>) recently, I noticed various problems (using VSCode):</p>\n<ul>\n<li>sometimes the old goal state (i.e., before the tactic) was shown after a tactic</li>\n<li>sometimes the proof (or the part from the editing position onwards) was not re-checked after editing (and Shift-Ctrl-X did not work; I had to click the \"Restart File\" button)</li>\n<li>sometimes the language server seemed to hang (with either the whole file being marked with the orange bar or only the long proof)</li>\n</ul>\n<p>These problems did not appear to be completely deterministic, so it is probably hard to produce reproducible <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s.</p>",
        "id": 444205178,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718190257
    },
    {
        "content": "<p>This was already reported and is being fixed upstream</p>",
        "id": 444207478,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718190885
    },
    {
        "content": "<p>(not sure where this was reported, though)</p>",
        "id": 444207513,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718190897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Could I ask you as well to reproduce your issues on the <code>nightly-testing</code> branch?</p>",
        "id": 444209895,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718191727
    },
    {
        "content": "<p>I can try this evening (CEST).</p>",
        "id": 444211607,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718192283
    },
    {
        "content": "<p>Same problem for me.</p>",
        "id": 444212578,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718192595
    },
    {
        "content": "<p>Okay, I can reproduce. Thanks.</p>",
        "id": 444213050,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718192771
    },
    {
        "content": "<p>What is the planned timeline for rc2? The 'wrong goals' bug is a little painful.</p>",
        "id": 444254717,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1718203709
    },
    {
        "content": "<p>I'm also having this bug and I agree its quite painful.</p>",
        "id": 444269192,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1718207146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E9.2E0-rc1.20discussion/near/444211607\">said</a>:</p>\n<blockquote>\n<p>I can try this evening (CEST).</p>\n</blockquote>\n<p>The current <code>nightly-testing</code> branch seems to have errors in the imports of the file I was working on. Is there a specific <code>nightly-testing-xxx</code> branch that I can use?</p>",
        "id": 444297879,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718215228
    },
    {
        "content": "<p>OK; I've fixed the build errors...</p>",
        "id": 444305704,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718217506
    },
    {
        "content": "<p>Playing around a bit with the long proof it seems to work OK (and feels quite a bit snappier) on <code>nightly-testing</code>.</p>",
        "id": 444307629,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718218109
    },
    {
        "content": "<p>Sorry about the delay here. I'm hoping to do rc2 tonight.</p>",
        "id": 444364261,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718244295
    },
    {
        "content": "<p>Sometimes after finishing a proof it warns that a declaration uses 'sorry' even though it doesn't (Shift-Ctrl-X fixes it). Is this also part of what was fixed?</p>",
        "id": 444846467,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718443952
    },
    {
        "content": "<p>I also had this error.</p>",
        "id": 444846949,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718444350
    },
    {
        "content": "<p>Worse -- I have VS Code reporting that a proof is fine, and both \"restart file\" and \"restart server\" continue to report that it's fine (the orange bars appear and then they go with no errors), but building Lean on the command line reports an error.</p>",
        "id": 444847220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718444606
    },
    {
        "content": "<p>I've fixed my proof in VS Code and now it's compiling fine on command line and reporting</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">never</span><span class=\"w\"> </span><span class=\"n\">executed</span>\n<span class=\"n\">note</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">disabled</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">unreachableTactic</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>on a random simp call in VS Code. I remember seeing Lean like this once before, around a year ago, it was constantly giving incorrect \"this tactic is never executed\" reports. This time \"restart file\" does fix it.</p>",
        "id": 444847522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718444902
    },
    {
        "content": "<p>Same issues here</p>",
        "id": 444848193,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718445504
    },
    {
        "content": "<p>Repros very welcome. :-)</p>",
        "id": 444849533,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718446125
    },
    {
        "content": "<p>Currently it's an heisenbug to me <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 444849680,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718446231
    },
    {
        "content": "<p>I'm pretty sure this is related to a bad interaction between <code>unreachableTactic</code> linter and the new tactic caching feature in 4.9.0-rc1</p>",
        "id": 444874804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718466005
    },
    {
        "content": "<p>Are these observations about rc2? If so, could we please move them to a new topic?</p>",
        "id": 444891101,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718474533
    },
    {
        "content": "<p>Well I think they are true about both rc1 and rc2</p>",
        "id": 444896432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718477392
    },
    {
        "content": "<p>the issue was introduced in rc1</p>",
        "id": 444896496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718477409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E9.2E0-rc1.20discussion/near/444896432\">said</a>:</p>\n<blockquote>\n<p>both rc1 and rc2</p>\n</blockquote>\n<p>Thanks, that was the important missing bit. Certainly if there is <em>any</em> incongruence in positions between the info tree and the syntax tree, this linter will be the most prominent part to complain. Now we just need a reproducer.</p>",
        "id": 444970169,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718539140
    },
    {
        "content": "<p>I'd hope that if you do come across such an example, undoing and then redoing a few steps should consistently replay it</p>",
        "id": 444970192,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718539168
    },
    {
        "content": "<p>I found the unused tactic linter error bug rare (and nondeterministic) but once it shows up, it sticks around even when things are changed quite substantially in the proof where it appears - this was with rc1. </p>\n<p>Given that it goes away when the server is restarted, are there any specific tips for actually isolating such a thing once it starts appearing?</p>",
        "id": 444972311,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1718540959
    },
    {
        "content": "<p>See if it disappears if you undo enough steps and reappears if you redo them</p>",
        "id": 444973223,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718541750
    },
    {
        "content": "<p>Perhaps it's possible to use <a href=\"https://rr-project.org/\">rr</a>? Or maybe just screen recording and restarting the server every so often will suffice</p>",
        "id": 445050440,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718597388
    },
    {
        "content": "<p>This topic has been pretty quiet, are people still encountering this issue on rc2?</p>",
        "id": 445791887,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718873397
    },
    {
        "content": "<p>Which one? The unused tactics one? I've been encountering it</p>",
        "id": 445792110,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718873457
    },
    {
        "content": "<p>Yes, that's the one. Randomly editing Mathlib doesn't trigger it for me so I'm not sure what else to try</p>",
        "id": 445792323,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718873515
    },
    {
        "content": "<p>I can't quite ensure you it was on rc2. I keep on switching branches and it might have happened on a branch that was still on rc1</p>",
        "id": 445792820,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718873643
    },
    {
        "content": "<p>From the code I can completely see how this issue was introduced by rc1 and could have been fixed by rc2 so I'm really going off Mario's and your report that this is still happening</p>",
        "id": 445793723,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718873888
    },
    {
        "content": "<p>Okay, I'll keep an eye out</p>",
        "id": 445793852,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718873933
    },
    {
        "content": "<p>I'm pretty sure I'm still seeing random \"this tactic is not used\" incorrect reports on rc2 but whenever I see them I try and capture them with ctrl-Z and ctrl-shift-Z but they're gone. Will keep trying.</p>",
        "id": 445833458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718887220
    },
    {
        "content": "<p>I saw that yesterday as well (on rc2): I modified the last line of a proof and suddenly several lines above were reported as containing unreachable tactics. Restarting the file made it go away. I don't have a file where I can reliably reproduce it though.</p>",
        "id": 445834363,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1718887529
    },
    {
        "content": "<p>One of my students <span class=\"user-mention\" data-user-id=\"697518\">@Hannah Scholz</span> reported that she didn't encounter the \"wrong goal state / no goals\" issue anymore in rc2.</p>",
        "id": 445845043,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718889847
    },
    {
        "content": "<p>I think Hannah just saw me encountering it in rc2</p>",
        "id": 445863362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718893554
    },
    {
        "content": "<p>Ok, never mind then.</p>",
        "id": 445871127,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718895201
    },
    {
        "content": "<p>I've seen it in RC2 as well. I tried isolating, but made it disappear.</p>",
        "id": 445906712,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1718902889
    },
    {
        "content": "<p>I just hit an instance of this too, it still happens but it seems much less frequent than in rc1</p>",
        "id": 446500501,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719194579
    },
    {
        "content": "<p>Does rc3 have the same problem? I cannot decide whether to upgrade or downgrade my project.</p>",
        "id": 446595749,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1719230375
    },
    {
        "content": "<p>Most likely no changes in rc3. Even if we don't have a reproducer, it would be really helpful to just post where you have encountered the issue, ideally together with the first affected state of the command and a description of the change you did to get there. Perhaps there is a common theme that could explain the low frequency of the issue, such as a specific tactic combinator triggering it.</p>",
        "id": 446597606,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719230992
    },
    {
        "content": "<p>Because I still haven't seen it myself and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, author of the linter, just told me he likely hasn't either on rc2</p>",
        "id": 446597823,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719231049
    },
    {
        "content": "<p>Alright, non-minimal non-working example:<br>\n<a href=\"https://github.com/madvorak/vcsp/blob/e13013a79d4b66ad2c1c3976571cd475ff6769c7/VCSP/LinearProgrammingE.lean#L251\">https://github.com/madvorak/vcsp/blob/e13013a79d4b66ad2c1c3976571cd475ff6769c7/VCSP/LinearProgrammingE.lean#L251</a></p>\n<p>Just write any nonsense on this line (but it must use existing identifiers — such as <code>rfl</code> which won't work there). VS Code does not show any error. The only way to find out that something is wrong (inside the IDE, without going to the command line) is that the proof state does not update with new lines.</p>",
        "id": 446598625,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1719231356
    },
    {
        "content": "<p>This is a different issue and on rc1? rc1 bug reports are not helpful at this point.</p>",
        "id": 446599142,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719231532
    },
    {
        "content": "<p>Oh sorry; I tried to do the same thing in rc2, but the error was the same so I didn't commit the bump.</p>",
        "id": 446599297,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1719231581
    },
    {
        "content": "<p>Huh, thanks, I'll take a look</p>",
        "id": 446599421,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719231623
    },
    {
        "content": "<p>Could you please push a commit/branch with the updated toolchain and manifest and a description of a specific change to trigger the issue?</p>",
        "id": 446599744,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719231732
    },
    {
        "content": "<p>Alright, this is the same bug on v4.9.0-rc3:<br>\n<a href=\"https://github.com/madvorak/vcsp/tree/bug\">https://github.com/madvorak/vcsp/tree/bug</a><br>\nThe bug doesn't seem to depend on the sequence of editing operations that got me there. Just open this project as it is in VS Code.</p>\n<p>Clearly, this long <code>rfl</code> sequence should trigger an error:<br>\n<a href=\"https://github.com/madvorak/vcsp/blob/97f4ce4ef774e730b5e6495c43434adebf2e188e/VCSP/LinearProgrammingE.lean#L250\">https://github.com/madvorak/vcsp/blob/97f4ce4ef774e730b5e6495c43434adebf2e188e/VCSP/LinearProgrammingE.lean#L250</a><br>\nUnfortunately, VS Code does not show anything. You must go to the command line and build it there in order to see the the error message.</p>",
        "id": 446602696,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1719232675
    },
    {
        "content": "<p>Not really MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">Defs</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">eq_or_lt_of_le</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">eq1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">lt1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rwa</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">lt_one_iff</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">lt1</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">eq_or_lt_of_le</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">eq1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">lt1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rwa</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">lt_one_iff</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">lt1</span>\n</code></pre></div>\n<p>The <code>rfl</code> in <code>inl eq1</code> should make VS Code complain in both proofs.<br>\nOnly the second example leads to VS Code displaying the error.<br>\nThe same inconsistency happens in Lean 4 Web.</p>",
        "id": 446640118,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1719241712
    },
    {
        "content": "<p>That can be de-Mathlibifed it seems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">eq_or_lt_of_le</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">eq1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">lt1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">eq_or_lt_of_le</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">eq1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">lt1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 446641992,
        "sender_full_name": "llllvvuu",
        "timestamp": 1719242161
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hpq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"bp\">∨</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"bp\">∨</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">hpq</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">hp</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">hq</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">hq</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hpq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"bp\">∨</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"bp\">∨</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">hpq</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">hp</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">hq</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">hq</span>\n</code></pre></div>\n<p>VS Code displays the error only in the second example.</p>",
        "id": 446642440,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1719242261
    },
    {
        "content": "<p><del>I guess this is not an incr.comp. bug</del> it is</p>",
        "id": 446646092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719243115
    },
    {
        "content": "<p>just reported:  <a href=\"https://github.com/leanprover/lean4/issues/4553\">https://github.com/leanprover/lean4/issues/4553</a></p>",
        "id": 446652846,
        "sender_full_name": "llllvvuu",
        "timestamp": 1719244538
    },
    {
        "content": "<p>And fixed: <a href=\"https://github.com/leanprover/lean4/pull/4554\">lean#4554</a></p>",
        "id": 446653137,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719244588
    },
    {
        "content": "<p>Thanks for the reproducer, if only the other issue was as easy to pin down!</p>",
        "id": 446653338,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719244623
    },
    {
        "content": "<blockquote>\n<p>Even if we don't have a reproducer, it would be really helpful to just post where you have encountered the issue, ideally together with the first affected state of the command and a description of the change you did to get there. Perhaps there is a common theme that could explain the low frequency of the issue, such as a specific tactic combinator triggering it.</p>\n</blockquote>\n<p>Just to clarify, this wasn't meant as a direct answer to <span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> but to anyone encountering the linter issue!</p>",
        "id": 446657437,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719245442
    },
    {
        "content": "<p>I'm not certain about this, but I just had a lemma give a(n incorrect) warning that it used sorry, then #print axioms agreed. On commenting out and uncommenting, the warning went away and everything seemed normal. The step I took just before the weird behaviour happened was deleting a <code>simp only</code> command. I believe that the unused tactics thing has also happened to me in the past twice just after deleting a <code>simp only</code>. Again I'm not certain about this, but maybe this is still useful.<br>\n(Specifically in this case, the <code>simp only</code> was unnecessary, and so deleting it should have made the theorem true. And it was sorry-free, so the warning surprised me)</p>",
        "id": 446768735,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719286558
    },
    {
        "content": "<p>I also saw an incorrect \"uses sorry\" warning yesterday, which appeared on the declaration above the one I was editing. I couldn't get it to come back after restarting the server, however, but I also couldn't remember the exact edit sequence.</p>",
        "id": 446780043,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719293096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E9.2E0-rc1.20discussion/near/446653137\">said</a>:</p>\n<blockquote>\n<p>And fixed: <a href=\"https://github.com/leanprover/lean4/pull/4554\">lean#4554</a></p>\n</blockquote>\n<p><del>Can projects downstream of Mathlib already use the fixed version please?</del><br>\nSorry, I didn't notice it hadn't been merged yet.</p>",
        "id": 446817356,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1719305927
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4554\">lean#4554</a> has just been sent to the merge queue, and it will be backported to <code>v4.9.0</code>. Since this seems to have been causing trouble for users I'm inclined to just cut <code>v4.9.0-rc4</code> shortly (tonight or tomorrow my time), and move Mathlib to that (and then anyone downstream has the option, too).</p>",
        "id": 446818303,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719306164
    },
    {
        "content": "<blockquote>\n<p>Since this seems to have been causing trouble for users</p>\n</blockquote>\n<p>I think this has been reported only once so far, by Martin? That's more than zero but I'm currently more concerned about the open issues mentioned above, the linter issue and the sorry issue.</p>",
        "id": 446818693,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719306275
    },
    {
        "content": "<p>(moving to mathlib@stable also fixes the bug for downstream usesrs, in a manner)</p>",
        "id": 446818867,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719306317
    },
    {
        "content": "<p>Okay, in that case I will <em>not</em> cut <code>rc4</code> at this point!</p>",
        "id": 446819236,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719306402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E9.2E0-rc1.20discussion/near/446595749\">said</a>:</p>\n<blockquote>\n<p>Does rc3 have the same problem? I cannot decide whether to upgrade or downgrade my project.</p>\n</blockquote>\n<p>I apologize for the confusion I caused. I originally thought I was experiencing the same bug as everybody else, as I hadn't read this thread properly.</p>",
        "id": 446819672,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1719306506
    },
    {
        "content": "<p>No problem, I don't expect users to differentiate whether two issues could have the same root cause or not. But for the protocol, your issue did turn out to be quite specific to the <code>induction/cases ... (by ...) ... with</code> pattern which I don't think is used very often :) .</p>",
        "id": 446820055,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719306602
    },
    {
        "content": "<p>I already showed this to Sebastian in person, but I have a reliable non-minimized reproduction for the sorry bug:</p>\n<ul>\n<li>check out mathlib commit <code>59f1833d</code>, open file <code>Mathlib/InfinityCosmos.lean</code></li>\n<li>just before line 39 (<code>Functor.id_eq_id</code>), add the following:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">                                   </span><span class=\"c1\">-- (this line should be blank but zulip eats the formatting)</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<ul>\n<li>Insert the two lines above in quick succession (about 1/3 second between them). The easiest way to do this is to type out those two lines, then delete the <code>def foo := 1</code> line, delete the blank line, and then use Ctrl-Z twice in quick succession to reinsert them.</li>\n<li>Expected result: There will be a message on <code>Adjunction.ofHomRestrictionIso</code> saying it uses 'sorry', and depending on how fast you were some of the <code>simp</code> calls will also trigger the <code>unreachableTactic</code> linter.</li>\n</ul>\n<p><a href=\"/user_uploads/3121/ophoE-Ht8OeGdi1X0_zigcGD/Screencast-from-06-25-2024-024339-PM.webm\">Screencast-from-06-25-2024-024339-PM.webm</a></p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"/user_uploads/3121/ophoE-Ht8OeGdi1X0_zigcGD/Screencast-from-06-25-2024-024339-PM.webm\" title=\"Screencast-from-06-25-2024-024339-PM.webm\"><video preload=\"metadata\" src=\"/user_uploads/3121/ophoE-Ht8OeGdi1X0_zigcGD/Screencast-from-06-25-2024-024339-PM.webm\"></video></a></div>",
        "id": 446872130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719319665
    },
    {
        "content": "<p>Another bug I've hit a few times today (on rc3) is my vscode suddenly disabling any unicode inputs. I can type, eg, \\N, but it just remains like that (no underscore appears). It seems to happen when I change tabs in vscode. (gitpod on a recent mathlib, 4.9.0-rc3). Apologies if this is also unrelated to the issues above.</p>",
        "id": 446991441,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719348267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E9.2E0-rc1.20discussion/near/446991441\">said</a>:</p>\n<blockquote>\n<p>Another bug I've hit a few times today (on rc3) is my vscode suddenly disabling any unicode inputs. I can type, eg, \\N, but it just remains like that (no underscore appears). It seems to happen when I change tabs in vscode. (gitpod on a recent mathlib, 4.9.0-rc3). Apologies if this is also unrelated to the issues above.</p>\n</blockquote>\n<p>I've been hitting this for a while as well (probably well before 4.9.0-rc3, maybe even 4.8.0 or earlier), but I didn't know if it was an issue with Lean LSP, Lean VSCode extension, VSCode itself, or some unrelated other extension or OS issue</p>",
        "id": 447006558,
        "sender_full_name": "llllvvuu",
        "timestamp": 1719352966
    },
    {
        "content": "<p>Any repro on the unicode inputs issue would be great.</p>\n<p>I have a semi-reducible repro, which is that if I work over an ssh connection with a very long ping time that then the unicode replacement works either some or not at all. I did attempt to simulate this without travelling to Europe via a nested sequence of ssh tunnels, with partial but not particularly useful success!</p>\n<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> is aware of this one, but I'm not sure if what <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> and <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> are seeing is the same or not.</p>",
        "id": 447026138,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719360883
    },
    {
        "content": "<p>It might be the same issue; I've only experienced it over SSH</p>",
        "id": 447033382,
        "sender_full_name": "llllvvuu",
        "timestamp": 1719363722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E9.2E0-rc1.20discussion/near/446991441\">said</a>:</p>\n<blockquote>\n<p>Another bug I've hit a few times today (on rc3) is my vscode suddenly disabling any unicode inputs. I can type, eg, \\N, but it just remains like that (no underscore appears). It seems to happen when I change tabs in vscode. (gitpod on a recent mathlib, 4.9.0-rc3). Apologies if this is also unrelated to the issues above.</p>\n</blockquote>\n<p>What version of the VS Code extension are you using?</p>",
        "id": 447146426,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1719387508
    },
    {
        "content": "<p>Ah, I think I know what's going on here. This is likely a bug that was already fixed by <a href=\"https://github.com/leanprover-community/vscode-lean4/pull/480\">vscode-lean4#480</a>, but since GitPod uses VS Code extensions from the openvsx marketplace <a href=\"https://github.com/eclipse/openvsx/issues/945#issue-2363383792\">which has been down for the last week until yesterday, preventing us from publishing the extension</a>, GitPod is still using an old VS Code extension version that doesn't include the fix. Let me see if publishing to openvsx works now.</p>",
        "id": 447147557,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1719387913
    },
    {
        "content": "<p>So, GitPod uses an extension version of 0.0.164, but the most recent one is 0.0.168.</p>",
        "id": 447147806,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1719387992
    },
    {
        "content": "<p>0.0.169 is now available on OpenVSX. Please let me know if you still encounter issues with the abbreviation mechanism breaking when switching tabs on that version.</p>",
        "id": 447150787,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1719389073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E9.2E0-rc1.20discussion/near/447006558\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E9.2E0-rc1.20discussion/near/446991441\">said</a>:</p>\n<blockquote>\n<p>Another bug I've hit a few times today (on rc3) is my vscode suddenly disabling any unicode inputs. I can type, eg, \\N, but it just remains like that (no underscore appears). It seems to happen when I change tabs in vscode. (gitpod on a recent mathlib, 4.9.0-rc3). Apologies if this is also unrelated to the issues above.</p>\n</blockquote>\n<p>I've been hitting this for a while as well (probably well before 4.9.0-rc3, maybe even 4.8.0 or earlier), but I didn't know if it was an issue with Lean LSP, Lean VSCode extension, VSCode itself, or some unrelated other extension or OS issue</p>\n</blockquote>\n<p>I consider the SSH thing to be a VS Code issue, since (AFAIK) there is no way for us to work around it in vscode-lean4. We may however mitigate it in the future by moving the abbreviation mechanism to an entirely separate VS Code extension that always runs on the client and is hence not affected by the added latency of using SSH.<br>\nIf you're curious about some of the details on what causes this race condition, see <a href=\"https://github.com/leanprover-community/vscode-lean4/pull/389\">vscode-lean4#389</a>. The core issue is that VS Code provides no API to read from the text editor and write to it in an atomic manner.</p>",
        "id": 447152936,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1719389781
    },
    {
        "content": "<p>Yeah I think I've only had this on ssh as well, so it seems most likely the same issue. Thanks for the resolution!</p>",
        "id": 447220560,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719408844
    },
    {
        "content": "<p>To be clear, the SSH issue in particular is not resolved yet. It also manifests differently from what you described: The underline is rendered, but when you attempt to replace the abbreviation, VS Code refuses the edit and retains the underline instead of replacing the abbreviation. In your \"Lean: Editor\" output window (<code>Troubleshooting: Show Output</code>), you should also see an \"Unable to replace abbreviation\" error when this occurs.</p>\n<p>The particular issue you described where the abbreviation mechanism stops working entirely when switching tabs may have been fixed by <a href=\"https://github.com/leanprover-community/vscode-lean4/pull/480\">vscode-lean4#480</a>, though, and now that we can ship this fix to GitPod again, it may have been resolved.</p>",
        "id": 447221428,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1719409112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E9.2E0-rc1.20discussion/near/446597606\">said</a>:</p>\n<blockquote>\n<p>Most likely no changes in rc3. Even if we don't have a reproducer, it would be really helpful to just post where you have encountered the issue, ideally together with the first affected state of the command and a description of the change you did to get there. Perhaps there is a common theme that could explain the low frequency of the issue, such as a specific tactic combinator triggering it.</p>\n</blockquote>\n<p>Just had it again, I think ~5 lines below and including a <code>simp only</code> had the unused tactic lint flag them. The action I took directly before this happened was to delete an unused argument. I may just have increased suspicions around <code>simp only</code>, but it does seem a common factor to me.<br>\nReinserting the unused argument then deleting it again didn't make the warnings come back though.</p>",
        "id": 447285186,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719423716
    },
    {
        "content": "<p>Yes, this issue turned out to be specific to <code>simp</code> and perhaps some other elaborators plus specific timing around edits, which explains why it was so hard to nail down. <a href=\"https://github.com/leanprover/lean4/pull/4569\">lean#4569</a> should fix both the sorry bug and the lint bug.</p>",
        "id": 447336836,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719435934
    }
]