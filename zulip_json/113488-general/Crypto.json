[
    {
        "content": "<p>A colleague of mine is interested in proving the following result in Lean for a piece of crypto code. Here is the problem description he shared with me.</p>\n<p>Hypotheses:</p>\n<ul>\n<li><code>Q = 3329</code> </li>\n<li><code>0 &lt; A &lt; Q</code></li>\n<li><code>0 &lt; B &lt; Q</code></li>\n</ul>\n<p>Given that, please prove that ((A * B) div Q) * Q != (A * B) where “div” is truncating integer division (rounding down towards zero).</p>",
        "id": 411949852,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1704811871
    },
    {
        "content": "<p>Formal statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">challenge_aux</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0a</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">challenge</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3329</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0a</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">challenge_aux</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h0a</span> <span class=\"n\">ha</span> <span class=\"n\">h0b</span> <span class=\"n\">hb</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hq</span><span class=\"o\">]</span>\n  <span class=\"k\">show</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">3329</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 411951044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704812245
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"mi\">3329</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Q</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">hQ</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_of_mul_left_eq</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hP.not_dvd_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hAd</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hA.1.ne'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.eq_zero_of_dvd_of_lt</span> <span class=\"n\">hAd</span> <span class=\"n\">hA.2</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hBd</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hB.1.ne'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.eq_zero_of_dvd_of_lt</span> <span class=\"n\">hBd</span> <span class=\"n\">hB.2</span>\n</code></pre></div>\n<p><del>Last sorry should be easy</del></p>",
        "id": 411951124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704812271
    },
    {
        "content": "<p>Which imports do you need for the <code>norm_num</code> proof?</p>",
        "id": 411951375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704812339
    },
    {
        "content": "<p>Aha: <code>import Mathlib.Data.Nat.PrimeNormNum</code></p>",
        "id": 411951708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704812428
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.PrimeNormNum</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">challenge_aux</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0a</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_of_mul_left_eq</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hp.not_dvd_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.not_dvd_of_pos_of_lt</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">challenge</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3329</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0a</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">challenge_aux</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h0a</span> <span class=\"n\">ha</span> <span class=\"n\">h0b</span> <span class=\"n\">hb</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hq</span><span class=\"o\">]</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 411952312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704812584
    },
    {
        "content": "<p>Nice, <code>not_dvd_of_pos_of_lt </code> was the one I couldn't find</p>",
        "id": 411952431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704812616
    },
    {
        "content": "<p><code>apply?</code> found it for me</p>",
        "id": 411952468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704812627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> voila: 2 solutions <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 411952753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704812697
    },
    {
        "content": "<p><code>(n / m) * m = n ↔ m ∣ n</code> deserves to be in mathlib!</p>",
        "id": 411952946,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704812750
    },
    {
        "content": "<p>Three:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"mi\">3329</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Q</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- assume the contrary</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- replace Q by 3329</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hQ</span>\n  <span class=\"c1\">-- key fact: 3329 is prime</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">3329</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"c1\">-- use our hypotheses about `A * B`</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">3329</span> <span class=\"bp\">∣</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">use</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">/</span> <span class=\"mi\">3329</span>\n    <span class=\"n\">nth_rw</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">ring</span>\n  <span class=\"c1\">-- mathlib has the key fact that p ∣ AB =&gt; p ∣ A or p ∣ B</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.Prime.dvd_mul</span> <span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n  <span class=\"c1\">-- do the two cases</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">-- now easy to get a contradiction in both cases</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.eq_zero_of_dvd_of_lt</span> <span class=\"n\">h</span> <span class=\"n\">hA.2</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.eq_zero_of_dvd_of_lt</span> <span class=\"n\">h</span> <span class=\"n\">hB.2</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 411953030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704812764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/Crypto/near/411952946\">said</a>:</p>\n<blockquote>\n<p><code>(n / m) * m = n ↔ m ∣ n</code> deserves to be in mathlib!</p>\n</blockquote>\n<p>Ah. it's already there.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">challenge</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3329</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0a</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.dvd_iff_div_mul_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hq.not_dvd_mul</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_dvd_of_pos_of_lt</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_dvd_of_pos_of_lt</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 411953930,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704813000
    },
    {
        "content": "<p>Minigolf:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.PrimeNormNum</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">challenge_aux</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0a</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ne.def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.dvd_iff_div_mul_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">Nat.Prime.not_dvd_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.not_dvd_of_pos_of_lt</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">challenge</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3329</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0a</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">challenge_aux</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h0a</span> <span class=\"n\">ha</span> <span class=\"n\">h0b</span> <span class=\"n\">hb</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 411954944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704813298
    },
    {
        "content": "<p>Thanks for the help everyone. For context, this proof allow me to shave 2 machine code instructions off the Montgomery-style reduction of (A * B) mod 3329 in the Kyber PQC algorithm.</p>",
        "id": 411955943,
        "sender_full_name": "Roderick Chapman",
        "timestamp": 1704813588
    },
    {
        "content": "<p>I like Kevin's version because it has comments that I can understand... :-)</p>",
        "id": 411956532,
        "sender_full_name": "Roderick Chapman",
        "timestamp": 1704813739
    },
    {
        "content": "<p>We are sorry about the delay, everybody was busy watching <a href=\"https://leanprover-community.github.io/lt2024/\">Lean Together</a> talks.</p>",
        "id": 411957661,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704814035
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 411965319,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1704816326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"679786\">Roderick Chapman</span> <a href=\"#narrow/stream/113488-general/topic/Crypto/near/411955943\">said</a>:</p>\n<blockquote>\n<p>Thanks for the help everyone. For context, this proof allow me to shave 2 machine code instructions off the Montgomery-style reduction of (A * B) mod 3329 in the Kyber PQC algorithm.</p>\n</blockquote>\n<p>Just out of curiosity: you need the formalized proof because you want to formally prove that your implementation is correct? Or just wanted to be totally sure of the fact before  using it?</p>\n<p>Also, 3329 looks like a strange prime to use in cryptography (too small to be a \"big prime\", too big to be a \"small prime\". Why that choice? Is there some delicate balance between the size of the set where you sample, the variance of the distribution and the number of samples or something like that?</p>",
        "id": 412021556,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1704838738
    },
    {
        "content": "<p>I can't comment on the choice of 3329 - this is \"Module Lattice\" math that I frankly do not understand. Google for \"FIPS-203\" for the details.</p>",
        "id": 412110947,
        "sender_full_name": "Roderick Chapman",
        "timestamp": 1704882825
    },
    {
        "content": "<p>As for the proof... I'm basically trying to compute (A * B) mod 3329, where both A and B lie in 0 .. 3328, but do it as fast as possible, and avoid using a \"divide\" instruction, which leak info via a timing side-channel.  The standard way to compute<br>\n\"mod\" is to do<br>\n R = A mod 3329 = A - (A div 3329) * 3329<br>\nbut you do the \"div\" using a multiply and shift sequence, using (2**37 / 3329) as the multiplier which is close enough to being an integer to get the right answer if A and B are both in 0 .. 3328.</p>\n<p>Without the proof above I can prove that the answer I get lies in 0 .. 3329, so I have to do one additional constant-time reduction step:</p>\n<p>R := Boolean'Pos (R /= 3329) * R;</p>\n<p>On ARM64 with optimization enabled, that costs an extra 2 instructions.</p>\n<p>With the proof above, I can prove that I get answer in 0 .. 3328, so that final reduction step is not required.</p>\n<p>Does that make sense?</p>",
        "id": 412113500,
        "sender_full_name": "Roderick Chapman",
        "timestamp": 1704883525
    },
    {
        "content": "<p>The choice of <code>p = 3329</code> seems related to the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>d</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">X^d - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9324em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> splits completely over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>, where <code>d</code> is some power of <code>2</code> (indeed <code>3329 = 2^8 * 13 + 1</code>), but I don't know.</p>",
        "id": 412115476,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704884129
    },
    {
        "content": "<p>So, (2**37/3329) is treated as a floating point number? or you mean the quotient of that division with remainder?</p>",
        "id": 412199322,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1704912066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> <a href=\"#narrow/stream/113488-general/topic/Crypto/near/412199322\">said</a>:</p>\n<blockquote>\n<p>So, (2**37/3329) is treated as a floating point number? or you mean the quotient of that division with remainder?</p>\n</blockquote>\n<p>The <code>/</code> stands for truncating division, probably. Compilers often optimize division by a constant D by finding a \"magic number\" (that's the technical term) M and a shift S such that A*M&gt;&gt;S equals A/D for every (32-bit, say) integer, and this is an example of a magic number for dividing by 3329. You can read more about it in chapter 10 of <a href=\"https://en.wikipedia.org/wiki/Hacker%27s_Delight\">Hacker's Delight</a>.</p>",
        "id": 412200566,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1704912620
    },
    {
        "content": "<p>I see. So in this particular case, just an exhaustive check argument in 3329 cases would be ok too?</p>",
        "id": 412203476,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1704913772
    },
    {
        "content": "<p>BTW, is that actually faster than looking up in a precomputed table?</p>",
        "id": 412203639,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1704913834
    },
    {
        "content": "<p>A 3329^2 lookup table would probably not fit in cache or be evicted often</p>",
        "id": 412204050,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1704914037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"679786\">Roderick Chapman</span> <a href=\"#narrow/stream/113488-general/topic/Crypto/near/411955943\">said</a>:</p>\n<blockquote>\n<p>Thanks for the help everyone. For context, this proof allow me to shave 2 machine code instructions off the Montgomery-style reduction of (A * B) mod 3329 in the Kyber PQC algorithm.</p>\n</blockquote>\n<p>Oh hey Rod. I thought this sounded oddly like your kind of thing.</p>",
        "id": 412307244,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704967536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/113488-general/topic/Crypto/near/412307244\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"679786\">Roderick Chapman</span> <a href=\"#narrow/stream/113488-general/topic/Crypto/near/411955943\">said</a>:</p>\n<blockquote>\n<p>Thanks for the help everyone. For context, this proof allow me to shave 2 machine code instructions off the Montgomery-style reduction of (A * B) mod 3329 in the Kyber PQC algorithm.</p>\n</blockquote>\n<p>Oh hey Rod. I thought this sounded oddly like your kind of thing.</p>\n</blockquote>\n<p>smol world</p>",
        "id": 413233637,
        "sender_full_name": "Alok Singh",
        "timestamp": 1705436926
    },
    {
        "content": "<p>Well, I work in Rod's approximate field (he is big smart and every time I have the chance to talk to him it's awesome). We were on a panel together relatively recently!</p>",
        "id": 415937312,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705458057
    },
    {
        "content": "<p>I'm pleased to say that my colleague John Harrison has also supplied a proof of that Lemma in HOL-Lite, so at least I now have a comforting feeling of redundancy... :-)</p>",
        "id": 418058072,
        "sender_full_name": "Roderick Chapman",
        "timestamp": 1706181629
    },
    {
        "content": "<p>Some additional higher level context from this morning: <a href=\"https://words.filippo.io/dispatches/mlkem768/\">https://words.filippo.io/dispatches/mlkem768/</a> </p>\n<blockquote>\n<p>exhaustively test every input combination for base field arithmetic operations (addition, subtraction, and multiplication modulo 3329) against expected values computed trivially with variable-time operations;</p>\n</blockquote>",
        "id": 419233382,
        "sender_full_name": "Julian Berman",
        "timestamp": 1706789592
    },
    {
        "content": "<p>I'm pleased to say that my code that needed this lemma is now freely available. In particular that lemma drops into the proof of \"*\" (mod Q) here: <a href=\"https://github.com/awslabs/LibMLKEM/blob/c8a6f6ac0c421847c9c33d6c22c5a7b7dad6f35b/spark_ada/src/mlkem.adb#L169\">https://github.com/awslabs/LibMLKEM/blob/c8a6f6ac0c421847c9c33d6c22c5a7b7dad6f35b/spark_ada/src/mlkem.adb#L169</a></p>",
        "id": 421261029,
        "sender_full_name": "Roderick Chapman",
        "timestamp": 1707836453
    }
]