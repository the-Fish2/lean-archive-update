[
    {
        "content": "<p>If I have a finite type <code>T</code> and a decidable predicate <code>p : T -&gt; Prop</code>, what is the best way to make the <code>Finset</code> containing all elements satisfying <code>p</code>? Both <code>Finset.univ.filter p</code> and <code>(setOf p).toFinset</code> seem to work.</p>",
        "id": 413022468,
        "sender_full_name": "Niels Voss",
        "timestamp": 1705349275
    },
    {
        "content": "<p>Here's the proof that these are the same thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Finset.univ.filter</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Set.toFinset_setOf</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 413022947,
        "sender_full_name": "Niels Voss",
        "timestamp": 1705349569
    },
    {
        "content": "<p>I think they're both fine. Not sure if one is preferred over the other.</p>\n<p>I just noticed that there seems to be a problem with the simp set. The only way for the simple <code>by ext; simp</code> proof to go through is for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.mem_toFinset#doc\">docs#Set.mem_toFinset</a> to take an implicit argument instead of an instance argument.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.mem_toFinset'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s.toFinset</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">toFinset</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.univ.filter</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 413023442,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705349878
    },
    {
        "content": "<p>Personally, I much prefer <code>Finset.univ.filter p</code> and I am hoping we eventually can make <code>{x | p x}</code> notation for it.</p>",
        "id": 413023548,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705349931
    },
    {
        "content": "<p>It works only for <code>Fintype</code>s while <code>Set.toFinset</code> works if you have <code>Fintype s</code> (not <code>Fintype α</code>).</p>",
        "id": 413037213,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705357281
    },
    {
        "content": "<p>If you have <code>Fintype α</code> do you automatically have <code>Fintype (setOf p)</code>?</p>",
        "id": 413037360,
        "sender_full_name": "Niels Voss",
        "timestamp": 1705357350
    },
    {
        "content": "<p>No, you also need <code>DecidablePred p</code></p>",
        "id": 413037405,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705357373
    },
    {
        "content": "<p>That's true. But <code>DecidablePred p</code> is also needed for <code>Finset.univ.filter</code>. So can <code>(setOf p).toFinset</code> be used in place of <code>Finset.univ.filter</code>, but not vice versa?</p>",
        "id": 413038062,
        "sender_full_name": "Niels Voss",
        "timestamp": 1705357741
    },
    {
        "content": "<p>Yes, that's right.</p>\n<p>You can also go through <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite#doc\">docs#Set.Finite</a> to avoid needing <code>DecidablePred</code>. These use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finite#doc\">docs#Finite</a> instances rather than <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype#doc\">docs#Fintype</a> instances.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinite.toFinset</span> <span class=\"c1\">-- `toFinset` alone causes an instance failure.</span>\n</code></pre></div>\n<p>The cost of this is that it depends on the axiom of choice, and it's not computable in some sense.</p>",
        "id": 413041262,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705359570
    },
    {
        "content": "<p>But that gets you a noncomputable <code>Finset</code>, which is what you would have ended up with anyways had you just used choice to produce a <code>DecidablePred p</code> instance. Although I guess this helps avoid situations where two different <code>DecdiablePred</code> instances are use and the terms don't unify.</p>",
        "id": 413041766,
        "sender_full_name": "Niels Voss",
        "timestamp": 1705359892
    }
]