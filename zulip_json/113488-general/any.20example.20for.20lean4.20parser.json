[
    {
        "content": "<p>Is there any example for lean4 parser? I read the document but example will be a better help</p>",
        "id": 426537945,
        "sender_full_name": "kishou yusa",
        "timestamp": 1710421873
    },
    {
        "content": "<p>Can you be a bit more specific? Which part of the parser? What document did you already read, and what sort of example of input and output are you looking for. This is a very big topic</p>",
        "id": 426540682,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710422710
    },
    {
        "content": "<p>I read the document from:<a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Parser/Basic.html\">https://leanprover-community.github.io/mathlib4_docs/Lean/Parser/Basic.html</a>. I want to parse input which follow first order logic and transform and run duper on it.</p>",
        "id": 426542210,
        "sender_full_name": "kishou yusa",
        "timestamp": 1710423178
    },
    {
        "content": "<p>Others might think otherwise (with more paths than the ones I'm aware of), but my 2c is that this task is kinda hard because you have APIs that operate on different levels of abstraction.</p>\n<p>If this duper you're talking about is a Lean tactic coded somewhere (maybe Mathlib?), it's an algorithm that runs at compile time when typechecking.</p>\n<p>The only practical way I see for you to accomplish this task in this case is to write a Lean <em>metaprogram</em> that parses your input at compile time. By the way, IIRC, <code>MetaM</code> can perform IO operations like reading text from files. And from <code>MetaM</code> you'll have access to duper</p>\n<p>The other approach is to manifest \"duper\" in the layer of abstraction of a regular Lean 4 program. Meaning, pretty much, implementing your own typechecker for the data you parse and then implementing duper for it</p>",
        "id": 426558053,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1710427618
    },
    {
        "content": "<p>Is your input in TPTP format (<a href=\"https://www.tptp.org/\">https://www.tptp.org/</a>)? Duper includes a parser for TPTP. <span class=\"user-mention\" data-user-id=\"436568\">@Josh Clune</span> would be able to tell you how to use it.</p>",
        "id": 426634368,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1710452596
    },
    {
        "content": "<p>Regarding the different levels of abstraction Arthur mentioned, I believe <a href=\"https://github.com/tydeu/lean4-partax\">https://github.com/tydeu/lean4-partax</a> solves this issue.</p>",
        "id": 426634707,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1710452758
    },
    {
        "content": "<p>BTW, duper is indeed a Lean tactic: <a href=\"https://github.com/leanprover-community/duper\">https://github.com/leanprover-community/duper</a></p>",
        "id": 426634834,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1710452797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/113488-general/topic/any.20example.20for.20lean4.20parser/near/426634368\">said</a>:</p>\n<blockquote>\n<p>Is your input in TPTP format (<a href=\"https://www.tptp.org/\">https://www.tptp.org/</a>)? Duper includes a parser for TPTP. <span class=\"user-mention silent\" data-user-id=\"436568\">Josh Clune</span> would be able to tell you how to use it.</p>\n</blockquote>\n<p>Following up on this, if your input format is TPTP's first-order format (FOF), you can use either the <code>tptp</code> command (which takes an identifier and path and will attempt to transform an FOF file into a Lean goal) or the <code>BEGIN_TPTP ... END_TPTP</code> macro which will attempt to transform FOF syntax (written in the ...) into a Lean goal. Both are available if you have Duper as a dependency via <code>import Duper.TPTP</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Duper</span>\n<span class=\"kn\">import</span> <span class=\"n\">Duper.TPTP</span>\n\n<span class=\"n\">tptp</span> <span class=\"n\">test1</span> <span class=\"s2\">\"path_to_fof_file\"</span>\n  <span class=\"kd\">by</span> <span class=\"n\">duper</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n\n<span class=\"n\">BEGIN_TPTP</span> <span class=\"n\">test2</span>\n<span class=\"n\">fof</span><span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"kd\">axiom</span><span class=\"o\">,</span> <span class=\"n\">eats</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">cake</span><span class=\"o\">))</span><span class=\"bp\">.</span>\n<span class=\"n\">fof</span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"kd\">axiom</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">eats</span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">cake</span><span class=\"o\">))</span><span class=\"bp\">.</span>\n<span class=\"n\">fof</span><span class=\"o\">(</span><span class=\"n\">goal</span><span class=\"o\">,</span> <span class=\"n\">conjecture</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">!=</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">END_TPTP</span>\n  <span class=\"kd\">by</span> <span class=\"n\">duper</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 426750277,
        "sender_full_name": "Josh Clune",
        "timestamp": 1710511434
    },
    {
        "content": "<p>thanks for your help, do you think I can expanse on this and do a parser for CTL to prove CTL proposition on lean?</p>",
        "id": 426881432,
        "sender_full_name": "kishou yusa",
        "timestamp": 1710586128
    },
    {
        "content": "<p>Offhand, I don’t know enough about CTL to know whether it would be easier to try to directly build on the TPTP parser or just use it as inspiration for how a CTL parser might be built, but you’re welcome to do either.</p>",
        "id": 426890319,
        "sender_full_name": "Josh Clune",
        "timestamp": 1710594941
    },
    {
        "content": "<p>Either way, the TPTP parser is probably a good example to look at.<br>\nThe syntax is declared here:<br>\n<a href=\"https://github.com/leanprover-community/duper/blob/main/Duper/TPTPParser/SyntaxDecl.lean\">https://github.com/leanprover-community/duper/blob/main/Duper/TPTPParser/SyntaxDecl.lean</a><br>\nAnd the transformations of the new syntax into Lean terms is implemented here: <br>\n<a href=\"https://github.com/leanprover-community/duper/blob/main/Duper/TPTPParser/MacroDecl.lean\">https://github.com/leanprover-community/duper/blob/main/Duper/TPTPParser/MacroDecl.lean</a></p>",
        "id": 426915674,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1710617280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> has marked this topic as resolved.</p>",
        "id": 427754560,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710863209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> has marked this topic as unresolved.</p>",
        "id": 427755062,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710863348
    }
]