[
    {
        "content": "<p>I think I found a bug in <code>tauto</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Tauto</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">tauto</span> <span class=\"c1\">-- OK</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">tauto</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hP</span> <span class=\"n\">c</span>\n  <span class=\"n\">tauto</span> <span class=\"c1\">-- OK</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">tauto</span> <span class=\"c1\">-- OK</span>\n</code></pre></div>\n<p>PS: It turns out not to be a bug — <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.Tauto.tauto#doc\">docs#Mathlib.Tactic.Tauto.tauto</a> is not supposed to support universal quantifiers.</p>",
        "id": 431549350,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712330372
    },
    {
        "content": "<p>I wouldn't expect <code>tauto</code> to work when there are quantified statements. So I'm surprised that the last one works.</p>",
        "id": 431552722,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712331377
    },
    {
        "content": "<p>It works for quantified statements almost every time. Is it supposed not to?</p>",
        "id": 431559113,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712333235
    },
    {
        "content": "<p>Maybe you are using a suboptimal tool for the job. This works though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>\n<p>Also, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">iff_true</span><span class=\"o\">]</span> <span class=\"c1\">-- from the command `aesop?`</span>\n</code></pre></div>",
        "id": 431559865,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1712333452
    },
    {
        "content": "<p>Unfortunately, <code>aesop</code> does not work in my non-MWE-ed example.</p>",
        "id": 431560451,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712333643
    },
    {
        "content": "<p>Does  the command <code>simp_all? [iff_true]</code> work? If so, it will suggest a more specific command.</p>",
        "id": 431561144,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1712333878
    },
    {
        "content": "<p>For the MWE it works, but in the real use case <code>simp_all? [iff_true]</code> gives me \"simp_all made no progress\".</p>",
        "id": 431565494,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712335285
    },
    {
        "content": "<p>At this point, I'm closing this thread. Potential continuation of this discussion (but in a different context) can be here:<br>\n<a href=\"#narrow/stream/270676-lean4/topic/Trivialities.20about.20sets\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Trivialities.20about.20sets</a></p>",
        "id": 431580346,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712340695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 431580381,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712340716
    }
]