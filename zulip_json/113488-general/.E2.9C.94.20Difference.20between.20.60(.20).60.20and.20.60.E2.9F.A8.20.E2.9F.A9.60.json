[
    {
        "content": "<p>When should I use <code>( )</code> and when <code>⟨ ⟩</code> in <code>rcases</code> or <code>rintro</code>? For example, in the following example I have to use <code>( )</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">MIL.Common</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- rintro x ⟨hs | ht⟩ -- does not work</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"bp\">|</span> <span class=\"n\">ht</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 431818386,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1712525847
    },
    {
        "content": "<p><code>(...)</code> is purely for grouping, and <code>⟨...⟩</code> is for destructing</p>",
        "id": 431818490,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712525935
    },
    {
        "content": "<p>Then why does <code>rintro x ⟨hs | ht⟩</code> not destruct the union?</p>",
        "id": 431818526,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1712525986
    },
    {
        "content": "<p>because the <code>⟨ ⟩</code> is already destructing the union, and then the <code>hs | ht</code> is trying to destruct <code>s</code> which doesn't work</p>",
        "id": 431818715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712526129
    },
    {
        "content": "<p>Why does <code>hs | ht</code> destruct <code>s</code> instead of the union? What would be the correct syntax to use without <code>(...)</code>?</p>",
        "id": 431818925,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1712526334
    },
    {
        "content": "<p>Note that the \"full syntax\" for destructing a multi-constructor inductive type in <code>rcases</code> is <code>⟨a1, a2, .., an⟩ | ⟨b1, b2, .., bn⟩ | .. | ⟨z1, z2, .., zn⟩</code> (note that this involves both <code>⟨⟩</code> and <code>|</code>, but in the case where there is only one argument to a given constructor you can omit the outer <code>⟨⟩</code></p>",
        "id": 431818928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712526336
    },
    {
        "content": "<p>In <code>rintro</code>, parentheses are also required if you want to do any pattern matching because there is otherwise no separator between the arguments to intro themselves</p>",
        "id": 431819002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712526386
    },
    {
        "content": "<p>but parentheses have no pattern-matching effect, they are just grouping</p>",
        "id": 431819017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712526409
    },
    {
        "content": "<p>That is to say, in this example the correct syntax is <code>rintro x (hs | ht)</code>, or it's \"desugared\" form <code>rintro x (⟨hs⟩ | ⟨ht⟩)</code></p>",
        "id": 431819123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712526493
    },
    {
        "content": "<p>if you don't specify enough constructors then the others are treated as <code>_</code>, so <code>rintro x ⟨hs⟩</code> is desugared to the same as <code>rintro x (⟨hs⟩ | ⟨_⟩)</code></p>",
        "id": 431819185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712526585
    },
    {
        "content": "<p>which is why <code>hs</code> here is already a proof of <code>s</code> and if you write <code>hs | ht</code> for the pattern there then you are pattern matching something of variable type which is an error</p>",
        "id": 431819254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712526617
    },
    {
        "content": "<p>Hmm, I kind of understand. I wish MIL explained this better</p>",
        "id": 431861994,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1712554687
    },
    {
        "content": "<p>I think it makes sense like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hs</span> <span class=\"bp\">|</span> <span class=\"n\">ht</span>\n</code></pre></div>\n<p>The idea is that <code>hs | ht</code> is splitting the <code>∪</code>, which is an <code>∨</code>.</p>\n<p>Both <code>|</code> and <code>⟨...⟩</code> do their own sorts of destructuring, if you want to think about it that way.</p>",
        "id": 431865484,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712556496
    },
    {
        "content": "<p>Thank you</p>",
        "id": 431865593,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1712556559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> has marked this topic as resolved.</p>",
        "id": 432039113,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712599845
    }
]