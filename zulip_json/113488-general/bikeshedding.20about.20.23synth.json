[
    {
        "content": "<p>Which is a better comment in a module docstring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">NormedSpace</span><span class=\"w\"> </span><span class=\"n\">𝕜</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CompleteSpace</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">LieGroup</span><span class=\"w\"> </span><span class=\"n\">𝓘</span><span class=\"o\">(</span><span class=\"n\">𝕜</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">𝕜</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">𝕜</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">NormedSpace</span><span class=\"w\"> </span><span class=\"n\">𝕜</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CompleteSpace</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">LieGroup</span><span class=\"w\"> </span><span class=\"n\">𝓘</span><span class=\"o\">(</span><span class=\"n\">𝕜</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">𝕜</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">𝕜</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span>\n</code></pre></div>\n<p>? I changed from <code>example</code> to <code>#synth</code> whilst also tinkering with typeclasses in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13709\">#13709</a> but it was pointed out that maybe <code>#synth</code> is more complicated to understand.</p>",
        "id": 443976707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718104849
    },
    {
        "content": "<p>I think that I would prefer</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">NormedSpace</span><span class=\"w\"> </span><span class=\"n\">𝕜</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CompleteSpace</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">LieGroup</span><span class=\"w\"> </span><span class=\"n\">𝓘</span><span class=\"o\">(</span><span class=\"n\">𝕜</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">𝕜</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">𝕜</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"w\">  </span><span class=\"c1\">--Units.instLieGroupModelWithCornersSelf</span>\n</code></pre></div>",
        "id": 443978233,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718105455
    },
    {
        "content": "<p>This is certainly what I prefer to see when I am debugging something, in order to find out what the instance actually is and then I can go and look at it.</p>",
        "id": 443978341,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718105498
    },
    {
        "content": "<p>I asked this question on <a href=\"https://github.com/leanprover-community/mathlib4/pull/13709\">#13709</a> - if there's a clear preference in this thread, I'm very happy to go with that.</p>",
        "id": 443992836,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718110448
    },
    {
        "content": "<p>When I get to a computer I can add the instance name as a comment</p>",
        "id": 444037671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718121142
    },
    {
        "content": "<p>I don't really like the idea of including the instance name <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.instLieGroupModelWithCornersSelf#doc\">docs#Units.instLieGroupModelWithCornersSelf</a> since it's autogenerated and not meant to be used in source files.</p>\n<p>I think if you want to refer to it, you should give the instance an explicit name. I would leave it as an <code>example</code> since it's easier to understand and you can be sure you know what it's meaning to show. (For example, I had to check the source code of <code>#synth</code> just now to verify some of its behavior.)</p>",
        "id": 444040794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718121938
    },
    {
        "content": "<p>Here's an alternative: use <code>instance</code> in the docstring.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">NormedSpace</span><span class=\"w\"> </span><span class=\"n\">𝕜</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CompleteSpace</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nontrivial</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">LieGroup</span><span class=\"w\"> </span><span class=\"n\">𝓘</span><span class=\"o\">(</span><span class=\"n\">𝕜</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">𝕜</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">𝕜</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>This shows that this is a superfluous instance since it's already covered.</p>",
        "id": 444041209,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718122044
    }
]