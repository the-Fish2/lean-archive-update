[
    {
        "content": "<p>Is there a way to make sure Lean uses a toExpr instance I've defined myself? The involved type is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">PropFormula</span> <span class=\"o\">(</span><span class=\"n\">Connective</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"n\">PropFormula</span> <span class=\"n\">Connective</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fls</span> <span class=\"o\">:</span> <span class=\"n\">PropFormula</span> <span class=\"n\">Connective</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">PropFormula</span> <span class=\"n\">Connective</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unary</span> <span class=\"o\">:</span> <span class=\"n\">Connective</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">PropFormula</span> <span class=\"n\">Connective</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">PropFormula</span> <span class=\"n\">Connective</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">binary</span> <span class=\"o\">:</span> <span class=\"n\">Connective</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">PropFormula</span> <span class=\"n\">Connective</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">PropFormula</span> <span class=\"n\">Connective</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">PropFormula</span> <span class=\"n\">Connective</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Conn</span>\n  <span class=\"bp\">|</span> <span class=\"n\">conj</span> <span class=\"o\">:</span> <span class=\"n\">Conn</span>\n  <span class=\"bp\">|</span> <span class=\"n\">disj</span> <span class=\"o\">:</span> <span class=\"n\">Conn</span>\n  <span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"o\">:</span> <span class=\"n\">Conn</span>\n  <span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Conn</span>\n  <span class=\"bp\">|</span> <span class=\"n\">biImpl</span> <span class=\"o\">:</span> <span class=\"n\">Conn</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>\n<p>And the toExpr instance is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ToExpr</span> <span class=\"n\">Conn</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toExpr</span> <span class=\"n\">mt</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">mt</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Conn.conj</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Conn.conj</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Conn.disj</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Conn.disj</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Conn.neg</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Conn.neg</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Conn.impl</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Conn.impl</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Conn.biImpl</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Conn.biImpl</span> <span class=\"o\">[]</span>\n\n  <span class=\"n\">toTypeExpr</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Conn</span> <span class=\"o\">[])</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">ToExpr</span> <span class=\"n\">Conn</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ToExpr</span> <span class=\"o\">(</span><span class=\"n\">PropFormula</span> <span class=\"n\">Conn</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">toTypeExpr</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">PropFormula</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Conn</span> <span class=\"o\">[])</span>\n\n  <span class=\"n\">toExpr</span> <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"n\">where</span> <span class=\"n\">go</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">PropFormula.tr</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fls</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">PropFormula.fls</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">PropFormula.var</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">Lean.ToExpr.toExpr</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">unary</span> <span class=\"n\">conn</span> <span class=\"n\">op</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.mkApp2</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">PropFormula.unary</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">Lean.ToExpr.toExpr</span> <span class=\"n\">conn</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">go</span> <span class=\"n\">op</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">binary</span> <span class=\"n\">conn</span> <span class=\"n\">op1</span> <span class=\"n\">op2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.mkApp3</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">PropFormula.binary</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">Lean.ToExpr.toExpr</span> <span class=\"n\">conn</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">go</span> <span class=\"n\">op1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">go</span> <span class=\"n\">op2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What I'm currently experiencing is that Lean isn't using the aforementioned instance whilst creating its AST (explicit calls to toExpr work as expected, but the \"default\" mechanism for converting custom datatypes to AST seem to not work). If I could obtain some guidance in this regard, or have any conceptual flaws in my question be pointed out, it would be great!</p>",
        "id": 412112958,
        "sender_full_name": "Arnav Sabharwal",
        "timestamp": 1704883364
    },
    {
        "content": "<p>Yes, I believe there is a fundamental conceptual flaw. <code>toExpr</code> converts runtime objects to core syntax. Elaboration translates surface syntax to core syntax. These two processes are essentially disjoint, elaboration itself never creates runtime objects of the represented data.</p>",
        "id": 412127676,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1704888582
    },
    {
        "content": "<p>In other words, it would be helpful to know what you're actually trying to accomplish</p>",
        "id": 412127857,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1704888647
    }
]