[
    {
        "content": "<p>I'm studying Lean 4, and in the various documents (e.g. Theorem Proving in Lean, Mathematics in Lean, ...) tactics are introduced a bit at a time, which is fine as a tutorial. But I'm wondering if there is any reference list of all the tactics. Also, I believe some tactics are introduced in the base Lean, maybe others in the standard library, yet others from the mathlib. It would be nice to have a reference, with each tactic listed as to its source.</p>",
        "id": 422870660,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1708623938
    },
    {
        "content": "<p>We had such a list in Lean 3 but restoring it in Lean 4 is on our collective todo list.</p>",
        "id": 422881350,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708627194
    },
    {
        "content": "<p>While the list gets implemented, running</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#help</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>lists all tactics in the environment (I don't remember where <code>#help</code> is defined, so some import is necessary).</p>",
        "id": 422883561,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708627922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Tactic.20reference/near/422883561\">said</a>:</p>\n<blockquote>\n<p>While the list gets implemented, running</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#help</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>lists all tactics in the environment (I don't remember where <code>#help</code> is defined, so some import is necessary).</p>\n</blockquote>\n<p>Thanks. That is very helpful.</p>",
        "id": 422908104,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1708637495
    },
    {
        "content": "<p>You can also use <code>#help attr, command</code> and probably more things: the doc-string should be quite informative.</p>",
        "id": 422908497,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708637673
    },
    {
        "content": "<p>And in case it isn't obvious, if you know the name of a tactic, like <code>ring</code>, you can just do <code>#help tactic ring</code></p>",
        "id": 422911984,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708639175
    },
    {
        "content": "<p>I'm wondering where \"#help\" is documented. I do not see it in the Lean manual or in the Theorem Proving in Lean book.</p>",
        "id": 423274496,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1708878076
    },
    {
        "content": "<p>You can see some documentation for the <code>#help</code> command using the command <code>#help command</code> (<span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 423275092,
        "sender_full_name": "Richard Copley",
        "timestamp": 1708878676
    },
    {
        "content": "<p>But can you do <code>#help #help</code>?</p>",
        "id": 423275755,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708879290
    },
    {
        "content": "<p>First thing I tried!</p>",
        "id": 423275832,
        "sender_full_name": "Richard Copley",
        "timestamp": 1708879341
    },
    {
        "content": "<p><code>#help command \"#help\"</code> should do the trick</p>",
        "id": 423275947,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708879476
    },
    {
        "content": "<p>notably, <code>#help command help</code> and <code>#help command #help</code> don't, though</p>",
        "id": 423276027,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708879557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296262\">@Richard L Ford</span> if you (also) mean to ask \"how should you know <code>#help</code> exists\" I think that's a good question and I don't know the answer!</p>",
        "id": 423276143,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708879682
    },
    {
        "content": "<p>Is there a command which lists all <code>#command</code>s?</p>",
        "id": 423276187,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708879691
    },
    {
        "content": "<p>unhelpfully, that's what <code>#help command</code> does (along with the documentation)</p>",
        "id": 423276257,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708879800
    },
    {
        "content": "<p>Idly -- that (<code>#help command</code>) doesn't render fully correctly for you I assume right? When I saw it didn't render right in lean.nvim just now I thought I was missing something, but it looks like no, the diagnostic that returns looks like it's markdown, but diagnostics are apparently not supposed to contain markdown according to the spec (at least not until / if <a href=\"https://github.com/Microsoft/language-server-protocol/issues/250\">https://github.com/Microsoft/language-server-protocol/issues/250</a> ever gets accepted), and it looks like that doesn't render right in VSCode either from what I see. CC <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> maybe if you don't mind the ping, even though I know that command looks defined in Mathlib, not Std or core?</p>",
        "id": 423282200,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708885681
    },
    {
        "content": "<p>My next question is, where is #help implemented? I grepped the lean4 repo and did not find a reference to \"#help\". Is it implemented by lean4, or some higher layer, like in the language server?</p>",
        "id": 423285326,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1708888734
    },
    {
        "content": "<p>(The language server is inside the lean4 repo) -- It's implemented in Mathlib. You can see where by using goto definition -- specifically if you press F12 or hold down ctrl while you're over <code>#help</code> you'll get taken to <code>Mathlib/Tactic/HelpCmd.lean</code></p>",
        "id": 423285513,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708888906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/Tactic.20reference/near/423285513\">said</a>:</p>\n<blockquote>\n<p>(The language server is inside the lean4 repo) -- It's implemented in Mathlib. You can see where by using goto definition -- specifically if you press F12 or hold down ctrl while you're over <code>#help</code> you'll get taken to <code>Mathlib/Tactic/HelpCmd.lean</code></p>\n</blockquote>\n<p>Cool. Thanks. Mystery solved. And that explains why it is not mentioned in the Lean manual. However, it seems like a parenthetical comment like \"And for users of the mathlib, there is the #help tactic\" would be useful in the Lean manual as well as Theorem Proving in Lean, and certainly in the Mathematics in Lean book.</p>",
        "id": 423285849,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1708889181
    },
    {
        "content": "<p>I don't see it mentioned previously from a Zulip search but it seems perhaps like <code>#help</code> could move to Std (which is relevant only inasmuch as it'd change where such a document would point you to. I definitely agree it'd be nice if it were mentioned somewhere).</p>",
        "id": 423286249,
        "sender_full_name": "Julian Berman",
        "timestamp": 1708889533
    },
    {
        "content": "<p>#help should move all the way to Lean, I think. Are there any awkward dependencies?</p>",
        "id": 423290801,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708894233
    },
    {
        "content": "<p>I can review if someone would like to do it. There is some trickery to make it a built-in commands that works without imports. If you don't want to do that part, just flag it in the PR description and someone can help out.</p>",
        "id": 423290836,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708894300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span>, does this sound right? We do need an in-lean mechanism to look up all tactics / commands, I think.</p>",
        "id": 423290906,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708894353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Tactic.20reference/near/423290801\">said</a>:</p>\n<blockquote>\n<p>#help should move all the way to Lean, I think. Are there any awkward dependencies?</p>\n</blockquote>\n<p>No, and I support this move</p>",
        "id": 423309191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708912231
    },
    {
        "content": "<p>The output could use some work though. I did the best I could under the constraints of <code>MessageData</code>, but it would be really nice if it could produce linked constants without having to say the name of the constant (<code>MessageData</code> is lacking some kind of syntax equivalent to <code>[this](foo.html)</code>), which is very unfortunate for syntax references because they have horrible autogenerated names which are nevertheless useful for go-to-def.</p>",
        "id": 423309340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708912394
    },
    {
        "content": "<p>It's not actually markdown, only markdown-esque</p>",
        "id": 423309356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708912419
    },
    {
        "content": "<p>The printed docs are markdown though, so maybe making it markdown would help; but then it has issues with linking again</p>",
        "id": 423309432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708912473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Tactic.20reference/near/423290906\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span>, does this sound right? We do need an in-lean mechanism to look up all tactics / commands, I think.</p>\n</blockquote>\n<p>We absolutely do! And an out-of-Lean one, for that matter.</p>\n<p>My only real concern is preventing a proliferation of somewhat-compatible ways of documenting things (Markdown vs Verso markup vs <code>MessageData</code>). But that seems pretty solvable.</p>",
        "id": 423476421,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1708978654
    },
    {
        "content": "<p>The <code>MessageData</code> limitation that <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> pointed out seems pretty fixable, at least.</p>",
        "id": 423476576,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1708978709
    },
    {
        "content": "<p>All right, I just had a chat with <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> about this to see if there were any ways to provide this functionality over LSP, but we didn't come up with anything. A PR would be welcome!</p>",
        "id": 423610341,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1709041996
    },
    {
        "content": "<p>About the <code>MessageData</code> issue - can't the <code>.ofPPFormat</code> constructor be used to do what you're looking for? It needs a way to create a <code>FormatWithInfos</code>, which is a pretty-printer document paired with a map from <code>Nat</code> tags in the document to infotree nodes. Could this be used for what you're wanting to do, by ensuring there's just a single tag and a single node?</p>",
        "id": 423610907,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1709042184
    },
    {
        "content": "<p>This isn't tactics, but it's been pointed out <a href=\"https://proofassistants.stackexchange.com/questions/3784/where-does-one-find-the-keyword-documentation-for-lean4/3790#3790\">on PA.SE</a> that it is hard to figure out what <code>noncomputable</code> does.  Hovering over it gives information for <code>irreducible_def</code> and <code>help command \"noncomputable\"</code> doesn't work either.</p>",
        "id": 424037709,
        "sender_full_name": "Jason Rute",
        "timestamp": 1709218715
    }
]