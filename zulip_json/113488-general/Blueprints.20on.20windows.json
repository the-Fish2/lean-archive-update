[
    {
        "content": "<p>I have a question for people who struggled to run the blueprint infrastructure on Windows (for instance I think <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> and <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> mentioned this recently). Is the issue coming only from the dependency on GraphViz? If yes, it would be nice to try to <a href=\"https://networkx.org/documentation/stable/install.html\">install networkx</a> on your computer. If this is much easier then I could try to switch to networkx.</p>",
        "id": 412611788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705089565
    },
    {
        "content": "<p>To clarify the situation, graphviz is not used essentially in the python part of blueprints. It is used essentially in the javascript part to do the graph layout, but this is OS-independent.  The <a href=\"https://pygraphviz.github.io/\">pygraphviz</a> library offers python bindings to graphviz and it sounds natural to use it to create graphviz graphs. But  networkx can also output graphs in the graphviz format. The only place where the blueprint python tool actually calls a graphviz program is to perform transitive reduction of the graph, but networks also knows how to do that.</p>",
        "id": 412612394,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705089839
    },
    {
        "content": "<p>I struggled a little bit to get the blueprint on windows, purely because of graphviz (more precisely, pygraphviz). In the end, it worked fine, but I encountered two difficulties in the pygraphviz download instructions on windows:</p>\n<ul>\n<li>pygraphviz is <em>not</em> compatible with the last version of graphviz, contrary to what the sentence \"For this reason, PyGraphviz 1.7 only supports Graphviz 2.46.0 or higher on Windows\" says implicitly. Use version 2.46.</li>\n<li>the quotes in the windows installation instructions don't work (they ignore the fact that there is a space in \"Program files\"). </li>\n</ul>\n<p>Once one is aware of these two issues, installation is smooth.</p>",
        "id": 412683221,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1705130055
    },
    {
        "content": "<p>Ok, that's good to know. I'll wait a bit for Rémy who complained about it very recently, but I'd be happy to simply keep the current solution with instructions in the README.</p>",
        "id": 412723136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705164189
    },
    {
        "content": "<p>The installation of (py)graphviz was a big headache indeed. As Sébastien wrote, the instructions on the website don't work and need to be tweaked.<br>\nThe second point were I think that windows was an issue is when I tried to install doc-gen (which is needed for some blueprint functions I think?). However I did not take any notes there and I gave up rather quickly, so I am not sure of what the issue was exactly and not 100% sure  Windows is the source of the problem.</p>",
        "id": 412725499,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1705166004
    },
    {
        "content": "<p>Windows is a problem, doc-gen is not at all engineered to compile under windows right now.</p>",
        "id": 412725657,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705166118
    },
    {
        "content": "<p>Also to expand on this: The primary reason is that we compile and link in a C library for markdown and I do have neither the knowledge nor the motivation to port this to Windows for essentially barely any users since almost all of doc-gen runs in CI anyways. Furthermore: Even if I did port the compilation procedure to Windows people would have to install a C compiler on Windows which is more annoying than on Linux. That makes me believe the average Lean Windows user (i.e. a mathematician with average computer skills) would probably not go through the effort of doing that if they can wait a bit and see the docs in CI.</p>\n<p>There is the alternative of writing a markdown parser + to HTML converter myself in Lean but:<br>\nOnce David's documentation language does eventually get integrated properly with Lean and we can use it to render doc-strings we will be able to drop the C dependency completely and replace it with pure Lean code anyways. At this point the Windows issue would be resolved anyways so I would rather not spend cycles on this right now unless we really need it.</p>\n<p>If you really want doc-gen on Windows right now and you do not want to wait for or do not have CI my suggestion would be to run it in WSL which is reasonably easy to set up nowadays.</p>",
        "id": 412729329,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705168345
    },
    {
        "content": "<p>Ok, this is one more reason to keep the current design. Windows users will suffer anyway, there is nothing I can do about doc-gen.</p>",
        "id": 412731464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705170470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Blueprints.20on.20windows/near/412729329\">said</a>:</p>\n<blockquote>\n<p>Once David's documentation language does eventually get integrated properly with Lean and we can use it to render doc-strings we will be able to drop the C dependency completely and replace it with pure Lean code anyways.</p>\n</blockquote>\n<p>Where can I read more about David's documentation language?</p>",
        "id": 412732053,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705171038
    },
    {
        "content": "<p>You can watch his talk from Lean Together</p>",
        "id": 412732287,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705171233
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=FZFOJBxzAo0\">https://www.youtube.com/watch?v=FZFOJBxzAo0</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"FZFOJBxzAo0\" href=\"https://www.youtube.com/watch?v=FZFOJBxzAo0\"><img src=\"https://uploads.zulipusercontent.net/943502cca081d8d029115183e3708b32719bef4b/68747470733a2f2f692e7974696d672e636f6d2f76692f465a464f4a42787a416f302f64656661756c742e6a7067\"></a></div>",
        "id": 412732300,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705171246
    },
    {
        "content": "<p>The reason we need docgen in the blueprint is because we lost the Python script that fetched Lean declarations to link to the source code in the blueprint.</p>",
        "id": 412733152,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705171954
    },
    {
        "content": "<p>I do think we should not depend on docgen but only on a \"declaration finder\" which is currently contained in docgen but should IMO be separate.</p>",
        "id": 412733205,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705172004
    },
    {
        "content": "<p>I now remember that I gave up on doc-gen after trying to install a suitable C compiler, indeed.<br>\nI don't care much if Windows is not supported, personally. I also work on Linux. At the time I was preparing a practical session for a course (unrelated to lean) and I was making sure that it also worked on Windows, and I stayed on the same OS when I started installing blueprint.</p>",
        "id": 412733416,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1705172182
    },
    {
        "content": "<blockquote>\n<p>I now remember that I gave up on doc-gen after trying to install a suitable C compiler, indeed.</p>\n</blockquote>\n<p>QED :D I can try to throw some more docs at the README so people are not confused</p>",
        "id": 412733484,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705172247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Blueprints.20on.20windows/near/412733152\">said</a>:</p>\n<blockquote>\n<p>The reason we need docgen in the blueprint is because we lost the Python script that fetched Lean declarations to link to the source code in the blueprint.</p>\n</blockquote>\n<p>It's more complicated than that. doc-gen provides more than a link to GitHub. You get to see the full statements (whereas in the source without language server support you need to find variables) and the link to source is also there if you want it.</p>",
        "id": 412736391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705175288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Blueprints.20on.20windows/near/412736391\">said</a>:</p>\n<blockquote>\n<p>You get to see the full statements (whereas in the source without language server support you need to find variables) and the link to source is also there if you want it.</p>\n</blockquote>\n<p>To me this still falls under \"util which should be used by doc-gen, not be part of it\", but yeah good point.</p>",
        "id": 412798291,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705223980
    },
    {
        "content": "<p>If good source links is your only reason to depend on doc-gen you can reproduce this functionality yourself without too much hassle.</p>",
        "id": 412798373,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705224060
    },
    {
        "content": "<p>First we use this functionality in the lakefile to obtain all of the base source links in a rather heuristic, github specific fashion: <a href=\"https://github.com/leanprover/doc-gen4/blob/main/lakefile.lean#L117\">https://github.com/leanprover/doc-gen4/blob/main/lakefile.lean#L117</a></p>\n<p>And then this information gets used over here: <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Output/SourceLinker.lean\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Output/SourceLinker.lean</a> to construct source URLs.</p>\n<p>The declaration range in turn can be extracted from the environment using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.findDeclarationRanges%3F#doc\">docs#Lean.findDeclarationRanges?</a></p>",
        "id": 412798667,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705224325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113488-general/topic/Blueprints.20on.20windows/near/412798373\">said</a>:</p>\n<blockquote>\n<p>If good source links is your only reason to depend on doc-gen you can reproduce this functionality yourself without too much hassle.</p>\n</blockquote>\n<p>This is not what I meant. I meant that doc-gen provides more than the source and since it <em>also</em> provides source links it is strictly superior to a source link.</p>",
        "id": 412823789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705246083
    }
]