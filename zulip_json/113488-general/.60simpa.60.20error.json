[
    {
        "content": "<p>I don't understand the error this code gives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegrallyClosed</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">nonZeroDivisors</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extracted_1</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">B</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">↑</span><span class=\"n\">A⁰</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsUnit</span> <span class=\"o\">(((</span><span class=\"n\">algebraMap</span> <span class=\"n\">B</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">nonZeroDivisors.ne_zero</span> <span class=\"n\">hx</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  h✝</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ¬x = 0 : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ¬(algebraMap A L) x = 0 : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I never told h-dagger to be anything! What am I doing wrong?</p>",
        "id": 437538177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715118881
    },
    {
        "content": "<p>It looks like <code>h</code>  is the name that <code>simpa</code> uses for the <code>using</code> hypothesis.</p>",
        "id": 437538657,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715119065
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">extracted_1</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">B</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">↑</span><span class=\"n\">A⁰</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsUnit</span> <span class=\"o\">(((</span><span class=\"n\">algebraMap</span> <span class=\"n\">B</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">nonZeroDivisors.ne_zero</span> <span class=\"n\">hx</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  type mismatch</span>\n<span class=\"cm\">    h</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    ¬x = 0 : Prop</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    ¬(algebraMap B L) ((algebraMap A B) x) = 0 : Prop</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 437538811,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715119102
    },
    {
        "content": "<p>(I have slightly different imports so the error is a bit different)</p>",
        "id": 437538888,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715119141
    },
    {
        "content": "<p>Oh I see, simpa is now failing (I'm porting code) and the error is just telling me what both sides are now turning into. Sorry, I get it now, I'm an idiot :-) Is it possible for <code>simpa</code> to fail more gracefully here?</p>",
        "id": 437541118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715120215
    },
    {
        "content": "<p>Created an issue: <a href=\"https://github.com/leanprover/lean4/pull/4101\">lean4#4101</a></p>",
        "id": 437544067,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715121743
    }
]