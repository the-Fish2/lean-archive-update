[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">The doc string of List.span is:</span>\n\n\n<span class=\"cm\">`O(|l|)`. `span p l` splits the list `l` into two parts, where the first part</span>\n<span class=\"cm\">contains the longest initial segment for which `p` returns true</span>\n<span class=\"cm\">and the second part is everything else.</span>\n\n<span class=\"cm\">* `span (· &gt; 5) [6, 8, 9, 5, 2, 9] = ([6, 8, 9], [5, 2, 9])`</span>\n<span class=\"cm\">* `span (· &gt; 10) [6, 8, 9, 5, 2, 9] = ([6, 8, 9, 5, 2, 9], [])`</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- ([], [6, 8, 9, 5, 2, 9])</span>\n<span class=\"k\">#eval</span> <span class=\"n\">List.span</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 427410159,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1710755153
    },
    {
        "content": "<p>PR please!</p>",
        "id": 427413013,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710755688
    },
    {
        "content": "<p>done!</p>",
        "id": 427418754,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1710756720
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3707\">https://github.com/leanprover/lean4/pull/3707</a></p>",
        "id": 427418788,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1710756723
    },
    {
        "content": "<p>It'd be nice if these sorts of comments could be checked with eval somehow. Would add a free bit of testing + sanity checking</p>",
        "id": 427451405,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1710762811
    },
    {
        "content": "<p>Verso someday?</p>",
        "id": 427451849,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710762903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 427490997,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710770405
    },
    {
        "content": "<p>From what I can tell, the doc correctly demonstrates the behavior described: In the first example <code>6,8,9</code> are all greater than <code>5</code> but <code>5</code> is not, so the list is partitioned as <code>([6, 8, 9], [5, 2, 9])</code>. In the second example <code>6</code> is not greater than <code>10</code> so the list should be partitioned as <code>([], [6, 8, 9, 5, 2, 9])</code>. So this is not a documentation issue, it is an implementation bug</p>",
        "id": 427525176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710779063
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> but that's actually what the function does and the doc example says <code>([6, 8, 9, 5, 2, 9], [])</code>. nevermind me</p>",
        "id": 427526175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710779306
    }
]