[
    {
        "content": "<p>I am looking for beta-tester for the new Lean blueprint command line tool. Documentation is available at <a href=\"https://github.com/PatrickMassot/leanblueprint/blob/client/README.md\">https://github.com/PatrickMassot/leanblueprint/blob/client/README.md</a>. </p>\n<p>The short version is: in your favorite Lean project hosted on GitHub, you will be able to:</p>\n<ul>\n<li>click one button on GitHub to enable GitHub pages</li>\n<li>run <code>leanblueprint new</code> and answer a couple of question (accepting all default answers should be fine)</li>\n<li>run <code>git push</code></li>\n<li>Wait for a couple of minutes (depending on the size of your project)</li>\n<li>Enjoy your API doc, blueprint pdf and blueprint web pages on <a href=\"http://github.io\">github.io</a></li>\n</ul>\n<p>I tested it on a project stub but I wouldn’t be surprised if there are bugs, especially with the continuous integration setup. That’s why I didn’t push to pypi yet.</p>",
        "id": 421369196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707885321
    },
    {
        "content": "<p>Note that <code>leanblueprint new</code> will add a couple of lines to your <code>lakefile.lean</code>. However it won’t edit your existing GitHub workflow files, it will create a new one.</p>",
        "id": 421369278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707885385
    },
    {
        "content": "<p>Of course all this requires a sane python setup.</p>",
        "id": 421369488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707885562
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"o\">)</span> <span class=\"n\">pro</span><span class=\"bp\">-</span><span class=\"n\">acl</span> <span class=\"bp\">&gt;</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">git</span><span class=\"bp\">+</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">PatrickMassot</span><span class=\"bp\">/</span><span class=\"n\">leanblueprint.git</span><span class=\"bp\">@</span><span class=\"n\">client</span>\n\n<span class=\"n\">Successfully</span> <span class=\"n\">built</span> <span class=\"n\">leanblueprint</span>\n<span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">build</span> <span class=\"n\">pygraphviz</span>\n<span class=\"n\">Installing</span> <span class=\"n\">collected</span> <span class=\"n\">packages</span><span class=\"o\">:</span> <span class=\"n\">smmap</span><span class=\"o\">,</span> <span class=\"n\">pygraphviz</span><span class=\"o\">,</span> <span class=\"n\">mdurl</span><span class=\"o\">,</span> <span class=\"n\">plasTeX</span><span class=\"o\">,</span> <span class=\"n\">markdown</span><span class=\"bp\">-</span><span class=\"n\">it</span><span class=\"bp\">-</span><span class=\"n\">py</span><span class=\"o\">,</span> <span class=\"n\">gitdb</span><span class=\"o\">,</span> <span class=\"n\">rich</span><span class=\"o\">,</span> <span class=\"n\">plastexshowmore</span><span class=\"o\">,</span> <span class=\"n\">plastexdepgraph</span><span class=\"o\">,</span> <span class=\"n\">GitPython</span><span class=\"o\">,</span> <span class=\"n\">rich</span><span class=\"bp\">-</span><span class=\"n\">click</span><span class=\"o\">,</span> <span class=\"n\">leanblueprint</span>\n  <span class=\"n\">Running</span> <span class=\"n\">setup.py</span> <span class=\"n\">install</span> <span class=\"n\">for</span> <span class=\"n\">pygraphviz</span> <span class=\"bp\">...</span> <span class=\"n\">error</span>\n</code></pre></div>\n<p>Do you have an idea of what I could do?</p>",
        "id": 421393174,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707899116
    },
    {
        "content": "<p>(I tried what is told on <a href=\"https://pygraphviz.github.io/documentation/stable/install.html\">pygraphviz home page</a> and it worked.)</p>",
        "id": 421393672,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707899306
    },
    {
        "content": "<p>Now, <code>lualatex web</code> tells me that <code>blueprint.sty</code> is missing. (And <code>leanblueprint pdf</code> failed as well.)</p>",
        "id": 421396288,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707900350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/421369278\">said</a>:</p>\n<blockquote>\n<p>Note that <code>leanproject new</code> will add a couple of lines to your <code>lakefile.lean</code>. However it won’t edit your existing GitHub workflow files, it will create a new one.</p>\n</blockquote>\n<p><code>leanproject new</code> here is presumably a Freudian slip of some kind. :-)</p>",
        "id": 421419644,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707908017
    },
    {
        "content": "<p>Muscle memory...</p>",
        "id": 421437558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707914932
    },
    {
        "content": "<p>Antoine, could you list the content of the blueprint/src folder?</p>",
        "id": 421437755,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707915002
    },
    {
        "content": "<p>Sorry I read <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> ’s message too quickly. There is no issue on leanblueprint side, you simply tried to compile the web version using <code>lualatex</code>, which is bound to fail. This does not explain why <code>leanblueprint pdf</code> failed, I will need more information here. Could you try running <code>latexmk</code> directly in the <code>blueprint/src</code> folder?</p>",
        "id": 421450168,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707919072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> and <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> I’d be especially interested in test on Windows. Note your still need to be able to install graphviz. But everything else is meant to be easier.</p>",
        "id": 421452067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707919681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> can you show the result of <code>pip wheel -vv pygraphviz</code></p>",
        "id": 421452242,
        "sender_full_name": "Julian Berman",
        "timestamp": 1707919730
    },
    {
        "content": "<p>Patrick I'm going to try to help give you a single binary (a thing someone can download and just run which has all the dependencies), but in case I fail at it or get distracted make believe I didn't say that till later when I try to send a PR. (EDIT: Ugh, PyApp is less ready than I'd hoped, so I've put this on hold, though I think if I try again I'll get further.)</p>",
        "id": 421452416,
        "sender_full_name": "Julian Berman",
        "timestamp": 1707919794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/421452242\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> can you show the result of <code>pip wheel -vv pygraphviz</code></p>\n</blockquote>\n<p>It's too long for zulip, so I sent it to you by email.</p>",
        "id": 421453791,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707920226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/421437755\">said</a>:</p>\n<blockquote>\n<p>Antoine, could you list the content of the blueprint/src folder?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">)</span> <span class=\"n\">pro</span><span class=\"bp\">-</span><span class=\"n\">acl</span> <span class=\"bp\">&gt;</span> <span class=\"n\">ls</span> <span class=\"n\">blueprint</span><span class=\"bp\">/</span><span class=\"n\">src</span>\n<span class=\"n\">content.tex</span>       <span class=\"n\">extra_styles.css</span>  <span class=\"n\">latexmkrc</span>         <span class=\"n\">plastex.cfg</span>\n<span class=\"n\">print.tex</span>         <span class=\"n\">texput.log</span>        <span class=\"n\">web.log</span>           <span class=\"n\">web.paux</span>\n<span class=\"n\">web.tex</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 421454047,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707920290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/421450168\">said</a>:</p>\n<blockquote>\n<p>Sorry I read <span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> ’s message too quickly. There is no issue on leanblueprint side, you simply tried to compile the web version using <code>lualatex</code>, which is bound to fail. This does not explain why <code>leanblueprint pdf</code> failed, I will need more information here. Could you try running <code>latexmk</code> directly in the <code>blueprint/src</code> folder?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">!</span> <span class=\"n\">Package</span> <span class=\"n\">fontspec</span> <span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">font</span> <span class=\"s2\">\"Latin Modern Math\"</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">found.</span>\n\n<span class=\"n\">For</span> <span class=\"n\">immediate</span> <span class=\"n\">help</span> <span class=\"n\">type</span> <span class=\"n\">H</span> <span class=\"bp\">&lt;</span><span class=\"n\">return</span><span class=\"bp\">&gt;.</span>\n <span class=\"bp\">...</span>\n\n<span class=\"n\">l.26</span> <span class=\"bp\">\\</span><span class=\"n\">setmathfont</span>\n                 <span class=\"o\">[</span><span class=\"n\">range</span><span class=\"bp\">=\\</span><span class=\"n\">varnothing</span><span class=\"o\">]{</span><span class=\"n\">Asana</span><span class=\"bp\">-</span><span class=\"n\">Math.otf</span><span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 421454165,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707920335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> oh, so that worked? You now have a <code>.whl</code> file from that output. But your output above said <code> Running setup.py install for pygraphviz ... error</code> which means it failed -- does the original pip install succeed now?</p>",
        "id": 421454786,
        "sender_full_name": "Julian Berman",
        "timestamp": 1707920531
    },
    {
        "content": "<p>Oh sorry, I too misunderstood the end of what you said, that after you ran what's on the pygraphviz page it did work. OK.</p>",
        "id": 421454964,
        "sender_full_name": "Julian Berman",
        "timestamp": 1707920584
    },
    {
        "content": "<p>Thanks Antoine. So this issue has nothing to do with Lean or Python, your LaTeX install cannot find the Latin modern Math font.</p>",
        "id": 421478298,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707926591
    },
    {
        "content": "<p>I have no idea how you managed to install LaTeX and still not have this font. But it suggests I should remove this from the template and let people use old fonts.</p>",
        "id": 421478727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707926711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/421454964\">said</a>:</p>\n<blockquote>\n<p>Oh sorry, I too misunderstood the end of what you said, that after you ran what's on the pygraphviz page it did work. OK.</p>\n</blockquote>\n<p>Yes, after the <code>pip</code> command suggested by <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> failed, I went to the <code>pygraphviz</code> home page which suggested another way of installing it.</p>",
        "id": 421478848,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707926742
    },
    {
        "content": "<p>Actually I realized I wrote in the README that you can use <code>pdflatex</code> if you are really nostalgic, but this is a lie.</p>",
        "id": 421478863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707926746
    },
    {
        "content": "<p>I just pushed a commit removing all font selection commands from the template.</p>",
        "id": 421479235,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707926842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/421478298\">said</a>:</p>\n<blockquote>\n<p>Thanks Antoine. So this issue has nothing to do with Lean or Python, your LaTeX install cannot find the Latin modern Math font.</p>\n</blockquote>\n<p>I understand that issue, but since I have a TeXLive 2023 install, with, in principle, all of it, I don't see how my LaTeX install could miss it.</p>",
        "id": 421479472,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707926889
    },
    {
        "content": "<p>And I removed any mention of pdflatex in the blueprint. There is no reason to mention this program in 2024 anyway.</p>",
        "id": 421479593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707926922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/421478727\">said</a>:</p>\n<blockquote>\n<p>I have no idea how you managed to install LaTeX and still not have this font. But it suggests I should remove this from the template and let people use old fonts.</p>\n</blockquote>\n<p><a href=\"https://tug.org/mactex/\">MacTeX install</a></p>",
        "id": 421479711,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707926953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/421479593\">said</a>:</p>\n<blockquote>\n<p>And I removed any mention of pdflatex in the blueprint. There is no reason to mention this program in 2024 anyway.</p>\n</blockquote>\n<p>really? why not?</p>",
        "id": 421480138,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707927074
    },
    {
        "content": "<p>I guess google will tell you how to install this font if you really want it. But the goal of the <code>leanblueprint</code> command line tool is to make it easy to start a blueprint. Using this font is not a core requirement so I want to remove this friction point.</p>",
        "id": 421480410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707927143
    },
    {
        "content": "<p><code>pdflatex</code> is very unicode unfriendly. It has been replaced by <code>xelatex</code> and <code>lualatex</code> a long time ago.</p>",
        "id": 421480547,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707927184
    },
    {
        "content": "<p>Well, that looks like an overstatement. For example, arXiv does not accept lualatex.</p>",
        "id": 421480884,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707927276
    },
    {
        "content": "<p>arXiv is very much stuck in the 90’s, but there are good reasons for this. The challenge of being able to compile everything that was ever submitted there is huge. They still want to move on, but it’s very non-trivial.</p>",
        "id": 421481150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707927356
    },
    {
        "content": "<p>I forgot to mention one important thing. When I created the blueprint plugin for the sphere eversion project, I did not setup any continuous integration for it, because I hate setting up CI. The blueprint was compiled locally and the result was pushed to the Lean repo. So the CI template that is now used by <code>leanblueprint</code> is based on the work of other people. I don’t know the full story but I think <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> is the pioneer who did this work for the Liquid tensor experiment. I’ll mention his name in the README, but I’d be happy to mention other names if someone knows the full story. I started my work here with the PFR version by <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>. Yaël, did you copy a CI file from somewhere else or did you start from scratch?</p>",
        "id": 421488913,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707929629
    },
    {
        "content": "<p>Ben Toner did a ton of work too!</p>",
        "id": 421489136,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1707929690
    },
    {
        "content": "<p>This is the other name that I had in mind but somehow <a href=\"https://github.com/leanprover-community/liquid/commits/master/.github/workflows\">https://github.com/leanprover-community/liquid/commits/master/.github/workflows</a> shows only one commit, so I got confused.</p>",
        "id": 421489361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707929757
    },
    {
        "content": "<p>I copied it from LeanAPAP, which inherited its CI setup from Con(NF), which <span class=\"user-mention\" data-user-id=\"492774\">@Sky Wilshaw</span> and I set up together.</p>",
        "id": 421489380,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707929763
    },
    {
        "content": "<p>In the port to Lean 4, it also acquired a few changes due to <span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span></p>",
        "id": 421489558,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707929814
    },
    {
        "content": "<p>In short: it's mostly Sky's original doing + a constant need on my part for more advanced features + Utensil's improvements during the port</p>",
        "id": 421490352,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707930060
    },
    {
        "content": "<p>Thanks. I pushed an updated README.</p>",
        "id": 421490902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707930216
    },
    {
        "content": "<p>And I can add more later if more names appear.</p>",
        "id": 421490957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707930233
    },
    {
        "content": "<p>By the way, contributions to that file are very welcome. I spend a <em>lot</em> of time randomly editing that file until it works, and I now hate CI setup even more.</p>",
        "id": 421491136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707930281
    },
    {
        "content": "<p>One thing that would have made everything a lot easier is having a better docker image with both TeXlive and Lean (see <a href=\"#narrow/stream/270676-lean4/topic/elan.20on.20alpine\">this thread</a>).</p>",
        "id": 421491295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707930332
    },
    {
        "content": "<p>The docker image used by PFR and my template is based on Alpine Linux that is not supported by elan.</p>",
        "id": 421491502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707930394
    },
    {
        "content": "<p>The nice thing to do would simply be to create a docker image with every dependency installed (TeXlive, elan and graphviz). But I have no idea how to do that and I cannot spend one more week learning about docker.</p>",
        "id": 421491689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707930449
    },
    {
        "content": "<p>I did that for Con(NF), but it actually ended up being quite inconvenient. In particular, elan is fast to download+install and TeXlive is not. So if we run from a Docker image, we have to install TeXlive even if the build fails. In my use case, I wanted the build to fail early if I had any errors.</p>",
        "id": 421492012,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1707930534
    },
    {
        "content": "<p>In any case, you might be able to use my old Dockerfile for inspiration.</p>",
        "id": 421492280,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1707930608
    },
    {
        "content": "<p>I see. Indeed pulling the Docker image already takes quite a bit of time.</p>",
        "id": 421492332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707930626
    },
    {
        "content": "<p>However this is relevant only for very small projects. Building the Lean project should very quickly become the bottleneck.</p>",
        "id": 421492450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707930660
    },
    {
        "content": "<p>I actually experienced a halving of CI time once I removed leanblueprint and its dependencies. TeXlive really takes a while to install, and the TeX engine itself was quite slow. For context, Con(NF) is around 10k LOC.</p>",
        "id": 421493601,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1707930966
    },
    {
        "content": "<p>What do you mean by “TeXlive really takes a while to install”? Do you mean pulling a docker image where it is installed or installing it in a default GitHub CI image that does not provide it?</p>",
        "id": 421493907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707931066
    },
    {
        "content": "<p>Either of them. The bottleneck is network transfer speed.</p>",
        "id": 421494016,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1707931091
    },
    {
        "content": "<p>They both take around an additional 2min30 in my experience when adding TeXlive.</p>",
        "id": 421494131,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1707931131
    },
    {
        "content": "<p>For projects as big as mathlib, 2min30 is not much, but in my case it was enough to be concerned about.</p>",
        "id": 421494197,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1707931152
    },
    {
        "content": "<p>Yes, 2 minutes is what I saw where  I struggled with this. Yesterday it indeed drove me crazy, but I’m not too worried in real world conditions. And there is nothing we can do anyway. We need TeX for the pdf version.</p>",
        "id": 421495149,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707931438
    },
    {
        "content": "<p>It's probably possible to use a TeX distribution that doesn't download all the packages in advance, like <a href=\"https://tectonic-typesetting.github.io/en-US/\">Tectonic</a>.</p>",
        "id": 421495327,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1707931490
    },
    {
        "content": "<p>It uses XeLaTeX/TeXlive for everything under the hood, so would hopefully be compatible with whatever you're already using.</p>",
        "id": 421495397,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1707931512
    },
    {
        "content": "<p>This sounds like an interesting thing to try.</p>",
        "id": 421495950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707931663
    },
    {
        "content": "<p>Contributions are welcome <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 421496082,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707931692
    },
    {
        "content": "<p>It’s all about modifying <a href=\"https://github.com/PatrickMassot/leanblueprint/blob/client/leanblueprint/templates/blueprint.yml\">https://github.com/PatrickMassot/leanblueprint/blob/client/leanblueprint/templates/blueprint.yml</a></p>",
        "id": 421496151,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707931716
    },
    {
        "content": "<p>I'm still recovering from a sickness since the new year and enjoying much less Lean time. leanblueprint CLI is something I wished for and will try it once I have some Lean time, for one, I haven't checked if it has everything I wished for and described in <a href=\"https://github.com/PatrickMassot/leanblueprint/pull/6\">PatrickMassot/leanblueprint#6</a> yet.</p>",
        "id": 421846088,
        "sender_full_name": "Utensil Song",
        "timestamp": 1708085176
    },
    {
        "content": "<p>As for  Tectonic, personally I've been using it <a href=\"https://github.com/utensil/lean-ga/blob/7160321a8502a45f8df9128bf1f439430dd1a852/.github/workflows/lean_build.yml#L79-L96\">here</a> and the correspoding <code>invoke</code> python script <a href=\"https://github.com/utensil/lean-ga/blob/7160321a8502a45f8df9128bf1f439430dd1a852/tasks.py#L36-L45\">here</a>. There are a few things to note, like leanblueprint depends on <code>kpsewhich</code> via plastex, which requires a minimal TeX installation. Plastex also needs the <code>bbl</code> file generated during PDF generation for the Bibliography and thus the <code>--keep-intermediates</code> option of Tectonic.</p>\n<p>In general, Tectonic has good compatibility with complicated LaTeX files as it reuse the LaTeX packages, only in an incremental way, but there are some caveats to pay attention to here and there, I can't recall all of them, but at least it doesn't play very well with minted and similar packages that requires executing external commands. That said, Tectonic alone works sufficiently well but it plays less nice with plastex which is the backbone of leanblueprint and assumes the existence of some parts of the LaTeX installation.</p>\n<p>During pfr projects, I was <a href=\"https://github.com/teorth/pfr/pulls?q=is%3Apr+is%3Aclosed+author%3Autensil\">polishing the CI process</a> using the old fashioned TeXLive way and my own workflow also moved back to the old fashioned TeXLive way as a testbed and also because of a few caveats of Tectonic, for one, I wanted to include the generated GraphViz/dot file (of the dep_graph) in the PDF, but I had some trouble with Tectonic but not TeXLive.</p>",
        "id": 421846095,
        "sender_full_name": "Utensil Song",
        "timestamp": 1708085180
    },
    {
        "content": "<p>I think it does everything mentioned in that issue except the changes to the produced pdf.</p>",
        "id": 421847024,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708085600
    },
    {
        "content": "<p>Thanks for the information about Tectonic. It doesn't seem worth the trouble.</p>",
        "id": 421847117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708085641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  I finally tried the leanblueprint comand line tool. I am trying it on windows. I installed leanblueprint with pip, created a github repository, created a lean project, linked it to the repository and pushed, and finally activated page deployment.<br>\nThen when I use <code>leanblueprint new</code> in my project folder (and accept all the default answers), I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">charmap'</span> <span class=\"n\">codec</span> <span class=\"n\">can't</span> <span class=\"n\">encode</span> <span class=\"n\">character</span> <span class=\"sc\">'\\u202f'</span> <span class=\"k\">in</span> <span class=\"n\">position</span> <span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">character</span> <span class=\"n\">maps</span> <span class=\"n\">to</span> <span class=\"bp\">&lt;</span><span class=\"n\">undefined</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>Any idea of what could be wrong?</p>",
        "id": 422870364,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708623835
    },
    {
        "content": "<p>That character is apparently Narrow No-Break Space, and it definitely does not appear in the project name or path.</p>",
        "id": 422875799,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708625536
    },
    {
        "content": "<p>And to be more complete, here is the full output of leanproject new:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">leanblueprint</span> <span class=\"n\">new</span>\n\n<span class=\"n\">Welcome</span> <span class=\"n\">to</span> <span class=\"n\">Lean</span> <span class=\"n\">blueprint</span>\n\n<span class=\"n\">We</span> <span class=\"n\">will</span> <span class=\"n\">now</span> <span class=\"n\">ask</span> <span class=\"n\">some</span> <span class=\"n\">questions</span> <span class=\"n\">to</span> <span class=\"n\">configure</span> <span class=\"n\">your</span> <span class=\"n\">blueprint.</span> <span class=\"n\">All</span> <span class=\"n\">answers</span> <span class=\"n\">can</span> <span class=\"n\">ce</span>\n<span class=\"n\">changed</span> <span class=\"n\">later</span> <span class=\"kd\">by</span> <span class=\"n\">editing</span> <span class=\"n\">either</span> <span class=\"n\">the</span> <span class=\"n\">plastex.cfg</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">the</span> <span class=\"n\">tex</span> <span class=\"n\">files.</span>\n\n<span class=\"n\">General</span> <span class=\"n\">information</span> <span class=\"n\">about</span> <span class=\"n\">the</span> <span class=\"n\">project</span>\n<span class=\"n\">Project</span> <span class=\"n\">title</span> <span class=\"o\">(</span><span class=\"n\">My</span> <span class=\"n\">formalization</span> <span class=\"n\">project</span><span class=\"o\">):</span>\n<span class=\"n\">Lean</span> <span class=\"n\">library</span> <span class=\"n\">name</span> <span class=\"o\">[</span><span class=\"n\">TestingLowerBounds</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">½</span><span class=\"n\">TestingLowerBounds</span><span class=\"o\">):</span>\n<span class=\"n\">Author</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">\\</span><span class=\"n\">and</span> <span class=\"n\">to</span> <span class=\"n\">separate</span> <span class=\"n\">authors</span> <span class=\"k\">if</span> <span class=\"n\">needed</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RemyDegenne</span><span class=\"o\">):</span>\n<span class=\"n\">Url</span> <span class=\"n\">of</span> <span class=\"n\">github</span> <span class=\"n\">repository</span> <span class=\"o\">(</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">RemyDegenne</span><span class=\"bp\">/</span><span class=\"n\">testing</span><span class=\"bp\">-</span><span class=\"n\">lower</span><span class=\"bp\">-</span><span class=\"n\">bounds</span><span class=\"o\">):</span>\n<span class=\"n\">Url</span> <span class=\"n\">of</span> <span class=\"n\">project</span> <span class=\"n\">website</span> <span class=\"o\">(</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">RemyDegenne.github.io</span><span class=\"bp\">/</span><span class=\"n\">testing</span><span class=\"bp\">-</span><span class=\"n\">lower</span><span class=\"bp\">-</span><span class=\"n\">bounds</span><span class=\"o\">):</span>\n<span class=\"bp\">'</span><span class=\"n\">charmap'</span> <span class=\"n\">codec</span> <span class=\"n\">can't</span> <span class=\"n\">encode</span> <span class=\"n\">character</span> <span class=\"sc\">'\\u202f'</span> <span class=\"k\">in</span> <span class=\"n\">position</span> <span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">character</span> <span class=\"n\">maps</span> <span class=\"n\">to</span> <span class=\"bp\">&lt;</span><span class=\"n\">undefined</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 422878343,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708626165
    },
    {
        "content": "<p>Thanks for testing this <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span>. I pushed a fix</p>",
        "id": 422881005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708627052
    },
    {
        "content": "<p>I have no idea why your computer doesn’t like this space but it was a typo anyway.</p>",
        "id": 422881038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708627071
    },
    {
        "content": "<p>That sometimes happen because thin non-breakable space is mapped to shift-space on the keyboard layout I use and sometimes when typing fast they get inserted in the wrong place.</p>",
        "id": 422881215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708627130
    },
    {
        "content": "<p>Thanks! A new, similar error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">leanblueprint</span> <span class=\"n\">new</span>\n\n<span class=\"n\">Welcome</span> <span class=\"n\">to</span> <span class=\"n\">Lean</span> <span class=\"n\">blueprint</span>\n\n<span class=\"n\">We</span> <span class=\"n\">will</span> <span class=\"n\">now</span> <span class=\"n\">ask</span> <span class=\"n\">some</span> <span class=\"n\">questions</span> <span class=\"n\">to</span> <span class=\"n\">configure</span> <span class=\"n\">your</span> <span class=\"n\">blueprint.</span> <span class=\"n\">All</span> <span class=\"n\">answers</span> <span class=\"n\">can</span> <span class=\"n\">ce</span>\n<span class=\"n\">changed</span> <span class=\"n\">later</span> <span class=\"kd\">by</span> <span class=\"n\">editing</span> <span class=\"n\">either</span> <span class=\"n\">the</span> <span class=\"n\">plastex.cfg</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">the</span> <span class=\"n\">tex</span> <span class=\"n\">files.</span>\n\n<span class=\"n\">General</span> <span class=\"n\">information</span> <span class=\"n\">about</span> <span class=\"n\">the</span> <span class=\"n\">project</span>\n<span class=\"n\">Project</span> <span class=\"n\">title</span> <span class=\"o\">(</span><span class=\"n\">My</span> <span class=\"n\">formalization</span> <span class=\"n\">project</span><span class=\"o\">):</span> <span class=\"n\">Testing</span> <span class=\"n\">lower</span> <span class=\"n\">bounds</span>\n<span class=\"n\">Lean</span> <span class=\"n\">library</span> <span class=\"n\">name</span> <span class=\"o\">[</span><span class=\"n\">TestingLowerBounds</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">½</span><span class=\"n\">TestingLowerBounds</span><span class=\"o\">):</span> <span class=\"n\">TestingLowerBounds</span>\n<span class=\"n\">Author</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">\\</span><span class=\"n\">and</span> <span class=\"n\">to</span> <span class=\"n\">separate</span> <span class=\"n\">authors</span> <span class=\"k\">if</span> <span class=\"n\">needed</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RemyDegenne</span><span class=\"o\">):</span> <span class=\"n\">R</span><span class=\"bp\">é</span><span class=\"n\">my</span> <span class=\"n\">Degenne</span>\n<span class=\"n\">Url</span> <span class=\"n\">of</span> <span class=\"n\">github</span> <span class=\"n\">repository</span> <span class=\"o\">(</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">RemyDegenne</span><span class=\"bp\">/</span><span class=\"n\">testing</span><span class=\"bp\">-</span><span class=\"n\">lower</span><span class=\"bp\">-</span><span class=\"n\">bounds</span><span class=\"o\">):</span>\n<span class=\"n\">Url</span> <span class=\"n\">of</span> <span class=\"n\">project</span> <span class=\"n\">website</span> <span class=\"o\">(</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">RemyDegenne.github.io</span><span class=\"bp\">/</span><span class=\"n\">testing</span><span class=\"bp\">-</span><span class=\"n\">lower</span><span class=\"bp\">-</span><span class=\"n\">bounds</span><span class=\"o\">):</span>\n<span class=\"n\">Url</span> <span class=\"n\">of</span> <span class=\"n\">project</span> <span class=\"n\">API</span> <span class=\"n\">documentation</span>\n<span class=\"o\">(</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">RemyDegenne.github.io</span><span class=\"bp\">/</span><span class=\"n\">testing</span><span class=\"bp\">-</span><span class=\"n\">lower</span><span class=\"bp\">-</span><span class=\"n\">bounds</span><span class=\"bp\">/</span><span class=\"n\">docs</span><span class=\"o\">):</span>\n\n<span class=\"n\">LaTeX</span> <span class=\"n\">settings</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">pdf</span> <span class=\"n\">version</span>\n<span class=\"n\">LaTeX</span> <span class=\"n\">document</span> <span class=\"kd\">class</span> <span class=\"o\">(</span><span class=\"n\">report</span><span class=\"o\">):</span>\n<span class=\"n\">LaTeX</span> <span class=\"n\">paper</span> <span class=\"o\">(</span><span class=\"n\">a4paper</span><span class=\"o\">):</span>\n\n<span class=\"n\">LaTeX</span> <span class=\"n\">settings</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">web</span> <span class=\"n\">version</span>\n<span class=\"n\">Show</span> <span class=\"n\">buttons</span> <span class=\"n\">allowing</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">or</span> <span class=\"n\">hide</span> <span class=\"n\">all</span> <span class=\"n\">proofs</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">):</span>\n<span class=\"n\">Table</span> <span class=\"n\">of</span> <span class=\"n\">contents</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">):</span> <span class=\"mi\">2</span>\n<span class=\"n\">Split</span> <span class=\"n\">file</span> <span class=\"n\">level</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"n\">means</span> <span class=\"n\">each</span> <span class=\"n\">chapter</span> <span class=\"n\">gets</span> <span class=\"n\">a</span> <span class=\"n\">file</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"n\">means</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"n\">for</span>\n<span class=\"n\">sections</span> <span class=\"n\">etc.</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">):</span>\n<span class=\"n\">Per</span> <span class=\"n\">html</span> <span class=\"n\">file</span> <span class=\"kn\">local</span> <span class=\"n\">table</span> <span class=\"n\">of</span> <span class=\"n\">contents</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"n\">means</span> <span class=\"n\">there</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">no</span> <span class=\"kn\">local</span>\n<span class=\"n\">table</span> <span class=\"n\">of</span> <span class=\"n\">contents</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">):</span>\n\n<span class=\"n\">Configuration</span> <span class=\"n\">completed</span>\n<span class=\"n\">Proceed</span> <span class=\"k\">with</span> <span class=\"n\">blueprint</span> <span class=\"n\">creation</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">]:</span> <span class=\"n\">y</span>\n<span class=\"n\">content.tex</span>\n<span class=\"n\">extra_styles.css</span>\n<span class=\"n\">latexmkrc</span>\n<span class=\"n\">plastex.cfg</span>\n<span class=\"n\">print.tex</span>\n<span class=\"n\">web.tex</span>\n\n<span class=\"bp\">'</span><span class=\"n\">charmap'</span> <span class=\"n\">codec</span> <span class=\"n\">can't</span> <span class=\"n\">encode</span> <span class=\"n\">character</span> <span class=\"bp\">'\\</span><span class=\"n\">U0001f389'</span> <span class=\"k\">in</span> <span class=\"n\">position</span> <span class=\"mi\">61</span><span class=\"o\">:</span> <span class=\"n\">character</span> <span class=\"n\">maps</span> <span class=\"n\">to</span> <span class=\"bp\">&lt;</span><span class=\"n\">undefined</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 422882952,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708627699
    },
    {
        "content": "<p>This is the party popper character <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 422883018,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708627725
    },
    {
        "content": "<p>Something is really wrong with your python installation.</p>",
        "id": 422883059,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708627741
    },
    {
        "content": "<p>Are you running python 2?</p>",
        "id": 422883088,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708627747
    },
    {
        "content": "<p>That one is not a typo.</p>",
        "id": 422883121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708627762
    },
    {
        "content": "<p>3.8</p>",
        "id": 422883129,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708627766
    },
    {
        "content": "<p>I can try it in a new environment instead of with my global python and see if I get the same issue</p>",
        "id": 422883299,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708627812
    },
    {
        "content": "<p>It does not even appear in the source code, it is produced by the rich library. In the source code it appears as <code>:tada:</code>.</p>",
        "id": 422883363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708627835
    },
    {
        "content": "<p>Could you try in another shell?</p>",
        "id": 422883745,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708627976
    },
    {
        "content": "<p>I’m curious about this but I will remove it anyway. Since emoji is not essential and there will be other people using broken shells.</p>",
        "id": 422883797,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708628002
    },
    {
        "content": "<p>This was in Git Bash. I just tried it in anaconda prompt from miniconda3 (also in a fresh environment) and everything worked perfectly</p>",
        "id": 422884249,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708628164
    },
    {
        "content": "<p>Well, I got to the end of the <code>leanblueprint new</code> command. Now CI complains when I push because I have unexpected tokens in lakefile.lean, but that's an other error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"k\">if</span> <span class=\"n\">get_config</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"s2\">\"dev\"</span> <span class=\"k\">then</span>\n<span class=\"n\">require</span> <span class=\"bp\">�</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">�</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover/doc-gen4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>",
        "id": 422884896,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708628401
    },
    {
        "content": "<p>I really don’t know how you can have the patience to use Windows.</p>",
        "id": 422885604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708628622
    },
    {
        "content": "<p>But I pushed a new commit trying to work around those issues.</p>",
        "id": 422885626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708628635
    },
    {
        "content": "<p>You asked me to test it on Windows :)<br>\nOtherwise I would have done it on linux (I learned my lesson last time).</p>",
        "id": 422886096,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708628776
    },
    {
        "content": "<p>I mean I don’t know how anyone can have the patience to use Windows. I am very grateful that you are doing this test on Windows.</p>",
        "id": 422886300,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708628859
    },
    {
        "content": "<p>For years the answer to this question was always the same: people had Windows because of video games. But this is no longer a criterion now that Steam and Proton exist.</p>",
        "id": 422886540,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708628928
    },
    {
        "content": "<p>Summary of my most recent attempt, with references to the commits here: <a href=\"https://github.com/RemyDegenne/testing-lower-bounds/commits/master/\">https://github.com/RemyDegenne/testing-lower-bounds/commits/master/</a></p>\n<ul>\n<li><code>leanproject new</code> worked</li>\n<li>I pushed the automatically generated commit (commit \"Setup blueprint\"). CI failed in build and told me to run <code>lake update checkdecls</code></li>\n<li>I did that and pushed (commit \"lake update checkdecls\"). CI failed and told me to run <code>lake update «doc-gen4»</code></li>\n<li>I did that but it did absolutely nothing. I remembered my problems with doc-gen from last time I tried to use it, went to the doc-gen page and read that I should use <code>lake -R -Kenv=dev update</code></li>\n<li>I ran that command and pushed (commit \"lake -R -Kenv=dev update\"). CI failed because of an unknown target <code>«TestingLowerBounds</code>.</li>\n<li>After a while, I discovered that the project name was wrong in .github/workflows/blueprint.yml: it was written <code>«TestingLowerBounds</code> instead of <code>TestingLowerBounds</code>. I fixed it (commits \"fix workflow?\" and \"fix workflow again\") and the build step succedded in CI.</li>\n</ul>\n<p>Now CI fails at the build blueprint step with error <code>LaTeX Error: File 'macros/common.tex' not found.</code>: <a href=\"https://github.com/RemyDegenne/testing-lower-bounds/actions/runs/8010524168/job/21881676723\">https://github.com/RemyDegenne/testing-lower-bounds/actions/runs/8010524168/job/21881676723</a></p>",
        "id": 422899375,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708633908
    },
    {
        "content": "<p>I created manually macros/common.tex and macros/print.tex and CI succeeded.</p>",
        "id": 422902125,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708635005
    },
    {
        "content": "<p>All of this is horribly wrong. None of those steps should be necessary.</p>",
        "id": 422902446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708635148
    },
    {
        "content": "<p>I will clone your repo and try to reproduce.</p>",
        "id": 422902717,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708635254
    },
    {
        "content": "<p>And I'll uninstall leanblueprint, start in a new environment, make a completely new project, go to the step where I push the \"Setup blueprint\" commit and see what I get.</p>",
        "id": 422902942,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708635354
    },
    {
        "content": "<p>For instance you can see from <a href=\"https://github.com/RemyDegenne/testing-lower-bounds/commit/f890060c7e1f5871e2bab2c3253f73ad7e8828e3#diff-4e2751aec1a84ced68388517cb6f54720d3316f73ea035b8c559d9e028af0581R29\">https://github.com/RemyDegenne/testing-lower-bounds/commit/f890060c7e1f5871e2bab2c3253f73ad7e8828e3#diff-4e2751aec1a84ced68388517cb6f54720d3316f73ea035b8c559d9e028af0581R29</a> that leanblueprint failed to extract the lib name from the lakefile.</p>",
        "id": 422903201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708635437
    },
    {
        "content": "<p>I fixed this bug but I really don’t understand why I didn’t hit it in my tests.</p>",
        "id": 422904021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708635755
    },
    {
        "content": "<p>However I have no clue about why the macros files were not created on your side. I cannot reproduce that.</p>",
        "id": 422904340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708635887
    },
    {
        "content": "<p>I just tested with a new repository (before your fix I guess) and I have the same errors: project name and no macros/... files.</p>",
        "id": 422904569,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708635973
    },
    {
        "content": "<p>I have an idea, hold on.</p>",
        "id": 422904669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708636016
    },
    {
        "content": "<p>Could you try again?</p>",
        "id": 422905011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708636157
    },
    {
        "content": "<p><a href=\"https://github.com/RemyDegenne/lbp-test\">https://github.com/RemyDegenne/lbp-test</a></p>",
        "id": 422905677,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708636456
    },
    {
        "content": "<p>The project name looks good. The macros files are there. Let's wait for CI.</p>",
        "id": 422905768,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708636502
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Run</span> <span class=\"bp\">~/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kenv</span><span class=\"bp\">=</span><span class=\"n\">dev</span> <span class=\"n\">build</span> <span class=\"n\">LbpTest</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">dependency</span> <span class=\"bp\">'</span><span class=\"n\">checkdecls'</span> <span class=\"n\">not</span> <span class=\"k\">in</span> <span class=\"n\">manifest</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">update</span> <span class=\"n\">checkdecls</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">it</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">Process</span> <span class=\"n\">completed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 422905843,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708636532
    },
    {
        "content": "<p>CI failed</p>",
        "id": 422905855,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708636537
    },
    {
        "content": "<p>that  stuff is so non-deterministic...</p>",
        "id": 422905879,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708636550
    },
    {
        "content": "<p>Everything worked two weeks ago.</p>",
        "id": 422905972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708636575
    },
    {
        "content": "<p>The following bit is also puzzling:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Run</span> <span class=\"n\">curl</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">raw.githubusercontent.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">elan</span><span class=\"bp\">-</span><span class=\"n\">init.sh</span> <span class=\"bp\">-</span><span class=\"n\">sSf</span> <span class=\"bp\">|</span> <span class=\"n\">sh</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"c1\">-- -y --default-toolchain leanprover/lean4:4.5.0</span>\n  <span class=\"n\">curl</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">raw.githubusercontent.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">elan</span><span class=\"bp\">-</span><span class=\"n\">init.sh</span> <span class=\"bp\">-</span><span class=\"n\">sSf</span> <span class=\"bp\">|</span> <span class=\"n\">sh</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"c1\">-- -y --default-toolchain leanprover/lean4:4.5.0</span>\n  <span class=\"n\">shell</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">bash</span> <span class=\"bp\">-</span><span class=\"n\">e</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">downloading</span> <span class=\"n\">installer</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Version</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">of</span> <span class=\"n\">elan</span> <span class=\"n\">is</span> <span class=\"n\">available</span><span class=\"bp\">!</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">elan</span> <span class=\"n\">self</span> <span class=\"n\">update</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">update.</span>\n</code></pre></div>\n<p>How can elan install itself and immediately ask for an upgrade?</p>",
        "id": 422906562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708636852
    },
    {
        "content": "<p>I think I now why it was working in my test: I guess I had not lake manifest all in my test project before pushing the blueprint creation commit.</p>",
        "id": 422907081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708637076
    },
    {
        "content": "<p>It almost works in your project now but it seems you forgot to enable GitHub pages.</p>",
        "id": 422907221,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708637154
    },
    {
        "content": "<p>Yes I just did that and restarted CI</p>",
        "id": 422907306,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708637181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/422906562\">said</a>:</p>\n<blockquote>\n<p>The following bit is also puzzling:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Run</span> <span class=\"n\">curl</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">raw.githubusercontent.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">elan</span><span class=\"bp\">-</span><span class=\"n\">init.sh</span> <span class=\"bp\">-</span><span class=\"n\">sSf</span> <span class=\"bp\">|</span> <span class=\"n\">sh</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"c1\">-- -y --default-toolchain leanprover/lean4:4.5.0</span>\n  <span class=\"n\">curl</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">raw.githubusercontent.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">elan</span><span class=\"bp\">-</span><span class=\"n\">init.sh</span> <span class=\"bp\">-</span><span class=\"n\">sSf</span> <span class=\"bp\">|</span> <span class=\"n\">sh</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"c1\">-- -y --default-toolchain leanprover/lean4:4.5.0</span>\n  <span class=\"n\">shell</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">bash</span> <span class=\"bp\">-</span><span class=\"n\">e</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">downloading</span> <span class=\"n\">installer</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Version</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">of</span> <span class=\"n\">elan</span> <span class=\"n\">is</span> <span class=\"n\">available</span><span class=\"bp\">!</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">elan</span> <span class=\"n\">self</span> <span class=\"n\">update</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">update.</span>\n</code></pre></div>\n<p>How can elan install itself and immediately ask for an upgrade?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> do you have any idea what is happening above? This is in CI  so we don’t have access to the machine to investigate.</p>",
        "id": 422907374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708637218
    },
    {
        "content": "<p>In the mean time I modified the CI template.</p>",
        "id": 422907506,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708637273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/422907306\">said</a>:</p>\n<blockquote>\n<p>Yes I just did that and restarted CI</p>\n</blockquote>\n<p>Success.</p>",
        "id": 422907725,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708637338
    },
    {
        "content": "<p>I hope didn’t crash your windows with that emoji reaction…</p>",
        "id": 422907954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708637424
    },
    {
        "content": "<p>The fact that there is no index.html file is expected? It's something I have to do myself in my project?</p>",
        "id": 422907990,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708637447
    },
    {
        "content": "<p>This is a 404: <a href=\"https://remydegenne.github.io/lbp-test/\">https://remydegenne.github.io/lbp-test/</a><br>\nBut this is fine: <a href=\"https://remydegenne.github.io/lbp-test/docs/\">https://remydegenne.github.io/lbp-test/docs/</a></p>",
        "id": 422908052,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708637472
    },
    {
        "content": "<p>Yes, this is expected, the main web page of your project is outside the scope of this tool.</p>",
        "id": 422908293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708637574
    },
    {
        "content": "<p><a href=\"https://remydegenne.github.io/lbp-test/blueprint/\">https://remydegenne.github.io/lbp-test/blueprint/</a> is there.</p>",
        "id": 422908320,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708637586
    },
    {
        "content": "<p>I could offer the option of creating a minimal Jekyll site if people want this.</p>",
        "id": 422908496,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708637672
    },
    {
        "content": "<p>In summary that last attempt worked, except that I had to do <code>lake -R -Kenv=dev update</code> once after the <code>leanblueprint new</code> step.</p>",
        "id": 422908524,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708637691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/422908496\">said</a>:</p>\n<blockquote>\n<p>I could offer the option of creating a minimal Jekyll site if people want this.</p>\n</blockquote>\n<p>That would be very nice.</p>",
        "id": 422908557,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708637706
    },
    {
        "content": "<p>Clearly this has also been a popular copy-paste target in the community.</p>",
        "id": 422908596,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708637728
    },
    {
        "content": "<p>But it’s not systematic. For instance LTE and FLT-regular have no home page.</p>",
        "id": 422908737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708637778
    },
    {
        "content": "<p>About the lake update command, I added it in CI but it would also make sense to run it locally after creating the blueprint if people want to check declarations locally.</p>",
        "id": 422909055,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708637906
    },
    {
        "content": "<p>The only thing that worries me is that the script would fail if you want to create the blueprint but do not have Lean installed. I don’t know whether this is a problem.</p>",
        "id": 422909374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708638063
    },
    {
        "content": "<p>Anyway thanks a lot for that new blueprint setup tool! It is very convenient.</p>",
        "id": 422909409,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708638082
    },
    {
        "content": "<p>I guess I could try and continue even if this command fails.</p>",
        "id": 422909412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708638082
    },
    {
        "content": "<p>Thank you very for testing it! I worked a lot on it and I was pretty frustrated to see nobody testing it.</p>",
        "id": 422909544,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708638130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/422907374\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> do you have any idea what is happening above? This is in CI  so we don’t have access to the machine to investigate.</p>\n</blockquote>\n<p>Thanks for the fix <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> !</p>",
        "id": 422912416,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708639358
    },
    {
        "content": "<p>Yeah, I don't know how that one escaped my manual testing. Unfortunately, people who already installed/updated to elan 3.1.0 (i.e. in the last three days) may have to re-run the installer to update to the fixed 3.1.1</p>",
        "id": 422913025,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1708639645
    },
    {
        "content": "<p>Hopefully there are not so many people. But we were lucky that this blueprint discussion got us looking closely at CI logs featuring a fresh install of elan.</p>",
        "id": 422913583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708639914
    },
    {
        "content": "<p>I have finally some time to test it (on my fork of PFR), and I'll report as things go. Only hiccup for now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"n\">library</span> <span class=\"n\">name</span> <span class=\"o\">[</span><span class=\"n\">PFR</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">PFR</span><span class=\"o\">):</span> <span class=\"n\">PFR_fork</span>\n</code></pre></div>\n<p>wasn't accepted, apparently I have no choice here: I got the answer (in red)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Please</span> <span class=\"n\">select</span> <span class=\"n\">one</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">available</span> <span class=\"n\">options</span>\n</code></pre></div>\n<p>and the only choice that works as far as I can tell is <code>PFR</code>.</p>",
        "id": 423012565,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708693718
    },
    {
        "content": "<p>Second hiccup: after a phase of configuration, downloading mathlib and everything, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Modify</span> <span class=\"n\">lakefile</span> <span class=\"n\">to</span> <span class=\"n\">allow</span> <span class=\"n\">building</span> <span class=\"n\">the</span> <span class=\"n\">documentation</span> <span class=\"n\">on</span> <span class=\"n\">GitHub</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">):</span>\n<span class=\"n\">Ok</span><span class=\"o\">,</span> <span class=\"n\">lakefile</span> <span class=\"n\">is</span> <span class=\"n\">edited.</span>\n<span class=\"n\">Configure</span> <span class=\"n\">continuous</span> <span class=\"n\">integration</span> <span class=\"n\">to</span> <span class=\"n\">compile</span> <span class=\"n\">blueprint</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">):</span>\n<span class=\"n\">GitHub</span> <span class=\"n\">workflow</span> <span class=\"n\">file</span> <span class=\"n\">created</span> <span class=\"n\">at</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">Sebastien</span><span class=\"bp\">\\</span><span class=\"n\">Desktop</span><span class=\"bp\">\\</span><span class=\"n\">pfr</span><span class=\"bp\">\\.</span><span class=\"n\">github</span><span class=\"bp\">\\</span><span class=\"n\">workflows</span><span class=\"bp\">\\</span><span class=\"n\">blueprint.yml</span>\n\n<span class=\"n\">Commit</span> <span class=\"n\">to</span> <span class=\"n\">git</span> <span class=\"n\">repository</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">]:</span> <span class=\"n\">y</span>\n<span class=\"n\">Commit</span> <span class=\"n\">message</span> <span class=\"o\">(</span><span class=\"n\">Setup</span> <span class=\"n\">blueprint</span><span class=\"o\">):</span>\n<span class=\"n\">Invalid</span> <span class=\"kt\">Type</span><span class=\"o\">:</span> <span class=\"n\">WindowsPath</span><span class=\"o\">(</span><span class=\"bp\">'</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">Sebastien</span><span class=\"bp\">/</span><span class=\"n\">Desktop</span><span class=\"bp\">/</span><span class=\"n\">pfr</span><span class=\"bp\">/</span><span class=\"n\">blueprint'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 423012701,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708693786
    },
    {
        "content": "<p>(the path is the right one, and there are no weird spaces in it that could spoil anything)</p>",
        "id": 423012886,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708693847
    },
    {
        "content": "<p>(and nothing was commited to the repository yet)</p>",
        "id": 423013741,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708694162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/422909544\">said</a>:</p>\n<blockquote>\n<p>Thank you very for testing it! I worked a lot on it and I was pretty frustrated to see nobody testing it.</p>\n</blockquote>\n<p>For the record: my long list of Lean-related things I want to try includes testing this new tool by trying to port the sphere-eversion blueprint to the new style. But at the moment, finishing my PhD thesis takes priority. :-)</p>",
        "id": 423034002,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1708700887
    },
    {
        "content": "<p>The Lean library name seems correct to me. Do you really have a Lean library whose lake name is PFR_fork?</p>",
        "id": 423046703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708704551
    },
    {
        "content": "<p>I should probably not display this question when I find only one line in the lake file.</p>",
        "id": 423046810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708704588
    },
    {
        "content": "<p>The WindowsPath thing is more worrying and I really don’t understand why it’s an issue for you but not for Rémy.</p>",
        "id": 423047246,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708704710
    },
    {
        "content": "<p>Michael, please work on your thesis. I’m already very worried about what will happen the next time I’ll see Chris.</p>",
        "id": 423047421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708704754
    },
    {
        "content": "<p>I don't have time to test today but if you identify some things that you would like me to try later (to find out the differences between my setup and the installation of Sébastien, or anything else), I can do that tomorrow.</p>",
        "id": 423048354,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1708705025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/423046703\">said</a>:</p>\n<blockquote>\n<p>The Lean library name seems correct to me. Do you really have a Lean library whose lake name is PFR_fork?</p>\n</blockquote>\n<p>No, the name is correct. I understood the question as \"do you want to change the current name of the Lean library to something else?\", since otherwise I couldn't see the point of the question.</p>",
        "id": 423050246,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708705561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/423047246\">said</a>:</p>\n<blockquote>\n<p>The WindowsPath thing is more worrying and I really don’t understand why it’s an issue for you but not for Rémy.</p>\n</blockquote>\n<p>If you have troubleshooting instructions (to get a traceback or something), just tell me. I'm on Python 3.7 by the way, I don't know if it can make a difference.</p>",
        "id": 423050462,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708705623
    },
    {
        "content": "<p>There  is a point only if your project have several libs, so I will remove the question when there is only one lib.</p>",
        "id": 423050512,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708705638
    },
    {
        "content": "<p>About the path error, could you try running leanblueprint with the <code>--debug</code> option?</p>",
        "id": 423050764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708705710
    },
    {
        "content": "<p>Sure. It gives me the following trace:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"c:\\program files\\python37\\lib</span><span class=\"se\">\\r</span><span class=\"s2\">unpy.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">193</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_run_module_as_main</span>\n    <span class=\"s2\">\"__main__\"</span><span class=\"p\">,</span> <span class=\"n\">mod_spec</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"c:\\program files\\python37\\lib</span><span class=\"se\">\\r</span><span class=\"s2\">unpy.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_run_code</span>\n    <span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">run_globals</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"C:\\Users\\Sebastien\\AppData\\Roaming\\Python\\Python37\\Scripts\\leanblueprint.exe\\__main__.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"C:\\Users\\Sebastien\\AppData\\Roaming\\Python\\Python37\\site-packages\\leanblueprint\\client.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">417</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">safe_cli</span>    <span class=\"n\">handle_exception</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">))</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"C:\\Users\\Sebastien\\AppData\\Roaming\\Python\\Python37\\site-packages\\leanblueprint\\client.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">handle_exception</span>\n    <span class=\"k\">raise</span> <span class=\"n\">exc</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"C:\\Users\\Sebastien\\AppData\\Roaming\\Python\\Python37\\site-packages\\leanblueprint\\client.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">415</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">safe_cli</span>    <span class=\"n\">cli</span><span class=\"p\">()</span>  <span class=\"c1\"># pylint: disable=no-value-for-parameter</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"c:\\program files\\python37\\lib\\site-packages\\click\\core.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">764</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__call__</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"C:\\Users\\Sebastien\\AppData\\Roaming\\Python\\Python37\\site-packages</span><span class=\"se\">\\r</span><span class=\"s2\">ich_click</span><span class=\"se\">\\r</span><span class=\"s2\">ich_command.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">126</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">main</span>\n    <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"c:\\program files\\python37\\lib\\site-packages\\click\\core.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1137</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">invoke</span>\n    <span class=\"k\">return</span> <span class=\"n\">_process_result</span><span class=\"p\">(</span><span class=\"n\">sub_ctx</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">(</span><span class=\"n\">sub_ctx</span><span class=\"p\">))</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"c:\\program files\\python37\\lib\\site-packages\\click\\core.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">956</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">invoke</span>\n    <span class=\"k\">return</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"c:\\program files\\python37\\lib\\site-packages\\click\\core.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">555</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">invoke</span>\n    <span class=\"k\">return</span> <span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"C:\\Users\\Sebastien\\AppData\\Roaming\\Python\\Python37\\site-packages\\leanblueprint\\client.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">321</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">new</span>\n    <span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">([</span><span class=\"n\">out_dir</span><span class=\"p\">,</span> <span class=\"n\">lakefile_path</span><span class=\"p\">,</span> <span class=\"n\">manifest_path</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">workflow_files</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"c:\\program files\\python37\\lib\\site-packages\\git\\index</span><span class=\"se\">\\b</span><span class=\"s2\">ase.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">734</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">add</span>\n    <span class=\"n\">paths</span><span class=\"p\">,</span> <span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_preprocess_add_items</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"c:\\program files\\python37\\lib\\site-packages\\git\\index</span><span class=\"se\">\\b</span><span class=\"s2\">ase.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">580</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_preprocess_add_items</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"Invalid Type: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">Type</span><span class=\"p\">:</span> <span class=\"n\">WindowsPath</span><span class=\"p\">(</span><span class=\"s1\">'C:/Users/Sebastien/Desktop/pfr/blueprint'</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 423051392,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708705876
    },
    {
        "content": "<p>Ok so this issue is purely internal to the GitPython library.</p>",
        "id": 423052592,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708706183
    },
    {
        "content": "<p>And indeed the difference with Rémy is probably a version mismatch.</p>",
        "id": 423052674,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708706214
    },
    {
        "content": "<p>I will try some naive workaround.</p>",
        "id": 423052721,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708706233
    },
    {
        "content": "<p>I pushed a new version</p>",
        "id": 423054033,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708706668
    },
    {
        "content": "<p>I have fixed it by updating gitpython. The old version was 3.1.0, and by updating to the last version (3.1.42) the issue disappeared.</p>",
        "id": 423054035,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708706669
    },
    {
        "content": "<p>So the best fix is probably to bump the requirements.</p>",
        "id": 423054091,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708706685
    },
    {
        "content": "<p>Oh no</p>",
        "id": 423054092,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708706685
    },
    {
        "content": "<p>I wanted you to test with your old version</p>",
        "id": 423054156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708706705
    },
    {
        "content": "<p>The <a href=\"https://gitpython.readthedocs.io/en/stable/changes.html\">changelog of GitPython</a> is a list of links instead of a searchable flat page… I really wonder what they were thinking about…</p>",
        "id": 423054591,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708706845
    },
    {
        "content": "<p>I've reverted to gitpython 3.1.0, so I can test the new version (I have just tested that the current one is failing as it used to).</p>",
        "id": 423055685,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708707185
    },
    {
        "content": "<p>Thanks. I’m curious to see if it works. In the mean time I found the first version of gitpython with the fix is probably 3.1.28.</p>",
        "id": 423056209,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708707328
    },
    {
        "content": "<p>It doesn't work (if I'm testing the right version -- is there a way to see if I haven't screwed up?)</p>",
        "id": 423056722,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708707484
    },
    {
        "content": "<p>Let’s not waste more time with this, I will bump the requirement.</p>",
        "id": 423056962,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708707551
    },
    {
        "content": "<p>I pushed a new version reverting the attempted workaround and requiring gitpython at least 3.1.28</p>",
        "id": 423057649,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708707758
    },
    {
        "content": "<p>In fact your fix was working, and I had screwed up (I had to uninstall leanblueprint and install it again to update it, maybe because the version number was the same?). Anyway, bumping the requirements is probably a better solution.</p>",
        "id": 423057851,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708707831
    },
    {
        "content": "<p>(And you forgot to push the requirement on gitpython :-)</p>",
        "id": 423058313,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708707983
    },
    {
        "content": "<p>I think that everybody that wanted to test the new blueprint client did it, so this is now the official release version. You can now install it using pip from pypi instead of GitHub: <code>pip install leanblueprint</code>. The documentation can be found at <a href=\"https://pypi.org/project/leanblueprint/0.0.4/\">https://pypi.org/project/leanblueprint/0.0.4/</a> which shows the README of the current release.</p>",
        "id": 424455842,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709423330
    },
    {
        "content": "<p>Note this release also includes the LaTeX macros to redefine the graph colors (see documentation).</p>",
        "id": 424455925,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709423406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/423058313\">said</a>:</p>\n<blockquote>\n<p>(And you forgot to push the requirement on gitpython :-)</p>\n</blockquote>\n<p>Did you bump the gitpython requirements?</p>",
        "id": 424479179,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1709446793
    },
    {
        "content": "<p>Yes</p>",
        "id": 424513853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709476436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I have a issue (on both windows and linux) with the bibliography on the web version. <code>leanblueprint pdf</code> generates the bibliography just fine, but <code>leanblueprint web</code> complains about a missing <code>web.bbl</code> (I have the same bibliography tex code for both versions). I see that I indeed have a <code>print.bbl</code> but no <code>web.bbl</code> (and if I rename the print one to <code>web.bbl</code> then <code>leanblueprint web</code> works fine).</p>\n<p>In your <code>client.py</code> file, I see that <code>mk_pdf</code> has two lines of code that have something to do with bbl, and <code>mk_web</code> does not have that code. Perhaps that's related?</p>",
        "id": 425864639,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1710147955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> sorry to ping you again but I am not sure if you saw my last message above. That's not urgent at all though.</p>",
        "id": 426570063,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1710430799
    },
    {
        "content": "<p>I’m sorry I didn’t answer. I saw it and created a GitHub issue, but this will need to wait a bit (at least past the ITP deadline).</p>",
        "id": 426573856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710431876
    },
    {
        "content": "<p>The issue created was <a href=\"https://github.com/PatrickMassot/leanblueprint/pull/12\">PatrickMassot/leanblueprint#12</a></p>\n<p>Some more context: this was solved in the previous <code>inv</code> <code>tasks.py</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nd\">@task</span>\n<span class=\"k\">def</span> <span class=\"nf\">bp</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">):</span>\n    <span class=\"n\">cwd</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">chdir</span><span class=\"p\">(</span><span class=\"n\">BP_DIR</span><span class=\"p\">)</span>\n    <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'mkdir -p print &amp;&amp; cd src &amp;&amp; xelatex --shell-escape -output-directory=../print print.tex'</span><span class=\"p\">)</span>\n    <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'cd print &amp;&amp; bibtex print.aux'</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'BIBINPUTS'</span><span class=\"p\">:</span> <span class=\"s1\">'../src'</span><span class=\"p\">})</span>\n    <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'cd src &amp;&amp; xelatex --shell-escape -output-directory=../print print.tex'</span><span class=\"p\">)</span>\n    <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'cd src &amp;&amp; xelatex --shell-escape -output-directory=../print print.tex'</span><span class=\"p\">)</span>\n    <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'cp print/print.bbl src/web.bbl'</span><span class=\"p\">)</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">chdir</span><span class=\"p\">(</span><span class=\"n\">cwd</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>which runs LaTeX once, to generate metainfo for the bbl file, then uses <code>bibtex</code> to generate a <code>print.bbl</code> then copies it to <code>web.bbl</code> to be consumed by plastex.</p>\n<p>For anyone using <code>tectonic</code>, this is done in a one-pass manner like this, but requires an extra <code>--keep-intermediates</code> to keep the bbl file:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"nd\">@task</span>\n<span class=\"k\">def</span> <span class=\"nf\">bptt</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Build the blueprint PDF file and prepare src/web.bbl for task `web`</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"n\">cwd</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">chdir</span><span class=\"p\">(</span><span class=\"n\">BP_DIR</span><span class=\"p\">)</span>\n    <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'mkdir -p print &amp;&amp; cd src &amp;&amp; tectonic -Z shell-escape-cwd=. --keep-intermediates --outdir ../print print.tex'</span><span class=\"p\">)</span>\n    <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'cp print/print.bbl src/web.bbl'</span><span class=\"p\">)</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">chdir</span><span class=\"p\">(</span><span class=\"n\">cwd</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 426663046,
        "sender_full_name": "Utensil Song",
        "timestamp": 1710469619
    },
    {
        "content": "<p>While we are at Bibliography, there is a related issue that I reported as <a href=\"https://github.com/plastex/plastex/pull/348\">plastex/plastex#348</a> : Same author in Bibliography is rendered to <code>to3em</code> for style <code>amsalpha</code> etc. for HTML.</p>\n<p><a href=\"/user_uploads/3121/p2y3huzK10Fi709MjrdAAxvd/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/p2y3huzK10Fi709MjrdAAxvd/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/p2y3huzK10Fi709MjrdAAxvd/image.png\"></a></div>",
        "id": 426663221,
        "sender_full_name": "Utensil Song",
        "timestamp": 1710469755
    },
    {
        "content": "<p>The bbl file issue should be fixed in the latest release.</p>",
        "id": 427841807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710901224
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 427861363,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1710916126
    },
    {
        "content": "<p>After your change, <code>leanblueprint pdf</code> also generates a file web.bbl, and then <code>leanblueprint web</code> succeeds. So locally everything is fine. However when I push to the git repository CI does not perform the pdf step, the bbl file is not generated and there is no bibliography on the website.</p>\n<p>The solution is obviously to push the web.bbl file to the git repository, but would it be possible to generate it automatically in the CI \"build blueprint\" step?</p>",
        "id": 427892547,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1710929713
    },
    {
        "content": "<p>Oh yes, I forgot CI, sorry.</p>",
        "id": 427952170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710947653
    },
    {
        "content": "<p>Actually I’m confused. CI should do the right thing already.</p>",
        "id": 427952827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710947800
    },
    {
        "content": "<p>I may or may not have forgotten to update the leanblueprint files on the repository...</p>",
        "id": 427954777,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1710948272
    },
    {
        "content": "<p>I actually have no idea. Should I update something in my repository to make it change its leanblueprint version?</p>",
        "id": 427955460,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1710948434
    },
    {
        "content": "<p>I think I see why you say it should do the right thing: apparently CI does <code>leanblueprint pdf</code>, contrary to what I was claiming.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">git</span><span class=\"bp\">+</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">PatrickMassot</span><span class=\"bp\">/</span><span class=\"n\">leanblueprint.git</span><span class=\"bp\">@</span><span class=\"n\">client</span>\n<span class=\"n\">leanblueprint</span> <span class=\"n\">pdf</span>\n<span class=\"n\">mkdir</span> <span class=\"n\">docs</span>\n<span class=\"n\">cp</span> <span class=\"n\">blueprint</span><span class=\"bp\">/</span><span class=\"n\">print</span><span class=\"bp\">/</span><span class=\"n\">print.pdf</span> <span class=\"n\">docs</span><span class=\"bp\">/</span><span class=\"n\">blueprint.pdf</span>\n<span class=\"n\">leanblueprint</span> <span class=\"n\">web</span>\n</code></pre></div>\n<p>(and the answer to my last question seems to be no: CI will install the latest version)</p>",
        "id": 427956433,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1710948683
    },
    {
        "content": "<p>But I still don't get a bibliography unless I push web.bbl</p>",
        "id": 427956670,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1710948745
    },
    {
        "content": "<p>Is this happening in a public repository?</p>",
        "id": 427956731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710948762
    },
    {
        "content": "<p><a href=\"https://github.com/RemyDegenne/testing-lower-bounds\">https://github.com/RemyDegenne/testing-lower-bounds</a></p>",
        "id": 427956805,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1710948779
    },
    {
        "content": "<p>Ok, I understand. The workflow file still installs leanblueprint from the client branch that was my dev branch.</p>",
        "id": 427958486,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710949243
    },
    {
        "content": "<p>It means you created this blueprint during the testing phase of the client.</p>",
        "id": 427958882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710949345
    },
    {
        "content": "<p><a href=\"https://github.com/RemyDegenne/testing-lower-bounds/pull/1\">https://github.com/RemyDegenne/testing-lower-bounds/pull/1</a></p>",
        "id": 427959104,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710949421
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 427959387,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1710949499
    },
    {
        "content": "<p>Hello! <br>\n<span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> and I are installing Leanblueprint following the instructions <a href=\"https://github.com/PatrickMassot/leanblueprint\">here</a>, but running the command <code>pip install git+https://github.com/PatrickMassot/leanblueprint.git@client</code> only gets us to version 0.0.3. Is this wanted behavior? <br>\nI was able to get version 0.0.6 (which appears to be the most recent) by doing <code>pip install git+https://github.com/PatrickMassot/leanblueprint.git</code> (so omitting the <code>@client</code> at the end).</p>",
        "id": 429828735,
        "sender_full_name": "Sam van G",
        "timestamp": 1711535698
    },
    {
        "content": "<p>These instructions are outdated.  <code>pip install leanblueprint</code> is the correct way to install.</p>",
        "id": 429831442,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711536490
    },
    {
        "content": "<p>For people on mac who want to install <code>leanblueprint</code> globally via <code>pipx</code>, you may need to set your environment variables so that <code>pygraphviz</code> can locate  the <code>graphviz</code> installed by <code>homebrew</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">CFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-I</span><span class=\"k\">$(</span>brew<span class=\"w\"> </span>--prefix<span class=\"w\"> </span>graphviz<span class=\"k\">)</span><span class=\"s2\">/include/\"</span>\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">LDFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-L</span><span class=\"k\">$(</span>brew<span class=\"w\"> </span>--prefix<span class=\"w\"> </span>graphviz<span class=\"k\">)</span><span class=\"s2\">/lib/\"</span>\npipx<span class=\"w\"> </span>install<span class=\"w\"> </span>leanblueprint\n</code></pre></div>",
        "id": 429854090,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1711544544
    },
    {
        "content": "<p>If some other Mac user confirms this is useful then I could add it to the documentation.</p>",
        "id": 429862337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711547090
    },
    {
        "content": "<p>See also <a href=\"https://pygraphviz.github.io/documentation/stable/install.html#homebrew\">https://pygraphviz.github.io/documentation/stable/install.html#homebrew</a> which is essentially the same thing but a little verbose and not for <code>pipx</code>.</p>",
        "id": 429864343,
        "sender_full_name": "Utensil Song",
        "timestamp": 1711547640
    },
    {
        "content": "<p>Ok so I don’t need it if it’s already on pygraphviz website.</p>",
        "id": 429866756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711548261
    },
    {
        "content": "<p>The issue is that <code>pipx</code> creates a new virtual environment for <code>leanblueprint</code> and installs <code>pygraphviz</code> in that environment. I found that setting <code>CFLAGS</code> and <code>LDFLAGS</code> was the only simple way of getting <code>pipx</code> to install <code>pygraphviz</code> cleanly.</p>",
        "id": 429870473,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1711549247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  I noticed an issue with the doc on the blueprint at <a href=\"https://remydegenne.github.io/testing-lower-bounds/blueprint/sect0002.html\">https://remydegenne.github.io/testing-lower-bounds/blueprint/sect0002.html</a> .</p>\n<p>I have a latex file that references lemmas in two lean files, which at some point were <code>TestingLowerBounds/FDiv.lean</code> and <code>TestingLowerBound/CondFDiv.lean</code>. I moved both files to a subfolder, such that they are now <code>TestingLowerBounds/FDiv/Basic.lean</code> and <code>TestingLowerBounds/FDiv/CondFDiv.lean</code>.<br>\nNow when I click a \"LEAN\" link in the blueprint that is supposed to send me to the FDiv/Basic file it works fine (for example definition 1 from the page I linked above), but when I click a link to the FDiv/CondFDiv file I get a 404 because it tries to send me to the doc page for the now nonexistent <code>TestingLowerBound/CondFDiv.lean</code> (try definition 2). I did not follow exactly what I did differently for one file or the other, and the issue might be present since many commits (I almost never click doc links). It is possible that I did not add anything to the blueprint referencing CondFDiv since the move? I am not sure.</p>",
        "id": 430258357,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711719950
    },
    {
        "content": "<p>I would say this is a doc-gen bug, not a blueprint bug. Look at <a href=\"https://remydegenne.github.io/testing-lower-bounds/docs/search.html?sitesearch=https%3A%2F%2Fleanprover-community.github.io%2Fmathlib4_docs&amp;q=ProbabilityTheory.condFDiv\">https://remydegenne.github.io/testing-lower-bounds/docs/search.html?sitesearch=https%3A%2F%2Fleanprover-community.github.io%2Fmathlib4_docs&amp;q=ProbabilityTheory.condFDiv</a></p>",
        "id": 430276605,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711727549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span></p>",
        "id": 430276625,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711727558
    },
    {
        "content": "<p>The doc-gen search turns up deadlinks.</p>",
        "id": 430276692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711727585
    },
    {
        "content": "<p>Just so I don't do this for nothing <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> have you build the documentation for this standalone and verified it doesnt work as well?</p>",
        "id": 430277941,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711728083
    },
    {
        "content": "<p>Okay doing it mysefl was quicker than waiting for the answer.</p>\n<p>If I build the docs locally and do the search everything works so it is either a bug in your specific setup or something else <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 430279113,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711728588
    },
    {
        "content": "<p>Thanks for checking. I have never built any doc anywhere myself and I am not even sure of what you asked me to do precisely, so that was certainly faster :)</p>",
        "id": 430279254,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711728655
    },
    {
        "content": "<p>Basically what is described here: <a href=\"https://github.com/leanprover/doc-gen4/?tab=readme-ov-file#usage\">https://github.com/leanprover/doc-gen4/?tab=readme-ov-file#usage</a></p>",
        "id": 430279330,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711728693
    },
    {
        "content": "<p>Thanks. I am building the doc (but it's taking forever on my bad laptop) and will check if it's also fine for me in local.</p>",
        "id": 430279955,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711728987
    },
    {
        "content": "<p>You will need to wait until the counter reaches 3825 on the left hand side.</p>",
        "id": 430280038,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711729027
    },
    {
        "content": "<p>The build finally finished, and I confirm that my local doc is fine. No dead link.</p>",
        "id": 430285644,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711731426
    },
    {
        "content": "<p>What did you do that is not done by <a href=\"https://github.com/RemyDegenne/testing-lower-bounds/blob/master/.github/workflows/blueprint.yml\">https://github.com/RemyDegenne/testing-lower-bounds/blob/master/.github/workflows/blueprint.yml</a>?</p>",
        "id": 430290271,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711733189
    },
    {
        "content": "<p>I only did <code>lake -R -Kenv=dev build TestingLowerBounds:docs</code> and then opened .lake/build/doc/, lanched a server and checked the same search as you did. Nothing more. The only difference I see with the \"build documentation\" step of that file is the -R flag in the build command. I don't know what that does of if it's relevant.</p>",
        "id": 430293474,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711734435
    },
    {
        "content": "<p>Following up on my message from earlier this week, and I think related to the above discussion: the CI for my <a href=\"https://samvang.github.io/StoneDualityInLean/blueprint/\">blueprint</a> is now working! <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> helped me with this yesterday.</p>",
        "id": 430297595,
        "sender_full_name": "Sam van G",
        "timestamp": 1711735979
    },
    {
        "content": "<p>The blueprint was already building locally immediately after installation, but the CI did not work. Even after adding -R to the same line in my <a href=\"https://github.com/samvang/StoneDualityInLean/blob/7e10abd612919657176c42c8377ceba5b56b015a/.github/workflows/blueprint.yml#L53\">blueprint.yml</a>, the CI still failed, but with a different error, namely the dependency on doc-gen4 not being installed. We then also added <a href=\"https://github.com/samvang/StoneDualityInLean/blob/7e10abd612919657176c42c8377ceba5b56b015a/.github/workflows/blueprint.yml#L26\">this line</a>.<br>\nI already forgot <em>why</em> we made these changes and why it works now, but perhaps Floris can explain that if needed.</p>",
        "id": 430297652,
        "sender_full_name": "Sam van G",
        "timestamp": 1711736001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/430293474\">said</a>:</p>\n<blockquote>\n<p>I only did <code>lake -R -Kenv=dev build TestingLowerBounds:docs</code> and then opened .lake/build/doc/, lanched a server and checked the same search as you did. Nothing more. The only difference I see with the \"build documentation\" step of that file is the -R flag in the build command. I don't know what that does of if it's relevant.</p>\n</blockquote>\n<p>Using the <code>-K</code> flag without the <code>-R</code> flag is always incorrect. So the fact you previously didn't include <code>-R</code> seems relevant</p>",
        "id": 430299580,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711736876
    },
    {
        "content": "<p>Interesting. I certainly did not invent that line, so this error must be elsewhere. <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> could you try putting that <code>-R</code> everywhere you see a <code>-K</code> in your ci file?</p>",
        "id": 430300917,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711737429
    },
    {
        "content": "<p>added. Let's wait for CI.</p>",
        "id": 430301594,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711737750
    },
    {
        "content": "<p>nope, that did not fix the issue.</p>",
        "id": 430302496,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711738203
    },
    {
        "content": "<p>I really hate CI. I already spent countless hours shooting in the dark to try to get things to work. I really don’t know what to do.</p>",
        "id": 430302634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711738274
    },
    {
        "content": "<p>removing the two following lines from the previous \"Cache mathlib docs\" step fixed it, but caused a full 12min mathlib doc build</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">/</span><span class=\"n\">declarations</span>\n<span class=\"bp\">!.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">/</span><span class=\"n\">declarations</span><span class=\"bp\">/</span><span class=\"n\">declaration</span><span class=\"bp\">-</span><span class=\"n\">data</span><span class=\"bp\">-</span><span class=\"n\">TestingLowerBounds</span><span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 430308355,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711741098
    },
    {
        "content": "<p>I don't know what I am doing and I deleted the two last lines because they were after the one mentioning mathlib... I may have deleted a line too much. My guess was that something was cached that should have been built again</p>",
        "id": 430308569,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711741203
    },
    {
        "content": "<p>and now I don't have a failing doc to test on <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 430308634,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711741247
    },
    {
        "content": "<p>The file that was most likely cached was <code>declarations/declaration-data.bmp</code> which is an accumulation of all other files in declarations/</p>",
        "id": 430308861,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1711741369
    },
    {
        "content": "<p>A caching issue definitely makes sense here.</p>",
        "id": 430310030,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711741968
    },
    {
        "content": "<p>I've opened a <a href=\"https://github.com/PatrickMassot/leanblueprint/pull/16\">PR</a> fixing the issues mentioned above and a few typos in console.printed messages.</p>",
        "id": 430432927,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711846736
    },
    {
        "content": "<p>You write that your PR fixes the issues mentioned above: which issues more precisely? Adding the -R flag everywhere as you do in the PR did <em>not</em> fix the doc issue I was having. I still don't really know how to fix that issue. I repaired my doc by not using the cache, but that's not a fix.</p>",
        "id": 430457264,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711871214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/430308355\">said</a>:</p>\n<blockquote>\n<p>removing the two following lines from the previous \"Cache mathlib docs\" step fixed it, but caused a full 12min mathlib doc build</p>\n</blockquote>\n<p>Every time we execute the blueprint CI it now takes around 12 minutes (see <a href=\"https://github.com/samvang/StoneDualityInLean/actions\">here</a> )...  I thought that was normal but I understand from this remark it is not?<br>\n(Sorry for these probably obvious questions, I'm not at all familiar with <code>leanblueprint</code>, neither with the intricacies of CI on Github.)</p>",
        "id": 430459186,
        "sender_full_name": "Sam van G",
        "timestamp": 1711873224
    },
    {
        "content": "<p>See the \"Build documentation\" of the run here to compare with yours: <a href=\"https://github.com/RemyDegenne/testing-lower-bounds/actions/runs/8491768981/job/23264057251\">https://github.com/RemyDegenne/testing-lower-bounds/actions/runs/8491768981/job/23264057251</a><br>\nI my case, nothing in Mathlib is listed there, and the doc build step is under two minutes.</p>",
        "id": 430459874,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711873987
    },
    {
        "content": "<p>But your CI run looks significantly different that mine (with steps \"update docgen4\" and \"update checkdecls\" that mine does not have)... so it might be hard to find the significant difference.<br>\nMy blueprint was created from an earlier leanblueprint version. I will update it to match what the latest leanblueprint before commenting more on that.</p>",
        "id": 430460132,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711874246
    },
    {
        "content": "<p>Some of your runs are short, like this one, which does not build the mathlib doc: <a href=\"https://github.com/samvang/StoneDualityInLean/actions/runs/8478789948/job/23231715503\">https://github.com/samvang/StoneDualityInLean/actions/runs/8478789948/job/23231715503</a></p>",
        "id": 430460240,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711874325
    },
    {
        "content": "<p><del>In your slow CI runs, the update docgen4 step contains a download of a new mathlib cache, while in your fast runs it only decompresses files (no download). Then in the slow runs the mathlib doc is built again, while in the fast runs it is not.</del> Sorry that's incorrect. I now saw an example where there is a download and still no mathlib doc build, here: <a href=\"https://github.com/samvang/StoneDualityInLean/actions/runs/8471321425/job/23211010792\">https://github.com/samvang/StoneDualityInLean/actions/runs/8471321425/job/23211010792</a></p>",
        "id": 430460566,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711874651
    },
    {
        "content": "<p>An unrelated remark on that CI: the mathlib cache files are downloaded and decompressed at \"update docgen4\", then decompressed again at \"update checkdecls\" and again at \"get cache\" (and that last step seems completely useless).</p>",
        "id": 430460982,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711875106
    },
    {
        "content": "<p>If you write a detailed explanation to what's going wrong, I can try fixing your CI at some point this afternoon</p>",
        "id": 430464815,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711879201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/113488-general/topic/leanblueprint.20command.20line.20tool/near/430457264\">said</a>:</p>\n<blockquote>\n<p>You write that your PR fixes the issues mentioned above: which issues more precisely? Adding the -R flag everywhere as you do in the PR did <em>not</em> fix the doc issue I was having. I still don't really know how to fix that issue. I repaired my doc by not using the cache, but that's not a fix.</p>\n</blockquote>\n<p>Oh, I see... I was having docs issues (see <a href=\"https://github.com/pitmonticone/FLT3/actions\">https://github.com/pitmonticone/FLT3/actions</a>) and they were apparently solved by adding the -R flag everywhere. I erroneously thought they were the same docs issues, sorry.</p>",
        "id": 430479363,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711894065
    }
]