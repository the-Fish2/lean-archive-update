[
    {
        "content": "<p>why?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check_failure</span> <span class=\"n\">f</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 431651654,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712390342
    },
    {
        "content": "<p><a href=\"https://github.com/spinylobster\">spinylobster</a> suggest to add a following code. How about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HPow</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">α</span> <span class=\"n\">Nat</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">hPow</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 431651866,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712390474
    },
    {
        "content": "<p>Doesn't that <code>#eval</code>work even without the instance? Specifically it looks like there already is an <code>OfNat</code> for <code>Float</code>.</p>",
        "id": 431666864,
        "sender_full_name": "Julian Berman",
        "timestamp": 1712404658
    },
    {
        "content": "<p>I don't really know what the norms are but I guess I'm slightly surprised (in a \"I don't know what I'm doing so probably there's a reason but I wouldn't have guessed this\" sense) that 1) <code>HPow</code> doesn't look for a coercion instance and use it in general and 2) there actually <em>is</em> no coercion instance from Nat to Float (besides the <code>OfNat</code> there's <code>Nat.toFloat</code> but it's not a <code>Coe</code>. That coercion is lossy obviously, so maybe that's the reason it's not marked Coe, or maybe that just wasn't useful for anything, or...)</p>",
        "id": 431667096,
        "sender_full_name": "Julian Berman",
        "timestamp": 1712404858
    },
    {
        "content": "<p>That use of <code>OfNat</code> isn't legal, you're only supposed to use it for numeric literals</p>",
        "id": 431670159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712407024
    },
    {
        "content": "<p>It surpriseds me that we have both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.toFloat#doc\">docs#Nat.toFloat</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Float.ofNat#doc\">docs#Float.ofNat</a></p>",
        "id": 431670167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712407039
    },
    {
        "content": "<p>The former is just an alias, yeah? Maybe just for discoverability?</p>",
        "id": 431670912,
        "sender_full_name": "Julian Berman",
        "timestamp": 1712407794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> You say this is not legal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">check_failure</span> <span class=\"n\">f</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HPow</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">α</span> <span class=\"n\">Nat</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">hPow</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 431672067,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712408859
    },
    {
        "content": "<p>I thought Eric was right too but I see some other instances where <code>OfNat _ n</code> n is not some honest-to-goodness natural number literal?</p>",
        "id": 431672592,
        "sender_full_name": "Julian Berman",
        "timestamp": 1712409345
    },
    {
        "content": "<p>E.g. core has... <code>instance : OfNat JsonNumber n := ⟨JsonNumber.fromNat n⟩</code></p>",
        "id": 431672602,
        "sender_full_name": "Julian Berman",
        "timestamp": 1712409356
    },
    {
        "content": "<p>And a few others which are very similar it looks like?</p>",
        "id": 431672692,
        "sender_full_name": "Julian Berman",
        "timestamp": 1712409427
    },
    {
        "content": "<p>Oh right and the <code>OfNat</code> for <code>Float</code> itself of course... <code>instance : OfNat Float n   := ⟨Float.ofNat n⟩</code></p>",
        "id": 431672734,
        "sender_full_name": "Julian Berman",
        "timestamp": 1712409480
    },
    {
        "content": "<p>Oh sorry, but I misunderstood Eric's message, yeah, that was similar to what I was trying to say too by pointing out the instance you defined isn't needed. Basically <code>OfNat</code> is <em>only</em> if you're going to write <code>^ 2</code>, not if you have <code>^ n</code> and <code>n</code> is a variable.</p>",
        "id": 431672861,
        "sender_full_name": "Julian Berman",
        "timestamp": 1712409585
    },
    {
        "content": "<blockquote>\n<p>Basically <code>OfNat</code> is _only_ if you're going to write <code>^ 2</code>, not if you have <code>^ n</code> and <code>n</code> is a variable.</p>\n</blockquote>\n<p>I see. I understand the meaning of the message.</p>",
        "id": 431673766,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712410229
    },
    {
        "content": "<p>Ok this works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check_failure</span> <span class=\"n\">f</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">Float</span> <span class=\"n\">Nat</span> <span class=\"n\">Float</span> <span class=\"n\">where</span>\n  <span class=\"n\">hPow</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b.toFloat</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>My point was why this instance is not included in Std or Mathlib.</p>",
        "id": 431674132,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1712410569
    },
    {
        "content": "<p>I think you're supposed to work with floats everywhere in the first place</p>",
        "id": 431674192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712410642
    },
    {
        "content": "<p>Mixing infinite precision nats and lossy floats is a bit weird</p>",
        "id": 431674213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712410664
    },
    {
        "content": "<p>The generic instance above will create a diamond, e.g., for <code>Real</code>. As for <code>Float</code>, one may want to have an instance implemented in C/C++ that uses nat-specific pow in case the number is not a long number.</p>",
        "id": 433102807,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713069719
    },
    {
        "content": "<p>Or should it work with types like UInt64 instead?</p>",
        "id": 433102861,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713069785
    },
    {
        "content": "<p>Elaboration for <code>^</code> is fiddly, and you have to be <em>very</em> careful with global instances. The issue is that we're trying to make it so that when, for example, <code>x y : Real</code>, then <code>x ^ 2</code> gives the <code>HPow Real Nat Real</code> instance but <code>x ^ y</code> gives the <code>HPow Real Real Real</code> instance.</p>\n<p>Regarding <code>Float</code> instances, I just made sure that the homogeneous <code>Pow Float</code> instance worked.</p>\n<p>I don't see a problem with including that specific <code>HPow Float Nat Float</code> instance. You just have to be aware that <code>(3 : Float) ^ 2</code> will still elaborate with <code>2 : Float</code>.</p>",
        "id": 433158108,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713122291
    }
]