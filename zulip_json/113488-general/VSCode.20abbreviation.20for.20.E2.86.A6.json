[
    {
        "content": "<p>Currently in VSCode, <code>\\m ‚Üí Œº</code>, <code>\\ma ‚Üí ‚ôÇ</code>, <code>\\map ‚Üí ‚Ü¶</code>, which tends to be very annoying when I mistype (and needs four keystrokes to produce <code>‚Ü¶</code>). I need <code>‚Ü¶</code> all the time, <code>Œº</code> only on very rare occasions and <code>‚ôÇ</code> never. Can I propose to change the behavior of the Lean extension so that <code>\\m ‚Üí ‚Ü¶</code>, <code>\\mu ‚Üí Œº</code>, and<code>\\ma ‚Üí ‚ôÇ</code> instead?</p>",
        "id": 410653199,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704049100
    },
    {
        "content": "<p>I don't think we need \\male at all, do we?</p>",
        "id": 410653356,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704049254
    },
    {
        "content": "<p>Who knows what it might be useful for in the future...</p>",
        "id": 410653399,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704049281
    },
    {
        "content": "<p><code>=&gt;</code> is only two keystrokes :)</p>",
        "id": 410654037,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704049915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20abbreviation.20for.20.E2.86.A6/near/410654037\">said</a>:</p>\n<blockquote>\n<p><code>=&gt;</code> is only two keystrokes :)</p>\n</blockquote>\n<p>What exactly do you suggest: don't use <code>‚Ü¶</code> or something else?</p>",
        "id": 410654208,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704050105
    },
    {
        "content": "<p>Is there a way to make <code>\\ma</code> prefer <code>‚Ü¶</code> over <code>‚ôÇ</code>? I assume there must be, given that it's preferring <code>‚ôÇ</code> at the moment.</p>",
        "id": 410654825,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704050836
    },
    {
        "content": "<p>It really frustrates me that I can't use \\mapsto in some cases and I'm forced to use <code>=&gt;</code> (which my students never otherwise see)</p>",
        "id": 410654845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704050865
    },
    {
        "content": "<p>Getting \\male out of the way is really easy and uncontroversial I think.</p>",
        "id": 410654897,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704050894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20abbreviation.20for.20.E2.86.A6/near/410654845\">said</a>:</p>\n<blockquote>\n<p>It really frustrates me that I can't use \\mapsto in some cases and I'm forced to use <code>=&gt;</code> (which my students never otherwise see)</p>\n</blockquote>\n<p>That's a different problem, though.</p>",
        "id": 410654907,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704050914
    },
    {
        "content": "<p>I think making the full abbreviation longer than mapsto is enough. Something like \\malesymbol.</p>",
        "id": 410654928,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704050966
    },
    {
        "content": "<p>I woud still argue that <code>\\m</code> should not give <code>Œº</code>, but <code>‚Ü¶</code>. This must be possible, I assume.</p>",
        "id": 410654930,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704050970
    },
    {
        "content": "<p>While we're constructing the bikeshed, I'd like to add \\hookrightarrow - iirc you need to type \\hookr for that to show up</p>",
        "id": 410656605,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704052722
    },
    {
        "content": "<p>One easy way to improve this kind of thing would be to have the abbreviations.json file be order dependent and prefer earlier entries, and then sort it by number of occurrences in mathlib (or at least use this to find suggestions for pairs that should be reordered)</p>",
        "id": 410658277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704054561
    },
    {
        "content": "<p>I'm not sure if it's a good or bad thing that this list is derived from some latex listing rather than only being organically grown from user requests. The good thing is that if you pick a new symbol it is often the case that it already has an abbreviation and you don't need to petition to add one, but the bad thing is that sometimes the weird symbols beat out the actually useful ones</p>",
        "id": 410658379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704054691
    },
    {
        "content": "<p>I think mapsto has some other abbreviations too, like <code>\\|-&gt;</code>, but that's a bit too many punctuation characters to type comfortably</p>",
        "id": 410658453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704054780
    },
    {
        "content": "<p>what about co-opting <code>\\=&gt;</code>?</p>",
        "id": 410658464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704054793
    },
    {
        "content": "<p>... and even so, it is still four keystrokes.</p>",
        "id": 410658470,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704054805
    },
    {
        "content": "<p>(or three, for <code>\\=&gt;</code>.)</p>",
        "id": 410658479,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704054827
    },
    {
        "content": "<p>or <code>\\m&gt;</code></p>",
        "id": 410658482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704054830
    },
    {
        "content": "<p><code>\\|&gt;</code> is also unused</p>",
        "id": 410658539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704054879
    },
    {
        "content": "<p>What is the problem with just <code>\\m</code>? I bet  ‚Ü¶ is the most frequently used symbol whose abbreviation starts with \"m\".</p>",
        "id": 410658543,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704054887
    },
    {
        "content": "<p>I think it is more mnemonic to have the greek letters on single letters</p>",
        "id": 410658581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704054949
    },
    {
        "content": "<p>Note that <code>\\d</code> gives <code>‚Üì</code> already.</p>",
        "id": 410658634,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704054989
    },
    {
        "content": "<p>although we already have several divergences for this for \\d, \\l, \\n</p>",
        "id": 410658643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704055009
    },
    {
        "content": "<p>TBH I think <code>\\d</code> is useless and that should be delta</p>",
        "id": 410658657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704055026
    },
    {
        "content": "<p>and <code>\\i</code> gives <code>‚à©</code>, so it does not look like this is a rule.</p>",
        "id": 410658662,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704055030
    },
    {
        "content": "<p>also <code>\\l</code> and <code>\\r</code> give arrows.</p>",
        "id": 410658679,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704055058
    },
    {
        "content": "<p>I think many of them are just being hit by the whims of the random selection algorithm we're seeing here for <code>\\ma</code></p>",
        "id": 410658684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704055065
    },
    {
        "content": "<p>and <code>\\t</code> and <code>\\u</code>...</p>",
        "id": 410658734,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704055088
    },
    {
        "content": "<p>e.g. I doubt <code>\\d</code> is actually assigned to <code>‚Üì</code>, it's just the first one the algorithm happens to pick</p>",
        "id": 410658740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704055102
    },
    {
        "content": "<p>I like your idea to give the shorter abbreviations to the symbols used more frequently in Mathlib.</p>",
        "id": 410658763,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704055143
    },
    {
        "content": "<p>actually I take it back, <code>\\u \\d \\l \\r</code> look like they are deliberate when considered as a group</p>",
        "id": 410658776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704055161
    },
    {
        "content": "<p>I have to be careful with typing delta too, <code>\\D</code> is Delta but <code>\\De</code> is <code>œÆ</code> &lt;- whatever that is</p>",
        "id": 410658891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704055278
    },
    {
        "content": "<p><code>\\M</code> is <code>ùê¥</code>...?</p>",
        "id": 410658969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704055341
    },
    {
        "content": "<p>we should really go through and properly huffman code these things</p>",
        "id": 410658999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704055388
    },
    {
        "content": "<p>I think it would also be a good idea to require the list of abbreviations to be a meet-semilattice under the longest common prefix operation, so that the algorithm doesn't have to pick (and invariably pick badly)</p>",
        "id": 410659105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704055524
    },
    {
        "content": "<p>Is <code>sub</code> still subset while <code>subs</code> is strict subset?</p>",
        "id": 410664242,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704061596
    },
    {
        "content": "<p>\\su and \\sub give ‚äÜ, \\subs gives ‚äÇ.</p>",
        "id": 410664285,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704061652
    },
    {
        "content": "<p>This feels like it should have some sensible defaults, but otherwise be customizable per user in their vscode config.</p>",
        "id": 410742447,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1704132120
    },
    {
        "content": "<p>For subsets I think \\ss can be used</p>",
        "id": 410750371,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704139292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üêâ</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20abbreviation.20for.20.E2.86.A6/near/410742447\">said</a>:</p>\n<blockquote>\n<p>This feels like it should have some sensible defaults, but otherwise be customizable per user in their vscode config.</p>\n</blockquote>\n<p>These abbreviations are already customizable, I believe</p>",
        "id": 410750514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704139361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20abbreviation.20for.20.E2.86.A6/near/410654825\">said</a>:</p>\n<blockquote>\n<p>Is there a way to make <code>\\ma</code> prefer <code>‚Ü¶</code> over <code>‚ôÇ</code>? I assume there must be, given that it's preferring <code>‚ôÇ</code> at the moment.</p>\n</blockquote>\n<p>IIRC the trick was to add a <code>\"ma\": \"‚Ü¶\",</code> line.</p>",
        "id": 410775533,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1704156910
    },
    {
        "content": "<p>hence the suggestion:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20abbreviation.20for.20.E2.86.A6/near/410659105\">said</a>:</p>\n<blockquote>\n<p>I think it would also be a good idea to require the list of abbreviations to be a meet-semilattice under the longest common prefix operation, so that the algorithm doesn't have to pick (and invariably pick badly)</p>\n</blockquote>",
        "id": 410775680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704157020
    }
]