[
    {
        "content": "<p>So I created a new lean project and added this one line so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">opaque</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℤ</span>\n</code></pre></div>\n<p>I get \"failed to synthesize: inhabited Z\". Any ideas? :)</p>",
        "id": 444205138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1718190243
    },
    {
        "content": "<p>I imagine I'm missing an import or something?</p>",
        "id": 444205150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1718190248
    },
    {
        "content": "<p>The instance is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.instInhabited#doc\">docs#Int.instInhabited</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Init</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n\n<span class=\"kn\">opaque</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Int</span>\n</code></pre></div>",
        "id": 444205782,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718190437
    },
    {
        "content": "<p><code>ℤ</code> is defined somewhere in Mathlib. Try <code>import Mathlib.Init.Data.Int.Basic</code>.</p>",
        "id": 444205842,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718190469
    },
    {
        "content": "<p>OK, I guess the IDE doesn't help manage imports?</p>",
        "id": 444205959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1718190504
    },
    {
        "content": "<p>In principle, you can <code>import Mathlib</code> and then put <code>#minimize_imports</code> at the end of the file to get a supposedly minimal list of necessary imports. This does not work with notation, however (i.e., it would miss the import I mentioned to get the notation <code>ℤ</code> defined).</p>",
        "id": 444206311,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718190604
    },
    {
        "content": "<p>I remember there is a way using VS Code to find where a notation is defined, but I am not finding it</p>",
        "id": 444206479,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718190643
    },
    {
        "content": "<p>Maybe I misremember</p>",
        "id": 444206751,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718190707
    },
    {
        "content": "<p>It is indeed in <code>Mathlib.Init.Data.Int.Basic</code>.</p>",
        "id": 444207242,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718190828
    },
    {
        "content": "<p>Does docs#termℤ work?</p>",
        "id": 444207539,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718190906
    },
    {
        "content": "<p>No</p>",
        "id": 444207553,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718190912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/my.20first.20lean.20program/near/444206479\">said</a>:</p>\n<blockquote>\n<p>I remember there is a way using VS Code to find where a notation is defined, but I am not finding it</p>\n</blockquote>\n<p>I use <code>#find_home Int</code> and filter manually to find where the notation is defined. I could not figure out a better way, none of the Go to/Peek works.</p>",
        "id": 444210372,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718191884
    },
    {
        "content": "<p>I literally mean the symbol <code>ℤ</code>, not <code>Int</code>.</p>",
        "id": 444210643,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718191958
    },
    {
        "content": "<p>To find where <code>Int</code> is defined it is enough to do ctrl+click</p>",
        "id": 444210683,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1718191973
    },
    {
        "content": "<p>No, I mean I use <code>#find_home</code> to find every file that defines something about <code>Int</code>, then notation is among them.</p>",
        "id": 444211741,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718192335
    },
    {
        "content": "<p>I use <code>#minimize_imports</code>+ <code>#find_home</code>combo to minimize imports then add back imports for missing notations. I hope there is a better way to automate this.</p>",
        "id": 444212148,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718192454
    },
    {
        "content": "<p>I don't know how to manually automate adding tactics (<code>#minimize_imports</code> also misses them) back though, I usually need to manually find its import from doc.</p>",
        "id": 444212441,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718192558
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Init</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n</code></pre></div>",
        "id": 444212471,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718192567
    },
    {
        "content": "<p>You can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n\n<span class=\"n\">run_cmd</span><span class=\"w\"> </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">))</span><span class=\"w\">  </span><span class=\"c1\">-- (termℤ \"ℤ\")</span>\n</code></pre></div>\n<p>to find out about <code>termℤ</code>, and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">termℤ</span>\n</code></pre></div>\n<p>and right-click to definition.</p>",
        "id": 444213748,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718192949
    },
    {
        "content": "<p>I also remember someone saying that you could directly <code>Go to &lt;somewhere&gt;</code> on the symbol, but I am failing to find it.</p>",
        "id": 444214303,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718193065
    },
    {
        "content": "<p>To get tactics and notations for imports, I suspect that there is no way around having to parse the actual syntax: I think that <code>#minimize_imports</code>, <code>#find_hom</code> and <code>Shake</code> all use already elaborated <code>Expr</code>s, where I am not sure if you can find this sort of syntax information.</p>",
        "id": 444214692,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718193178
    },
    {
        "content": "<p>For a lot of similar questions, it would be great to have a file similar to the <code>olean</code>s, but for the syntax data.</p>",
        "id": 444214805,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718193222
    },
    {
        "content": "<p><code>.ilean</code>?</p>",
        "id": 444214899,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718193246
    },
    {
        "content": "<p>The <code>ilean</code>s contain mostly information about positions of <em>some</em> syntax, but I am not sure that notation and tactics are there.</p>",
        "id": 444215091,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718193319
    },
    {
        "content": "<p>Typically, they tell you about where a certain declaration is defined or used, but not which tactics are used or what symbol it is used to call something.</p>",
        "id": 444215187,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718193350
    },
    {
        "content": "<p>You might be able to guess that an <code>Int</code> with a single-character call is <code>\\Z</code>, but this is a miserable hack!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 444215300,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718193378
    },
    {
        "content": "<p>I would really like to have <code>slean</code>s for retrieving easily syntax trees.</p>",
        "id": 444215436,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718193433
    },
    {
        "content": "<p>While we are asking, getting the <code>InfoTree</code>s would be awesome!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 444215528,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718193459
    },
    {
        "content": "<p>Most of the linters that I used retrieved information that was contained in either the syntax trees or (a very small fraction of) the infotrees.</p>",
        "id": 444215733,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718193518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/my.20first.20lean.20program/near/444214303\">said</a>:</p>\n<blockquote>\n<p>I also remember someone saying that you could directly <code>Go to &lt;somewhere&gt;</code> on the symbol, but I am failing to find it.</p>\n</blockquote>\n<p>I remember one of the \"Go to\"s worked before, but it no longer works. Maybe it's a regression?</p>",
        "id": 444216010,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718193603
    },
    {
        "content": "<p>hmmm, I have this in my \"leanfile\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">require</span><span class=\"w\"> </span><span class=\"n\">mathlib</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">git</span>\n<span class=\"w\">  </span><span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n</code></pre></div>\n<p>but I still get \"unknown package 'Mathlib'\" -- any ideas why?</p>",
        "id": 444216983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1718193872
    },
    {
        "content": "<p>I basically just created a new package using VSCode's \"new package\". I did opt into mathlib, and then I replaced the <code>def hello = 'world'</code> or whatever was there with the <code>opaque</code></p>",
        "id": 444217114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1718193913
    },
    {
        "content": "<p>Can you paste your entire <code>lakefile.lean</code> (I assume that's what you mean by \"leanfile\")?</p>",
        "id": 444217741,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718194087
    },
    {
        "content": "<p>Maybe just need a first <code>lake update</code> to generate the manifest and fetch? (but it should be covered by <code>lake build</code> nowadays?)</p>",
        "id": 444219038,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718194416
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lake</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lake</span><span class=\"w\"> </span><span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">rusty</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Settings applied to both builds and interactive editing</span>\n<span class=\"w\">  </span><span class=\"n\">leanOptions</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"ss\">`pp.unicode.fun</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"c1\">-- pretty-prints `fun a ↦ b`</span>\n<span class=\"w\">  </span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"c1\">-- add any additional package configuration options here</span>\n\n<span class=\"n\">require</span><span class=\"w\"> </span><span class=\"n\">mathlib</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">git</span>\n<span class=\"w\">  </span><span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">Rusty</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"c1\">-- add any library configuration options here</span>\n</code></pre></div>",
        "id": 444365620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1718245129
    },
    {
        "content": "<p>and then a <code>Rusty.lean</code> with</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- This module serves as the root of the `Rusty` library.</span>\n<span class=\"c1\">-- Import modules here that should be built as part of the library.</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">Rusty</span><span class=\"bp\">».</span><span class=\"n\">Basic</span>\n</code></pre></div>\n<p>and  a <code>Rusty/Basic.lean</code> with</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Init</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n\n<span class=\"kn\">opaque</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℤ</span>\n</code></pre></div>",
        "id": 444366374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1718245574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/my.20first.20lean.20program/near/444219038\">said</a>:</p>\n<blockquote>\n<p>Maybe just need a first <code>lake update</code> to generate the manifest and fetch? (but it should be covered by <code>lake build</code> nowadays?)</p>\n</blockquote>\n<p>This doesn't seem to be the case, at least, if creating via <code>lake new rusty</code> and pasting in the above code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">lake</span><span class=\"w\"> </span><span class=\"n\">build</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"n\">manifest</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"ss\">`lake</span><span class=\"w\"> </span><span class=\"n\">update</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">generate</span><span class=\"w\"> </span><span class=\"n\">one</span>\n</code></pre></div>\n<p>but then after <code>lake update</code> it does work.</p>",
        "id": 444367038,
        "sender_full_name": "llllvvuu",
        "timestamp": 1718246017
    },
    {
        "content": "<p>Ah, but with the VSCode \"Create Project using Mathlib\" it seems like it does run <code>lake update</code> and work out of the box. Hmm</p>",
        "id": 444367363,
        "sender_full_name": "llllvvuu",
        "timestamp": 1718246210
    },
    {
        "content": "<p>I think the problem is where the vscode root folder was</p>",
        "id": 444368372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1718246888
    },
    {
        "content": "<p>when I open the folder with <code>lakefile.lean</code> as the root folder of the vscode workspace, things work</p>",
        "id": 444368397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1718246931
    },
    {
        "content": "<p>Somewhere in the instructions you will find that this is required! :-)</p>",
        "id": 444369529,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718247646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/113488-general/topic/my.20first.20lean.20program/near/444369529\">said</a>:</p>\n<blockquote>\n<p>Somewhere in the instructions you will find that this is required! :-)</p>\n</blockquote>\n<p>It isn't required anymore, provided that <span class=\"user-mention\" data-user-id=\"728182\">@nikomatsakis</span> is on a recent VS Code extension version (e.g. 0.0.159). The only situation where the extension is known to still use the wrong working directory is when opening a Lean file in a folder with a lean-toolchain file that is surrounded by another folder with a lean-toolchain file and not opening the inner folder as a workspace folder in VS Code.</p>\n<p>Unfortunately, I can't reproduce the issue. In the situation where this issue occurred, it would be helpful to see the output of the \"Troubleshooting: Show Setup Information\" VS Code command.</p>",
        "id": 444407565,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1718266047
    },
    {
        "content": "<p>Huh! It seems to work now in either case. It's possible I was on an older version before because, when I went to check what version I had, it said 'update required' and in clicking on the extension it did the update (I must have clicked the button accidentally).</p>",
        "id": 444430721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1718273873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"728182\">nikomatsakis</span> has marked this topic as resolved.</p>",
        "id": 444440275,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718277178
    }
]