[
    {
        "content": "<p>So I had a lemma in a file and when I used it later, exact? found it just fine. But then I moved it to a file that I directly import, and exact? became unable to find it. There is no namespacing involved, it's the last file imported, and precisely the same <code>exact lemma_name</code> line closes the goal. </p>\n<p>Why is this / how do I make my lemma discoverable?</p>",
        "id": 441491472,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1717084313
    },
    {
        "content": "<p>Is this not a cache issue?</p>",
        "id": 441491684,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717084352
    },
    {
        "content": "<p>Is it? What does that mean?</p>",
        "id": 441491794,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1717084375
    },
    {
        "content": "<p>To be clear it's not a Lean server \"I don't know this lemma exists\" issue, because explicitly naming the lemma with <code>exact</code>, or just using it in term mode, works fine.</p>\n<p>The term mode also has me convinced that this isn't some snazzy extra stuff exact is doing. It's not just defeq, the lemma is character-for-character identical to the goal, with the appropriate hypothesis</p>",
        "id": 441495567,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1717085152
    },
    {
        "content": "<p>Alright, I'm pretty sure it's nothing about caching on any level. Changing the imported file to force a fresh build, restarting the Lean server, etc. all doesn't change it.</p>\n<p><code>exact?</code> just doesn't find lemmas defined in the other file. It does find ones defined in the current file.</p>",
        "id": 441510681,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1717088987
    },
    {
        "content": "<p>I see in <code>LibrarySearch.lean</code>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">cachePath</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">try</span>\n<span class=\"w\">    </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">findOLean</span><span class=\"w\"> </span><span class=\"ss\">`MathlibExtras.LibrarySearch</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">withExtension</span><span class=\"w\"> </span><span class=\"s2\">\"extra\"</span>\n<span class=\"w\">  </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"s2\">\".lake\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"build\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"lib\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"MathlibExtras\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"LibrarySearch.extra\"</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Retrieve the current current of lemmas.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">initialize</span><span class=\"w\"> </span><span class=\"n\">librarySearchLemmas</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">DiscrTreeCache</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Name</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">DeclMod</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">unsafe</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">cachePath</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"bp\">.</span><span class=\"n\">pathExists</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"c1\">-- We can drop the `CompactedRegion` value from `unpickle`; we do not plan to free it</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"m\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">&lt;$&gt;</span><span class=\"w\"> </span><span class=\"n\">unpickle</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DiscrTree</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Name</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">DeclMod</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">path</span>\n<span class=\"w\">    </span><span class=\"n\">DiscrTreeCache</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"s2\">\"apply?: using cache\"</span><span class=\"w\"> </span><span class=\"n\">processLemma</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">init</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">buildDiscrTree</span>\n</code></pre></div>\n<p>which makes me wonder if there is some \"deeper\" cache that is not refreshed just by restarting the Lean server and rebuilding the file. (That would feel very louser as a user experience.)</p>",
        "id": 441511824,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1717089267
    },
    {
        "content": "<p>Yes, that's I was trying to tell you. Sorry if I was unclear</p>",
        "id": 441512186,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717089362
    },
    {
        "content": "<p>I see. Yeah, I'd never really peeked inside LibrarySearch before and I don't know how this caching happens. How can I clear this cache? Just deleting the LibrarySearch.extra file? -- will that force a whole rebuild?</p>",
        "id": 441512506,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1717089442
    },
    {
        "content": "<p>oh --- is the issue that <code>MathlibExtras/LibrarySearch.lean</code> imports <code>Mathlib</code> but not my own custom library, so that will make it unable to find those lemmas I proved?</p>\n<p>I thought <code>exact?</code> would search through all of the current working context, I didn't realize it only searches mathlib</p>",
        "id": 441512790,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1717089509
    },
    {
        "content": "<p>Are you using an old version of mathlib? <code>exact?</code> moved to core a while ago (in v4.7.0), and I think the new version should search everything.</p>",
        "id": 441513095,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1717089598
    },
    {
        "content": "<p>Ahhh. Hmm, ok</p>",
        "id": 441513268,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1717089642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621624\">Jordan</span> has marked this topic as resolved.</p>",
        "id": 441959001,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717273530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621624\">Jordan</span> has marked this topic as unresolved.</p>",
        "id": 441959115,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717273578
    },
    {
        "content": "<p>Sorry about that. I was trying to mark this thread as read.</p>",
        "id": 441959145,
        "sender_full_name": "Jordan",
        "timestamp": 1717273598
    },
    {
        "content": "<p>Yes, the old mathlib version of <code>exact?</code> only searches in the current file, and in mathlib. Not in imported files outside of mathlib.</p>",
        "id": 442054732,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717335931
    }
]