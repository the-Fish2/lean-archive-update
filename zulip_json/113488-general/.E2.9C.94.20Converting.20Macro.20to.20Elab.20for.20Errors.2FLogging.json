[
    {
        "content": "<p>Hello, I would like to know if it is possible to convert a Macro to an Elab definition.<br>\nThe reason is, that I would like to log specified error messages (and infos).</p>\n<p>How can I \"cast\" MacroM Syntax or Syntax in general, or  TSyntax `command  to Unit? I would like to use the System with the </p>\n<blockquote>\n<p>`() - Quoting,</p>\n</blockquote>\n<p>if possible.</p>\n<p>As Example: Here I want, that additionally to the log output, that the command in ret is executed and the variable is created.</p>\n<p>Thanks in advance <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> . </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab</span>\n<span class=\"kn\">open</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"#var \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span>\n    <span class=\"n\">v.getId</span> <span class=\"bp\">==</span> <span class=\"s2\">\"v\"</span>\n  <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"n\">Macro.Exception.unsupportedSyntax</span>\n  <span class=\"k\">else</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n\n<span class=\"bp\">#</span><span class=\"n\">var</span> <span class=\"n\">a</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"c1\">-- a : Nat</span>\n\n<span class=\"bp\">#</span><span class=\"n\">var</span> <span class=\"n\">v</span> <span class=\"c1\">-- elaboration function for '«command#var_»' has not been implemented</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#var \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span>\n    <span class=\"n\">v.getId</span> <span class=\"bp\">==</span> <span class=\"s2\">\"v\"</span>\n  <span class=\"k\">then</span>\n    <span class=\"n\">logError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"variable {v.getId} will NOT be created\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"variable {v.getId} will be created\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n    <span class=\"c1\">--return ret -- ERROR</span>\n\n<span class=\"bp\">#</span><span class=\"n\">var</span> <span class=\"n\">b</span> <span class=\"c1\">--variable b will be created</span>\n<span class=\"k\">#check</span> <span class=\"n\">b</span> <span class=\"c1\">-- unknown identifier 'b'</span>\n<span class=\"bp\">#</span><span class=\"n\">var</span> <span class=\"n\">v</span> <span class=\"c1\">--variable v will NOT be created</span>\n</code></pre></div>",
        "id": 439196219,
        "sender_full_name": "Codegoblin",
        "timestamp": 1715942168
    },
    {
        "content": "<p>I think the missing piece here is a <code>HasUnsupportedSyntaxError</code> typeclass of some kind unifying <code>Lean.Elab.throwUnsupportedSyntax</code> and <code>Macro.throwUnsupportedSyntax</code>; then you can write your example with <code>MonadLog</code> and <code>MonadQuotation</code> or similar</p>",
        "id": 439202351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715944956
    },
    {
        "content": "<p>I think for your particular question though you need to call <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=elabTopLevelCommand#doc\">docs#elabTopLevelCommand</a></p>",
        "id": 439202952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715945262
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ,<br>\non the link you shared, I get Error 404.</p>\n<p>I do not quite understand what I have to do with MonadLog or MonadQuotation. Does that mean, it is not possible to attach code to an elab as I can in a macro? I want both (if possible): the ability to log a result + the ability to report an error if i get faulty input in my syntax.</p>",
        "id": 439204371,
        "sender_full_name": "Codegoblin",
        "timestamp": 1715945980
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.elabCommandTopLevel#doc\">docs#Lean.Elab.Command.elabCommandTopLevel</a></p>",
        "id": 439205348,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715946400
    },
    {
        "content": "<p>Thank you very much <span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> ,<br>\nwith this i can now add elabCommand ret and it works. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 439205969,
        "sender_full_name": "Codegoblin",
        "timestamp": 1715946710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"710184\">Codegoblin</span> has marked this topic as resolved.</p>",
        "id": 439205977,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715946716
    }
]