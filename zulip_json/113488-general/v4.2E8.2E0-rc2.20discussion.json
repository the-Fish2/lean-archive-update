[
    {
        "content": "<p>I just updated to leanv4.8.0-rc2, but it seems that my lakefile no longer works: what I am doing wrong?</p>\n<p>This is what I see:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\nerror:<span class=\"w\"> </span>././lakefile.lean:1:0:<span class=\"w\"> </span>error:<span class=\"w\"> </span>object<span class=\"w\"> </span>file<span class=\"w\"> </span><span class=\"s1\">'/home/damiano/.elan/toolchains/leanprover--lean4---v4.8.0-rc2/lib/lean/Lake/Build.olean'</span><span class=\"w\"> </span>of<span class=\"w\"> </span>module<span class=\"w\"> </span>Lake.Build<span class=\"w\"> </span>does<span class=\"w\"> </span>not<span class=\"w\"> </span>exist\nerror:<span class=\"w\"> </span>././lakefile.lean:3:5:<span class=\"w\"> </span>error:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>namespace<span class=\"w\"> </span><span class=\"s1\">'Lake'</span>\nerror:<span class=\"w\"> </span>././lakefile.lean:5:0:<span class=\"w\"> </span>error:<span class=\"w\"> </span>unexpected<span class=\"w\"> </span>identifier<span class=\"p\">;</span><span class=\"w\"> </span>expected<span class=\"w\"> </span><span class=\"nb\">command</span>\nerror:<span class=\"w\"> </span>././lakefile.lean:21:0:<span class=\"w\"> </span>error:<span class=\"w\"> </span>unexpected<span class=\"w\"> </span>identifier<span class=\"p\">;</span><span class=\"w\"> </span>expected<span class=\"w\"> </span><span class=\"nb\">command</span>\nerror:<span class=\"w\"> </span>././lakefile.lean:35:17:<span class=\"w\"> </span>error:<span class=\"w\"> </span>unexpected<span class=\"w\"> </span>identifier<span class=\"p\">;</span><span class=\"w\"> </span>expected<span class=\"w\"> </span><span class=\"s1\">'abbrev'</span>,<span class=\"w\"> </span><span class=\"s1\">'axiom'</span>,<span class=\"w\"> </span><span class=\"s1\">'binder_predicate'</span>,<span class=\"w\"> </span><span class=\"s1\">'builtin_initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'class'</span>,<span class=\"w\"> </span><span class=\"s1\">'def'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'example'</span>,<span class=\"w\"> </span><span class=\"s1\">'inductive'</span>,<span class=\"w\"> </span><span class=\"s1\">'infix'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixl'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixr'</span>,<span class=\"w\"> </span><span class=\"s1\">'initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'instance'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'notation'</span>,<span class=\"w\"> </span><span class=\"s1\">'opaque'</span>,<span class=\"w\"> </span><span class=\"s1\">'postfix'</span>,<span class=\"w\"> </span><span class=\"s1\">'prefix'</span>,<span class=\"w\"> </span><span class=\"s1\">'structure'</span>,<span class=\"w\"> </span><span class=\"s1\">'syntax'</span><span class=\"w\"> </span>or<span class=\"w\"> </span><span class=\"s1\">'theorem'</span>\nerror:<span class=\"w\"> </span>././lakefile.lean:42:91:<span class=\"w\"> </span>error:<span class=\"w\"> </span>unexpected<span class=\"w\"> </span>identifier<span class=\"p\">;</span><span class=\"w\"> </span>expected<span class=\"w\"> </span><span class=\"s1\">'abbrev'</span>,<span class=\"w\"> </span><span class=\"s1\">'add_decl_doc'</span>,<span class=\"w\"> </span><span class=\"s1\">'axiom'</span>,<span class=\"w\"> </span><span class=\"s1\">'binder_predicate'</span>,<span class=\"w\"> </span><span class=\"s1\">'builtin_initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'class'</span>,<span class=\"w\"> </span><span class=\"s1\">'declare_syntax_cat'</span>,<span class=\"w\"> </span><span class=\"s1\">'def'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'example'</span>,<span class=\"w\"> </span><span class=\"s1\">'inductive'</span>,<span class=\"w\"> </span><span class=\"s1\">'infix'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixl'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixr'</span>,<span class=\"w\"> </span><span class=\"s1\">'initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'instance'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'notation'</span>,<span class=\"w\"> </span><span class=\"s1\">'opaque'</span>,<span class=\"w\"> </span><span class=\"s1\">'postfix'</span>,<span class=\"w\"> </span><span class=\"s1\">'prefix'</span>,<span class=\"w\"> </span><span class=\"s1\">'structure'</span>,<span class=\"w\"> </span><span class=\"s1\">'syntax'</span><span class=\"w\"> </span>or<span class=\"w\"> </span><span class=\"s1\">'theorem'</span>\nerror:<span class=\"w\"> </span>././lakefile.lean:50:87:<span class=\"w\"> </span>error:<span class=\"w\"> </span>unexpected<span class=\"w\"> </span>identifier<span class=\"p\">;</span><span class=\"w\"> </span>expected<span class=\"w\"> </span><span class=\"s1\">'abbrev'</span>,<span class=\"w\"> </span><span class=\"s1\">'add_decl_doc'</span>,<span class=\"w\"> </span><span class=\"s1\">'axiom'</span>,<span class=\"w\"> </span><span class=\"s1\">'binder_predicate'</span>,<span class=\"w\"> </span><span class=\"s1\">'builtin_initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'class'</span>,<span class=\"w\"> </span><span class=\"s1\">'declare_syntax_cat'</span>,<span class=\"w\"> </span><span class=\"s1\">'def'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'example'</span>,<span class=\"w\"> </span><span class=\"s1\">'inductive'</span>,<span class=\"w\"> </span><span class=\"s1\">'infix'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixl'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixr'</span>,<span class=\"w\"> </span><span class=\"s1\">'initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'instance'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'notation'</span>,<span class=\"w\"> </span><span class=\"s1\">'opaque'</span>,<span class=\"w\"> </span><span class=\"s1\">'postfix'</span>,<span class=\"w\"> </span><span class=\"s1\">'prefix'</span>,<span class=\"w\"> </span><span class=\"s1\">'structure'</span>,<span class=\"w\"> </span><span class=\"s1\">'syntax'</span><span class=\"w\"> </span>or<span class=\"w\"> </span><span class=\"s1\">'theorem'</span>\nerror:<span class=\"w\"> </span>././lakefile.lean:54:100:<span class=\"w\"> </span>error:<span class=\"w\"> </span>unexpected<span class=\"w\"> </span>identifier<span class=\"p\">;</span><span class=\"w\"> </span>expected<span class=\"w\"> </span><span class=\"s1\">'abbrev'</span>,<span class=\"w\"> </span><span class=\"s1\">'add_decl_doc'</span>,<span class=\"w\"> </span><span class=\"s1\">'axiom'</span>,<span class=\"w\"> </span><span class=\"s1\">'binder_predicate'</span>,<span class=\"w\"> </span><span class=\"s1\">'builtin_initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'class'</span>,<span class=\"w\"> </span><span class=\"s1\">'declare_syntax_cat'</span>,<span class=\"w\"> </span><span class=\"s1\">'def'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'example'</span>,<span class=\"w\"> </span><span class=\"s1\">'inductive'</span>,<span class=\"w\"> </span><span class=\"s1\">'infix'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixl'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixr'</span>,<span class=\"w\"> </span><span class=\"s1\">'initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'instance'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'notation'</span>,<span class=\"w\"> </span><span class=\"s1\">'opaque'</span>,<span class=\"w\"> </span><span class=\"s1\">'postfix'</span>,<span class=\"w\"> </span><span class=\"s1\">'prefix'</span>,<span class=\"w\"> </span><span class=\"s1\">'structure'</span>,<span class=\"w\"> </span><span class=\"s1\">'syntax'</span><span class=\"w\"> </span>or<span class=\"w\"> </span><span class=\"s1\">'theorem'</span>\nerror:<span class=\"w\"> </span>././lakefile.lean:59:61:<span class=\"w\"> </span>error:<span class=\"w\"> </span>unexpected<span class=\"w\"> </span>identifier<span class=\"p\">;</span><span class=\"w\"> </span>expected<span class=\"w\"> </span><span class=\"s1\">'abbrev'</span>,<span class=\"w\"> </span><span class=\"s1\">'add_decl_doc'</span>,<span class=\"w\"> </span><span class=\"s1\">'axiom'</span>,<span class=\"w\"> </span><span class=\"s1\">'binder_predicate'</span>,<span class=\"w\"> </span><span class=\"s1\">'builtin_initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'class'</span>,<span class=\"w\"> </span><span class=\"s1\">'declare_syntax_cat'</span>,<span class=\"w\"> </span><span class=\"s1\">'def'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'example'</span>,<span class=\"w\"> </span><span class=\"s1\">'inductive'</span>,<span class=\"w\"> </span><span class=\"s1\">'infix'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixl'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixr'</span>,<span class=\"w\"> </span><span class=\"s1\">'initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'instance'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'notation'</span>,<span class=\"w\"> </span><span class=\"s1\">'opaque'</span>,<span class=\"w\"> </span><span class=\"s1\">'postfix'</span>,<span class=\"w\"> </span><span class=\"s1\">'prefix'</span>,<span class=\"w\"> </span><span class=\"s1\">'structure'</span>,<span class=\"w\"> </span><span class=\"s1\">'syntax'</span><span class=\"w\"> </span>or<span class=\"w\"> </span><span class=\"s1\">'theorem'</span>\nerror:<span class=\"w\"> </span>././lakefile.lean:68:2:<span class=\"w\"> </span>error:<span class=\"w\"> </span>unexpected<span class=\"w\"> </span>identifier<span class=\"p\">;</span><span class=\"w\"> </span>expected<span class=\"w\"> </span><span class=\"s1\">'abbrev'</span>,<span class=\"w\"> </span><span class=\"s1\">'add_decl_doc'</span>,<span class=\"w\"> </span><span class=\"s1\">'axiom'</span>,<span class=\"w\"> </span><span class=\"s1\">'binder_predicate'</span>,<span class=\"w\"> </span><span class=\"s1\">'builtin_initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'class'</span>,<span class=\"w\"> </span><span class=\"s1\">'declare_syntax_cat'</span>,<span class=\"w\"> </span><span class=\"s1\">'def'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'example'</span>,<span class=\"w\"> </span><span class=\"s1\">'inductive'</span>,<span class=\"w\"> </span><span class=\"s1\">'infix'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixl'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixr'</span>,<span class=\"w\"> </span><span class=\"s1\">'initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'instance'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'notation'</span>,<span class=\"w\"> </span><span class=\"s1\">'opaque'</span>,<span class=\"w\"> </span><span class=\"s1\">'postfix'</span>,<span class=\"w\"> </span><span class=\"s1\">'prefix'</span>,<span class=\"w\"> </span><span class=\"s1\">'structure'</span>,<span class=\"w\"> </span><span class=\"s1\">'syntax'</span><span class=\"w\"> </span>or<span class=\"w\"> </span><span class=\"s1\">'theorem'</span>\nerror:<span class=\"w\"> </span>././lakefile.lean:79:14:<span class=\"w\"> </span>error:<span class=\"w\"> </span>unexpected<span class=\"w\"> </span>identifier<span class=\"p\">;</span><span class=\"w\"> </span>expected<span class=\"w\"> </span><span class=\"s1\">'abbrev'</span>,<span class=\"w\"> </span><span class=\"s1\">'axiom'</span>,<span class=\"w\"> </span><span class=\"s1\">'binder_predicate'</span>,<span class=\"w\"> </span><span class=\"s1\">'builtin_initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'class'</span>,<span class=\"w\"> </span><span class=\"s1\">'def'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'example'</span>,<span class=\"w\"> </span><span class=\"s1\">'inductive'</span>,<span class=\"w\"> </span><span class=\"s1\">'infix'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixl'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixr'</span>,<span class=\"w\"> </span><span class=\"s1\">'initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'instance'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'notation'</span>,<span class=\"w\"> </span><span class=\"s1\">'opaque'</span>,<span class=\"w\"> </span><span class=\"s1\">'postfix'</span>,<span class=\"w\"> </span><span class=\"s1\">'prefix'</span>,<span class=\"w\"> </span><span class=\"s1\">'structure'</span>,<span class=\"w\"> </span><span class=\"s1\">'syntax'</span><span class=\"w\"> </span>or<span class=\"w\"> </span><span class=\"s1\">'theorem'</span>\nerror:<span class=\"w\"> </span>././lakefile.lean:90:2:<span class=\"w\"> </span>error:<span class=\"w\"> </span>unexpected<span class=\"w\"> </span>identifier<span class=\"p\">;</span><span class=\"w\"> </span>expected<span class=\"w\"> </span><span class=\"s1\">'abbrev'</span>,<span class=\"w\"> </span><span class=\"s1\">'add_decl_doc'</span>,<span class=\"w\"> </span><span class=\"s1\">'axiom'</span>,<span class=\"w\"> </span><span class=\"s1\">'binder_predicate'</span>,<span class=\"w\"> </span><span class=\"s1\">'builtin_initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'class'</span>,<span class=\"w\"> </span><span class=\"s1\">'declare_syntax_cat'</span>,<span class=\"w\"> </span><span class=\"s1\">'def'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab'</span>,<span class=\"w\"> </span><span class=\"s1\">'elab_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'example'</span>,<span class=\"w\"> </span><span class=\"s1\">'inductive'</span>,<span class=\"w\"> </span><span class=\"s1\">'infix'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixl'</span>,<span class=\"w\"> </span><span class=\"s1\">'infixr'</span>,<span class=\"w\"> </span><span class=\"s1\">'initialize'</span>,<span class=\"w\"> </span><span class=\"s1\">'instance'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro'</span>,<span class=\"w\"> </span><span class=\"s1\">'macro_rules'</span>,<span class=\"w\"> </span><span class=\"s1\">'notation'</span>,<span class=\"w\"> </span><span class=\"s1\">'opaque'</span>,<span class=\"w\"> </span><span class=\"s1\">'postfix'</span>,<span class=\"w\"> </span><span class=\"s1\">'prefix'</span>,<span class=\"w\"> </span><span class=\"s1\">'structure'</span>,<span class=\"w\"> </span><span class=\"s1\">'syntax'</span><span class=\"w\"> </span>or<span class=\"w\"> </span><span class=\"s1\">'theorem'</span>\nerror:<span class=\"w\"> </span>././lakefile.lean:<span class=\"w\"> </span>package<span class=\"w\"> </span>configuration<span class=\"w\"> </span>has<span class=\"w\"> </span>errors\n</code></pre></div>",
        "id": 440082967,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716381745
    },
    {
        "content": "<p>This is how my lakefile begins</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"n\">lakefile</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lake</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lake</span><span class=\"w\"> </span><span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">mathlib</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">leanOptions</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"ss\">`pp.unicode.fun</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"c1\">-- pretty-prints `fun a ↦ b`</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"ss\">`autoImplicit</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"ss\">`relaxedAutoImplicit</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"bp\">⟩</span>\n<span class=\"w\">  </span><span class=\"o\">]</span>\n\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 440083175,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716381815
    },
    {
        "content": "<p>It seems that you need <code>lake -R exe cache get</code>.</p>",
        "id": 440083219,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716381834
    },
    {
        "content": "<p>let me try that!</p>",
        "id": 440083303,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716381853
    },
    {
        "content": "<p>No, same error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">lake</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">exe</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"n\">get</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././</span><span class=\"n\">lakefile</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"bp\">'/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">damiano</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.8.0-rc2/lib/lean/Lake/Build.olean' of module Lake.Build does not exist</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././</span><span class=\"n\">lakefile</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">unknown</span><span class=\"w\"> </span><span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">Lake'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././</span><span class=\"n\">lakefile</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">unexpected</span><span class=\"w\"> </span><span class=\"n\">identifier</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">command</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 440083353,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716381873
    },
    {
        "content": "<p>Also you need to check <code>lean-toolchain</code> to make sure the toolchain is indeed updated.</p>",
        "id": 440083377,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716381878
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">v4</span><span class=\"bp\">.</span><span class=\"m\">8</span><span class=\"bp\">.</span><span class=\"m\">0</span><span class=\"bp\">-</span><span class=\"n\">rc2</span>\n</code></pre></div>",
        "id": 440083411,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716381893
    },
    {
        "content": "<p>Try reinstalling the toolchain?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">elan</span><span class=\"w\"> </span><span class=\"n\">uninstall</span><span class=\"w\"> </span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">v4</span><span class=\"bp\">.</span><span class=\"m\">8</span><span class=\"bp\">.</span><span class=\"m\">0</span><span class=\"bp\">-</span><span class=\"n\">rc2</span>\n<span class=\"n\">elan</span><span class=\"w\"> </span><span class=\"n\">install</span><span class=\"w\"> </span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">v4</span><span class=\"bp\">.</span><span class=\"m\">8</span><span class=\"bp\">.</span><span class=\"m\">0</span><span class=\"bp\">-</span><span class=\"n\">rc2</span>\n</code></pre></div>",
        "id": 440083644,
        "sender_full_name": "Utensil Song",
        "timestamp": 1716381965
    },
    {
        "content": "<p>This is looking promising...</p>",
        "id": 440083896,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716382062
    },
    {
        "content": "<p>Success!!  Thanks!</p>",
        "id": 440084093,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716382123
    },
    {
        "content": "<p>(Move to v4.8.0-rc2 discussion?)</p>",
        "id": 440093742,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1716384985
    },
    {
        "content": "<p>11 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/v4.2E8.2E0-rc1.20discussion\">#general &gt; v4.8.0-rc1 discussion</a> by <span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span>.</p>",
        "id": 440105492,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716388048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> What is your elan version?</p>",
        "id": 440169465,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1716407041
    },
    {
        "content": "<p>I do not know what it was, since, after something failed, I typed <code>elan self update</code>.  After that, it was (and still is)</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">elan</span><span class=\"w\"> </span><span class=\"c1\">--version</span>\n<span class=\"n\">elan</span><span class=\"w\"> </span><span class=\"mf\">3.1</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">71</span><span class=\"n\">ddc6633</span><span class=\"w\"> </span><span class=\"mi\">2024</span><span class=\"bp\">-</span><span class=\"mi\">02</span><span class=\"bp\">-</span><span class=\"mi\">22</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 440171688,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716407871
    },
    {
        "content": "<p>I had not looked at the version before updating, however, I still had the errors with the version above.</p>",
        "id": 440171852,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716407920
    },
    {
        "content": "<p>Okay, it is good to know at least that it was an old version that downloaded the corrupted toolchain</p>",
        "id": 440173595,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1716408530
    },
    {
        "content": "<p>I promise that this time I only tagged <code>v4.8.0-rc2</code> <em>once</em>!</p>",
        "id": 440195116,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716416804
    },
    {
        "content": "<p>It's great to see that wrong imports now don't immediately stall the build!</p>",
        "id": 440264661,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716449969
    },
    {
        "content": "<p>However there are a bunch of things that I'm finding wrong which might be related to that change. Consider my <a href=\"https://github.com/YaelDillies/LeanCamCombi/\">LeanCamCombi project</a>. If you check it out and run <code>./scripts/update_mathlib.sh; ./scripts/mk_all.sh; lake build</code>, you get a bunch of output ending in</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"w\"> </span><span class=\"n\">logged</span><span class=\"w\"> </span><span class=\"n\">failures</span><span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">GroupTheory</span><span class=\"bp\">.</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">Kneser</span><span class=\"bp\">.</span><span class=\"n\">Mathlib</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">GroupTheory</span><span class=\"bp\">.</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">Actions</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">Kneser</span><span class=\"bp\">.</span><span class=\"n\">MulStab</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">Kneser</span><span class=\"bp\">.</span><span class=\"n\">Kneser</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">Archive</span><span class=\"bp\">.</span><span class=\"n\">CauchyDavenportFromKneser</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">Impact</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">LocallyFinite</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">BigOperators</span><span class=\"bp\">.</span><span class=\"n\">LocallyFinite</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">Incidence</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">Kneser</span><span class=\"bp\">.</span><span class=\"n\">KneserRuzsa</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Parity</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">GroupTheory</span><span class=\"bp\">.</span><span class=\"n\">Submonoid</span><span class=\"bp\">.</span><span class=\"n\">Operations</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Combinatorics</span><span class=\"bp\">.</span><span class=\"n\">Schnirelmann</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">Intervals</span><span class=\"bp\">.</span><span class=\"n\">OrdConnected</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">PosDiffs</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">LocallyFinite</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">LocallyFinite</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Combinatorics</span><span class=\"bp\">.</span><span class=\"n\">SimpleGraph</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Partition</span><span class=\"bp\">.</span><span class=\"n\">Finpartition</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">KruskalKatona</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">LeanCamCombi</span><span class=\"bp\">.</span><span class=\"n\">SimplicialComplex</span><span class=\"bp\">.</span><span class=\"n\">Simplex</span>\n</code></pre></div>",
        "id": 440265068,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716450139
    },
    {
        "content": "<p>I just upgraded to <code>v4.8.0-rc2</code> and I totally love it. Really amazing version!</p>",
        "id": 440265098,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716450162
    },
    {
        "content": "<p>I would hope this is a list of the files I need to fix. However it is really far from this:</p>\n<ul>\n<li><code>Mathlib.Algebra.Parity</code>, <code>Mathlib.Order.LocallyFinite</code>, <code>Mathlib.GroupTheory.Submonoid.Operations</code>, etc... are all files that <em>don't exist</em> (anymore, because I removed them from mathlib). They all are imported in <em>some other file</em> of my project. Why do <em>they</em> (and not just the files importing them) show up in the list of files that failed to build?</li>\n<li><code>LeanCamCombi.Kneser.Kneser</code>, <code>LeanCamCombi</code>, etc... indeed failed to build, but their dependencies failed to build as well. Why report failure of files that I can't yet fix?</li>\n</ul>",
        "id": 440265549,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716450352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, please file an issue for point 1. I'm skeptical of point 2, but don't have time to check it out myself. Can you produce a smaller example showing this issue.</p>",
        "id": 440267486,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716451110
    },
    {
        "content": "<p>For point 1, I've opened <a href=\"https://github.com/leanprover/lean4/pull/4256\">lean#4256</a>. For point 2, I'm not sure how to provide a small example given that's a cross-file issue, but here's one way to reproduce:</p>\n<ul>\n<li>Create a new project <code>MyProject</code></li>\n<li>Add a file <code>MyProject.Foo</code> containing <code>example : False := trivial</code></li>\n<li>Add a file <code>MyProject.Bar</code> containing <code>import MyProject.Foo</code></li>\n<li>Run <code>lake build MyProject.Bar</code></li>\n</ul>\n<p>The output will end in</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"w\"> </span><span class=\"n\">logged</span><span class=\"w\"> </span><span class=\"n\">failures</span><span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">MyProject</span><span class=\"bp\">.</span><span class=\"n\">Foo</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">MyProject</span><span class=\"bp\">.</span><span class=\"n\">Bar</span>\n</code></pre></div>\n<p>instead of the expected</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"w\"> </span><span class=\"n\">logged</span><span class=\"w\"> </span><span class=\"n\">failures</span><span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">MyProject</span><span class=\"bp\">.</span><span class=\"n\">Foo</span>\n</code></pre></div>",
        "id": 440299384,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716462585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, can't reproduce. I tried doing exactly that, and I only get the file containing <code>example : False := trivial</code> reported after \"Some builds logged failures\".</p>",
        "id": 440301132,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716463228
    },
    {
        "content": "<p>Are you using globs, or importing everything in the main file?</p>",
        "id": 440301220,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716463265
    },
    {
        "content": "<p>In LeanCamCombi, I am importing everything in <code>LeanCamCombi.lean</code> and this is the main target</p>",
        "id": 440301875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716463507
    },
    {
        "content": "<p>Could you make a repo?</p>",
        "id": 440301998,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716463552
    },
    {
        "content": "<p>I did <code>lake new</code> and followed your instructions but couldn't reproduce.</p>",
        "id": 440302073,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716463567
    },
    {
        "content": "<p>Hmm, there's clearly something wrong when running it on LeanCamCombi, as evidenced by the <code>- LeanCamCombi</code> line in my above snippet. You can checkout <a href=\"https://github.com/YaelDillies/LeanCamCombi/commit/c64efb6b6b2447b1966e7c71506353b73140d504\">https://github.com/YaelDillies/LeanCamCombi/commit/c64efb6b6b2447b1966e7c71506353b73140d504</a>, run <code>./scripts/update-mathlib.sh; ./scripts/mk_all.sh; lake build</code> and hopefully you will see the same output as I did.</p>",
        "id": 440302704,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716463803
    },
    {
        "content": "<p>If that's not enough to convince you there's something wrong, I'll try minimising later</p>",
        "id": 440302768,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716463823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> I'm getting failures in a lake script in rc2 because <code>#synth MonadLiftT JobM FetchM</code> no longer succeeds. Was this replaced by something else?</p>",
        "id": 440407037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716502474
    },
    {
        "content": "<p>(cargo-culted my way to <code>Job.async</code> but it would be nice to get confirmation)</p>",
        "id": 440407675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716502881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> No that is bug. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>  <del>(And one that I though I had ensured worked.)</del> (Oh, I actually I think I broke it after I did that check.)</p>",
        "id": 440408214,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716503158
    },
    {
        "content": "<p>do you know what the equivalent of the lift is? Is <code>Job.async</code> adding additional asynchrony on top?</p>",
        "id": 440408366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716503252
    },
    {
        "content": "<p>After saying that, I realized there actually isn't one any longer.</p>",
        "id": 440408507,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716503339
    },
    {
        "content": "<p>The problem is that the old <code>JobM</code> actions should be <code>LogIO</code> instead.</p>",
        "id": 440408583,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716503384
    },
    {
        "content": "<p>what's the context of this change? I'm not sure I have a great understanding of what these monads represent</p>",
        "id": 440408586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716503388
    },
    {
        "content": "<p>In the script in question, it was using <code>buildUnlessUpToDate</code> inside a <code>target :=</code> declaration</p>",
        "id": 440408717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716503431
    },
    {
        "content": "<p><code>JobM</code> is the monad of a job. It now includes state about that job which is absent from <code>FetchM</code>.</p>",
        "id": 440408722,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716503432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E8.2E0-rc2.20discussion/near/440408717\">said</a>:</p>\n<blockquote>\n<p>In the script in question, it was using <code>buildUnlessUpToDate</code> inside a <code>target :=</code> declaration</p>\n</blockquote>\n<p>Oh, in that case, it definitely <em>should</em> have been using <code>Job.async</code>.</p>",
        "id": 440408782,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716503465
    },
    {
        "content": "<p>which does what?</p>",
        "id": 440408806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716503480
    },
    {
        "content": "<p>Produces an asynchronous <code>Job</code> from the <code>JobM</code> action.</p>",
        "id": 440408830,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716503496
    },
    {
        "content": "<p>somehow this doesn't explain things</p>",
        "id": 440408848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716503507
    },
    {
        "content": "<p>I can see that much from the name of the function. I don't know what that actually means though</p>",
        "id": 440408921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716503537
    },
    {
        "content": "<p>what's the reason you say it \"should\" be using <code>Job.async</code>?</p>",
        "id": 440408984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716503573
    },
    {
        "content": "<p>Not much more than that? It spawns asynchronous task performing the <code>JobM</code> actions, wraps it in the <code>Job</code> structure, and returns it.</p>",
        "id": 440408996,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716503583
    },
    {
        "content": "<p>if it's not async, why is that bad</p>",
        "id": 440409023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716503603
    },
    {
        "content": "<p>Because that will unnecessarilyhalt the rest of the jobs wherever it is in the dependency graph from starting until it finishes?</p>",
        "id": 440409056,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716503625
    },
    {
        "content": "<p>I don't know, does it? Lake has a ton of parallelism, I don't know what thread it's on to begin with</p>",
        "id": 440409160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716503669
    },
    {
        "content": "<p>will it block the main thread?</p>",
        "id": 440409195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716503693
    },
    {
        "content": "<p>Yes</p>",
        "id": 440409201,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716503698
    },
    {
        "content": "<p>Everything runs on the main thread unless it spawns a job.</p>",
        "id": 440409218,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716503709
    },
    {
        "content": "<p>So is FetchM only for determining dependencies and not doing \"work\"?</p>",
        "id": 440409438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716503858
    },
    {
        "content": "<p>Yes</p>",
        "id": 440409700,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716504009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/v4.2E8.2E0-rc2.20discussion/near/440265549\">said</a>:</p>\n<blockquote>\n<p>I would hope this is a list of the files I need to fix. However it is really far from this:</p>\n<ul>\n<li><code>Mathlib.Algebra.Parity</code>, <code>Mathlib.Order.LocallyFinite</code>, <code>Mathlib.GroupTheory.Submonoid.Operations</code>, etc... are all files that <em>don't exist</em> (anymore, because I removed them from mathlib). They all are imported in <em>some other file</em> of my project. Why do <em>they</em> (and not just the files importing them) show up in the list of files that failed to build?</li>\n<li><code>LeanCamCombi.Kneser.Kneser</code>, <code>LeanCamCombi</code>, etc... indeed failed to build, but their dependencies failed to build as well. Why report failure of files that I can't yet fix?</li>\n</ul>\n</blockquote>\n<p>For point (1), an import , in Lake's mind is a reuqest to build the corresponding olean of the module. Thus, lake attempts to do just  (thus creating a Lake job for it), but that job then fails when it cannot find the source file from which to build. It is important to note that a missing source file is not necessarily an error at import time. For example,  binport of mathport  succesfully produces oleans without source files.</p>\n<p>For point (2), Lake does not yet know how to distinguish between a build failing for its own reason versus for a reason caused by its dependencies. However, this should be fixable in a future refactor. As for why Kim could not reproduce this, I suspect this is likely because the oleans in quesition already existing in your cases but not in theirs, but I am not sure why exactly that would make a difference.</p>",
        "id": 440431381,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716520578
    },
    {
        "content": "<p>I understand exactly why point 1 is happening, but I am claiming this is not useful behavior, or at least not useful default behavior.</p>",
        "id": 440451163,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716534198
    },
    {
        "content": "<p>I have a Fedora Linux Copr repo where I built the rc's in the lean4-rc package there<br>\n<a href=\"https://copr.fedorainfracloud.org/coprs/petersen/lean4/monitor/detailed\">https://copr.fedorainfracloud.org/coprs/petersen/lean4/monitor/detailed</a><br>\n(in addition to the main lean4 package)</p>",
        "id": 440698872,
        "sender_full_name": "Jens Petersen",
        "timestamp": 1716714213
    },
    {
        "content": "<p>Perhaps you know this already, but we advise users to never install a fixed version of Lean from a package manager, but always to install <code>elan</code> and allow it to dynamically provide Lean toolchains depending on the <code>lean-toolchain</code> file in each project.</p>",
        "id": 440699240,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716714614
    },
    {
        "content": "<p>I want to ship programs written in Lean4 in the future in Fedora</p>",
        "id": 440770903,
        "sender_full_name": "Jens Petersen",
        "timestamp": 1716784359
    },
    {
        "content": "<p>for plain executables written in lean, you should be able to get them statically linked with lean, in which case you don't need to provide lean separately after the build step and can ship only the executable</p>",
        "id": 440786268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716792570
    },
    {
        "content": "<p>To be clear by \"ship\" I meant include in the Fedora Linux distro. Static linking is probably fine, but I want to have packages using Lean in Fedora, ie that requires having Lean4 in Fedora too to build them. Admittedly I am still rather new to Lean so it is not going to happen overnight - eg I might port some of my existing tools written in Haskell which are in Fedora to Lean over time...</p>",
        "id": 440818328,
        "sender_full_name": "Jens Petersen",
        "timestamp": 1716803403
    },
    {
        "content": "<p>Either you need multiple incompatible versions of lean in fedora to build those tools, or fedora needs to take on the job of patching a bunch of lean packages to all be mutually compatible on every release</p>",
        "id": 440831366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716808253
    },
    {
        "content": "<p>Correct. It's qualitatively not very different from the situation with Haskell and GHC. I also expect that normal “programs” written in lean will be less sensitive to lean changes that proof developments like mathlib, which falls apart whenever you touch just about anything in lean :-)</p>",
        "id": 440849059,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716814506
    }
]