[
    {
        "content": "<p>If I have a goal of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I would like to rewrite that outer <code>f</code> on the right-hand side, how can that be done? It seems that whenever I do <code>rw [f]</code> it will only ever perform this operation on either the left-hand side or the inner most function application on the right-hand side but never the outer invocation. <code>nth_rewrite i [f]</code> also doesn't allow me to rewrite that specific use of <code>f</code> for any index I provide.</p>",
        "id": 412858294,
        "sender_full_name": "Michael Swan",
        "timestamp": 1705277447
    },
    {
        "content": "<p>You could use <code>conv</code> mode (possibly with the fancy new widget) to select which <code>f</code> to rewrite explicitly</p>",
        "id": 412859244,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705277914
    },
    {
        "content": "<p>Okay, I’ll experiment with that</p>",
        "id": 412859521,
        "sender_full_name": "Michael Swan",
        "timestamp": 1705278031
    },
    {
        "content": "<p>I'm surprised you can't get <code>nth_rewrite</code> to do the job... this seems to work for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NthRewrite</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- goal is now f x = g (f x)</span>\n</code></pre></div>",
        "id": 412859873,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705278162
    },
    {
        "content": "<p>maybe there's something about the particulars of your case that are interfering... in that case I suppose <code>conv</code> will do the trick, as Adam said</p>",
        "id": 412860465,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705278382
    },
    {
        "content": "<p>If you could give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that would be great, if you still need help</p>",
        "id": 412860789,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705278482
    },
    {
        "content": "<p>Yeah <code>nth_rewrite</code> doesn't work for my problem, here is a minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">code</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">:</span> <span class=\"n\">code</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">skip</span>\n<span class=\"kn\">open</span> <span class=\"n\">code</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">right_append_seq</span> <span class=\"o\">(</span><span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">:</span> <span class=\"n\">code</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">code</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"n\">c1'</span> <span class=\"n\">c2'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">seq</span> <span class=\"n\">c1'</span> <span class=\"o\">(</span><span class=\"n\">right_append_seq</span> <span class=\"n\">c2'</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>           <span class=\"bp\">=&gt;</span> <span class=\"n\">seq</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">right_assoc_seq</span> <span class=\"o\">:</span> <span class=\"n\">code</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">code</span>\n<span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"n\">c3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right_append_seq</span> <span class=\"o\">(</span><span class=\"n\">right_assoc_seq</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right_append_seq</span> <span class=\"o\">(</span><span class=\"n\">right_assoc_seq</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right_assoc_seq</span> <span class=\"n\">c3</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right_append_seq</span> <span class=\"o\">(</span><span class=\"n\">right_assoc_seq</span> <span class=\"n\">c1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right_assoc_seq</span> <span class=\"n\">c2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">right_assoc_seq_idempotent</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">right_assoc_seq</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">right_assoc_seq</span> <span class=\"o\">(</span><span class=\"n\">right_assoc_seq</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">right_assoc_seq</span><span class=\"o\">]</span> <span class=\"c1\">-- Here is where things fail.</span>\n</code></pre></div>",
        "id": 412863861,
        "sender_full_name": "Michael Swan",
        "timestamp": 1705279634
    },
    {
        "content": "<p>I am trying to expand that outer-most <code>right_assoc_seq</code> but that does not appear to be an option.</p>",
        "id": 412864118,
        "sender_full_name": "Michael Swan",
        "timestamp": 1705279761
    },
    {
        "content": "<p>What are you expecting it to expand to? Lean can't see yet which of the branches of the definition of <code>right_assoc_seq</code> applies here.</p>",
        "id": 412864905,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705280088
    },
    {
        "content": "<p>(Note that the third branch <code>c =&gt; c</code> only applies for <code>c = skip</code>.)</p>",
        "id": 412864974,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705280126
    },
    {
        "content": "<p>I expect it to expand into separate goals for each possibility of the inner <code>(right_assoc_seq c)</code> expression, which I guess perhaps that means I should do induction/cases on that expression?</p>",
        "id": 412865227,
        "sender_full_name": "Michael Swan",
        "timestamp": 1705280220
    },
    {
        "content": "<p>I guess I should just expand the inner and then the outer and that might be the only way to do anything with this.</p>",
        "id": 412865529,
        "sender_full_name": "Michael Swan",
        "timestamp": 1705280343
    },
    {
        "content": "<p>This seems to unfold the outer one and split into three cases:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">right_assoc_seq_idempotent</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">right_assoc_seq</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">right_assoc_seq</span> <span class=\"o\">(</span><span class=\"n\">right_assoc_seq</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">skip</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">right_assoc_seq</span>\n    <span class=\"n\">split</span>\n    <span class=\"c1\">-- three goals</span>\n</code></pre></div>",
        "id": 412866783,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705280963
    },
    {
        "content": "<p>Yeah, I'm going to need to rethink what I'm doing. I think there is a saner way to solve this than what I was attempting to do. Starting this proof with <code>intros c; induction (right_assoc_seq c)</code> seems to get me way farther than <code>intros c; induction c</code></p>",
        "id": 412866959,
        "sender_full_name": "Michael Swan",
        "timestamp": 1705281047
    }
]