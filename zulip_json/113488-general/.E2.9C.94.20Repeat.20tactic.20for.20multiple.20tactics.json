[
    {
        "content": "<p>I have a question about the behavior of the <code>repeat</code> tactic. In most places in Std, Mathlib, etc. where <code>repeat</code> and its cousin <code>repeat'</code> are used, only a single tactic is provided (usually a <code>rw</code> or an <code>exact</code>). However, how can multiple tactics be provided to <code>repeat</code>?</p>\n<p>Suppose I have a situation where I have a hypothesis that is a product of a lot of smaller hypotheses, and I want to iteratively use <code>cases</code> to unfold all the products. I may want to rename the newly-generated hypothesis and keep going. Seems like something <code>repeat</code> could do.</p>\n<p>Consider the following MWE (not minding the fact that it can be solved via <code>rfl</code> after the <code>intro</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">repeat_mwe</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">p.2.1</span><span class=\"o\">,</span> <span class=\"n\">p.2.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p</span>\n    <span class=\"n\">cases</span> <span class=\"n\">p</span>\n    <span class=\"c1\">-- The line below has no effect on the context</span>\n    <span class=\"c1\">-- repeat { rename _ =&gt; p; cases p }</span>\n    <span class=\"n\">repeat</span>\n      <span class=\"n\">rename</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span>\n      <span class=\"n\">cases</span> <span class=\"n\">p</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"n\">done</span>\n</code></pre></div>\n<p>The commented-out use of <code>repeat</code> doesn't affect the context, but indenting the tactics does. (I discovered this by scrolling back through Zulip. I found this <a href=\"#narrow/stream/116395-maths/topic/Practical.20ways.20to.20prove.20Nat.2EPrime.20N/near/426083527\">question by Clarence Chew</a> that contained a use of <code>repeat</code> with an indented block of tactics.)</p>\n<p>My question is: why does <code>repeat</code> work with indented tactics, but not with the curly braces <code>{ ... }</code> on the same line? Does it have to do with the way Lean parses/interprets/uses the two?</p>",
        "id": 435049375,
        "sender_full_name": "Cayden Codel",
        "timestamp": 1713898631
    },
    {
        "content": "<p>You can use <code>;</code> as a tactic combinator to build a new tactic from two separate tactics.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 435051381,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1713899409
    },
    {
        "content": "<p>Ah, so <code>{ ... }</code> has a different meaning than <code>( ... )</code> in Lean?</p>",
        "id": 435051498,
        "sender_full_name": "Cayden Codel",
        "timestamp": 1713899473
    },
    {
        "content": "<p>When you write <code>{...}</code>, Lean will check that what is inside proves the current goal.  Since <code>repeat</code> only repeats the sequence until it fails, if what you give is not a full proof, it will repeat nothing.</p>",
        "id": 435051730,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713899568
    },
    {
        "content": "<p>Good to know, thanks!</p>",
        "id": 435051779,
        "sender_full_name": "Cayden Codel",
        "timestamp": 1713899595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424407\">Cayden Codel</span> has marked this topic as resolved.</p>",
        "id": 435051789,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713899598
    },
    {
        "content": "<p><code>repeat</code> actually takes a tacticSeq, meaning that (confusingly) <code>repeat tac1; tac2</code> is actually <code>repeat (tac1; tac2)</code></p>",
        "id": 435052083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713899735
    },
    {
        "content": "<p>so the answer to your question is yes, they take multiple tactics in the most direct way</p>",
        "id": 435052208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713899780
    },
    {
        "content": "<p><code>{ tac1; tac2 }</code> is the same as <code>. tac1; tac2</code>, which is to say it asserts the goal is closed after the tactics. <code>(tac1; tac2)</code> is pure composition, and you can use it when syntactically you need to pass a <code>tactic</code> instead of a <code>tacticSeq</code>. But <code>repeat</code> is not one of those places, it will take <code>tac1; tac2</code> directly</p>",
        "id": 435052411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713899878
    },
    {
        "content": "<p><code>;</code> is not actually a tactic combinator <span class=\"user-mention\" data-user-id=\"664276\">@Mark Fischer</span> , it's more like a list separator. <code>tac1; tac2</code> is not a <code>tactic</code>, by comparison to <code>tac1 &lt;;&gt; tac2</code> which is. Most things take <code>tacticSeq</code> but for example you must put a <code>tactic</code> after </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">&lt;</span><span class=\"n\">here</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tac</span>\n</code></pre></div>\n<p>so if you try to write <code>tac1; tac2</code> there it will be a syntax error but <code>tac1 &lt;;&gt; tac2</code> and <code>(tac1; tac2)</code> are not.</p>",
        "id": 435052771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713900013
    },
    {
        "content": "<p>Hmmmmm, (tac1; tac2) can go wherever a tactic can go. So its the parenthesis that are composing them?</p>",
        "id": 435053462,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1713900283
    },
    {
        "content": "<p>Should I be thinking along  the lines of <code>(taticSeq)</code> is a tactic?</p>",
        "id": 435053822,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1713900426
    },
    {
        "content": "<p>exactly</p>",
        "id": 435053837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713900432
    }
]