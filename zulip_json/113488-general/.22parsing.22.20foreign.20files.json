[
    {
        "content": "<p>I wanted to write a small library for lean support of a different textfile (.po files). The parsing rules should be regex-like instructions. To turn such a file into a corresponding lean object, is it conceptually best to write a recursive function that iterates char-by-char through the textfile (keeping track of open/closed strings etc. manually) or is there something more clever one could do?</p>",
        "id": 422785264,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708596905
    },
    {
        "content": "<p>I don't understand the question. Are you looking for a lex and yacc style library or are you looking for parsec style parser? Lean definitely has the latter.</p>",
        "id": 422791338,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708599176
    },
    {
        "content": "<p>Sorry, I have a text file <code>test.po</code> that looks something like</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>msgid \"msg1\"\nmsgstr \"yada\"\n\"yada\"\n\nmsgid \"msg2\"\n\"msg2 cont\"\nmsgstr \"yada2\"\n\"yada2\"\n</code></pre></div>\n<p>and I want to read this file (using <code>IO.FS.readFile</code>?) and turn it into an Array </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"o\">{</span><span class=\"n\">msgId</span> <span class=\"o\">:=</span> <span class=\"s2\">\"msg1\"</span><span class=\"o\">,</span> <span class=\"n\">msgStr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"yada</span><span class=\"se\">\\n</span><span class=\"s2\">yada\"</span><span class=\"o\">},</span>\n   <span class=\"o\">{</span><span class=\"n\">msgId</span> <span class=\"o\">:=</span> <span class=\"s2\">\"msg2</span><span class=\"se\">\\n</span><span class=\"s2\">msg2 cont\"</span><span class=\"o\">,</span> <span class=\"n\">msgStr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"yada2</span><span class=\"se\">\\n</span><span class=\"s2\">yada2\"</span><span class=\"o\">}</span> <span class=\"o\">]</span>\n</code></pre></div>\n<p>And my question is if I need to implement such a \"parser\" manually by iterating through the file content, or if I could do something clever, like re-using some parts of lean's parsing?</p>\n<p>For example I imagine defining <code>msgid</code> as some syntax and the use lean's parser to parse the strings as such. But I don't understand enough to judge whether that is a dumb idea or something worth reading up about.</p>",
        "id": 422798623,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708601989
    },
    {
        "content": "<p>If the end goal is to produce a Lean object, maybe <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Data/Parsec.lean\">Lean's <code>Parsec</code> library</a> will come in handy. <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Data/Json/Parser.lean\">Lean's <code>Json</code> parser</a> is an example of <code>Parsec</code> in action.</p>\n<p>Edit: Oh, I see that Shreyas has suggested something similar in the messages above.</p>",
        "id": 422800178,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1708602686
    },
    {
        "content": "<p>One advantage of this approach is that it gives a way of directly producing a Lean object, skipping the intermediate steps of going from a raw string to syntax, producing an expression and finally evaluating it.</p>",
        "id": 422800345,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1708602749
    },
    {
        "content": "<p>Thanks for the links! I think that is exactly what I'm looking for</p>",
        "id": 422801297,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708603106
    },
    {
        "content": "<p>To give you another solution to consider, you could make a preprocessor that consumes a po file and generates a lean file. A big negative is that this means you have to recompile your program whenever you get a new translation file.</p>",
        "id": 422891652,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708630755
    }
]