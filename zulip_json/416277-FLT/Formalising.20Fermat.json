[
    {
        "content": "<p>I wouldn’t bet on formalising FLT using Lean alone. I would bet on inventing more convenient tools (with much better human computer interaction) that complements Lean. I plan on dedicating myself to that purpose in the following years.</p>",
        "id": 424817418,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709627215
    },
    {
        "content": "<p>hey, what if you invented those very tools using lean.. wouldnt that be great!</p>",
        "id": 424824932,
        "sender_full_name": "Somo S.",
        "timestamp": 1709629878
    },
    {
        "content": "<p>Please move further discussion to the <a class=\"stream\" data-stream-id=\"416277\" href=\"/#narrow/stream/416277-FLT\">#FLT</a> stream</p>",
        "id": 424825270,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709630022
    },
    {
        "content": "<p>3 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113486\" href=\"/#narrow/stream/113486-announce/topic/Formalising.20Fermat\">#announce &gt; Formalising Fermat</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 424825737,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709630166
    },
    {
        "content": "<p>Obviously I _would_ bet on formalising FLT using Lean alone, because other very large formalisation projects have succeeded and I can see a path to the goal. However I am all for using more convenient tools, and am enthusiastic about such ideas until people start talking about feeding LaTeX of complicated maths papers into a machine and getting Lean out, when I start quietly rolling my eyes about the over-optimism of computer scientists (my personal guess is that we will have finished the formalisation before AI gets to that point).</p>",
        "id": 424827436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709630817
    },
    {
        "content": "<p>Well LaTeX to sorry-free Lean (that actually proves the original statement) does sound a bit far I  agree, but LaTeX to some sorry-full Lean might be there before FLT is done, at least that's my hope.</p>",
        "id": 424829583,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1709631568
    },
    {
        "content": "<p>But I agree, I think Lean should be able to do FLT fine without anything else.</p>",
        "id": 424829854,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1709631657
    },
    {
        "content": "<p>That is, of course, assuming you've got a sufficiently detailed latex in the first place</p>",
        "id": 424830102,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709631732
    },
    {
        "content": "<p>Oh yeah better than anything I've ever written for sure!</p>",
        "id": 424830304,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1709631817
    },
    {
        "content": "<p>Right -- part of the project is writing a clear LaTeX proof.</p>",
        "id": 424830746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709631984
    },
    {
        "content": "<p>LaTeX to sorry-full (and error-full) Lean already exists, namely copilot. (The general purpose but huge parameter one trained by Microsoft seems, at least to me, in practice, to currently do better than Lean/specific trained ones like LeanCopilot…) I’ve found it extremely useful to have the natural language blueprint side by side with lean, both of which are often auto-generated and say almost exactly what I want…</p>",
        "id": 424842056,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709635865
    },
    {
        "content": "<p>So what happens if you just put the LaTeX source code of e.g. Darmon-Diamond-Taylor into copilot?</p>",
        "id": 424844720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709636789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/416277-FLT/topic/Formalising.20Fermat/near/424842056\">said</a>:</p>\n<blockquote>\n<p>LaTeX to sorry-full (and error-full) Lean already exists, namely copilot. (The general purpose but huge parameter one trained by Microsoft seems, at least to me, in practice, to currently do better than Lean/specific trained ones like LeanCopilot…) I’ve found it extremely useful to have the natural language blueprint side by side with lean, both of which are often auto-generated and say almost exactly what I want…</p>\n</blockquote>\n<p>Hmm interesting. I've also been using this, but haven't had a latex also open at the same time. I find it hard to know what it looks at to generate the suggestions.</p>",
        "id": 424848182,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1709638046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/416277-FLT/topic/Formalising.20Fermat/near/424844720\">said</a>:</p>\n<blockquote>\n<p>So what happens if you just put the LaTeX source code of e.g. Darmon-Diamond-Taylor into copilot?</p>\n</blockquote>\n<p>Great question! Someone should try it :) (In my experience, for copilot to be effective, needs to do this little lemma by little lemma…)</p>",
        "id": 424864955,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709644036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/416277-FLT/topic/Formalising.20Fermat/near/424848182\">said</a>:</p>\n<blockquote>\n<p>Hmm interesting. I've also been using this, but haven't had a latex also open at the same time. I find it hard to know what it looks at to generate the suggestions.</p>\n</blockquote>\n<p>It’s not that I have TeX open in some other file (I think copilot only reacts to one file at a time); I have them both open <em>in the same file</em>. See, e.g. <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/06357f5364492daf4060dc1e15e85a77a4298aa3/PrimeNumberTheoremAnd/MellinCalculus.lean#L74-L75\">here</a>. This is how we’ve been generating the whole blueprint for PNT+…</p>",
        "id": 424865753,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709644254
    },
    {
        "content": "<p>Oh interesting! I wondered if they were just both open in VSCode, since I remember hearing that copilot looks at the open files or something like that. But this is more like what I would want anyways, you write the latex first and then it guesses the lean.</p>",
        "id": 424866272,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1709644432
    },
    {
        "content": "<p>Exactly. And then we have blueprint scrape out the TeX and make a dependency graph, etc… I find it <em>really</em> fun and productive to work this way…</p>",
        "id": 424866935,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709644653
    },
    {
        "content": "<p>Oh this hadn't occurred to me! I have a bunch of LaTeX which Taylor wrote on FLT, I should try this :-)</p>",
        "id": 424879032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709648333
    },
    {
        "content": "<p>Here’s the script we wrote to execute this: <a href=\"https://github.com/ianjauslin-rutgers/leanblueprint-extract\">https://github.com/ianjauslin-rutgers/leanblueprint-extract</a></p>",
        "id": 424966656,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709676709
    },
    {
        "content": "<p>So lemme get this straight. You're writing the latex blueprint first, dumping it into a lean file in comments, and then using copilot to write the corresponding lean code, and then doing a final edit on the blueprint to add in the name of the lean function which you got copilot to help you generate?</p>\n<p>I'm a week or two away from beginning years of doing this, so I'm very interested to hear about your workflow!</p>",
        "id": 424967486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709677033
    },
    {
        "content": "<p>No, I write the latex blueprint <em>right in</em> the lean file. Let's hop on a zoom call so I can show you...</p>",
        "id": 425141149,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709746129
    },
    {
        "content": "<p>Isn’t it super painful to loose editor support for TeX? I couldn’t type TeX without the vimtex plugin. Or do you have a trick to simultaneously have Lean and TeX support in your editor?</p>",
        "id": 425144878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709747412
    },
    {
        "content": "<p>The only TeX support I'm using in my editor (emacs) is ctrl-C ctrl-C to compile, and I could just as easily be pressing up-arrow enter in a terminal.</p>",
        "id": 425145344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709747574
    },
    {
        "content": "<p>Your life could be a lot nicer then.</p>",
        "id": 425145760,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709747721
    },
    {
        "content": "<p>yeah but if you don't tell me this then I'll be very happy to learn Alex's tricks.</p>",
        "id": 425146092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709747815
    },
    {
        "content": "<p>By the way, if you use emacs, then you could get <span class=\"user-mention\" data-user-id=\"571592\">@Paul Nelson</span>'s hacks, and see the LaTeX <em>compiled</em> inside the lean!... (I'm very jealous of that feature, which doesn't seem to be available in VSCode. It's almost tempting enough to get me to switch to emacs. Almost...)</p>",
        "id": 425162840,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709753395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/416277-FLT/topic/Formalising.20Fermat/near/425162840\">said</a>:</p>\n<blockquote>\n<p>By the way, if you use emacs, then you could get <span class=\"user-mention silent\" data-user-id=\"571592\">Paul Nelson</span>'s hacks, and see the LaTeX <em>compiled</em> inside the lean!... (I'm very jealous of that feature, which doesn't seem to be available in VSCode. It's almost tempting enough to get me to switch to emacs. Almost...)</p>\n</blockquote>\n<p>screenshot? I am curious what that looks like.</p>",
        "id": 425165038,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1709754152
    },
    {
        "content": "<p>Paul had posted one here: <a href=\"#narrow/stream/113488-general/topic/blueprint.20changes/near/411609785\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/blueprint.20changes/near/411609785</a></p>",
        "id": 425190602,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709764483
    }
]