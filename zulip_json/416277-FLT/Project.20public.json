[
    {
        "content": "<p>So the project is now public: <a href=\"https://github.com/ImperialCollegeLondon/FLT\">here</a> is the repo and <a href=\"https://leanprover-community.github.io/blog/posts/FLT-announcement/\">here</a> is a blog post. I <del>want to watch the snooker</del> am too tired to do any more today, but tomorrow I'll post the first \"things which it's possible to do right now\" post, following the Tao/Kontorovich model of leading a formalisation project. </p>\n<p>One thing I'm a bit bewildered by right now is that the switch from private to public has made my link to the blueprint stop working. All the links on the blog post are fine, e.g.</p>\n<p><a href=\"https://imperialcollegelondon.github.io/FLT/blueprint/dep_graph_document.html\">https://imperialcollegelondon.github.io/FLT/blueprint/dep_graph_document.html</a></p>\n<p>for the graph and</p>\n<p><a href=\"https://imperialcollegelondon.github.io/FLT/blueprint/index.html\">https://imperialcollegelondon.github.io/FLT/blueprint/index.html</a></p>\n<p>for the LaTeX, and I can manufacture this link</p>\n<p><a href=\"https://imperialcollegelondon.github.io/FLT/\">https://imperialcollegelondon.github.io/FLT/</a></p>\n<p>to some home page (which says Fermat's Last Theorems?! How do I fix that? Sometimes there's no s's and now there are two?)</p>\n<p><del>But the \"blueprint\" link at <a href=\"https://imperialcollegelondon.github.io/FLT/\">https://imperialcollegelondon.github.io/FLT/</a> and the link at the top of the README on the github project page don't work for me</del>(fixed by removing a cookie -- thanks Patrick)</p>",
        "id": 436338927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714504988
    },
    {
        "content": "<p>Kevin I wrote you a PM message one hour ago explaining what you need to do.</p>",
        "id": 436339870,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714505373
    },
    {
        "content": "<p>In particular the issue you see won’t be seen by other people, this is purely your navigator trying to be too helpful.</p>",
        "id": 436340028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714505437
    },
    {
        "content": "<p>(The one character fix for <code>Theorems</code> is <a href=\"https://github.com/ImperialCollegeLondon/FLT/pull/26\">https://github.com/ImperialCollegeLondon/FLT/pull/26</a> )</p>",
        "id": 436340365,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714505568
    },
    {
        "content": "<p>Oh! I must have the same cookie issue (I must've clicked it just as it went live, and gotten the old cookie?). Do you have to clear all cookies, or is there another way to do it?</p>",
        "id": 436350080,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1714509521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/dm/110031,110038-dm/near/436340392\">said</a>:</p>\n<blockquote>\n<p>You need to tell your navigator to purge <a href=\"http://github.io\">github.io</a> cookies</p>\n</blockquote>",
        "id": 436351885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714510257
    },
    {
        "content": "<p>Wait, FLT is all green, are you done? :)</p>",
        "id": 436354992,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714511619
    },
    {
        "content": "<p>One suggestion: I think the main theorem should be in <code>FLT.lean</code> i.e. the root file. Currently the root file contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">FLT.Basic.Reductions</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.EllipticCurve.Torsion</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.for_mathlib.Coalgebra.Monoid</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.for_mathlib.Coalgebra.Sweedler</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.for_mathlib.Coalgebra.TensorProduct</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.for_mathlib.HopfAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.GaloisRepresentation.HardlyRamified</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.GroupScheme.FiniteFlat</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.Hard.Results</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.TateCurve.TateCurve</span>\n</code></pre></div>\n<p>and it's not particularly obvious to determine where the main theorem is</p>",
        "id": 436355260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714511743
    },
    {
        "content": "<p>Alternatively, if the project also contains consequences of FLT such that putting it in the last file is awkward, this would be a good use for the <code>recall</code> command</p>",
        "id": 436355395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714511799
    },
    {
        "content": "<p>FLT has no consequences</p>",
        "id": 436364638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714516537
    },
    {
        "content": "<p>other than finishing Freek's list</p>",
        "id": 436364664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714516557
    },
    {
        "content": "<p>it's even in the name... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 436364754,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714516590
    },
    {
        "content": "<p>Someone once jokingly told me a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mroot><mn>2</mn><mi>n</mi></mroot></mrow><annotation encoding=\"application/x-tex\">\\sqrt[n]{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6799em;\"><span style=\"top:-2.9647em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span> is irrational: </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>For <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> the result is standard, and for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">n\\ge3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> we can rewrite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mroot><mn>2</mn><mi>n</mi></mroot><mo>=</mo><mfrac><mi>p</mi><mi>q</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sqrt[n]{2}=\\frac{p}{q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6799em;\"><span style=\"top:-2.9647em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2286em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7475em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>q</mi><mi>n</mi></msup><mo>+</mo><msup><mi>q</mi><mi>n</mi></msup><mo>=</mo><msup><mi>p</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">q^n+q^n=p^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, which has no nontrivial solutions by FLT.</p>\n</div></div>",
        "id": 436365502,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714517007
    },
    {
        "content": "<p>That's the argument Kevin suggested while I was proving FLT3</p>",
        "id": 436366025,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714517349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/436365502\">said</a>:</p>\n<blockquote>\n<p>Someone once jokingly told me a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mroot><mn>2</mn><mi>n</mi></mroot></mrow><annotation encoding=\"application/x-tex\">\\sqrt[n]{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6799em;\"><span style=\"top:-2.9647em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span> is irrational: </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>For <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> the result is standard, and for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">n\\ge3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> we can rewrite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mroot><mn>2</mn><mi>n</mi></mroot><mo>=</mo><mfrac><mi>p</mi><mi>q</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sqrt[n]{2}=\\frac{p}{q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6799em;\"><span style=\"top:-2.9647em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2286em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7475em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>q</mi><mi>n</mi></msup><mo>+</mo><msup><mi>q</mi><mi>n</mi></msup><mo>=</mo><msup><mi>p</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">q^n+q^n=p^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, which has no nontrivial solutions by FLT.</p>\n<p></div></div><br>\n</p>\n</blockquote>\n<p>That's one of the examples in the (famous?) \"overpowered theorems to solve simple problems\" thread on MathExchange or overflow or wherever that thread is, right?</p>",
        "id": 436367587,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714518255
    },
    {
        "content": "<p>Yeah this one -- <a href=\"https://mathoverflow.net/questions/42512/awfully-sophisticated-proof-for-simple-facts\">https://mathoverflow.net/questions/42512/awfully-sophisticated-proof-for-simple-facts</a> -- looks like Kevin is in the comments though not for the FLT one.</p>",
        "id": 436367676,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714518321
    },
    {
        "content": "<p>I've seen that thread before, but rereading it is still amazing.</p>",
        "id": 436374194,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714522647
    },
    {
        "content": "<p>That thread is full of challenges of minimizing unnecessary imports in Mathlib: if we can formalize these crazy proofs without having imported the standard version, we have succeeded with minimizing imports <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 436374299,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714522723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  You can fix the problem with the \"canonical\" isomorphisms by saying there is a canonical Z/2-torsor of \"canonical\" isomorphisms , no? :-)</p>",
        "id": 436376447,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1714524530
    },
    {
        "content": "<p>I haven't read it in depth yet, so I'm a little unclear on the big picture.  Is the modularity lifting theorem (4.1) the part that lets you avoid Ribet's level-lowering?</p>",
        "id": 436381970,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1714529828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/436354992\">said</a>:</p>\n<blockquote>\n<p>Wait, FLT is all green, are you done? :)</p>\n</blockquote>\n<p>For people who actually wonder: this is the difference between green and dark green. What is currently formalized is that FLT follow from other nodes. But those nodes are not all formalized.</p>",
        "id": 436382232,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714530014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/436374299\">said</a>:</p>\n<blockquote>\n<p>That thread is full of challenges of minimizing unnecessary imports in Mathlib: if we can formalize these crazy proofs without having imported the standard version, we have succeeded with minimizing imports <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n</blockquote>\n<p>I didn’t read it again but I saw it in the past and, if I remember correctly, most of the proofs mentioned there are actually circular (or very nearly circular in the sense that a very early lemma using in the big gun proof immediately imply the target).</p>",
        "id": 436382309,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714530091
    },
    {
        "content": "<p>Going back to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's suggestion: I agree that it would be good to make obvious in the main file where the main statement is. Either using <code>recall</code> or via a comment pointing to an optimized-for-uninitiated-consumption Lean file</p>",
        "id": 436447671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714538113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/436382232\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/436354992\">said</a>:</p>\n<blockquote>\n<p>Wait, FLT is all green, are you done? :)</p>\n</blockquote>\n<p>For people who actually wonder: this is the difference between green and dark green. What is currently formalized is that FLT follow from other nodes. But those nodes are not all formalized.</p>\n</blockquote>\n<p>I was about to suggest it needed a legend when I noticed it has one <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 436453008,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714541257
    },
    {
        "content": "<p>Re: <code>FLT.lean</code>. It would be good to have <a href=\"https://github.com/leanprover-community/mathlib4/pull/11853\">#11853</a> merged</p>",
        "id": 436459607,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714546594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"630477\">Scott Carnahan</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/436381970\">said</a>:</p>\n<blockquote>\n<p>I haven't read it in depth yet, so I'm a little unclear on the big picture.  Is the modularity lifting theorem (4.1) the part that lets you avoid Ribet's level-lowering?</p>\n</blockquote>\n<p>Wiles also used a modularity lifting theorem (in fact he invented the idea). Ours is \"better\" but in some sense the reason we can avoid Ribet is just because we go a different way.</p>\n<p>Given a counterexample to FLT you can make this dubious-looking semistable elliptic curve E called the Frey curve, whose p-torsion had conductor 2 (very small). Wiles did: E[3] modular (by hard analysis) =&gt; E modular (by modularity lifting theorem) =&gt; E[p] modular (trivial) =&gt; E[p] modular of level 2 (Ribet) =&gt; contradiction. A bit more precisely, \"E modular\" means \"E comes from a modular form of some random large level\" and there exist plenty of modular forms of random large level so at some point you have to get control of the level to get the contradiction, and this is what Ribet does. The reason the argument goes in this order is that at that time nobody knew what to do with \"E[p] has small conductor\" to get a contradiction, other than \"E[p] is modular\" and then \"Ribet says that if it's modular, it's modular of level = conductor\".</p>\n<p>But now we can do other things with E[p]. For example, after Taylor/Khare-Wintenberger (which relies on a bunch of other stuff including hard analysis and a fancier modularity lifting theorem which works for Hilbert modular forms) we can lift E[p] to some family of ell-adic Galois representations all of which have small conductor, and the observation of Taylor is that we can now specialise this family at 3 and reduce mod 3 to get a mod 3 representation of suspiciously small conductor; Taylor discovered a way to prove that this can't exist, via an explicit numerical calculation which relies on the fact that 3 is small and which wouldn't work at p (which is the p in a^p+b^p=c^p so could be gigantic).</p>",
        "id": 436476510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714557390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/436355260\">said</a>:</p>\n<blockquote>\n<p>One suggestion: I think the main theorem should be in <code>FLT.lean</code> i.e. the root file. Currently the root file contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">FLT.Basic.Reductions</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.EllipticCurve.Torsion</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.for_mathlib.Coalgebra.Monoid</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.for_mathlib.Coalgebra.Sweedler</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.for_mathlib.Coalgebra.TensorProduct</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.for_mathlib.HopfAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.GaloisRepresentation.HardlyRamified</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.GroupScheme.FiniteFlat</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.Hard.Results</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.TateCurve.TateCurve</span>\n</code></pre></div>\n<p>and it's not particularly obvious to determine where the main theorem is</p>\n</blockquote>\n<p>So I don't need a stupid file containing all the names of all the other files? That's great.</p>\n<p>I have <code>FLT_statement.lean</code> which isn't in that list for some reason (I think the list was auto-generated?) but which contains a statement of <code>PNat.pow_add_pow_ne_pow</code> . So you're suggesting I just move this to <code>FLT.lean</code> and dump the stupid file? I want it so that <code>lake build</code> just always builds all the Lean files in <code>FLT/</code>  and the simpler the set-up the better.</p>",
        "id": 437029303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714836244
    },
    {
        "content": "<p>You could just make that FLT_statement file a default target</p>",
        "id": 437029852,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714836785
    },
    {
        "content": "<p>For building all the files in <code>FLT/</code>, you can use globs in the lakefile</p>",
        "id": 437029885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714836840
    },
    {
        "content": "<p>looks like you are already doing that</p>",
        "id": 437029934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714836873
    },
    {
        "content": "<p>PS: once you bump to (a mathlib on) 4.8.0-rc1, you will want to ditch the <code>-DwarningAsError=true</code> line from the lakefile and use <code>--wfail</code> in the lake invocations in CI instead</p>",
        "id": 437030038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714836986
    },
    {
        "content": "<p>...I guess the line isn't being used in the first place</p>",
        "id": 437030072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714837051
    },
    {
        "content": "<p>Question: why is Wiles--Taylor-Wiles called that? I'm pretty sure there aren't two Wiles's in this story...</p>",
        "id": 437030204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714837183
    },
    {
        "content": "<p>It’s work of Wiles together with (joint) work of Taylor-Wiles</p>",
        "id": 437031104,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714838091
    },
    {
        "content": "<p>The story is essentially: Taylor-Wiles repaired a gap in Wiles</p>",
        "id": 437031225,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714838219
    },
    {
        "content": "<p>I would have thought that means the whole work is Taylor-Wiles</p>",
        "id": 437031340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714838322
    },
    {
        "content": "<p>In my experience the way people give attribution in such situations is on a case-by-case basis. Kevin probably knows precisely why it’s the case here</p>",
        "id": 437031424,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714838410
    },
    {
        "content": "<p>The main part of the proof was in an article by Wiles alone, and the final gap was filled in the accompanying article by Taylor and Wiles</p>",
        "id": 437035939,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714842671
    },
    {
        "content": "<p>I don't know the nitty-gritty, but note saying Taylor–Wiles implies in some citation cultures outside pure maths  that Taylor was the lead author. The double attribution draws attention to the two separate but simultaneous papers, while acknowledging that Wiles did the lion's share and was really 'first'</p>",
        "id": 437041876,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1714846861
    },
    {
        "content": "<p>It's not actually clear to me whether Wiles did the \"lion's share\" though. From what I've heard from interviews and such a lot of it was building on earlier work, in particular a result of Ribet's. Wiles's proof was just the \"last part\" in that sense. But I am definitely in no position to make any reasonably accurate estimates of how much of the proof is Wiles's.</p>",
        "id": 437042100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714847088
    },
    {
        "content": "<p>This wiki page has quite a good summary IMO: <a href=\"https://en.m.wikipedia.org/wiki/Wiles%27s_proof_of_Fermat%27s_Last_Theorem\">https://en.m.wikipedia.org/wiki/Wiles%27s_proof_of_Fermat%27s_Last_Theorem</a></p>",
        "id": 437042576,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714847505
    },
    {
        "content": "<blockquote>\n<p>In 2005, Dutch <a href=\"https://en.m.wikipedia.org/wiki/Computer_scientist\">computer scientist</a> <a href=\"https://en.m.wikipedia.org/wiki/Jan_Bergstra\">Jan Bergstra</a> posed the problem of formalizing Wiles's proof in such a way that it could be <a href=\"https://en.m.wikipedia.org/wiki/Automated_proof_checking\">verified by computer</a>.<a href=\"https://en.m.wikipedia.org/wiki/Wiles%27s_proof_of_Fermat%27s_Last_Theorem#cite_note-:3-24\">[24]</a></p>\n</blockquote>\n<p>Looks like that page needs an update :)</p>",
        "id": 437042782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714847670
    },
    {
        "content": "<p>I have heard the general story of FLT before, but the part that this doesn't tell me is how big and hard the theorems actually are. It could be that Ribet's theorem is 1 page and Wiles's is 1000 or vice versa, but due to the nature of history it's the one who does the last part that gets the credit. (I'm not actually saying that I know that this happens in this case, only that the usual way this historical information is presented doesn't make it obvious.) The classification of finite simple groups is even more obviously the joint work of many parties contributing very different page counts to the full proof, if it could all be put in one place. One nice outcome of this FLT project is that it will be easy to see the relative magnitudes of contributions to the FLT, not just Wiles's proof but also its prerequisites. (Although I am aware that the original project description intends to put off those prerequisites until last.)</p>",
        "id": 437043056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714847970
    },
    {
        "content": "<p>Wiles' paper introduced several key new ideas, one of which doesn't quite work, but the single author paper was 100+ pages long. Ribet's paper was about 30 pages long</p>",
        "id": 437043245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714848137
    },
    {
        "content": "<p>Some of the references are certainly more than 100 pages long (eg probably Mazur)</p>",
        "id": 437043272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714848165
    },
    {
        "content": "<p>Do you know the complete list of references which in principle would take us from mathlib to FLT?</p>",
        "id": 437043301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714848200
    },
    {
        "content": "<p>Put another way, do you have a list (or at least a clear sense) of all the sorries you plan to group under \"results known in the 1980's that we won't be formalizing for v1\"</p>",
        "id": 437043484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714848368
    },
    {
        "content": "<p>I would say I know a covering set of references, in the sense that one thing I think I have done is got some kind of (private) 15 page document which I'm slowly moving over to the blueprint and which reduces FLT to results from the 80s, but the referencse also have references. Much of what is needed has been dumped in chapter top but we still can't even state many of these results in Lean. I'm working on a project this weekend which will get us closer to stating one of them though.</p>",
        "id": 437044199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714849103
    },
    {
        "content": "<p>Overheard in Berkeley ~20 years ago: \"If it weren't for my daddy, Andrew Wiles would still be locked in his attic.\"</p>",
        "id": 437054902,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1714859831
    },
    {
        "content": "<p>Ken's kids were 4 and 2 when I was there</p>",
        "id": 437058406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714863599
    },
    {
        "content": "<p>There's also the complication that the formalization planned here relies less on Ribet than the original proof.</p>",
        "id": 437059596,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714864972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/437042100\">said</a>:</p>\n<blockquote>\n<p>It's not actually clear to me whether Wiles did the \"lion's share\" though. </p>\n</blockquote>\n<p>I mean out of the package of work that went from \"publicly-known in 1992\" to the proof of FLT. Clearly, if you want to import all prior results, where do you draw the line? The work of Grothendieck on the 60s? Of Weil in the 40s? Of Hecke in the 20s? Not to mention Ribet, Serre, Langlands, Shimura, Taniyama,.... </p>\n<p>Taylor–Wiles is 20 pages (5 pages of which were an alternate proof supplied by Faltings that simplifies part of the argument), Wiles solo is about 110 pages.</p>",
        "id": 437077143,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1714884502
    },
    {
        "content": "<p>Personally, I prefer to draw the line based on the topic, not the historical tradition. It's still a judgment call how much of the prerequisites are considered part of FLT proper and not some background theory, but one way to get such a line is to see how much ends up in the FLT repo vs upstream</p>",
        "id": 437077367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714884700
    },
    {
        "content": "<p>We just have different denominators for who contributed how much to what :-)</p>",
        "id": 437078749,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1714885862
    },
    {
        "content": "<p>I'm not super confident about using the FLT vs upstream divide... Actually, has anyone (<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>?) even ball park estimated the LoC of a complete proof relative to where we are now? I'm guessing it is a 10^6 number (i.e. another Mathlib), not a 10^5 number.</p>",
        "id": 437089015,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714894959
    },
    {
        "content": "<p>Isn't mathlib a 10^7 number?</p>",
        "id": 437091964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714897563
    },
    {
        "content": "<p>Do you count #align? :)</p>",
        "id": 437092556,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714898111
    },
    {
        "content": "<p>I have not attempted to estimate LOC. I've attempted to estimate number of pages and maybe 2000 is a ballpark estimate but as we saw in LTE five lines can take anything between five minutes and one year</p>",
        "id": 437097236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714902174
    },
    {
        "content": "<p>I meant that Mathlib is about 1.5 * 10^6 LoC, and I wouldn't be surprised if FLT will require another 10^6.</p>",
        "id": 437098785,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714903769
    },
    {
        "content": "<p>A full proof of FLT might be another 10^6, but it's not clear to me that the majority of these 10^6 will pass through the FLT repo. My vision (and I don't think I'm being over-optimistic here) is that within a few years FLT contains most of (and mathlib contains the rest of) a proof of an R=T theorem and a proof of FLT using it, modulo a bunch of huge concrete sorries (with no data sorried) of the form \"well we need this result which says that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">E/\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathbb\">Q</span></span></span></span> is an elliptic curve then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Q</mi><msup><mo stretchy=\"false\">)</mo><mrow><mi>t</mi><mi>o</mi><mi>r</mi><mi>s</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">E(\\mathbb{Q})^{tors}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0436em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Q</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">ors</span></span></span></span></span></span></span></span></span></span></span></span> has size at most 16 but this is 100 pages and there's no reason for development of this theorem to be in the FLT repo\".</p>",
        "id": 437103051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714907825
    },
    {
        "content": "<p>In the blueprint (section 7.6), it seems that étale cohomology is part of the proof <a href=\"https://imperialcollegelondon.github.io/FLT/blueprint/ch_bestiary.html#a0000000033\">https://imperialcollegelondon.github.io/FLT/blueprint/ch_bestiary.html#a0000000033</a> (i.e. the Galois representations that are involved are not just Tate modules of abelian varieties), as at least some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">H^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> appears. Then, the part of the general étale formalism which is needed should probably develop in mathlib rather than in the FLT repository, unless some important general étale theorems are sorried (these are 1960s mathematics...), in which case the consequences of these would have to be in the FLT repository.</p>",
        "id": 437127055,
        "sender_full_name": "Joël Riou",
        "timestamp": 1714920927
    },
    {
        "content": "<p>I wonder whether the original proof of FLT could have got away with just Tate modules of Jacobians. But the proof I'm formalising will necessarily need to consider the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">ℓ</mi></mrow><annotation encoding=\"application/x-tex\">\\ell</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">ℓ</span></span></span></span>-adic etale $H^2$ of a smooth proper surface over a global field (with constant coefficients). So yes we need etale cohomology, you're right.</p>",
        "id": 437141305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714924711
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/FLT/pull/53\">FLT#53</a></p>",
        "id": 437141887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714925094
    },
    {
        "content": "<p>Do you care if ell-adic cohomology of <code>X : Scheme.{0}</code> has universe level 1?</p>",
        "id": 437142020,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714925185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/436355260\">said</a>:</p>\n<blockquote>\n<p>One suggestion: I think the main theorem should be in <code>FLT.lean</code> i.e. the root file. Currently the root file contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">FLT.Basic.Reductions</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.EllipticCurve.Torsion</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.for_mathlib.Coalgebra.Monoid</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.for_mathlib.Coalgebra.Sweedler</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.for_mathlib.Coalgebra.TensorProduct</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.for_mathlib.HopfAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.GaloisRepresentation.HardlyRamified</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.GroupScheme.FiniteFlat</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.Hard.Results</span>\n<span class=\"kn\">import</span> <span class=\"n\">FLT.TateCurve.TateCurve</span>\n</code></pre></div>\n<p>and it's not particularly obvious to determine where the main theorem is</p>\n</blockquote>\n<p>I've now tried this and according to my experiments it broke <code>leanblueprint</code>, which now doesn't know which Lean files to import to find the declarations I mention in the LaTeX. How should I fix this? Right now I have a hack in line 1 of <code>FLT.lean</code>. I would love to rid my repo of the \"list of everything\" file and have <code>lake build</code> just mean \"build <code>FLT.lean</code> and all the files in <code>FLT/</code>\"</p>",
        "id": 437142223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714925331
    },
    {
        "content": "<p>There should not be any FLT files not transitively reachable from the root, for basic \"no dead code\" reasons</p>",
        "id": 437142287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714925396
    },
    {
        "content": "<p>you don't need the FLT file to actually be a list of everything for this to be true</p>",
        "id": 437142354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714925413
    },
    {
        "content": "<p>The blueprint itself is presumably a connected DAG with FLT as the terminal node, so just make sure the imports reflect that structure</p>",
        "id": 437142400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714925459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/437030038\">said</a>:</p>\n<blockquote>\n<p>PS: once you bump to (a mathlib on) 4.8.0-rc1, you will want to ditch the <code>-DwarningAsError=true</code> line from the lakefile and use <code>--wfail</code> in the lake invocations in CI instead</p>\n</blockquote>\n<p>I have been putting off bumping because people were saying that the cache wasn't working and there was talk of there going to be an rc2 etc etc, so I didn't know when it was safe to bump.</p>",
        "id": 437142409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714925466
    },
    {
        "content": "<p>That's fair, I agree it's a bit unstable</p>",
        "id": 437142426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714925495
    },
    {
        "content": "<p>(it is a double feature release after all)</p>",
        "id": 437142485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714925517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/437142020\">said</a>:</p>\n<blockquote>\n<p>Do you care if ell-adic cohomology of <code>X : Scheme.{0}</code> has universe level 1?</p>\n</blockquote>\n<p>Nice question! The scheme <code>X</code> is smooth and proper over a number field <code>K</code> which we can assume to be in <code>Type</code> (it would certainly have to work with input <code>Rat : Type</code>) and in maths I can prove that the ell-adic H^2(X/K,Q_ell) is a finite-dimensional continuous Galois rep. Is this enough to descend? I think it is, the proof of finite-dimensionality gives me (noncomputably) a basis over Q_ell (in Type) indexed by <code>Fin N</code>(in Type) and then the rep is uniquely encoded by the resulting function from Gal(K-bar/K) (in Type) to square matrices over Q_ell indexed by Fin N (in Type). So can read off that information, reconstruct the Galois rep and then even prove that the lift back up to Type 1 will be isomorphic to the answer you gave me.</p>",
        "id": 437143059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714925992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/437142400\">said</a>:</p>\n<blockquote>\n<p>The blueprint itself is presumably a connected DAG with FLT as the terminal node, so just make sure the imports reflect that structure</p>\n</blockquote>\n<p>I definitely don't want to assume my blueprint is connected or that my code is connected. Right now I am working on an example of an automorphic form because I thought it would be cool to construct a nontrivial one. We definitely don't need this example for FLT!</p>",
        "id": 437143739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714926390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/437143739\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/437142400\">said</a>:</p>\n<blockquote>\n<p>The blueprint itself is presumably a connected DAG with FLT as the terminal node, so just make sure the imports reflect that structure</p>\n</blockquote>\n<p>I definitely don't want to assume my blueprint is connected or that my code is connected. Right now I am working on an example of an automorphic form because I thought it would be cool to construct a nontrivial one. We definitely don't need this example for FLT!</p>\n</blockquote>\n<p>We have non-trivial modular forms, so done! :p</p>",
        "id": 437144289,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1714926692
    },
    {
        "content": "<p>I can look at bumping mathlib later</p>",
        "id": 437145477,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714927426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/437142020\">said</a>:</p>\n<blockquote>\n<p>Do you care if ell-adic cohomology of <code>X : Scheme.{0}</code> has universe level 1?</p>\n</blockquote>\n<p>Depending on how exactly we proceed and how many theorems we are able to prove at a given time, it may even be in <code>Type 2</code> if we make no particular effort! One universe bump is because the étale site of <code>X : Scheme.{0}</code> is a large category (a possible fix at least for noetherian <code>X</code> is to replace the étale site with a small one with equivalent categories of sheaves, so that we may consider categories of sheaves of <code>AddCommGroupCat.{0}</code> instead of <code>AddCommGroupCat.{1}</code> which would otherwise be necessary to get a sheafification functor). The second universe bump is because the category of étale sheave with values in <code>AddCommGroupCat.{1}</code> has a type of objects in <code>Type 2</code>, and then <code>Ext</code>-groups of sheaves (resp. <code>Hom</code>s in the derived category) are going to be in <code>Type 2</code> until we show there exists injective (resp. <code>K</code>-injective) resolutions.</p>\n<p>In any case, we may shrink to <code>Type 0</code> afterwards because of finiteness theorems as Kevin said. Let us not focus on this now!</p>",
        "id": 437148402,
        "sender_full_name": "Joël Riou",
        "timestamp": 1714929681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/437143739\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/437142400\">said</a>:</p>\n<blockquote>\n<p>The blueprint itself is presumably a connected DAG with FLT as the terminal node, so just make sure the imports reflect that structure</p>\n</blockquote>\n<p>I definitely don't want to assume my blueprint is connected or that my code is connected. Right now I am working on an example of an automorphic form because I thought it would be cool to construct a nontrivial one. We definitely don't need this example for FLT!</p>\n</blockquote>\n<p>From the sounds of things, although lake will compile all files due to the glob, the blueprint will only consider definitions to exist if they are reachable from the main file. So if you want to have a definition that shows up in the blueprint, it should be in a file which is imported by something, either the main file or some file which you think will need to eventually reference it.</p>",
        "id": 437149375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714930428
    },
    {
        "content": "<p>So Leanblueprint will only use FLT.lean and what it imports, so if I am working on an example which will not be logically necessary for the proof but might be instructional for the reader then I can't document it without adding an artificial import somewhere. I thought <code>FLT.lean</code> looked quite good with only one import. Should I put it in the file it imports or something?</p>",
        "id": 437149620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714930571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> do you have any comments?</p>",
        "id": 437149660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714930590
    },
    {
        "content": "<p>yes, the fallback would be to put the import in the FLT.lean file but I can see that this might be untidy. Maybe something can be done on the leanblueprint side, I'm not sure how it is configured</p>",
        "id": 437149802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714930694
    },
    {
        "content": "<p>Another possibility would have another <code>lean_lib</code> like <code>FLTExtras</code> which imports <code>FLT</code> and also random assorted other files, and which is used as the root for leanblueprint purposes</p>",
        "id": 437149916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714930813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/437149375\">said</a>:</p>\n<blockquote>\n<p>the blueprint will only consider definitions to exist if they are reachable from the main file. So if you want to have a definition that shows up in the blueprint, it should be in a file which is imported by something, either the main file or some file which you think will need to eventually reference it.</p>\n</blockquote>\n<p>Yes, this is correct. It seems reasonable to me. I don’t really see another way this should work, but I am open to suggestions.</p>",
        "id": 437265318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715003076
    },
    {
        "content": "<p>The alternative would be to get leanblueprint to also use a glob import</p>",
        "id": 437320567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715022030
    },
    {
        "content": "<p>It currently uses you code (tweaked by Mac to work on 4.8.0) at <a href=\"https://github.com/PatrickMassot/checkdecls/blob/master/Main.lean\">https://github.com/PatrickMassot/checkdecls/blob/master/Main.lean</a>.</p>",
        "id": 437321958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715022561
    },
    {
        "content": "<p>oh lovely, it's already using the lake API, so it shouldn't be hard to make it use the globs</p>",
        "id": 437322100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715022611
    },
    {
        "content": "<p>Late to the previous discussion but here’s a free (after registering) <a href=\"https://www.nytimes.com/1995/01/31/science/how-a-gap-in-the-fermat-proof-was-bridged.html?unlocked_article_code=1.pk0.EMkz.3bZZa2AZ6Byh&amp;smid=url-share\">1995 NYT article</a> about the state of FLT</p>",
        "id": 437328699,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715025426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"630477\">Scott Carnahan</span> <a href=\"#narrow/stream/416277-FLT/topic/Project.20public/near/437054902\">said</a>:</p>\n<blockquote>\n<p>Overheard in Berkeley ~20 years ago: \"If it weren't for my daddy, Andrew Wiles would still be locked in his attic.\"</p>\n</blockquote>\n<p>Speaking of stories from school, I was once told that Wiles was asked during a TV interview what the biggest challenge to proving FLT's theorem was. The \"claim\" was that his response was to hold up a picture of a faculty member from my undergraduate institution.</p>",
        "id": 437328961,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715025532
    },
    {
        "content": "<p>I am sure it wasn't true but what did I know as &lt; 20 year old.</p>",
        "id": 437329031,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715025566
    }
]