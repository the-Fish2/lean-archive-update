[
    {
        "content": "<p>The global Langlands conjectures start \"let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> be a connected reductive group over a global field\". But already the global Langlands conjectures are very deep and interesting in the special case where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>=</mo><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">G = GL_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and the global field is the rational numbers. The following challenge question has come up in Bonn: to formalise the definition of automorphic forms for this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>.</p>\n<p>I asked Patrick if we knew that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GL_n(\\R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span> was a Lie group and he said it was in mathlib. I looked, and what we actually have is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Geometry</span><span class=\"bp\">.</span><span class=\"n\">Manifold</span><span class=\"bp\">.</span><span class=\"n\">Instances</span><span class=\"bp\">.</span><span class=\"n\">UnitsOfNormedAlgebra</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Manifold</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">NormedSpace</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CompleteSpace</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">LieGroup</span><span class=\"w\"> </span><span class=\"n\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚Ñù</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"w\"> </span><span class=\"c1\">-- Units.instLieGroupModelWithCornersSelf</span>\n</code></pre></div>\n<p>This is not good enough for my application, because even though <code>Fin n ‚Üí ‚Ñù</code> satisfies all these typeclass criteria, the conclusion is about continuous linear maps and we want all linear maps, and furthermore the actual vector space we'll get is of the form <code>V ‚äó[‚Ñö] ‚Ñù</code> with <code>V</code> a finite-dimensional vector space over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>.</p>\n<p>So if I want to prove the global Langlands conjectures for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">GL(0)/\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathbb\">Q</span></span></span></span> I need to make one of the following things into a Lie group: The \"concrete approach\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Geometry</span><span class=\"bp\">.</span><span class=\"n\">Manifold</span><span class=\"bp\">.</span><span class=\"n\">Instances</span><span class=\"bp\">.</span><span class=\"n\">UnitsOfNormedAlgebra</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">LinearAlgebra</span><span class=\"bp\">.</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">GeneralLinearGroup</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Manifold</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñï</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">LieGroup</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">GeneralLinearGroup</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- need a local model?</span>\n</code></pre></div>\n<p>or the \"abstract approach\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Geometry</span><span class=\"bp\">.</span><span class=\"n\">Manifold</span><span class=\"bp\">.</span><span class=\"n\">Instances</span><span class=\"bp\">.</span><span class=\"n\">UnitsOfNormedAlgebra</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">‚Ñö</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span><span class=\"w\"> </span><span class=\"n\">‚Ñö</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">TensorProduct</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">LieGroup</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">‚Ñù</span><span class=\"w\"> </span><span class=\"bp\">‚äó</span><span class=\"o\">[</span><span class=\"n\">‚Ñö</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">‚âÉ‚Çó</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"w\"> </span><span class=\"bp\">‚äó</span><span class=\"o\">[</span><span class=\"n\">‚Ñö</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Right now it's difficult to go too much further because I don't know which model of GL_n I'm using. Which of these is easiest to put a Lie group structure on?</p>",
        "id": 443983292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718107206
    },
    {
        "content": "<p>A Lie group needs a topology. So your first question should be: on which of these spaces can I put a natural topology (and it's related to your question in the other thread). My answer would be the same as Patrick: if you want a topology, then obviously you're working from the start with continuous linear maps, although it's not written explicitly anywhere since we're in a setting where all linear maps are continuous.</p>",
        "id": 443985288,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1718107798
    },
    {
        "content": "<p>We have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">LinearAlgebra</span><span class=\"bp\">.</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">GeneralLinearGroup</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Geometry</span><span class=\"bp\">.</span><span class=\"n\">Manifold</span><span class=\"bp\">.</span><span class=\"n\">Instances</span><span class=\"bp\">.</span><span class=\"n\">UnitsOfNormedAlgebra</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñï</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">TopologicalGroup</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">GeneralLinearGroup</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so one could ask for a Lie group structure on this (and as far as I know we don't have it, and I don't know how to start making it). </p>\n<p>This doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Geometry</span><span class=\"bp\">.</span><span class=\"n\">Manifold</span><span class=\"bp\">.</span><span class=\"n\">Instances</span><span class=\"bp\">.</span><span class=\"n\">UnitsOfNormedAlgebra</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">TopologicalSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">‚âÉ‚Çó</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Do we want this instance in mathlib? My \"module topology\" would put a topological ring structure on <code>V ‚Üí‚Çó[‚Ñù] V</code>and hence a topological group structure on the units.</p>",
        "id": 443997996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718112076
    },
    {
        "content": "<p>I think we don't want any instance which builds topology on a general (even finite dimensional) vector space from purely algebraic data.</p>",
        "id": 443999112,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1718112450
    },
    {
        "content": "<p>The instance of <code>Matrix.GeneralLinearGroup (Fin n) ‚Ñù</code> is fine because it is very specific (like the instance on <code>Fin n \\to ‚Ñù</code>), but <code>V ‚âÉ‚Çó[‚Ñù] V</code> sounds too general to have an instance on it : surely if <code>V</code> has a weird topology (e.g non Hausdorff !) you don't want the topology on <code>V ‚âÉ‚Çó[‚Ñù] V</code> to be the same.</p>",
        "id": 443999711,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1718112633
    },
    {
        "content": "<p>Well okay if <code>V</code> has a weird topology you wouldn't want to consider <code>V ‚âÉ‚Çó[‚Ñù] V</code> anyways...</p>",
        "id": 444000641,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1718112902
    },
    {
        "content": "<p>Indeed, there is no harm in doing this on concrete matrix groups. For instance, I would be happy with</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñï</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Manifold</span>\n\n<span class=\"c1\">-- next line needed to turn matrix spaces into normed space, to use them as model spaces</span>\n<span class=\"kn\">attribute</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"kn\">local</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">linftyOpNormedAddCommGroup</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">linftyOpNormedSpace</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">LieGroup</span><span class=\"w\"> </span><span class=\"n\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚Ñù</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">GeneralLinearGroup</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(For now, it doesn't work, but it shouldn't be hard to copy the implementation of <code>Units.instLieGroupModelWithCornersSelf</code>)</p>",
        "id": 444000659,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1718112905
    },
    {
        "content": "<p>In fact we already have it, it's just a matter of activating the right instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñï</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Manifold</span>\n\n<span class=\"kn\">attribute</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"kn\">local</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">linftyOpNormedAddCommGroup</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">linftyOpNormedSpace</span>\n<span class=\"w\">  </span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">linftyOpNormedRing</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">linftyOpNormedAlgebra</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">LieGroup</span><span class=\"w\"> </span><span class=\"n\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚Ñù</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">GeneralLinearGroup</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 444002687,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1718113375
    },
    {
        "content": "<p>Oh that's great! I'm so glad it's that easy.</p>",
        "id": 444048544,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1718123480
    },
    {
        "content": "<p>It's probably time to put those instances in a scope. I'm glad they turned out to be useful!</p>",
        "id": 444586636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718325065
    },
    {
        "content": "<p>Well, that means choosing the norm on matrices right? I‚Äôm all for it, but wasn‚Äôt this controversial?</p>",
        "id": 444654381,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1718355984
    },
    {
        "content": "<p>No, Eric means making them <code>scoped</code>, as opposed to just definitions as they are right now. He is not suggesting making them globally instances</p>",
        "id": 444655396,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1718356346
    },
    {
        "content": "<p>Can I temporarily put a norm on matrices, get the Lie group structure, and then forget the norm? The definition of a differentiable map and of its derivative should be independent of the norm, right?</p>",
        "id": 444666545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718360044
    },
    {
        "content": "<p>Currently no, but yes we all agree that the derivative shouldn't depend on the norm and that we should fix this</p>",
        "id": 444666739,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1718360094
    },
    {
        "content": "<p>For Lie groups, you need C^\\infty maps or, better, analytic maps, as C^\\infty will not be enough to get symmetry of the second derivative unless you're over the reals or the complexes. I don't think it really makes sense to define analytic maps if you don't have a norm (although, of course, they only depend on the norm up to norm equivalence, but in practice it's so much more comfortable to work with a norm than with an equivalence class of norms). So my advice would rather be: put all the matrix norm instances inside a scope, say <code>MatrixLInftyNorm</code> or whatever, and then <code>open MatrixLInftyNorm</code> at the beginning of the files in which you want to use the Lie group structure on matrices.</p>",
        "id": 444667760,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1718360410
    },
    {
        "content": "<p>And while you're there, add <code>Matrix.FrobeniusNorm</code> and <code>Matrix.ElementwiseNorm</code> scopes</p>",
        "id": 444668333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718360624
    },
    {
        "content": "<p>Presumably we could be talking about bornology wherever we are tempted to invoke (equivalence classes) of norms? Isn't that the plan to make derivatives independent of the norm?</p>",
        "id": 444882584,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1718469846
    },
    {
        "content": "<p>Making derivatives independent of the norm is easy, you just need a notion of limit (with some kind of uniformity). Making analytic functions independent of a norm is another kind of business.</p>",
        "id": 444897929,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1718478420
    }
]