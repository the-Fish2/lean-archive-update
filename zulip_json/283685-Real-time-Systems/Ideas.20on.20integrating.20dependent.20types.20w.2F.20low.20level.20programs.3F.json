[
    {
        "content": "<p>Looking for some ideas on using enhanced types with something like lean to model desirable properties relevant in lower level programming and embedded programming. Things like thread and memory safety a la rust but with perhaps a more comprehensive or modifiable design. Maybe encoding safe references as types. Or functions that take in a heap allocator that ensures all allocated memory is deallocated at some point. Threads with an ID attached to them and that no memory can be read and written by two different threads simultaneously.</p>",
        "id": 443052456,
        "sender_full_name": "Jason Qin",
        "timestamp": 1717678593
    },
    {
        "content": "<p>Are cache coherence protocols your cup of tea? Since you say \"like Lean\", there's the following : <a href=\"http://adam.chlipala.net/papers/HemiolaCAV22/\">http://adam.chlipala.net/papers/HemiolaCAV22/</a></p>",
        "id": 443113492,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1717693528
    },
    {
        "content": "<p>FCSL has done low-level concurrency in Coq for some time: <a href=\"https://software.imdea.org/fcsl/\">https://software.imdea.org/fcsl/</a></p>",
        "id": 443241797,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1717749486
    }
]