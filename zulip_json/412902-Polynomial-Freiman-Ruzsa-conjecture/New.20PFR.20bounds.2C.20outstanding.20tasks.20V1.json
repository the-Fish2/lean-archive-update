[
    {
        "content": "<p>The third phase of the PFR project is now ready to begin.  I have created a blueprint section to prove the PFR conjecture for general torsion, chopping it up into 46 definitions, lemmas, and theorems; see <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html\">https://teorth.github.io/pfr/blueprint/sect0012.html</a> .  Later on Jyun-Jie Liao and I will also work to set up a similar blueprint for his refinement of the 2-torsion PFR exponent from 11 to 9.</p>\n<p>Right now, only a small portion of the general torsion argument is ready to farm out to volunteers, but this should be enough to get started for now:</p>\n<ol>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#data-process-unc-one\">One-sided unconditional data processing inequality</a>.  This should be an easy application of existing entropy inequalities. <strong>Proven by Lorenzo Luccioli and Pietro Monticone</strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#data-process-unc\">Unconditional data processing inequality</a> This should follow quickly from two applications of <a href=\"https://github.com/leanprover-community/mathlib4/pull/1\">#1</a>. <strong>Proven by Lorenzo Luccioli and Pietro Monticone</strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#data-process\">Data processing inequality</a> This should follow from <a href=\"https://github.com/leanprover-community/mathlib4/pull/2\">#2</a> and a standard \"Conditioning\" argument that also appears already in many previous components of the PFR project. <strong>Completed by Paul Lezeau</strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#sign-flip\">Flipping a sign</a>  This is a Ruzsa distance inequality similar in nature to others already in PFR, such as the Ruzsa triangle inequality.  It is moderately tricky, but should be doable. . <strong>Completed by Lorenzo Luccioli and Pietro Monticone</strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#klm-1\">Kaimonovich–Vershik–Madiman inequality</a>  This should follow by induction from <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#kv\">this previous inequality</a>, but there may be an issue manipulating <code>iIndepFun</code>.  <strong>Established by Lorenzo Luccioli and Pietro Monticone, conditional on <a href=\"https://github.com/leanprover-community/mathlib4/pull/17\">#17</a></strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#klm-2\">Kaimonovich–Vershik–Madiman inequality, II</a> A corollary to <a href=\"https://github.com/leanprover-community/mathlib4/pull/5\">#5</a> and other existing Ruzsa inequalities; again, the <code>iIndepFun</code> API may be the trickiest component. <strong>Claimed by Lorenzo Luccioli and Pietro Monticone, conditional on <a href=\"https://github.com/leanprover-community/mathlib4/pull/17\">#17</a></strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#klm-3\">Kaimonovich–Vershik–Madiman inequality, III</a> Also follows from existing Ruzsa inequalities (though it does not directly use <a href=\"https://github.com/leanprover-community/mathlib4/pull/5\">#5</a> or <a href=\"https://github.com/leanprover-community/mathlib4/pull/6\">#6</a>).  Again, I anticipate <code>iIndepFun</code> API to be the most significant issue.</li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#sum-dilate-I\">Sums of dilates, I</a> Should be a straightforward application of existing Ruzsa distance inequalities. <strong>Completed by Lorenzo Luccioli and Pietro Monticone</strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#sum-dilate-II\">Sums of dilates, II</a> This should be a straightforward consequence of <a href=\"https://github.com/leanprover-community/mathlib4/pull/8\">#8</a> and induction. <strong>Completed by Lorenzo Luccioli and Pietro Monticone</strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#compare-sums\">Comparing sums</a>  Should be a straightforward consequence of <a href=\"https://github.com/leanprover-community/mathlib4/pull/6\">#6</a>, existing entropy facts, and the finite sum API. <strong>Claimed by Paul Lezeau</strong></li>\n<li>Modify <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=ProbabilityTheory.condIndep_copies#doc\">pfr#ProbabilityTheory.condIndep_copies</a> so that the hypothesis <code>[Fintype β]</code> is relaxed to <code>[FiniteRange Y]</code>.  This will allow many of the tools developed here to extend to infinite groups <code>G</code>. <strong>Completed by Lorenzo Luccioli and Pietro Monticone</strong></li>\n<li>Defining <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-def\">Multidistance</a> Should be straightforward after invoking <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=ProbabilityTheory.independent_copies%27#doc\">pfr#ProbabilityTheory.independent_copies'</a>.</li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-copy\">Multidistance of copy</a> Should be routine once <a href=\"https://github.com/leanprover-community/mathlib4/pull/12\">#12</a> is formalized.</li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-indep\">Multidistance of independent variables</a> Should be routine once <a href=\"https://github.com/leanprover-community/mathlib4/pull/12\">#12</a> is formalized.</li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-nonneg\">Nonnegativity</a> Should follow quickly from <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=max_entropy_le_entropy_add#doc\">pfr#max_entropy_le_entropy_add</a>, once <a href=\"https://github.com/leanprover-community/mathlib4/pull/12\">#12</a> is done.</li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-perm\">Relabeling</a> Should follow easily from <code>Finset.sum</code> API once <a href=\"https://github.com/leanprover-community/mathlib4/pull/12\">#12</a> is done.</li>\n<li><a href=\"https://github.com/LorenzoLuccioli/PFR/blob/4a7d354b1bd9153a3f9d21e42508cc5d600da2a5/PFR/Mathlib/Probability/Independence/Kernel.lean#L42-L49\">iIndepFun.finsets</a>  New API for independence that is needed for <a href=\"https://github.com/leanprover-community/mathlib4/pull/5\">#5</a> and will likely also be useful elsewhere in the project.</li>\n</ol>\n<p>That's maybe enough for now.  I am envisioning a much more leisurely pace for this project than the three-week sprint we did for the m=2 case of PFR, but depending on how many volunteers we get, we may end up moving faster than I currently anticipate.</p>\n<p>This thread has been rolled over to <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.202.2E0\">https://leanprover.zulipchat.com/#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.202.2E0</a></p>",
        "id": 438215349,
        "sender_full_name": "Terence Tao",
        "timestamp": 1715551423
    },
    {
        "content": "<p>My exams end on the 11th of June. So expect the project to be done on the 12th <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 438215442,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715551506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"556875\">@Pietro Monticone</span> and I opened a <a href=\"https://github.com/teorth/pfr/pull/189\">PR</a>, proving <code>mutual_comp_le</code>.  We had to add a few hypothesis to make the needed lemmas work.</p>",
        "id": 438461591,
        "sender_full_name": "Lorenzo Luccioli",
        "timestamp": 1715639620
    },
    {
        "content": "<p>And <a href=\"https://github.com/teorth/pfr/pull/190\">PFR#190</a> proving <code>mutual_comp_comp_le</code> (2).</p>",
        "id": 438466579,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1715641894
    },
    {
        "content": "<p>Could I claim the task (3)?</p>",
        "id": 438527041,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1715675665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> and I would like to claim task (4) if it's ok.</p>",
        "id": 438642588,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1715715800
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/teorth/pfr/pull/191\">PFR#191</a> removing an unnecessary hypothesis from the two lemmas we proved in the previous PRs.</p>",
        "id": 438653554,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1715719619
    },
    {
        "content": "<p>We have just opened a <a href=\"https://github.com/teorth/pfr/pull/192\">draft</a> including a first step of the proof of <code>rdist_of_neg_le</code> and the necessary lemma <code>ProbabilityTheory.IdentDistrib.inv</code> that should probably be ported to Mathlib (see our recent PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/12918\">#12918</a>).</p>\n<p>We will work on these again in the next few days.</p>",
        "id": 438667175,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1715724352
    },
    {
        "content": "<p>We have opened a <a href=\"https://github.com/teorth/pfr/pull/202\">PR</a> adding the proof of <code>ent_of_sub_smul</code>, which corresponds to the first part of task <strong>(8)</strong>.</p>\n<p>We claim the second part (i.e. <code>ent_of_sub_smul'</code>).</p>",
        "id": 439454301,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716140424
    },
    {
        "content": "<p>Opened a <a href=\"https://github.com/teorth/pfr/pull/204\">PR</a> adding the proof of <code>ent_of_sub_smul'</code> (8.2).</p>",
        "id": 439463982,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716149893
    },
    {
        "content": "<p>We have finished the proof of <code>rdist_of_neg_le</code> (task 4). Here is the associated <a href=\"https://github.com/teorth/pfr/pull/192/\">PR</a> which is finally ready for review.</p>",
        "id": 440180161,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716410742
    },
    {
        "content": "<p>Wow, that was quite an amount of work - didn't anticipate that the manipulation of conditionally independent variables etc. would be so unwieldy!  There are perhaps some minor golfing opportunities (e.g., I assume many of the <code>by exact</code> tactics can simply be deleted, and many of the measurability properties could presumably be resolved by <code>measurability</code>/<code>fun_prop</code> at the expense of increased heartbeats), but the important thing is that it is done.</p>",
        "id": 440187012,
        "sender_full_name": "Terence Tao",
        "timestamp": 1716413314
    },
    {
        "content": "<p>We tried to avoid using those <code>by exact</code>s, but the ones that we left throw errors (e.g. type mismatches). Anyone knows how to solve these? <a href=\"https://github.com/teorth/pfr/blob/4b9103d30bb13b2944c11b78e7ab2b20539c1b91/PFR/MoreRuzsaDist.lean#L116\">Here</a> is an example.  </p>\n<p>We avoided the use of <code>measurability</code> in some places in order to make the proof significantly faster.</p>",
        "id": 440188643,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716413981
    },
    {
        "content": "<p>Did you try using a smiley?</p>",
        "id": 440194024,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716416299
    },
    {
        "content": "<p>I mean <code>have mX'₁ : Measurable X'₁ := ((measurable_discrete fun x ↦ x.1).comp hXY'₁ :)</code></p>",
        "id": 440194082,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716416331
    },
    {
        "content": "<p>Thank you very much, it works!</p>",
        "id": 440194336,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716416440
    },
    {
        "content": "<p>I know it looks super esoteric, I’m sorry.</p>",
        "id": 440195068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716416774
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/teorth/pfr/pull/207\">PR</a> golfing accordingly.  Thanks again.</p>",
        "id": 440195081,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716416779
    },
    {
        "content": "<p>Huh, that's a cute syntax.  Is it asking Lean to cast the expression before the colon to the type that is being asked?  But then why doesn't this happen automatically?</p>",
        "id": 440197680,
        "sender_full_name": "Terence Tao",
        "timestamp": 1716417883
    },
    {
        "content": "<p>The syntax <code>(e :)</code> means to elaborate <code>e</code> without expected type, and then assert that the result has whatever type it's supposed to be afterward. It's equivalent to <code>by have := e; exact this</code>, and it makes a difference sometimes because elaboration usually proceeds \"backwards\" treating the expected type as a goal and using that to fill variables, but sometimes you want to work \"forwards\" in term mode (just working out what you get with the inputs provided) and this is the term mode way to do it.</p>",
        "id": 440198956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716418443
    },
    {
        "content": "<p>I wonder how far off we are from having an AI copilot that can autocorrect nearly-working code such as <code>have mX'₁ : Measurable X'₁ := (measurable_discrete fun x ↦ x.1).comp hXY'₁</code> into working code without having to know all these little tricks.</p>",
        "id": 440204106,
        "sender_full_name": "Terence Tao",
        "timestamp": 1716420540
    },
    {
        "content": "<p>Actually, I just tried Github Copilot.  If you explicitly show it how to convert the first line, it will figure out the rest.</p>\n<p><a href=\"/user_uploads/3121/f8L-W795-aPLw7kdHIwDBh-x/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/f8L-W795-aPLw7kdHIwDBh-x/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/f8L-W795-aPLw7kdHIwDBh-x/image.png\"></a></div><p>In fact, even without giving it the first line, it made the nearly-correct guess:</p>\n<p><a href=\"/user_uploads/3121/oh_25bUzUugc0vttGzkDhePx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/oh_25bUzUugc0vttGzkDhePx/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/oh_25bUzUugc0vttGzkDhePx/image.png\"></a></div>",
        "id": 440204982,
        "sender_full_name": "Terence Tao",
        "timestamp": 1716420944
    },
    {
        "content": "<p>re: <code>measurability</code>,</p>\n<p>As someone who's often expanded <code>measurability?</code> due to speed, I found that <code>fun_prop</code> solved that issue for me and it is my first choice over <code>measurability</code>/<code>continuity</code> now. Since it's still early days for the <code>fun_prop</code> tactic, it occasionally needs to be helped along by turning on trace and adding <code>@[fun_prop]</code> to any lemma that it doesn't find (it can be done locally with <code>attribute [fun_prop] the_lemma</code> to avoid waiting on an upstream PR) or <code>(disch := ...)</code> for hairier things</p>",
        "id": 440246640,
        "sender_full_name": "llllvvuu",
        "timestamp": 1716438703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> and I would like to claim task 9.</p>",
        "id": 440393258,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716495950
    },
    {
        "content": "<p>We have finished the proof of <code>ent_of_sub_smul_le</code> (task 9) and opened the related <a href=\"https://github.com/teorth/pfr/pull/208\">PR</a>.</p>",
        "id": 440739671,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716757017
    },
    {
        "content": "<p>@Lorenzo Luccioli and I would like to claim task 11. <a href=\"https://github.com/teorth/pfr/pull/209\">Here</a> you can find the related draft we are working on.</p>",
        "id": 441109693,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716927950
    },
    {
        "content": "<p><a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/New.20PFR.20bounds.2C.20outstanding.20tasks.20V1/near/441109693\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"412902\" href=\"/#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Mathlib.20bump\">#Polynomial Freiman-Ruzsa conjecture &gt; Mathlib bump</a> by <span class=\"user-mention silent\" data-user-id=\"556875\">Pietro Monticone</span>.</p>",
        "id": 441110204,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716928185
    },
    {
        "content": "<p>We have just completed task 11 and opened the related <a href=\"https://github.com/teorth/pfr/pull/209\">PR</a>. </p>\n<p>In particular, we have:</p>\n<ul>\n<li>generalised <code>condIndep_copies</code> by relaxing the hypothesis <code>[Fintype β]</code> to <code>[FiniteRange Y]</code> (task 11)</li>\n<li>golfed the proof of <code>condIndep_copies</code></li>\n<li>generalised <code>identDistrib_of_sum</code></li>\n<li>added <code>sum_meas_smul_cond_fiber'</code> that generalises <code>sum_meas_smul_cond_fiber</code> by relaxing the hypothesis <code>[DiscreteMeasurableSpace β]</code> to <code>[MeasurableSingletonClass β]</code></li>\n</ul>",
        "id": 441310774,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1717014351
    },
    {
        "content": "<p>We also tried to generalize <code>rdist_of_neg_le</code> and <code>ent_bsg</code>, relaxing the <code>Finset</code> hypothesis to <code>FiniteRange</code>, but it’s not easy to do it, because during the proof we apply lemmas that require <code>FiniteRange</code> to the copies of our initial random variables, but being a copy of (i.e. identically distributed to) a function with finite range does not imply having finite range. <br>\nA way to solve this may be to modify the lemmas that produce the copies, so that they also output the hypotheses of <code>FiniteRange</code> for the copies.</p>\n<p>However, these copies (at least in <code>condIndep_copies</code>) seem to be constructed as projections from the product of the codomains to each codomain, so in the case that the codomain is not finite this functions cannot hope to have a finite range. This means that the definition of the copies inside the proofs would have to be changed (maybe we could take the projections from the product of the ranges, and not the whole codomains), but I don’t know how hard it may be.</p>",
        "id": 441313269,
        "sender_full_name": "Lorenzo Luccioli",
        "timestamp": 1717015217
    },
    {
        "content": "<p>Just opened <a href=\"https://github.com/teorth/pfr/pull/210\">a PR</a> for task 3.</p>",
        "id": 441518716,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1717091379
    },
    {
        "content": "<p>Could I claim 10?</p>",
        "id": 441518900,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1717091438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638899\">Lorenzo Luccioli</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/New.20PFR.20bounds.2C.20outstanding.20tasks.20V1/near/441313269\">said</a>:</p>\n<blockquote>\n<p>We also tried to generalize <code>rdist_of_neg_le</code> and <code>ent_bsg</code>, relaxing the <code>Finset</code> hypothesis to <code>FiniteRange</code>, but it’s not easy to do it, because during the proof we apply lemmas that require <code>FiniteRange</code> to the copies of our initial random variables, but being a copy of (i.e. identically distributed to) a function with finite range does not imply having finite range. <br>\nA way to solve this may be to modify the lemmas that produce the copies, so that they also output the hypotheses of <code>FiniteRange</code> for the copies.</p>\n<p>However, these copies (at least in <code>condIndep_copies</code>) seem to be constructed as projections from the product of the codomains to each codomain, so in the case that the codomain is not finite this functions cannot hope to have a finite range. This means that the definition of the copies inside the proofs would have to be changed (maybe we could take the projections from the product of the ranges, and not the whole codomains), but I don’t know how hard it may be.</p>\n</blockquote>\n<p>Hmm.  As Yael pointed out, the Mathlib version of all these tools may not use <code>FiniteRange</code> at all, so I guess it's not a priority to try to refactor these lemmas for now if there isn't a cheap way to do it.  At any rate for the application to m-torsion PFR, we can safely assume that the ambient group is a <code>Fintype</code>, so there is no immediate need to extend these tools to the <code>FiniteRange</code> setting.</p>",
        "id": 441659616,
        "sender_full_name": "Terence Tao",
        "timestamp": 1717147651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> and I would like to claim <strong>task 5</strong>. <a href=\"https://github.com/teorth/pfr/pull/212\">Here</a> you can find the related draft we are working on.</p>",
        "id": 441800309,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1717187668
    },
    {
        "content": "<p>We have just completed <strong>task 5</strong> and opened the related <a href=\"https://github.com/teorth/pfr/pull/212\">PR</a>.</p>\n<p>We added a few lemmas (see PR description), one of which is still to be proven (<a href=\"https://github.com/LorenzoLuccioli/PFR/blob/4a7d354b1bd9153a3f9d21e42508cc5d600da2a5/PFR/Mathlib/Probability/Independence/Kernel.lean#L42-L49\"><code>kernel.iIndepFun.finsets</code></a>). The proof of <code>kvm_ineq_I</code> depends on it so it could be added as a new outstanding task.</p>",
        "id": 442617092,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1717532040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span>  and I would like to claim <strong>task 6</strong>. <a href=\"https://github.com/teorth/pfr/pull/214\">Here</a> you can find the related draft we are working on.</p>",
        "id": 443172634,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1717713141
    }
]