[
    {
        "content": "<p>Time to roll over the outstanding tasks thread from the <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/New.20PFR.20bounds.2C.20outstanding.20tasks.20V1\">previous thread</a>.  One major new development is that the blueprint for the improved PFR constant C=9 in the 2-torsion case is <a href=\"https://teorth.github.io/pfr/blueprint/sect0013.html\">now complete</a>, so we can start formalizing that in parallel with the m-torsion tasks. Thanks to Jyun-Jie Liao for completing this blueprint!</p>\n<p>Ongoing tasks:</p>\n<ul>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#klm-2\">Kaimonovich–Vershik–Madiman inequality, II</a> A corollary to <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#klm-1\">Kaimonovich–Vershik–Madiman inequality</a> and other existing Ruzsa inequalities; again, the <code>iIndepFun</code> API may be the trickiest component. <strong>Completed by Lorenzo Luccioli and Pietro Monticone</strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#compare-sums\">Comparing sums</a> Should be a straightforward consequence of <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#klm-2\">Kaimonovich–Vershik–Madiman inequality, II</a>, existing entropy facts, and the finite sum API. <strong>Claimed by Paul Lezeau</strong></li>\n</ul>\n<p>Outstanding tasks for the m-torsion project:<br>\nA.1. <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#klm-3\">Kaimonovich–Vershik–Madiman inequality, III</a> Follows from existing Ruzsa inequalities.  I anticipate <code>iIndepFun</code> API to be the most significant issue. <strong>Completed by Lorenzo Luccioli and Pietro Monticone</strong><br>\nA.2. Defining <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-def\">Multidistance</a> Should be straightforward after invoking <a href=\"https://teorth.github.io/pfr/docs/find/?%20pattern=ProbabilityTheory.independent_copies%27#doc\">pfr#ProbabilityTheory.independent_copies'</a>.  Perhaps the definition of Ruzsa distance <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=rdist#doc\">pfr#rdist</a> can be a model? <strong>Completed by Terence Tao</strong><br>\nA.3. <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-copy\">Multidistance of copy</a> Should be routine once item A.2 is formalized. <strong>Claimed by Lorenzo Luccioli and Pietro Monticone</strong><br>\nA.4. <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-indep\">Multidistance of independent variables</a> Should be routine once item A.2 is formalized.<br>\nA.5. <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-nonneg\">Nonnegativity</a> Should follow quickly from <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=max_entropy_le_entropy_add#doc\">pfr#max_entropy_le_entropy_add</a>, once item A.2 is done.<br>\nA.6. <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-perm\">Relabeling</a> Should follow easily from <code>Finset.sum</code> API once item A.2 is done.<br>\nA.7. <a href=\"https://github.com/LorenzoLuccioli/PFR/blob/4a7d354b1bd9153a3f9d21e42508cc5d600da2a5/PFR/Mathlib/Probability/Independence/Kernel.lean#L42-L49\">iIndepFun.finsets</a> New API for independence that is needed for <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#klm-1\">Kaimonovich–Vershik–Madiman inequality</a> and will likely also be useful elsewhere in the project.<br>\nA.8  (Deleted due to being redundant)<br>\nA.9. <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-ruzsa-I\">Multidistance and Ruzsa distance I</a>  A relatively straightforward application of existing Ruzsa distance inequalities together with the definition of multidistance (A.2).<br>\nA.10. <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-ruzsa-II\">Multidistance and Ruzsa distance II</a>  A corollary of A.9 and existing Ruzsa distance inequalities.<br>\nA.11. <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-ruzsa-III\">Multidistance and Ruzsa distance III</a>  A more complicated application of Ruzsa distance inequalities.<br>\nA.12. <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#multidist-ruzsa-IV\">Multidistance and Ruzsa distance IV</a>  Another more complicated application of Ruzsa distance inequalities.</p>\n<p>Outstanding tasks for the 2-torsion project (mostly initially focusing on some basic API for Kullback-Leibler divergence):<br>\nB.1. <a href=\"https://teorth.github.io/pfr/blueprint/sect0001.html#log-sum\">Log sum inequality</a>  This should be a straightforward application of Jensen's inequality, though one may need to take care with edge cases involving division by zero. (May be redundant due to external projects involving KL divergence.)<br>\nB.2. <a href=\"https://teorth.github.io/pfr/blueprint/sect0001.html#log-sum\">Converse log sum inequality</a>  This should be a straightforward application of the converse to Jensen's inequality (already in Mathlib), though again the edge cases require care. (May be redundant due to external projects involving KL divergence.)<br>\nB.3. <a href=\"https://teorth.github.io/pfr/blueprint/sect0013.html#kl-div-copy\">Kullback-Leibler divergence of copy</a> Should be straightforward from definitions.<br>\nB.4. <a href=\"https://teorth.github.io/pfr/blueprint/sect0013.html#Gibbs\">Gibbs inequality</a> Should follow from B.1.<br>\nB.5. <a href=\"https://teorth.github.io/pfr/blueprint/sect0013.html#Gibbs-converse\">Converse Gibbs inequality</a> Should follow from B.2.<br>\nB.6 <a href=\"https://teorth.github.io/pfr/blueprint/sect0013.html#kl-div-convex\">Convexity of Kullback-Liebler</a>  A routine application of Jensen's inequality.<br>\nB.7. <a href=\"https://teorth.github.io/pfr/blueprint/sect0013.html#kl-div-inj\">Kullback-Liebler and injections</a> Should be routine from <code>Finset.sum</code> API.</p>\n<p>We have chosen to achieve tasks B.3-B.7 (sidestepping the need for B.1, B.2) by first importing the relevant components of the \"Testing Lower Bounds\" project. <strong>Claimed by Lorenzo Luccioli and Pietro Monticone</strong></p>\n<p>Will keep adding to this list as progress continues.  But one thing to highlight is that A.2 (definition of multidistance) will soon be a bottleneck to make further progress on the m-torsion project.  Some thought may be needed to come up with a definition that makes the basic API (in particular A.3 and A.4) easy to establish.</p>",
        "id": 443526001,
        "sender_full_name": "Terence Tao",
        "timestamp": 1717882985
    },
    {
        "content": "<p>About the KL divergence, it is already formalized in <a href=\"https://github.com/RemyDegenne/testing-lower-bounds\">this repo</a> (<a href=\"https://github.com/RemyDegenne/testing-lower-bounds/blob/master/TestingLowerBounds/KullbackLeibler.lean\">this</a> is the file specifically about KL) where  <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> and I are currently working. <br>\nIt's written in a more general form than the one in the blueprint (in particular it's defined as the divergence between two measures), so it may need some work to be adapted to the finite case for random variables. But we already have some properties proven, like the Gibbs inequality.</p>",
        "id": 444089877,
        "sender_full_name": "Lorenzo Luccioli",
        "timestamp": 1718136666
    },
    {
        "content": "<p>Hmm, this could potentially save some work, but I'm not sure how best to proceed since it seems your repo is also a work in progress.  One possibility is to import selected definitions and results already obtained in your repo as black boxes with some sorries and derive the discrete cases we need from those boxes, and then try to remove the sorries at a much later date.  Or we could adapt some of your code to the finite case.  The arguments in the blueprint are pretty specific to the finite case I think, and would not benefit extensively from generalizing to arbitrary measures (for instance, I would imagine the converse Gibbs inequality would be significantly more subtle at that level of generality), so it is tempting for me to not try to aim for mathlib levels of generality here and just do something good enough for the current application.  But I'd be interested to hear more thoughts.</p>",
        "id": 444107364,
        "sender_full_name": "Terence Tao",
        "timestamp": 1718142968
    },
    {
        "content": "<p>I think that many of the results that would be needed are sorry-free, so even if the project is still in development, it should be safe to import them. The inverse Gibbs inequality is still not proven, but we plan on doing it in the near future. <br>\nAs for the option to adapt our code to the finite case, this may require more work than the direct proof for the finite case, since many results about KL in our project rely on other lemmas about the more general f-divergences.</p>",
        "id": 444172733,
        "sender_full_name": "Lorenzo Luccioli",
        "timestamp": 1718179529
    },
    {
        "content": "<p>Lorenzo, what's the horizon for integration in mathlib of your project? PFR already depends on APAP, so adding a second dependency is a recipe for mismatched Mathlib versions and other disasters (at least until the community on a single, uniform, versioning system)</p>",
        "id": 444173105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718179663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638899\">Lorenzo Luccioli</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.202.2E0/near/444172733\">said</a>:</p>\n<blockquote>\n<p>I think that many of the results that would be needed are sorry-free, so even if the project is still in development, it should be safe to import them.</p>\n</blockquote>\n<p>I agree. The situation seems completely analogous to APAP which we already successfully depend upon.</p>",
        "id": 444173325,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718179732
    },
    {
        "content": "<p>The horizon for integration in mathlib is not quite short term. We have PRed to mathlib several supporting lemmas about definitions that are already in mathlib and we will continue to do so as those come up, but for now we have not started PRing any new definition.</p>\n<p>There were design decisions that were not clear at the beginning for some of the new definitions, so I wanted to wait and see how the definitions interacted before making any PR.<br>\nMy intention is to merge most of the project to mathlib eventually, and we will make an effort towards that closer to the end of Lorenzo's internship (in September).</p>",
        "id": 444176741,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1718180720
    },
    {
        "content": "<p>I see three reasonable solutions then:</p>\n<ol>\n<li>Sorry the results whose proofs will come from your repo</li>\n<li>Keep the two repos in sync regarding the Mathlib version (seems like a pain since the repos are managed by a disjoint set of people)</li>\n<li>Get APAP in Mathlib (at least the part relevant to proving BSG)</li>\n</ol>",
        "id": 444177346,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718180907
    },
    {
        "content": "<p>What would be helpful here in terms of version conventions, or support from <code>lake</code>?</p>",
        "id": 444348867,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718234077
    },
    {
        "content": "<p>Currently the only versions that Mathlib issues are tags for the first time Mathlib moves to each new Lean toolchain (e.g. <code>v4.8.0</code> or <code>v4.9.0-rc1</code>)</p>",
        "id": 444348985,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718234110
    },
    {
        "content": "<p>There is no reason we couldn't also make regular tags, e.g. <code>master-2024-06-12</code> each night, that might make it easier to communicate amongst project owners about which commit they would like to be on!</p>",
        "id": 444349105,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718234146
    },
    {
        "content": "<p>Actually I checked the proof again and I think the converse Gibbs is not needed in the end, so should be fine to remove it if that turns out to be the tricky part. Also in your project it seems that chain rule has been proved while convexity for f-divergence has not, so if we want to import what you already have, then Lemma 13.7 can be proved with chain rule + Gibbs instead, and then 13.5 (convexity) can also be removed. Then the only remaining place that would need Lemma 1.4 (log sum inequality) is Lemma 13.14, and Lemma 1.2 actually suffices in the proof of Lemma 13.14. So Lemma 1.4/1.5 can also be removed.  This could potentially save some work. <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>\n<p><span class=\"user-mention silent\" data-user-id=\"638899\">Lorenzo Luccioli</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.202.2E0/near/444172733\">said</a>:</p>\n<blockquote>\n<p>I think that many of the results that would be needed are sorry-free, so even if the project is still in development, it should be safe to import them. The inverse Gibbs inequality is still not proven, but we plan on doing it in the near future. <br>\nAs for the option to adapt our code to the finite case, this may require more work than the direct proof for the finite case, since many results about KL in our project rely on other lemmas about the more general f-divergences.</p>\n</blockquote>",
        "id": 444386234,
        "sender_full_name": "Jyun-Jie Liao",
        "timestamp": 1718256696
    },
    {
        "content": "<p>13.7 is also a special case of the data-processing inequality for KL, which we have.</p>",
        "id": 444387171,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1718257313
    },
    {
        "content": "<p>(but convexity of KL, which is the main argument in the blueprint proof of 13.7, is also a consequence of the data processing inequality, so no surprise here)</p>",
        "id": 444387449,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1718257480
    },
    {
        "content": "<p>1.4 seems to correspond to this lemma: <a href=\"https://remydegenne.github.io/testing-lower-bounds/blueprint/sect0003.html#lem:kl_ge\">https://remydegenne.github.io/testing-lower-bounds/blueprint/sect0003.html#lem:kl_ge</a></p>",
        "id": 444388109,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1718257867
    },
    {
        "content": "<p>To come back to the issue of depending on several projects: I have no experience with that so I don't know how much trouble the version mismatchs could be. I am updating mathlib in our project quite regularly so if <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> pings me whenever PFR needs to be updated i could update the project rather quickly.</p>\n<p>There might be a better way to do this. As Kim writes, we could try coordinating on the mathlib versions that we use. It is not clear to me how to do that though: do I specify a version of mathlib by hand in my lakefile, and change the version by hand before calling <code>lake update</code>, like I have to change the lean-toolchain? Is there a way to tell <code>lake</code> that I only want to update if the mathlib version changed?</p>\n<p>Anyway, I don't want to push the use of our project too much: the lemma we are talking about should not be too much trouble to prove again in the discrete case needed by PFR. It might just be simpler to do that.</p>",
        "id": 444389228,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1718258488
    },
    {
        "content": "<p>This is a great discussion! I just wanted to say that because this is a relatively low-risk project (the primary aims of PFR formalization have already been completed), this would be a good test case to implement any sort of experimental workflow (e.g., working with multiple pre-mathlib imports) in order to learn any lessons that could be useful for future projects (e.g., one could imagine the FLT project facing a comparable issue at some point).  So while we could go for a minimalistic route here of reducing the exposure of PFR to the theory of KL divergence as much as possible to avoid this particular issue, we could also use the opportunity to do a test in a situation where \"failure\" is not too painful (we always have the option of commenting out any integration attempts at a later date, and instead proving the small number of KL divergence lemmas that we need \"by hand\" in the finite case).  But taking the path of least resistance and just proving the lemmas by hand from the start is also OK with me.</p>\n<p>But perhaps at a bare minimum we can try to synchronize the notation and spelling with the project.  I am certainly not attached to the current spelling <code>KL[X ; μ # Y ; μ']</code> for KL divergence that I hastily implemented as a cut and paste from similar notation from previous parts of PFR - am open to suggestions to make notation that is more compatible both with the lower bounds project and with general mathlib conventions.</p>",
        "id": 444392880,
        "sender_full_name": "Terence Tao",
        "timestamp": 1718260344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.202.2E0/near/444392880\">said</a>:</p>\n<blockquote>\n<p>because this is a relatively low-risk project (the primary aims of PFR formalization have already been completed), this would be a good test case to implement any sort of experimental workflow</p>\n</blockquote>\n<p>I agree! Let's figure this out.</p>",
        "id": 444404976,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718265123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.202.2E0/near/444389228\">said</a>:</p>\n<blockquote>\n<p>I am updating mathlib in our project quite regularly so if @Yaël Dillies pings me whenever PFR needs to be updated i could update the project rather quickly.</p>\n</blockquote>\n<p>New mathlib versions are so frequent that even if I ping you right as I update there's a very high chance that you wil need to specify the mathlib version by hand...</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.202.2E0/near/444348867\">said</a>:</p>\n<blockquote>\n<p>What would be helpful here in terms of version conventions, or support from <code>lake</code>?</p>\n<p>Currently the only versions that Mathlib issues are tags for the first time Mathlib moves to each new Lean toolchain (e.g. <code>v4.8.0</code> or <code>v4.9.0-rc1</code>)</p>\n<p>There is no reason we couldn't also make regular tags, e.g. <code>master-2024-06-12</code> each night, that might make it easier to communicate amongst project owners about which commit they would like to be on!</p>\n</blockquote>\n<p>... hence I agree that it would help a huge lot to have daily named commits for mathlib, and on top of that a simple way to tell <code>lake update</code> that we want to use such commits.</p>",
        "id": 444405000,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718265137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span>, is something like this reasonable expectations?</p>\n<ul>\n<li>Have a bot automatically create version branches. Here \"version\" could mean either Lean toolchains or named mathlib commits. Not sure which one is best.</li>\n<li>Have a <code>--dep</code> flag to <code>lake update</code> to specify which dependency we want to update. When <code>lake update --dep preferred_dep</code> is run, the lake-manifest inherits the versions of all dependencies of <code>preferred_dep</code>, and all dependencies of the project that are not dependencies of <code>preferred_dep</code> are updated to the latest version of mathlib that's earlier than <code>preferred_dep</code>'s.</li>\n</ul>",
        "id": 444406840,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718265799
    },
    {
        "content": "<p>Hmm, looks a bit complicated <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 444406867,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718265807
    },
    {
        "content": "<p>You know that you can already write <code>lake update dep</code> to update just one of your dependencies?</p>",
        "id": 444414551,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718268475
    },
    {
        "content": "<p>I'll arrange for <code>master-YYYY-MM-DD</code> tags on Mathlib.</p>",
        "id": 444414678,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718268520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.202.2E0/near/444414551\">said</a>:</p>\n<blockquote>\n<p>You know that you can already write <code>lake update dep</code> to update just one of your dependencies?</p>\n</blockquote>\n<p>That's not exactly what I want, right? I want to update that one dependency and also the dependencies of that dependency</p>",
        "id": 444415139,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718268681
    },
    {
        "content": "<p>I think if you don't specify transitive dependencies in your lakefile, then this is the behaviour you get already, no?</p>",
        "id": 444415884,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718268955
    },
    {
        "content": "<p>Update: now we have the converse Gibbs' inequality for the general kl divergence. See <a href=\"https://github.com/RemyDegenne/testing-lower-bounds/pull/71\">this PR</a>.</p>",
        "id": 444464523,
        "sender_full_name": "Lorenzo Luccioli",
        "timestamp": 1718284985
    },
    {
        "content": "<p>That's great!  In view of the discussion I then propose trying to import enough of the lower bounds project to establish B.3-B.5 (B.1 and B.2 were only introduced to establish B.4 and B.5 respectively, so if you already have Gibbs and converse Gibbs in your repo, we don't need to establish this separately).  This is overkill for the PFR project, but it would be good to get some practice in how one project can \"cite\" another, as this is obviously something that will keep happening in the future (as it would be unrealistic to demand that every possible citeable mathematical fact be placed in mathlib).</p>",
        "id": 444743216,
        "sender_full_name": "Terence Tao",
        "timestamp": 1718383225
    },
    {
        "content": "<p>We have just completed <strong>task 6</strong> and opened the related <a href=\"https://github.com/teorth/pfr/pull/214\">PR</a>.</p>\n<p><strong>NB:</strong> We added an auxiliary lemma (see PR description).</p>",
        "id": 444999699,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1718559887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> and I would like to claim <strong>task A.1</strong>.</p>",
        "id": 445010138,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1718565695
    },
    {
        "content": "<p>I've made the following first stab at A.2 (defining multidistance), which at least passes the Lean compiler, but I am not sure if this version is at all aligned with good Lean practices.  Firstly it might be possible to have the entropy functional <code>H[]</code> automatically detect the volume measure from the <code>MeasureSpace</code> structure.  I'm also not committed to using <code>Fin m</code> as the indexing set; that's how we use it in the blueprint, but it might be marginally better to work either with an arbitrary <code>Fintype</code> or with a <code>Finset</code> of an arbitrary type.  One could also use the measure-based version <code>Hm[]</code> of entropy instead of the random variable-based version (this is how Ruzsa distance is defined).  I guess the precise definition might not be super important as long as core API such as A.3-A.6 are easy to prove.  Anyway, any thoughts would be appreciated.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/--  Let `X_[m] = (X₁, ..., Xₘ)` be a non-empty finite tuple of `G`-valued random variables `X_i`.</span>\n<span class=\"sd\">Then we define `D[X_[m]] = H[∑ i, X_i'] - 1/m*∑ i, H[X_i']`, where the `X_i'` are independent copies</span>\n<span class=\"sd\">of the `X_i`.-/</span>\n<span class=\"kn\">noncomputable</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">multiDist</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">Ω</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hΩ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">MeasureSpace</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Ω</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Ω</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">ω</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"bp\">∑</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ω</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">pi</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hΩ</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">volume</span><span class=\"o\">)]</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">∑</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hΩ</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">volume</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 445020597,
        "sender_full_name": "Terence Tao",
        "timestamp": 1718572168
    },
    {
        "content": "<p>We have just completed <strong>task A.1</strong> and opened the related <a href=\"https://github.com/teorth/pfr/pull/217\">PR</a>.</p>\n<p><strong>NB:</strong> We added an auxiliary lemma and we slightly changed the original statement (see PR description).</p>",
        "id": 445234581,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1718662254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"556875\">Pietro Monticone</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.202.2E0/near/445234581\">said</a>:</p>\n<blockquote>\n<p>We have just completed <strong>task A.1</strong> and opened the related <a href=\"https://github.com/teorth/pfr/pull/217\">PR</a>.</p>\n<p><strong>NB:</strong> We added an auxiliary lemma and we slightly changed the original statement (see PR description).</p>\n</blockquote>\n<p>Wow, that was fast!  Sounds like you have figured out how to handle all the <code>iIndepFun</code> issues.  I realized that there was one final application of the Kaimonovich-Vershik-Madiman inequalities that is in a similar spirit that I had neglected to put on the \"outstanding tasks\" list, so I added it just now as A.7.</p>",
        "id": 445248610,
        "sender_full_name": "Terence Tao",
        "timestamp": 1718670381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.202.2E0/near/445020597\">said</a>:</p>\n<blockquote>\n<p>I've made the following first stab at A.2 (defining multidistance)</p>\n</blockquote>\n<p>Since there wasn't any objection, I've gone ahead and approved this definition (I did discover that I could at least drop the final <code>(hΩ i).volume</code> as <code>autoparam</code> was able to figure this out already), and formalized the statement of several more lemmas that use multidistance.</p>",
        "id": 446293439,
        "sender_full_name": "Terence Tao",
        "timestamp": 1719074059
    },
    {
        "content": "<p>Is <strong>task A.8</strong> the same one claimed by <span class=\"user-mention\" data-user-id=\"376152\">@Paul Lezeau</span>? </p>\n<p>If  not, <span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> and I would like to claim <strong>A.8</strong>.</p>",
        "id": 446339049,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1719096526
    },
    {
        "content": "<p>Oops, that is a duplicate, sorry!  Removing it now.</p>",
        "id": 446339389,
        "sender_full_name": "Terence Tao",
        "timestamp": 1719096758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> and I would like to attempt the porting of the KL divergence from the <em>Testing Lower Bounds</em> project in order to solve the <strong>B.X</strong> tasks.</p>\n<p>We have just opened the <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/KL.20Divergence.3A.20Porting.20TLB.20into.20PFR\">related topic</a>.</p>",
        "id": 446460593,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1719169009
    },
    {
        "content": "<p>We would like to claim task <strong>A.3</strong>.</p>",
        "id": 446472846,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1719175914
    },
    {
        "content": "<p>Great!  Feel free to modify the definition of multidistance if it makes basic API like A.3 and A.4 easier to establish.</p>",
        "id": 446482131,
        "sender_full_name": "Terence Tao",
        "timestamp": 1719181316
    }
]