[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> and I have almost finished the proof of <a href=\"https://teorth.github.io/pfr/blueprint/sect0012.html#sign-flip\">Lemma 12.5 (Flipping a Sign)</a> which is available in our <a href=\"https://github.com/teorth/pfr/pull/192\">draft</a>. </p>\n<p>We have encountered and isolated the following three problems we are not sure how to solve: </p>\n<ul>\n<li><a href=\"https://github.com/LorenzoLuccioli/PFR/blob/26c16e38165ab571900f5e6a3e44cfa7cb4cf1db/PFR/MoreRuzsaDist.lean#L159-L160\">Problem 1</a>: Prove the independence of  <code>⟨⟨X₁, Y₁⟩, ⟨X₂, Y₂⟩⟩</code> and <code>⟨X₃, Y₃⟩</code> given the independence of the family <code>X₁, Y₁, X₂, Y₂, X₃, Y₃</code>. </li>\n<li><a href=\"https://github.com/LorenzoLuccioli/PFR/blob/26c16e38165ab571900f5e6a3e44cfa7cb4cf1db/PFR/MoreRuzsaDist.lean#L210-L212\">Problem 2</a>: Prove <code>X₁ - Y₁ = X₂ - Y₂</code>. We don't actually know why that's mathematically true. </li>\n<li><a href=\"https://github.com/LorenzoLuccioli/PFR/blob/26c16e38165ab571900f5e6a3e44cfa7cb4cf1db/PFR/MoreRuzsaDist.lean#L274-L279\">Problem 3</a>: Prove the conditional independence <code>CondIndepFun (⟨X₁, Y₁⟩) (⟨X₂, Y₂⟩) (X₁ - Y₁) ν₀</code>. </li>\n</ul>\n<p>We believe that <strong>Problem 2</strong> and <strong>3</strong> depend on how we defined the random variables <code>X₁, Y₁, X₂, Y₂, X₃, Y₃</code>. <br>\nTo follow the informal proof in the blueprint, we should have defined <code>(X₁, Y₁, X₂, Y₂)</code> first using <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#cond-indep-exist\">Lemma 3.22</a> and then <code>(X₃, Y₃)</code>, but: </p>\n<ol>\n<li>we didn't manage to apply <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#cond-indep-exist\">Lemma 3.22</a> correctly (e.g. we don't know what is the second random variable we are supposed to apply it to); </li>\n<li>even if we solved <strong>(1)</strong>, we would not have known how to define <code>(X₃, Y₃)</code>in order to guarantee they shared the same domain of <code>(X₁, Y₁, X₂, Y₂)</code> and the conditional independence is preserved. </li>\n</ol>\n<p>For now we defined them as independent copies of <code>(X, Y, X, Y, X, Y)</code> to be able to proceed with the rest of the proof, but we think that should be changed.</p>",
        "id": 439444692,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716131038
    },
    {
        "content": "<p><strong>PS:</strong> We had to add the hypothesis <code>[Fintype G]</code> because it's needed for <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#cond-indep-exist\">Lemma 3.22</a>. Ideally it shouldn't be needed because the ranges of the variables are finite, but we're not sure how much work it would imply to generalise this.</p>",
        "id": 439445261,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716131553
    },
    {
        "content": "<p>Ah, one should be applying Lemma 3.22 not to the pair (X,Y), but to the pair ((X,Y), X-Y).  This would give random variables (X_1,Y_1), Z, (X_2,Y_2), where (X_1,Y_1),Z has the distribution of (X,Y),X-Y, which would imply in particular that Z = X_1 - Y_1, and similarly for (X_2,Y_2),Z.   I think this resolves Problems 2 and 3.</p>\n<p>I forgot to add <code>[Fintype G]</code> to the ambient hypotheses; the simplest thing to do is to just insert it at the beginning and carry it through all the way to the final PFR statement.  We have <a href=\"https://teorth.github.io/pfr/blueprint/sect0007.html#pfr-cor\">somewhere in the repo</a> a further argument showing that this hypothesis can be dropped from the final PFR theorem.</p>\n<p>Problem 1 is presumably solvable via the independence API at <a href=\"https://teorth.github.io/pfr/docs/PFR/Mathlib/Probability/Independence/Basic.html\">https://teorth.github.io/pfr/docs/PFR/Mathlib/Probability/Independence/Basic.html</a> .  For instance <a href=\"https://teorth.github.io/pfr/docs/PFR/Mathlib/Probability/Independence/Basic.html#ProbabilityTheory.iIndepFun.pi\">ProbabilityTheory.iIndepFun.pi</a> looks promising.  I remember that working with this API was a bit fiddly in previous parts of the PFR project though.</p>",
        "id": 439454030,
        "sender_full_name": "Terence Tao",
        "timestamp": 1716140173
    },
    {
        "content": "<p>Thank you very much.</p>\n<p>We will try to solve Problem 1 in the following days.</p>\n<p>Regarding Problems 2 and 3, we tried implementing your suggestion as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"bp\">Ω₀</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">Ω₀</span><span class=\"o\">,</span> <span class=\"n\">XY₁</span><span class=\"o\">,</span> <span class=\"n\">XY₂</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">ν₀</span><span class=\"o\">,</span> <span class=\"n\">hν₀</span><span class=\"o\">,</span> <span class=\"n\">hXY₁</span><span class=\"o\">,</span> <span class=\"n\">hXY₂</span><span class=\"o\">,</span> <span class=\"n\">hZ</span><span class=\"o\">,</span> <span class=\"n\">h_indep12sub</span><span class=\"o\">,</span> <span class=\"n\">h_id1sub</span><span class=\"o\">,</span> <span class=\"n\">h_id2sub</span><span class=\"o\">⟩</span>\n    <span class=\"o\">:=</span> <span class=\"n\">condIndep_copies</span> <span class=\"o\">(⟨</span><span class=\"n\">X'</span><span class=\"o\">,</span> <span class=\"n\">Y'</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">X'</span> <span class=\"bp\">-</span> <span class=\"n\">Y'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX'.prod_mk</span> <span class=\"n\">hY'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX'.sub'</span> <span class=\"n\">hY'</span><span class=\"o\">)</span> <span class=\"n\">ν</span>\n  <span class=\"k\">let</span> <span class=\"n\">X₁</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ω</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">XY₁</span> <span class=\"n\">ω</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n  <span class=\"k\">let</span> <span class=\"n\">Y₁</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ω</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">XY₁</span> <span class=\"n\">ω</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n  <span class=\"k\">let</span> <span class=\"n\">X₂</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ω</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">XY₂</span> <span class=\"n\">ω</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n  <span class=\"k\">let</span> <span class=\"n\">Y₂</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ω</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">XY₂</span> <span class=\"n\">ω</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n  <span class=\"k\">have</span> <span class=\"n\">Zeq1</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">=</span> <span class=\"n\">X₁</span> <span class=\"bp\">-</span> <span class=\"n\">Y₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">Zeq2</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">=</span> <span class=\"n\">X₂</span> <span class=\"bp\">-</span> <span class=\"n\">Y₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But we still have some troubles:</p>\n<ul>\n<li>We don't know how to prove <code>Zeq1</code>. Maybe there is a result along the lines of: <code>IdentDistrib ⟨X, f(X)⟩ ⟨X', Y'⟩ → Y'=f(X')</code>. Is this how this should be proven? Is there a similar lemma in Mathlib or somewhere in the repo?</li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#independent-exist\">Lemma 3.7</a> corresponds to 4 different lemmas in Lean, which is the one that we should use? Moreover, I guess that this lemma will produce additional copies of <code>X, Y</code> (the ones that we want to call <code>X₃, Y₃</code>), but also of <code>X₁, Y₁, X₂, Y₂</code>, since we want everything on the same domain. Is this correct or is there another way to proceed that allows us to stick with <code>X₁, Y₁, X₂, Y₂</code>, without other copies?</li>\n</ul>",
        "id": 439468741,
        "sender_full_name": "Lorenzo Luccioli",
        "timestamp": 1716154799
    },
    {
        "content": "<p>The random variable <code>W = ⟨X, f(X)⟩</code> obeys the property <code>W.2 = f(W.1)</code>, so by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.IdentDistrib.ae_snd#doc\">docs#ProbabilityTheory.IdentDistrib.ae_snd</a> the random variable <code>⟨X', Y'⟩</code> will also do so a.e., thus we have <code>Y' = f(X')</code> a.e..  This is the best one can do with the <code>IdentDistrib</code> hypothesis, hopefully it is enough.  If not, one could try to set up a version of Lemma 3.22 specifically for the <code>Y=f(X)</code> situation in which we get <code>f(X)=f(X')</code> holding everywhere, rather than almost everywhere, which should be doable by carefully inspecting the proof of that lemma, but I assume we have enough API for almost everywhere equality that we can deal with the a.e. caveat.</p>\n<p>Regarding Lemma 3.7, I think <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=ProbabilityTheory.independent_copies#doc\">pfr#ProbabilityTheory.independent_copies</a> may be the best fit.  Here, one is applying the lemma to <code>X₁, Y₁, X₂, Y₂,Z</code> and to <code>X,Y</code> to obtain a copy of <code>X₁, Y₁, X₂, Y₂,Z</code> (which I guess technically one has to give a different name such as <code>X'₁, Y'₁, X'₂, Y'₂,Z'</code>) together with a copy <code>X₃, Y₃</code> of <code>X,Y</code>that is independent of <code>X'₁, Y'₁, X'₂, Y'₂,Z'</code>.  Because of the independence API, this also implies other independence claims, e.g., <code>X</code> is independent of <code>Z</code>.</p>",
        "id": 439481648,
        "sender_full_name": "Terence Tao",
        "timestamp": 1716168533
    },
    {
        "content": "<p>Thank you very much for your help! </p>\n<p>The proof turned out to be quite big (about 250 LOC), but we have just resolved all three problems described above. </p>\n<p>There are 3 small <code>sorry</code>s left (related code <a href=\"https://github.com/LorenzoLuccioli/PFR/blob/8da735a90634ea4484d9be08e13c0b117a8d25af/PFR/MoreRuzsaDist.lean#L221-L224\">here</a>), which are going to be removed once we get an answer <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60IndepFun.60.20of.20.60IdentDistrib.60.20pairs/near/439623241\">here</a> or find out how to do it by ourselves.</p>",
        "id": 439695803,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716246012
    },
    {
        "content": "<p>Ok, we have finished. I'm going to resolve this topic.</p>",
        "id": 440179316,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1716410475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"556875\">Pietro Monticone</span> has marked this topic as resolved.</p>",
        "id": 440179356,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716410492
    }
]