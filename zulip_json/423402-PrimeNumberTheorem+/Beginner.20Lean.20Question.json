[
    {
        "content": "<p>I've been working on a proof of <code>tendsto_Realpow_atTop_nhds_0_of_norm_gt_1</code> that uses Tendsto.comp, but it ended up being quite a bit less clean than I expected. Im curious what would be some strategies and/or style tips to improve this proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.PiL2</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ContDiff.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_Realpow_atTop_nhds_0_of_norm_lt_1</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_lt_one</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">œÉ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">œÉ</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_Realpow_atTop_nhds_0_of_norm_gt_1</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x_gt_one</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cpos</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">œÉ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">œÉ</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">atBot</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">œÉ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">œÉ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">x_gt_one</span><span class=\"o\">)</span>\n    <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rpow_neg</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">this</span><span class=\"o\">),</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">inv_rpow</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">this</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">tendsto_Realpow_atTop_nhds_0_of_norm_lt_1</span> <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv_lt_one</span> <span class=\"n\">x_gt_one</span><span class=\"o\">)</span> <span class=\"n\">C</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Tendsto.comp</span> <span class=\"n\">h</span> <span class=\"n\">tendsto_neg_atBot_atTop</span>\n  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>Update: my proof now looks like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.PiL2</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Asymptotics</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ContDiff.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_rpow_atTop_nhds_zero_of_norm_lt_one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_lt_one</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">œÉ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">œÉ</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Tendsto.mul_const</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">tendsto_rpow_atTop_of_base_lt_one</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">x_lt_one</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">rpow_eq_pow</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_rpow_atTop_nhds_zero_of_norm_gt_one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x_gt_one</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">œÉ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">œÉ</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">atBot</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">zero_lt_one.trans</span> <span class=\"n\">x_gt_one</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">tendsto_rpow_atTop_nhds_zero_of_norm_lt_one</span> <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv_lt_one</span> <span class=\"n\">x_gt_one</span><span class=\"o\">)</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">tendsto_neg_atBot_atTop</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this.le</span><span class=\"o\">,</span> <span class=\"n\">inv_rpow</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">rpow_neg</span><span class=\"o\">,</span> <span class=\"n\">inv_inv</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 419640118,
        "sender_full_name": "milomg",
        "timestamp": 1706993132
    },
    {
        "content": "<p>I usually try to avoid <code>conv</code> blocks, in this case it looks like you can replace the <code>conv</code> with <code>simp only [Function.comp_def, neg_neg] at this </code>.</p>",
        "id": 419640518,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706993544
    },
    {
        "content": "<p>Aha, thank you!</p>",
        "id": 419640704,
        "sender_full_name": "milomg",
        "timestamp": 1706993733
    },
    {
        "content": "<p>I guess my first thought when trying to approach this proof would be to ask, is there a way I can simplify away the <code>* C</code> at the beginning. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.mul_const#doc\">docs#Filter.Tendsto.mul_const</a> looks like it could be helpful there.</p>",
        "id": 419640815,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706993842
    },
    {
        "content": "<p><del>Or maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.tendsto_mul_const_atBot_iff#doc\">docs#Filter.tendsto_mul_const_atBot_iff</a></del></p>",
        "id": 419640906,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706993923
    },
    {
        "content": "<p>Not <code>atBot</code>, it's about functions that tend to <code>-‚àû</code>.</p>",
        "id": 419640961,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706993983
    },
    {
        "content": "<p>Perhaps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tendsto_Realpow_atTop_nhds_0_of_norm_gt_1'</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x_gt_one</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cpos</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">œÉ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">œÉ</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">atBot</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">zero_lt_one.trans</span> <span class=\"n\">x_gt_one</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">tendsto_Realpow_atTop_nhds_0_of_norm_lt_1</span> <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv_lt_one</span> <span class=\"n\">x_gt_one</span><span class=\"o\">)</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">tendsto_neg_atBot_atTop</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this.le</span><span class=\"o\">,</span> <span class=\"n\">inv_rpow</span><span class=\"o\">,</span> <span class=\"n\">rpow_neg</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 419641078,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706994048
    },
    {
        "content": "<p>It's <code>by simpa only [zero_mul] using (tendsto_rpow_atBot_of_base_gt_one x_gt_one).mul tendsto_const_nhds</code> (untested)</p>",
        "id": 419641085,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706994057
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tendsto_rpow_atBot_of_base_gt_one#doc\">docs#tendsto_rpow_atBot_of_base_gt_one</a></p>",
        "id": 419641101,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706994077
    },
    {
        "content": "<p>It would be nice if someone makes a PR reformulating this and nearby lemmas in terms of <code>^</code> instead of <code>Real.rpow</code>.</p>",
        "id": 419641120,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706994108
    },
    {
        "content": "<p>(As an aside, the name should use \"zero\" and \"one\" in place of \"0\" and \"1\".)</p>",
        "id": 419641218,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1706994210
    },
    {
        "content": "<p>Also <code>rpow</code> rather than <code>Realpow</code></p>",
        "id": 419641337,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706994313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Beginner.20Lean.20Question/near/419641120\">said</a>:</p>\n<blockquote>\n<p>It would be nice if someone makes a PR reformulating this and nearby lemmas in terms of <code>^</code> instead of <code>Real.rpow</code>.</p>\n</blockquote>\n<p>(These come out of <a href=\"https://github.com/leanprover-community/mathlib4/pull/6140\">#6140</a> from <span class=\"user-mention\" data-user-id=\"311453\">@Fr√©d√©ric Dupuis</span>)</p>",
        "id": 419641465,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706994424
    },
    {
        "content": "<p>BTW, you don't need <code>C &gt; 0</code> for your lemma.</p>",
        "id": 419641940,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706994827
    },
    {
        "content": "<p>Do we have an iff version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.mul_const#doc\">docs#Filter.Tendsto.mul_const</a> for nhds? Something that tells us we can divide off the c?</p>",
        "id": 419642005,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706994849
    },
    {
        "content": "<p>The <code>iff</code> version would need <code>C ‚â† 0</code></p>",
        "id": 419642024,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706994874
    },
    {
        "content": "<p>Maybe something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tendsto_const_smul_iff#doc\">docs#tendsto_const_smul_iff</a></p>",
        "id": 419642121,
        "sender_full_name": "milomg",
        "timestamp": 1706994956
    },
    {
        "content": "<p>It would be nice to have a tactic <code>tendsto</code> that goes from inside out and tracks the best filter we have.</p>",
        "id": 419642216,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706995003
    },
    {
        "content": "<p>Sorry, you're working on part 6, <code>tendsto_Realpow_atTop_nhds_0_of_norm_gt_1</code>? I already marked it as finished (thanks to a hint by <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>)...</p>",
        "id": 419652529,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707004644
    },
    {
        "content": "<p>Oops, does that mean I picked something off of the blueprint that may have already been completed? (is it possible Yury's hint was for tendsto_Realpow_atTop_nhds_0_of_norm_<em>lt</em>_1?). </p>\n<p>If it is already completed, I'm happy to close my PR</p>",
        "id": 419652876,
        "sender_full_name": "milomg",
        "timestamp": 1707004931
    },
    {
        "content": "<p>Oh I see, sorry; you're doing <code>gt</code>, not <code>lt</code>. Thanks!</p>",
        "id": 419653398,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707005520
    },
    {
        "content": "<p>You're ahead of the game, I hadn't added that to the \"Outstanding Tasks\" list yet! :)</p>",
        "id": 419653476,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707005572
    },
    {
        "content": "<p>I attempted DeltaSpikeMass and ended up relying on conv again (<code>simp only</code> loops forever because of <code>mul_comm</code>). Are there tactics that exist or we could create that would make simp/ring work well on reals+subtypes inside integrals?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.CauchyIntegral</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.PiL2</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ContDiff.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.IntegralEqImproper</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">DeltaSpike</span> <span class=\"o\">(</span><span class=\"bp\">Œ®</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">Œ®</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">Œµ</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"n\">Œµ</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">DeltaSpikeMass</span> <span class=\"o\">{</span><span class=\"bp\">Œ®</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mass_one</span><span class=\"o\">:</span> <span class=\"bp\">‚à´</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">Œ®</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œµpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚à´</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">DeltaSpike</span> <span class=\"bp\">Œ®</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">DeltaSpike</span>\n  <span class=\"k\">have</span> <span class=\"n\">x1Œµ_nz</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Set.Elem</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">Real.rpow_pos_of_pos</span> <span class=\"n\">x.property.out</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">Œµ</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚à´</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">Œ®</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">Œµ</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"n\">Œµ</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">‚à´</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">Œµ</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">Œµ</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">‚Ä¢</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">Œ®</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">z</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">Œµ</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"o\">(</span><span class=\"n\">MeasureTheory.integral_subtype</span> <span class=\"o\">(</span><span class=\"n\">measurableSet_Ioi</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))))]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_pos</span> <span class=\"o\">(</span><span class=\"n\">one_div_pos.mpr</span> <span class=\"n\">Œµpos</span><span class=\"o\">)]</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rhs</span> <span class=\"bp\">;</span> <span class=\"n\">congr</span> <span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">rpow_sub</span> <span class=\"n\">x.property.out</span><span class=\"o\">,</span> <span class=\"n\">rpow_one</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span>\n      <span class=\"bp\">‚Üê</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">div_mul_cancel</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">x1Œµ_nz</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">div_right_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">MeasureTheory.integral_comp_rpow_Ioi</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">Œ®</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mass_one</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">div_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">Œµpos.ne'</span><span class=\"o\">,</span> <span class=\"n\">or_self</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 419728847,
        "sender_full_name": "milomg",
        "timestamp": 1707078846
    },
    {
        "content": "<p>I find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.set_integral_congr#doc\">docs#MeasureTheory.set_integral_congr</a> (and similar tools) to suffice for manipulating integrands, particularly when done inside a <code>calc</code> block.</p>",
        "id": 419741723,
        "sender_full_name": "Terence Tao",
        "timestamp": 1707088997
    }
]