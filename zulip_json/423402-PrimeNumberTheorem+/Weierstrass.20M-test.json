[
    {
        "content": "<p>Does something like the Weierstrass M-test exist in Mathlib?</p>",
        "id": 419702216,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1707056629
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 419702807,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707057188
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Summable.of_norm_bounded#doc\">docs#Summable.of_norm_bounded</a></p>",
        "id": 419702909,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1707057293
    },
    {
        "content": "<p>Earlier discussion here on zulip points at <a href=\"https://github.com/leanprover-community/mathlib/pull/11229\">!3#11229</a></p>",
        "id": 419703020,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707057383
    },
    {
        "content": "<p>Perhaps if you say what you might need the M-test for, we can figure out how to spell a version of it that (a) can be proven from existing Mathlib tools, and (b) would be useful for your application.</p>",
        "id": 419716395,
        "sender_full_name": "Terence Tao",
        "timestamp": 1707068442
    },
    {
        "content": "<p>There is also <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/FunctionSeries.html#tendstoUniformly_tsum\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/FunctionSeries.html#tendstoUniformly_tsum</a> which gives the uniform statement</p>",
        "id": 419794797,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1707124967
    },
    {
        "content": "<p>Although what Ruben points to should be what you want (although it might be stated slightly differently)</p>",
        "id": 419794921,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1707125015
    },
    {
        "content": "<p>I was looking for the theorem that all holomorphic functions are analytic in a unit disk(whose proof requires Weistrass M-Test), which now I realize is already in Mathlib (with a different terminology). Isn't defining Entire functions on a complex plane a good idea?</p>",
        "id": 419802519,
        "sender_full_name": "Suryansh Shrivastava",
        "timestamp": 1707127520
    },
    {
        "content": "<p>We already have that definition, as <code>Differentiable ℂ f</code>. Introducing a definition which is equivalent to this one but with a different name would just force us to restate a bunch of theorems for essentially no gain, which is probably not a good idea. Having documentation explaining that the mathlib spelling for \"entire functions on the complex plane\" is <code>Differentiable ℂ f</code> would probably be a good idea, though!</p>",
        "id": 419803111,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1707127746
    },
    {
        "content": "<p>What about an <code>abbrev</code>? I find it very convenient to use <code>HolomorphicOn</code> in place of <code>DifferentiableOn ℂ</code>... Would it bother people to add:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Entire</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>? (So that, e.g., when someone new to this branch of Mathlib goes looking for facts about entire functions, they find the word they're expecting...?)</p>",
        "id": 419909740,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707160269
    },
    {
        "content": "<p>Somewhat tangentially, I think it might be a good crowdsourced project to build a table (or maybe a wiki or github repository) of standard mathematical properties and their Lean formalizations.  I started a very preliminary version of this at <a href=\"https://docs.google.com/spreadsheets/d/1Gsn5al4hlpNc_xKoXdU6XGmMyLiX4q-LFesFVsMlANo/edit#gid=78671819\">https://docs.google.com/spreadsheets/d/1Gsn5al4hlpNc_xKoXdU6XGmMyLiX4q-LFesFVsMlANo/edit#gid=78671819</a> , but did not have the time to expand it further.   Perhaps there is a way to semi-automate such a list with AI?  Alternatively if one could somehow attach some discussion page to each Mathlib documentation page, one could perhaps try to put such standard formalizations on that page.</p>",
        "id": 419926485,
        "sender_full_name": "Terence Tao",
        "timestamp": 1707166462
    },
    {
        "content": "<p>This is great! Maybe a third column can be: what needs to be <code>import</code>ed and also <code>open</code>ed (<code>scoped</code>, etc) for the notation to work properly?</p>",
        "id": 419930127,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707168064
    },
    {
        "content": "<p>I've added blank columns for this and also the example of an entire function.  If there is interest I can try to set up a publicly editable Google Sheets to try to crowdsource a greatly expanded version of this table, though this is obviously a rather insecure platform and eventually one should use something else (a wiki perhaps?).</p>",
        "id": 419934008,
        "sender_full_name": "Terence Tao",
        "timestamp": 1707169667
    },
    {
        "content": "<p>Sounds great to me! It certainly would've been very useful to me when I was starting out...</p>",
        "id": 419938305,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707171526
    },
    {
        "content": "<p>OK, here is a publically editable version: <a href=\"https://docs.google.com/spreadsheets/d/1ap8ByJDvXw9c1G629UxRRoag3gTcMpPsRpm3_yCINyo/edit?usp=sharing\">https://docs.google.com/spreadsheets/d/1ap8ByJDvXw9c1G629UxRRoag3gTcMpPsRpm3_yCINyo/edit?usp=sharing</a> .  Let's see how it develops...</p>",
        "id": 419956026,
        "sender_full_name": "Terence Tao",
        "timestamp": 1707181253
    }
]