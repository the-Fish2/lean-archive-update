[
    {
        "content": "<p>For V1, see <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V1/near/419172966\">here</a></p>\n<p>Wow contributions are coming in faster than I can produce new targets, amazing! We have nearly completed the execution of our first contour pull (passing no poles) to prove <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#formulaLtOne\">formulaLtOne</a>. All that's left, as far as I can tell, is</p>\n<ol>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#isIntegrable\">isIntegrable</a> Is the integrability of the Perron function; should be relatively easy. <strong> Done by <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> </strong></li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#tendsto_zero_Lower\">tendsto_zero_Lower</a><br>\nThis and its cousin, <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#tendsto_zero_Upper\">tendsto_zero_Upper</a><br>\nsay that the integrals of the Perron function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>↦</mo><msup><mi>x</mi><mi>s</mi></msup><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">s\\mapsto x^s/(s(1+s))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">))</span></span></span></span> over a finite horizontal line at height <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>, decays to zero as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>→</mo><mo>±</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">t\\to\\pm\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">±</span><span class=\"mord\">∞</span></span></span></span>.<strong> Done by <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> </strong></li>\n</ol>\n<p>After these, let's make our next immediate target the first contour pull to the left, namely <code>residuePull1</code>, as described below. I have refactored things a bit, moving all the discussion about general meromorphic functions and poles of arbitrary order out of the blueprint (into <code>GeneralMeromorphic.lean</code>); we will only ever need simple poles, so let's not deal with the difficulties of the general case at this time.</p>\n<p>The first batch of targets are for general complex analytic functions (or just pure geometry).</p>\n<ol start=\"3\">\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#RectanglePullToNhdOfPole\">RectanglePullToNhdOfPole</a> says that, if you have a holomorphic function on a rectangle except a point, you can zoom the rectangle in on a small square centered at the point. The proof is simply to chop the big rectangle with two horizontal and two vertical cuts into nine rectangles, the middle of which is the desired square. Then use <code>HolomorphicOn.vanishesOnRectangle</code> to show that the eight other rectangle integrals vanish. This theorem should be very accessible. <strong> Done by me and <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span>   </strong></li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#ResidueTheoremAtOrigin\">ResidueTheoremAtOrigin</a>: This is the key calculation that will allow us to compute residues, saying that the integral of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>↦</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s\\mapsto 1/s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">s</span></span></span></span> around a unit square is 1. The proof is just two uses of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi>arctan</mi><mo>⁡</mo></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>x</mi><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\arctan&#x27;x = 1/(1+x^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7569em;\"></span><span class=\"mop\"><span class=\"mop\">arctan</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7569em;\"><span style=\"top:-3.068em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>; should also be very accessible, given what's already formalized. <strong> Solved by <span class=\"user-mention\" data-user-id=\"571592\">@Paul Nelson</span> </strong></li>\n<li><a href=\"http://\">ResidueTheoremOnRectangleWithSimplePole</a> With the previous two, we can prove that, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is holomorphic on a rectangle except <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>∈</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">p\\in\\mathbb C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>, and has \"principal part\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo>−</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A/(s-p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> (that is, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo>−</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f (s) = A/(s-p) + g(s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> is holomorphic on the whole rectangle), then the integral of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> over the rectangle is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>. The proof is to replace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo>−</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">A/(s-p)+g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>; the integral of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> vanishes. Then localize the integral to a little square around <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> using <code>RectanglePullToNhdOfPole</code>, and apply a change of variables to be able to quote <code>ResidueTheoremAtOrigin</code>. Should not be too difficult. <strong> Claimed by me and <span class=\"user-mention\" data-user-id=\"571592\">@Paul Nelson</span> </strong></li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#RectangleIntegral_tendsTo_UpperU\">RectangleIntegral_tendsTo_UpperU</a> and <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#RectangleIntegral_tendsTo_LowerU\">RectangleIntegral_tendsTo_LowerU</a> are two lemmas very similar to <code>RectangleIntegral_tendsTo_VerticalIntegral</code>; they say that if you pull the top of a <code>RectangleIntegral</code> up, it becomes an <code>UpperUIntegral</code>, and similarly if you pull down. They should be relatively easy to prove. <strong> Claimed by <span class=\"user-mention\" data-user-id=\"613795\">@Vláďa Sedláček</span> </strong></li>\n</ol>",
        "id": 420154765,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707262967
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 420154908,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707263043
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 420155251,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707263266
    },
    {
        "content": "<ol start=\"7\">\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#DiffVertRect_eq_UpperLowerUs\">DiffVertRect_eq_UpperLowerUs</a> This says that the difference between two vertical integrals and a rectangle between them is equal to an UpperU integral and a LowerU. Should be fairly easy to prove. <strong> Done by <span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> </strong></li>\n</ol>\n<p>Then we have targets specific to the Perron function.</p>\n<ol start=\"8\">\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#isHolomorphicOn2\">isHolomorphicOn</a> <br>\n[Edit: Changed name from <code>isHolomorphicOn2</code>.] This is just an extension of <code>isHolomorphicOn</code> (in fact the latter should be refactored into the former; we don't need both statements). The proof should be nearly identical. <strong> Done by <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> </strong></li>\n</ol>",
        "id": 420155369,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707263331
    },
    {
        "content": "<ol start=\"9\">\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#vertIntBoundLeft\">vertIntBoundLeft</a> is very similar to the completed <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#vertIntBound\">vertIntBound</a>, just for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo>&lt;</mo><mo>−</mo><mn>3</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\sigma&lt;-3/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord\">3/2</span></span></span></span>. I also stated <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#vertIntBound2\">vertIntBound2</a> but now I realize it's not as useful, because the implied constant depends on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>, and we'll want to pull <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span> around. I'll leave the statement there for now, but I think we'll eventually get rid of that one. (Is there a better way to unify these?) <strong>Done by <span class=\"user-mention\" data-user-id=\"585783\">@Arend Mellendijk</span> </strong></li>\n</ol>",
        "id": 420155445,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707263376
    },
    {
        "content": "<ol start=\"10\">\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#diffBddAtZero\">diffBddAtZero</a> This says that the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>↦</mo><msup><mi>x</mi><mi>s</mi></msup><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s\\mapsto x^s/(s(1+s)) - 1/s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">s</span></span></span></span> remains bounded near <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>; this is because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>s</mi></msup><mi mathvariant=\"normal\">/</mi><mi>s</mi><mo>−</mo><msup><mi>x</mi><mn>0</mn></msup><mi mathvariant=\"normal\">/</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">x^s/s- x^0/s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">s</span></span></span></span> is the difference quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>↦</mo><msup><mi>x</mi><mi>s</mi></msup></mrow><annotation encoding=\"application/x-tex\">s\\mapsto x^s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span> at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">s=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. Shouldn't be too hard to prove. <strong> Unclaimed by <span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span>  </strong></li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#sigmaNegOneHalfPull\">sigmaNegOneHalfPull</a>: This says that the vertical integral over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>σ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\sigma)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mclose\">)</span></span></span></span>, minus that over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-1/2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1/2</span><span class=\"mclose\">)</span></span></span></span>, is equal to the <code>RectangleIntegral</code> with opposite corners <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo>−</mo><mi>i</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">-1/2-iT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1/2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> and $$\\sigma+iT$, for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">T&gt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. To prove this, use <code>DiffVertRect_eq_UpperLowerUs</code> to turn the difference into an <code>UpperU</code> minus a <code>LowerU</code>. Each of the U's is a limit of rectangle integrals, which are all zero (since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is holomorphic there). <strong> Done by <span class=\"user-mention\" data-user-id=\"585783\">@Arend Mellendijk</span> </strong><br>\nand finally:</li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#residuePull1\">residuePull1</a>: This says that the vertical integral over the line <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>σ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\sigma)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mclose\">)</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\sigma&gt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> is equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> plus the vertical integral over the line <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-1/2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1/2</span><span class=\"mclose\">)</span></span></span></span>, which passes through the pole at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">s=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. Use <code>sigmaNegOneHalfPull</code> to express the difference of vertical integrals as a rectangle; then <code>RectanglePullToNhdOfPole</code> to zoom in on a square about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, where the integral is evaluated by <code>residueAtZero</code>. That'll be our first \"real\" contour pull and residue! <strong> Done by <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> </strong></li>\n</ol>",
        "id": 420155468,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707263387
    },
    {
        "content": "<p>Lastly, we can also continue attacking from the Fourier side; here are some of the easier targets there (from last week):<br>\n13.  <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#first-fourier\">First Fourier Identity</a>.  This is basically a Fubini theorem type calculation, and the first step towards the Wiener-Ikehara theorem.  Should be pretty simple. <strong> Done by <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> </strong><br>\n14. <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#second-fourier\">Second Fourier identity</a> Another Fubini calculation. <strong> Done by <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> </strong><br>\n15. <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0005.html#chebyshev-asymptotic\">Asymptotics for first summatory function</a> Assuming the <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#WeakPNT\">Weak PNT</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≤</mo><mi>x</mi></mrow></msub><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∼</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\"> \\sum_{n \\leq x} \\Lambda(n) \\sim x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1455em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> as a black box, it should be relatively simple to conclude that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>p</mi><mo>≤</mo><mi>x</mi></mrow></msub><mi>log</mi><mo>⁡</mo><mi>p</mi><mo>∼</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\"> \\sum_{p \\leq x} \\log p \\sim x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1455em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> as well.  This could be a good test case to see whether we have phrased our asymptotic estimates in a convenient fashion.</p>",
        "id": 420155471,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707263394
    },
    {
        "content": "<p>Also if anyone has general comments about how things are going so far, and suggestions for what could be done to improve the process, please feel free to add on here (or DM me).</p>\n<p>Thanks for all the fantastic contributions!! Please keep them coming! :)</p>",
        "id": 420155528,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707263405
    },
    {
        "content": "<p>(Hopefully now everything is at least visible, even if I can't get it into a single message???)</p>",
        "id": 420155579,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707263437
    },
    {
        "content": "<p>\"1. isIntegrable\" and \"8. isHolomorphicOn2\" are done as part of <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/28/\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/28/</a></p>",
        "id": 420178164,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707279252
    },
    {
        "content": "<p>I started working on \"2. tendsto_zero_Lower\": <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/34\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/34</a></p>",
        "id": 420197620,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707292826
    },
    {
        "content": "<p>I bashed out the explicit uniform asymptotic since it wasn't too hard; but I wonder if I should invest into an API (unless it exists already?) for uniform asymptotics (similar to <code>TendsToUniformly</code>)?</p>\n<p>In this case, <code>TendsToUniformly</code> would have been enough to state the sublemma (or perhaps I could have even used the pointwise asymptotic with Dini's Theorem; or maybe I'm missing something even easier). However, <code>IsThetaUniformly</code> could be interesting for carrying around info that can be composed with calc, add, scale, multiply, div etc</p>\n<p>I guess I could try to use the existing <code>IsTheta</code> API with <code>f(x, y) =O[\\bot \\times l] g(x, y)</code> where <code>g(x, y) = h(x)</code>? What would make sense here?</p>",
        "id": 420301103,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707325656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/420301103\">said</a>:</p>\n<blockquote>\n<p>I bashed out the explicit uniform asymptotic since it wasn't too hard; but I wonder if I should invest into an API (unless it exists already?) for uniform asymptotics (similar to <code>TendsToUniformly</code>)?</p>\n<p>In this case, <code>TendsToUniformly</code> would have been enough to state the sublemma (or perhaps I could have even used the pointwise asymptotic with Dini's Theorem; or maybe I'm missing something even easier). However, <code>IsThetaUniformly</code> could be interesting for carrying around info that can be composed with calc, add, scale, multiply, div etc</p>\n<p>I guess I could try to use the existing <code>IsTheta</code> API with <code>f(x, y) =O[\\bot \\times l] g(x, y)</code> where <code>g(x, y) = h(x)</code>? What would make sense here?</p>\n</blockquote>\n<p>Certainly I think it makes sense to have some lemmas that allow one to manipulate the <code>=O[\\bot \\times l]</code> relation, e.g., the ability to integrate in the <code>x</code> variable and extract a <code>=O[l]</code> relation, and if you can spot any such lemmas that can be extracted from your code, that is worth isolating I think. At some later point one can try to respell that using some new notation like <code>IsThetaUniformly</code> but perhaps just <code>=O[\\bot \\times l]</code> will suffice for now.</p>",
        "id": 420321703,
        "sender_full_name": "Terence Tao",
        "timestamp": 1707332298
    },
    {
        "content": "<p>I'll have to take a break for a while, but I started a draft experimenting with some lemmas <a href=\"https://github.com/leanprover-community/mathlib4/pull/10352/files\">here</a> (example at the end). In addition to extracting the integral big O, I've also added API to dispatch the O(1) terms more easily. The uncurrying to use the plain IsBigO API is aesthetically a bit odd but hasn't given me any issues so far.</p>",
        "id": 420395526,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707374264
    },
    {
        "content": "<p>Thanks for all your great work!</p>",
        "id": 420458620,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707399335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/420197620\">said</a>:</p>\n<blockquote>\n<p>I started working on \"2. tendsto_zero_Lower\": <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/34\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/34</a></p>\n</blockquote>\n<p>This is done</p>",
        "id": 420597539,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707463236
    },
    {
        "content": "<p>I was hesitating to claim 3 but am arriving too late... but I am still tempted to try it as an experiment on my own using a different approach, namely defining the rectangle as a C^1 curve (with speed zero at the corners) and doing C^1 homotopy between rectangles. Still a bit artificial but not in the same direction ;-)</p>",
        "id": 420606708,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1707468029
    },
    {
        "content": "<p>Dear Vincent, that would be great! I can work on something else if you'd like to try it via homotopy? (I had in mind something much simpler; one can build this up as a series of individual \"cuts\" in rectangles, just using <code>intervalIntegral.integral_add_adjacent_intervals</code>, alternating vertical and horizontal cuts where you add and subtract the same integral...)</p>",
        "id": 420662349,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707488705
    },
    {
        "content": "<p>Yes, 4 cuts (which are the same up to pi/2 rotation) should suffice. I believe it would be useful to have both proofs available, the rectangle-slicing as a validation that the rectangular approach is sound and the homotopy one as kind of a connection with the rest of mathlib.</p>",
        "id": 420665260,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1707489621
    },
    {
        "content": "<p>None of the two being the one from the book (the one from the book is probably going through C^0 homotopy and local primitives of closed forms and lifts, but that is probably for much later ...)</p>",
        "id": 420665736,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1707489759
    },
    {
        "content": "<p>Some preliminary code here <a href=\"https://github.com/vbeffara/RMT4/blob/main/RMT4/square.lean\">https://github.com/vbeffara/RMT4/blob/main/RMT4/square.lean</a> but the eventual proof will likely be much longer than the rectangle-slicing one.</p>",
        "id": 420672724,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1707491817
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"571592\">@Paul Nelson</span> for solving 4!</p>",
        "id": 420749191,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707521440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/420606708\">said</a>:</p>\n<blockquote>\n<p>I was hesitating to claim 3 but am arriving too late... but I am still tempted to try it as an experiment on my own using a different approach, namely defining the rectangle as a C^1 curve (with speed zero at the corners) and doing C^1 homotopy between rectangles. Still a bit artificial but not in the same direction ;-)</p>\n</blockquote>\n<p>So far the experiment brought more pan than anything else, piecewise C^1 is painful to manage and do homotopy with, and C^1 parameterzation of a polygon is a mess (unless I'm missing something). I'm more convinced than aver that the proof has to be either all the way towards the specific case in play with rectangle slicing, or the other way using only topology and C^0 homotopy.</p>\n<p>Would it make sense to try to implement that within the PNT+ project?</p>",
        "id": 420804085,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1707575138
    },
    {
        "content": "<p>There is a sort of intermediate approach which I adopt for instance in <a href=\"https://terrytao.wordpress.com/2016/10/02/math-246a-notes-3-cauchys-theorem-and-its-consequences/\">https://terrytao.wordpress.com/2016/10/02/math-246a-notes-3-cauchys-theorem-and-its-consequences/</a> :</p>\n<p>In all the discussion below we are integrating a fixed holomorphic function on some open set.</p>\n<ol>\n<li>Because of the existence of local primitives, one can shift contours arbitrarily inside small balls.  In particular this allows one to define contour integrals on C^0 curves by approximating them by a suitable polygonal path in a well defined manner, where the lengths of the edges in the path can be made as small as desired.</li>\n<li>One can perform discrete contour shifting of polygonal paths, if all the line segments are of sufficiently small length, and each vertex of one path is sufficiently close to the corresponding vertex of the previous path, because the difference between the two polygonal contour integrals can be split up into the sum of a finite number of integrals over small quadrilaterals, whose integral vanishes due to local primitives.</li>\n<li>Finally, any C^0 homotopy can be approximated by a discrete polygonal homotopy of the type required for 2 by a compactness argument.</li>\n</ol>\n<p>After writing all this, though, it seems like it would be better to proceed from a more topological viewpoint, developing the theory of universal covers, monodromy, and connections of bundles, and get the homotopy version of Cauchy's theorem as a special case.  I have no familiarity with the relevant portions of the Mathlib topology library though (and am certainly no topologist).</p>",
        "id": 420815091,
        "sender_full_name": "Terence Tao",
        "timestamp": 1707584033
    },
    {
        "content": "<p>Two small comments on this:</p>\n<ol>\n<li>I think this has been discussed a few times before, and I think it would be nice not to keep this design discussion only in this stream, because it's an interesting discussion for Mathlib too. Of course a project like this is precisely the right settings to try out multiple approaches and give us some feedback, so don't let mathlib slow you down too much, but I think some people not subscribed to this stream may want to share some thoughts.</li>\n<li>I've had to think about related things recently, and I <em>think</em> (I have to check) that you can actually use our very general \"extension by continuity\" theorem, together with density of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">C^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span>-paths in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">C^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span>-paths, instead of doing concrete approximations. The key claim is that the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>γ</mi><mo>↦</mo><msub><mo>∫</mo><mi>γ</mi></msub><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma \\mapsto \\int_\\gamma f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7054em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2969em;vertical-align:-0.4919em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:-0.0544em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05556em;\">γ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4919em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>, defined on the set of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">C^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span>-paths, is locally uniformly continuous for the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">C^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span>-distance on the domain and the discrete distance on the codomain. So it extends to all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">C^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span>-paths, and the obtained function is still locally constant, hence invariant by any homotopy by cutting it in small pieces. I'm not claiming this is the ideal setup, and I think it's not general enough in some sense, but at least it would save you the pain of piecewise affine things...</li>\n</ol>",
        "id": 420820364,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707588110
    },
    {
        "content": "<p>Indeed, <span class=\"user-mention\" data-user-id=\"557226\">@Ian Jauslin</span> and I have a branch (which we've paused while working on PNT+) where we begin with primitives on disks (already a PR, <a href=\"https://github.com/leanprover-community/mathlib4/pull/9598\">#9598</a>), and chain those together to show that holomorphic functions on simply connected domains have primitives...</p>",
        "id": 420828768,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707595157
    },
    {
        "content": "<p>But for PNT+ applications, usual rectangle integrals suffice; so we're not waiting for the \"correct\" viewpoint of connections on bundles to be in Mathlib...</p>",
        "id": 420828875,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707595234
    },
    {
        "content": "<p>I feel <span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span>'s pain; we tried coding up keyhole contours and it was a horrible mess. That's when I switched to rectangles (again, just for now; hopefully eventually we'll be able to do it the \"right\" way...)</p>",
        "id": 420828986,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707595328
    },
    {
        "content": "<p>I'm working on 9. vertIntBoundLeft. The informal statement isn't quite right, so I'm having to slightly generalise the theorems about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∫</mo><mi mathvariant=\"double-struck\">R</mi></msub><mfrac><mn>1</mn><mrow><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><msup><mi>t</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo>+</mo><msup><mi>t</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><msup><mi mathvariant=\"normal\">∣</mi><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup></mrow></mfrac><mi>d</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\int_\\R\\frac{1}{|(1+t^2)(2+t^2)|^{1/2}}dt.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.4055em;vertical-align:-0.5604em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1264em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbb mtight\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3558em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.6146em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∣</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span><span class=\"mord mtight\"><span class=\"mord mtight\">∣</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.822em;\"><span style=\"top:-2.822em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5357em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1/2</span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5604em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span></span></span></span></p>",
        "id": 420893691,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1707661580
    },
    {
        "content": "<p>Done: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/43\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/43</a></p>",
        "id": 420903146,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1707669149
    },
    {
        "content": "<p>I had some luck working with slightly more general quadrilaterals instead of rectangles (mostly to avoid going through real and imaginary parts). Namely, I can prove this (without the sorrys):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">SegmentIntegral</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"bp\">∫</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cheat</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"n\">SegmentIntegral</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cheat'</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SegmentIntegral</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">QuadIntegral</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w₁</span> <span class=\"n\">w₂</span> <span class=\"n\">w₃</span> <span class=\"n\">w₄</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">SegmentIntegral</span> <span class=\"n\">f</span> <span class=\"n\">w₁</span> <span class=\"n\">w₂</span> <span class=\"bp\">+</span>\n    <span class=\"n\">SegmentIntegral</span> <span class=\"n\">f</span> <span class=\"n\">w₂</span> <span class=\"n\">w₃</span> <span class=\"bp\">+</span> <span class=\"n\">SegmentIntegral</span> <span class=\"n\">f</span> <span class=\"n\">w₃</span> <span class=\"n\">w₄</span> <span class=\"bp\">+</span> <span class=\"n\">SegmentIntegral</span> <span class=\"n\">f</span> <span class=\"n\">w₄</span> <span class=\"n\">w₁</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zw</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">w.re</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">I</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rect_eq_quad</span> <span class=\"o\">:</span> <span class=\"n\">RectangleIntegral</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">QuadIntegral</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">zw</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">zw</span> <span class=\"n\">w</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">loc_constant_4</span> <span class=\"o\">{</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"n\">QuadIntegral</span> <span class=\"n\">f</span> <span class=\"n\">z₁</span> <span class=\"n\">z₂</span> <span class=\"n\">z₃</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The main cheat is the assumption that the function is analytic in the whole complex plane, which makes the statement in that case less interesting, but the proof of <code>cheat</code> only assumes holomorphicity on a star-like domain based at <code>z</code> (I had it lying around from a proof that holomorphic functions on a star-like domain have primitives) and by compactness one can always find a star-like neighborhood of a segment along which <code>f</code> is analytic so this should not be a huge obstacle.</p>",
        "id": 421033911,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1707745527
    },
    {
        "content": "<p>This avoids approximation of continuous paths by polygons (with variable numbers of edges, which I would fear would be tedious to work with in Lean).</p>",
        "id": 421034689,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1707745726
    },
    {
        "content": "<p>OK I managed to show this,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nocheat</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">DifferentiableOn</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hzw</span> <span class=\"o\">:</span> <span class=\"n\">segment</span> <span class=\"n\">ℝ</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"n\">SegmentIntegral</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>which I believe is enough to obtain 3 by quadrilateral deformation with little additional pain.</p>",
        "id": 421051663,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1707749521
    },
    {
        "content": "<p>This looks fairly close to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_unitInterval_deriv_eq_sub#doc\">docs#intervalIntegral.integral_unitInterval_deriv_eq_sub</a> .</p>",
        "id": 421052618,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1707749750
    },
    {
        "content": "<p>It's very close once you know that there is a primitive, yes</p>",
        "id": 421053020,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1707749845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"585783\">Arend Mellendijk</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/420893691\">said</a>:</p>\n<blockquote>\n<p>I'm working on 9. vertIntBoundLeft. The informal statement isn't quite right, so I'm having to slightly generalise the theorems about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∫</mo><mi mathvariant=\"double-struck\">R</mi></msub><mfrac><mn>1</mn><mrow><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><msup><mi>t</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo>+</mo><msup><mi>t</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><msup><mi mathvariant=\"normal\">∣</mi><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup></mrow></mfrac><mi>d</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\int_\\R\\frac{1}{|(1+t^2)(2+t^2)|^{1/2}}dt.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.4055em;vertical-align:-0.5604em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1264em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbb mtight\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3558em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.6146em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∣</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span><span class=\"mord mtight\"><span class=\"mord mtight\">∣</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.822em;\"><span style=\"top:-2.822em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5357em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1/2</span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5604em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span></span></span></span></p>\n</blockquote>\n<p>Oh that was silly of me; we can pull back to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">ℜ</mi><mi>s</mi><mo>=</mo><mo>−</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\Re s = -2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">ℜ</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">2</span></span></span></span> (instead of -3/2) and then we're at distance 1 from the pole, so the same bound should work. Anyway, thanks for doing it!!</p>",
        "id": 421114330,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707766957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/421051663\">said</a>:</p>\n<blockquote>\n<p>OK I managed to show this,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nocheat</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">DifferentiableOn</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hzw</span> <span class=\"o\">:</span> <span class=\"n\">segment</span> <span class=\"n\">ℝ</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"n\">SegmentIntegral</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>which I believe is enough to obtain 3 by quadrilateral deformation with little additional pain.</p>\n</blockquote>\n<p>Won't you run into issues more generally of figuring out what the \"interior\" of a polygonal path is? That's why I went with rectangles; there's it's obvious and cooked into the definition... Maybe there's better API for dealing with those real and imaginary parts...?</p>",
        "id": 421114692,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707767102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/421053020\">said</a>:</p>\n<blockquote>\n<p>It's very close once you know that there is a primitive, yes</p>\n</blockquote>\n<p>Which we now do have, for discs, and work in progress for simply connected domains...</p>",
        "id": 421114776,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707767136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/421114776\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/421053020\">said</a>:</p>\n<blockquote>\n<p>It's very close once you know that there is a primitive, yes</p>\n</blockquote>\n<p>Which we now do have, for discs, and work in progress for simply connected domains...</p>\n</blockquote>\n<p>Indeed. And the standard proof for star-convex domains is exactly showing that <code>SegmentIntegral f z</code> is holomorphic.</p>",
        "id": 421140179,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1707776403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/421114692\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/421051663\">said</a>:</p>\n<blockquote>\n<p>OK I managed to show this,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nocheat</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">DifferentiableOn</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hzw</span> <span class=\"o\">:</span> <span class=\"n\">segment</span> <span class=\"n\">ℝ</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"n\">SegmentIntegral</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>which I believe is enough to obtain 3 by quadrilateral deformation with little additional pain.</p>\n</blockquote>\n<p>Won't you run into issues more generally of figuring out what the \"interior\" of a polygonal path is? That's why I went with rectangles; there's it's obvious and cooked into the definition... Maybe there's better API for dealing with those real and imaginary parts...?</p>\n</blockquote>\n<p>This should not be an issue when deforming a rectangle into another rectangle, one should just need to show that the quadrilateral remains in the domain the whole time. It might well be harder than I thought...</p>",
        "id": 421141832,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1707777196
    },
    {
        "content": "<p>Yes, for rectangles it's really not bad at all (though one does face issues with breaking into real/imaginary parts, and dealing with <code>uIcc</code>; it's a little messy, but totally doable)...</p>",
        "id": 421151531,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707781789
    },
    {
        "content": "<p>Ok, <code>RectanglePullToNhdOfPole</code> is done, <em>modulo</em> a slew of stupid lemmata called <code>RectPull_aux1</code>, <code>RectPull_aux2</code>, etc, and <code>RectPull_rectSub1</code> etc. Copilot does a decent job of automating this, drastically speeding up what is already a horrible tedium. But I wonder if there's an even better way to do all of this? (<span class=\"user-mention\" data-user-id=\"613795\">@Vláďa Sedláček</span>?) I might not wait around for the \"right\" way to do it; copilot just makes it bearable to repeat <em>almost</em> the same argument again and again...</p>",
        "id": 421670326,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708008609
    },
    {
        "content": "<p><del>I'm not sure it would help, but did you consider slicing a rectangle into just 2 parts, one of which contains the pole, along a line at the target location, as a main lemma and then applying this lemma 4 times for the 4 sides? Directly cutting into 9 subset does sound kind of tedious to do.</del> Ah sorry I was reading an old version of the file</p>",
        "id": 421686990,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708012874
    },
    {
        "content": "<p>Yep, that's exactly what happens now. But there are still so many tedious inclusions to verify about where exactly the pole wound up...</p>",
        "id": 421689131,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708013441
    },
    {
        "content": "<p>The nine pieces are \"obviously\" (almost) disjoint and the pole is \"obviously\" in the small one so it is \"obviously\" not in the others ... the current file is indeed a bit painful to look at :-(</p>",
        "id": 421690227,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708013722
    },
    {
        "content": "<p>Any suggestions for how to make Lean see that it's \"obvious\"...?</p>",
        "id": 421690688,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708013832
    },
    {
        "content": "<p>I have a 36-line proof of <code>RectPull_rectSub1</code>(which I'm sure can be optimized further). I'll try to generalize it to the other cases, or maybe see if it could be made into a uniform tactic.</p>",
        "id": 421727556,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1708026075
    },
    {
        "content": "<p>Are you using <code>RectSubRect</code> or <code>RectSubRect'</code>?...</p>",
        "id": 421730727,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708027204
    },
    {
        "content": "<p>There're only four of those; there're sixteen of the <code>RectPull_aux1</code>s... After applying <code>ContinuousOn.intervalIntegrable</code>, it should be very similar to <code>ContinuousOn.im_aux_1</code> from <a href=\"https://github.com/leanprover-community/mathlib4/pull/9598\">#9598</a>...</p>",
        "id": 421731086,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708027323
    },
    {
        "content": "<p>Maybe they're the ones better to automate somehow...</p>",
        "id": 421731179,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708027346
    },
    {
        "content": "<p>BTW, I realized that the hypothesis here is <code>HolomorphicOn f (Rectangle z w \\ {p})</code> rather than holomorphic on an open set containing <code>Rectangle z w \\ {p}</code>. Would the version on an open set be sufficient for applications later?</p>",
        "id": 421735663,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708029124
    },
    {
        "content": "<p>Hmmm sure, you can make the domain of holomorphicity larger... but why would you want to? (I'm missing something)</p>",
        "id": 421735869,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708029231
    },
    {
        "content": "<p>Because that would be the natural setup for homotopy arguments (you would like the rectangle boundary to be a continuous path inside the open set where the function is holomorphic)</p>",
        "id": 421736141,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708029349
    },
    {
        "content": "<p>That reminds me: <span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span>, did we ever show you how far we got with integrals of holomorphic functions over homotopic curves are equal? There's some decent progress here: <a href=\"https://github.com/ianjauslin-rutgers/lean-complex-has_primitives/blob/AK_branch/HasPrimitives/PrimitivesOfSimplyConnected.lean\">https://github.com/ianjauslin-rutgers/lean-complex-has_primitives/blob/AK_branch/HasPrimitives/PrimitivesOfSimplyConnected.lean</a>, see <code>curvInt_eq_of_diffHomotopic</code> (Progress paused until PNT+ is done...)</p>",
        "id": 421742598,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708031899
    },
    {
        "content": "<p>Based on your RMT work, of course</p>",
        "id": 421742739,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708031967
    },
    {
        "content": "<p>In particular, do we have something close to <code>DifferentiablyHomotopic_of_OpenHomotopic</code> there ...?</p>",
        "id": 421742875,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708032022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"613795\">@Vláďa Sedláček</span>, I just merged <code>mem_Rect</code> which might be useful?... (Should've thought to add it before; likely quite a lot can be refactored with it...)</p>",
        "id": 421750505,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708035466
    },
    {
        "content": "<p>FYI: I'll try my luck at <code>diffBddAtZero</code> next (10). I can't seem to edit the zulip post without getting that same annoying \"Error editing message: Unable to render message\" ...</p>",
        "id": 421751064,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708035733
    },
    {
        "content": "<p>I'll try golfing the aux stuff. <code>fun_prop</code> works for one of the side conditions: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/52/files\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/52/files</a></p>\n<p>The MapsTo part I'm not sure if there is a tactic but I'll see if I can combine some of the aux lemmas and/or extract something involving MapsTo uIcc Rectangle</p>",
        "id": 421777635,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708051858
    },
    {
        "content": "<p>I was thinking it might be useful to keep track of the fact that, e.g., <code>z.re &lt; p.re - c &lt; p.re + c &lt; w.re</code>, and same for imaginary parts... But go ahead, <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span>, I'm curious what you'll come up with...</p>",
        "id": 421781147,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708054370
    },
    {
        "content": "<p>Well so far, I've pushed the hard work to <code>RectPull_rectSub1</code> et al:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mapsTo_left_edge</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MapsTo</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">[[</span><span class=\"n\">z.im</span><span class=\"o\">,</span> <span class=\"n\">w.im</span><span class=\"o\">]]</span> <span class=\"o\">(</span><span class=\"n\">Rectangle</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]⟩</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">fun_prop</span><span class=\"o\">]</span> <span class=\"n\">Complex.continuous_ofReal</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">RectPull_aux1</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">zRe_lt_wRe</span> <span class=\"o\">:</span> <span class=\"n\">z.re</span> <span class=\"bp\">&lt;</span> <span class=\"n\">w.re</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zIm_lt_wIm</span> <span class=\"o\">:</span> <span class=\"n\">z.im</span> <span class=\"bp\">&lt;</span> <span class=\"n\">w.im</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Rectangle</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">Rectangle</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fCont</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Rectangle</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}))</span> <span class=\"o\">:</span>\n    <span class=\"n\">IntervalIntegrable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"n\">volume</span> <span class=\"n\">z.im</span> <span class=\"o\">(</span><span class=\"n\">p.im</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">fCont.comp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">fun_prop</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">intervalIntegrable</span>\n  <span class=\"n\">refine</span> <span class=\"n\">MapsTo.mono_right</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">RectPull_rectSub1</span> <span class=\"n\">zRe_lt_wRe</span> <span class=\"n\">zIm_lt_wIm</span> <span class=\"n\">cpos</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n  <span class=\"n\">convert</span> <span class=\"n\">mapsTo_left_edge</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Your comment could become very relevant if/when I also golf the <code>rectSub</code> lemmas. Maybe there is some general lemma that can be derived from <code>p ∈ Rectangle (-c - I * c + p) (c + I * c + p)</code>, i.e. <code>(h1 : Rectangle a b ⊆ Rectangle c d) (h2 : p ∈ Rectangle a b) : Rectangle ?? ?? ⊆ Rectangle c d \\ {p}</code></p>",
        "id": 421782014,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708054954
    },
    {
        "content": "<p>I got it sorry-free: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/54\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/54</a></p>\n<p>I added some lemmas that help, but there is still repetition. I think this is about as much time as I have for now though.</p>",
        "id": 421803269,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708068037
    },
    {
        "content": "<p>I would like to have a go at <code>ResidueTheoremOnRectangleWithSimplePole</code> (and try some refactoring of the file), but it is not listed as claimable. Is anyone working on it or planning to do so?</p>",
        "id": 421898350,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708101964
    },
    {
        "content": "<p>Oh that's (5), right? <span class=\"user-mention\" data-user-id=\"571592\">@Paul Nelson</span> and I are hacking away at that one.</p>",
        "id": 421902679,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708103433
    },
    {
        "content": "<p>in fact, we're looking to develop API for things like <code>RectangleBorderIntegrable</code> so that we no longer need 16 auxiliary integrability statements... (Coming soon...)</p>",
        "id": 421902777,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708103470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/421902777\">said</a>:</p>\n<blockquote>\n<p>in fact, we're looking to develop API for things like <code>RectangleBorderIntegrable</code> so that we no longer need 16 auxiliary integrability statements... (Coming soon...)</p>\n</blockquote>\n<p>That would be nice :-)</p>",
        "id": 421902974,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708103532
    },
    {
        "content": "<p>You're more than welcome to join us, if you'd like? We just finished a session - Paul, do you want to point Vincent to where your fork is?</p>",
        "id": 421902990,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708103537
    },
    {
        "content": "<p>sure, <a href=\"https://github.com/ultronozm/PrimeNumberTheoremAnd\">https://github.com/ultronozm/PrimeNumberTheoremAnd</a></p>",
        "id": 421903125,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1708103586
    },
    {
        "content": "<p>Great thanks; so Vincent, you can see some progress <a href=\"https://github.com/ultronozm/PrimeNumberTheoremAnd/blob/main/PrimeNumberTheoremAnd/ResidueCalcOnRectangles.lean\">here</a>, around line 317, and more starting line 1067...</p>",
        "id": 421903748,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708103780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/421902777\">said</a>:</p>\n<blockquote>\n<p>in fact, we're looking to develop API for things like <code>RectangleBorderIntegrable</code> so that we no longer need 16 auxiliary integrability statements... (Coming soon...)</p>\n</blockquote>\n<p>Brilliant! I can golf down my work from yesterday</p>",
        "id": 421919829,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708109603
    },
    {
        "content": "<p>(6), i.e. RectangleIntegral_tendsTo_UpperU and RectangleIntegral_tendsTo_LowerU , are still up for the taking, right? I can try those.</p>",
        "id": 421925081,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1708111808
    },
    {
        "content": "<p>Great, thanks Vlada! They're yours.</p>",
        "id": 421928993,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708113334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/421919829\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/421902777\">said</a>:</p>\n<blockquote>\n<p>in fact, we're looking to develop API for things like <code>RectangleBorderIntegrable</code> so that we no longer need 16 auxiliary integrability statements... (Coming soon...)</p>\n</blockquote>\n<p>Brilliant! I can golf down my work from yesterday</p>\n</blockquote>\n<p>This is done (0 aux lemmas, also added/golfed a few other more general lemmas): <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/57\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/57</a></p>",
        "id": 421967387,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708137183
    },
    {
        "content": "<p>draft started for <code>first_fourier</code>: <br>\n<a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/58/files\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/58/files</a></p>",
        "id": 421973384,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708142966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/421967387\">said</a>:</p>\n<blockquote>\n<p>This is done (0 aux lemmas, also added/golfed a few other more general lemmas): <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/57\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/57</a></p>\n</blockquote>\n<p>Beautiful!! You read my mind (and executed better than I could have)</p>",
        "id": 422011548,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708176705
    },
    {
        "content": "<p>It seems to me that the concept of <code>Square</code> is quite useful too. Shall we add some API for it? I just pushed a start...</p>",
        "id": 422023131,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708185609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/422023131\">said</a>:</p>\n<blockquote>\n<p>It seems to me that the concept of <code>Square</code> is quite useful too. Shall we add some API for it? I just pushed a start...</p>\n</blockquote>\n<p>It sounds useful for <span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> on <code>ResidueTheoremOnRectangleWithSimplePole</code>. I also suspect the bulk of <code>RectanglePullToNhdsOfPole</code> (i.e. the part after <code>filter_upwards</code> and <code>intro</code>) will want to be factored out into a lemma that equates arbitrary nested rectangles instead of just the <code>Eventually</code>. That way we can precisely pull in and out.</p>",
        "id": 422036521,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708197782
    },
    {
        "content": "<p>Oh, while <code>Rectangle</code> is symmetric in <code>z</code> and <code>w</code>, <code>RectangleIntegral</code> is <em>not</em>, because <code>IntervalIntegral</code> is oriented…. So <code>rectangleIntegral_symm</code> needs a minus sign…</p>",
        "id": 422057012,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708220387
    },
    {
        "content": "<p>PR has been fixed</p>",
        "id": 422057533,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708221113
    },
    {
        "content": "<p>And FYI there's a bit of API for <code>uIoo</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9598\">#9598</a>, in case it might be useful...</p>",
        "id": 422063186,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708228217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/421973384\">said</a>:</p>\n<blockquote>\n<p>draft started for <code>first_fourier</code>: <br>\n<a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/58/files\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/58/files</a></p>\n</blockquote>\n<p>this (\"13. First Fourier Identity\") is finished</p>",
        "id": 422082271,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708247923
    },
    {
        "content": "<p>I'm trying out 11. <code>sigmaNegOneHalfPull</code></p>",
        "id": 422101775,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1708266591
    },
    {
        "content": "<p>Here it is: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/63\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/63</a><br>\nI originally missed <code>DiffVertRect_eq_UpperLowerUs</code>, but combining ideas did lead to a nice golf.</p>",
        "id": 422114379,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1708277624
    },
    {
        "content": "<p>started <code>residuePull1</code>: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/65\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/65</a></p>",
        "id": 422123676,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708285665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/422123676\">said</a>:</p>\n<blockquote>\n<p>started <code>residuePull1</code>: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/65\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/65</a></p>\n</blockquote>\n<p>done (build fixed by <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/64\">other PR</a>)</p>",
        "id": 422126589,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708288160
    },
    {
        "content": "<p>Based on the work by <span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> and <span class=\"user-mention\" data-user-id=\"571592\">@Paul Nelson</span> I got <code>ResidueTheoremOnRectangleWithSimplePole</code> almost sorry-free (and also <code>eventually</code>-free, because in fact it does not use <code>RectanglePullToNhdOfPole</code> directly)<br>\n<a href=\"https://github.com/ultronozm/PrimeNumberTheoremAnd/pull/1\">https://github.com/ultronozm/PrimeNumberTheoremAnd/pull/1</a></p>",
        "id": 422142558,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708303025
    },
    {
        "content": "<p>It boils down to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ResidueTheoremInRectangle</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Rectangle</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">RectangleIntegral'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>which is very close to <code>ResidueTheoremAtOrigin</code>, the blueprint indicates a proof of this by shrinking to a square neighborhood and using <code>ResidueTheoremAtOrigin</code> but it feels possible to instead adapt the proof of <code>ResidueTheoremAtOrigin</code> to the more general case instead.</p>",
        "id": 422142815,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708303302
    },
    {
        "content": "<p>started a draft on \"14. Second Fourier identity\":<br>\n<a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/66\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/66</a></p>",
        "id": 422149477,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708309521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/422142558\">said</a>:</p>\n<blockquote>\n<p>Based on the work by <span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> and <span class=\"user-mention silent\" data-user-id=\"571592\">Paul Nelson</span> I got <code>ResidueTheoremOnRectangleWithSimplePole</code> almost sorry-free (and also <code>eventually</code>-free, because in fact it does not use <code>RectanglePullToNhdOfPole</code> directly)<br>\n<a href=\"https://github.com/ultronozm/PrimeNumberTheoremAnd/pull/1\">https://github.com/ultronozm/PrimeNumberTheoremAnd/pull/1</a></p>\n</blockquote>\n<p>might be worth re-opening the PR to <code>AlexKontorovich:main</code> as GitHub will show the (much smaller) real diff (i.e. <code>git diff origin/main vbeffara/pn_main</code>)</p>",
        "id": 422149981,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708309982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> the following suffices for <code>HolomorphicOn.rectangleBorderIntegrable'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Set.left_not_mem_uIoo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">Set.uIoo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">left_lt_sup.mp</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_le</span> <span class=\"o\">(</span><span class=\"n\">inf_lt_left.mp</span> <span class=\"n\">h1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.right_not_mem_uIoo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∉</span> <span class=\"n\">Set.uIoo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">right_lt_sup.mp</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_le</span> <span class=\"o\">(</span><span class=\"n\">inf_lt_right.mp</span> <span class=\"n\">h1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.ne_left_of_mem_uIoo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.uIoo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">Set.left_not_mem_uIoo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.ne_right_of_mem_uIoo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.uIoo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">Set.right_not_mem_uIoo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_mem_rectangleBorder_of_rectangle_mem_nhds</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Rectangle</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">p</span> <span class=\"bp\">∉</span> <span class=\"n\">RectangleBorder</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Set.disjoint_right.mp</span> <span class=\"o\">(</span><span class=\"n\">rectangleBorder_disjoint_singleton</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">rectangle_mem_nhds_iff.mp</span> <span class=\"n\">hp</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Set.ne_left_of_mem_uIoo</span> <span class=\"n\">h1.1</span><span class=\"o\">,</span> <span class=\"n\">Set.ne_right_of_mem_uIoo</span> <span class=\"n\">h1.1</span><span class=\"o\">,</span>\n    <span class=\"n\">Set.ne_left_of_mem_uIoo</span> <span class=\"n\">h1.2</span><span class=\"o\">,</span> <span class=\"n\">Set.ne_right_of_mem_uIoo</span> <span class=\"n\">h1.2</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">HolomorphicOn.rectangleBorderIntegrable'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">HolomorphicOn</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Rectangle</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}))</span>\n    <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Rectangle</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">nhds</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RectangleBorderIntegrable</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n  <span class=\"n\">hf.continuousOn.rectangleBorderNoPIntegrable</span> <span class=\"o\">(</span><span class=\"n\">not_mem_rectangleBorder_of_rectangle_mem_nhds</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 422152163,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708311827
    },
    {
        "content": "<p>I proved your new theorem <span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> : <a href=\"https://github.com/vbeffara/PNT/pull/1\">https://github.com/vbeffara/PNT/pull/1</a></p>",
        "id": 422165885,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708321813
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> ! PR here <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/67\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/67</a> and the proof of <code>ResidueTheoremOnRectangleWithSimplePole</code> is completely sorry-free.</p>",
        "id": 422191993,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708334597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/422149477\">said</a>:</p>\n<blockquote>\n<p>started a draft on \"14. Second Fourier identity\":<br>\n<a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/66\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/66</a></p>\n</blockquote>\n<p>this is done as well</p>",
        "id": 422192391,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708334730
    },
    {
        "content": "<p>Argh! I'm still getting that annoying \"Error editing message: Unable to render message\", so can't update the outstanding tasks list. Anyway, it's time for a new one. I think at the speed with which you guys are solving goals (I've had to download github and zulip to my phone, and approve pull requests while chauffeuring my  kids over the weekend!...), I should release my claim on 10. <code>diffBddAtZero</code>, and start making more precise targets in the blueprint. I made a bit of progress on <code>diffBddAtZero</code>, but there's some interesting API that needs to be developed (I think) between <code>bddAbove</code> and <code>IsBigO</code>.</p>",
        "id": 422231533,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708348883
    },
    {
        "content": "<p>Here's an interesting bit of API:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">DifferentiableAt.bddAboveOnSquare</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z₀</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fDiffble</span> <span class=\"o\">:</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">z₀</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀ᶠ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">BddAbove</span> <span class=\"o\">((</span><span class=\"n\">norm</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">z₀</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">z₀</span><span class=\"o\">)))</span> <span class=\"bp\">''</span> <span class=\"n\">Square</span> <span class=\"n\">z₀</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">fDiffble.hasDerivAt</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hasDerivAt_iff_tendsto</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Tendsto.isBigO_one</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422232343,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708349185
    },
    {
        "content": "<p>Basically one needs (which should be useful elsewhere as well) that <code>Square</code>s interlace with metric balls, so that a <code>Tendsto</code> argument with <code>s</code> in <code>𝓝 0</code> can be converted into an eventually for <code>s</code> in a square with side length <code>c</code> in <code>𝓝[&gt;]0</code>.... Does that make sense?</p>",
        "id": 422232744,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708349319
    },
    {
        "content": "<p>Then one applies this to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>↦</mo><msup><mi>x</mi><mi>s</mi></msup></mrow><annotation encoding=\"application/x-tex\">s\\mapsto x^s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span>, to see that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>s</mi></msup><mi mathvariant=\"normal\">/</mi><mi>s</mi><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">x^s/s - 1/s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">s</span></span></span></span> is bounded near 0. (Then add that to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>s</mi></msup><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x^s/(1+s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> being bounded near zero.)</p>",
        "id": 422232864,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708349367
    },
    {
        "content": "<p>The same argument will work for <code>diffBddAtNegOne</code>...</p>",
        "id": 422232910,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708349386
    },
    {
        "content": "<p>Probably an interesting spelling for interlacement would be to say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nhds_basis_square</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasBasis</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Square</span> <span class=\"n\">p</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>rather than explicit comparison with metric balls</p>",
        "id": 422233903,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708349754
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nhds_basis_square</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasBasis</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Square</span> <span class=\"n\">p</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Filter.HasBasis.to_hasBasis'</span> <span class=\"n\">Metric.nhds_basis_closedBall</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">hc</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">div_pos</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt_pos.mpr</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">convert</span> <span class=\"n\">square_subset_closedBall</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">abs_div</span><span class=\"o\">,</span> <span class=\"n\">abs_eq_self.mpr</span> <span class=\"n\">hc.le</span><span class=\"o\">,</span> <span class=\"n\">abs_eq_self.mpr</span> <span class=\"o\">(</span><span class=\"n\">sqrt_nonneg</span> <span class=\"mi\">2</span><span class=\"o\">)]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">rectangle_mem_nhds_iff.mpr</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mem_reProdIm</span><span class=\"o\">,</span> <span class=\"n\">uIoo</span><span class=\"o\">,</span> <span class=\"n\">hc.ne</span><span class=\"o\">,</span> <span class=\"n\">hc.ne.symm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 422240161,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708351590
    },
    {
        "content": "<p>Would it be easier to use the homeomorphism between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo>×</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}\\times\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> and pull back the filter basis?</p>",
        "id": 422240989,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708351828
    },
    {
        "content": "<p>I implemented <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> 's suggestion here: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/70/files\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/70/files</a></p>",
        "id": 422316161,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708382549
    },
    {
        "content": "<p>We should have some filter magic to make that even shorter, but it’s probably not the most fun task of the project. Do you want me to have a go at golfing it tomorrow ?</p>",
        "id": 422316512,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708382768
    },
    {
        "content": "<p>Go for it!</p>",
        "id": 422316856,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708382970
    },
    {
        "content": "<p>How can you write “filter magic” and “not fun” in the same sentence? What happened to you while I was away??</p>",
        "id": 422319238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708384191
    },
    {
        "content": "<p>I meant \"not fun if you don’t know the tricks\" of course! Although one could maybe argue that I’m trying to keep the fun for myself…</p>",
        "id": 422320064,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708384817
    },
    {
        "content": "<p>I understand better now.</p>",
        "id": 422321328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708385868
    },
    {
        "content": "<p>I managed to golf it from 12 to 9 lines. That's probably the limit of my filter skills <span aria-label=\"woozy face\" class=\"emoji emoji-1f974\" role=\"img\" title=\"woozy face\">:woozy_face:</span></p>",
        "id": 422326004,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708389586
    },
    {
        "content": "<p>I've got something cooking for <code>diffBddAtZero</code> <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/71/files\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/71/files</a> should be finished up soon</p>",
        "id": 422348206,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708406307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/422348206\">said</a>:</p>\n<blockquote>\n<p>I've got something cooking for <code>diffBddAtZero</code> <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/71/files\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/71/files</a> should be finished up soon</p>\n</blockquote>\n<p>done</p>",
        "id": 422352824,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708408725
    },
    {
        "content": "<p>As an experiment I wrote a direct proof of this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ResidueTheoremInRectangle'</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">zRe_le_wRe</span> <span class=\"o\">:</span> <span class=\"n\">z.re</span> <span class=\"bp\">≤</span> <span class=\"n\">w.re</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zIm_le_wIm</span> <span class=\"o\">:</span> <span class=\"n\">z.im</span> <span class=\"bp\">≤</span> <span class=\"n\">w.im</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">pInRectInterior</span> <span class=\"o\">:</span> <span class=\"n\">Rectangle</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RectangleIntegral'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>(which is exactly <code>ResidueTheoremInRectangle</code> without the <code>fHolo</code> assumption, which derives from the others anyway). Direct in the sense, compute the 4 side integrals in terms of logs and arctangents and show explicit cancellation using mostly <code>ring_nf</code> interlaced with <code>simp</code>. The proof is not going to win any beauty contest but it is rather short (about 90 lines total, which is similar to that of <code>ResidueTheoremAtOrigin</code>) and not as painful as I would have imagined at first, and it does not rely on <code>RectanglePullToNhdOfPole</code> or rectangle-slicing at all.</p>\n<p><a href=\"https://github.com/vbeffara/PNT/blob/af0f9203291ff98be39b57ef190eda9c48f4589a/PrimeNumberTheoremAnd/ResidueCalcOnRectangles.lean#L978\">https://github.com/vbeffara/PNT/blob/af0f9203291ff98be39b57ef190eda9c48f4589a/PrimeNumberTheoremAnd/ResidueCalcOnRectangles.lean#L978</a></p>",
        "id": 422391658,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708426295
    },
    {
        "content": "<p>Curiously, that <em>was</em> my first version (on paper, when designing the blueprint)! But I didn't want to deal with complex logs, and eventually discovered that everything just perfectly cancels out for squares!... (So then one only needs arctan and real integrals... Hence the cutting of rectangles down to squares...)</p>",
        "id": 422432902,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708440534
    },
    {
        "content": "<p>I'm in the process of making a new list of Tasks and filling out more of the blueprint. (But hosting a visitor all day today, and traveling to give a colloquium all day tomorrow; will try to get it up and running as soon as I can...)</p>",
        "id": 422433258,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708440622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"613795\">Vláďa Sedláček</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/421925081\">said</a>:</p>\n<blockquote>\n<p>(6), i.e. RectangleIntegral_tendsTo_UpperU and RectangleIntegral_tendsTo_LowerU , are still up for the taking, right? I can try those.</p>\n</blockquote>\n<p>This is done: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/72\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/72</a></p>",
        "id": 422446215,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1708444005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/422432902\">said</a>:</p>\n<blockquote>\n<p>Curiously, that <em>was</em> my first version (on paper, when designing the blueprint)! But I didn't want to deal with complex logs, and eventually discovered that everything just perfectly cancels out for squares!... (So then one only needs arctan and real integrals... Hence the cutting of rectangles down to squares...)</p>\n</blockquote>\n<p>Only real logs :-) I will see if it makes sense to refactor all the <code>ResidueTheoremAtOrigin_aux**</code> lemmas.</p>\n<p>On a semi-related theme: is there an established or natural place in blueprints to put \"strategy comments\" like this? Typically <em>we chose this avenue to formalize the result, another one would have been to do this, that and the other thing instead but that would lead to such and such technical issue which our approach is bypassing</em>.</p>",
        "id": 422455092,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1708446516
    },
    {
        "content": "<p>Very good question!  I suppose it never hurts to add some auxiliary comments/\"notes to self\" in the blueprint...? As is, we're already duplicating (or rather, triplicating) work by having three different approaches to PNT itself...</p>",
        "id": 422478690,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708454260
    },
    {
        "content": "<p>Technically PerronFormula.lean only uses the result on squares since it is already pulling the rectangle to get the bddAbove, and it could even bypass that pull by adjusting sigmaNegOneHalfPull to cut down to arbitrary squares. The more lemmas the merrier though, I think.</p>",
        "id": 422492534,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708459424
    },
    {
        "content": "<p>I'll go for <code>residuePull2</code> next if nobody's working on it yet.</p>",
        "id": 422626380,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1708524776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"613795\">Vláďa Sedláček</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/422626380\">said</a>:</p>\n<blockquote>\n<p>I'll go for <code>residuePull2</code> next if nobody's working on it yet.</p>\n</blockquote>\n<p>Done: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/76\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/76</a> (thanks to <span class=\"user-mention\" data-user-id=\"557226\">@Ian Jauslin</span>  for a helpful discussion). PerronFormula is now sorry-free.</p>",
        "id": 422728202,
        "sender_full_name": "Vláďa Sedláček",
        "timestamp": 1708563060
    },
    {
        "content": "<p>I have a golf that removes the dependency on U integral work, although I keep the general U integral lemmas: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/77\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/77</a></p>",
        "id": 422780359,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708595116
    }
]