[
    {
        "content": "<p>Hi, I was trying to bump mathlib to get access to Fourier inversion and new lemmas about Fourier transform, but mathlib commit #ba66cf768d is breaking things because it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>while EulerProducts says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">LSeriesHasSum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">HasSum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>which does not match. We should probably use <code>LSeriesHasSum</code> from mathlib, but that might be a bit painful. <span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> is the <code>if n = 0 then 0 else</code> really useful in your definition?</p>",
        "id": 425045604,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1709718830
    },
    {
        "content": "<p>Ah, should have updated all packages together, sorry.</p>",
        "id": 425047896,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1709719346
    },
    {
        "content": "<p><code>first_fourier</code> in PNT does need to be updated though</p>",
        "id": 425048979,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1709719708
    },
    {
        "content": "<p>I do my best to keep <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts\">EulerProducts</a> in sync with Mathlib, so in general it should work if you use the current version of EulerProducts. It is a moving target, though, as I'm in the process of getting a large part of it into Mathlib.</p>",
        "id": 425067905,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709725742
    },
    {
        "content": "<p>Ok so I’m in the process of rewriting Wiener.lean to use LSeries.term and it is mostly working out well. The main issue is that you only define it for arithmetic functions with values in C but we need it with values in R sometimes.</p>",
        "id": 425082541,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1709730676
    },
    {
        "content": "<p>I'm going to define notation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- We introduce notation `↗f` for `f` interpreted as a function `ℕ → ℂ`. -/</span>\n<span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">LSeries.notation</span><span class=\"o\">]</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"↗\"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then you can write <code>↗f</code>as an argument when <code>f : ℕ → ℝ</code>. This notation is already in <code>EulerProducts.LSeries</code>.</p>",
        "id": 425090992,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709733235
    },
    {
        "content": "<p>Done here <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/110\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/110</a></p>",
        "id": 425095127,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1709734241
    }
]