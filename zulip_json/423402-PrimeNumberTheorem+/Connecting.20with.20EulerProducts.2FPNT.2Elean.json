[
    {
        "content": "<p>I had a quick look at the very last statement in our <code>Wiener.lean</code> file (i.e. the PNT itself), and how to obtaining by connecting what we have for now and the proof in <code>EulerProduct</code>. There is a mismatch between <code>WienerIkeharaTheorem</code> in <code>EulerProducts/PNT.lean</code> and <code>WienerIkeharaTheorem'</code> in <code>Wiener.lean</code>, in two places:</p>\n<ul>\n<li>We use <code>ArithmeticFunction</code> while EulerProducts uses plain maps from N to C. This does not really matter, a few of our lemmas do use the face that <code>f 0 = 0</code> but the asymptotics are not affected, and it is easy to adapt</li>\n<li>We carry around the <code>hcheby</code> bound everywhere, and it is not present in the <code>EulerProducts</code> version, so it might look that our version of Wiener-Ikehara is weaker than needed. I am hoping that this bound can be obtained from the asymptotics of the function <code>F</code> at the pole and positivity of the coefficients (without having had much time to think about how), otherwise we will need it for <code>\\Lambda</code> but that will make the direct use of EulerProducts as it is written now impossible.</li>\n</ul>\n<p>Am I missing something obvious?</p>",
        "id": 430506660,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1711918337
    },
    {
        "content": "<p>As far as I can see, <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/docs/PrimeNumberTheoremAnd/Wiener.html#WienerIkeharaTheorem'\">WienerIkeharaTheorem'</a> is identical (modulo the <code>ArithmeticFunction ℝ</code> vs. <code>ℕ → ℝ</code> issue) with <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts/blob/main/EulerProducts/PNT.lean#L17\">WienerIkeharaTheorem</a>. Am I missing something?</p>",
        "id": 430508444,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711920100
    },
    {
        "content": "<p>You're right, strictly speaking the blueprint is establishing a slightly weaker version of the Wiener-Ikehara theorem in which a Chebyshev-type bound is assumed.  It can be eliminated with a little bit more work, but I had thought to avoid this since the Chebyshev bound is relatively easy to establish in practice (I believe for instance that the unit fractions project already has a proof of it, and I think someone has even proven a stronger bound of Brun-Titchmarsh type using the Selberg sieve).  However, if one really wanted to get the \"full\" Wiener-Ikehara, one can argue as follows.</p>\n<p>(1)  Establish a variant of <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#limiting\">Limiting Fourier identity</a> in which the Chebyshev bound is not assumed, but instead <code>f</code> and the Fourier transform of psi assumed to be non-negative.  This is the same proof, but uses monotone convergence instead of dominated convergence.</p>\n<p>(2) By choosing a suitable psi that is both nonnegative and has nonnegative Fourier transform , use this variant to establish a bound of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>x</mi><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>2</mn><mi>x</mi></mrow></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>≪</mo><mi>x</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\"> \\sum_{x \\leq n \\leq 2x} f(n) \\ll x.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≤</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span></span></span></span></p>\n<p>(3) Perform a dyadic decomposition to conclude the Chebyshev bound.</p>\n<p>I guess the question is whether the extra effort to establish steps (1)-(3) is worth it.</p>",
        "id": 430508837,
        "sender_full_name": "Terence Tao",
        "timestamp": 1711920453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/430508444\">said</a>:</p>\n<blockquote>\n<p>As far as I can see, <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/docs/PrimeNumberTheoremAnd/Wiener.html#WienerIkeharaTheorem'\">WienerIkeharaTheorem'</a> is identical (modulo the <code>ArithmeticFunction ℝ</code> vs. <code>ℕ → ℝ</code> issue) with <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts/blob/main/EulerProducts/PNT.lean#L17\">WienerIkeharaTheorem</a>. Am I missing something?</p>\n</blockquote>\n<p>There used to be an <code>hcheby</code> hypothesis (assuming a Chebyshev type bound <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≤</mo><mi>x</mi></mrow></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>≪</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_{n \\leq x} f(n) \\ll x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1455em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> on the Dirichlet series coefficients) as an ambient <code>variable</code> before <code>WienerIkeharaTheorem'</code> (and many other precursor results), but it is in the process of being moved to the individual lemmas.  We haven't yet got to doing so for the Wiener Ikehara theorem itself though.</p>",
        "id": 430532850,
        "sender_full_name": "Terence Tao",
        "timestamp": 1711941917
    },
    {
        "content": "<p>Ah OK; I would have expected  the ambient <code>variable</code> mentioned in what the doc file shows, and I didn't see it there.</p>\n<p>Of course, it would be nice to have the stronger version of Wiener-Ikehara available, but if we have the necessary estimate for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span></span></span></span> anyway, it will be easy to modify the current proof of PNT using <code>WienerIkeharaTheroem</code> to use the weaker variant.</p>",
        "id": 430575012,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711967991
    },
    {
        "content": "<p>I think that using positivity and evaluating the L function at 1+epsilon/n we can use the behavior of the function F to obtain the Chebychev condition directly, with C equal to constant times the residue at 1.</p>",
        "id": 430604581,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1711982816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/430508837\">said</a>:</p>\n<blockquote>\n<p>You're right, strictly speaking the blueprint is establishing a slightly weaker version of the Wiener-Ikehara theorem in which a Chebyshev-type bound is assumed.  It can be eliminated with a little bit more work, but I had thought to avoid this since the Chebyshev bound is relatively easy to establish in practice (I believe for instance that the unit fractions project already has a proof of it, and I think someone has even proven a stronger bound of Brun-Titchmarsh type using the Selberg sieve).  </p>\n</blockquote>\n<p>Indeed, there was a discussion of the Selberg sieve <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Brun-Titchmarsh.20type.20theorem.20for.20Theorem.2012/near/419356248\">here</a>. In the \"MediumPNT\" approach, it's no longer needed, now that we're aiming for an error that beats any power of log (so we can afford to lose a log here).</p>",
        "id": 430632880,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1711992193
    },
    {
        "content": "<p>Given this is the second time it's come up, I'd be very happy to just PR the sieve estimate.</p>",
        "id": 430634105,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1711992689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/430604581\">said</a>:</p>\n<blockquote>\n<p>I think that using positivity and evaluating the L function at 1+epsilon/n we can use the behavior of the function F to obtain the Chebychev condition directly, with C equal to constant times the residue at 1.</p>\n</blockquote>\n<p>I think this sort of Rankin trick argument gives a weak Mertens bound <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≤</mo><mi>x</mi></mrow></msub><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>n</mi><mo>≪</mo><mi>log</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_{n \\leq x} \\Lambda(n)/n \\ll \\log x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1455em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, but doesn't easily give a Chebyshev bound <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≤</mo><mi>x</mi></mrow></msub><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>≪</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_{n \\leq x} \\Lambda(n) \\ll x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1455em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>.</p>",
        "id": 430676335,
        "sender_full_name": "Terence Tao",
        "timestamp": 1712011526
    },
    {
        "content": "<p>Ah, you are right of course, my plan was overly optimistic :-(</p>",
        "id": 430732463,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712044667
    },
    {
        "content": "<p>Here is the easy part of the gluing, just taking care of the discrepancy between <code>\\N \\to \\R</code> and <code>ArithmeticFunction</code> (and assuming <code>WienerIkeharaTheorem'</code> without the <code>hcheby</code> assumption). Just to remove the number of sorries, but mathematically empty.</p>",
        "id": 430867965,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712089737
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">WeakPNT</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"o\">((</span><span class=\"n\">Finset.range</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">PNT_vonMangoldt</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">A</span> <span class=\"n\">F</span> <span class=\"n\">f_nonneg</span> <span class=\"n\">hF</span> <span class=\"n\">hF'</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">ff_nonneg</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">ff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">f_nonneg</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">l2</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">=</span>  <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">LSeries</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">ff</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">LSeries</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">s</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">LSeries</span><span class=\"o\">,</span> <span class=\"n\">l2</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">l3</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset.sum</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Finset.sum</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_eq_sum_diff_singleton_add</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_congr</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hi</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">l4</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">atTop</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Finset.sum</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">eventually_gt_atTop</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">l3</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">sub_div</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">l5</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">WienerIkeharaTheorem'</span> <span class=\"n\">ff</span> <span class=\"n\">A</span> <span class=\"n\">F</span> <span class=\"n\">ff_nonneg</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">l1</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hF</span><span class=\"o\">)</span> <span class=\"n\">hF'</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">l5.congr'</span> <span class=\"n\">l4</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">tendsto_const_div_atTop_nhds_zero_nat</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 430867999,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712089752
    },
    {
        "content": "<p>The glue should rather go right after one of the limit theorems, so that the contents of the actual proof of <code>WeakPNT</code> can be more serious.</p>",
        "id": 430868205,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712089833
    },
    {
        "content": "<p>OK... so in conjunction with Arend's PR of the Brun-Titchmarsh inequality <code>primesBetween_le</code>, we should have a relatively cheap way to get from <code>WienerIkeharaTheorem</code> to <code>WeakPNT</code> since <code>hcheby</code> is now available.  It still might be nice to deduce the full Wiener-Ikehara Theorem from the weak one in the blueprint, but I still don't know whether it is worth the effort (one annoying thing is that one needs to produce some relatively smooth compactly supported function which non-negative and (is positive on some given interval such as [-1,1]), and whose Fourier transform is non-negative; it's not hard to show such functions exist on general principles (e.g., convolve a suitable non-negative even bump function with itself), but could be a bit fiddly to formalize).</p>",
        "id": 430882933,
        "sender_full_name": "Terence Tao",
        "timestamp": 1712095738
    },
    {
        "content": "<p><a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/135\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/135</a> establishes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>π</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mn>2</mn><mi>y</mi><mi mathvariant=\"normal\">/</mi><mi>log</mi><mo>⁡</mo><mi>z</mi><mo>+</mo><mn>6</mn><mi>z</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>log</mi><mo>⁡</mo><mi>z</mi><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\pi(x+y) - \\pi(x) \\le 2y / \\log z + 6z (1+\\log z)^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">6</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>I can work on showing <code>cheby (fun n ↦ Λ n)</code> next.</p>",
        "id": 430884386,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1712096345
    },
    {
        "content": "<p><a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/430884386\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"423402\" href=\"/#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V5\">#PrimeNumberTheorem+ &gt; Outstanding Tasks, V5</a> by <span class=\"user-mention silent\" data-user-id=\"585783\">Arend Mellendijk</span>.</p>",
        "id": 430884443,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712096368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"585783\">Arend Mellendijk</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/430884386\">said</a>:</p>\n<blockquote>\n<p>I can work on showing <code>cheby (fun n ↦ Λ n)</code> next.</p>\n</blockquote>\n<p>This is now done: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/141\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/141</a></p>",
        "id": 431161179,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1712172724
    },
    {
        "content": "<p>Is <code>∀ (σ' : ℝ), 1 &lt; σ' → Summable (nterm Λ σ')</code> proved somewhere explicitly?</p>",
        "id": 431512241,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712319620
    },
    {
        "content": "<p>It follows directly from <code>vonMangoldt_le_log</code> in any case but it is probably already done.</p>",
        "id": 431512717,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712319782
    },
    {
        "content": "<p>Something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LSeriesSummable_of_le_const_mul_rpow#doc\">docs#LSeriesSummable_of_le_const_mul_rpow</a> should help...?</p>",
        "id": 431515228,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712320701
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ArithmeticFunction.LSeriesSummable_vonMangoldt#doc\">docs#ArithmeticFunction.LSeriesSummable_vonMangoldt</a> (very fresh in Mathlib!).</p>",
        "id": 431517952,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712321614
    },
    {
        "content": "<p>I took the proof of <code>WeakPNT</code> from <code>EulerProducts</code> to put it in <code>Wiener.lean</code> so that I could adjust it, it now looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">WeakPNT</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"bp\">↦</span> <span class=\"n\">cumsum</span> <span class=\"bp\">Λ</span> <span class=\"n\">N</span> <span class=\"bp\">/</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnv</span> <span class=\"o\">:=</span> <span class=\"n\">riemannZeta_ne_zero_of_one_le_re</span>\n  <span class=\"k\">have</span> <span class=\"n\">l1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">Λ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">vonMangoldt_nonneg</span>\n  <span class=\"k\">have</span> <span class=\"n\">l2</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.re</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">deriv</span> <span class=\"n\">ζ₁</span> <span class=\"bp\">/</span> <span class=\"n\">ζ₁</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">LSeries</span> <span class=\"bp\">Λ</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">hs₁</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hs</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">LSeries_vonMangoldt_eq_deriv_riemannZeta_div</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">neg_logDeriv_ζ₁_eq</span> <span class=\"n\">hs₁</span> <span class=\"o\">(</span><span class=\"n\">hnv</span> <span class=\"n\">hs₁</span> <span class=\"n\">hs.le</span><span class=\"o\">)]</span>\n  <span class=\"k\">have</span> <span class=\"n\">l3</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">deriv</span> <span class=\"n\">ζ₁</span> <span class=\"bp\">/</span> <span class=\"n\">ζ₁</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">s.re</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">continuousOn_neg_logDeriv_ζ₁.mono</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">l4</span> <span class=\"o\">:</span> <span class=\"n\">cheby</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span> <span class=\"n\">vonMangoldt_cheby</span>\n  <span class=\"k\">have</span> <span class=\"n\">l5</span> <span class=\"o\">(</span><span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hσ'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"n\">nterm</span> <span class=\"bp\">Λ</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">apply</span> <span class=\"n\">WienerIkeharaTheorem'</span> <span class=\"n\">l1</span> <span class=\"n\">l5</span> <span class=\"n\">l4</span> <span class=\"n\">l3</span> <span class=\"n\">l2</span>\n</code></pre></div>\n<p>with just one <code>sorry</code> left (plus of course <code>WienerIkeharaTheorem'</code>, which is on the way, and Fourier inversion, which also is but a bit further away).</p>",
        "id": 431542923,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712328490
    },
    {
        "content": "<p>Wasn't the <code>sorry</code> discussed above?</p>",
        "id": 431556190,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712332359
    },
    {
        "content": "<p>I think it's there because we'll need a mathlib bump to access the theorem...</p>",
        "id": 431565655,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712335329
    },
    {
        "content": "<p>No need for the bump, it is just a matter of massaging the result from mathlib into the right form (we need it with a norm). I just did the Ico transition first.</p>",
        "id": 431571033,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712337154
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">l5</span> <span class=\"o\">(</span><span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hσ'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"n\">nterm</span> <span class=\"bp\">Λ</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nterm_eq_norm_term</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ArithmeticFunction.LSeriesSummable_vonMangoldt</span> <span class=\"n\">σ'</span> <span class=\"n\">hσ'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">norm</span>\n</code></pre></div>",
        "id": 431580503,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712340766
    },
    {
        "content": "<p><code>WienerIkeharaTheorem'</code> is done, meaning that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">WeakPNT'</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"kd\">axioms</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Quot.sound</span><span class=\"o\">,</span> <span class=\"n\">propext</span><span class=\"o\">,</span> <span class=\"n\">Classical.choice</span><span class=\"o\">,</span> <span class=\"n\">fourier_surjection_on_schwartz</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and the only remaining piece of the puzzle is that the Fourier transform is bijective on the Schwartz class.</p>",
        "id": 431680031,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712415417
    },
    {
        "content": "<p>I am very tempted to rush a proof of the Fourier stuff in the special case of <code>R \\to C</code> just so that the whole proof is complete ...</p>",
        "id": 431680133,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712415498
    },
    {
        "content": "<p>You may definitely rush it (although <a href=\"https://github.com/leanprover-community/mathlib4/pull/11776\">#11776</a> will probably spare you a little bit of the work).  It's hiring committees time in France, so I won't have a lot of Lean time in the next future, so the completion of the general case in mathlib might take a little bit longer than expected...</p>",
        "id": 431680414,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712415725
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 431680425,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712415740
    },
    {
        "content": "<p>If you want to rush it, you might find useful some things that I've already proved in the branch <code>SG_deriv_fourier3</code>, notably the two following theorems (proved in arbitrary dimension, but then specialized to one dimension):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">iteratedDeriv_fourierIntegral</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">Integrable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">iteratedDeriv</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">𝓕</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">𝓕</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fourierIntegral_iteratedDeriv</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">ℝ</span> <span class=\"n\">N</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h'f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">Integrable</span> <span class=\"o\">(</span><span class=\"n\">iteratedDeriv</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">𝓕</span> <span class=\"o\">(</span><span class=\"n\">iteratedDeriv</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">𝓕</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 431698002,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712430318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/431680031\">said</a>:</p>\n<blockquote>\n<p><code>WienerIkeharaTheorem'</code> is done, meaning that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">WeakPNT'</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"kd\">axioms</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Quot.sound</span><span class=\"o\">,</span> <span class=\"n\">propext</span><span class=\"o\">,</span> <span class=\"n\">Classical.choice</span><span class=\"o\">,</span> <span class=\"n\">fourier_surjection_on_schwartz</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and the only remaining piece of the puzzle is that the Fourier transform is bijective on the Schwartz class.</p>\n</blockquote>\n<p>Were there any steps in the blueprint that were unexpectedly hard to formalize? Just curious of there are any types of informal arguments that one should avoid in the blueprint because they are challenging to write in Lean.</p>",
        "id": 431705485,
        "sender_full_name": "Terence Tao",
        "timestamp": 1712437478
    },
    {
        "content": "<p>Hopefully we can think about how to make them less challenging to write in Lean instead of avoiding them.</p>",
        "id": 431712849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712445286
    },
    {
        "content": "<p>So based on Sébastien's work I just defined this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">FS</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝓢</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">𝓢</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">𝓕</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>(with proved regularity and decay). Between this and Fourier inversion, I think than not much is missing.</p>",
        "id": 431930988,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712572339
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">WeakPNT'</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"kd\">axioms</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Quot.sound</span><span class=\"o\">,</span> <span class=\"n\">propext</span><span class=\"o\">,</span> <span class=\"n\">Classical.choice</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 431950693,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712577321
    },
    {
        "content": "<p>PR at <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/150\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/150</a></p>",
        "id": 431950853,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712577357
    },
    {
        "content": "<p>The Fourier approach is done <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 431951362,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712577461
    },
    {
        "content": "<p>Awesome! Congrats!!!</p>",
        "id": 431951564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1712577510
    },
    {
        "content": "<p>Merged!!! Congrats to all, and thanks for the hard work!!!</p>",
        "id": 431957714,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712579122
    },
    {
        "content": "<p>At some point we'll want to organize trying to get what's been done into Mathlib. But maybe not just yet, we can keep pushing to the stronger form of PNT (which, as far as I know, will be the first time that's formalized).</p>",
        "id": 431960481,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1712579920
    },
    {
        "content": "<p>Are there any parts that you consider ready to move to mathlib already? The sooner the better, I'd say</p>",
        "id": 431964473,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712581121
    },
    {
        "content": "<p>I will continue PRing material from <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts\">EulerProducts</a>, at least up to the proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ζ</mi></mrow><annotation encoding=\"application/x-tex\">\\zeta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span></span></span></span> (and Dirichlet L-series, as soon as we have the analytic continuation) does not vanish on the line <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Re</mi><mo>⁡</mo><mi>s</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Re} s = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Re</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>. The next step will be refactoring Euler products to use the new infinite products and extending the API a bit.</p>",
        "id": 431978015,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712584964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/431705485\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/431680031\">said</a>:</p>\n<blockquote>\n<p><code>WienerIkeharaTheorem'</code> is done, meaning that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">WeakPNT'</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"kd\">axioms</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Quot.sound</span><span class=\"o\">,</span> <span class=\"n\">propext</span><span class=\"o\">,</span> <span class=\"n\">Classical.choice</span><span class=\"o\">,</span> <span class=\"n\">fourier_surjection_on_schwartz</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and the only remaining piece of the puzzle is that the Fourier transform is bijective on the Schwartz class.</p>\n</blockquote>\n<p>Were there any steps in the blueprint that were unexpectedly hard to formalize? Just curious of there are any types of informal arguments that one should avoid in the blueprint because they are challenging to write in Lean.</p>\n</blockquote>\n<p>That is a very good question, but I have no good answer to give except that in my experience, high-level arguments are actually easier to formalize than routine details. Typically \"now let epsilon go to zero in the previous lemma to conclude\" can easily turn into a few hundred lines of intermediate lemmas ... but I'm only speaking for myself here, and the issue might very well be that I was doing it wrong</p>",
        "id": 431979833,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1712585469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/431951362\">said</a>:</p>\n<blockquote>\n<p>The Fourier approach is done <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n</blockquote>\n<p>This is great news!  I wonder now what would be the logical next steps.  I see three possible future directions to build off of this:</p>\n<ol>\n<li>Remove the Chebyshev hypothesis from <code>WienerIkehara</code>(there is a <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#a0000000009\">blueprint on how to do this</a>)</li>\n<li>Start work on the <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0004.html\">elementary consequences of the PNT</a></li>\n<li>Prove the prime number theorem in arithmetic progressions using the Wiener Ikehara theorem and some facts about non-vanishing of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>χ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(s,\\chi)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">χ</span><span class=\"mclose\">)</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">R</mi><mi>e</mi></mrow><mi>s</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">{\\mathrm Re} s = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">R</span><span class=\"mord mathnormal\">e</span></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ol>\n<p>We had discussed <a href=\"https://github.com/leanprover-community/mathlib4/pull/3\">#3</a> some weeks ago and my understanding is that it was waiting on some other project to define holomorphic continuation of L-functions?  I think that if we do have the nonvanishing results about L-functions then it should not be too hard to use Dirichlet character expansion and Wiener Ikehara to get the PNT in AP, but I don't know how close we are to those results yet.  If there is interest, and if I have some idea of what results on L-functions we can import, I can try to write a blueprint of how to get to PNT in AP from all these preliminaries.</p>\n<p>Of course, we could pursue two or more directions simultaneously, but it might make more sense to focus initially on what people are most interested in working on; thoughts welcomed.</p>",
        "id": 432020704,
        "sender_full_name": "Terence Tao",
        "timestamp": 1712594179
    },
    {
        "content": "<p>Once we have the analytic continuation of Dirichlet L-functions, the non-vanishing of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>χ</mi><mo separator=\"true\">,</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(\\chi, s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">χ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Re</mi><mo>⁡</mo><mi>s</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Re} s = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Re</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> should be fairly quick. I am planning to make the necessary preparations soon.</p>",
        "id": 432035521,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712598706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/432035521\">said</a>:</p>\n<blockquote>\n<p>Once we have the analytic continuation of Dirichlet L-functions, the non-vanishing of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>χ</mi><mo separator=\"true\">,</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(\\chi, s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">χ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Re</mi><mo>⁡</mo><mi>s</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Re} s = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Re</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> should be fairly quick. I am planning to make the necessary preparations soon.</p>\n</blockquote>\n<p>OK, great.  In the meantime I just quickly PR'ed a sketch proof of how the PNT in APs follows from Wiener-Ikehara and the non-vanishing of L-functions on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">R</mi><mi mathvariant=\"normal\">e</mi></mrow><mi>s</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Re} s = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Re</span></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.  It should be quite straightforward once one has the Fourier expansion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mi>a</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>q</mi><mo stretchy=\"false\">)</mo></mrow></msub><mfrac><mrow><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><msup><mi>n</mi><mi>s</mi></msup></mfrac><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>q</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><msub><mo>∑</mo><mrow><mi>χ</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>q</mi><mo stretchy=\"false\">)</mo></mrow></msub><mover accent=\"true\"><mi>χ</mi><mo>ˉ</mo></mover><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mfrac><mrow><msup><mi>L</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>χ</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>χ</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=a\\ (q)} \\frac{\\Lambda(n)}{n^s} = - \\frac{1}{\\phi(q)} \\sum_{\\chi\\ (q)} \\bar{\\chi}(a) \\frac{L&#x27;(s,\\chi)}{L(s,\\chi)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.4847em;vertical-align:-0.4747em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mspace mtight\"><span class=\"mtight\"> </span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">Λ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.5845em;vertical-align:-0.52em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ϕ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">χ</span><span class=\"mspace mtight\"><span class=\"mtight\"> </span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5678em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\">χ</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1944em;\"><span class=\"mord\">ˉ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1944em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0645em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">L</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">χ</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">χ</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> into Dirichlet characters and also the identity <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msup><mi>L</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><msub><mi>χ</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><msub><mi>χ</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi>ζ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>+</mo><msub><mo>∑</mo><mrow><mi>p</mi><mi mathvariant=\"normal\">∣</mi><mi>q</mi></mrow></msub><mfrac><mrow><mi>log</mi><mo>⁡</mo><mi>p</mi></mrow><mrow><msup><mi>p</mi><mi>s</mi></msup><mo>−</mo><mn>1</mn></mrow></mfrac><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\"> \\frac{L&#x27;(s,\\chi_0)}{L(s,\\chi_0)} = \\frac{\\zeta&#x27;(s)}{\\zeta(s)} + \\sum_{p|q} \\frac{\\log p}{p^s-1},</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5845em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0645em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">L</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">χ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">χ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.5845em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0645em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4133em;vertical-align:-0.4811em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mord mtight\">∣</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span></span></span></span> which I presume can be obtained without too much pain from the Euler products API.</p>",
        "id": 432051376,
        "sender_full_name": "Terence Tao",
        "timestamp": 1712604308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/431950693\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">WeakPNT'</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"kd\">axioms</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Quot.sound</span><span class=\"o\">,</span> <span class=\"n\">propext</span><span class=\"o\">,</span> <span class=\"n\">Classical.choice</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Btw, this also deserves an entry in <code>100.yaml</code>, I guess</p>",
        "id": 432053265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1712604906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/432020704\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/431951362\">said</a>:</p>\n<blockquote>\n<p>The Fourier approach is done <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n</blockquote>\n<p>We had discussed <a href=\"https://github.com/leanprover-community/mathlib4/pull/3\">#3</a> some weeks ago and my understanding is that it was waiting on some other project to define holomorphic continuation of L-functions? </p>\n</blockquote>\n<p>Yes, that's my project.</p>\n<p>I have (rough, but fully working) code for this at PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10011\">#10011</a>, where I show that for any <code>N : ℕ+</code> and any <code>Φ : ZMod N → ℂ</code>, the function <code>∑ n : ℕ, Φ n / n ^ s</code> extends analytically to <code>ℂ - {1}</code>, and to all of <code>ℂ</code> if <code>∑ j : ZMod N, Φ j = 0</code> (see <code>differentiable_congruenceLFunction_of_sum_zero</code> in file <code>ResidueClassZeta.lean</code>). I also prove the expected functional equation in terms of the Fourier transform of <code>Φ</code>. </p>\n<p>I am slowly drip-feeding this into mathlib (many thanks to <span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> for his very patient reviewing) – it was originally 4000 lines, now down to about 2500 still to merge.</p>",
        "id": 432054932,
        "sender_full_name": "David Loeffler",
        "timestamp": 1712605544
    },
    {
        "content": "<p>For Fermat I will need automorphic induction from a character of a degree 2 extension of F to GL(2)/F (with F a (totally real) number field), and one way of proving that would be by converse theorems, which would need analytic continuation of grossencharacters (for CM fields with H-T weights 0,1, but I am not really sure that's any easier than characters for general number fields, basically it's Tate's thesis). I'll also need Cebotarev density for finite Galois extensions of number fields which I think one can reduce to the abelian case and then it's again some statement about the behaviour of Hecke L-functions but again with base field not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8805em;vertical-align:-0.1944em;\"></span><span class=\"mord mathbf\">Q</span></span></span></span>.</p>",
        "id": 432057148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712606279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Connecting.20with.20EulerProducts.2FPNT.2Elean/near/432057148\">said</a>:</p>\n<blockquote>\n<p>For Fermat I will need automorphic induction from a character of a degree 2 extension of F to GL(2)/F (with F a (totally real) number field), and one way of proving that would be by converse theorems, which would need analytic continuation of grossencharacters (for CM fields with H-T weights 0,1, but I am not really sure that's any easier than characters for general number fields, basically it's Tate's thesis).</p>\n</blockquote>\n<p>For this, going via converse theorems seems a bit of a roundabout approach (to me). In the imaginary quadratic case, it's pretty easy to show that the theta-series associated to a grossencharacter is a modular form (it's basically just Poisson summation in <code>R ^ 2</code>) and we already have the machinery to prove modular form L-functions are entire. I'm not sure how much harder this becomes with CM fields and Hilbert mod forms, but my instinct is that going via theta-series would still be easier than Tate's thesis + converse theorems. </p>\n<p>(I think this is pretty much how Hecke originally proved analytic continuation of Groessencharacter L-series back in the 1930s or whatever it was.)</p>",
        "id": 432059857,
        "sender_full_name": "David Loeffler",
        "timestamp": 1712607374
    },
    {
        "content": "<p>Oh interesting. I have put literally 0 thought into how to get to the analytic results I'll need, but I have finally got around to at least starting to collect my thoughts and write down the statements! They'll be public in a couple of weeks.</p>",
        "id": 432062075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712608306
    }
]