[
    {
        "content": "<p>Thanks for all the contributions so far, especially <span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> who gave us our first <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/dep_graph_document.html\">dark green backgrounds</a> with proofs of the <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#smooth-ury\">Smooth Urysohn lemma</a> and its relative, <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#SmoothExistence\">SmoothExistence</a>. We now also have a first light green background in <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#PerronFormulaLtOne\">PerronFormulaLtOne</a>. (Recall that this means that its proof is formalized, but depends on things that are not yet.) The dependencies are (by design) very simple, so please feel free to claim any of the following:</p>\n<ol>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#RectangleIntegral_eq_zero\">RectangleIntegral_eq_zero</a> says that the integral of a holomorphic function on a rectangle vanishes, and should be a simple matter of applying <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Complex/CauchyIntegral.html#Complex.integral_boundary_rect_eq_zero_of_differentiableOn\">integral_boundary_rect_eq_zero_of_differentiableOn</a>. <strong>Done thanks to <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> </strong></li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#RectangleIntegral_tendsTo_VerticalIntegral\">RectangleIntegral_tendsTo_VerticalIntegral</a> is also rather simple, saying that if you integrate over a rectangle, and send the top and bottom to infinity (assuming those decay), what's left is the difference of the (positively-oriented) integrals over the sides. Right now there are no conditions on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>, so we will need to stipulate that the top and bottom integrals go to zero. (And then this condition will need to be implemented where <code>RectangleIntegral_tendsTo_VerticalIntegral</code> is used in the proof of <code>PerronFormulaLtOne</code>. Again, I would be surprised if this caused great difficulty... <strong> Claimed by <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> </strong></li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#limitOfConstant\">limitOfConstant</a> should be very simple, saying that a constant function whose limit is zero, is also zero. (Maybe it's already in Mathlib somewhere?) <strong>Done thanks to <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> </strong></li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#HolomorphicOn_of_Perron_function\">HolomorphicOn_of_Perron_function</a> says that, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x&gt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>↦</mo><msup><mi>x</mi><mi>s</mi></msup><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">s\\mapsto x^s/(s(s+1))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">))</span></span></span></span> is holomorphic (i.e., Complex differentiable) for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">ℜ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\Re(s)&gt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">ℜ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. Just a matter of chaining some differentiability statements together; shouldn't be too hard. <strong> Done by <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> </strong></li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#PerronIntegralPosAux\">PerronIntegralPosAux</a> says essentially that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x\\mapsto 1/(1+x^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is integrable over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>; shouldn't be hard for someone familiar with that part of the library... <strong>Done by <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> </strong></li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#tendsto_Realpow_atTop_nhds_0_of_norm_lt_1\">tendsto_Realpow_atTop_nhds_0_of_norm_lt_1</a> says that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0&lt;x&lt;1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>σ</mi></msup><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x^\\sigma\\to0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">σ</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma\\to\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>. Such a thing nearly exists, called <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecificLimits/Normed.html#tendsto_pow_atTop_nhds_0_of_norm_lt_1\">tendsto_pow_atTop_nhds_0_of_norm_lt_1</a>, but not quite (uses natural exponents, whereas we want real)... <strong> Done by <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> </strong></li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#VertIntPerronBound\">VertIntPerronBound</a> is a bound on an integral, applying the triangle inequality, and bounding <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><msup><mi>x</mi><mi>s</mi></msup><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><msup><mi>x</mi><mrow><mi mathvariant=\"normal\">ℜ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">|x^s|\\le x^{\\Re(s)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.888em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">ℜ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span>; again, shouldn't be too hard. <strong>Solved by <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> </strong></li>\n</ol>\n<p>Those would close out <code>PerronFormulaLtOne</code>. I'm working on a similar treatment for <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#PerronFormulaGtOne\">PerronFormulaGtOne</a> which will be more complicated, as we actually need to pull some contours past poles and evaluate residues. Those two together should give us the <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#PerronFormula\">PerronFormula</a> and we'll be well on the way towards proving <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#MellinInversion\">MellinInversion</a>.</p>\n<p>In the grand scheme of things, Mellin inversion can be used to prove Fourier inversion, which would get us closer to <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#bij\">the Fourier transform being a bijection on Schwartz functions</a>. The latter is en route to the <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#WeakPNT\">first proof of Weak PNT</a>. Though at this point, if <span class=\"user-mention\" data-user-id=\"585783\">@Arend Mellendijk</span>'s Selberg sieve argument works out to prove <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#SmoothedChebyshevClose\">SmoothedChebyshevClose</a>, it seems to me that we'll get to (a weak) PNT even faster by following the <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#WeakPNT2\">second, complex analytic proof</a>. The latter is also a better warmup for the <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0004.html#StrongPNT\">stronger, exp-root-log-savings proof</a> than weak proof 1...</p>\n<p>Please let me know if you'd like to claim any of the above, and of any other comments/suggestions. This is really fun; thanks all for participating!! :)</p>",
        "id": 419172966,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1706761893
    },
    {
        "content": "<p>Chiming in with some selected tasks from the non-complex-analysis parts of the project that should be relatively straightforward.</p>\n<ol start=\"8\">\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#first-fourier\">First Fourier Identity</a>.  This is basically a Fubini theorem type calculation, and the first step towards the Wiener-Ikehara theorem.  Should be pretty simple.</li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#second-fourier\">Second Fourier identity</a> Another Fubini calculation.</li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0005.html#chebyshev-asymptotic\">Asymptotics for first summatory function</a> Assuming the <a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#WeakPNT\">Weak PNT</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≤</mo><mi>x</mi></mrow></msub><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∼</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\"> \\sum_{n \\leq x} \\Lambda(n) \\sim x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1455em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> as a black box, it should be relatively simple to conclude that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>p</mi><mo>≤</mo><mi>x</mi></mrow></msub><mi>log</mi><mo>⁡</mo><mi>p</mi><mo>∼</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\"> \\sum_{p \\leq x} \\log p \\sim x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1455em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> as well.  This could be a good test case to see whether we have phrased our asymptotic estimates in a convenient fashion.</li>\n</ol>",
        "id": 419174019,
        "sender_full_name": "Terence Tao",
        "timestamp": 1706762652
    },
    {
        "content": "<p>I should add that this list is not meant to be exhaustive; if anyone spots a node in the blueprint that they think they can easily polish off, please feel free to claim it even if we don't list it in our recommended task list!</p>",
        "id": 419174539,
        "sender_full_name": "Terence Tao",
        "timestamp": 1706763069
    },
    {
        "content": "<p>here's \"1. RectangleIntegral_eq_zero\": <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/18\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/18</a></p>",
        "id": 419178813,
        "sender_full_name": "llllvvuu",
        "timestamp": 1706766691
    },
    {
        "content": "<p>here's \"3. limitOfConstant\": <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/19\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/19</a></p>",
        "id": 419184419,
        "sender_full_name": "llllvvuu",
        "timestamp": 1706770614
    },
    {
        "content": "<p>I came across something close to 7 recently, let me see if I can find it</p>",
        "id": 419193843,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706775366
    },
    {
        "content": "<p>Oh, not all of 7, just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.abs_exp#doc\">docs#Complex.abs_exp</a></p>",
        "id": 419194030,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706775446
    },
    {
        "content": "<p>Yes that needs to be added to the triangle inequality, together with a simple estimate for the denominator...</p>",
        "id": 419254570,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1706796839
    },
    {
        "content": "<p>I've done 7 modulo some integrability goals I'll look at tomorrow</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>WIP</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">VertIntPerronBound</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_le_one</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ_gt_one</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Complex.abs</span> <span class=\"o\">(</span><span class=\"n\">VerticalIntegral</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">s</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n      <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">σ</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">|</span><span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">VerticalIntegral</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">abs_I</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Complex.norm_eq_abs</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MeasureTheory.norm_integral_le_integral_norm</span> <span class=\"n\">_</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">norm_div</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">mod_cast</span> <span class=\"n\">xpos.ne'</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cpow_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">cpow_mul_ofReal_nonneg</span> <span class=\"n\">xpos.le</span><span class=\"o\">]</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n    <span class=\"n\">ext</span> <span class=\"n\">a</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Complex.abs_cpow_eq_rpow_re_of_pos</span> <span class=\"o\">(</span><span class=\"n\">rpow_pos_of_pos</span> <span class=\"n\">xpos</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MeasureTheory.integral_mul_left</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_eq_self.mpr</span> <span class=\"n\">xpos.le</span><span class=\"o\">]</span>\n  <span class=\"n\">gcongr</span>\n  <span class=\"n\">apply</span> <span class=\"n\">MeasureTheory.integral_mono</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">le_def</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_inv</span><span class=\"o\">]</span>\n  <span class=\"n\">gcongr</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_eq_self.mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Complex.abs</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">gcongr</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_le_sqrt</span>\n  <span class=\"n\">swap</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_le_sqrt</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">normSq_add_mul_I</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_eq_self.mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">σ_gt_one.le</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">one_pos.trans</span> <span class=\"n\">σ_gt_one</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span>\n  <span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">normSq</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">normSq</span> <span class=\"o\">((</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">normSq_add_mul_I</span><span class=\"o\">]</span>\n  <span class=\"n\">gcongr</span>\n  <span class=\"n\">nlinarith</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_right_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">positivity</span>\n</code></pre></div>\n</div></div>",
        "id": 419353268,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706830578
    },
    {
        "content": "<p>Great thanks! It's probably closely related to 5; maybe your work on 7 will handle 5 also?</p>",
        "id": 419354993,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1706831379
    },
    {
        "content": "<p>Isn't No. 6 <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tendsto_rpow_atTop_of_base_lt_one#doc\">docs#tendsto_rpow_atTop_of_base_lt_one</a> ?</p>",
        "id": 419357031,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706832306
    },
    {
        "content": "<p>7: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/21\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/21</a></p>\n<p>No time to look further at 5; maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=integral_inv_one_add_sq#doc\">docs#integral_inv_one_add_sq</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.deriv_arctan#doc\">docs#Real.deriv_arctan</a> is relevant</p>",
        "id": 419429849,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706870271
    },
    {
        "content": "<p>Here's \"4. HolomorphicOn_of_Perron_function\": <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/22\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/22</a></p>",
        "id": 419576555,
        "sender_full_name": "llllvvuu",
        "timestamp": 1706936303
    },
    {
        "content": "<p>I've made some progress on \"5. PerronIntegralPosAux\": <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/24\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/24</a></p>\n<p>I should be able to finish it soon.</p>",
        "id": 419591211,
        "sender_full_name": "llllvvuu",
        "timestamp": 1706951712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V1/near/419591211\">said</a>:</p>\n<blockquote>\n<p>I've made some progress on \"5. PerronIntegralPosAux\": <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/24\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/24</a></p>\n<p>I should be able to finish it soon.</p>\n</blockquote>\n<p>Finished</p>",
        "id": 419648697,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707000500
    },
    {
        "content": "<p>Great thanks!</p>",
        "id": 419652704,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707004807
    },
    {
        "content": "<p>What's the \"right\" way to handle things like this more generally? Something like: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∫</mo><mi mathvariant=\"double-struck\">R</mi></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\int_\\R f(x) dx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1608em;vertical-align:-0.3558em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1264em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbb mtight\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3558em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span></span> is integrable if, say, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is continuous (so no problems near <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>), and then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>ϵ</mi><mo>&gt;</mo><mn>0</mn><mo>:</mo><mi mathvariant=\"normal\">∣</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mrow><mo>−</mo><mn>1</mn><mo>−</mo><mi>ϵ</mi></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\exists \\epsilon&gt;0 : |f(x)| = O(x^{-1-\\epsilon})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\">ϵ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">ϵ</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. Does that already exist somewhere? If so, could <code>PerronIntegralPosAux</code> be done more easily by showing the big-O statement, instead of the precise work with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>arctan</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\arctan</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mop\">arctan</span></span></span></span>?</p>",
        "id": 419652929,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707004986
    },
    {
        "content": "<p>By the way, even if the above works, the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>arctan</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\arctan</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mop\">arctan</span></span></span></span> work will not have been for naught! We'll need it later when we evaluate residues of simple poles. (Do we have, e.g., that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>arctan</mi><mo>⁡</mo><mn>1</mn><mo>=</mo><mi>π</mi><mi mathvariant=\"normal\">/</mi><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">\\arctan 1 = \\pi/4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mop\">arctan</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord\">/4</span></span></span></span>?)</p>",
        "id": 419653012,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1707005099
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.arctan_one#doc\">docs#Real.arctan_one</a>)</p>",
        "id": 419653113,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1707005209
    },
    {
        "content": "<p>I probably could have used the following instead: <a href=\"https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Analysis/SpecialFunctions/ImproperIntegrals.lean#L89-L123\">https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Analysis/SpecialFunctions/ImproperIntegrals.lean#L89-L123</a></p>\n<p>Oops. Well, it wasn't too bad either way. Once the arctan stuff is upstreamed, we are left with just the proof of the asymptotic, which is necessary regardless of the asymptotic used (1/x^2 or 1/(1+x^2)). <del>Actually, 1/x^2 might've been a bit more tedious for lower bounding the integral.</del></p>",
        "id": 419653859,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707005965
    },
    {
        "content": "<p><del>More generally, I think f = O(g) might be more tedious to work with than f &lt; g,  since you have to deal with the part before the \"eventually\"</del> oops continuity handles this part. Generalization of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=integrable_of_isBigO_exp_neg#doc\">docs#integrable_of_isBigO_exp_neg</a> to something like <code>integrable_of_isBigO_integrable</code> could work as an API. You have to do apply it to both tails though which is kind of tedious.</p>\n<p>Actually, \"show integrable by showing f &lt; g for some integrable g\" and \"show integral pos by showing h &lt; f &lt; g for some h, g with positive integral\" are already pretty expedient techniques at a high level. The part that is not as expedient as it could be currently is, inequalities. One could imagine <code>PerronIntegralPosAux</code> being very short had I been able to skip the manual <code>calc</code> and <code>trans</code> work (and in this case, there is also some extra boilerplate because <code>measurability</code> timed out).</p>",
        "id": 419654987,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707007175
    },
    {
        "content": "<p>--</p>",
        "id": 419655612,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707007875
    },
    {
        "content": "<p>I've started work on <code>2. RectangleIntegral_tendsTo_VerticalIntegral</code>: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/28\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/28</a>. The lemma is done, I just need to satisfy the new hypotheses.</p>",
        "id": 419661288,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707013996
    },
    {
        "content": "<p>I just wanted to say that one of the intended outcomes of this project is that we pick up experience with asymptotic notation and how to use estimates to prove statements such as integrability, convergence, etc. in a civilized manner.  In particular if in the course of formalizing one of the lemmas in this project, you spot a general lemma (such as a criterion for integrability) that could be re-used for some future application, it may well be worth spinning that off as a standalone lemma, even if it means a little bit more work for the immediate task at hand.</p>",
        "id": 419664194,
        "sender_full_name": "Terence Tao",
        "timestamp": 1707016434
    },
    {
        "content": "<p>... and opening a PR to <code>Mathlib</code></p>",
        "id": 419668987,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707022108
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=integrable_one_add_norm#doc\">docs#integrable_one_add_norm</a> may prove useful for this kind of things, by the way.</p>",
        "id": 419674925,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1707028884
    },
    {
        "content": "<p>It turns out that I do need to use the asymptotic method, so I've started working on a draft mathlib PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10248\">https://github.com/leanprover-community/mathlib4/pull/10248</a></p>\n<p>The even/odd variant is the one I need (hopefully the statement is actually true). Maybe others will find it helpful too.</p>",
        "id": 419719046,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707070418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V1/near/419719046\">said</a>:</p>\n<blockquote>\n<p>It turns out that I do need to use the asymptotic method, so I've started working on a draft mathlib PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10248\">https://github.com/leanprover-community/mathlib4/pull/10248</a></p>\n<p>The even/odd variant is the one I need (hopefully the statement is actually true). Maybe others will find it helpful too.</p>\n</blockquote>\n<p>For <code>integrable_of_isBigO_integrable</code>, perhaps one can replace the hypotheses <code>(hsymm : ∀ x, ‖f x‖ = ‖f (-x)‖)\n   (ho : f =O[atTop] g)</code> with <code>(ho : f =O[atTop] g) (ho' : (fun x ↦ f (-x)) =O[atTop] g)</code>?  Or perhaps <code>(ho : f =O[atTop] g) (ho' : f =O[atBot] g')</code> where <code>g'</code> obeys similar hypotheses to <code>g</code>?  This could be more flexible for applications, and the original version could be recovered as a corollary.</p>\n<p>There is a more abstract statement that if <code>f</code> is locally integrable on some topological measure space <code>X</code>, and is O() of an integrable function with respect to the cocompact filter, then <code>f</code> is integrable, which combines well with the general statement (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.locallyIntegrable#doc\">docs#Continuous.locallyIntegrable</a>) that continuous functions on a locally compact space will be locally integrable wrt any locally finite measure.  It may possibly be worth proving this general statement first and deriving your special case from them, since these results are likely to be useful elsewhere (e.g., in higher dimensions).</p>",
        "id": 419722412,
        "sender_full_name": "Terence Tao",
        "timestamp": 1707073154
    },
    {
        "content": "<p>One could also split this up using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.IntegrableAtFilter#doc\">docs#MeasureTheory.IntegrableAtFilter</a> into two sublemmas:</p>\n<ol>\n<li>If <code>f =O[l] g</code> and <code>IntegrableAtFilter g l</code>, then <code>IntegrableAtFilter f l</code>.  [EDIT: some measurability hypothesis on <code>f</code> is needed here also.]</li>\n<li>If <code>IntegrableAtFilter f Filter.cocompact</code> and <code>LocallyIntegrable f</code>, then <code>Integrable f</code>. [EDIT: this is in fact an if and only if.]</li>\n</ol>\n<p>EDIT: On the reals (and possibly some other ordered topological spaces), there would also be</p>\n<ol start=\"3\">\n<li>If <code>IntegrableAtFilter f Filter.cocompact</code> iff <code>IntegrableAtFilter f atTop</code> and <code>IntegrableAtFilter f atBot</code>.</li>\n<li>On non-negative reals or Ici intervals, one can omit the <code>atBot</code> proposition in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3\">#3</a>.</li>\n</ol>",
        "id": 419723645,
        "sender_full_name": "Terence Tao",
        "timestamp": 1707074136
    },
    {
        "content": "<p>RE: 3, you could split that up further into <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.cocompact_eq#doc\">docs#Real.cocompact_eq</a> and a more general theorem stating <code>IntegrableAtFilter f (l1 ⊔ l2) ↔ (IntegrableAtFilter f l1 ∧ IntegrableAtFilter f l2)</code> (which doesn't seem to exist yet).</p>",
        "id": 419725731,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1707075964
    },
    {
        "content": "<p>Thanks for the suggestions! I've split up the work and proved 1. and 2. in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10248\">the PR</a>, and will follow up with a dependent PR establishing 3. and 4.</p>",
        "id": 419729993,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707079899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V1/near/419729993\">said</a>:</p>\n<blockquote>\n<p>Thanks for the suggestions! I've split up the work and proved 1. and 2. in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10248\">the PR</a>, and will follow up with a dependent PR establishing 3. and 4.</p>\n</blockquote>\n<p>For part <a href=\"https://github.com/leanprover-community/mathlib4/pull/1\">#1</a>, it might be nice to also add the corollary specializing to the top filter <code>⊤</code> (so that <code>IntegrableAtFilter</code> simplifies to <code>Integrable</code> - this, by the way, should also be a lemma in Mathlib, possibly even a simp lemma).  There will be occasions in the future where we obtain non-asymptotic bounds <code>f =O[⊤] g</code> (as opposed to merely <code>f =O[atTop] g</code> or <code>f =O[Filter.cocompact] g</code>) and it would be nice to support this also.</p>",
        "id": 419733683,
        "sender_full_name": "Terence Tao",
        "timestamp": 1707082877
    },
    {
        "content": "<p>I've added the requested <code>IntegrableAtFilter f ⊤ μ</code>to <a href=\"https://github.com/leanprover-community/mathlib4/pull/10248\">the first PR</a> and the <code>Real</code> corollaries as <a href=\"https://github.com/leanprover-community/mathlib4/pull/10258\">a second PR</a>. Both are ready for review for mathlib; in the meantime, I'll try using this content in PrimeNumberTheorem+</p>",
        "id": 419774546,
        "sender_full_name": "llllvvuu",
        "timestamp": 1707116049
    }
]