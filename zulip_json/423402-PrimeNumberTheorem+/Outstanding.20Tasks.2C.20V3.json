[
    {
        "content": "<p>For V2, see <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V2/near/420154765\">here</a></p>\n<p>Now that the Perron Formula is proved, we can turn to <code>MellinInversion</code>, which I've broken down into smaller steps. (In principle, a proof could be derived from <span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span>'s Fourier inversion PR. But given all we've developed, it might be faster to just continue the course.) So here are some targets:</p>\n<ol>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#PartialIntegration\">PartialIntegration</a> This is partial integration over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0,\\infty)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span></span></span></span>. May be useful to invoke <code>intervalIntegral.integral_mul_deriv_eq_deriv_mul</code> and <code>MeasureTheory.intervalIntegral_tendsto_integral_Ioi</code>.</li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#MellinInversion_aux1\">MellinInversion_aux1</a> This is using partial integration to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mi mathvariant=\"normal\">∞</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>s</mi></msup><mfrac><mrow><mi>d</mi><mi>x</mi></mrow><mi>x</mi></mfrac><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mi mathvariant=\"normal\">∞</mi></msubsup><msup><mi>f</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mfrac><msup><mi>x</mi><mi>s</mi></msup><mi>s</mi></mfrac><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\int_0^\\infty f(x)x^s\\frac{dx}{x} = \\int_0^\\infty f&#x27;(x)\\frac{x^{s}}{s} dx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2359em;vertical-align:-0.3558em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8593em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.2579em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3558em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2668em;vertical-align:-0.3558em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8593em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.2579em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3558em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.911em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7385em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span></span>. We'll need to some minimal conditions under which this holds. </li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#MellinInversion_aux2\">MellinInversion_aux2</a> Should be an application of <code>MellinInversion_aux1</code> with <code>(f := deriv f)</code> and <code>(s := s+1)</code>.</li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#MellinInversion_aux3\">MellinInversion_aux3</a> This is the absolute integrability of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>s</mi></msup><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)x^s/(s(s+1))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">))</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">ℜ</mi><mi>s</mi><mo>=</mo><mi>σ</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">(x,s)\\in(0,\\infty)\\times\\{\\Re s = \\sigma\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">ℜ</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mclose\">}</span></span></span></span>. (In preparation for Fubini-Tonelli)</li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#MellinInversion_aux4\">MellinInversion_aux4</a> This is Fubini-Tonelli in this context</li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0003.html#MellinInversion\">MellinInversion</a> Combining the above and following the proof outline should give Mellin Inversion.</li>\n</ol>\n<p>And from <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span>: now that the first two lemmas of Wiener-Ikehara are done:</p>\n<ol start=\"7\">\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#decay\">Decay bounds</a> This should be a straightforward integration by parts (and the constant C should be something very explicit, probably even 1 (one may need some numerical bound on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> for this)).</li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#limiting\">Limiting Fourier Identity</a> This should also be straightforward - combine the two Fourier identities already proven, and invoke dominated convergence using the decay bound.</li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#limiting-cor\">Limiting corollary</a> Immediate from previous identity and the <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Fourier/RiemannLebesgueLemma.html#Real.zero_at_infty_fourierIntegral\">Riemann-Lebesgue lemma</a></li>\n<li><a href=\"https://alexkontorovich.github.io/PrimeNumberTheoremAnd/web/sect0002.html#schwarz-id\">Extension to Schwartz class</a>  This one is trickier: one wants to extend the identity in the previous corollary from C^2_c functions to Schwartz functions by applying smooth cutoffs (using the smooth Urysohn lemma) and take limits.  There will be a moderate amount of estimation of error terms that needs to be done.</li>\n</ol>\n<p>Thanks to all for the contributions!!</p>",
        "id": 422862565,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708621316
    },
    {
        "content": "<p>Not sure if you're aware, but there's some approximations to a few decimal places of pi in mathlib</p>",
        "id": 422867945,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708622922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V3/near/422867945\">said</a>:</p>\n<blockquote>\n<p>Not sure if you're aware, but there's some approximations to a few decimal places of pi in mathlib</p>\n</blockquote>\n<p>Sorry, should that be in reference to a different thread...?</p>",
        "id": 422873187,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708624800
    },
    {
        "content": "<p>No, in response to the parenthetical in (7)</p>",
        "id": 422879396,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708626547
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.pi_gt_3141592#doc\">docs#Real.pi_gt_3141592</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.pi_lt_3141593#doc\">docs#Real.pi_lt_3141593</a></p>",
        "id": 422880508,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708626878
    },
    {
        "content": "<p>(I was thinking of something much cruder, like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo>&lt;</mo><mn>1000</mn></mrow><annotation encoding=\"application/x-tex\">\\pi&lt;1000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1000</span></span></span></span>... <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span>)</p>",
        "id": 422882747,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708627629
    },
    {
        "content": "<p>Actually after working it out with pen and paper it seems the constant <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> one gets in (7) is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>π</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow></mfrac><mo stretchy=\"false\">)</mo><msub><mo>∫</mo><mi mathvariant=\"bold\">R</mi></msub><mfrac><mrow><mi>d</mi><mi>t</mi></mrow><mrow><mn>1</mn><mo>+</mo><msup><mi>t</mi><mn>2</mn></msup></mrow></mfrac><mo>=</mo><mi>π</mi><mo>+</mo><mfrac><mn>1</mn><mrow><mn>4</mn><mi>π</mi></mrow></mfrac><mo>≈</mo><mn>3.221</mn><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">C =(1 + \\frac{1}{(2\\pi)^2}) \\int_{\\bf R} \\frac{dt}{1+t^2} =  \\pi + \\frac{1}{4\\pi} \\approx 3.221\\dots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4001em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1245em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">R</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3558em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3.221</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span></span></span></span>.  One could use upper and lower bounds on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> to get a bound for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, but actually for our application all we need is that a finite bound <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> exists, so specific bounds on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> are not needed.  (Alternatively, one could use such bounds to prove (7) with say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">C=4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> to make it a slightly cleaner statement.)</p>",
        "id": 422891550,
        "sender_full_name": "Terence Tao",
        "timestamp": 1708630706
    },
    {
        "content": "<p>I just pushed some progress on 1. <code>PartialIntegration</code>. When I leave unspecified the hypotheses for integrability (or decay), what I mean is: I can think of a variety of ways of spelling them, none seemingly better than others; so my modus operandi is just to start writing out the proof, and any time I apply an appropriate Mathlib lemma, I add any arising requisite hypotheses to the statement. (There's probably a better way to predict exactly which conditions will be needed?) In the case of <code>PartialIntegration</code>, it looks like the following should suffice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">PartialIntegration</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fDiff</span> <span class=\"o\">:</span> <span class=\"n\">DifferentiableOn</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">gDiff</span> <span class=\"o\">:</span> <span class=\"n\">DifferentiableOn</span> <span class=\"n\">ℝ</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">fDerivInt</span> <span class=\"o\">:</span> <span class=\"n\">IntegrableOn</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">gDerivInt</span> <span class=\"o\">:</span> <span class=\"n\">IntegrableOn</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">fDerivgInt</span> <span class=\"o\">:</span> <span class=\"n\">IntegrableOn</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">deriv</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">gDerivfInt</span> <span class=\"o\">:</span> <span class=\"n\">IntegrableOn</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">lim_at_zero</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">lim_at_inf</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>After what I have there, it should be a matter of chaining various limits together; maybe someone can help with those last steps (which require some finesse with filters...).</p>",
        "id": 422947408,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708661499
    },
    {
        "content": "<p>Can I raise a contrary opinion here?</p>\n<p>I think it's a pity to pursue this special-case argument for Mellin inversion when general Fourier inversion is available. My point is that developing the API to relate Mellin transforms restricted to vertical lines <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo>+</mo><mi>i</mi><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma + i\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathbb\">R</span></span></span></span> to Fourier transforms is clearly something worth having anyway – it is bound to get added to mathlib at some point – and once this exists, deducing Mellin inversion from Sebastian's Fourier inversion results should be very quick indeed.</p>",
        "id": 422957748,
        "sender_full_name": "David Loeffler",
        "timestamp": 1708670226
    },
    {
        "content": "<p>I opened a mathlib PR for improper integration by parts: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10874/files\">https://github.com/leanprover-community/mathlib4/pull/10874/files</a> . I can add it to this project tomorrow (<code>integral_Ioi_mul_deriv_eq_deriv_mul</code> should give what we want)</p>",
        "id": 422977424,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708679957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V3/near/422957748\">said</a>:</p>\n<blockquote>\n<p>Can I raise a contrary opinion here?</p>\n<p>I think it's a pity to pursue this special-case argument for Mellin inversion when general Fourier inversion is available. My point is that developing the API to relate Mellin transforms restricted to vertical lines <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo>+</mo><mi>i</mi><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma + i\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathbb\">R</span></span></span></span> to Fourier transforms is clearly something worth having anyway – it is bound to get added to mathlib at some point – and once this exists, deducing Mellin inversion from Sebastian's Fourier inversion results should be very quick indeed.</p>\n</blockquote>\n<p>Thanks David; that's certainly a very valid point, and one <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> and I discussed offline. We felt it was ok to have a bit of redundancy. But if someone wants to jump straight to 6.<code>MellinInversion</code> from Sebastien's work (certainly no need to wait for it to officially make it into Mathlib to incorporate it into PNT+...), that's perfectly fine with me. And then we can ignore the previous targets and move on to the next stage... Thoughts?</p>",
        "id": 423011765,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708693392
    },
    {
        "content": "<p>PS does the Fourier transform API allow non-unitary characters? (Of course we could deal with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>σ</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">σ</span></span></span></span></span></span></span></span></span></span></span> explicitly, but that might be more of a pain than the proposed direct Mellin approach…?)</p>",
        "id": 423029104,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708699377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V3/near/422977424\">said</a>:</p>\n<blockquote>\n<p>I opened a mathlib PR for improper integration by parts: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10874/files\">https://github.com/leanprover-community/mathlib4/pull/10874/files</a> . I can add it to this project tomorrow (<code>integral_Ioi_mul_deriv_eq_deriv_mul</code> should give what we want)</p>\n</blockquote>\n<p>alright, copied over: <a href=\"https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/81\">https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/pull/81</a></p>",
        "id": 423077894,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708715363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V3/near/423011765\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V3/near/422957748\">said</a>:</p>\n<blockquote>\n<p>Can I raise a contrary opinion here?</p>\n<p>I think it's a pity to pursue this special-case argument for Mellin inversion when general Fourier inversion is available. My point is that developing the API to relate Mellin transforms restricted to vertical lines <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo>+</mo><mi>i</mi><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma + i\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathbb\">R</span></span></span></span> to Fourier transforms is clearly something worth having anyway – it is bound to get added to mathlib at some point – and once this exists, deducing Mellin inversion from Sebastian's Fourier inversion results should be very quick indeed.</p>\n</blockquote>\n<p>Thanks David; that's certainly a very valid point, and one <span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> and I discussed offline. We felt it was ok to have a bit of redundancy. But if someone wants to jump straight to 6.<code>MellinInversion</code> from Sebastien's work (certainly no need to wait for it to officially make it into Mathlib to incorporate it into PNT+...), that's perfectly fine with me. And then we can ignore the previous targets and move on to the next stage... Thoughts?</p>\n</blockquote>\n<p>I think it makes sense to have Mellin inversion and Fourier inversion as sorries for now and work on the consequences of both; the decision of which implication between the two (or both) to actually formalize in our project can be done at a later stage.  Even if only one of these implications ends up in Mathlib, I think there is some value in having multiple logical flows in our project (we already have three different ways to get to the prime number theorem, for instance), as they may generalize in different ways and also give us some general data points as to what types of arguments are easier to formalize than others.</p>",
        "id": 423084473,
        "sender_full_name": "Terence Tao",
        "timestamp": 1708717963
    },
    {
        "content": "<p>We can certainly continue forward with <code>sorry</code>s, no need to give the proof \"linearly\". That said, now that we have <code>PartialIntegration</code> and Perron's formula, <code>MellinInversion</code> should follow almost immediately, could be at most a day or two of work. I think it would be nice to have a clean statement of it, with general conditions on the test function. Of course I could just state it for smooth functions with compact support in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0,\\infty)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span></span></span></span>, but we’re so close that I think we may as well finish this part now (while I prepare the next set of targets in Approach 2 - which also is mathematically extremely close to done…). What do you think?</p>",
        "id": 423173322,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708783980
    },
    {
        "content": "<p>I played around with the Fourier inversion -&gt; Mellin inversion implication a bit in mathlib and got it mostly done: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10944\">https://github.com/leanprover-community/mathlib4/pull/10944</a></p>",
        "id": 423240355,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708846043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V3/near/423240355\">said</a>:</p>\n<blockquote>\n<p>I played around with the Fourier inversion -&gt; Mellin inversion implication a bit in mathlib and got it mostly done: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10944\">https://github.com/leanprover-community/mathlib4/pull/10944</a></p>\n</blockquote>\n<p>This is now sorry-free. I can later mirror it into PNT+ under a different name (<code>MellinInversion'</code>) if desired.</p>",
        "id": 423255071,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708859630
    },
    {
        "content": "<p>Fantastic! Ok I'll make a new set of outstanding tasks then.</p>",
        "id": 423278126,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708881656
    },
    {
        "content": "<p>To that end, <span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> (or <span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span>), what bounds do we have on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>ζ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">/</mi><mi>ζ</mi></mrow><annotation encoding=\"application/x-tex\">\\zeta&#x27;/\\zeta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span></span></span></span> on the 1-line? The \"truth\" is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>ζ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">/</mi><mi>ζ</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>i</mi><mi>t</mi><mo stretchy=\"false\">)</mo><msub><mo>≪</mo><mi>ϵ</mi></msub><mi mathvariant=\"normal\">∣</mi><mi>t</mi><msup><mi mathvariant=\"normal\">∣</mi><mi>ϵ</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\zeta&#x27;/\\zeta ( 1 + it) \\ll_\\epsilon |t|^\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\">≪</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">ϵ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">t</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">ϵ</span></span></span></span></span></span></span></span></span></span></span> (even something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≪</mo><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\ll \\log^2 t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">≪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0929em;vertical-align:-0.1944em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8984em;\"><span style=\"top:-3.1473em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>), as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">t\\to\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>, but it would already be enough to have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≪</mo><mi mathvariant=\"normal\">∣</mi><mi>t</mi><msup><mi mathvariant=\"normal\">∣</mi><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\ll |t|^{1/2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">≪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">t</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1/2</span></span></span></span></span></span></span></span></span></span></span></span> (or even <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≪</mo><mi mathvariant=\"normal\">∣</mi><mi>t</mi><msup><mi mathvariant=\"normal\">∣</mi><mn>1000</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\ll |t|^{1000}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">≪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">t</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1000</span></span></span></span></span></span></span></span></span></span></span></span>, if we take more smoothing)... Which of these is closest to formalized?</p>",
        "id": 423278311,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708881840
    },
    {
        "content": "<p>So far, I think we only have that it is defined (i.e., <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ζ</mi></mrow><annotation encoding=\"application/x-tex\">\\zeta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span></span></span></span> does not vanish on the 1-line).</p>",
        "id": 423281303,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1708884758
    },
    {
        "content": "<p>Ok so I'll make that the next big target. I should have the list by tomorrow...</p>",
        "id": 423281703,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1708885168
    },
    {
        "content": "<p>I’ll need a little more time to set up all the <code>zeta</code> bounds. In the meantime, there’s plenty to do in the <code>MellinCalculus</code> file. V4 coming right up.</p>",
        "id": 423533231,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1709009974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/423402-PrimeNumberTheorem.2B/topic/Outstanding.20Tasks.2C.20V3/near/423240355\">said</a>:</p>\n<blockquote>\n<p>I played around with the Fourier inversion -&gt; Mellin inversion implication a bit in mathlib and got it mostly done: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10944\">https://github.com/leanprover-community/mathlib4/pull/10944</a></p>\n</blockquote>\n<p>Fourier inversion got merged, so I've added Mellin inversion to the mathlib review queue</p>",
        "id": 424970933,
        "sender_full_name": "llllvvuu",
        "timestamp": 1709678587
    }
]