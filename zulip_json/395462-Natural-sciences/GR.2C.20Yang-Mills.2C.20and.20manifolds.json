[
    {
        "content": "<p>General relativity and QFT seem to be areas in which there’s a need for a high level of mathematics beyond mere computation. If not useful to physicists at large, they could at least generate some interest from the mathematical physics crowd to pay attention to formalisation.</p>\n<p>GR is an obvious motivation to develop the theory of (pseudo-)Riemannian manifolds. One tangible target there could be the statement of Einstein’s field equations and proofs that certain spaces are solutions to them. The development of mathlib in this direction could lead to Ricci flows, which are central to the proof of the Poincaré conjecture, the only millennium prize problem to be solved thus far.</p>\n<p>In QFT, a gauge theory can be interpreted as an equation on the connection of a fibre bundle where the fibres are some Lie group. The connection would then be a section on the vector bundle where the fibre is the corresponding Lie algebra. One goal would be to classify topological defects such as monopoles, instantons, and strings. Development in this direction would lead to the correspondence between Lie groups and Lie algebras, the classification of semisimple complex Lie algebras, and de Rham cohomology.</p>\n<p>There are of course many other topics, but I’m mentioning these because there’s recently been a very nice refactor of the fibre bundle API on mathlib, and I’ve been working (very slowly) on formalising the exponential map on Lie groups. If we can get the more mathematically inclined physicists on board, mathlib will become much more diverse in content (that is still relevant in mathematics proper).</p>\n<p>Let me know if you’re interested in getting involved!</p>",
        "id": 406713906,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702025219
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 406720169,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702027743
    },
    {
        "content": "<p>I'd be interested on the manifold side for hamiltonian systems, and symplectic and poisson geometry</p>",
        "id": 418050627,
        "sender_full_name": "Marcello Seri",
        "timestamp": 1706178853
    },
    {
        "content": "<p>I used to be a particle phenomenologist, then a formal high energy theorist and  now someone who codes in lean… (don’t ask how the job hunt is going :P). </p>\n<p>Here is a vision of what I think would be good: A library like (and dependent on) Mathlib for high energy physics (inc. GR). The library should contain both definitions and proofs of important theorems and lemmas. It should also contain the formal verifications of calculations such as  “the cross section of... is…”, “this potential has a phase transition at …”. Basically everything in HEP that doesn’t require experimental data. It should be well-documented and the long term goal should be to make it actually useful for physicists. </p>\n<p>If we can get another people that are eager to help with something like this, it would be great.</p>",
        "id": 419486262,
        "sender_full_name": "Joseph Tooby-Smith",
        "timestamp": 1706889463
    },
    {
        "content": "<p>Do you have any recommended sources on formalized or non-formalized versions of these? I teach Lean to undergrads in science and engineering, and if I find an interested student, could see if they want to work on it.</p>",
        "id": 419634611,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1706987945
    },
    {
        "content": "<p>I feel that there’s still a lot of foundational work to be done. For example, we should first have a library of common differential equations and solutions. On the GR side, mathlib doesn’t have (pseudo)Riemannian manifolds yet, but people have written working definitions. There needs to be something akin to the Xena project but for physics, aiming to formalise the undergraduate physics curriculum.</p>",
        "id": 419641425,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1706994370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"424214\">@Tyler Josephson ⚛️</span> What’s your experience teaching Lean to science and engineering students? What is your goal, and what are some challenges you’ve met?</p>",
        "id": 419641508,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1706994472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin (尹維晨)</span>  I suggested something along the lines of what you are suggesting for undergraduate physics at:</p>\n<p><a href=\"#narrow/stream/395462-Natural-sciences/topic/Undergraduate.20Physics/near/393069237\">https://leanprover.zulipchat.com/#narrow/stream/395462-Natural-sciences/topic/Undergraduate.20Physics/near/393069237</a></p>\n<p>I actually no longer think this is necessarly best way forward. For two reasons: Firstly, there will be some areas of physics which are much harder to formalize than others. Secondly, I'm not sure it would convince any  physicist that doing things in lean is a good idea.</p>\n<p>I think one should imagine giving a talk to a bunch of research-level physicists about lean. The first thing they are likely going to ask is \"why should I care about this, and how does it help me?\".  I think a project which starts with coming up with a convincing answer to this question with explicit examples is much more likely to get traction than formalizing undergraduate physics - which can come later.</p>",
        "id": 419874580,
        "sender_full_name": "Joseph Tooby-Smith",
        "timestamp": 1707149216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin (尹維晨)</span> I've had ~10 non-CS / math undergraduates learn or try learning Lean, with 3 so far who picked up enough to make significant contributions in proofs and/or programming. All of them were able to essentially self-teach from the online textbooks, but not everyone can do this. </p>\n<p>Last summer, I led an 8-week meeting series on \"Lean for Scientists and Engineers.\" We mostly followed <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>'s <a href=\"https://hrmacbeth.github.io/math2001/index.html\">Mechanics of Proof</a>. This is an excellent resource for science and engineering students, since it only assumes sophomore-level math.</p>",
        "id": 419907154,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1707159312
    },
    {
        "content": "<p>We don't have curriculum tailored to the needs of science and engineering students, and I'm working on this. When we reprise \"Lean for Scientists and Engineers\" this summer, we'll combine parts from Mechanics of Proof, Mathematics in Lean, and Functional Programming in Lean, and add example exercises and problems from physics, chemistry, and engineering. </p>\n<p>The plan at the moment (subject to change as I develop things and reflect) is to cover installation and basics of Lean, then have 3 modules: proofs, programs, and proofs about programs (the first two may be sequential or somewhat parallel, we'll see). \"Proofs\" will do basics of tactics and calc blocks for equalities/inequalities, then drive towards calculus based proofs by doing sets --&gt; topology --&gt; differential calculus --&gt; integral calculus. \"Programs\" will cover the type system, structures, running programs, and input/output, and will show Lean code alongside identical examples as Python and MATLAB versions (to help those with prior programming experience). Then \"proofs about programs\" will discuss the halting problem as taught <a href=\"https://busy-beavers.tigyog.app/proofs-about-programs\">here</a>, then dig into polymorphic functions (our most promising strategy for real/float translation, at the moment) that enable proofs to be written real-valued functions that can also execute floating point calculations (active research by <span class=\"user-mention\" data-user-id=\"576850\">@John Velkey ⚛️</span> and <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span>).</p>\n<p>Reasons for this structure are:<br>\n1) Most physics / chemistry derivations worth doing require calculus. I'm trying to figure out the shortest path to calculus for students who haven't yet taken a logic course. Will be consulting with math educators for opinions on this once I start nailing down the content.<br>\n2) \"Bug-free simulations\" is how I motivate my group's investment in Lean, and I think this will have traction among other scientists and engineers, too. But proofs alone don't show this, we need functions that can be executed in a simulation / regression context, to ground things in the real world, and these can't be limited to natural numbers. I dream of a solution to the real/float translation issue that can accommodate a simple #eval-like command that simply handles real/rational inputs as floats; maybe we'll have a version of this with polymorphic functions by this summer.</p>",
        "id": 419909981,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1707160365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"653351\">Joseph Tooby-Smith</span> <a href=\"#narrow/stream/395462-Natural-sciences/topic/GR.2C.20Yang-Mills.2C.20and.20manifolds/near/419874580\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin (尹維晨)</span>  I suggested something along the lines of what you are suggesting for undergraduate physics at:</p>\n<p><a href=\"#narrow/stream/395462-Natural-sciences/topic/Undergraduate.20Physics/near/393069237\">https://leanprover.zulipchat.com/#narrow/stream/395462-Natural-sciences/topic/Undergraduate.20Physics/near/393069237</a></p>\n<p>I actually no longer think this is necessarly best way forward. For two reasons: Firstly, there will be some areas of physics which are much harder to formalize than others. Secondly, I'm not sure it would convince any  physicist that doing things in lean is a good idea.</p>\n<p>I think one should imagine giving a talk to a bunch of research-level physicists about lean. The first thing they are likely going to ask is \"why should I care about this, and how does it help me?\".  I think a project which starts with coming up with a convincing answer to this question with explicit examples is much more likely to get traction than formalizing undergraduate physics - which can come later.</p>\n</blockquote>\n<p>I'll be giving a talk to the Materials Genome Initiative at <a href=\"https://www.nist.gov/mgi\">NIST</a> at the end of the month, pitching my group's efforts formalizing <a href=\"https://pubs.rsc.org/en/content/articlelanding/2023/dd/d3dd00077j\">chemical physics</a> in Lean to write bug-free software. I don't have many connections to physicists, but would be happy to speak if invited.</p>",
        "id": 419910860,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1707160713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"424214\">@Tyler Josephson ⚛️</span>  I just had a brief scan through your paper. It looks really good. The sorts of theorems and definitions you have there are the sorts of things I would want in library for e.g. high energy physics.</p>\n<p>I think motivation of providing \"bug-free software\" is a great one! Maybe it wouldn't convince the pen-and-paper physicist (like myself), but we are in the minority. For the pen-and-paper physicist, I think the motivation has to come from the checking of computations, and proofs, and perhaps the `ease' of using lean over doing things by hand.</p>",
        "id": 420140731,
        "sender_full_name": "Joseph Tooby-Smith",
        "timestamp": 1707255727
    }
]