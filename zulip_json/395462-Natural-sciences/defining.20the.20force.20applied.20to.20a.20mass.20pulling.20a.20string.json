[
    {
        "content": "<p>In an <a href=\"/user_uploads/3121/FGgqeW0IsIsLYcxbLriv8iPk/image.png\">example</a> <span class=\"user-mention\" data-user-id=\"424214\">@Tyler Josephson ⚛️</span> gives in his talk, the force applied to a mass pulling a string is defined as follows:</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FGgqeW0IsIsLYcxbLriv8iPk/image.png\" title=\"example\"><img src=\"/user_uploads/3121/FGgqeW0IsIsLYcxbLriv8iPk/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">force</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I can define the voltage measured across a conductor in a similar way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">voltage</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>From these definitions, we can prove the following theorem, which doesn't make sense:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">force</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">voltage</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">force_eq_neg_voltage</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">force</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">voltage</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">force</span><span class=\"o\">,</span> <span class=\"n\">voltage</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I don't think it's a good idea to define the force applied to the mass as above.</p>",
        "id": 426053209,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710218432
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"395462\" href=\"/#narrow/stream/395462-Natural-sciences/topic/defining.20the.20force.20applied.20to.20a.20string\">#Natural sciences &gt; defining the force applied to a string</a> by <span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span>.</p>",
        "id": 426058552,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710222880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417769\">@Bulhwi Cha</span> what are your thoughts when it comes to defining the force that acts on a string?</p>",
        "id": 426106155,
        "sender_full_name": "David⚛️",
        "timestamp": 1710243674
    },
    {
        "content": "<p>The problem above is that this is technically true as -a<em>b = -a</em>b. I solution would be to include units, but I haven’t found a method to do that.</p>",
        "id": 426127274,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1710250846
    },
    {
        "content": "<p>We’re working on a dimensional analysis paper - that would fix this one, but wouldn’t solve the problem in general. Maybe the dimensions all match up, but the entities still aren’t supposed to be equal.</p>",
        "id": 426130743,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1710251862
    },
    {
        "content": "<p>On the other hand, what if you have Newton’s law of universal gravitation and Coulomb’s law (which have the same structure), and you want to leverage their similar structure? E.g. reusing derivations in the general Coulomb case to save you trouble in the gravity case?</p>",
        "id": 426131095,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1710251956
    },
    {
        "content": "<p>You could have neutral lemmas about real numbers and then use them to easily prove lemmas about physical quantities. If it becomes too tedious then you can use meta-programming to do it.</p>",
        "id": 426131788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710252134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"587824\">David⚛️</span> <a href=\"#narrow/stream/395462-Natural-sciences/topic/defining.20the.20force.20applied.20to.20a.20mass.20pulling.20a.20string/near/426106155\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> what are your thoughts when it comes to defining the force that acts on a string?</p>\n</blockquote>\n<p>Here's my Lean code. It's just an attempt, so I won't say this is a correct formalization. Besides, it'd be possible to give a concrete definition of <code>Hooke.IsEnd</code>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Another weird formalization done by me</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Motion</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">PhysicalObject</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SomeObject</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">PhysicalObject</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">SomeObject</span><span class=\"o\">)</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">refTime</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">RefRegion</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"n\">motion</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"o\">:</span> <span class=\"n\">RefRegion</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">Region</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"o\">:</span> <span class=\"n\">RefRegion</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">motion</span> <span class=\"n\">p₀</span> <span class=\"n\">t</span><span class=\"o\">}</span>\n  <span class=\"n\">region_eq</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Region</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"o\">:</span> <span class=\"n\">RefRegion</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">motion</span> <span class=\"n\">p₀</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"n\">refRegion_eq</span> <span class=\"o\">:</span> <span class=\"n\">RefRegion</span> <span class=\"bp\">=</span> <span class=\"n\">Region</span> <span class=\"n\">refTime</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Hooke</span> <span class=\"o\">(</span><span class=\"n\">PhysicalObject</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HelicalSpring</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">PhysicalObject</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">HelicalSpring</span><span class=\"o\">)</span>\n    <span class=\"kd\">extends</span> <span class=\"n\">Motion</span> <span class=\"mi\">1</span> <span class=\"n\">PhysicalObject</span> <span class=\"n\">HelicalSpring</span> <span class=\"n\">str</span> <span class=\"n\">where</span>\n  <span class=\"n\">IsEnd</span> <span class=\"o\">:</span> <span class=\"n\">RefRegion</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">has_exactly_two_end</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">q₀</span> <span class=\"o\">:</span> <span class=\"n\">RefRegion</span><span class=\"o\">),</span> <span class=\"n\">p₀</span> <span class=\"bp\">≠</span> <span class=\"n\">q₀</span> <span class=\"bp\">∧</span> <span class=\"n\">IsEnd</span> <span class=\"n\">p₀</span> <span class=\"bp\">∧</span> <span class=\"n\">IsEnd</span> <span class=\"n\">q₀</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r₀</span> <span class=\"o\">:</span> <span class=\"n\">RefRegion</span><span class=\"o\">),</span> <span class=\"n\">r₀</span> <span class=\"bp\">=</span> <span class=\"n\">p₀</span> <span class=\"bp\">∨</span> <span class=\"n\">r₀</span> <span class=\"bp\">=</span> <span class=\"n\">q₀</span>\n  <span class=\"n\">only_one_end_fixed</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p₀</span> <span class=\"n\">q₀</span> <span class=\"o\">:</span> <span class=\"n\">RefRegion</span><span class=\"o\">),</span> <span class=\"n\">p₀</span> <span class=\"bp\">≠</span> <span class=\"n\">q₀</span> <span class=\"bp\">∧</span> <span class=\"n\">IsEnd</span> <span class=\"n\">p₀</span> <span class=\"bp\">∧</span> <span class=\"n\">IsEnd</span> <span class=\"n\">q₀</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">motion</span> <span class=\"n\">p₀</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">p₀</span>\n  <span class=\"n\">fixedEnd</span> <span class=\"o\">:</span> <span class=\"n\">RefRegion</span>\n  <span class=\"n\">fixedEnd_isEnd</span> <span class=\"o\">:</span> <span class=\"n\">IsEnd</span> <span class=\"n\">fixedEnd</span>\n  <span class=\"n\">fixedEnd_fixed</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motion</span> <span class=\"n\">fixedEnd</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">fixedEnd</span>\n  <span class=\"n\">freeEnd</span> <span class=\"o\">:</span> <span class=\"n\">RefRegion</span>\n  <span class=\"n\">freeEnd_isEnd</span> <span class=\"o\">:</span> <span class=\"n\">IsEnd</span> <span class=\"n\">freeEnd</span>\n  <span class=\"n\">fixedEnd_ne_freeEnd</span> <span class=\"o\">:</span> <span class=\"n\">fixedEnd</span> <span class=\"bp\">≠</span> <span class=\"n\">freeEnd</span>\n  <span class=\"n\">relaxedTime</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">relaxedFreeEnd</span> <span class=\"o\">:</span> <span class=\"n\">Region</span> <span class=\"n\">relaxedTime</span>\n  <span class=\"n\">relaxedFreeEnd_eq</span> <span class=\"o\">:</span> <span class=\"n\">relaxedFreeEnd</span> <span class=\"bp\">=</span> <span class=\"n\">motion</span> <span class=\"n\">freeEnd</span> <span class=\"n\">relaxedTime</span>\n  <span class=\"n\">springConstant</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n  <span class=\"n\">springConstant_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">springConstant</span>\n  <span class=\"n\">restoringForce</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">springConstant</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">motion</span> <span class=\"n\">freeEnd</span> <span class=\"n\">t</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span> <span class=\"n\">relaxedFreeEnd.val</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"o\">))</span>\n  <span class=\"n\">restoringForce_eq</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">Fₛ</span> <span class=\"o\">:=</span> <span class=\"n\">restoringForce</span> <span class=\"n\">t</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">springConstant</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">motion</span> <span class=\"n\">freeEnd</span> <span class=\"n\">t</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span> <span class=\"n\">relaxedFreeEnd.val</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"n\">Fₛ</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x₀</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n</div></div>",
        "id": 426180331,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710265156
    },
    {
        "content": "<p>One thing is certain: it's not simple at all.</p>",
        "id": 426187122,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710267432
    },
    {
        "content": "<p>A partial solution to this is to lift arithmetic operations to an inductive type with a constructor named after the quantity or unit you are dealing with and the measurement as a parameter to the constructor.</p>",
        "id": 426203492,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1710273929
    },
    {
        "content": "<p>It is partial because there is no notion of operations on constructors that automatically produces new constructors in the sense that you can't combine constructors for length and time into one for speed. Instead you have to define one separately. A trick to work around this could be : define an expression type on units and operate on those.</p>",
        "id": 426204058,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1710274152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"628490\">@Colin Jones ⚛️</span> and I put these examples together:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">force</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">force2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- Proof that's clearly wrong, but Lean says is okay</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">force_eq_neg_ma</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">force</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">force2</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">force</span><span class=\"o\">,</span> <span class=\"n\">force2</span><span class=\"o\">]</span>\n  <span class=\"n\">ring</span>\n\n<span class=\"c1\">-- Better proof style - indeed, premises h1 and h2 imply the conjecture</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mass_spring_accel_force</span> <span class=\"o\">(</span><span class=\"n\">kspring</span> <span class=\"n\">xposition</span> <span class=\"n\">mass</span> <span class=\"n\">accel</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">force</span> <span class=\"n\">kspring</span> <span class=\"n\">xposition</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">force2</span> <span class=\"n\">mass</span> <span class=\"n\">accel</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">kspring</span><span class=\"bp\">*</span><span class=\"n\">xposition</span> <span class=\"bp\">=</span> <span class=\"n\">mass</span><span class=\"bp\">*</span><span class=\"n\">accel</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">force</span><span class=\"o\">,</span> <span class=\"n\">force2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The provability of the first proof shows this is still a bad setup, even with the units of force being consistent - partly, it's a problem because <code>a</code> and <code>b</code> in each function have different dimensions, but I think the issue goes deeper than that. It's unclear what the \"system\" is - sometimes, more than one force acts on an object, and there's no clear way to provide that information.</p>\n<p>The second proof style is an answer to that - equality statements are used as propositions to form premises. You could easily imagine different theorems that invoke different systems. But overall, the setup isn't okay because the first proof is possible.</p>",
        "id": 426244814,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1710295376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417769\">@Bulhwi Cha</span> You may find this <a href=\"https://dash.harvard.edu/handle/1/38811518\">thesis</a> interesting. There are other papers in the literature that explore ways to formalize physical objects, interactions, and events.</p>",
        "id": 426245106,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1710295541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424214\">Tyler Josephson ⚛️</span> <a href=\"#narrow/stream/395462-Natural-sciences/topic/defining.20the.20force.20applied.20to.20a.20mass.20pulling.20a.20string/near/426244814\">said</a>:</p>\n<blockquote>\n<p>The second proof style is an answer to that - equality statements are used as propositions to form premises. You could easily imagine different theorems that invoke different systems. But overall, the setup isn't okay because the first proof is possible.</p>\n</blockquote>\n<p>I'm telling you that naming a real number variable as <code>mass</code> doesn't make it a mass. Do you think the variable <code>banana : ℝ</code> is a banana and also a real number?</p>",
        "id": 426252293,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710299952
    },
    {
        "content": "<p>Variable names are <em>not</em> important!</p>",
        "id": 426252790,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710300347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424214\">Tyler Josephson ⚛️</span> <a href=\"#narrow/stream/395462-Natural-sciences/topic/defining.20the.20force.20applied.20to.20a.20mass.20pulling.20a.20string/near/426245106\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> You may find this <a href=\"https://dash.harvard.edu/handle/1/38811518\">thesis</a> interesting. There are other papers in the literature that explore ways to formalize physical objects, interactions, and events.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Coq\"><pre><span></span><code><span class=\"kn\">Variable</span> <span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">.</span>\n<span class=\"kn\">Variable</span> <span class=\"n\">IB</span> <span class=\"o\">:</span> <span class=\"n\">body</span> <span class=\"o\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">.</span>\n<span class=\"kn\">Variable</span> <span class=\"n\">Ph</span> <span class=\"o\">:</span> <span class=\"n\">body</span> <span class=\"o\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">.</span>\n<span class=\"kn\">Variable</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">body</span> <span class=\"o\">→</span> <span class=\"n\">body</span> <span class=\"o\">→</span> <span class=\"n\">v4</span> <span class=\"o\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">.</span>\n</code></pre></div>\n<p>I want something else. Can anyone tell me how surfaces having the inside and the outside of them are defined in mathematics? In other words, how do you define surfaces like a sphere?</p>",
        "id": 426254544,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710301719
    },
    {
        "content": "<p>I'll study <a href=\"https://en.wikipedia.org/wiki/Differential_geometry_of_surfaces\">differential geometry</a> in the future.</p>",
        "id": 426255109,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710302172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/395462-Natural-sciences/topic/defining.20the.20force.20applied.20to.20a.20mass.20pulling.20a.20string/near/426252293\">said</a>:</p>\n<blockquote>\n<p>I'm telling you that naming a real number variable as <code>mass</code> doesn't make it a mass. Do you think the variable <code>banana : ℝ</code> is a banana and also a real number?</p>\n</blockquote>\n<blockquote>\n<p>Variable names are <em>not</em> important!</p>\n</blockquote>\n<p>See the following Lean code:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Naming something is irrelevant to defining it</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">force</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">force2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">force_eq_neg_ma</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">force</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">force2</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">force</span><span class=\"o\">,</span> <span class=\"n\">force2</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mass_spring_accel_force</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">kspring</span> <span class=\"n\">xposition</span> <span class=\"n\">mass</span> <span class=\"n\">accel</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">force</span> <span class=\"n\">kspring</span> <span class=\"n\">xposition</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">force2</span> <span class=\"n\">mass</span> <span class=\"n\">accel</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">-</span><span class=\"n\">kspring</span> <span class=\"bp\">*</span> <span class=\"n\">xposition</span> <span class=\"bp\">=</span> <span class=\"n\">mass</span> <span class=\"bp\">*</span> <span class=\"n\">accel</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">force</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">force2</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">voltage</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">R</span>\n<span class=\"kd\">def</span> <span class=\"n\">distance</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">force_eq_neg_voltage</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">force</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">voltage</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">force</span><span class=\"o\">,</span> <span class=\"n\">voltage</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ma_eq_distance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">force2</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">distance</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">neg_voltage_eq_distance</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">I</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">voltage</span> <span class=\"n\">I</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">distance</span> <span class=\"n\">v</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">force_eq_neg_voltage</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ma_eq_distance</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mass_spring_accel_force</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">mass_spring_accel_force</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">=</span> <span class=\"n\">neg_voltage_eq_distance</span> <span class=\"o\">(</span><span class=\"n\">neg_mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">▸</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n</div></div>",
        "id": 426283018,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710318686
    },
    {
        "content": "<p>Helpful response, I've been ruminating over it.</p>\n<p>For a while, I've held this general perspective on formalization:<br>\nLean checks proof <em>syntax</em> (which includes not just code syntax, but logic, too). Syntax can be checked independently from semantics. \"All swans are white. X is a swan. Therefore X is white.\" is syntactically true - the form of the argument is valid, even if a premise within is false (indeed, black swans exist on rare occasions). </p>\n<p>The art and science of modeling physical phenomena necessitate assumptions and approximations. I've been thinking: we ought to be able to structure almost every physical model as \"Here's how it is defined. Therefore, these properties follow.\" Lean can ensure that the syntax is valid. But, it's on the scientist, the formalizer, to use their due diligence in establishing the definition of the system in the first place. In Mathlib, Lean doesn't have the machinery to say \"you stated the theorem incorrectly\" - it only checks proofs. I could rename <a href=\"https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/NumberTheory/PythagoreanTriples.lean#L46-L47\">PythagoreanTriple</a> to <code>FermatsLastTheorem</code> and everything would be valid, but the new name would be nonsense. </p>\n<p>So - I agree with your point, insofar as that naming something is irrelevant <em>syntactically</em> - but I think it's important, semantically. Names matter. </p>\n<p>This is what makes me actually comfortable with the style of this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">neg_voltage_eq_distance</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">I</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">voltage</span> <span class=\"n\">I</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">distance</span> <span class=\"n\">v</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">force_eq_neg_voltage</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ma_eq_distance</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mass_spring_accel_force</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n</code></pre></div>\n<p>I can look at the hypotheses <code>h1</code> and  <code>h2</code> and conclude \"the problem is in the premises - the first premise is fine, but the second premise doesn't go with it.\" I can judge this and say \"V is a bad variable name, I don't know <em>what it means</em>.\" I can also judge this and say \"if R is resistance, it shouldn't be allowed to be negative.\" These criticisms are pushed right up to the front because I know the scientist is responsible for defining the system correctly in the first place. I am unbothered that the theorem is syntactically valid, and Lean gives no error, because I can place the error in the semantics, and the proof style makes explicit the variables, their types, and the assumptions involved.</p>\n<p>This proof bothers me a lot more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">force</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">force2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">force_eq_neg_ma</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">force</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">force2</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">force</span><span class=\"o\">,</span> <span class=\"n\">force2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>There are no premises! That makes this proof \"system independent\" - but this shouldn't be true for all systems. It's extremely sneaky in that it is semantically true for some systems - but we need to remember that Lean is only checking syntax.</p>\n<p>The \"nonsense\" proof you provide is a helpful contrast:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">voltage</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">R</span>\n<span class=\"kd\">def</span> <span class=\"n\">distance</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">force_eq_neg_voltage</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">force</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">voltage</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">force</span><span class=\"o\">,</span> <span class=\"n\">voltage</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This proof is also \"system independent\" - but it's easier to see that the semantics are nonsense. Making the functions very different makes it easier for me to come to terms with it, by thinking about the syntax of how functions work. This is <em>also</em> what the previous proof is doing, it's only proving a property that the functions have, it's not proving anything about propositions relating them. </p>\n<p>Now, we could get fancier, and try harder to encode semantics into Lean, so Lean rejects bad semantics, too. I spend a lot of time thinking about that.</p>",
        "id": 426466667,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1710389391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424214\">Tyler Josephson ⚛️</span> <a href=\"#narrow/stream/395462-Natural-sciences/topic/defining.20the.20force.20applied.20to.20a.20mass.20pulling.20a.20string/near/426466667\">said</a>:</p>\n<blockquote>\n<p>So - I agree with your point, insofar as that naming something is irrelevant <em>syntactically</em> - but I think it's important, semantically. Names matter. </p>\n<p>This is what makes me actually comfortable with the style of this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">neg_voltage_eq_distance</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">I</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">voltage</span> <span class=\"n\">I</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">distance</span> <span class=\"n\">v</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">force_eq_neg_voltage</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ma_eq_distance</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mass_spring_accel_force</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n</code></pre></div>\n</blockquote>\n<p>Are you also comfortable with the last example in my code?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">mass_spring_accel_force</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">=</span> <span class=\"n\">neg_voltage_eq_distance</span> <span class=\"o\">(</span><span class=\"n\">neg_mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">▸</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 426470826,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710392819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424214\">Tyler Josephson ⚛️</span> <a href=\"#narrow/stream/395462-Natural-sciences/topic/defining.20the.20force.20applied.20to.20a.20mass.20pulling.20a.20string/near/426466667\">said</a>:</p>\n<blockquote>\n<p>Now, we could get fancier, and try harder to encode semantics into Lean, so Lean rejects bad semantics, too. I spend a lot of time thinking about that.</p>\n</blockquote>\n<p>I agree with this point, but I also expect classical mechanics formalized in Lean will resemble Mathlib a lot. Perhaps it'll be a part of Mathlib.</p>",
        "id": 426471186,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710393122
    },
    {
        "content": "<p>If Lean tells me that two things are the same, they're the same in my perspective, at least when I'm formalizing a theory with Lean. I don't think there are two objects in Mathlib that mathematicians using Lean should view as different \"semantically,\" even though they can prove these objects are equal to each other.</p>",
        "id": 426473206,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710394695
    },
    {
        "content": "<p>I think polynomials over the reals and finitely supported functions from the naturals to the reals might secretly be equal, even though they multiply in different ways</p>",
        "id": 426480552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710399782
    },
    {
        "content": "<p><em>Secretly</em>, right? Not explicitly.</p>",
        "id": 426480611,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710399826
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial#doc\">docs#Polynomial</a></p>",
        "id": 426480687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710399852
    },
    {
        "content": "<p>By the way, I'm planning to learn algebra with Mathlib after I prove all the remaining theorems on the <code>TODO</code> list in <a href=\"https://github.com/leanprover/std4/blob/main/Std/Data/String/Lemmas.lean\"><code>Std.Data.String.Lemmas</code></a>. Right now, I don't understand that definition.</p>",
        "id": 426481035,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710400075
    },
    {
        "content": "<p>I just translated it for you above :-)</p>",
        "id": 426481169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710400148
    },
    {
        "content": "<p>Then I guess they're not explicitly equal in Mathlib.</p>",
        "id": 426481290,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710400222
    },
    {
        "content": "<p>The multivariate version is</p>",
        "id": 426660256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710467707
    },
    {
        "content": "<p>Can you show me the proof written in Lean?</p>",
        "id": 426660289,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1710467743
    }
]