[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.3E.20PR.20.2311604.3A.20Serre.20graphs.2C.20fundamental.20groups.2C.20covering.20spac/near/430777772\">said</a>:</p>\n<blockquote>\n<p>For instance, <a href=\"#narrow/stream/335062-homology/topic/Derived.20categories.20in.20mathlib\">this</a> is how the latest batch of Joël's \"big PR\" looks like.</p>\n</blockquote>\n<p>I have a question to <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> and git experts: </p>\n<ul>\n<li>what is the procedure to pile up PR like this? </li>\n<li>what happens every time one PR is accepted after modifications?</li>\n</ul>",
        "id": 430799074,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712066956
    },
    {
        "content": "<p>I do not know what Joël's approach is, but I would regularly git merge the PRs with modifications and manually take care of breakage.</p>",
        "id": 430801515,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712067701
    },
    {
        "content": "<p>(At least this is what I normally do when I have PRs that are <code>blocked by other PR</code>.)</p>",
        "id": 430801647,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712067739
    },
    {
        "content": "<p>I know that you get slightly better merge behaviour if you \"start right\": I normally branch off bigger changes from smaller ones.  I think that simply starting merging a small PR into a bigger one probably sets you up correctly anyway.</p>",
        "id": 430801880,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712067810
    },
    {
        "content": "<p>I am pretty sure though that, even in the absence of merge conflicts, there is no automation to automatically reduce the diff to master, once the smaller pieces have landed.</p>",
        "id": 430802013,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712067843
    },
    {
        "content": "<p>I think one of the reasons we don't have more documentation on this is that the precise setup depends on everyone's taste. What is common is the following:</p>\n<ul>\n<li>from GitHub's/bors' point of view, there is no dependence between branch, so if you have multiple PRs depending on one another you have to indicate it in the way suggested when creating a PR</li>\n<li>at any point you can merge the changes from any branch <code>A</code> into your current branch <code>B</code> by doing <code>git merge origin/A</code> (or <code>git merge A</code> if you specifically want to use your local copy of branch <code>A</code>, but I think in most cases that's not what you want). This includes pulling into <code>B</code> some changes that you made in <code>A</code> (e.g during the review) or, keeping <code>B</code> up do date with <code>origin/master</code> (e.g after <code>A</code> has been merged)</li>\n</ul>",
        "id": 430803061,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1712068155
    },
    {
        "content": "<p>So the idea would be: </p>\n<ul>\n<li>PR a little thing </li>\n<li>PR that little thing plus something else as a second PR and tag the first PR in the comment</li>\n<li>etc.<br>\nso that when the PR are accepted in the natural order, each PR is merged in the next one.<br>\nBut if some substantial modification is made in the first one, it will have to be echoed many times, that could be a nightmare…</li>\n</ul>",
        "id": 430803299,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712068217
    },
    {
        "content": "<p>Antoine, yes, this is how I have been doing it.</p>",
        "id": 430803472,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712068269
    },
    {
        "content": "<p>After all, if you change the first PR, then the subsequent ones will likely have to adapt and there is virtually no support for automating that, right now.</p>",
        "id": 430803616,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712068315
    },
    {
        "content": "<p>(Not saying that this is ideal, simply that I do not have a better alternative.)</p>",
        "id": 430803801,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712068364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>: I have a working draft branch where all the material is, and then I copied chunks of code into new PRs as you suggested.</p>\n<p>In this particular case, the dependence tree is not completely trivial: I have a paper where I have written the numbers of the PRs and the names of the branches, so that if one PR is changed, I know which other PRs I need to update.</p>",
        "id": 430804614,
        "sender_full_name": "Joël Riou",
        "timestamp": 1712068604
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 430804969,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712068690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> this discussion might be relevant to you.</p>",
        "id": 430843863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712080400
    },
    {
        "content": "<p>Note that if B depends on A, and then A gets merged with lots of changes, and B has not changed, then an easy way to incorporate all the new changes is: <code>merge -X theirs master</code>.</p>\n<p>However, take care: If there are merge conflicts other than the ones created by the changes from A, this may not do what you want. Nevertheless, I find it useful.</p>",
        "id": 430909455,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712113258
    },
    {
        "content": "<p>There is an alternate strategy: keep one big PR, make all changes there, and then cherry pick them into the dependencies. I find this harder to do, but sometimes it's better.</p>",
        "id": 430909617,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712113340
    },
    {
        "content": "<p>Personally I replace \"one big PR\" with \"a separate repo with instructions for future me\"</p>",
        "id": 430924480,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712123969
    },
    {
        "content": "<p>--update-refs option helps with updating the stack: <a href=\"https://andrewlock.net/working-with-stacked-branches-in-git-is-easier-with-update-refs/\">https://andrewlock.net/working-with-stacked-branches-in-git-is-easier-with-update-refs/</a></p>\n<p>also note: don't make the mistake I did of basing each PR off of the previous PR. While that makes the diff cleaner, mathlib or bors seems to automatically delete branches upon merging, which will close any PRs based upon it, with no way to re-open.</p>",
        "id": 430925087,
        "sender_full_name": "llllvvuu",
        "timestamp": 1712124287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"607118\">llllvvuu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/stacks.20of.20pull.20requests/near/430925087\">said</a>:</p>\n<blockquote>\n<p>... with no way to re-open.</p>\n</blockquote>\n<p>That's wrong, you can reopen them, but you first need to undo bors' closing of the base branch in the previous PR</p>",
        "id": 430925202,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712124351
    },
    {
        "content": "<p>TIL, thanks!</p>",
        "id": 430925355,
        "sender_full_name": "llllvvuu",
        "timestamp": 1712124427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/stacks.20of.20pull.20requests/near/430909455\">said</a>:</p>\n<blockquote>\n<p>Note that if B depends on A, and then A gets merged with lots of changes, and B has not changed, then an easy way to incorporate all the new changes is: <code>merge -X theirs master</code>.</p>\n<p>However, take care: If there are merge conflicts other than the ones created by the changes from A, this may not do what you want. Nevertheless, I find it useful.</p>\n</blockquote>\n<p>The safer way is to go back to A's branch,  run <code>git merge origin/master</code> (should go through without conflict), then go to B's branch and run <code>git merge -</code>. This two step process helps git to understand the “conflicts” between A's changes on A's branch and A's squashed commit. I've been using this regularly on lean repository.</p>",
        "id": 430975650,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712141934
    },
    {
        "content": "<p>At a previous project which only allowed <em>strict</em> squash merges, I automated the process (<a href=\"https://github.com/nomeata/git-post-squash\">https://github.com/nomeata/git-post-squash</a>). This won't work on mathlib or lean4, but the above manual two-merge should work reasonably well.</p>",
        "id": 430976022,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712142091
    },
    {
        "content": "<p>I wonder if the Facebook people really are onto something with their stacked diffs or whatever it is</p>",
        "id": 430979287,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1712143238
    },
    {
        "content": "<p>Is that  phabricator? GHC used it for a while, supposedly really much better UI for that use case.</p>",
        "id": 430979517,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712143343
    },
    {
        "content": "<p>Yeah it appears so! Just heard anecdotally of it not sure of the precise differences</p>",
        "id": 430980314,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1712143694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/stacks.20of.20pull.20requests/near/430975650\">said</a>:</p>\n<blockquote>\n<p>The safer way is to go back to A's branch,  run <code>git merge origin/master</code> (should go through without conflict), then go to B's branch and run <code>git merge -</code>. This two step process helps git to understand the “conflicts” between A's changes on A's branch and A's squashed commit. I've been using this regularly on lean repository.</p>\n</blockquote>\n<p>That's nice indeed, but it also comes with a small hiccup. There could be issues with <code>git merge origin/master</code> into A's branch if there were edits made in the GitHub UI before merging, and you don't have the latest version locally (and the branch on GitHub was deleted by bors); this can happen especially with delegated PRs. Nevertheless, this is a minor inconvenience and I think your approach is better.</p>",
        "id": 431116125,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712157039
    }
]