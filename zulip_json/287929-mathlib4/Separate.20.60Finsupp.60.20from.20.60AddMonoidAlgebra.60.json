[
    {
        "content": "<p>The plan is to place the structure divide when defining AddMonoidAlgebra, right? I remember that @Eric Wieser had suggested even trying to unify AddMonoidAlgebra and MonoidAlgebra: these two refactors should not happen at the same time!</p>\n<p>(conversation started <a href=\"#narrow/stream/113489-new-members/topic/Polynomial.2EBasic.20-.20instance.20semiring/near/421623847\">here</a>).</p>",
        "id": 421624155,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707992999
    },
    {
        "content": "<p>I envisage a process where</p>\n<ul>\n<li>we introduce the divide in a <em>branch</em>,</li>\n<li>we fix some of the proofs that break in <em>Mathlib</em>,</li>\n<li>we stop when we get bored or there are no further proofs to fix, at which point, we also introduce the divide in <em>Mathlib</em>.</li>\n</ul>\n<p>Does this sound reasonable?</p>",
        "id": 421624623,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707993168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"557459\">@Xavier Généreux</span> and I are working on a generalization of <code>MonoidAlgebra</code>, <code>SkewMonoidAlgebra</code>, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10541\">#10541</a> (which we would also need to refactor analogously). We only did the multiplicative version, partly because some of our results in the skewed case rely on <code>MulSemiringAction</code>.</p>",
        "id": 421624696,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1707993196
    },
    {
        "content": "<p>Ok, thanks for the heads up!  Since I think that this will be a somewhat long process, I do not see a big issue with starting it with <code>AddMonoidAlgebra</code> and then seeing when/where to extend.</p>",
        "id": 421624922,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707993271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Separate.20.60Finsupp.60.20from.20.60AddMonoidAlgebra.60/near/421624155\">said</a>:</p>\n<blockquote>\n<p>@Eric Wieser had suggested even trying to unify AddMonoidAlgebra and MonoidAlgebra.</p>\n</blockquote>\n<p>There is an implementation note in <code>MonoidAlgebra.Basic</code> which seems related to this:</p>\n<blockquote>\n<p>Similarly, I attempted to just define k[G] := MonoidAlgebra k (Multiplicative G), but the definitional equality Multiplicative G = G leaks through everywhere, and seems impossible to use.</p>\n</blockquote>\n<p>Would unifying the two classes lead to problems with polynomials?</p>",
        "id": 421625568,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1707993485
    },
    {
        "content": "<p>María, yes, this is related to the unification.  I am less confident about this change, so my plan is to start with defining</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">where</span> <span class=\"n\">ofFinsupp</span> <span class=\"o\">::</span>\n  <span class=\"n\">toFinsupp</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>instead of the current</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"o\">:=</span>\n  <span class=\"n\">G</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 421630321,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707995211
    },
    {
        "content": "<p>OK, sounds good.</p>",
        "id": 421630462,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1707995273
    },
    {
        "content": "<p>Can you explain what this modification should change?</p>",
        "id": 421647513,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708001747
    },
    {
        "content": "<p>It would break some proofs where definitonal abuse was occurring, and this might be a good thing because definitonal abuse can contribute to leakage. The point is that the dictionary between the two concepts will now be <code>toFinsupp</code> or <code>\\&lt;_\\&gt;</code> whereas right now it's <code>id</code></p>",
        "id": 421648034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708001896
    },
    {
        "content": "<p>And mostly we get back the mathematical identity between <code>AddMonoidAlgebra</code> and <code>Polynomial</code></p>",
        "id": 421648975,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708002181
    },
    {
        "content": "<p>Polynomial are just a special-case of monoid algebras, and should be formalised as such.</p>",
        "id": 421649053,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708002210
    },
    {
        "content": "<p>It also moves the separation between <code>Finsupp</code> and <code>Polynomial</code> at the place where the \"real\" difference is, namely where multiplication starts being used.</p>",
        "id": 421649233,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708002266
    },
    {
        "content": "<p>Except that I think there should exist a “monoid module” - at least if M acts on V, an action of the monoid algebra of M (Finsupp M k) on (Finsupp V k).</p>",
        "id": 421713760,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708021019
    },
    {
        "content": "<p>Hello everyone,<br>\nFollowing the discussion of this thread, I have updated <a href=\"https://github.com/leanprover-community/mathlib4/pull/10541\">#10541</a> that introduces a generalisation of <code>MonoidAlgebra</code>, <code>SkewMonoidAlgebra</code>, to match the change described above. Are there any updates on whether this change is still happening/planned? I would like to build on the current version of <code>SkewMonoidAlgebra</code> of <a href=\"https://github.com/leanprover-community/mathlib4/pull/10541\">#10541</a>, in particular by defining <code>SkewPolynomial</code>.</p>",
        "id": 438541031,
        "sender_full_name": "Xavier Généreux",
        "timestamp": 1715680616
    },
    {
        "content": "<p>I have not given up on the split, but <code>AddMonoidAlgebra</code> and <code>MonoidAlgebra</code> are not parallel enough.  So, I am trying to first make them <em>really</em> parallel and then change only one, with the other auto-changed.</p>\n<p>You can see some partial progress at <a href=\"https://github.com/leanprover-community/mathlib4/pull/12637\">#12637</a>.</p>",
        "id": 438542018,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715680947
    }
]