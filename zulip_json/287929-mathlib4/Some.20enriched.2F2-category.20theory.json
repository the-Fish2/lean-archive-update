[
    {
        "content": "<p>I would like to develop the following, in no particular order:</p>\n<ul>\n<li>An appropriate sort of equivalence between strict 2-categories and Cat-enriched categories</li>\n<li>The cartesian closed structure on Cat</li>\n<li>The self enrichment of a closed monoidal category</li>\n<li>The cartesian closed structure of preorders, posers</li>\n<li>The enrichment of various categories of ordered things in Preord/Pos</li>\n<li>The induced strict 2-category structures from the above</li>\n</ul>\n<p>Is anyone else working on related things, and separately does anyone have feedback/suggestions on this vague plan of action?</p>",
        "id": 420376328,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707358665
    },
    {
        "content": "<p>I also think it would be nice to have a notion of \"concrete monoidal category\", where the data of a concrete monoidal structure on a monoidal category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">C</mi><mo separator=\"true\">,</mo><mo>⊗</mo><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\mathcal{C}, \\otimes, k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">⊗</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> is a concrete category structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span>, i.e. a faithful functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>:</mo><mi mathvariant=\"script\">C</mi><mo>→</mo><mrow><mi mathvariant=\"sans-serif\">S</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">U : \\mathcal{C} \\to \\mathsf{Set}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathsf\">Set</span></span></span></span></span>, and a universal element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ξ</mi><mo>∈</mo><mi>U</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\xi \\in U(k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04601em;\">ξ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> exhibiting that the unit object corepresents the forgetful functor. As far as I know this isn't a standard defintion. However I think it would be nice to be able to talk about how eg an Ab-enriched category is the same as an ordinary category + abelian group structures on Hom sets + a proof that composition is bilinear, or how a Poset-enriched category is an ordinary category + a partial order on Hom sets + a proof that composition is monotone. I don't know how people generally feel about adding nonstandard mathematical defintions to the library though, is it completely prohibited?</p>",
        "id": 420376863,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707359021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> don't worry, we do that all the time.</p>",
        "id": 420389192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707369193
    },
    {
        "content": "<p>cool! I did notice the documentation for monoidal closed categories pointing out that eg k-algebras could reasonably be called \"concrete monoidal\" but their forgetful functor is represented by k[X], not the unit k. So I'll hold off on that particular bit until I think about this harder and confirm with people on zulip it makes sense</p>",
        "id": 420396444,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707374866
    },
    {
        "content": "<p>Maybe it's enough if the forgetful functor is representable?</p>",
        "id": 420396755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707375065
    },
    {
        "content": "<p>Or maybe not even that?</p>",
        "id": 420396789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707375095
    },
    {
        "content": "<p>But I guess you'd want <em>something</em> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 420396813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707375118
    },
    {
        "content": "<p>Bare minimum is that it's either lax or oplax monoidal</p>",
        "id": 420396867,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707375134
    },
    {
        "content": "<p>The definition I initially suggested gives lax monoidal</p>",
        "id": 420396887,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707375149
    },
    {
        "content": "<p>I think representability by a monoid gives lax monoidal generally? and maybe vice versa, by yoneda? Lax functors are the monoids in the functor category.</p>",
        "id": 420396905,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707375168
    },
    {
        "content": "<p>I can't think of an example where it's oplax, but I'm uncertain</p>",
        "id": 420396949,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707375200
    },
    {
        "content": "<p>I think lax makes more sense, it means there's a set-function X × Y -&gt; X (×) Y and this says something like X (×) Y is generated by honest pairs (in a very loose way). Maybe it becomes clearer if things are recast in terms of the closed structure</p>",
        "id": 420397240,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707375365
    }
]