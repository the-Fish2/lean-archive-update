[
    {
        "content": "<p>This is a somewhat newbie question about mathlib's library design; feel free to move if there's a better stream.</p>\n<p>I'm creating a new <code>Equiv</code> (ContinuousAffineEquiv, <a href=\"https://github.com/leanprover-community/mathlib4/pull/11341\">#11341</a>). Here and in previous PRs, I noticed that adding basic API is lots of repetitive boilerplate: lots of <code>Equiv</code>s (including <code>PartialEquiv</code>, <code>PartialHomeomorph</code>, <code>Diffeomorph</code>, <code>LocalHomeomorph</code>) have very similar code, e.g.</p>\n<ul>\n<li>refl, symm and trans \"instances\" (mind you, these are <code>def</code>s, not <code>instance</code>s)</li>\n<li>the same lemmas about them: <code>symm_refl</code>, <code>symm_symm</code>, <code>trans_refl</code>, <code>refl_trans</code>, <code>symm_apply</code>, <code>apply_symm_apply</code>, <code>symm_apply_symm</code>, etc.</li>\n</ul>\n<p>The latter is a long list which I never remember. Basically, I open a related file (if there are several: repeat for all of them), copy-paste the relevant section and adapt or delete lemmas accordingly. If there are several files, look if the second file contains new lemmas.<br>\nIt's somewhat tedious, and of course every <code>Equiv</code> has a slightly different set of lemmas and in different order. I understand this is natural as mathlib grew organically over time, I can deal with it, but I wonder if there's a better way.</p>\n<ul>\n<li>Would it make sense to standardise these lemmas - e.g., in a particular order or to a particular set of lemmas?</li>\n<li>Is there a way to avoid the duplication? Do we need all of these lemmas?</li>\n<li>Do you have particular tricks to make writing this API more efficient/less tedious?</li>\n</ul>",
        "id": 426223457,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710282681
    },
    {
        "content": "<p>I agree with this, and <code>Equiv</code>s are not the only occurence of such things. We probably don't want something too strict for now (looking at how much <code>@[simps]</code> we need to generate by hand, full automation is not the way to go) but having a template file would be a great way to start. If you or anyone else wants to create a page on the website describing this that would be great!</p>",
        "id": 426225242,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1710283763
    },
    {
        "content": "<p>I think there have been previous discussions of various possible approaches for having type-generic <code>refl</code>, <code>symm</code> and <code>trans</code> that work for <code>EquivLike</code> classes in general to reduce such duplication. I wonder if we should set up notation typeclasses for <code>refl</code>, <code>symm</code> and <code>trans</code> (and then use the notation everywhere), plus typeclasses for when that notation, together with a family of <code>EquivLike</code> classes, satisfies the axioms of a groupoid. (I don't know how well such typeclasses would work with Lean's typeclass search / elaboration, however.)</p>",
        "id": 426242111,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1710293924
    },
    {
        "content": "<p>The category theoretic <code>Iso</code> is there waiting for you. :-) It is not as universe polymorphic, but <span aria-label=\"woman shrugging\" class=\"emoji emoji-1f937-200d-2640\" role=\"img\" title=\"woman shrugging\">:woman_shrugging:</span>.</p>",
        "id": 426243857,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710294895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"684366\">@Edward van de Meent</span> recently created such a template</p>",
        "id": 426257911,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710304129
    },
    {
        "content": "<p>I think the answer here is probably to have the generalization live outside of Lean's type theory, but as meta code that generates declarations</p>",
        "id": 426283993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710319076
    },
    {
        "content": "<p>i don't have a template for <code>Equiv</code> (yet), but i do have one for <code>Hom</code>...</p>",
        "id": 426285576,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710319672
    },
    {
        "content": "<p>for that, see <a href=\"#narrow/stream/287929-mathlib4/topic/advice.20for.20defining.20bundled.20hom.20and.20equiv.20structures/near/425162695\">this message</a></p>",
        "id": 426285729,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710319718
    },
    {
        "content": "<p>the trouble is that there are multiple ways to create <code>Equiv</code> classes, however. because you can say \"this equivalence is [X] Equivalence that is also [Y] equivalence\", or you can say it is \"[Z] Equivalence that has [W] property\", and either one generates <em>not quite</em> the same thing...</p>",
        "id": 426286597,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710320052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>'s <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EquivLike#doc\">docs#EquivLike</a> was supposed to be the solution to this duplication, but it induces a significant amount of technical pain itself.</p>",
        "id": 426288482,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1710320667
    },
    {
        "content": "<p>which reminds me, it would appear the docs suggest extending <code>EquivLike</code> when defining <code>MyEquivClass</code>, however for example <code>MulEquivClass</code> takes it as a parameter instead... what is the policy for this?</p>",
        "id": 426289815,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710321165
    },
    {
        "content": "<p>because it leads to a bit of juggling when creating an instance for your new class</p>",
        "id": 426289979,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710321227
    },
    {
        "content": "<p>This was a recent refactor, and apparently not all the docs have been updated...</p>",
        "id": 426290009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710321242
    },
    {
        "content": "<p>Taking a parameter is the new way to go</p>",
        "id": 426290064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710321254
    },
    {
        "content": "<p>ah <span aria-label=\"melting face\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melting face\">:melting_face:</span></p>",
        "id": 426290106,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710321269
    },
    {
        "content": "<p>i guess i have work to do <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 426290163,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1710321287
    },
    {
        "content": "<p>Related work by <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2202\">#2202</a>, <a href=\"#narrow/stream/287929-mathlib4/topic/RFC.3A.20bundled.20sets.20.236442\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/RFC.3A.20bundled.20sets.20.236442</a></p>",
        "id": 427171057,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1710695786
    }
]