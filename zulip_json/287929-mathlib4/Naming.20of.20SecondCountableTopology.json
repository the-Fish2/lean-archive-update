[
    {
        "content": "<p>I'm trying to automatically generate names for topological spaces to facilitate in tracking the progress of Mathlib on the results in pi-base, but I'm a bit confused about why <code>SecondCountableTopology</code> and <code>FirstCountableTopology</code> are not named <code>SecondCountableSpace</code> and <code>FirstCountableSpace</code> instead, what logic am I missing, so that I can adapt my code for this?</p>",
        "id": 421692412,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708014266
    },
    {
        "content": "<p>Usually, the answer is \"for historical reasons\" a.k.a. someone chose these names several years ago. Also, there are no other topology- related terms in the names.</p>",
        "id": 423103618,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708726689
    },
    {
        "content": "<p>Also, some names are in the <code>TopologicalSpace</code> namespace, others aren't.</p>",
        "id": 423103755,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708726771
    },
    {
        "content": "<p>Okay, thank you! Let me drop a poll here to see if people want to see the name changed to SecondCountableSpace? I’ll make a PR if there is sufficiently much support</p>",
        "id": 423107501,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708728910
    },
    {
        "content": "<p>/poll Change the name to SecondCountableTopology?<br>\nYes<br>\nNo</p>",
        "id": 423107535,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708728949
    },
    {
        "content": "<p>Personally, I would prefer dropping the <code>Space</code> suffix on these. E.g., <code>SecondCountable</code>, <code>Metrizable</code> (that one could even come out of the <code>TopologicalSpace</code> namespace), etc.</p>",
        "id": 423126991,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708744882
    },
    {
        "content": "<p>/poll Drop the -Topology/Space suffix on the above mentioned topological properties<br>\nYes<br>\nNo</p>",
        "id": 423143151,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708758372
    },
    {
        "content": "<p>I'd rather add a prefix <code>Is</code> for uniformity with the rest of mathlib, but keep <code>Space</code>to distinguish properties of the space from properties of sets. For instance, <code>IsCompact</code> vs. <code>IsCompactSpace</code>.</p>",
        "id": 423152043,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708765438
    },
    {
        "content": "<p>I think this shows that we <em>really</em> need to decide under what conditions the <code>Is</code> prefix applies.</p>",
        "id": 423243677,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708849440
    },
    {
        "content": "<p>What are the arguments against \"<code>Is</code> iff a Prop\"?</p>",
        "id": 423249759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708854856
    },
    {
        "content": "<p>That doesn’t make sense in category theory</p>",
        "id": 423268111,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708871872
    },
    {
        "content": "<p>I believe most of the counter examples are in the category theory files (<code>Faithful</code>, <code>IsLimit</code>, <code>IsLeftAdjoint</code>). I think the argument is that <code>Full</code> being a Type and <code>Faithful</code> being a Prop is largely an implementation detail, so it would be weird to have <code>Full</code> and <code>IsFaithful</code>.</p>",
        "id": 423268115,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1708871879
    },
    {
        "content": "<p>Well, in my opinion the reason is that Prop genuinely should mean something different when doing category theory. Since talking about, e.g. equality of objects is incompatible with the language of category theory, if you want to state some property involving objects, you need to include data which (usually) pins down some objects up to isomorphism. <code>IsLimit</code> and <code>IsLeftAdjoint</code> are good examples of this. When we start doing higher category theory in earnest, the situation will only get worse</p>",
        "id": 423268429,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708872197
    },
    {
        "content": "<p>Arguably <code>Full</code> could be made a prop since it’s a property about morphisms, not objects</p>",
        "id": 423268487,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708872244
    },
    {
        "content": "<p>Why can't <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.IsLimit#doc\">docs#CategoryTheory.Limits.IsLimit</a> be a <code>Prop</code>?</p>",
        "id": 423273186,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708876820
    },
    {
        "content": "<p>I rephrase: presently, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.IsLimit#doc\">docs#CategoryTheory.Limits.IsLimit</a> contains the lifts implied by the universal property of a limit, so it contains data, but why couldn't there be a <code>Prop</code>-version that merely asserts the universal property?</p>",
        "id": 423273406,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708877035
    },
    {
        "content": "<p>That would be slightly strange, as it would mean that you care about the specific maps going out of the cone point (these are part of the cone), but not about those going into the cone point (which are part of <code>IsLimit</code>). Of course, we do have the case where you care about neither maps, nor the cone point: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.HasLimit#doc\">docs#CategoryTheory.Limits.HasLimit</a></p>",
        "id": 423273663,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1708877268
    },
    {
        "content": "<p>Antoine, you’re right, IsLimit could indeed be phrased as a prop with this philosophy. But there are situations where you may want explicit control over the lift morphism, and for those having it as part of the data is convenient. If no control is needed then HasLimit is the way to go as Markus mentioned. (I admit, this issue is orthogonal to the situation of the comment I made above, so IsLeftAdjoint is a better example in that case.)</p>",
        "id": 423282038,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708885511
    }
]