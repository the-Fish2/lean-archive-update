[
    {
        "content": "<p>I think that this was discussed some time ago but I can't quickly find the thread. What do you think about removing <code>@[simp]</code> from lemmas like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.mem_image#doc\">docs#Set.mem_image</a> and moving it to lemmas like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.ball_image_iff#doc\">docs#Set.ball_image_iff</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.biUnion_image#doc\">docs#Set.biUnion_image</a> ?</p>",
        "id": 409942038,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703540700
    },
    {
        "content": "<p>IMHO, in case of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.mem_image#doc\">docs#Set.mem_image</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.mem_range#doc\">docs#Set.mem_range</a>, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.mem_image2#doc\">docs#Set.mem_image2</a>, the RHS is not simpler than LHS.</p>",
        "id": 409942058,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703540756
    },
    {
        "content": "<p>Also, this creates <code>simp</code> confluence issues when we have something like <code>⋃ y ∈ f '' s, g y</code> but there is a <code>simp</code> lemma for <code>⋃  x ∈ s, _</code> that stops Lean from applying <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.iUnion_iUnion_eq_right#doc\">docs#Set.iUnion_iUnion_eq_right</a></p>",
        "id": 409942451,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703541286
    },
    {
        "content": "<p>I think this was discussed before, perhaps pre-lean4. It would be good to find the old thread.</p>",
        "id": 409943867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703542907
    },
    {
        "content": "<p>I tried and failed.</p>",
        "id": 409944126,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703543208
    },
    {
        "content": "<p>I'm a priori not super happy with such a change, but good alternative simp lemmas could convince me otherwise.</p>",
        "id": 409986378,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703575772
    },
    {
        "content": "<p>My hunch is that a <em>lot</em> of proofs of the form <code>by ext; simp</code> will break.</p>",
        "id": 409986405,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703575798
    },
    {
        "content": "<p>For confluence on <code>⋃ y ∈ f '' s, g y</code>, I would think this just means that we're missing simp lemmas for <code>⋃</code> mimicking the basic logic ones</p>",
        "id": 409986509,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703575848
    },
    {
        "content": "<p>We do have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.iUnion_iUnion_eq_right#doc\">docs#Set.iUnion_iUnion_eq_right</a> but it doesn't work if Lean can simplify <code>x ∈ s</code>. The same happens in a simpler case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Lattice</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">guard_target</span> <span class=\"bp\">=ₛ</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- success</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">guard_target</span> <span class=\"bp\">=ₛ</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x_1</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">x_1</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x_1</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"n\">x_1</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- success</span>\n</code></pre></div>",
        "id": 410031899,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703600825
    },
    {
        "content": "<p>Here's one old message I found:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Can.20Vector.2Emap_cons.20be.20simp/near/365594366\">said</a>:</p>\n<blockquote>\n<p>Another one that annoys me greatly is <code>Set.mem_image</code>, which I always have to disable because what I actually want is <code>Set.ball_image_iff</code>.</p>\n</blockquote>",
        "id": 410039725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703605007
    },
    {
        "content": "<p>And another</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113488-general/topic/set.2Eimage.20for.20.60Prop.60.3F/near/235165662\">said</a>:</p>\n<blockquote>\n<p>By the way, is this really a good simp lemma? It turns something into an existential, which is not very good as a normal form because it is hard to manipulate (Lean will almost never be able to guess the right <code>y</code> to discharge such a proof obligation).</p>\n</blockquote>",
        "id": 410040032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703605195
    },
    {
        "content": "<p>We certainly can try removing it</p>",
        "id": 410040879,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703605679
    },
    {
        "content": "<p>I'll try after <a href=\"https://github.com/leanprover-community/mathlib4/pull/9275\">#9275</a></p>",
        "id": 410042082,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703606422
    },
    {
        "content": "<p>I'm wondering if this is suggesting a different design for \"cute\" binders.  For example, if we had a separate notation and definition for bounded quantifiers</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">BForall</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">dom</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n\n<span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"∀ \"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\", \"</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">BForall</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- LHS is `BForall (Set.Icc 0 1) fun x ↦ x &lt; 2`</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>then we could be sure that <code>Set.ball_image_iff</code> would get applied rather than <code>Set.mem_image</code>.</p>\n<p>The tradeoff would be needing specialized lemmas for handling <code>BForall</code> as well as potentially needing to modify tactics to be <code>BForall</code>-aware. While <code>intro</code> would be able to see through it for example, <code>intros</code> would not...</p>",
        "id": 410042655,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703606661
    },
    {
        "content": "<p>Do you suggest introducing <code>BForall</code>, <code>BExists</code>, <code>Set.biUnion</code> etc?</p>",
        "id": 410043726,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703607347
    },
    {
        "content": "<p>another alternative is for simp to just \"get good\" at handling <code>forall x, (exist y, x = f y) -&gt; P x</code> simplification. Isabelle is able to simplify this using a simpproc</p>",
        "id": 410044706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703607981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Yeah, that's the suggestion. It's just an idea I thought I'd mention which didn't seem immediately bad. I came up with it because it's something I noticed is necessary when making a framework for binders over different types of containers -- not everything can use the nesting trick, for example <code>Finset.sum</code> can't, and it's easier to handle when binders have both a raw type for the bound variable along with some object representing its domain.</p>\n<p>I'm not suggesting this very seriously though.</p>",
        "id": 410047864,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703610239
    }
]