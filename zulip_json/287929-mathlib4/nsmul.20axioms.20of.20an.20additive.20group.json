[
    {
        "content": "<p>The definition of an additive commutative group contains the following field:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nsmul_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">AddMonoid.nsmul</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">AddMonoid.nsmul</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Is it written like this on purpose, with the two terms switched, rather than the more obvious</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nsmul_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">AddMonoid.nsmul</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">AddMonoid.nsmul</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 427162939,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710693646
    },
    {
        "content": "<p>I think it's written this way because for <code>to_additive</code> it is much easier if it matches <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Group.npow_succ#doc\">docs#Group.npow_succ</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">npow_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">Monoid.npow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">Monoid.npow</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 427164136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710693962
    },
    {
        "content": "<p>I guess probably both could be changed</p>",
        "id": 427164367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710694010
    },
    {
        "content": "<p>The other important thing is that the lemma is true by definition for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=nsmulRec#doc\">docs#nsmulRec</a></p>",
        "id": 427164439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710694029
    },
    {
        "content": "<p>Of course that matches, but this is bizarre, and does not match with <code>Nat.pow_succ</code>, etc.</p>",
        "id": 427164461,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710694050
    },
    {
        "content": "<p>nsmulRec should probably be changed in the same way…</p>",
        "id": 427164727,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710694108
    },
    {
        "content": "<p>I guess you could try changing it and seeing what breaks?</p>",
        "id": 427165669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710694368
    },
    {
        "content": "<p>OK.</p>",
        "id": 427165728,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710694382
    },
    {
        "content": "<p>Oops, the file says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- use `x * npowRec n x` and not `npowRec n x * x` in the definition to make sure that</span>\n<span class=\"c1\">-- definitional unfolding of `npowRec` is blocked, to avoid deep recursion issues.</span>\n</code></pre></div>",
        "id": 427166534,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710694584
    },
    {
        "content": "<p>I have no idea what that means!</p>",
        "id": 427166605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710694603
    },
    {
        "content": "<p>This dates back to Lean 3. I remember that <code>npowRec n x * x</code> created weird issues while <code>x * npowRec n x</code> didn't. It's possible that these issues have disappeared with Lean 4, so it's worth trying to see what happens!</p>",
        "id": 427166947,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1710694691
    },
    {
        "content": "<p>OK, so I try !</p>",
        "id": 427167011,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710694709
    },
    {
        "content": "<p>I'm almost there, <a href=\"https://github.com/leanprover-community/mathlib4/pull/11451\">#11451</a>, that was more painful than expected, especially because I exchanged the meanings of <code>pow_succ</code> and <code>pow_succ'</code> so that the unprimed version refers to the definition.</p>",
        "id": 427653984,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1710841747
    }
]