[
    {
        "content": "<p>I just had a PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12556\">#12556</a>) where I needed to fix some occurrences of the <code>simp says</code> tactics. I do like the information in these tactics, but it would be much nicer if the current tooling for it is improved.</p>\n<ul>\n<li>There were occurrences of <code>t1 says t2</code> where both <code>t1</code> and <code>t2</code> succeeded, but the syntax produced by <code>t1</code> changed. Of course CI should flag these cases, but it would be nice if CI continues building all files despite this \"error\".</li>\n<li>When locally fixing the mismatches, I ran a tactic like <code>simp? [hb] at hA₃ says</code>, and this resulted in the following syntax, that doesn't parse because of the newline before <code>hA₃</code> (it's not in a greater column than the previous line).</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span>  <span class=\"n\">at</span>\n          <span class=\"n\">hA₃</span> <span class=\"n\">says</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">CharP.cast_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span>\n          <span class=\"n\">div_self</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.coe_one</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.coe_zero</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">,</span>\n          <span class=\"n\">ENNReal.coe_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hA₃</span>\n</code></pre></div>\n<ul>\n<li>Of course even better would be if a bot automatically PRs a fix (if the original tactic <code>t1</code> still works), but that is probably trickier.</li>\n</ul>",
        "id": 436337859,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714504573
    },
    {
        "content": "<blockquote>\n<p>When locally fixing the mismatches, I ran a tactic like <code>simp? [hb] at hA₃ says</code>, and this resulted in the following syntax, that doesn't parse because of the newline before <code>hA₃</code> (it's not in a greater column than the previous line).</p>\n</blockquote>\n<p>It looks like it is on a greater column though?</p>",
        "id": 436352782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714510660
    },
    {
        "content": "<p>the double space before <code>at</code> looks weird though, and certainly the line break is not well placed and would be best positioned after <code>says</code></p>",
        "id": 436352937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714510709
    },
    {
        "content": "<p>The says command indeed produces double spaces. And the greater column is presumably measured from the perspective of where the <code>at</code> is...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Common</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">says</span>  <span class=\"c1\">-- simp?  at h says simp only [Nat.sub_self] at h</span>\n                        <span class=\"c1\">-- ^^ double space</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_self</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">says</span>\n  <span class=\"c1\">-- simp? [Nat.sub_self]  at h says simp only [Nat.sub_self] at h</span>\n                      <span class=\"c1\">-- ^^ double space</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span>\n        <span class=\"n\">h</span> <span class=\"c1\">-- fine</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span>\n    <span class=\"n\">h</span>  <span class=\"c1\">-- expected '*' or checkColGt</span>\n</code></pre></div>",
        "id": 436485437,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714563038
    },
    {
        "content": "<p>I tested your example and noticed something else funny: the first example produces two <code>Try this</code> suggestions, one with <code>simp? says</code> and the other one with only <code>simp only ...</code>. There is only one message produced but two try this widgets and two code actions</p>",
        "id": 436619478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714628015
    }
]