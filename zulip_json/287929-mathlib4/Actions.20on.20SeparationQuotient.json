[
    {
        "content": "<p>I'm going to introduce the instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSMul</span> <span class=\"o\">[</span><span class=\"n\">ContinuousConstSMul</span> <span class=\"n\">M</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">SeparationQuotient</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.map'</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">Inseparable.map</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">continuous_const_smul</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>as well as algebraic operations on <code>SeparationQuotient X</code>. Should I also introduce this instance?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instSMul'</span> <span class=\"o\">[</span><span class=\"n\">ContinuousSMul</span> <span class=\"n\">M</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">SeparationQuotient</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SeparationQuotient</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>It may probably lead to diamonds, if we take <code>SeparationQuotient (SeparationQuotient X)</code>. Should we care about this? Are there any other reasons to avoid it? <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 433139488,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713105630
    },
    {
        "content": "<p>For my goals, I don't need it but it looks like a natural generalization of <code>Mul (SeparationQuotient X)</code>.</p>",
        "id": 433139534,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713105681
    },
    {
        "content": "<p><code>SeparationQuotient</code> is idempotent, so I think the risk of diamonds actually occuring in practice is quite low?</p>",
        "id": 433140927,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1713106930
    },
    {
        "content": "<p>Generally <code>[SMul A B] : SMul (F A) (F B)</code> instances are a bad idea</p>",
        "id": 433141755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713107641
    },
    {
        "content": "<p>We have them in a few places anyway, but they cause non-propeq diamonds. I think I shared a thesis chapter in another thread that discusses this further.</p>",
        "id": 433141868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713107701
    },
    {
        "content": "<p>Yes I agree, e.g it's not clear what the action of <code>Set Real</code> on <code>Set (Set Real)</code> is. My point is that these issues only arise once you apply your <code>F</code> at least twice, and I don't see why one would do this with <code>SeparationQuotient</code>.</p>",
        "id": 433142012,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1713107812
    },
    {
        "content": "<p>Maybe in this case the actions are propeq anyway, if it's really idempotent?</p>",
        "id": 433145957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713111182
    },
    {
        "content": "<p>I think so yes.</p>",
        "id": 433149179,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1713114022
    },
    {
        "content": "<p>Of course, it's idempotent up to an equivalence.</p>",
        "id": 433149214,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713114060
    },
    {
        "content": "<p>The second time you apply it, you take a quotient by the bot setoid.</p>",
        "id": 433149243,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713114078
    },
    {
        "content": "<p>I'll avoid the <code>SMul (SeparationQuotient M) (SeparationQuotient X)</code> instance for now.</p>",
        "id": 433149281,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713114114
    }
]