[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/13220\">#13220</a>, a question came up between <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> and me: how to label a PR adding a new linter? There are two reasonable positions here:</p>\n<ul>\n<li>\"feat\" is only for new mathematical content, so this should be labelled something like \"chore\"</li>\n<li>This is a new feature in the \"linters\" category. (We even have a \"t-lint\" label now.) So, this should be labelled \"feat\".</li>\n</ul>\n<p>Any opinions on this bikeshed?</p>",
        "id": 440799045,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716797261
    },
    {
        "content": "<p>This is obviously a \"feat\"</p>",
        "id": 440799344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716797378
    },
    {
        "content": "<p>there has never been a rule that \"feat\" is only for maths</p>",
        "id": 440799379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716797391
    },
    {
        "content": "<p>My reaction was mostly because I've seen clearly <code>chore</code> PRs being labelled as <code>feat</code> recently, so I was a bit worried people understood the convention to be \"Start your PR title with <code>feat:</code>\"</p>",
        "id": 440799580,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716797456
    },
    {
        "content": "<p>not sure how to comment on that without knowing what the \"clearly <code>chore</code> PRs\" are. What is \"clearly <code>chore</code>\" to you?</p>",
        "id": 440799866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716797551
    },
    {
        "content": "<p>eg <a href=\"https://github.com/leanprover-community/mathlib4/pull/13015\">#13015</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/13002\">#13002</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/12431\">#12431</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/12423\">#12423</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/12289\">#12289</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/12023\">#12023</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/11980\">#11980</a>, ...</p>",
        "id": 440800977,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716797956
    },
    {
        "content": "<p>Not claiming all should be <code>chore</code>. Most of them should be <code>refactor</code> instead</p>",
        "id": 440801036,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716797980
    },
    {
        "content": "<p>Arguably, generalising a proof could be a feature - but for mathematically trivial generalisations, using <code>refactor</code> seems better indeed.</p>",
        "id": 440805468,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716799495
    },
    {
        "content": "<p>I was under the impression that <code>refactor</code> was for non-trivial generalizations</p>",
        "id": 440828832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716807242
    }
]