[
    {
        "content": "<p>In Mathlib.Logic.Equiv.Fin we currently have </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">piFinCastSucc</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≃</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Equiv</span><span class=\"bp\">.</span><span class=\"n\">piFinSuccAbove</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In a project I would like to use a slightly more general version of this: <code>Equiv.piFinCastSum (n : ℕ)(m : ℕ) (β : Type u) : (Fin (n + m) → β) ≃ (Fin m → β)  × (Fin n → β) </code>. Has this been documented somewhere or do I need to write a short proof myself? </p>\n<p>Also any advice about finding proofs in similar situation faster in Mathlib (in addition to doing <code>Search in this repository</code> which sometimes seems inefficient) would be greatly appreciated!</p>\n<p>Thanks a lot in advance for your help.</p>",
        "id": 448096237,
        "sender_full_name": "Shaopeng",
        "timestamp": 1719740870
    },
    {
        "content": "<p>This should follow from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finSumFinEquiv#doc\">docs#finSumFinEquiv</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.sumArrowEquivProdArrow#doc\">docs#Equiv.sumArrowEquivProdArrow</a></p>",
        "id": 448096938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719741338
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.append#doc\">docs#Fin.append</a> is one direction of this, so maybe we should have <code>Fin.appendEquiv</code> to match</p>",
        "id": 448097195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719741514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/a.20.60piFinCastSum.60.20generalizing.20.20.60piFinCastSucc.60.3F/near/448096938\">said</a>:</p>\n<blockquote>\n<p>This should follow from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finSumFinEquiv#doc\">docs#finSumFinEquiv</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.sumArrowEquivProdArrow#doc\">docs#Equiv.sumArrowEquivProdArrow</a></p>\n</blockquote>\n<p>Thanks a lot for this, Eric! Really appreciate it.</p>",
        "id": 448099818,
        "sender_full_name": "Shaopeng",
        "timestamp": 1719742902
    }
]