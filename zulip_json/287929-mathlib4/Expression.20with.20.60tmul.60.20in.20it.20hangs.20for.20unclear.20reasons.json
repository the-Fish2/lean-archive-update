[
    {
        "content": "<p>Here's a MWE for my problem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">LinearMap</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">lTensor_ring_mod_ideal_equiv_mod_ideal_smul</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">R</span><span class=\"bp\">⧸</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"bp\">⧸</span><span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">rTensor.equiv</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exact_subtype_mkQ</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">I.mkQ_surjective</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">Submodule.Quotient.equiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.lid</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lTensor_ring_mod_ideal_equiv_mod_ideal_smul_apply</span>\n    <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">lTensor_ring_mod_ideal_equiv_mod_ideal_smul</span> <span class=\"n\">I</span>\n      <span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.mk</span> <span class=\"n\">I</span> <span class=\"n\">r</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Submodule.mkQ</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">TensorProduct</span>\n</code></pre></div>\n<p>and a slightly less minimal example with the stubbed out proof in <code>lTensor_ring_mod_ideal_equiv_mod_ideal_smul </code> filled in: <a href=\"https://gist.github.com/Shamrock-Frost/69d63790ab3b3137c14847161bb91b27\">https://gist.github.com/Shamrock-Frost/69d63790ab3b3137c14847161bb91b27</a>. If I fill in the underscore in <code>Ideal.Quotient.mk I r ⊗ₜ[R] _</code> and write <code>Ideal.Quotient.mk I r ⊗ₜ[R] x</code> then lean hangs. Why is this, and how can I fix it? It does <em>not</em> happen if I fill in the <code>_</code> with <code> sorry</code>.</p>",
        "id": 437527595,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1715114475
    },
    {
        "content": "<p>(also if this equivalence is in mathlib and I missed it please let me know!)</p>",
        "id": 437527909,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1715114633
    },
    {
        "content": "<p>This seems fixed with <a href=\"https://github.com/leanprover/lean4/pull/4092\">lean4#4092</a></p>",
        "id": 437528009,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715114666
    },
    {
        "content": "<p>Filling <code>x</code> instantly pops up <code>declaration uses sorry</code></p>",
        "id": 437528078,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715114708
    },
    {
        "content": "<p>huh! great timing on my part to run into this bug I guess</p>",
        "id": 437528084,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1715114710
    },
    {
        "content": "<p>Thank Leo who traced it into the <code>binop%</code> elaborator.</p>",
        "id": 437528130,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715114734
    },
    {
        "content": "<p>Now you just need to convince Kim to put it into rc2... :)</p>",
        "id": 437528304,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715114803
    },
    {
        "content": "<p>I think for now I'm going to stick with the ol reliable <code>set_option maxHeartbeats 800000 in</code> and hope the fix gets merged before I PR this code in</p>",
        "id": 437530702,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1715115874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Expression.20with.20.60tmul.60.20in.20it.20hangs.20for.20unclear.20reasons/near/437528304\">said</a>:</p>\n<blockquote>\n<p>Now you just need to convince Kim to put it into rc2... :)</p>\n</blockquote>\n<p>I've marked it for backporting!</p>",
        "id": 437546644,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715123130
    },
    {
        "content": "<p>welp, after updating mathlib it times out and requires <code>set_option maxHeartbeats 1200000</code>. What's the timeline for when the mathlib CI will be on this lean4 version? Not trying to rush anything, this can wait to get merged, I'm just unfamiliar</p>",
        "id": 439281232,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1715974363
    },
    {
        "content": "<p>Usual cadence is when the month turns over</p>",
        "id": 439281504,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715974504
    },
    {
        "content": "<p>You could</p>\n<ol>\n<li>run off a custom toolchain (eg <code>mattrobball/lean4:test2-24-05-07</code>)</li>\n<li>build on top of <code>nightly</code></li>\n<li>or wait</li>\n</ol>\n<p>until then. I probably would not do 2.</p>",
        "id": 439281786,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715974658
    },
    {
        "content": "<p>This is lightning quick in  <code>v4.8.0-rc2</code></p>",
        "id": 440074882,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716378964
    }
]