[
    {
        "content": "<p>This is now happening to me consistently, and it doesn't seem to matter but I thought I'd report it anyway. Note that <code>lake exe cache get!</code> doesn't fix the problem. </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>buzzard@buster:~/lean-projects/mathlib4$<span class=\"w\"> </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get!\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.IO\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.IO\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Hashing\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Hashing\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">6</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">9</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Linking<span class=\"w\"> </span>cache\nAttempting<span class=\"w\"> </span>to<span class=\"w\"> </span>download<span class=\"w\"> </span><span class=\"m\">3552</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">3551</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">3552</span>/3552<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">99</span>%<span class=\"w\"> </span>success<span class=\"o\">)</span>\nWarning:<span class=\"w\"> </span>some<span class=\"w\"> </span>files<span class=\"w\"> </span>were<span class=\"w\"> </span>not<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>cache.\nThis<span class=\"w\"> </span>usually<span class=\"w\"> </span>means<span class=\"w\"> </span>that<span class=\"w\"> </span>your<span class=\"w\"> </span><span class=\"nb\">local</span><span class=\"w\"> </span>checkout<span class=\"w\"> </span>of<span class=\"w\"> </span>mathlib4<span class=\"w\"> </span>has<span class=\"w\"> </span>diverged<span class=\"w\"> </span>from<span class=\"w\"> </span>upstream.\nIf<span class=\"w\"> </span>you<span class=\"w\"> </span>push<span class=\"w\"> </span>your<span class=\"w\"> </span>commits<span class=\"w\"> </span>to<span class=\"w\"> </span>a<span class=\"w\"> </span>branch<span class=\"w\"> </span>of<span class=\"w\"> </span>the<span class=\"w\"> </span>mathlib4<span class=\"w\"> </span>repository,<span class=\"w\"> </span>CI<span class=\"w\"> </span>will<span class=\"w\"> </span>build<span class=\"w\"> </span>the<span class=\"w\"> </span>oleans<span class=\"w\"> </span>and<span class=\"w\"> </span>they<span class=\"w\"> </span>will<span class=\"w\"> </span>be<span class=\"w\"> </span>available<span class=\"w\"> </span>later.\nDecompressing<span class=\"w\"> </span><span class=\"m\">3551</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nbuzzard@buster:~/lean-projects/mathlib4$<span class=\"w\"> </span>lake<span class=\"w\"> </span>build\n<span class=\"o\">[</span><span class=\"m\">1886</span>/3569<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.LinearAlgebra.Basic\nbuzzard@buster:~/lean-projects/mathlib4$<span class=\"w\"> </span>git<span class=\"w\"> </span>status\nOn<span class=\"w\"> </span>branch<span class=\"w\"> </span>master\nYour<span class=\"w\"> </span>branch<span class=\"w\"> </span>is<span class=\"w\"> </span>up-to-date<span class=\"w\"> </span>with<span class=\"w\"> </span><span class=\"s1\">'origin/master'</span>.\n\nUntracked<span class=\"w\"> </span>files:\n<span class=\"w\">  </span><span class=\"o\">(</span>use<span class=\"w\"> </span><span class=\"s2\">\"git add &lt;file&gt;...\"</span><span class=\"w\"> </span>to<span class=\"w\"> </span>include<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>what<span class=\"w\"> </span>will<span class=\"w\"> </span>be<span class=\"w\"> </span>committed<span class=\"o\">)</span>\n<span class=\"w\">    </span>alg_geom_notes.txt\n<span class=\"w\">    </span>alg_geom_notes.txt~\n<span class=\"w\">    </span>crap\n<span class=\"w\">    </span>universe_dagur.txt\n\nnothing<span class=\"w\"> </span>added<span class=\"w\"> </span>to<span class=\"w\"> </span>commit<span class=\"w\"> </span>but<span class=\"w\"> </span>untracked<span class=\"w\"> </span>files<span class=\"w\"> </span>present<span class=\"w\"> </span><span class=\"o\">(</span>use<span class=\"w\"> </span><span class=\"s2\">\"git add\"</span><span class=\"w\"> </span>to<span class=\"w\"> </span>track<span class=\"o\">)</span>\nbuzzard@buster:~/lean-projects/mathlib4$\n</code></pre></div>",
        "id": 374313127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689090298
    },
    {
        "content": "<p>If I understand correctly, this happens when some file did not compile correctly in your branch (and then of course it's not in the cache). The error message is quite misleading then.</p>",
        "id": 374314955,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1689090656
    },
    {
        "content": "<p>This is on master</p>",
        "id": 374316161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689090878
    },
    {
        "content": "<p>At least here, the cache miss is <a href=\"https://lakecache.blob.core.windows.net/mathlib4/f/11451517259001675684.tar.gz\">https://lakecache.blob.core.windows.net/mathlib4/f/11451517259001675684.tar.gz</a>, corresponding to <code>Util/TacticCaches.lean</code>. I can't explain the <code>Mathlib.LinearAlgebra.Basic</code> (re)build.</p>",
        "id": 374377681,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1689106546
    },
    {
        "content": "<p>I guess the cause is that <code>lake build TacticCaches</code> creates <code>build/{ir,lib}/TacticCaches.*</code> and not <code>build/{ir,lib}/Util/TacticCaches.*</code> for some reason.</p>",
        "id": 374381401,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1689107768
    },
    {
        "content": "<p>Ugh, my fault. :-)</p>",
        "id": 374463181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689123916
    },
    {
        "content": "<p>Hmm, actually maybe not entirely my fault.</p>",
        "id": 374465200,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689124847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> (or anyone interested in <code>lakefile</code> details), when we run <code>lake exe cache</code> in Mathlib <code>master</code> at the moment, the following weird thing happens:</p>\n<ul>\n<li><code>build/ir/Util/Cache/Main.c</code> is created (along with the corresponding <code>.o</code> and <code>.o.trace</code></li>\n<li><code>build/ir/Cache/Hashing.c</code> is created (along with <code>IO.c</code> and <code>Requests.c</code>, and their <code>.o</code> and <code>.o.trace</code>s)</li>\n</ul>\n<p>however <code>Main</code>/<code>Hashing</code>/<code>IO</code>/<code>Requests</code> all live in the same directory, and the intent was certainly that their build artifacts all live at the same location.</p>\n<p>How can we achieve this?</p>",
        "id": 374465490,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689125001
    },
    {
        "content": "<p>For reference, the relevant section of the <code>lakefile</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_lib</span> <span class=\"n\">Cache</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"n\">moreLeanArgs</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Cache</span><span class=\"o\">]</span>\n  <span class=\"n\">srcDir</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Util\"</span>\n\n<span class=\"n\">lean_exe</span> <span class=\"n\">cache</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Util.Cache.Main</span>\n</code></pre></div>",
        "id": 374465522,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689125020
    },
    {
        "content": "<p>I suspect the problem is in the <code>root := `Util.Cache.Main</code> line. I had originally wanted to write <code>root := `Cache.Main</code> here, on the principle that this was a module name rather than a filename-mysteriously-written-as-a-<code>Name</code>.</p>\n<p>However with this change <code>lake exe cache</code> fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Cache</span><span class=\"bp\">/</span><span class=\"n\">Main.lean</span>\n</code></pre></div>",
        "id": 374465759,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689125132
    },
    {
        "content": "<p>Separately from the above question, hopefully <a href=\"https://github.com/leanprover-community/mathlib4/pull/5824\">#5824</a> will fix Kevin's observed problem above, but still needs testing after CI.</p>",
        "id": 374469225,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689126894
    },
    {
        "content": "<p>yeah I think this setup is wrong, and the <code>cache</code> change was not ready to be merged and we should probably back it out</p>",
        "id": 374479319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689132517
    },
    {
        "content": "<p>The issue is that <code>cache</code> is using a half-baked version of the source path lookup implemented in <code>getPackageDirs</code>, and this was not updated for the Util folder</p>",
        "id": 374479612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689132692
    },
    {
        "content": "<p>You should be using <code>root := `Cache.Main</code> for the <code>lake_exe</code> line, but with a srcDir of <code>\"Util\"</code></p>",
        "id": 374479731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689132751
    },
    {
        "content": "<p><code>Util</code> is not a module name and should not appear in such, it is just a folder</p>",
        "id": 374479786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689132791
    },
    {
        "content": "<p>Oh, there is a lake issue here after all: there is no <code>srcDir</code> for <code>lean_exe</code> targets <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span></p>",
        "id": 374480999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689133485
    },
    {
        "content": "<p>There is a function <code>LeanExeConfig.toLeanLibConfig</code> in lake for converting an exe config into a lib config, but it sets a lot of things to default values and that seems like a bit of missing config</p>",
        "id": 374481359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689133680
    },
    {
        "content": "<p>I suggest just reverting the Util change for now, I don't think we can quick fix this</p>",
        "id": 374481558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689133773
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5825\">#5825</a> is the revert PR.</p>",
        "id": 374482710,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689134290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Warning.3A.20some.20files.20were.20not.20found.20in.20the.20cache.2E/near/374480999\">said</a>:</p>\n<blockquote>\n<p>Oh, there is a lake issue here after all: there is no <code>srcDir</code> for <code>lean_exe</code> targets <span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span></p>\n</blockquote>\n<p>I think my original rationale was that it would not matter whether the <code>srcDir</code> was part of the module name since a main file should not be imported and the finer details of the build layout should not be a user's concern. </p>\n<p>But, for consistency's sake, better aligning the <code>lean_exe</code> / <code>lean_lib</code> configuration options seems like a good idea! </p>\n<p>I am currently at a conference, so I will not be able to code this myself until I get back. However, if someone wants to PR a fix beforehand, I can review and merge it.</p>",
        "id": 374503438,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689143939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Warning.3A.20some.20files.20were.20not.20found.20in.20the.20cache.2E/near/374479612\">said</a>:</p>\n<blockquote>\n<p>The issue is that <code>cache</code> is using a half-baked version of the source path lookup implemented in <code>getPackageDirs</code>, and this was not updated for the Util folder</p>\n</blockquote>\n<p>Is <a href=\"https://github.com/leanprover-community/mathlib4/pull/8361\">#8361</a> going to cause a problem, then?</p>",
        "id": 430723385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712040844
    },
    {
        "content": "<p>I think cache doesn't care about mathlib's utils, the only reason the above was a problem was because it was used for the <code>TacticCaches</code> folder which is distributed via <code>cache</code>. The utils are normally compiled on the spot by lake, so we can use any method for specifying the exes that lake accepts</p>",
        "id": 430724321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041308
    },
    {
        "content": "<p>that said I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/8361\">#8361</a> made the same mistake I highlighted above: it should be using a <code>srcDir</code> instead of a longer module path for identifying the <code>Utils</code> folder</p>",
        "id": 430724424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041357
    },
    {
        "content": "<p>I haven't checked if lake has since been fixed to allow <code>srcDir</code> on <code>lean_exe</code></p>",
        "id": 430724481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041386
    },
    {
        "content": "<p>it has</p>",
        "id": 430724582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041439
    },
    {
        "content": "<p>Regardless of whether it would cause a cache problem, do you think LongestPole should create a new Util/Utils folder or use the existing MathlibExtras ?</p>",
        "id": 430724711,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712041486
    },
    {
        "content": "<p>I think it should be in the same directory as <code>shake</code>, <code>cache</code>, <code>checkYaml</code> exes</p>",
        "id": 430724812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041539
    },
    {
        "content": "<p><code>MathlibExtras</code> is a library, it's a bit different</p>",
        "id": 430724831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041552
    },
    {
        "content": "<p>(it's also now nonexistent, if I've been following the news correctly)</p>",
        "id": 430725008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Warning.3A.20some.20files.20were.20not.20found.20in.20the.20cache.2E/near/430724812\">said</a>:</p>\n<blockquote>\n<p>I think it should be in the same directory as <code>shake</code>, <code>cache</code>, <code>checkYaml</code> exes</p>\n</blockquote>\n<p>... which is partly <a href=\"https://github.com/leanprover/std4/tree/main/Std/Util\">https://github.com/leanprover/std4/tree/main/Std/Util</a> but not completely?</p>",
        "id": 430725052,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712041632
    },
    {
        "content": "<p>??</p>",
        "id": 430725085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041644
    },
    {
        "content": "<p>We're talking about mathlib here, not std</p>",
        "id": 430725107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041654
    },
    {
        "content": "<p>shake, cache, checkYaml are utility <em>programs</em> provided by the mathlib project</p>",
        "id": 430725149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041679
    },
    {
        "content": "<p>Uh wait we have Cache in both mathllib and Std?!</p>",
        "id": 430725207,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712041688
    },
    {
        "content": "<p>there is no cache in std</p>",
        "id": 430725228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041700
    },
    {
        "content": "<p>mathlib's cache also caches all of mathlib's dependencies</p>",
        "id": 430725247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041716
    },
    {
        "content": "<p>Oh I thought Cache had been upstreamed since we've talked about it for so long</p>",
        "id": 430725287,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712041739
    },
    {
        "content": "<p>if you are not using std via mathlib, you are currently compiling it from source</p>",
        "id": 430725308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041748
    },
    {
        "content": "<p>but I see <a href=\"https://github.com/leanprover/std4/blob/main/Std/Util/Cache.lean\">https://github.com/leanprover/std4/blob/main/Std/Util/Cache.lean</a> is something different</p>",
        "id": 430725316,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712041752
    },
    {
        "content": "<p>yes, that's the thing that generates the <code>exact?</code> cache in MathlibExtras</p>",
        "id": 430725369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041789
    },
    {
        "content": "<p>which no longer exists</p>",
        "id": 430725375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041793
    },
    {
        "content": "<p>Okay so we have a lot of dead code, and no Util-like directory anymore</p>",
        "id": 430725459,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712041820
    },
    {
        "content": "<p>Hence we might as well have a LongestPole library?</p>",
        "id": 430725512,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712041842
    },
    {
        "content": "<p>it's not a library though IIUC</p>",
        "id": 430725533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041853
    },
    {
        "content": "<p>it's an exe</p>",
        "id": 430725538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041856
    },
    {
        "content": "<p>which is why I grouped it with the other mathlib exes</p>",
        "id": 430725573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041871
    },
    {
        "content": "<p>but I do agree that all the exes should live in a subfolder, maybe <code>scripts/</code></p>",
        "id": 430725738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041939
    },
    {
        "content": "<p>(I also think sources should live in <code>src/</code> but I'm not sure I'll live to see that day)</p>",
        "id": 430725819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712041984
    },
    {
        "content": "<p>I see <code>scripts</code> as the \"collection of all non-Lean exes\", but maybe that could change</p>",
        "id": 430725836,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712041991
    },
    {
        "content": "<p>If lean scripts require no additional infrastructure beyond a single file and a line in the lakefile, I think they could reasonably live in a scripts folder along non-lean exes</p>",
        "id": 430726022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712042074
    },
    {
        "content": "<p>and for the ones that require a subfolder, I think that's fine too</p>",
        "id": 430726047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712042088
    },
    {
        "content": "<p>Okay, should I make a PR then?</p>",
        "id": 430726074,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712042100
    }
]