[
    {
        "content": "<p>Is there a way to perform induction on a hypothesis? Cases is useful but I'd like to be able to generate induction hypotheses when I case on a hypothesis.</p>",
        "id": 410677451,
        "sender_full_name": "Tanner Duve",
        "timestamp": 1704072882
    },
    {
        "content": "<p>Do you have an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 410679512,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1704074597
    },
    {
        "content": "<p><code>induction H</code></p>",
        "id": 410679553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704074623
    },
    {
        "content": "<p>I have a file full of definitions which this snippet depends on, but I am doing an implementation of the STLC, and am currently trying to prove the progress theorem. Here is the goal extracted from where I am stuck: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">extracted_1</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HT</span> <span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"bp\">|-</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">value</span> <span class=\"n\">t</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">==&gt;</span><span class=\"n\">t'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This just says, given a term t, a type T, and evidence HT that t is of type T in the empty context, show that either t is a value or there is a t' which t steps to (by my operational semantics) I would like to do an induction on the typing derivation HT of the term t, but \"induction HT\" gives me \"tactic 'induction' failed, major premise type is not an inductive type\", same with induction' HT.</p>",
        "id": 410683831,
        "sender_full_name": "Tanner Duve",
        "timestamp": 1704077931
    },
    {
        "content": "<p>How long are the definitions of all the types needed for the example?</p>",
        "id": 410687258,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704081056
    },
    {
        "content": "<p>If they are not that long, then you can copy+paste them here.</p>",
        "id": 410687276,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704081086
    },
    {
        "content": "<p>We can't help unless we know what does <code> empty |- t ∈ T</code> mean.</p>",
        "id": 410687335,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704081130
    },
    {
        "content": "<p>Here is my inductive relation for my typing rules + the prerequisite map definitions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">---- Typing</span>\n\n<span class=\"c1\">------ Total and Partial Maps</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">total_map</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">empty_map</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">total_map</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">t_update</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">m</span> <span class=\"n\">x'</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"s2\">\" !-&gt; \"</span> <span class=\"n\">v</span> <span class=\"s2\">\" ; \"</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t_update</span> <span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">partial_map</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">total_map</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">empty</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">partial_map</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">empty_map</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">update</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">partial_map</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">partial_map</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"bp\">!-&gt;</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">;</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"s2\">\" |-&gt; \"</span> <span class=\"n\">v</span> <span class=\"s2\">\" ; \"</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">update</span> <span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"n\">v</span>\n<span class=\"c1\">---- We let a \"context\" be a partial map for types</span>\n<span class=\"kd\">def</span> <span class=\"n\">context</span> <span class=\"o\">:=</span> <span class=\"n\">partial_map</span> <span class=\"n\">ty</span>\n<span class=\"c1\">---- has_type Γ t T (equivalently, Γ |- t ∈ T) means that in the typing context Γ, the term t has type T</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">has_type</span> <span class=\"o\">:</span> <span class=\"n\">context</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T_Var</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"bp\">Γ</span> <span class=\"n\">x</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n    <span class=\"bp\">Γ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">T</span> <span class=\"bp\">→</span>\n    <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">tm.tm_var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">T</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T_Abs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">T1</span> <span class=\"n\">T2</span> <span class=\"n\">t1</span> <span class=\"bp\">Γ</span><span class=\"o\">,</span>\n    <span class=\"n\">has_type</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">|-&gt;</span> <span class=\"n\">T2</span><span class=\"bp\">;</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">t1</span> <span class=\"n\">T1</span> <span class=\"bp\">→</span>\n    <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">{</span><span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">T2</span><span class=\"o\">,</span> <span class=\"n\">t1</span><span class=\"o\">}</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T2</span><span class=\"bp\">-&gt;</span><span class=\"n\">T1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T_App</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"bp\">Γ</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">,</span>\n    <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"n\">t1</span> <span class=\"o\">(</span><span class=\"n\">T2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">T1</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>\n    <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"n\">t2</span> <span class=\"n\">T2</span> <span class=\"bp\">-&gt;</span>\n    <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"bp\">∘</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"n\">T1</span> <span class=\"c1\">-- t1 ∘ t2 means apply t1 to t2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T_True</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"bp\">Γ</span><span class=\"o\">,</span>\n    <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"n\">true</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T_False</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"bp\">Γ</span><span class=\"o\">,</span>\n    <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"n\">false</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">T_If</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"bp\">Γ</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"n\">T1</span><span class=\"o\">,</span>\n    <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"n\">t1</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span>\n    <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"n\">t2</span> <span class=\"n\">T1</span> <span class=\"bp\">→</span>\n    <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"n\">t3</span> <span class=\"n\">T1</span> <span class=\"bp\">→</span>\n    <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"bp\">&lt;</span><span class=\"o\">{</span><span class=\"k\">if</span> <span class=\"n\">t1</span> <span class=\"k\">then</span> <span class=\"n\">t2</span> <span class=\"k\">else</span> <span class=\"n\">t3</span><span class=\"o\">}</span><span class=\"bp\">&gt;</span> <span class=\"n\">T1</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">Γ</span><span class=\"o\">:</span><span class=\"mi\">99</span> <span class=\"s2\">\" |- \"</span> <span class=\"n\">t1</span><span class=\"o\">:</span><span class=\"mi\">99</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"n\">T2</span><span class=\"o\">:</span><span class=\"mi\">99</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"n\">t1</span> <span class=\"n\">T2</span>\n</code></pre></div>",
        "id": 410688188,
        "sender_full_name": "Tanner Duve",
        "timestamp": 1704081923
    },
    {
        "content": "<p>and, in doing a proof, I have a hypothesis HT which just states that t has type T in the empty context (ie. empty |- t \\in T), and I'd like to do induction on HT, but get the errors I mentioned above.</p>",
        "id": 410688440,
        "sender_full_name": "Tanner Duve",
        "timestamp": 1704082260
    },
    {
        "content": "<p>I copy+pasted your code and it doesn't work. Please fix it.</p>",
        "id": 410729752,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704120999
    },
    {
        "content": "<p>It appears that there are inductive types <code>ty</code> for types and <code>tm</code> for terms whose definitions are missing. I imagine they look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ty</span>\n<span class=\"bp\">|</span> <span class=\"k\">fun</span> <span class=\"o\">:</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"n\">ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">35</span> <span class=\"s2\">\"-&gt;\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ty.fun</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ty</span> <span class=\"o\">(</span><span class=\"n\">Bool</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">tm</span>\n<span class=\"bp\">|</span> <span class=\"n\">tm_var</span> <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"n\">param_name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">param_type</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">tm</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"bp\">→</span> <span class=\"n\">tm</span> <span class=\"bp\">→</span> <span class=\"n\">tm</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">|</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"bp\">→</span> <span class=\"n\">tm</span> <span class=\"bp\">→</span> <span class=\"n\">tm</span> <span class=\"bp\">→</span> <span class=\"n\">tm</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"&lt;{λ\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\", \"</span> <span class=\"n\">body</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"}&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"n\">tm.lam</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.Quote.quote</span> <span class=\"n\">x.getId.toString</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"s2\">\"∘\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tm.apply</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"&lt;{if\"</span> <span class=\"n\">cond</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" then \"</span> <span class=\"n\">true</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" else \"</span> <span class=\"n\">false</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"}&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"n\">tm.ite</span> <span class=\"bp\">$</span><span class=\"n\">cond</span> <span class=\"bp\">$</span><span class=\"n\">true</span> <span class=\"bp\">$</span><span class=\"n\">false</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tm</span> <span class=\"o\">(</span><span class=\"n\">true</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This makes the given code work if placed before the definition of <code>context</code>.</p>",
        "id": 411310437,
        "sender_full_name": "Raghuram",
        "timestamp": 1704429978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"677310\">Tanner Duve</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Induction.20on.20hypotheses/near/410683831\">said</a>:</p>\n<blockquote>\n<p>I have a file full of definitions which this snippet depends on, but I am doing an implementation of the STLC, and am currently trying to prove the progress theorem. Here is the goal extracted from where I am stuck: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">extracted_1</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HT</span> <span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"bp\">|-</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">value</span> <span class=\"n\">t</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">==&gt;</span><span class=\"n\">t'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This just says, given a term t, a type T, and evidence HT that t is of type T in the empty context, show that either t is a value or there is a t' which t steps to (by my operational semantics) I would like to do an induction on the typing derivation HT of the term t, but \"induction HT\" gives me \"tactic 'induction' failed, major premise type is not an inductive type\", same with induction' HT.</p>\n</blockquote>\n<p>With the above definitions of <code>ty</code> and <code>tm</code> and your definitions for <code>has_type</code>, I can't  reproduce your error. Instead I get a different error upon running <code>induction HT</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">extracted_1</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HT</span> <span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"bp\">|-</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Definitions of value and ==&gt; not given</span>\n<span class=\"cm\">    value t ∨ ∃ t', t==&gt;t' -/</span>\n  <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- \"index in target's type is not a variable (consider using the `cases` tactic instead)\"</span>\n  <span class=\"c1\">-- i.e., empty is not a variable</span>\n  <span class=\"c1\">-- induction HT</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This error actually makes sense, because the context is an index and can change across the constructors. A standard way of dealing with this is to turn the context into a variable with a hypothesis that it's equal to the empty context, as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HT</span> <span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"bp\">|-</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">context_empty</span> <span class=\"o\">:</span> <span class=\"n\">context</span> <span class=\"bp\">=</span> <span class=\"n\">empty</span> <span class=\"n\">at</span> <span class=\"n\">HT</span>\n  <span class=\"n\">induction</span> <span class=\"n\">HT</span>\n  <span class=\"n\">all_goals</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- remove after proving</span>\n</code></pre></div>\n<p>I feel like there should be an option in induction to does this directly, but I don't know/remember it if so.</p>",
        "id": 411310840,
        "sender_full_name": "Raghuram",
        "timestamp": 1704430373
    }
]