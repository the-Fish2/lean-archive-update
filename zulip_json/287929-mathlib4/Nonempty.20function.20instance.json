[
    {
        "content": "<p>In Mathlib we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.instNonempty#doc\">docs#Pi.instNonempty</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instNonempty</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">Classical.arbitrary</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>That is problematic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- deterministic time out</span>\n</code></pre></div>",
        "id": 421922646,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708110820
    },
    {
        "content": "<p>One “fix” is to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">Fun.instNonempty</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">Classical.arbitrary</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 421922727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708110847
    },
    {
        "content": "<p>Should we simply do that and move on? Or should we think more deeply about that?</p>",
        "id": 421922767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708110872
    },
    {
        "content": "<p>“5 arguments ought to be enough for anyone.”</p>",
        "id": 421925286,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708111894
    },
    {
        "content": "<p>Is this an instance of a more general pattern? And is there some generic way to detect if we’re in a situation that would cause this particular kind of issue?</p>",
        "id": 421925409,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708111929
    },
    {
        "content": "<p>I don’t know but this is the second time in three days that I hit such an issue with dependent functions instances.</p>",
        "id": 421925600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708111997
    },
    {
        "content": "<p>I remember that we had lots of these issues in Lean 3.</p>",
        "id": 421926230,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708112194
    },
    {
        "content": "<p>What are the imports here?</p>",
        "id": 421927907,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708112886
    },
    {
        "content": "<p>I’m investigating the minimal imports.</p>",
        "id": 421928295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708113056
    },
    {
        "content": "<p>In the prelude there is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nonempty.intro</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.ofNonempty</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nonempty.intro</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.ofNonempty</span>\n</code></pre></div>\n<p>which don't stop there</p>",
        "id": 421928352,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708113079
    },
    {
        "content": "<p>Doing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Classical.arbitrary</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Classical.choice</span> <span class=\"n\">h</span>\n\n\n<span class=\"kn\">protected</span> <span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instNonempty</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">Classical.arbitrary</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>in a no-import file is not enough to trigger the issue. I’m looking for the other instances that create the issue.</p>",
        "id": 421928521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708113138
    },
    {
        "content": "<p>It seems Lean goes on a grand tour of the Mathlib class hierarchy here.</p>",
        "id": 421928707,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708113219
    },
    {
        "content": "<p>So I guess it's important that you use <code>Nat</code> instead of a random <code>X : Type</code>.</p>",
        "id": 421928842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708113263
    },
    {
        "content": "<p>Haha 18466 lines</p>",
        "id": 421928846,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708113266
    },
    {
        "content": "<p>Just tracing defeq</p>",
        "id": 421928897,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708113292
    },
    {
        "content": "<p>Johan: no, it also fails at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 421929115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708113373
    },
    {
        "content": "<p>But indeed I’ll continue my investigation in this setup.</p>",
        "id": 421929161,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708113386
    },
    {
        "content": "<p>Or with <code>Unit</code></p>",
        "id": 421929205,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708113404
    },
    {
        "content": "<p>In fact it seems worse</p>",
        "id": 421929245,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708113416
    },
    {
        "content": "<p>No, <code>Unit</code> may have more instances</p>",
        "id": 421929284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708113429
    },
    {
        "content": "<p>We have <em>lots</em> of <code>Nonempty</code> instances.</p>",
        "id": 421930120,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708113740
    },
    {
        "content": "<p>In particular any algebraic structure we have gives a Nonempty instance. Lean simply tries all of them and it takes a lot of time. It doesn’t seem to go deep.</p>",
        "id": 421930231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708113788
    },
    {
        "content": "<p>But I really don’t understand how making a non-dependent function instance helps.</p>",
        "id": 421930258,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708113807
    },
    {
        "content": "<p>I don't understand why we aren't done after this </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>trace</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Zero.instNonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">One.instNonempty</span><span class=\"o\">,</span> <span class=\"n\">infSet_to_nonempty</span><span class=\"o\">,</span> <span class=\"n\">supSet_to_nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">IrreducibleSpace.toNonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ConnectedSpace.toNonempty</span><span class=\"o\">,</span> <span class=\"n\">top_nonempty</span><span class=\"o\">,</span> <span class=\"n\">bot_nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddTorsor.nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.IsConnected.is_nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Nontrivial.to_nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instNonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instForAllNonemptyNonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">NonemptyFiniteLinearOrder.Nonempty</span><span class=\"o\">,</span> <span class=\"n\">instNonemptyForAll</span><span class=\"o\">,</span> <span class=\"n\">instNonemptyForAll_1</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instNonempty</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Nonempty</span> <span class=\"n\">ℕ</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Zero.instNonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">One.instNonempty</span><span class=\"o\">,</span> <span class=\"n\">infSet_to_nonempty</span><span class=\"o\">,</span> <span class=\"n\">supSet_to_nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">IrreducibleSpace.toNonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ConnectedSpace.toNonempty</span><span class=\"o\">,</span> <span class=\"n\">top_nonempty</span><span class=\"o\">,</span> <span class=\"n\">bot_nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddTorsor.nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.IsConnected.is_nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Nontrivial.to_nonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instNonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instForAllNonemptyNonempty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">NonemptyFiniteLinearOrder.Nonempty</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">NonemptyFiniteLinearOrder.Nonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"n\">ℕ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instForAllNonemptyNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"n\">ℕ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"n\">ℕ</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nonempty</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≟</span> <span class=\"n\">Nonempty</span> <span class=\"n\">ℕ</span>\n    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Inhabited</span> <span class=\"n\">ℕ</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Unique.instInhabited</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instInhabited</span><span class=\"o\">,</span> <span class=\"n\">instInhabitedNat</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedNat</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"n\">ℕ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span> <span class=\"n\">ℕ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"n\">ℕ</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"n\">ℕ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"n\">ℕ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"n\">ℕ</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"n\">ℕ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"n\">ℕ</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span>\n        <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nonempty</span>\n          <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span>\n            <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n</div></div>",
        "id": 421932299,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708114719
    },
    {
        "content": "<p>It proceeds to continue trying for <code>Inhabited Nat</code></p>",
        "id": 421932425,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708114794
    },
    {
        "content": "<p>Shouldn't algebraic structure-&gt;nonempty instances have low priority?</p>",
        "id": 421936292,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708116553
    },
    {
        "content": "<p><code>Zero</code> and <code>One</code> instances have priority 20</p>",
        "id": 421936451,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708116632
    },
    {
        "content": "<p>So, Lean should try <code>Pi</code> instance first.</p>",
        "id": 421936465,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708116642
    },
    {
        "content": "<p>How knows enough meta-programming to list all the \"generic\" instances with their priorities?</p>",
        "id": 421936682,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708116758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nonempty.20function.20instance/near/421929115\">said</a>:</p>\n<blockquote>\n<p>Johan: no, it also fails at</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This works fine for me (even after <code>import Mathlib</code>). I need one more alpha to push it over the edge though :-)</p>",
        "id": 421938183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708117444
    },
    {
        "content": "<p>It is like it forgets it has already used <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instInhabitedNat#doc\">docs#instInhabitedNat</a> to close the goal <code>Inhabited Nat</code> and then proceeds to forget about that <code>instInhabitedNat</code> completely</p>",
        "id": 421939470,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708118062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nonempty.20function.20instance/near/421936682\">said</a>:</p>\n<blockquote>\n<p>How knows enough meta-programming to list all the \"generic\" instances with their priorities?</p>\n</blockquote>\n<p>Here's an extremely quick way to see which instances match a given term along with their priority:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#show_instances \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Command.runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getGlobalInstancesIndex</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getUnify</span> <span class=\"n\">e</span> <span class=\"n\">tcDtConfig</span>\n  <span class=\"k\">let</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">x.map</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">i.priority</span><span class=\"o\">,</span> <span class=\"n\">i.globalName</span><span class=\"bp\">?.</span><span class=\"n\">getD</span> <span class=\"bp\">`</span><span class=\"n\">noname</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{xs.qsort fun a b =&gt; (a.1 &lt; b.1 || a.1 == b.1 &amp;&amp; a.2.quickLt b.2)}\"</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">show_instances</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 421939855,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708118272
    },
    {
        "content": "<p>Is the problem here that <code>DiscrTree</code>s don't index foralls?</p>",
        "id": 421940009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708118346
    },
    {
        "content": "<p>And so the lookup has nothing to index on?</p>",
        "id": 421940022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708118353
    },
    {
        "content": "<p>Why would that show up at 6 arrows and not 5?</p>",
        "id": 421940241,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708118450
    },
    {
        "content": "<p>One problem I see is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instNonempty#doc\">docs#instNonempty</a> has default priority</p>",
        "id": 421940247,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708118454
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instForAllNonemptyNonempty#doc\">docs#instForAllNonemptyNonempty</a> matches too</p>",
        "id": 421940327,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708118501
    },
    {
        "content": "<p>Some features from the instance trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LocalRing.toNontrivial</span> <span class=\"n\">to</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">α</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">α</span> <span class=\"bp\">≟</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">α</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Semiring</span> <span class=\"n\">α</span>\n<span class=\"bp\">...</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">LinearOrderedSemiring</span> <span class=\"n\">α</span>\n<span class=\"bp\">...</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">NormedField</span> <span class=\"n\">α</span>\n<span class=\"bp\">...</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">α</span>\n<span class=\"bp\">...</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">α</span>\n<span class=\"bp\">...</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">CoheytingAlgebra</span> <span class=\"n\">α</span>\n<span class=\"bp\">...</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">NormedAddTorsor.toAddTorsor'</span> <span class=\"n\">to</span> <span class=\"n\">AddTorsor</span> <span class=\"bp\">?</span><span class=\"n\">m.1622</span> <span class=\"n\">α</span>\n<span class=\"bp\">...</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span>\n<span class=\"bp\">...</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AddGroup</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.4681</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">AddSubgroupClass.toAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddCommGroup.toAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddGroupWithOne.toAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SeminormedAddGroup.toAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">NormedAddGroup.toAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">DMatrix.instAddGroupDMatrix</span><span class=\"o\">,</span> <span class=\"n\">Real.instAddGroupReal</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">TrivSqZeroExt.addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">QuotientAddGroup.Quotient.addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Matrix.addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Additive.addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instAddGroupLex</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ContinuousMap.instAddGroupContinuousMap</span><span class=\"o\">,</span> <span class=\"n\">Rat.addGroup</span><span class=\"o\">,</span> <span class=\"n\">MulOpposite.addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ULift.addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MvPowerSeries.instAddGroupMvPowerSeries</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MeasureTheory.SimpleFunc.instAddGroup</span><span class=\"o\">,</span> <span class=\"n\">AddOpposite.addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddSubgroup.toAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddSubmonoid.instAddGroupSubtypeMemAddSubmonoidToAddZeroClassInstMembershipInstSetLikeAddSubmonoidAddSubmonoid</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">DomAddAct.instAddGroupDomAddAct</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">LocallyConstant.instAddGroupLocallyConstant</span><span class=\"o\">,</span> <span class=\"n\">Int.instAddGroupInt</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">CommRingCat.Colimits.ColimitType.AddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MeasureTheory.AEEqFun.instAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Nat.ArithmeticFunction.instAddGroupArithmeticFunctionToZeroToNegZeroClassToSubNegZeroMonoidToSubtractionMonoid</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SmoothMap.addGroup</span><span class=\"o\">,</span> <span class=\"n\">FreeLieAlgebra.instAddGroupFreeLieAlgebra</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instAddGroupUniformFun</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Filter.Germ.addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">CauSeq.addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">DFinsupp.instAddGroupDFinsuppToZeroToNegZeroClassToSubNegZeroMonoidToSubtractionMonoid</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instAddGroupUniformOnFun</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddMonoid.Coprod.instAddGroupCoprodToAddZeroClassToAddMonoidToSubNegAddMonoidToAddZeroClassToAddMonoidToSubNegAddMonoid</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ZeroAtInftyContinuousMap.instAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Equiv.instAddGroupShrink</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instAddGroupShrink</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Unitization.instAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">PowerSeries.instAddGroupPowerSeries</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Holor.instAddGroupHolor</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">OrderDual.instAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Prod.instAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">FreeAddGroup.instAddGroupFreeAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddCon.addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">HahnSeries.instAddGroupHahnSeriesToZeroToNegZeroClassToSubNegZeroMonoidToSubtractionMonoid</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Finsupp.addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">UniformSpace.Completion.addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SymAlg.addGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddUnits.instAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddGroupCat.limitAddGroup</span><span class=\"o\">,</span> <span class=\"n\">AddGroupCat.instGroupα</span><span class=\"o\">,</span> <span class=\"n\">AddGroupCat.instGroupα_1</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddMonCat.instGroupαAddMonoidOfToAddMonoidToSubNegAddMonoid</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddGroupCat.FilteredColimits.colimitAddGroup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddGroupCat.addGroupObj</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">instAddGroupObjOppositeOpensαTopologicalSpaceOfTopologicalSpace_coeToQuiverToCategoryStructOppositeSmallCategoryToPreorderToPartialOrderToCompleteSemilatticeInfInstCompleteLatticeOpensTypeToQuiverToCategoryStructTypesToPrefunctorPresheafSmoothSheaf</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">AddGroup</span>\n                <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.4681</span>\n                  <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">AddGroup</span>\n                <span class=\"o\">((</span><span class=\"n\">TopCat.Sheaf.presheaf</span> <span class=\"o\">(</span><span class=\"n\">smoothSheaf</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.4796</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.4802</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.4803</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.4806</span> <span class=\"n\">i</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.4811</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"bp\">...</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">UpgradedPolishSpace.toMetricSpace</span> <span class=\"n\">to</span> <span class=\"n\">MetricSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>OK that's enough, and I'm only 4000 lines into 42000+ lines of trace output.</p>\n<p>This has come up several times recently. One big problem with typeclass inference that we're seeing is that it's somehow intrinsically <em>really stupid</em>, and it has been able to get away with this because it is also <em>really fast</em>, but now mathlib is <em>really big</em>, and this is beginning to cost us. There seems to be no way to say \"there is no topology here, so don't even think about starting to look through the topology heirarchy, which I have unfortunately had to import because there is topology used in a proof of a non-topological result which I needed earlier\".</p>",
        "id": 421940332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708118505
    },
    {
        "content": "<p>If I increase priority of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instNonemptyForAll#doc\">docs#instNonemptyForAll</a>, then it works.</p>",
        "id": 421941091,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708118872
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover/lean4/pull/2325\">lean4#2325</a> might help here</p>",
        "id": 421941332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708118990
    },
    {
        "content": "<p>It exhibits the same behavior with just core but has less to go through</p>",
        "id": 421941563,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708119092
    },
    {
        "content": "<p>I see in the backtrace that it applies <code>Pi.instNonempty</code>, then <code>_inst</code>, then propagates back; then it tries <code>Nontrivial.to_nonempty</code> for no obvious reason.</p>",
        "id": 421941614,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708119118
    },
    {
        "content": "<p>This is instant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxSize</span> <span class=\"mi\">4096</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 421941721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708119159
    },
    {
        "content": "<p>For </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>we get </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>trace</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instForAllNonemptyNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedNat</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.626</span> <span class=\"bp\">=?=</span> <span class=\"n\">instInhabitedNat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.617</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonempty</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.611</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instNonempty</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.601</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.594</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.584</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.576</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.566</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.557</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nonempty</span>\n          <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.547</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.536</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nonempty</span>\n          <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                  <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span> <span class=\"bp\">=?=</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 421941761,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708119182
    },
    {
        "content": "<p>It's taking forever to fail because <code>maxSize</code> is forbidding it from finding the right instance, so now it has to try absolutely everything else (which will never succeed anyway)</p>",
        "id": 421941769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708119186
    },
    {
        "content": "<p>It looks to me like TC search forgot how to count...</p>",
        "id": 421941988,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708119286
    },
    {
        "content": "<p>What's the trick for expanding the entire log tree view at once in the goal view?</p>",
        "id": 421942028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708119300
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>trace </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instForAllNonemptyNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedNat</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.812</span> <span class=\"bp\">=?=</span> <span class=\"n\">instInhabitedNat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.803</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonempty</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.797</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instNonempty</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.787</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.780</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.770</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.762</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.752</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.743</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nonempty</span>\n          <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.733</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.723</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nonempty</span>\n          <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                  <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.713</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                  <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.701</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nonempty</span>\n          <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                  <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                    <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instInhabited</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.848</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonempty</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instForAllNonemptyNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedProp</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.867</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instInhabitedNat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span> <span class=\"n\">of</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.855</span> <span class=\"bp\">=?=</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedSort</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instInhabitedForAll_2</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedForAll</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.880</span> <span class=\"bp\">=?=</span> <span class=\"n\">instInhabitedNat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span> <span class=\"n\">of</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instInhabited</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.888</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instForAllNonemptyNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedProp</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.907</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.895</span> <span class=\"bp\">=?=</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedSort</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instInhabitedForAll_2</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedForAll</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.920</span> <span class=\"bp\">=?=</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instInhabited</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.928</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instForAllNonemptyNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedProp</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.947</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.935</span> <span class=\"bp\">=?=</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedSort</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instInhabitedForAll_2</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedForAll</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.960</span> <span class=\"bp\">=?=</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instInhabited</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.968</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instForAllNonemptyNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedProp</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.987</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Inhabited</span>\n          <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.975</span> <span class=\"bp\">=?=</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedSort</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instInhabitedForAll_2</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedForAll</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.1000</span> <span class=\"bp\">=?=</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instInhabited</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.1008</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instForAllNonemptyNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instNonempty</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedProp</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n</div></div>\n<p>continued</p>",
        "id": 421942182,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708119365
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.1027</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Inhabited</span>\n          <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                  <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.1015</span> <span class=\"bp\">=?=</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                  <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedSort</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instInhabitedForAll_2</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instInhabitedForAll</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.1040</span> <span class=\"bp\">=?=</span> <span class=\"n\">instInhabitedForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Inhabited</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instInhabited</span> <span class=\"n\">to</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instNonemptyForAll</span> <span class=\"n\">to</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.1048</span> <span class=\"bp\">=?=</span> <span class=\"n\">instNonemptyForAll_1</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Nonempty</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n                  <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Nonempty</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"n\">instNonemptyForAll</span> <span class=\"n\">Nat</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span> <span class=\"bp\">=?=</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Nat</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 421942202,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708119376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nonempty.20function.20instance/near/421942028\">said</a>:</p>\n<blockquote>\n<p>What's the trick for expanding the entire log tree view at once in the goal view?</p>\n</blockquote>\n<p><code>lake env lean</code> and print to file?</p>",
        "id": 421942260,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708119402
    },
    {
        "content": "<p>I did <code>lake build Mathlib.scratch.scratch10 &gt; crap</code></p>",
        "id": 421942384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708119472
    },
    {
        "content": "<p><code>set_option trace.Meta.synthInstance.newAnswer true</code> makes it clear what's going on with the sizes</p>",
        "id": 421942505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708119510
    },
    {
        "content": "<p>The progression is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span>\n<span class=\"mi\">6</span>\n<span class=\"mi\">14</span>\n<span class=\"mi\">30</span>\n<span class=\"mi\">62</span>\n<span class=\"mi\">126</span>\n<span class=\"mi\">254</span>\n<span class=\"mi\">510</span>\n<span class=\"mi\">1022</span>\n<span class=\"mi\">2046</span>\n</code></pre></div>",
        "id": 421942573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708119552
    },
    {
        "content": "<p>What is size counting?</p>",
        "id": 421942603,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708119571
    },
    {
        "content": "<p>I'm not sure, but if you combine it with <code>set_option pp.explicit true</code> then it's clear that the term size grows at least quadratically</p>",
        "id": 421942746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708119636
    },
    {
        "content": "<p>And I guess the dependent versions are longer than the non-dependent ones</p>",
        "id": 421942839,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708119682
    },
    {
        "content": "<p>I think it would be worth looking into the sizes more precisely</p>",
        "id": 421942856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708119698
    },
    {
        "content": "<p>You mean <a href=\"https://oeis.org/search?q=2%2C+6%2C+14%2C+30%2C+62%2C+126%2C+254%2C+510%2C+1022%2C+2046&amp;language=english&amp;go=Search\">like this</a> ?</p>",
        "id": 421943022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708119769
    },
    {
        "content": "<blockquote>\n<p>maximum number of instances used to construct a solution in the type class instance synthesis procedure</p>\n</blockquote>",
        "id": 421943050,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708119784
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">register_builtin_option</span> <span class=\"n\">synthInstance.maxSize</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">defValue</span> <span class=\"o\">:=</span> <span class=\"mi\">128</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"maximum number of instances used to construct a solution in the type class instance synthesis procedure\"</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 421943130,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708119828
    },
    {
        "content": "<p>I assumed you were proposing adding it to the OEIS entry</p>",
        "id": 421943351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708119918
    },
    {
        "content": "<p>Oh, may</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nonempty.20function.20instance/near/421943022\">said</a>:</p>\n<blockquote>\n<p>You mean <a href=\"https://oeis.org/search?q=2%2C+6%2C+14%2C+30%2C+62%2C+126%2C+254%2C+510%2C+1022%2C+2046&amp;language=english&amp;go=Search\">like this</a> ?</p>\n</blockquote>\n<p>My original intent was to look up the sequence, but after pasting it was pretty obvious!</p>",
        "id": 421943487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708119976
    },
    {
        "content": "<p>Maybe it becomes exponential because every binder introduces horrible dependently-typed metavariables?</p>",
        "id": 421943518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708119998
    },
    {
        "content": "<p>I guessed too! Does it mean I have IQ at least 50?</p>",
        "id": 421943531,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708120006
    },
    {
        "content": "<p>(I never took an actual IQ test, but to me it looks like the kind of question they ask)</p>",
        "id": 421943628,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708120058
    },
    {
        "content": "<p>The bonus question asks you to recite the OEIS id from memory</p>",
        "id": 421943899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708120176
    },
    {
        "content": "<p>This one has the same exponential behavior, but here it's actually justified because this really is the size of the term:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">ProdSelf</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">ProdSelf</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ProdSelf</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ProdSelf</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ProdSelf</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ProdSelf</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ProdSelf</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ProdSelf</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 421943958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708120202
    },
    {
        "content": "<p>(though I guess you could argue that if common-subexpression-elimination is a thing, this is also dramatically overcounting)</p>",
        "id": 421944046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708120231
    },
    {
        "content": "<p>Right -- this reminds me of that Coq blog post about <code>Group (G x G x G x G x G x G x G)</code></p>",
        "id": 421944086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708120255
    },
    {
        "content": "<p>The numbers grow linearly for <code>#synth Nonempty (α × α × α × α × α × α × α × α × α × α × α × α × α × α × α × α × ...)</code>, as you'd expect</p>",
        "id": 421944166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708120307
    },
    {
        "content": "<p>In <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.SynthInstance.addAnswer#doc\">docs#Lean.Meta.SynthInstance.addAnswer</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">cNode.size</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">maxResultSize</span> <span class=\"k\">then</span>\n      <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.answer</span><span class=\"o\">]</span> <span class=\"s2\">\"{crossEmoji} {← instantiateMVars (← inferType cNode.mvar)}{Format.line}(size: {cNode.size} ≥ {(← read).maxResultSize})\"</span>\n</code></pre></div>\n<p>where is <code>trace.Meta.synthInstance.answer</code>?</p>",
        "id": 421944178,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708120312
    },
    {
        "content": "<p>Never registered?</p>",
        "id": 421944418,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708120407
    },
    {
        "content": "<p>Looks like it was added in <a href=\"https://github.com/leanprover/lean4/commit/278724786a869b62c03f1c8912ca26ce72eb8ac2\">this commit</a> along with other synthInstance trace improvements, and was just accidentally left out</p>",
        "id": 421945260,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708120801
    },
    {
        "content": "<p>The class it replaced <code>discarded</code> wasn't registered either?</p>",
        "id": 421945465,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708120880
    },
    {
        "content": "<p>Oh, interesting... (Unrelated, but maybe we should lint to make sure every explicit trace class is in fact registered somewhere...possibly before it's used?)</p>",
        "id": 421946049,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708121162
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3373\">lean#3373</a></p>",
        "id": 421948509,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708122401
    }
]