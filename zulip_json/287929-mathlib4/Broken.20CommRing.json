[
    {
        "content": "<p>I’m trying to bump MIL and it seems the algebraic hierarchy is broken. The following code used to work, but now complains I should define <code>nsmul</code> and <code>zsmul</code>.  This seems to be a pretty serious regression.</p>",
        "id": 436746081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714672131
    },
    {
        "content": "<p>And the explanation we have there in MIL is exactly about how nice it is to not have to define those…</p>",
        "id": 436746146,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714672160
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6262\">#6262</a></p>",
        "id": 436746720,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714672341
    },
    {
        "content": "<p>Thanks. This is extremely sad <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 436747869,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714672758
    },
    {
        "content": "<p>I really feels like we are making the life of users worse because of performance issues we don’t understand well enough.</p>",
        "id": 436749080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714673149
    },
    {
        "content": "<p>The performance benefits were secondary there. Having Lean silently insert data when you are not absolutely sure it is the data you want was the problem.</p>",
        "id": 436749377,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714673244
    },
    {
        "content": "<p>I really don’t know what to write in MIL now, except for apologizing.</p>",
        "id": 436749404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714673256
    },
    {
        "content": "<p>The cases where you don’t want those default values are extremely rare, right?</p>",
        "id": 436749570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714673297
    },
    {
        "content": "<p>To me there were not rare enough. I would like something equally ergonomic but with some notification it is happening.</p>",
        "id": 436749788,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714673368
    },
    {
        "content": "<p>I suggested a code action for (semi-)default values there</p>",
        "id": 436749847,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714673391
    },
    {
        "content": "<p>It is really super super painful to me to throw away the chapter of MIL where I proudly explained how the community managed to make that non-painful.</p>",
        "id": 436751385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714673955
    },
    {
        "content": "<p>I wonder if we can use <code>nsmul := by exact_nsmulRec_and_warn</code> in the type definition</p>",
        "id": 436751674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714674078
    },
    {
        "content": "<p>I don’t see the difference if it means people have to fill in the field to get rid of the warning.</p>",
        "id": 436751886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714674141
    },
    {
        "content": "<p>This is a really sad day for Mathlib.</p>",
        "id": 436751906,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714674152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Broken.20CommRing/near/436749404\">said</a>:</p>\n<blockquote>\n<p>I really don’t know what to write in MIL now, except for apologizing.</p>\n</blockquote>\n<p>Indeed, I think the best you can do with mathlib master is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- let's assume we don't care about `Module` instances for now</span>\n<span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"n\">nsmulRec</span><span class=\"bp\">;</span> <span class=\"n\">zsmul</span> <span class=\"o\">:=</span> <span class=\"n\">zsmulRec</span>\n</code></pre></div>\n<p>(perhaps with some more apologetic wording)</p>",
        "id": 436751978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714674182
    },
    {
        "content": "<p>I already added such a line telling people to ignore those lines. But we have  a whole chapter about algebraic hierarchies where I was explaining how the defaut value mechanism allowed to get the best of both worlds.</p>",
        "id": 436752236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714674274
    },
    {
        "content": "<p>I think the key thing is that we really do want these <code>nsmul :=</code>s in Mathlib, and we don't currently have a way to allow downstream users to skip them</p>",
        "id": 436752267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714674287
    },
    {
        "content": "<p>I agree with Patrick that this is sad. I was very happy that the lightbulb since a few months has the \"find minimal structure skeleton\" command, which is really convenient for beginners, and now we're making it less convenient for beginners again.</p>",
        "id": 436752292,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714674295
    },
    {
        "content": "<p>If this is only for Mathlib then it should be a Mathlib linter, right?</p>",
        "id": 436752443,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714674356
    },
    {
        "content": "<p>Yes, but writing such a linter is much harder than removing the default.</p>",
        "id": 436752934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714674530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Broken.20CommRing/near/436751886\">said</a>:</p>\n<blockquote>\n<p>I don’t see the difference if it means people have to fill in the field to get rid of the warning.</p>\n</blockquote>\n<p>The warning could be disabled (or enabled) with an option, just like linter errors</p>\n<p>(again, I agree a linter is better, but this mechanism is easier and presumably better than what we have right now)</p>",
        "id": 436753079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714674580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Broken.20CommRing/near/436751674\">said</a>:</p>\n<blockquote>\n<p>I wonder if we can use <code>nsmul := by exact_nsmulRec_and_warn</code> in the type definition</p>\n</blockquote>\n<p>Would you be happy with a PR implementing this suggestion? The tactic would emit the warning only if the current file is within Mathlib.</p>",
        "id": 436754806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714675212
    },
    {
        "content": "<p>Yes, definitely; I was going to try one on my commute home anyway</p>",
        "id": 436754946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714675280
    },
    {
        "content": "<p>Ok, maybe I should grade some exams and let you have fun during your commute.</p>",
        "id": 436755212,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714675387
    },
    {
        "content": "<p>Yeah, I really think we need the old behavior, possibly with a warning (but even that I'm not entirely keen on). For instance, at some point (in the hopefully not too distant future), we'll have <code>ppow</code> and <code>psmul</code> too. It really would be terrible to have to provide all those fields for new users.</p>",
        "id": 436759594,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714676996
    },
    {
        "content": "<p>Here's a prototype:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">register_option</span> <span class=\"n\">linter.structureDiamondDefaults</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">defValue</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Linter to check if structure fields that are often implicated in typeclass diamonds are using implciit default values.\"</span> <span class=\"o\">}</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"exact_with_diamond_warning\"</span> <span class=\"n\">tgt</span><span class=\"o\">:</span><span class=\"n\">name</span> <span class=\"n\">default</span><span class=\"o\">:</span><span class=\"n\">name</span> <span class=\"n\">msg</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- stupid games because `ident` isn't allowed in the syntax parser (lean4#3328)</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgt'</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkIdent</span> <span class=\"n\">tgt.getName</span>\n  <span class=\"k\">let</span> <span class=\"n\">default'</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkIdent</span> <span class=\"n\">default.getName</span>\n  <span class=\"c1\">-- TODO: use \"Try this\" somehow, but we don't have the position info we need</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">whereStructField</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">tgt'</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">default'</span> <span class=\"o\">)</span>\n  <span class=\"n\">Lean.Linter.logLintIf</span> <span class=\"n\">linter.structureDiamondDefaults</span>\n    <span class=\"n\">tgt</span>\n    <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Using default value {stx}, which may {msg.getString}.\"</span> <span class=\"bp\">++</span>\n    <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"If you are sure this is not an issue, write {stx} explicitly\"</span><span class=\"o\">)</span>\n  <span class=\"n\">Lean.Elab.Tactic.evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"bp\">$</span><span class=\"n\">default'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 436766008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714679422
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12608\">#12608</a></p>",
        "id": 436791551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714692082
    },
    {
        "content": "<p>Regarding MIL and</p>\n<blockquote>\n<p>Thanks to these default values, most instances would be constructed exactly as with our previous definitions. But in the special case of <code>ℤ</code> we will be able to provide specific values.</p>\n</blockquote>\n<p>I think this suggests that <code>zsmul</code> is only there to make things right for the instance on <code>ℤ</code> itself. While this is certainly a convenient thing to be able to say at this point in MIL, in mathlib it's fairly rare to have types where the default <code>zsmul</code> is actually fine.</p>",
        "id": 436792723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714692895
    },
    {
        "content": "<p>Probably the earliest motivating example that conceivably could end up in MIL comes from working with vectors of complex numbers, and wanting to be able to \"multiply\" them by complex / real / rational / int  / nat scalars. Obviously you don't want to write 5 scalar multiply functions, and so you write <code>instance [SMul R Complex] : Smul R ComplexVec</code> and now run into trouble when <code>R = Int</code>.</p>",
        "id": 436793033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714693104
    },
    {
        "content": "<p>Does <a href=\"https://github.com/leanprover-community/mathlib4/pull/9154\">#9154</a> not work with <code>autoParam</code>? Is there a way to write it as an <code>optParam</code>? Or we can just write something in the warning......</p>",
        "id": 436798866,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1714697163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Broken.20CommRing/near/436791551\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12608\">#12608</a></p>\n</blockquote>\n<p>This doesn’t build yet.</p>",
        "id": 436806853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714703307
    },
    {
        "content": "<p>Should we have <code>ofCore</code> constructors instead of default values?</p>",
        "id": 438799561,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715779010
    }
]