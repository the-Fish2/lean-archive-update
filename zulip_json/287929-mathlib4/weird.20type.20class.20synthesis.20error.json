[
    {
        "content": "<p>I'm hoping that somehow I've just been <em>really</em> stupid (either now or in my development of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Unitization#doc\">docs#Unitization</a>), and the answer to this is obvious, but right now I find this to be a real head scratcher:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>The problem is type class synthesis can't find Unitization.instNormedRing?</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Star.Spectrum</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Star.Unitization</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">NonUnitalTest</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"c1\">-- A is a non-unital C⋆-algebra</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NonUnitalNormedRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CstarRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMulCommClass</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarModule</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">IsSelfAdjoint</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">spectralRadius</span> <span class=\"n\">ℂ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx.spectralRadius_eq_nnnorm</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- Lean complains ...</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  application type mismatch</span>\n<span class=\"cm\">    IsSelfAdjoint.spectralRadius_eq_nnnorm hx</span>\n<span class=\"cm\">  argument</span>\n<span class=\"cm\">    hx</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    @IsSelfAdjoint (Unitization ℂ A) Unitization.instStar x : Prop</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    @IsSelfAdjoint (Unitization ℂ A) InvolutiveStar.toStar x : Prop</span>\n<span class=\"cm\">  -/</span>\n<span class=\"c1\">-- but ...</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">IsSelfAdjoint</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">Unitization.instStar</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">IsSelfAdjoint</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">InvolutiveStar.toStar</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">IsSelfAdjoint</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">spectralRadius</span> <span class=\"n\">ℂ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">IsSelfAdjoint.spectralRadius_eq_nnnorm</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- fails, same error</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">IsSelfAdjoint</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">spectralRadius</span> <span class=\"n\">ℂ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">IsSelfAdjoint.spectralRadius_eq_nnnorm</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n    <span class=\"n\">Unitization.instNormedRing</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- works, but why couldn't Lean find this instance? It does below with `#synth`</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">NormedRing</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"c1\">-- Unitization.instNormedRing</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">IsSelfAdjoint</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">spectralRadius</span> <span class=\"n\">ℂ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsSelfAdjoint.spectralRadius_eq_nnnorm</span><span class=\"o\">]</span> <span class=\"c1\">-- also works !!</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"c1\">-- as does this !!</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">NonUnitalTest</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">UnitalTest</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"c1\">-- A is a unital C⋆-algebra.</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CstarRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedAlgebra</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarModule</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">IsSelfAdjoint</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">spectralRadius</span> <span class=\"n\">ℂ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx.spectralRadius_eq_nnnorm</span><span class=\"o\">]</span> <span class=\"c1\">-- works !!</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">UnitalTest</span>\n</code></pre></div>\n</div></div>",
        "id": 420729978,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707512100
    },
    {
        "content": "<p>It looks like the error doesn't come from unital/nonunital but from the second variable line stating the \"normed algebra\" condition. That is, this also fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"c1\">-- A is a unital C⋆-algebra.</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CstarRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMulCommClass</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarModule</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">IsSelfAdjoint</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">spectralRadius</span> <span class=\"n\">ℂ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx.spectralRadius_eq_nnnorm</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 420746503,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707519881
    },
    {
        "content": "<p>Ah, this is actually not a type class synthesis error, the indication was in the <em>second</em> error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">NormedRing</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420746929,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707520115
    },
    {
        "content": "<p>Adding <code>[RegularNormedAlgebra ℂ A]</code> to the variables solves it, but it shouldn't be needed right ?</p>",
        "id": 420747116,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707520229
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 420747193,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707520299
    },
    {
        "content": "<p>And just adding <code>let _ : RegularNormedAlgebra ℂ A := inferInstance</code> just before also works ?!?!?</p>",
        "id": 420747216,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707520321
    },
    {
        "content": "<p>Yeah, Lean should be able to find that instance I think.</p>",
        "id": 420747386,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707520431
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CstarRing.instRegularNormedAlgebra#doc\">docs#CstarRing.instRegularNormedAlgebra</a></p>",
        "id": 420747511,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707520481
    },
    {
        "content": "<p>It's very weird that it finds it when asked but otherwise doesn't</p>",
        "id": 420747530,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707520490
    },
    {
        "content": "<p>I know. I need to test if this broke with the latest release candidate or not, but I'm busy right now.</p>",
        "id": 420747594,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707520528
    },
    {
        "content": "<p>This seems to end on a stuck meta variable <code>?m.41224 : StarRing (Unitization \\C A)</code></p>",
        "id": 420748976,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707521320
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Star</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Star</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">star</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">ra</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">Unitization.fst</span> <span class=\"n\">ra</span><span class=\"o\">),</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">Unitization.snd</span> <span class=\"n\">ra</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">ra</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">Unitization.fst</span> <span class=\"n\">ra</span><span class=\"o\">),</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">Unitization.snd</span> <span class=\"n\">ra</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">star</span> <span class=\"n\">a</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"bp\">=?=</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">Unitization.fst</span> <span class=\"n\">ra</span><span class=\"o\">),</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">Unitization.snd</span> <span class=\"n\">ra</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">star</span> <span class=\"n\">ra</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">Unitization.fst</span> <span class=\"n\">ra</span><span class=\"o\">),</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">Unitization.snd</span> <span class=\"n\">ra</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">StarAddMonoid.toInvolutiveStar.1.1</span> <span class=\"n\">ra</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"bp\">=?=</span> <span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"bp\">▶</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">StarAddMonoid.toInvolutiveStar.1.1</span> <span class=\"n\">ra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">Unitization.fst</span> <span class=\"n\">ra</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">StarAddMonoid.toInvolutiveStar.1.1</span> <span class=\"n\">ra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">Unitization.fst</span> <span class=\"n\">ra</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">StarAddMonoid.toInvolutiveStar.1.1</span> <span class=\"n\">ra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">InvolutiveStar.toStar.1</span> <span class=\"o\">(</span><span class=\"n\">Unitization.fst</span> <span class=\"n\">ra</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">StarAddMonoid.toInvolutiveStar.1.1</span> <span class=\"n\">ra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Unitization.fst</span> <span class=\"n\">ra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">,</span> <span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">Unitization.fst</span> <span class=\"n\">ra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n                      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">ℂ</span> <span class=\"bp\">=?=</span> <span class=\"n\">ℂ</span>\n                      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">StarAddMonoid.toInvolutiveStar.1.1</span> <span class=\"n\">ra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">Unitization.fst</span> <span class=\"n\">ra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">▼</span>\n                        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">StarAddMonoid.toInvolutiveStar.1.1</span> <span class=\"n\">ra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Unitization.fst</span> <span class=\"n\">ra</span> <span class=\"bp\">▼</span>\n                          <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">StarAddMonoid.toInvolutiveStar.1.1</span> <span class=\"n\">ra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">ra.1</span> <span class=\"bp\">▼</span>\n                            <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">StarAddMonoid.toInvolutiveStar.1.1</span> <span class=\"n\">ra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">ra.1</span> <span class=\"bp\">▼</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">StarAddMonoid.toInvolutiveStar.1.1</span> <span class=\"n\">ra</span> <span class=\"bp\">=?=</span> <span class=\"n\">ra</span> <span class=\"bp\">▼</span>\n                                <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">StarAddMonoid.toInvolutiveStar.1.1</span> <span class=\"n\">ra</span> <span class=\"bp\">=?=</span> <span class=\"n\">ra</span> <span class=\"bp\">▼</span>\n                                  <span class=\"o\">[</span><span class=\"n\">stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.41224</span> <span class=\"o\">:</span> <span class=\"n\">StarRing</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420749271,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707521494
    },
    {
        "content": "<p>It’s weird that it gets stuck on <code>StarRing</code> since this part doesn’t depend on <code>RegularNormedAlgebra</code></p>",
        "id": 420753264,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1707524079
    },
    {
        "content": "<p>I posted another example due to Amelia recently where typeclass inference randomly fails to find an instance on a finsupp. They are so hard to minimise though :-(</p>",
        "id": 420787055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707558886
    },
    {
        "content": "<p>Is the problem this line? <a href=\"https://github.com/leanprover-community/mathlib4/blob/b1a09514e5543efb07e5748b55bcbf1d9bd32655/Mathlib/Algebra/Algebra/Unitization.lean#L600\">https://github.com/leanprover-community/mathlib4/blob/b1a09514e5543efb07e5748b55bcbf1d9bd32655/Mathlib/Algebra/Algebra/Unitization.lean#L600</a></p>",
        "id": 420789740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707561606
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> concluded we're not supposed to use RingHoms to build Algebras, because RingHom.comp isn't reducible</p>",
        "id": 420789775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707561668
    },
    {
        "content": "<p>If that's the case, adding a <code>toFun</code> field would fix it</p>",
        "id": 420789796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707561700
    },
    {
        "content": "<p>I just tested that, no success. Note: It's easy to test changes to <code>Unitization</code> because there's only two files you need to build.</p>",
        "id": 420811509,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707581139
    },
    {
        "content": "<p>This line really concerns me. Lean should not be asking about <code>ℂ × A</code> at all.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"bp\">=?=</span> <span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>It makes me suspect that something is causing Lean to see through the (default transparency) <code>def</code>. I'm going to try upgrading the barrier between the two to see if that helps.</p>",
        "id": 420846522,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707613383
    },
    {
        "content": "<p>It would be nice to understand why the current approach is leaking; though indeed upgrading to a structure would fix it</p>",
        "id": 420869977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707638021
    },
    {
        "content": "<p>Well, this is somewhat depressing: I went through the annoying work of turning <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Unitization#doc\">docs#Unitization</a> into a structure, but the error persists, albeit in this case it just fails to find an occurrence of the pattern in the expression.</p>",
        "id": 421070825,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707753967
    },
    {
        "content": "<p>The trick of supplying the <code>RegularNormedAlgebra</code> instance manually still fixes it.</p>",
        "id": 421070926,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707753995
    },
    {
        "content": "<p>You can play for yourself at <a href=\"https://github.com/leanprover-community/mathlib4/tree/j-loreaux%2FUnitization-structure\">branch#j-loreaux/Unitization-structure</a></p>",
        "id": 421070969,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707754011
    },
    {
        "content": "<p>Even if the full cache isn't there yet, it only takes about a minute to build the imports for the example file given at the top of the thread.</p>",
        "id": 421071140,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707754059
    },
    {
        "content": "<p>How about this line as the problem (at this point, I'm just flailing)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeTC</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">inr</span>\n</code></pre></div>\n<p>Should we not be using <code>CoeTC</code>? (EDIT: still fails with <code>CoeTail</code>; although I'm still wondering whether or not we should be using <code>CoeTC</code> here.)</p>",
        "id": 421072011,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707754309
    },
    {
        "content": "<p>One more thing to note: I did try this on master prior to the 4.6.0 bump and the error exists there too. I didn't go further back than that.</p>",
        "id": 421073523,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707754739
    },
    {
        "content": "<p>I agree that <code>CoeTC</code> is suspicious. These were introduced in the port because we aligned <code>coe_out</code> to it, but it's not supposed to be instantiated in mathlib code. I didn't have enough time today to check this out, hopefully I can get to it tomorrow.</p>",
        "id": 421096760,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707761163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/weird.20type.20class.20synthesis.20error/near/420846522\">said</a>:</p>\n<blockquote>\n<p>This line really concerns me. Lean should not be asking about <code>ℂ × A</code> at all.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"bp\">=?=</span> <span class=\"n\">ℂ</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>It makes me suspect that something is causing Lean to see through the (default transparency) <code>def</code>. I'm going to try upgrading the barrier between the two to see if that helps.</p>\n</blockquote>\n<p>This seems to happen because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Unitization.instStar#doc\">docs#Unitization.instStar</a> is unfolded (at default transparency, so it doesn't matter whether this is an <code>instance</code> or a <code>def</code>) when elaborating <code>hx.spectralRadius_eq_nnnorm</code>. It doesn't matter whether <code>Unitiziation</code> is a <code>def</code> or a <code>structure</code>, we can't block unfolding <code>instStar</code>. And it needs to be reducible to make the rest of the file where it's defined work.</p>\n<p>So it's not the <code>rw</code> tactic but just elaborating a term. For example, the following code also reproduces the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Star.Spectrum</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Star.Unitization</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"c1\">-- A is a unital C⋆-algebra.</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CstarRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMulCommClass</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarModule</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">IsSelfAdjoint</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">spectralRadius</span> <span class=\"n\">ℂ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- let _ : RegularNormedAlgebra ℂ A := inferInstance -- Uncomment to make everything work.</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hx.spectralRadius_eq_nnnorm</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>As part of this defeq check the <code>NormedRing (Unitization ℂ A)</code> instance needs to be synthesized, which causes all the downstream issues.</p>",
        "id": 421216978,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707820761
    },
    {
        "content": "<p>Specifically the defeq check goes up to <code>[stuckMVar] found stuck MVar ?m.41224 : StarRing (Unitization ℂ A)</code> as Matt described can be made unstuck by instance synthesis, and then we get to the mysterious failing search that works by itself.</p>",
        "id": 421218156,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707821160
    },
    {
        "content": "<p>If we look at the synthesis goal <code>StarRing (Unitization ℂ A)</code> then it turns out it actually has a metavariable of its own: <code>@StarRing (Unitization ℂ A) (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring (... (@NormedRing.toRing (Unitization ℂ A) ?m.22212)))</code></p>",
        "id": 421218470,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707821279
    },
    {
        "content": "<p>By itself <code>StarRing (Unitization ℂ A)</code> gets the instance <code>Unitization.instNonAssocRing</code> in place of the <code>NormedRing</code> metavariable.</p>",
        "id": 421218714,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707821372
    },
    {
        "content": "<p>Some more trace output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                                        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Unitization.instStarRing</span> <span class=\"n\">to</span> <span class=\"n\">StarRing</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                                          <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">StarRing</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">StarRing</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"bp\">?</span><span class=\"n\">m.30771</span> <span class=\"bp\">?</span><span class=\"n\">m.30772</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                                            <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">StarRing</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">StarRing</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"bp\">?</span><span class=\"n\">m.30771</span> <span class=\"bp\">?</span><span class=\"n\">m.30772</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                                              <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"bp\">=?=</span> <span class=\"n\">Unitization</span> <span class=\"bp\">?</span><span class=\"n\">m.30771</span> <span class=\"bp\">?</span><span class=\"n\">m.30772</span> <span class=\"bp\">▶</span>\n                                              <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"bp\">▼</span>\n<span class=\"bp\">...</span>\n                                                                                                      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.1.1.1.1</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddSemigroup.toAdd.1</span> <span class=\"n\">p.1</span> <span class=\"n\">q.1</span> <span class=\"bp\">▼</span>\n                                                                                                        <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.1.1.1.1</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddSemigroup.toAdd.1</span> <span class=\"n\">p.1</span> <span class=\"n\">q.1</span> <span class=\"bp\">▼</span>\n                                                                                                          <span class=\"o\">[</span><span class=\"n\">stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.30750</span> <span class=\"o\">:</span> <span class=\"n\">NormedRing</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n                                                                                                          <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">NormedRing</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 421219402,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707821630
    },
    {
        "content": "<p>So now we get into the root cause:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                                                                                                          <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">NormedRing</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n\n                                                                                                          <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Unitization.instNormedRing</span> <span class=\"n\">to</span> <span class=\"n\">NormedRing</span> <span class=\"o\">(</span><span class=\"n\">Unitization</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n<span class=\"bp\">...</span>\n\n                                                                                                          <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">CstarRing.instRegularNormedAlgebra</span> <span class=\"n\">to</span> <span class=\"n\">RegularNormedAlgebra</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"bp\">▼</span>\n                                                                                                            <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">RegularNormedAlgebra</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"bp\">≟</span> <span class=\"n\">RegularNormedAlgebra</span> <span class=\"bp\">?</span><span class=\"n\">m.30893</span> <span class=\"bp\">?</span><span class=\"n\">m.30894</span> <span class=\"bp\">▼</span>\n                                                                                                              <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">RegularNormedAlgebra</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"bp\">=?=</span> <span class=\"n\">RegularNormedAlgebra</span> <span class=\"bp\">?</span><span class=\"n\">m.30893</span> <span class=\"bp\">?</span><span class=\"n\">m.30894</span> <span class=\"bp\">▼</span>\n                                                                                                                <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">ℂ</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.30893</span> <span class=\"bp\">▶</span>\n                                                                                                                <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">A</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.30894</span> <span class=\"bp\">▶</span>\n                                                                                                                <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.30899</span> <span class=\"bp\">▼</span>\n                                                                                                                  <span class=\"o\">[]</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.30899</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span>\n                                                                                                                  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">NormedSpace</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"bp\">=?=</span> <span class=\"n\">NormedSpace</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"bp\">▼</span>\n                                                                                                                    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">ℂ</span> <span class=\"bp\">=?=</span> <span class=\"n\">ℂ</span>\n                                                                                                                    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">A</span> <span class=\"bp\">=?=</span> <span class=\"n\">A</span>\n                                                                                                                    <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">DenselyNormedField.toNormedField</span> <span class=\"bp\">=?=</span> <span class=\"n\">Complex.instNormedFieldComplex</span> <span class=\"bp\">▼</span>\n                                                                                                                      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">DenselyNormedField.toNormedField</span> <span class=\"bp\">=?=</span> <span class=\"n\">NormedField.mk</span> <span class=\"n\">Complex.instNormedFieldComplex.proof_1</span>\n                                                                                                                            <span class=\"n\">Complex.instNormedFieldComplex.proof_2</span> <span class=\"bp\">▼</span>\n                                                                                                                        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.30895.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">NormedField.mk</span> <span class=\"n\">Complex.instNormedFieldComplex.proof_1</span> <span class=\"n\">Complex.instNormedFieldComplex.proof_2</span> <span class=\"bp\">▼</span>\n                                                                                                                          <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">NormedField</span> <span class=\"n\">ℂ</span> <span class=\"bp\">=?=</span> <span class=\"n\">NormedField</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n                                                                                                                          <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">NormedField.toNorm</span> <span class=\"bp\">=?=</span> <span class=\"n\">Complex.instNormComplex</span> <span class=\"bp\">▼</span>\n                                                                                                                            <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">NormedField.toNorm</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"bp\">⇑</span><span class=\"n\">Complex.abs</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n                                                                                                                              <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.30895.1.1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"bp\">⇑</span><span class=\"n\">Complex.abs</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n                                                                                                                                <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Norm</span> <span class=\"n\">ℂ</span> <span class=\"bp\">=?=</span> <span class=\"n\">Norm</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n                                                                                                                                <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">norm</span> <span class=\"bp\">=?=</span> <span class=\"bp\">⇑</span><span class=\"n\">Complex.abs</span> <span class=\"bp\">▼</span>\n                                                                                                                                  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.30895.1.1.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">AbsoluteValue.funLike.1</span> <span class=\"n\">Complex.abs</span> <span class=\"bp\">▼</span>\n                                                                                                                                    <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.30895.1.1.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Complex.abs.toFun</span> <span class=\"bp\">▼</span>\n                                                                                                                                      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.30895.1.1.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Complex.abs.toMulHom.1</span> <span class=\"bp\">▼</span>\n                                                                                                                                        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.30895.1.1.1</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"n\">Complex.normSq</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                                                                                                                                          <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"n\">Complex.normSq</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">m.30895.1.1.1</span> <span class=\"n\">a</span> <span class=\"bp\">▼</span>\n                                                                                                                                            <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">ℂ</span> <span class=\"bp\">=?=</span> <span class=\"n\">ℂ</span>\n                                                                                                                                            <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"n\">Complex.normSq</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.30895.1.1.1</span> <span class=\"n\">x</span> <span class=\"bp\">▼</span>\n                                                                                                                                              <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">NNReal.sqrt</span> <span class=\"o\">(</span><span class=\"n\">Real.toNNReal</span> <span class=\"o\">(</span><span class=\"n\">Complex.normSq</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.30895.1.1.1</span> <span class=\"n\">x</span> <span class=\"bp\">▼</span>\n                                                                                                                                                <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">NNReal.sqrt</span> <span class=\"o\">(</span><span class=\"n\">Real.toNNReal</span> <span class=\"o\">(</span><span class=\"n\">Complex.normSq</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.30895.1.1.1</span> <span class=\"n\">x</span> <span class=\"bp\">▼</span>\n                                                                                                                                                  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">NNReal.sqrt</span> <span class=\"o\">(</span><span class=\"n\">Real.toNNReal</span> <span class=\"o\">(</span><span class=\"n\">Complex.normSq</span> <span class=\"n\">x</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.30895.1.1.1</span> <span class=\"n\">x</span> <span class=\"bp\">▼</span>\n                                                                                                                                                    <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">NNReal.sqrt</span> <span class=\"o\">(</span><span class=\"n\">Real.toNNReal</span> <span class=\"o\">(</span><span class=\"n\">Complex.normSq</span> <span class=\"n\">x</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.30895.1.1.1</span> <span class=\"n\">x</span> <span class=\"bp\">▼</span>\n                                                                                                                                                      <span class=\"o\">[</span><span class=\"n\">stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.30895</span> <span class=\"o\">:</span> <span class=\"n\">DenselyNormedField</span> <span class=\"n\">ℂ</span>\n</code></pre></div>",
        "id": 421221255,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707822336
    },
    {
        "content": "<p>It tuns out the ultimate problem is a stuck MVar <code>?m.30895 : DenselyNormedField ℂ</code> which doesn't get unstuck!</p>",
        "id": 421221392,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707822381
    },
    {
        "content": "<p>Is this maybe the return of <a href=\"https://github.com/leanprover/lean4/pull/2522\">leanprover/lean4#2522</a>?</p>",
        "id": 421223764,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707823359
    },
    {
        "content": "<p>Ah no, this is just a consequence of <a href=\"https://github.com/leanprover/lean4/blob/c27474341e55a1a3432662273ef7bd1b9aa9231a/src/Lean/Meta/SynthInstance.lean#L767\">the code here</a>: with <code>set_option trace.Meta.synthPending</code> we get <code>[synthPending] too many nested synthPending invocations</code></p>",
        "id": 421224482,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707823666
    },
    {
        "content": "<p>So I suppose the question is: should we increase the limit of nested invocations of <code>synthPending</code>? Or can we work around the issue in another way?</p>",
        "id": 421224867,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707823807
    },
    {
        "content": "<p>This is as much as I can do today, hopefully this helps getting the issue unstuck!</p>",
        "id": 421225244,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707823970
    },
    {
        "content": "<p>Thanks for your help debugging this <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> !</p>",
        "id": 421245584,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707831613
    }
]