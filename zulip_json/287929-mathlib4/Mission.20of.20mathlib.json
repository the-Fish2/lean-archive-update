[
    {
        "content": "<p>[Warning]<br>\nThis post is very philosophical, unnecessarily long, sloppily written, and possibly highly controversial. If you are busy or you care about using your time effectively, you better keep scrolling instead of reading the wall of text below...</p>\n<p>I am curious about the overall mission of Mathlib. Is the main goal of Mathlib to (1) provide tools for verifying that the MathematiCS people have done on paper is correct? Or is the main goal of Mathlib to (2) develop a new (and hopefully better) version of MathematiCS?</p>\n<p>Why am I asking? If (1) is the main goal, we are maybe doing a disservice to the userbase by always aiming for the maximum generality. It is definitely amazing to have a very abstract mathematical library in Lean. I have no doubts about that. However, it becomes problematic when you realize that Mathlib is de facto the only mathematical library in Lean. The bar for \"I have this paper written in LaTeX and now I want to verify the correctness in Lean with the help of Mathlib\" is currently very high (to be fair, the design decision to aim for the maximum generality is usually not the main reason why it is difficult, but it contributes to the problem).</p>\n<p>If (2) is the main goal, then I think the design decisions of Mathlib are (nearly) perfect! However, we should improve the communication. Namely, I don't like seeing LaTeX in the docs, and I am not a big fan of using LaTeX on Zulip either. If (2) is the main goal of Mathlib, I will totally support it! But, we should start communicating in a way that allows Mathlib contributors and Mathlib users to know only the Lean notation. I will be very happy if I cut off the LaTeX mathematical notation completely out of my life and use Lean only! I noticed my English became much better when I started to use English in my head, instead of thinking in Czech and translating my thoughts to English. I would like to do the same thing for MathematiCS (think directly in Lean, without translating from LaTeX or pen-and-paper/blackboard notation).</p>",
        "id": 419434608,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706871864
    },
    {
        "content": "<p>Are we assuming mathlib has a single main goal? :)</p>",
        "id": 419436492,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706872556
    },
    {
        "content": "<p>/me is not</p>",
        "id": 419436593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706872583
    },
    {
        "content": "<p>I think (1) is closer to the truth than (2), although one has to reinvent things sometimes to ease formalization tasks</p>",
        "id": 419436609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706872592
    },
    {
        "content": "<blockquote>\n<p>The bar for \"I have this paper written in LaTeX and now I want to verify the correctness in Lean with the help of Mathlib\" is currently very high (to be fair, the design decision to aim for the maximum generality is usually not the main reason why it is difficult, but it contributes to the problem).</p>\n</blockquote>\n<p>I don't really understand what you mean here. Mathlib being high generality should not make proofs (significantly) harder, and if it does that should be treated as an issue to be solved. Obviously this makes things harder for mathlib contributions but that's a separate matter</p>",
        "id": 419436774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706872663
    },
    {
        "content": "<p>It can make things harder to find though (which is also an issue to be solved, but I'm not sure we have good tools for tackling it at this point)</p>",
        "id": 419436816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706872682
    },
    {
        "content": "<p>Regarding tools for making things easier to find: what if we picked a selection of standard, ideally openly accessible, textbooks on the various areas of math and made a file linking (almost) every result in these books to results in Mathlib? That allows for a nice way of finding the generalization of your result that was implemented in Mathlib, and should be relatively easy to maintain…</p>",
        "id": 419437370,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1706872872
    },
    {
        "content": "<p>I think one of the main goals is to making possible to formalize serious mathematics.</p>\n<p>There is a big difference between working on its own formalization project and working on mathlib. If in my project I need <code>x^n = 1</code> for <code>x</code> in a group of order <code>n</code>, I want this result to be in mathlib, since it is undergraduate mathematics, and I don't want to reprove everything. But I don't care if the actual mathlib statement is for some crazy semimonoid with blah blah. For the same reason I don't want to know why groups have this crazy definition, I just want to use the library, hoping that it works as a good blackboard.</p>",
        "id": 419441783,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706874665
    },
    {
        "content": "<p>For me the main goal is to make a library which is powerful enough to be able to make it feasible to interact with concepts in current mathematical research, because empirically this is what makes mathematicians notice the software and hence grow the area. I believe it's important to make mathematicians notice the software because Lean represents a new and I believe better-than-the-status-quo way of doing mathematics. But this is just personal opinion coming from the fact that mathematicians in my area have in my opinion become quite sloppy when it comes to writing up their results (see for example the section on \"The work of Arthur\" on <a href=\"https://www.galoisrepresentations.com/2023/09/24/clozel-70-part-i/\">this Frank Calegari blog post</a> , an issue I have been banging on about since 2020 but all of a sudden my community has woken up to), and to be honest I'm very happy with the idea that mathlib can mean different things to different people.</p>",
        "id": 419443510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706875348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mission.20of.20mathlib/near/419436774\">said</a>:</p>\n<blockquote>\n<p>I don't really understand what you mean here. Mathlib being high generality should not make proofs (significantly) harder</p>\n</blockquote>\n<p>It does, albeit in an indirect way (modulo some rare cases where the more general definition is really harder to work with).</p>\n<p>For example, consider <a href=\"https://github.com/leanprover-community/mathlib4/pull/6042\">#6042</a> SVD, which is the top item on the <a href=\"https://bit.ly/3cKk3ld\">#queue</a> currently. It would have been already merged if we didn't insist on maximum generality. Hence, if I were formalizing anything that uses SVDs, I would have to rebuilt the theory myself, as it is currently missing in Mathlib (where the consensus seems to be that contributions are not accepted until they are provided in the \"best generality\"). The situation would be much different if Mathlib accepted PRs that aren't general enough and left the refactoring to generality for later contributors (the narrative would be \"if a hypothetical future user wants a more general version, let <em>them</em> do it\"). The latter approach would have significant drawbacks as well, hence I am not advocating for it, but I nonetheless want to point out that the current narrative (\"don't contribute unless you are willing to contribute the most general version\") has significant practical issues.</p>",
        "id": 419446420,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706876474
    },
    {
        "content": "<blockquote>\n<p>For example, consider <a href=\"https://github.com/leanprover-community/mathlib4/pull/6042\">#6042</a> SVD, which is the top item on the <a href=\"https://bit.ly/3cKk3ld\">#queue</a> currently. It would have been already merged if we didn't insist on maximum generality.</p>\n</blockquote>\n<p>That's a different issue, the one that I mention in the following sentence:</p>\n<blockquote>\n<p>Obviously this makes things harder for mathlib contributions but that's a separate matter</p>\n</blockquote>",
        "id": 419446687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706876575
    },
    {
        "content": "<p>Clearly asking for more generality puts more work on <em>mathlib contributors</em>, but it doesn't (shouldn't) put more work on <em>mathlib users</em></p>",
        "id": 419446795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706876619
    },
    {
        "content": "<p>Mathlib is in this sense aiming to be as useful as possible to a wide variety of use cases</p>",
        "id": 419446931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706876658
    },
    {
        "content": "<p>There is a very strong argument both mathematically and practically that if you do it wrong the first time then you pay more later.</p>",
        "id": 419446949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706876668
    },
    {
        "content": "<p>The literature is full of claims such as \"this reference proves X but clearly the ideas in it prove the slightly more general Y which is what we need here\" and this is terrible. We're not making that mistake here.</p>",
        "id": 419447220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706876771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mission.20of.20mathlib/near/419446795\">said</a>:</p>\n<blockquote>\n<p>Clearly asking for more generality puts more work on <em>mathlib contributors</em>, but it doesn't (shouldn't) put more work on <em>mathlib users</em></p>\n</blockquote>\n<p>It is true it puts more work on mathlib contributors in the first place, but I have just explained how it puts more work on mathlib users as well.</p>",
        "id": 419447351,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706876823
    },
    {
        "content": "<p>I'm not completely against redoing work with the benefit of hindsight, but when you can already foresee what iteration 2 is going to look like then it's time saved to not have to do iteration 1 first</p>",
        "id": 419447448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706876867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mission.20of.20mathlib/near/419447448\">said</a>:</p>\n<blockquote>\n<p>when you can already foresee what iteration 2 is going to look like then it's time saved to not have to do iteration 1 first</p>\n</blockquote>\n<p>... if there is a person who is competent to do the iteration 2 and wants to put the effort into it. Otherwise, having to choose between iteration 1 and nothing, I will opt for \"done is better than perfect\".</p>",
        "id": 419447812,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706877002
    },
    {
        "content": "<p>It seems to me that both <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> want to do (1) but say it in different words.</p>",
        "id": 419448500,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706877260
    },
    {
        "content": "<p>I think that merging things which aren't fully baked yet will make things harder for everyone down the line</p>",
        "id": 419448517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706877266
    },
    {
        "content": "<p>that is, we need an actual plan for tracking and fixing issues deliberately introduced in the library in that way</p>",
        "id": 419448676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706877341
    },
    {
        "content": "<p>Not for everyone, but for many people, yes, and that's why I respect the status quo.</p>",
        "id": 419448689,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706877346
    },
    {
        "content": "<p>This is getting even more important since we start to have projects depending on mathlib asking us to have a proper deprecation policy. If some temporary version ends up staying in mathlib for months because of this it would be kind of annoying.</p>",
        "id": 419449166,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706877533
    },
    {
        "content": "<p>Yeah, the aim to avoid breaking changes is a solid argument for \"better nothing than imperfect\".</p>",
        "id": 419449321,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706877594
    },
    {
        "content": "<p>Talking about deprecation policy, I have questions about <a href=\"https://github.com/leanprover-community/mathlib4/pull/10185\">#10185</a>. It renames <code>op_norm</code> to <code>opNorm</code> in lemma names, and <code>op_nnnorm</code> to <code>opNnnorm</code> (not sure about the capitalization, by the way). Done with a brutal search and replace (and fixing the <code>#align</code> lines with another search and replace), and touching 568 lines. If I have to add manually a deprecation statement to all lemmas whose name has changed, I will probably drop the PR (it's not that important, after all). I'd be happy to have your opinions on this:<br>\n(1) Should we drop the PR because it doesn't follow the deprecation policy, and accept the current suboptimal state? Then deprecation policy is actively harming mathlib.<br>\n(2) Should we get the PR in, and accept the breakage for downstream users? Not very nice, since these lemmas are pretty common.<br>\n(3) Should we use a better tool for the job, that would automatically add the deprecation command for each renamed lemma? (my regex-foo is not good enough for this, unfortunately) -- or could <code>leaff</code> do it for me?<br>\nThoughts, anyone?</p>",
        "id": 419452107,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706878582
    },
    {
        "content": "<p>I'm obviously against option (1). Option (3) is of course what we should tend to, but I don't know what is realistic here. I think the solution is to go for option (2) and make an announcement somewhere. Maybe a reasonable policy would be \"either do the deprecation stuff and then the tooling basically handles the transition for downstream users, or write down a detailed explanation of the changes (including the regex?) to some kind of changelog\" ?</p>",
        "id": 419453951,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706879202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> speaking just for myself I would say:</p>\n<ol>\n<li>No</li>\n<li>Yes</li>\n<li>Yes, but we do not block ourselves by waiting for such tooling.</li>\n</ol>",
        "id": 419453994,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706879221
    },
    {
        "content": "<p>Also, would expect opNNNorm</p>",
        "id": 419454152,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706879276
    },
    {
        "content": "<p>Yes, I hesitated between <code>opNnnorm</code> and <code>opNNNorm</code>, and I can definitely change to the latter.</p>",
        "id": 419454591,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706879437
    },
    {
        "content": "<p>What would the deprecation policy ask in this case?  To add <code>@[deprecated]</code> to each theorem name that was changed?  If that is the case, I can try to look into how to do it (somewhat) systematically.</p>",
        "id": 419459023,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706881071
    },
    {
        "content": "<p>Let me give an example. I rename the theorem<code>theorem linfty_op_nnnorm_col</code> to <code>linfty_opNnnorm_col</code>. The proper fix would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">linfty_opNnnorm_col</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">linfty_op_nnnorm_col</span> <span class=\"o\">:=</span> <span class=\"n\">linfty_opNnnorm_col</span> <span class=\"c1\">-- deprecated on 2024/02/02</span>\n</code></pre></div>",
        "id": 419460328,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706881522
    },
    {
        "content": "<p>Or maybe even better</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">linfty_opNnnorm_col</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span> <span class=\"n\">linfty_opNnnorm_col</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">linfty_op_nnnorm_col</span> <span class=\"o\">:=</span> <span class=\"n\">linfty_opNnnorm_col</span> <span class=\"c1\">-- deprecated on 2024/02/02</span>\n</code></pre></div>",
        "id": 419460853,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706881694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> Speaking as someone working on a migration tool, my answers align with <span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> 's. Eventually we'll have something and can retrofit some migrations on old work by running leaff or something like it, until then don't worry too much about it</p>",
        "id": 419461385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706881893
    },
    {
        "content": "<p>in any case, having to manually add deprecations for all these is not the plan</p>",
        "id": 419461589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706881967
    },
    {
        "content": "<p>Sébastien, I'll see if I can cook up something quick that would work in simple cases, while waiting for a more robust fix!</p>",
        "id": 419461913,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706882082
    },
    {
        "content": "<p>OK! There's no hurry anyway, it's been like that since the port.</p>",
        "id": 419462758,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706882368
    },
    {
        "content": "<p>I'm looking at the <code>leaff</code> output.</p>",
        "id": 419670656,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707023964
    },
    {
        "content": "<p><code>leaff</code> reports either old or new lemma as \"added\" but it looks like <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> added all the needed <code>@[deprecated]</code> aliases (I used <code>git diff</code> + <code>grep</code> + <code>wc</code> to count lines), so I merged it.</p>",
        "id": 419670957,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707024348
    },
    {
        "content": "<p>As for the original topic, for me one of the missions of Mathlib is to have a large library of correctly stated results, with a strong preference towards formulating each result in the strongest form available.</p>",
        "id": 419676692,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707031044
    },
    {
        "content": "<p>At least in dynamics, too often people formulate theorems in the \"essential\" case, e.g.,</p>\n<ul>\n<li>\n<p>Discuss each bifurcation scenario only in the least-parametric family that makes sense for this scenario.<br>\n  If you want to apply the result to a larger bifurcation (with more parameters) that has this one as a part of the picture,<br>\n  then you either pretend that it's OK to reuse the theorem or have to prove classical results in slightly higher generality.<br>\n  Clearly, most people take the first route.</p>\n</li>\n<li>\n<p>Prove theorems with unspecified smoothness assumptions. If you want to deal with a finitely-smooth family, then you have to carefully read the proofs of all the results you reference to figure out what smoothness is enough.</p>\n</li>\n</ul>",
        "id": 419677158,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707031649
    },
    {
        "content": "<p>I believe it would be good if, say once a year, mathlib maintainers (not necessarily in the strict sense) spent some time on the library and indicated directions in which it should go further. <br>\nThat would mean collecting “TODOs”, sketching some directions for things to formalize, possibly stating theorems to prove (so that “formalizing Doe's theorem” would mean eliminating <code>sorry</code> from some file with <code>theorem doe … := sorry</code>), etc. <br>\nMaybe that would be too much of a burden, I don't know, but it would help, and maybe it would secure the library as soon as it grows in an amazing number of directions.</p>",
        "id": 419717216,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707069047
    },
    {
        "content": "<p>I can't answer <span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> 's question, but something similar happened recently, where <code>FunLike</code> was replaced (so it seems) by <code>DFunLike</code>. I did the replacement in my files after merging master, but I wasn't really sure of what I was doing, but didn't find any information about the change (maybe I didn't search hard enough). Is it possible that <code>FunLike</code>would have still existed, but be tagged as deprecated.</p>",
        "id": 419717550,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707069306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mission.20of.20mathlib/near/419717216\">said</a>:</p>\n<blockquote>\n<p>(so that “formalizing Doe's theorem” would mean eliminating <code>sorry</code> from some file with <code>theorem doe … := sorry</code>)</p>\n</blockquote>\n<p>We have <code>proof_wanted</code> for things we can already state but haven't proved yet.</p>",
        "id": 419717662,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707069398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mission.20of.20mathlib/near/419676692\">said</a>:</p>\n<blockquote>\n<p>As for the original topic, for me one of the missions of Mathlib is to have a large library of correctly stated results, with a strong preference towards formulating each result in the strongest form available.</p>\n</blockquote>\n<p>There are people who worked with that goal in mind, and in some cases, “the strongest form available” is too much a burden for what it's worth. Again, having “strong enough” intermediate steps are sometimes useful, possibly formalizing them compatibly with planned future refinements, but not necessarily formalizing these utmost general results on the onset.</p>",
        "id": 419717786,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707069509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mission.20of.20mathlib/near/419717216\">said</a>:</p>\n<blockquote>\n<p>I believe it would be good if, say once a year, mathlib maintainers (not necessarily in the strict sense) spent some time on the library and indicated directions in which it should go further. </p>\n</blockquote>\n<p>For what it's worth, that's one of the visions I have for the AIM workshop -- establishing a roadmap for future directions in algebraic geometry.</p>",
        "id": 419721831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707072663
    }
]