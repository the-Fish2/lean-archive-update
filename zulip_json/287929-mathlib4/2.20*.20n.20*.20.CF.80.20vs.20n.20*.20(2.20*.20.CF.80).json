[
    {
        "content": "<p>Some lemmas (e.g., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.cos_eq_one_iff#doc\">docs#Real.cos_eq_one_iff</a>) use <code>n * (2 * π)</code>, other lemmas (e.g., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.cos_eq_cos_iff#doc\">docs#Complex.cos_eq_cos_iff</a>) use <code>2 * n * π</code>. IMHO, we should write it the same way everywhere. What do you think?</p>",
        "id": 417013886,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705776342
    },
    {
        "content": "<p>/poll 2 * n * π or n * (2 * π)?<br>\nchange all lemmas to 2 * n * π<br>\nchange all lemmas to n * (2 * π)<br>\nleave as is</p>",
        "id": 417013969,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705776397
    },
    {
        "content": "<p><code>n</code> being sandwiched between two constants feels more awkward to use.</p>",
        "id": 417014135,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1705776597
    },
    {
        "content": "<p>Also, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.cos_eq_zero_iff#doc\">docs#Complex.cos_eq_zero_iff</a></p>",
        "id": 417014237,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705776715
    },
    {
        "content": "<p>/poll How should we spell (2 * k + 1) * π / 2?<br>\n(2 * k + 1) * π / 2<br>\nπ / 2 + k * π</p>",
        "id": 417014329,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705776795
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>: I want to add lemmas <code>Complex.cos_eq_one_iff</code>, <code>cos_eq_neg_one_iff</code> etc for the cases when <code>cos_eq_cos_iff</code> doesn't immediately give the answer we want. So, I want to have a standard way to spell all these angles.</p>",
        "id": 417014438,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705776927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/287929-mathlib4/topic/2.20*.20n.20*.20.CF.80.20vs.20n.20*.20.282.20*.20.CF.80.29/near/417014135\">said</a>:</p>\n<blockquote>\n<p><code>n</code> being sandwiched between two constants feels more awkward to use.</p>\n</blockquote>\n<p>OTOH, we have <code>2 * n</code> a.k.a. \"any even number\". BTW, another way to spell this lemma is <code>∃ k, Even k ∧ k * π = x</code></p>",
        "id": 417014509,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705776981
    },
    {
        "content": "<p>n * \\tau?</p>",
        "id": 417015399,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705777789
    },
    {
        "content": "<p>Do you really want to introduce yet another constant?</p>",
        "id": 417015460,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705777828
    },
    {
        "content": "<p>No</p>",
        "id": 417016973,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705779254
    },
    {
        "content": "<p>I mean this is where you start feeling like tau isn't a bad idea after all...</p>",
        "id": 417017351,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705779578
    },
    {
        "content": "<p>I strongly refuse to break up the <code>2 * π</code> appearing in those theorems, and as I said previously I think we should introduce a new definition (an <code>abbrev</code> would be fine) to enforce it.</p>",
        "id": 417017451,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705779667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/2.20*.20n.20*.20.CF.80.20vs.20n.20*.20.282.20*.20.CF.80.29/near/417017451\">said</a>:</p>\n<blockquote>\n<p>I strongly refuse to break up the <code>2 * π</code></p>\n</blockquote>\n<p>why?</p>",
        "id": 417019884,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1705781598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> How would you spell <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.sin_eq_sin_iff#doc\">docs#Complex.sin_eq_sin_iff</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.cos_eq_zero_iff%3F#doc\">docs#Complex.cos_eq_zero_iff?</a></p>",
        "id": 417026066,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705786759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/2.20*.20n.20*.20.CF.80.20vs.20n.20*.20.282.20*.20.CF.80.29/near/417019884\">said</a>:<br>\nwhy?</p>\n<p>I would not break up <code>2 * pi</code> either since it has meaning by itself in as many places as <code>pi / 2</code> does</p>",
        "id": 417047794,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705805837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/2.20*.20n.20*.20.CF.80.20vs.20n.20*.20.282.20*.20.CF.80.29/near/417017451\">said</a>:</p>\n<blockquote>\n<p>I strongly refuse to break up the <code>2 * π</code> appearing in those theorems, and as I said previously I think we should introduce a new definition (an <code>abbrev</code> would be fine) to enforce it.</p>\n</blockquote>\n<p>What about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>i</mi><mi>π</mi></mrow><annotation encoding=\"application/x-tex\"> 2 i \\pi </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">iπ</span></span></span></span> ?</p>",
        "id": 417062192,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705820046
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.exp_eq_exp_iff_exists_int#doc\">docs#Complex.exp_eq_exp_iff_exists_int</a> uses <code>n * (2 * π * I)</code></p>",
        "id": 417062227,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705820102
    },
    {
        "content": "<p>It looks like I'm the only one who prefers <code>π / 2 + n * π</code>. My reason: this way the period is separate from the \"base value\".</p>",
        "id": 417062332,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705820218
    },
    {
        "content": "<p>And I know <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_assoc#doc\">docs#mul_assoc</a> is not ‘simp‘ but what is the preferred way of writing ‘a * b * c‘ in lemmas?</p>",
        "id": 417062371,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705820263
    },
    {
        "content": "<p>I usually write <code>a * b * c</code> unless there is a reason to group <code>b * c</code>.</p>",
        "id": 417062457,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705820314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/2.20*.20n.20*.20.CF.80.20vs.20n.20*.20.282.20*.20.CF.80.29/near/417062332\">said</a>:</p>\n<blockquote>\n<p>It looks like I'm the only one who prefers <code>π / 2 + n * π</code>. My reason: this way the period is separate from the \"base value\".</p>\n</blockquote>\n<p>That's a good reason. It suggests the lemmas be written in one style but an adequate ‘iff‘ stuff allows to rewrite them as desired.</p>",
        "id": 417062477,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705820342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/2.20*.20n.20*.20.CF.80.20vs.20n.20*.20.282.20*.20.CF.80.29/near/417062332\">said</a>:</p>\n<blockquote>\n<p>It looks like I'm the only one who prefers <code>π / 2 + n * π</code>. My reason: this way the period is separate from the \"base value\".</p>\n</blockquote>\n<p>This reasoning caused me to change my vote.</p>",
        "id": 417062919,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705820753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/2.20*.20n.20*.20.CF.80.20vs.20n.20*.20.282.20*.20.CF.80.29/near/417062919\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/2.20*.20n.20*.20.CF.80.20vs.20n.20*.20.282.20*.20.CF.80.29/near/417062332\">said</a>:</p>\n<blockquote>\n<p>It looks like I'm the only one who prefers <code>π / 2 + n * π</code>. My reason: this way the period is separate from the \"base value\".</p>\n</blockquote>\n<p>This reasoning caused me to change my vote.</p>\n</blockquote>\n<p>I changed my vote too; I'm trying to define the complex arctangent using the log definition and the \"n * period + offset\" formulation is slightly easier with the algebraic manipulation</p>",
        "id": 417070991,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705829147
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Complex.Log</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Complex</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Real</span>\n\n<span class=\"sd\">/-- The complex arctangent, defined through the complex logarithm. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">arctan</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"o\">((</span><span class=\"n\">I</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 417072323,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705830503
    },
    {
        "content": "<p>I've defined the complex arctangent at <a href=\"https://github.com/leanprover-community/mathlib4/pull/9889\">#9889</a></p>",
        "id": 417106577,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1705859664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/2.20*.20n.20*.20.CF.80.20vs.20n.20*.20.282.20*.20.CF.80.29/near/417026066\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> How would you spell <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.sin_eq_sin_iff#doc\">docs#Complex.sin_eq_sin_iff</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.cos_eq_zero_iff%3F#doc\">docs#Complex.cos_eq_zero_iff?</a></p>\n</blockquote>\n<p><code>x ≡ y |PMOD (2 * π)] ∨ x + y ≡ π [PMOD (2 * π)]</code></p>",
        "id": 417260489,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705938953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/2.20*.20n.20*.20.CF.80.20vs.20n.20*.20.282.20*.20.CF.80.29/near/417062332\">said</a>:</p>\n<blockquote>\n<p>It looks like I'm the only one who prefers <code>π / 2 + n * π</code>. My reason: this way the period is separate from the \"base value\".</p>\n</blockquote>\n<p>I would say <code>x ≡ π / 2 [PMOD π]</code> there. Then you can avoid arguing about spelling by adding more <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommGroup.ModEq#doc\">docs#AddCommGroup.ModEq</a> API instead.</p>",
        "id": 417260914,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705939040
    },
    {
        "content": "<p>This is a nice way to spell it.</p>",
        "id": 417261102,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705939068
    },
    {
        "content": "<p>For context, <code>AddCommGroup.ModEq</code> was added while <span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> wanted to port the preliminary material for zeta function and it made it just about before the port reached its file. As such, it is pretty new and there are probably many potential use cases in mathlib that we haven't exploited yet.</p>",
        "id": 417261785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705939194
    },
    {
        "content": "<p>BTW, why <code>ModEq</code> isn't defined by reusing <code>leftCoset</code>s?</p>",
        "id": 417262973,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705939482
    },
    {
        "content": "<p>The definition was rushed during the port to try and avoid causing too much issue in mathlib4</p>",
        "id": 417265766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705940212
    },
    {
        "content": "<p>So we defined it the fastest way, not necessarily the best way</p>",
        "id": 417265837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705940235
    },
    {
        "content": "<p>Note that the file containing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LeftCosetEquivalence#doc\">docs#LeftCosetEquivalence</a> is a mess and should probably be deleted entirely and the material spread across several (possibly existing) files.</p>",
        "id": 417270908,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705941651
    },
    {
        "content": "<p>Also note that it would be good for <code>a ≡ b [PMOD n]</code> to mean the right thing when <code>a b n : ℕ</code>. This is currently not the case.</p>",
        "id": 417271335,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705941795
    },
    {
        "content": "<p>... and to be an <code>addCon</code></p>",
        "id": 417271598,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705941862
    },
    {
        "content": "<p>It's just a matter of changing the definition from <code>∃ z : ℤ, b - a = z • p</code> to <code>∃ m n : ℕ, a + m • p = b + n • p</code>.</p>",
        "id": 417271630,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705941872
    },
    {
        "content": "<p>Then we could actually phase out <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.ModEq#doc\">docs#Nat.ModEq</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.ModEq#doc\">docs#Int.ModEq</a> entirely, which I think is nice.</p>",
        "id": 417271895,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705941954
    },
    {
        "content": "<p>... and then rename <code>PMOD</code> to <code>MOD</code>?</p>",
        "id": 417274235,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705942650
    },
    {
        "content": "<p>Yes of course! That was the plan all along <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 417280582,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705944575
    },
    {
        "content": "<p>I added <code>PMOD</code> answers to the polls</p>",
        "id": 417542660,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706050117
    },
    {
        "content": "<p>Another option is to use equalities in<code>Real.angle</code> or <code>addCircle π</code> (which could be given a name)</p>",
        "id": 417545266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706051429
    },
    {
        "content": "<p>We have lemmas about complex numbers as well.</p>",
        "id": 417545608,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706051627
    },
    {
        "content": "<p>Can you give an example?</p>",
        "id": 417546671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706052144
    },
    {
        "content": "<p>PMOD feels like it might be quite strange there</p>",
        "id": 417546739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706052179
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.cos_eq_cos_iff#doc\">docs#Complex.cos_eq_cos_iff</a></p>",
        "id": 417546810,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706052224
    },
    {
        "content": "<p>That raises another question; <code> 2 * ↑k * ↑Real.pi</code> or <code> ↑(2 * k * Real.pi)</code> or <code>↑k * ↑(2 * Real.pi)</code>or ...</p>",
        "id": 417547155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706052391
    },
    {
        "content": "<p>Coercion outside of multiplication makes it non-<code>simp</code>-normal form.</p>",
        "id": 417547268,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706052442
    },
    {
        "content": "<p>You could write it as <code>(2 * k * Real.pi) +ᵥ x</code> to fix that... (maybe that instance doesn't exist, but it probably should)</p>",
        "id": 417547499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706052567
    },
    {
        "content": "<p>... and it should simplify to <code>↑a + b</code> as we do it for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=nsmul_eq_mul#doc\">docs#nsmul_eq_mul</a></p>",
        "id": 417555655,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706057441
    },
    {
        "content": "<p>What I like about <code>PMOD</code> is that we can have dot-notation API about it.</p>",
        "id": 417556066,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706057702
    },
    {
        "content": "<p>What's the PMOD spelling of that lemma?</p>",
        "id": 417558316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706058948
    },
    {
        "content": "<p><code>x ≡ y [PMOD 2 * π] ∨ x ≡ -y [PMOD 2 * π]</code></p>",
        "id": 417579975,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706075595
    }
]