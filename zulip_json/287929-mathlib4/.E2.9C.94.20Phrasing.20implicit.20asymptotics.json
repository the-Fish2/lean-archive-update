[
    {
        "content": "<p>How do I write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">⌊</mo><msup><mi>c</mi><mi>d</mi></msup><mo fence=\"true\">⌋</mo></mrow><mo>=</mo><msup><mrow><mo fence=\"true\">(</mo><mi>c</mi><mo>+</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo fence=\"true\">)</mo></mrow><mi>d</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\left\\lfloor c^d\\right\\rfloor = \\left(c + o(1)\\right)^d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.35em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">⌊</span></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">⌋</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.239em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.989em;\"><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span></span></span></span>, for say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>=</mo><mn>1.5</mn></mrow><annotation encoding=\"application/x-tex\">c = 1.5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1.5</span></span></span></span>? AFAIK Lean only allows me to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x) = O(g(x))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span></span></span></span>...</p>",
        "id": 424857495,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709641610
    },
    {
        "content": "<p>In particular a way to avoid \"just take log and isolate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>o</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">o(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>\" would be nicer...</p>",
        "id": 424862595,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709643320
    },
    {
        "content": "<p>Maybe I can write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>o</mi><mi>d</mi></msub><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>∧</mo><mi mathvariant=\"normal\">∀</mi><mi>d</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">⌊</mo><msup><mi>c</mi><mi>d</mi></msup><mo stretchy=\"false\">⌋</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>c</mi><mo>+</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mi>d</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\exists f(d), f(d) = o_d(1) \\land \\forall d, \\lfloor c^d \\rfloor = (c + f(d))^d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">o</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span></span></span></span>...</p>",
        "id": 424865235,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709644100
    },
    {
        "content": "<p>This sounds like something <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> would know</p>",
        "id": 424867753,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709644922
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/zQ72--mzmqfOKpBPcRt8Yzzp/Screenshot-2024-03-05-at-13.23.11.png\">Screenshot-2024-03-05-at-13.23.11.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/zQ72--mzmqfOKpBPcRt8Yzzp/Screenshot-2024-03-05-at-13.23.11.png\" title=\"Screenshot-2024-03-05-at-13.23.11.png\"><img src=\"/user_uploads/3121/zQ72--mzmqfOKpBPcRt8Yzzp/Screenshot-2024-03-05-at-13.23.11.png\"></a></div><p>I wrote this right now (replacing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><msup><mi>c</mi><mi>d</mi></msup><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor c^d \\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mclose\">⌋</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>c</mi><mi>d</mi></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">c^d + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9324em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>) but I can't find a way to prove it without just saying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>d</mi></msub><mo stretchy=\"false\">(</mo><msup><mi>c</mi><mi>d</mi></msup><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">f(d) = \\log_d(c^d + 1) - c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.242em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 424868282,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709645089
    },
    {
        "content": "<p>Oops, that statement is wrong, since you need d &gt;= 1 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 424883460,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709649549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Phrasing.20implicit.20asymptotics/near/424868282\">said</a>:</p>\n<blockquote>\n<p>I can't find a way to prove it without just saying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>d</mi></msub><mo stretchy=\"false\">(</mo><msup><mi>c</mi><mi>d</mi></msup><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">f(d) = \\log_d(c^d + 1) - c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.242em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Yes, but that's fine, right? The question is not how you prove it but how you use it</p>",
        "id": 424893141,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709652077
    },
    {
        "content": "<p>That's true in this case (and in my real use case), but I was wondering if <del>there's a better way to write it</del> the way I suggested is the best way to write it. I guess I answered my own question and suffices for now</p>",
        "id": 424893532,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709652183
    },
    {
        "content": "<p>Actually, I think you're missing some more general principles about asymptotics, powers and little o that you could combine to prove your statement, but I'm not sure how to state them right now.</p>",
        "id": 424899556,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709653851
    },
    {
        "content": "<p>I was just going to ask a question, don't leave yet (xd)</p>",
        "id": 424899636,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709653877
    },
    {
        "content": "<p>Sorry, I gotta go crochet!</p>",
        "id": 424899753,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709653914
    },
    {
        "content": "<p>(For anyone) I spent a bunch of time proving a wrong statement the past hour, so I'm back to the start. I'm struggling to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(Optional <code>1 ≤ d → </code> for the non-negative requirement)<br>\nany ideas?</p>",
        "id": 424899831,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709653927
    },
    {
        "content": "<p>Not true for <code>c = 1</code></p>",
        "id": 424899977,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709653976
    },
    {
        "content": "<p>I'm missing the 1 \\leq d again, but if I add that it should be true?</p>",
        "id": 424900077,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709654013
    },
    {
        "content": "<p>I don't see how you're going to get <code>2 = (1 + f d) ^ d</code> for all <code>d</code></p>",
        "id": 424900247,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709654057
    },
    {
        "content": "<p>Oh sorry, I misread, you are going to get that</p>",
        "id": 424900319,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709654081
    },
    {
        "content": "<p>Well take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(1) = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msqrt><mn>2</mn></msqrt><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(2) = \\sqrt{2} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, etc</p>",
        "id": 424900333,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709654083
    },
    {
        "content": "<p>I have the proof for this =&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mrow><mo fence=\"true\">(</mo><mfrac><mn>1</mn><mi>d</mi></mfrac><mo fence=\"true\">)</mo></mrow><mo>=</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(d) = O\\left(\\frac{1}{d}\\right) = o(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.35em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> already (which is the wrong statement I tried to prove), so this is the missing piece</p>",
        "id": 424900698,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709654171
    },
    {
        "content": "<p>Actually even if I drop the nonnegativity requirement, I can't think of a nice proof :/ And just to confirm, it's stated correctly above in Lean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"k\">then</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n    <span class=\"n\">intro</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">dite_true</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Classical.choose_spec</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n    <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.pos_iff_ne_zero.mp</span> <span class=\"n\">hd</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_neg_self</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">rpow_mul_natCast</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">div_mul_cancel</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.cast_ne_zero.mpr</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.pos_iff_ne_zero.mp</span> <span class=\"n\">hd</span><span class=\"o\">),</span>\n      <span class=\"n\">rpow_one</span><span class=\"o\">]</span>\n    <span class=\"n\">positivity</span>\n</code></pre></div>\n<p>But the <code>^ (1 / (d : \\R))</code> part is :/</p>",
        "id": 424919542,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709659064
    },
    {
        "content": "<p>(The <code>choose</code> is to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> by every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span>)</p>",
        "id": 424919689,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709659108
    },
    {
        "content": "<p>I worked it out on digital paper first, which turns out to be easier than I thought. Here's the outline</p>\n<p><a href=\"/user_uploads/3121/OLoF8r1TGOVZ_fpZUVd0c-oi/Screenshot-2024-03-05-at-19.31.38.png\">Screenshot-2024-03-05-at-19.31.38.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OLoF8r1TGOVZ_fpZUVd0c-oi/Screenshot-2024-03-05-at-19.31.38.png\" title=\"Screenshot-2024-03-05-at-19.31.38.png\"><img src=\"/user_uploads/3121/OLoF8r1TGOVZ_fpZUVd0c-oi/Screenshot-2024-03-05-at-19.31.38.png\"></a></div><p>Errata: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>f</mi><mo>=</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(d) = o(1) \\implies f = o(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 424942884,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709667143
    },
    {
        "content": "<p>The first one I prove by just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>c</mi><mi>d</mi></msup><mo>≤</mo><msup><mi>c</mi><mi>d</mi></msup><mo>+</mo><mn>1</mn><mo>≤</mo><msup><mi>c</mi><mi>d</mi></msup><mo>+</mo><mi>d</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>c</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>d</mi></msup></mrow><annotation encoding=\"application/x-tex\">c^d \\leq c^d + 1 \\leq c^d + d \\leq (c + 1)^d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9851em;vertical-align:-0.136em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9324em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9324em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 424943352,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709667308
    },
    {
        "content": "<p>The second one I proved above, but yeah note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mfrac><mn>1</mn><mi>d</mi></mfrac><mo>=</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(d) \\leq \\frac{1}{d} = o(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 424943419,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709667326
    },
    {
        "content": "<p>Proof without any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> th root stuff! yay...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.SpecificFunctions.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Continuity</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Real</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span> <span class=\"n\">Asymptotics</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> TODO: Generalise -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_add_mul_self_le_pow_one_add</span>\n    <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">ha'</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">ha</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel'</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)],</span>\n      <span class=\"n\">mul_pow</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">mul_div</span><span class=\"o\">]</span>\n      <span class=\"n\">gcongr</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span> <span class=\"n\">ha'</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_self_pow</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_eq_zero_of_lt</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">gcongr</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">rpow_nat_cast</span><span class=\"o\">]</span>\n      <span class=\"n\">refine</span> <span class=\"n\">one_add_mul_self_le_rpow_one_add</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.one_le_cast.mpr</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hc</span>\n    <span class=\"n\">subst</span> <span class=\"n\">hc</span>\n    <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux_part1</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"kd\">by</span>\n    <span class=\"n\">use</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"k\">then</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">d</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">zero_apply</span><span class=\"o\">]</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">dite_true</span><span class=\"o\">,</span> <span class=\"n\">dite_false</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose_spec</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">dite_true</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose_spec</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n  <span class=\"n\">intro</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_left</span> <span class=\"o\">(</span><span class=\"n\">Nat.one_le_cast.mpr</span> <span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">convert</span> <span class=\"n\">pow_add_mul_self_le_pow_one_add</span> <span class=\"n\">d</span> <span class=\"n\">hc</span> <span class=\"n\">zero_le_one</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">intermediate_value_Icc</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">continuousOn_pow</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hf₁</span><span class=\"o\">,</span> <span class=\"n\">hf₂</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">mem_Icc.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩)</span>\n  <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">sub_nonneg</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mem_Icc.mp</span> <span class=\"n\">hf₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n  <span class=\"bp\">·</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"n\">hf₂</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">add_sub_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel'</span><span class=\"o\">,</span> <span class=\"n\">hf₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux_part2</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">atTop</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">hf₁</span><span class=\"o\">,</span> <span class=\"n\">hf₂</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">{</span><span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hf₂</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">div_mul_eq_div_div</span><span class=\"o\">,</span> <span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"n\">mul_one_div_cancel</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)]</span>\n    <span class=\"n\">convert</span> <span class=\"n\">pow_add_mul_self_le_pow_one_add</span> <span class=\"n\">d</span> <span class=\"n\">hc</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one_div_cancel</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">norm_num</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">atTop</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"bp\">‖</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">‖</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">eventually_atTop</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">this</span> <span class=\"n\">hd</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_eq_self.mpr</span> <span class=\"o\">(</span><span class=\"n\">hf₁</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">abs_eq_self.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)]</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">this</span>\n    <span class=\"n\">gcongr</span>\n\n  <span class=\"n\">refine</span> <span class=\"n\">IsBigO.trans_isLittleO</span> <span class=\"o\">(</span><span class=\"n\">IsBigO.of_bound'</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">one_def</span><span class=\"o\">,</span> <span class=\"n\">isLittleO_iff</span><span class=\"o\">,</span> <span class=\"n\">eventually_atTop</span><span class=\"o\">,</span> <span class=\"n\">norm_div</span><span class=\"o\">,</span> <span class=\"n\">norm_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n    <span class=\"n\">IsROrC.norm_natCast</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">hc</span>\n  <span class=\"n\">use</span> <span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"bp\">⌈</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"bp\">⌉₊</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">one_div_le</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.cast_pos.mpr</span> <span class=\"bp\">$</span> <span class=\"n\">le_of_max_le_left</span> <span class=\"n\">hb</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.ceil_le.mp</span> <span class=\"bp\">$</span> <span class=\"n\">le_of_max_le_right</span> <span class=\"n\">hb</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">atTop</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">aux_part1</span> <span class=\"n\">c</span> <span class=\"n\">hc</span>\n  <span class=\"n\">use</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">aux_part2</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hf.right</span>\n</code></pre></div>",
        "id": 424997334,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709694497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> has marked this topic as resolved.</p>",
        "id": 425602499,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709929866
    }
]