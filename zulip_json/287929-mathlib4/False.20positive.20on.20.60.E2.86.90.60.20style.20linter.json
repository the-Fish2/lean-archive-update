[
    {
        "content": "<p>Currently the lack of space before the backtick in \"\\`←\\`\"is activating the style linter: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10991#discussion_r1503341170\">https://github.com/leanprover-community/mathlib4/pull/10991#discussion_r1503341170</a></p>",
        "id": 423489181,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708984013
    },
    {
        "content": "<p>(in <code> `←` </code>, you mean?)</p>",
        "id": 423489934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708984322
    },
    {
        "content": "<p>Yes! I'm not quite sure why Zulip allows backslashes to escape backticks, but doesn't remove the backslashes... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 423490186,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708984418
    },
    {
        "content": "<p>Oh, I think I can fix this.</p>",
        "id": 423492630,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708985418
    },
    {
        "content": "<p>When exactly is <code>annotate_comments</code> in <code>lint-style.py</code> meant to annotate a line as being in a comment? After all, part of a line can be a comment (<code>def x := by -- note</code>), and this isn't currently captured; but if any part of the line involves <code>/-</code> (and it does not include <code>-/</code>), we consider the line to be in a comment. Is the heuristic \"the line should considered to be in a comment iff the whole line is in a comment\"?</p>\n<p>The issue with this specific example is that we have <code>/- ... -/</code> in a code block in above, and the presence of <code>-/</code> sets <code>in_comment</code> to <code>False</code>, leading to the rest of the comment not being considered <code>in_comment</code> (given the current logic).</p>",
        "id": 423509915,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708993853
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10994\">#10994</a> attempts to improve the heuristics a bit and handle nested comments more reliably, without introducing character-by-character parsing. I'd like to test it a bit, though. We don't have tests for linters, right? Or do we?</p>",
        "id": 423524211,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709003201
    }
]