[
    {
        "content": "<p>It feels like this should be very easy to prove, but I am stuck.  Not sure how to unpack the various definitions.  The conversion is happening via the fact that <code>Fin n</code> is a commutative ring, so one conceptual proof is induction on the presentation of <code>ℤ</code>, but I don't know how to express that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.UInt</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">UInt64.toInt_intCast</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">64</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 419295881,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706808012
    },
    {
        "content": "<p>the <code>Nat</code> version is easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">UInt64.toInt_intCast</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">64</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.coe_ofNat_eq_mod</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and I assume you need it for this. Some way of doing this is just saying that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mi>N</mi><mo>∗</mo><msup><mn>2</mn><mn>6</mn></msup><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">n + N * 2^64</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"mord\">4</span></span></span></span> is positive for some large enough $N$ and then use the natural number result I guess? but not sure how much API is there</p>",
        "id": 419297828,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706808601
    },
    {
        "content": "<p>I already have the Nat version.  Now I need the Int version.</p>",
        "id": 419297922,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706808621
    },
    {
        "content": "<p>(I need to do a bit of signed 128-bit arithmetic, and this is a necessary lemma for proving things about that.)</p>",
        "id": 419298067,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706808667
    },
    {
        "content": "<p>True, adding a big multiple should do it.  Thanks!</p>",
        "id": 419298242,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706808718
    },
    {
        "content": "<p>Though the APIs are super different: the Nat one is more native since Fin wraps Nat, and doesn’t use general rings.</p>",
        "id": 419299701,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706809156
    },
    {
        "content": "<p>Resolved: rewriting as Nat or -Nat makes it straightforward, via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Int.induction_overlap</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hi</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">lo</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 419415381,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706865105
    },
    {
        "content": "<p>Arguably that should replace <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.eq_nat_or_neg#doc\">docs#Int.eq_nat_or_neg</a> (swapping <code>obtain ⟨n, rfl, rfl⟩ := z.eq_nat_or_neg</code> for <code>induction x using that_lemma</code>)</p>",
        "id": 419634597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706987924
    }
]