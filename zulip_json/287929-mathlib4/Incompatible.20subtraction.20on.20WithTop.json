[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithTop.linearOrderedAddCommGroupWithTop#doc\">docs#WithTop.linearOrderedAddCommGroupWithTop</a> seems to be incompatible with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithTop.instSub#doc\">docs#WithTop.instSub</a>, which is quite confusing. Is this intentional, or should it be resolved somehow? How?<br>\nExample:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Group</span><span class=\"bp\">.</span><span class=\"n\">WithTop</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Sub</span><span class=\"bp\">.</span><span class=\"n\">WithTop</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Algebra</span><span class=\"bp\">.</span><span class=\"n\">Order</span><span class=\"bp\">.</span><span class=\"n\">Group</span><span class=\"bp\">.</span><span class=\"n\">Int</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">Sub</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⊤</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">WithTop</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">Sub</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">LinearOrderedAddCommGroupWithTop</span><span class=\"bp\">.</span><span class=\"n\">toSub</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⊤</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">WithTop</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 443685822,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1717997200
    },
    {
        "content": "<p>That seems bad. Afaict, it is not intentional.</p>",
        "id": 443688311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717998894
    },
    {
        "content": "<p>I think the <code>instSub</code> should be changed into whatever the other instance needs.</p>",
        "id": 443688396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717998958
    },
    {
        "content": "<p>I think <code>instSub</code> is intended mainly for the case that <code>α</code> is canonically ordered, perhaps that can just be added as an requirement to it?</p>",
        "id": 443688643,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1717999104
    },
    {
        "content": "<p>Hmm, so you are saying that higher up in the hierarchy we need two genuinely different subtractions?</p>",
        "id": 443689233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717999420
    },
    {
        "content": "<p>I'm not sure if it's actually used, but that seems to be the intention, yeah</p>",
        "id": 443689329,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1717999464
    },
    {
        "content": "<p>Then I think <code>instSub</code> should become a defn, with a warning about this difference in its docstring</p>",
        "id": 443689338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717999469
    },
    {
        "content": "<p>Both instances seem suspicious to me. If I were to use <code>WithTop (WithBot α)</code> I would expect <code>-⊤ = ⊥</code>. Doesn't the existence of a <code>LinearOrderedAddCommGroupWithTop</code> make this impossible? I'm not sure how much of a headache refactoring this would cause for valuations</p>",
        "id": 443692033,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1718000982
    },
    {
        "content": "<p>Good point, so we should make that instance a <code>def</code> as well. The whole API for valuations shouldn't need that instance. And we can use the general-instance-that-should-be-a-def to declare instances for special cases.</p>",
        "id": 443692678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718001299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Incompatible.20subtraction.20on.20WithTop/near/443692033\">said</a>:</p>\n<blockquote>\n<p>Both instances seem suspicious to me. If I were to use <code>WithTop (WithBot α)</code> I would expect <code>-⊤ = ⊥</code>. Doesn't the existence of a <code>LinearOrderedAddCommGroupWithTop</code> make this impossible? I'm not sure how much of a headache refactoring this would cause for valuations</p>\n</blockquote>\n<p>I'm not sure if this is problematic, as <code>WithBot α</code> isn't <code>LinearOrderedAddCommGroup</code> so this instance wouldn't apply.</p>",
        "id": 443692968,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718001437
    },
    {
        "content": "<p>Oh, that's a fair point. I guess I'm still a little worried about having lemma statements floating around that involve two types of subtraction on the same type? It could get confusing to read. But maybe it's fine</p>",
        "id": 443693322,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1718001609
    },
    {
        "content": "<p>Do we need a WithTopBot?</p>",
        "id": 443700190,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718004428
    },
    {
        "content": "<p>I agree both instances are weird:</p>\n<ul>\n<li>In <code>LinearOrderedAddCommGroupWithTop</code>, we have <code>-⊤ : = ⊤</code>, but if would seem more natural to me to make it <code>0</code>, because it's another natural junk value, which has the advantage of being smaller. </li>\n<li>In <code>WithTop.instSub</code>, if it happened that there was a bottom value then it would be more natural to set <code>-⊤</code> equal to this bottom value.</li>\n</ul>\n<p>Looking at the uses in Mathlib, I have the impression that the one in <code>LinearOrderedAddCommGroupWithTop</code> is maybe more natural, as it corresponds to the additivization of the usual <code>1/0 = 0</code> convention. So I also think that <code>WithTop.instSub</code> should become a definition to avoid the conflict (because we really want <code>WithTop ℤ</code> to be usable as a <code>LinearOrderedAddCommGroupWithTop</code> for valuation stuff).</p>",
        "id": 443703681,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1718005663
    },
    {
        "content": "<p>Note that for <code>EReal</code> negation is defined by hand, probably to avoid this mess.</p>",
        "id": 443703864,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1718005724
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithTop.instNeg#doc\">docs#WithTop.instNeg</a>, it agrees with the <code>LinearOrderedAddCommGroupWithTop</code></p>",
        "id": 443704003,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718005773
    },
    {
        "content": "<p>Since both instances feel a bit unnatural, one option is to scope them both.</p>",
        "id": 443705579,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718006324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Incompatible.20subtraction.20on.20WithTop/near/443700190\">said</a>:</p>\n<blockquote>\n<p>Do we need a WithTopBot?</p>\n</blockquote>\n<p>I would be happy if we had that. We could even scope instances that behave like <code>WithTop (WithBot α)</code> vs <code>WithBot (WithTop α)</code>?</p>",
        "id": 443708918,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1718007378
    },
    {
        "content": "<p>It would be good if you un <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> ed by telling us what you want to do with the extended integers</p>",
        "id": 443709087,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718007439
    },
    {
        "content": "<p>I'm working with valuations, I want to construct an <code>AddValuation K (WithTop ℤ)</code> given <code>(p : F) (hp : Prime p) [IsFractionRing F K]</code>. I needed to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">WithTop</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">neg_eq_zero_sub</span><span class=\"w\"> </span><span class=\"bp\">..</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"c1\">-- introduces `WithTop.instSub = SubNegMonoid.toSub`, which is false.</span>\n</code></pre></div>\n<p>(I know how to prove this, <code>rfl</code> works, but in my use case instead of <code>0</code> there's a complicated expression and I want to change the goal to proving it's equal to <code>0</code>)</p>",
        "id": 443711152,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718008083
    },
    {
        "content": "<p>I'm trying to remove the instance <code>WithTop.instSub</code> now.</p>",
        "id": 443712254,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1718008412
    },
    {
        "content": "<p>Shouldn't <code>WithTop.sub</code> really be <code>WithTop.hsub</code>?<br>\n<code>def WithTop.hsub [Sub α] : WithTop α → α → WithTop α</code></p>",
        "id": 443786289,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1718030395
    },
    {
        "content": "<p>I think if the subtraction is order preserving, there shouldn't be any problems? (Although, I fully expect an edge case which will prove this wrong <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> )</p>",
        "id": 443787558,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1718030761
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 443837558,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1718044223
    },
    {
        "content": "<p>(sorry!)</p>",
        "id": 443837715,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1718044275
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13715\">#13715</a>. I keep the two instances, but make sure that they apply in disjoint situations by requiring a bottom element instead of a zero for the first instance.</p>",
        "id": 443920025,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1718084984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> Thanks for doing this! <img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"></p>",
        "id": 443936776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718091847
    },
    {
        "content": "<p>I need to prove some lemmas about <code>LinearOrderedAddCommGroupWithTop</code>, and one of them is <code>top_ne_zero</code>, but it collides with existing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=top_ne_zero#doc\">docs#top_ne_zero</a> when unscoped, and <code>LinearOrderedAddCommGroupWithTop.top_ne_zero</code> is really long. What's a good alternative name?</p>",
        "id": 443972174,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1718103209
    }
]