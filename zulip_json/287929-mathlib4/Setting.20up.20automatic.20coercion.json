[
    {
        "content": "<p>I would like a <code>DirichletCharacter R n</code> (where <code>n &gt; 1</code>) to be coerced to an <code>Nat.ArithmeticFunction R</code> automatically where appropriate. I was trying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.DirichletCharacter.Basic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">coe</span><span class=\"kd\">]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">DirichletCharacter.toArithmeticFunction</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">DirichletCharacter</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.ArithmeticFunction</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n      <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">χ.toFun</span> <span class=\"bp\">∘</span> <span class=\"n\">Nat.cast</span>\n      <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">DirichletCharacter</span> <span class=\"n\">ℂ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Nat.ArithmeticFunction.LSeries</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">Nat.ArithmeticFunction</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n<span class=\"c1\">-- type mismatch</span>\n<span class=\"c1\">--   χ</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   DirichletCharacter ℂ n : Type</span>\n<span class=\"c1\">-- but is expected to have type</span>\n <span class=\"c1\">--  Nat.ArithmeticFunction ℂ : Type</span>\n</code></pre></div>\n<p>Trying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">DirichletCharacter</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n      <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">DirichletCharacter.toArithmeticFunction</span>\n</code></pre></div>\n<p>gives an error \"cannot find synthesization order ... all remaining arguments have metavariables:<br>\n  Fact (1 &lt; ?n)\", which I don't really know how to fix: if presented with an object of type <code>DirichletCharacter R n</code>, it should be clear what <code>R</code> and <code>n</code> must be. Adding random <code>outParam</code>s doesn't seem to help.</p>\n<p>Perhaps somebody more knowledgeable of how coercions work can give me a hint?</p>",
        "id": 411614980,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704646933
    },
    {
        "content": "<p>Use <code>CoeHead</code> in place of <code>Coe</code>, this is a coercion that indeed <code>n</code> is determined for  if we go left to right, but not right to left</p>",
        "id": 411615256,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704647152
    },
    {
        "content": "<p>Thanks, this seems to work!</p>",
        "id": 411617647,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704648864
    },
    {
        "content": "<p>BTW, is there documentation somewhere that explains how it works?</p>",
        "id": 411617931,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704649052
    },
    {
        "content": "<p>Documentation strings of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeHead#doc\">docs#CoeHead</a> etc</p>",
        "id": 411626922,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704656270
    },
    {
        "content": "<p>Also, the module docstring of that file (scroll up)</p>",
        "id": 411626977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704656293
    },
    {
        "content": "<p>So, for future reference: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Coe.html\">Init.Coe</a></p>",
        "id": 411627086,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704656416
    },
    {
        "content": "<p>And I think re-reading that now maybe <code>CoeOut</code> is the correct one in your case! Sorry for the hasty response before <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 411628120,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704657507
    }
]