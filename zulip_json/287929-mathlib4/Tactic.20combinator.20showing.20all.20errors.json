[
    {
        "content": "<p>If you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>then the error message you get comes from <code>aesop</code>. If you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">aesop</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>then you get the error message coming from <code>rfl</code>. Do we have a combinator that would show both error messages (with a clear indication that it is a list of error messages coming from trying various things, not a single error message)?</p>",
        "id": 426393489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710351213
    },
    {
        "content": "<p>Could you just copy the <code>first</code> combinator with <code>logError</code> instead of <code>throwError</code>?</p>",
        "id": 426409033,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710356837
    },
    {
        "content": "<p>Ah, nevermind, you need it to accumulate the errors but only throw the list of them if the last tactic doesn't succeed.</p>",
        "id": 426409640,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710357056
    },
    {
        "content": "<p>Here's a possibility:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">orElse'</span> <span class=\"o\">(</span><span class=\"n\">xref</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span> <span class=\"n\">withoutRecover</span> <span class=\"n\">x</span> <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">try</span> <span class=\"n\">y</span> <span class=\"o\">()</span> <span class=\"n\">catch</span> <span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">recover</span> <span class=\"k\">then</span>\n        <span class=\"n\">logErrorAt</span> <span class=\"n\">xref</span> <span class=\"n\">e.toMessageData</span>\n      <span class=\"n\">throw</span> <span class=\"n\">e'</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">firstLoop</span> <span class=\"o\">(</span><span class=\"n\">tacs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">tacs.size</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"n\">tacs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tacs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n    <span class=\"n\">orElse'</span> <span class=\"n\">tac</span> <span class=\"o\">(</span><span class=\"n\">evalTactic</span> <span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">firstLoop</span> <span class=\"n\">tacs</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"first' \"</span> <span class=\"n\">withPosition</span><span class=\"o\">((</span><span class=\"n\">ppDedent</span><span class=\"o\">(</span><span class=\"n\">ppLine</span><span class=\"o\">)</span> <span class=\"n\">colGe</span> <span class=\"s2\">\"| \"</span> <span class=\"n\">tacticSeq</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span>\n  <span class=\"k\">let</span> <span class=\"n\">tacs</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getArgs</span>\n  <span class=\"k\">if</span> <span class=\"n\">tacs.isEmpty</span> <span class=\"k\">then</span> <span class=\"n\">throwUnsupportedSyntax</span>\n  <span class=\"n\">firstLoop</span> <span class=\"n\">tacs</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">first'</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 426412530,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710358191
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/3G1sTWEUuo2gvFjjamloqz_z/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3G1sTWEUuo2gvFjjamloqz_z/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/3G1sTWEUuo2gvFjjamloqz_z/image.png\"></a></div>",
        "id": 426412572,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710358203
    },
    {
        "content": "<p>I could see <code>first</code> working like this in general.</p>",
        "id": 426412696,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710358241
    },
    {
        "content": "<p>Same with <code>&lt;|&gt;</code></p>",
        "id": 426412731,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710358257
    },
    {
        "content": "<p>Yes please! I've been wanting this</p>",
        "id": 426413264,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710358467
    },
    {
        "content": "<p>Is there a reason that something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.anyM#doc\">docs#List.anyM</a> doesn't work in place of your <code>firstLoop</code>?</p>",
        "id": 426415693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710359415
    },
    {
        "content": "<p>I didn't think about it much — I copied the code from the implementation of <code>first</code></p>",
        "id": 426416625,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710359795
    },
    {
        "content": "<p>Do you have any idea how to eliminate <code>xref</code> from <code>orElse'</code>? That would help with making it possible to be the main implementation of <code>&lt;|&gt;</code></p>",
        "id": 426416682,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710359821
    },
    {
        "content": "<p>Without <code>xref</code>, the error for <code>x</code> becomes reported as an error for all of <code>&lt;|&gt;</code></p>",
        "id": 426416716,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710359835
    },
    {
        "content": "<p>I didn't see a way around the <code>xref</code> either, and my implementation was similar.</p>",
        "id": 426423454,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710362637
    },
    {
        "content": "<p>What happens if this <code>first</code> is hidden in some other tactic, like <code>decreasing_tactic</code>? I assume the error messages will just all be shown, but without much context? In that case it might be nicer to be a bit verbose and say “Tactic <code>rlf</code> failed with: … Tactic <code>simp</code> failed with: …”? Not sure if it's a problem to pretty print the actual tactic here, I guess it could be too large?</p>",
        "id": 426433606,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710367205
    },
    {
        "content": "<p>Surely the <code>decreasing_tactic</code> should have its own error message anyway, right?</p>",
        "id": 426433736,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710367265
    },
    {
        "content": "<p>Yeah, but it essentially says “none of the tactics solved it” also swallowing the error messages.</p>\n<p>Although that's actually using <code>macro_rules</code> not <code>first</code> to try various tactics. But same problem: you don't get to see the error messages from all but one of them. (Not sure if you really should see all of them in this case.)</p>",
        "id": 426434252,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710367496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20combinator.20showing.20all.20errors/near/426416682\">said</a>:</p>\n<blockquote>\n<p>Do you have any idea how to eliminate <code>xref</code> from <code>orElse'</code>? That would help with making it possible to be the main implementation of <code>&lt;|&gt;</code></p>\n</blockquote>\n<p>Can't you use <code>e.getRef</code> instead of <code>xref</code>?</p>",
        "id": 426440061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710370459
    },
    {
        "content": "<p>There's also simply <code>logException e</code> (which essentially just wraps <code>logErrorAt e.getRef e.toMessageData</code> in the non-internal-error case)</p>",
        "id": 426441141,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710371081
    },
    {
        "content": "<p>I couldn't get <code>firstM</code> to work without making a primed version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">betterOrElse</span> <span class=\"o\">:</span> <span class=\"n\">OrElse</span> <span class=\"o\">(</span><span class=\"n\">TacticM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">orElse</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span> <span class=\"n\">withoutRecover</span> <span class=\"n\">x</span> <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">try</span> <span class=\"n\">y</span> <span class=\"o\">()</span> <span class=\"n\">catch</span> <span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">recover</span> <span class=\"k\">then</span>\n        <span class=\"n\">logException</span> <span class=\"n\">e</span>\n      <span class=\"n\">throw</span> <span class=\"n\">e'</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">betterAlternative</span> <span class=\"o\">:</span> <span class=\"n\">Alternative</span> <span class=\"n\">TacticM</span> <span class=\"n\">where</span>\n  <span class=\"n\">orElse</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">betterOrElse.orElse</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"n\">failure</span> <span class=\"o\">:=</span> <span class=\"n\">failure</span>\n\n<span class=\"sd\">/-- Like `firstM`, but without using `f a &lt;|&gt; failure` on `[a]`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">specialize</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.firstM'.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">firstM'</span> <span class=\"n\">f</span> <span class=\"n\">as</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"first' \"</span> <span class=\"n\">withPosition</span><span class=\"o\">((</span><span class=\"n\">ppDedent</span><span class=\"o\">(</span><span class=\"n\">ppLine</span><span class=\"o\">)</span> <span class=\"n\">colGe</span> <span class=\"s2\">\"| \"</span> <span class=\"n\">tacticSeq</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span>\n  <span class=\"k\">let</span> <span class=\"n\">tacs</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getArgs</span>\n  <span class=\"k\">if</span> <span class=\"n\">tacs.isEmpty</span> <span class=\"k\">then</span> <span class=\"n\">throwUnsupportedSyntax</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">List.firstM'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalTactic</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"n\">tacs.toList</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">first'</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 426442113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710371692
    },
    {
        "content": "<p>Hmm, this doesn't work with more than two <code>rfl</code>s</p>",
        "id": 426443354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710372528
    },
    {
        "content": "<p>On closer inspection, the original doesn't either, I think—the issue is that we <code>throw e'</code>, which gets caught (when appearing inside <code>y ()</code>) and reverts our <code>logErrorAt</code>. This is unless we happen to have <code>throw</code>n <code>e'</code> to the top level, in which case we get both the first error and the last error.</p>",
        "id": 426445763,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710374418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20combinator.20showing.20all.20errors/near/426433606\">said</a>:</p>\n<blockquote>\n<p>What happens if this <code>first</code> is hidden in some other tactic, like <code>decreasing_tactic</code>?</p>\n</blockquote>\n<p>I think there needs to be some protocol for knowing when tactics are \"interactive\". There's already some of that protocol in the form of the <code>recover</code> flag, but it doesn't seem to be capturing interactivity — it seems to be an orthogonal concept.</p>\n<p>\"Interactive\" mode might include</p>\n<ul>\n<li>having tactics generate time-consuming diagnostic messages on failure and</li>\n<li>logging errors even if they're being caught (like in the <code>&lt;|&gt;</code> and <code>first</code> modifications)</li>\n</ul>\n<p>Then tactics that run tactic scripts could go into non-interactive mode to prevent logging incidental errors.</p>",
        "id": 426453266,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710379129
    },
    {
        "content": "<p>Thanks Kyle! I should have been more specific and say that I’m not actually using <code>first</code>, I have a single user-facing tactic that tries several things. But at least I know there is nothing already existing, and I will probably be able to reuse some of your code. And I think that <code>first'</code> could be useful anyway.</p>",
        "id": 426454652,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710380299
    },
    {
        "content": "<p>No problem — you happened to ask a question in the realm of something I had been thinking about anyway: what sort of protocol do we need or want for tactics in \"interactive\" mode?</p>\n<p><code>first</code> is a good example of the phenomenon. Even though you wouldn't see <code>first</code> in a completed proof like this, it would be helpful to see these messages to help you come up with your completed proof.</p>",
        "id": 426454918,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710380569
    },
    {
        "content": "<p>By the way, even though you do not see the errors, with the \"unused tactic linter\", you can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">aesop</span> <span class=\"bp\">|</span> <span class=\"gr\">sorry</span>  <span class=\"c1\">-- &lt;--  add a sorry, so you know that the goal will be closed</span>\n\n<span class=\"c1\">-- and the unused tactic linter reports:</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">  'rfl' tactic does nothing [linter.unusedTactic]</span>\n<span class=\"cm\">  'aesop' tactic does nothing [linter.unusedTactic]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 426457592,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710382720
    },
    {
        "content": "<p>One of the things that could fix this particular issue would be a \"compound error\": if we could throw multiple errors at once in a single <code>throw</code>, we wouldn't have to manage the state carefully.</p>\n<p>Likewise, it would be nice if there were a  variant of <code>catch</code> which could catch (and bind) any generated messages—the gap between a control-flow-affecting <code>Exception</code> and a logged error can sometimes feel uncomfortably large.</p>\n<p>(Of course, an interactive mode would still be very useful in general—this isn't any argument against that. :) )</p>",
        "id": 426459802,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710384166
    },
    {
        "content": "<p>Though, the arguments of <code>.error</code> <em>technically</em> have enough structure for us to hack together \"compound errors\" anyway! So, just for fun, here's an extremely cursed thing you can do. :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Abuse `.compose` constructor to get a `MessageData` tree.</span>\n<span class=\"sd\">Propagate \"All failures:\" header to the top left; insert newlines between messages. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">composeMessages</span> <span class=\"o\">:</span> <span class=\"n\">MessageData</span> <span class=\"bp\">→</span> <span class=\"n\">MessageData</span> <span class=\"bp\">→</span> <span class=\"n\">MessageData</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">tagged</span> <span class=\"bp\">`</span><span class=\"n\">comp</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">tagged</span> <span class=\"bp\">`</span><span class=\"n\">comp</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">c₂</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">tagged</span> <span class=\"bp\">`</span><span class=\"n\">comp</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"n\">c₂</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">tagged</span> <span class=\"bp\">`</span><span class=\"n\">comp</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">c₂</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"n\">c₂</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">tagged</span> <span class=\"bp\">`</span><span class=\"n\">comp</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"All failures:</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"n\">c₁</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span> <span class=\"n\">c₂</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">_root_.Lean.Exception.append</span> <span class=\"o\">:</span> <span class=\"n\">Exception</span> <span class=\"bp\">→</span> <span class=\"n\">Exception</span> <span class=\"bp\">→</span> <span class=\"n\">Exception</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">ref</span> <span class=\"n\">msg</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">ref'</span> <span class=\"n\">msg'</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">.</span><span class=\"n\">error</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Use the source info from the rightmost node. This is a hack to get</span>\n<span class=\"cm\">    a red squiggle on each individual tactic instead of under the whole span. -/</span>\n    <span class=\"o\">(</span><span class=\"n\">Syntax.node</span> <span class=\"o\">(</span><span class=\"n\">SourceInfo.fromRef</span> <span class=\"n\">ref'</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">compoundError</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ref</span><span class=\"o\">,</span> <span class=\"n\">ref'</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">composeMessages</span> <span class=\"n\">msg</span> <span class=\"n\">msg'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"internal errors not yet implemented\"</span>\n\n<span class=\"sd\">/-- Log each error in a compound error individually, in order. -/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">logComposedException</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLog</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddMessageContext</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">MonadOptions</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"n\">IO</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Exception</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"o\">(</span><span class=\"n\">Syntax.node</span> <span class=\"n\">_</span> <span class=\"bp\">`</span><span class=\"n\">compoundError</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ref₁</span><span class=\"o\">,</span> <span class=\"n\">ref₂</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">tagged</span> <span class=\"bp\">`</span><span class=\"n\">comp</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"n\">msg₁</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">msg₂</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"o\">(</span><span class=\"n\">Syntax.node</span> <span class=\"n\">_</span> <span class=\"bp\">`</span><span class=\"n\">compoundError</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ref₁</span><span class=\"o\">,</span> <span class=\"n\">ref₂</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"n\">msg₁</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">msg₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">logComposedException</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">ref₁</span> <span class=\"n\">msg₁</span><span class=\"o\">)</span>\n    <span class=\"n\">logComposedException</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">ref₂</span> <span class=\"n\">msg₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">logException</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">orElse'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span> <span class=\"n\">withoutRecover</span> <span class=\"n\">x</span> <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">try</span> <span class=\"n\">y</span> <span class=\"o\">()</span> <span class=\"n\">catch</span> <span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"n\">e'</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">recover</span> <span class=\"k\">then</span>\n        <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"n\">e.append</span> <span class=\"n\">e'</span>\n      <span class=\"n\">logComposedException</span> <span class=\"n\">e'</span>\n      <span class=\"n\">throw</span> <span class=\"n\">e'</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">firstLoop</span> <span class=\"o\">(</span><span class=\"n\">tacs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">tacs.size</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"n\">tacs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tacs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">)[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n    <span class=\"n\">orElse'</span> <span class=\"o\">(</span><span class=\"n\">evalTactic</span> <span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">firstLoop</span> <span class=\"n\">tacs</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"first' \"</span> <span class=\"n\">withPosition</span><span class=\"o\">((</span><span class=\"n\">ppDedent</span><span class=\"o\">(</span><span class=\"n\">ppLine</span><span class=\"o\">)</span> <span class=\"n\">colGe</span> <span class=\"s2\">\"| \"</span> <span class=\"n\">tacticSeq</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span>\n  <span class=\"k\">let</span> <span class=\"n\">tacs</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getArgs</span>\n  <span class=\"k\">if</span> <span class=\"n\">tacs.isEmpty</span> <span class=\"k\">then</span> <span class=\"n\">throwUnsupportedSyntax</span>\n  <span class=\"n\">firstLoop</span> <span class=\"n\">tacs</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">first'</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 426461235,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710385338
    },
    {
        "content": "<p>The biggest \"cheat\" here is that we <em>log</em> all three errors, but the error we <em>throw</em> also renders as \"All failures: ...\", appears as a squiggle only on the last token, and lists all errors. For example, if we used <code>first | simp | dsimp | simp</code>, the errors would look like:</p>\n<blockquote>\n<p>Foo.lean:223:11<br>\nsimp made no progress</p>\n</blockquote>\n<blockquote>\n<p>Foo.lean:223:18<br>\ndsimp made no progress</p>\n</blockquote>\n<blockquote>\n<p>Foo.lean:223:26<br>\nsimp made no progress</p>\n</blockquote>\n<blockquote>\n<p>Foo.lean:223:26<br>\nAll failures:</p>\n<p>simp made no progress<br>\ndsimp made no progress<br>\nsimp made no progress</p>\n</blockquote>",
        "id": 426462013,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710385865
    }
]