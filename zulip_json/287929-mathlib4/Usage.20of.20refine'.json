[
    {
        "content": "<p>In a few recent PR's I've been asked to replace my usage of <code>refine'</code> by <code>refine</code>, as the former is more of a legacy usage. As <code>refine'</code> seems to be present in various files, is there an easy way for me to write some code that automatically replaces <code>refine'</code> by <code>refine</code> on various files and make a PR with this? I'm still working through the meta-programming book, so I'm not yet at the point that I can write this up myself, but I'm happy to learn! Otherwise, I'll circle back to this once I've worked through the meta-programming book!</p>",
        "id": 431233909,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712212395
    },
    {
        "content": "<p>Automatic <em>replacing</em> might be tricky, mostly due to the formatting of the output text.  Automatic <em>flagging</em> would be very easy with a dedicated linter.</p>",
        "id": 431246745,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712216856
    },
    {
        "content": "<p>Once you have the flags, you could probably easily write a script to do the replacements.</p>",
        "id": 431246898,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712216901
    },
    {
        "content": "<p>However, sometimes you will have to replace <code>_</code> by <code>?_</code> and this could be very tricky.</p>",
        "id": 431247009,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712216935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431247009\">said</a>:</p>\n<blockquote>\n<p>However, sometimes you will have to replace <code>_</code> by <code>?_</code> and this could be very tricky.</p>\n</blockquote>\n<p>Yes, exactly. The quick &amp; dirty way would be to try all possible combinations and continue as soon as the proof compiles, but I’m afraid I don’t know enough meta-programming (yet)</p>",
        "id": 431247304,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712217021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431246745\">said</a>:</p>\n<blockquote>\n<p>Automatic <em>replacing</em> might be tricky, mostly due to the formatting of the output text.  Automatic <em>flagging</em> would be very easy with a dedicated linter.</p>\n</blockquote>\n<p>Yes, but there could be very many usages, so I’m not sure what the point is, as long as there is no automatic way to replace them.</p>",
        "id": 431247540,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712217100
    },
    {
        "content": "<p>Do we still sometimes need to use <code>(_)</code>? This can be <em>very</em> tricky, but maybe <code>refine</code> is smarter now than during the port.</p>",
        "id": 431247752,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1712217164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431247540\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431246745\">said</a>:</p>\n<blockquote>\n<p>Automatic <em>replacing</em> might be tricky, mostly due to the formatting of the output text.  Automatic <em>flagging</em> would be very easy with a dedicated linter.</p>\n</blockquote>\n<p>Yes, but there could be very many usages, so I’m not sure what the point is, as long as there is no automatic way to replace them.</p>\n</blockquote>\n<p>Well, you would get a live warning informing you that <code>refine'</code> should be replaced by <code>refine</code>.  You could then collect all these warnings from CI and at least you would know the size of the problem and precise locations of the issues.</p>",
        "id": 431247876,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712217218
    },
    {
        "content": "<p>Overall, I think that developing a tool for \"generic refactoring\" would be very useful.  However, doing something ad hoc that would work with <code>refine'</code> and basically nothing else could be a fun learning project, but may not be worth the effort.  (This is my very personal opinion.)</p>",
        "id": 431248082,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712217297
    },
    {
        "content": "<p>Also, if you decide to do the replacement, then linting against usage of <code>refine'</code> would be a sustainable way of making sure that <code>refine'</code> will not be used, even after you are done with the refactoring.</p>",
        "id": 431248382,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712217413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431248382\">said</a>:</p>\n<blockquote>\n<p>Also, if you decide to do the replacement, then linting against usage of <code>refine'</code> would be a sustainable way of making sure that <code>refine'</code> will not be used, even after you are done with the refactoring.</p>\n</blockquote>\n<p>This is a good point of course. I think it should be possible to have a general refactoring tool, but I’ll have to postpone this until I learn enough meta-programming. Thanks for the suggestions!</p>",
        "id": 431248866,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712217590
    },
    {
        "content": "<p>I think that a general refactoring tool is \"the next milestone\" for development.  Right now, if you decide that you want to replace the order of two hypotheses to a function, it can be time-consuming to fix all the breakages.  Even having a tool that does this is a principled way would be amazing.</p>",
        "id": 431249388,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712217707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431248382\">said</a>:</p>\n<blockquote>\n<p>Also, if you decide to do the replacement, then linting against usage of <code>refine'</code> would be a sustainable way of making sure that <code>refine'</code> will not be used, even after you are done with the refactoring.</p>\n</blockquote>\n<p>So would a linter only complain for future usage of refine’, or would it also complain for existing usage? In the latter case, I might be able to look into that a bit earlier!</p>",
        "id": 431249582,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712217754
    },
    {
        "content": "<p>Btw, there are approximately 11k <code>refine'</code> in mathlib: I strongly suspect that eradicating <code>refine'</code> from mathlib will only be achieved by some very serious automation.</p>",
        "id": 431249871,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712217842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431249582\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431248382\">said</a>:</p>\n<blockquote>\n<p>Also, if you decide to do the replacement, then linting against usage of <code>refine'</code> would be a sustainable way of making sure that <code>refine'</code> will not be used, even after you are done with the refactoring.</p>\n</blockquote>\n<p>So would a linter only complain for future usage of refine’, or would it also complain for existing usage? In the latter case, I might be able to look into that a bit earlier!</p>\n</blockquote>\n<p>The linter can complain wherever you want.  The easiest is for it to complain <em>everywhere</em>.</p>",
        "id": 431249973,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712217874
    },
    {
        "content": "<p>If you give me some time, I can write a very simple-minded linter for that.  You would then have to wait for CI (or local build) to know where the usages are.</p>",
        "id": 431250074,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712217909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431250074\">said</a>:</p>\n<blockquote>\n<p>If you give me some time, I can write a very simple-minded linter for that.  You would then have to wait for CI (or local build) to know where the usages are.</p>\n</blockquote>\n<p>No hurry, I’ll need to learn more meta-programming first anyway…</p>",
        "id": 431250857,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712218192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431249871\">said</a>:</p>\n<blockquote>\n<p>Btw, there are approximately 11k <code>refine'</code> in mathlib: I strongly suspect that eradicating <code>refine'</code> from mathlib will only be achieved by some very serious automation.</p>\n</blockquote>\n<p>That’s a lot!</p>",
        "id": 431250947,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712218214
    },
    {
        "content": "<p>The linter is active at <a href=\"https://github.com/leanprover-community/mathlib4/pull/11884\">#11884</a>.  This is very simple-minded and has no claim of robustness.</p>\n<p>If you look at the <code>build mathlib</code> step, you get a report of usages of <code>refine'</code>.  I imagine that the output will be too long before CI will give up, but it is a start!</p>",
        "id": 431257441,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712220108
    },
    {
        "content": "<p>Just to give you an impression of the challenges that this experiment poses, this is literally the first declaration that the linter flags:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulFunctor</span> <span class=\"o\">(</span><span class=\"n\">Sum.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">casesm</span> <span class=\"n\">Sum</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and replacing <code>refine'</code> with <code>refine</code> breaks the proof.</p>",
        "id": 431258218,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712220319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431258218\">said</a>:</p>\n<blockquote>\n<p>Just to give you an impression of the challenges that this experiment poses, this is literally the first declaration that the linter flags:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulFunctor</span> <span class=\"o\">(</span><span class=\"n\">Sum.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">casesm</span> <span class=\"n\">Sum</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and replacing <code>refine'</code> with <code>refine</code> breaks the proof.</p>\n</blockquote>\n<p>Yeah, dealing with <code>..</code> will probably be a bit of a challenge...</p>",
        "id": 431258479,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712220382
    },
    {
        "content": "<p>Identifying these is probably useful for working out if there are missing features that we need to teach <code>refine</code> first</p>",
        "id": 431258523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712220393
    },
    {
        "content": "<p>Maybe I came across as too negative: I think that this is a very worthwhile project, with the idea of carrying it out in a structured way, with no hacks... and investing <em>a lot</em> of effort!</p>",
        "id": 431258669,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712220444
    },
    {
        "content": "<p>There are certainly really useful tools that could be developed in the process of getting rid of <code>refine'</code> that will likely largely outweight the (really hard) goal of removing 11k <code>'</code> from mathlib.</p>",
        "id": 431258812,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712220488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431258669\">said</a>:</p>\n<blockquote>\n<p>Maybe I came across as too negative: I think that this is a very worthwhile project, with the idea of carrying it out in a structured way, with no hacks... and investing <em>a lot</em> of effort!</p>\n</blockquote>\n<p>No worries, I got that impression as well! I will think on this a bit and return once my meta-programming knowledge is more up to speed!</p>",
        "id": 431258919,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712220527
    },
    {
        "content": "<p>Here is something that I would not know right-away how to do and that seems much smaller scope: find places where simply replacing <code>refine'</code> by <code>refine</code> <em>and do nothing else</em> produces a valid proof.  Finding these \"easy wins\" would be good.</p>",
        "id": 431259276,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712220650
    },
    {
        "content": "<p>Once you have that, you could for instance find places where <code>refine</code> could be replaced by <code>exact</code>...</p>",
        "id": 431259341,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712220673
    },
    {
        "content": "<p>Oh, I forgot to write text for the warning in the linter!</p>",
        "id": 431260365,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712220986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431259276\">said</a>:</p>\n<blockquote>\n<p>Here is something that I would not know right-away how to do and that seems much smaller scope: find places where simply replacing <code>refine'</code> by <code>refine</code> <em>and do nothing else</em> produces a valid proof.  Finding these \"easy wins\" would be good.</p>\n</blockquote>\n<p>I think I’ve always had to replace some _ by ?_ when I replace refine’ by refine, but this is certainly interesting to check!</p>",
        "id": 431260660,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712221077
    },
    {
        "content": "<p>With 11k opportunities, everything that has a chance of happening will happen:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean:520-526</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">corec_roll</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">TypeVec</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:::</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cofix.corec</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"n\">Cofix.corec</span> <span class=\"o\">(</span><span class=\"n\">MvFunctor.map</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:::</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mv_bisim</span> <span class=\"n\">x₀</span> <span class=\"k\">with</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">Ha</span> <span class=\"n\">Hb</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ha</span><span class=\"o\">,</span> <span class=\"n\">Hb</span><span class=\"o\">,</span> <span class=\"n\">Cofix.dest_corec</span><span class=\"o\">,</span> <span class=\"n\">Cofix.dest_corec</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MvFunctor.map_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">appendFun_comp_id</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">liftR_map_last</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>  <span class=\"c1\">-- useless `'`</span>\n</code></pre></div>",
        "id": 431263283,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712221799
    },
    {
        "content": "<p>The first run of the linter is done.  This is a tally of the files with at least 30 usages of <code>refine'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"m\">30</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/LinearAlgebra/LinearIndependent.lean\n<span class=\"m\">30</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Covering/Differentiation.lean\n<span class=\"m\">30</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Topology/ContinuousFunction/Bounded.lean\n<span class=\"m\">31</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Analysis/Calculus/ContDiff/Defs.lean\n<span class=\"m\">31</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Combinatorics/SimpleGraph/Regularity/Chunk.lean\n<span class=\"m\">31</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/LinearAlgebra/AffineSpace/AffineSubspace.lean\n<span class=\"m\">31</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Constructions/Polish.lean\n<span class=\"m\">31</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Function/Jacobian.lean\n<span class=\"m\">31</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Integral/Bochner.lean\n<span class=\"m\">31</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/RingTheory/Jacobson.lean\n<span class=\"m\">32</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Function/ConditionalExpectation/Real.lean\n<span class=\"m\">32</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Order/Filter/Basic.lean\n<span class=\"m\">32</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Probability/Process/Stopping.lean\n<span class=\"m\">32</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Topology/Separation.lean\n<span class=\"m\">33</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Analysis/BoxIntegral/Integrability.lean\n<span class=\"m\">33</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Analysis/Convex/Between.lean\n<span class=\"m\">33</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Data/Seq/WSeq.lean\n<span class=\"m\">33</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/ModelTheory/Semantics.lean\n<span class=\"m\">33</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Probability/Martingale/Basic.lean\n<span class=\"m\">33</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/RingTheory/UniqueFactorizationDomain.lean\n<span class=\"m\">34</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.lean\n<span class=\"m\">35</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Analysis/MellinTransform.lean\n<span class=\"m\">35</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/RingTheory/Ideal/Operations.lean\n<span class=\"m\">36</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Function/ConditionalExpectation/AEMeasurable.lean\n<span class=\"m\">36</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Function/ConditionalExpectation/CondexpL2.lean\n<span class=\"m\">38</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Analysis/Complex/PhragmenLindelof.lean\n<span class=\"m\">38</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Data/Complex/ExponentialBounds.lean\n<span class=\"m\">39</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Analysis/Distribution/SchwartzSpace.lean\n<span class=\"m\">39</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Function/ConditionalExpectation/CondexpL1.lean\n<span class=\"m\">39</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Probability/Martingale/Upcrossing.lean\n<span class=\"m\">40</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/CategoryTheory/Generator.lean\n<span class=\"m\">41</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Analysis/NormedSpace/lpSpace.lean\n<span class=\"m\">42</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/NumberTheory/Cyclotomic/Basic.lean\n<span class=\"m\">42</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/SetTheory/Cardinal/Cofinality.lean\n<span class=\"m\">46</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Analysis/Analytic/Basic.lean\n<span class=\"m\">46</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Analysis/Convolution.lean\n<span class=\"m\">47</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Analysis/Convex/Side.lean\n<span class=\"m\">49</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Measure/Hausdorff.lean\n<span class=\"m\">51</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Computability/TuringMachine.lean\n<span class=\"m\">54</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.lean\n<span class=\"m\">57</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Function/LpSpace.lean\n<span class=\"m\">61</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/OuterMeasure/Basic.lean\n<span class=\"m\">68</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Integral/Lebesgue.lean\n<span class=\"m\">74</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Integral/SetToL1.lean\n<span class=\"m\">78</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/MeasureTheory/Function/UniformIntegrable.lean\n<span class=\"m\">82</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>Mathlib/Computability/TMToPartrec.lean\n</code></pre></div>",
        "id": 431268626,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712223289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431263283\">said</a>:</p>\n<blockquote>\n<p>With 11k opportunities, everything that has a chance of happening will happen:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean:520-526</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">corec_roll</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">TypeVec</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:::</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cofix.corec</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"n\">Cofix.corec</span> <span class=\"o\">(</span><span class=\"n\">MvFunctor.map</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:::</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mv_bisim</span> <span class=\"n\">x₀</span> <span class=\"k\">with</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">Ha</span> <span class=\"n\">Hb</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ha</span><span class=\"o\">,</span> <span class=\"n\">Hb</span><span class=\"o\">,</span> <span class=\"n\">Cofix.dest_corec</span><span class=\"o\">,</span> <span class=\"n\">Cofix.dest_corec</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MvFunctor.map_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">appendFun_comp_id</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">liftR_map_last</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>  <span class=\"c1\">-- useless `'`</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That's not just a useless <code>refine'</code> where <code>refine</code> could do, it's a useless <code>refine</code> where <code>exact</code> could do. (This is another lint I've been contemplating)</p>",
        "id": 431269555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712223489
    },
    {
        "content": "<p>I think it's pretty much an either-or: if this <code>refine'</code> isn't an <code>exact</code>, then it must have some use of <code>_</code> that needs to be made into <code>?_</code></p>",
        "id": 431269891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712223548
    },
    {
        "content": "<p>Yes, I have also been thinking about the \"terminal refine\" linter.  I wonder if it is possible for a <code>refine'</code> to be replaced by a <code>refine</code> without breaking the proof and not being terminal.</p>",
        "id": 431269946,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712223557
    },
    {
        "content": "<p>(In fact, I found the example by looking for terminal <code>refine'</code>s.)</p>",
        "id": 431270176,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712223598
    },
    {
        "content": "<p><code>refine</code> without any use of <code>?_</code> will not produce any subgoals</p>",
        "id": 431270290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712223612
    },
    {
        "content": "<p>Ok, I was simply wondering if they have different heuristics internally, but if you are sure, then this is what it is!</p>",
        "id": 431270523,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712223652
    },
    {
        "content": "<p>I suppose if the <code>refine'</code> could be using <code>?_</code>, then it would match your criteria</p>",
        "id": 431270635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712223670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431270523\">said</a>:</p>\n<blockquote>\n<p>Ok, I was simply wondering if they have different heuristics internally, but if you are sure, then this is what it is!</p>\n</blockquote>\n<p>what heuristics?</p>",
        "id": 431270855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712223732
    },
    {
        "content": "<p>I am sure that <code>refine</code> will not produce subgoals if there are no <code>?_</code>, but I am less sure that this syntax isn't produced by some complicated elabs</p>",
        "id": 431270961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712223778
    },
    {
        "content": "<p>I do not know if <code>refine</code> with or without <code>'</code> use some heuristics to close the goals that are implied by their syntax.  If there are differences, it could be that one of the two deals with some goals that the other would have left.</p>",
        "id": 431271015,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712223792
    },
    {
        "content": "<p>no, they have no such thing, they exclusively do unification</p>",
        "id": 431271126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712223827
    },
    {
        "content": "<p>(one of the reasons it's my favorite tactic)</p>",
        "id": 431271155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712223839
    },
    {
        "content": "<p>E.g., <code>refine</code> will do <em>something</em> with <code>_</code> to try to close them, and that something could have been different to what <code>refine'</code> does and then there is some scope for what I said [reading your comments, I understand that this is not the case].</p>",
        "id": 431271301,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712223876
    },
    {
        "content": "<p>I also like <code>refine</code> a lot.  And honestly, Lean 4 <code>apply</code> climbed up in my list of favorite tactics from the place that it had in Lean 3.</p>",
        "id": 431271467,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712223938
    },
    {
        "content": "<p>Anyway, I view every added comment as further confirmation that more automation is needed!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 431271783,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712224040
    },
    {
        "content": "<p>Maybe the first thing we can do with <code>refine'</code> conversion is to have a code action for it. I think it will be insufficient for mathlib because we have 10000 occurrences to replace, but at least for the PR author case it seems helpful</p>",
        "id": 431272374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712224224
    },
    {
        "content": "<p>it's not that hard to find the right locations to replace <code>_</code> with <code>?_</code> (given the info tree), you just need to replace <code>_</code> syntaxes that elaborated to mvars that are in the <code>goalsAfter</code> for the tactic</p>",
        "id": 431272574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712224281
    },
    {
        "content": "<p>With these automatic replacements, I always worry about getting the proposed syntax to match the input one.  E.g. in this case, I would expect that (except for the 100 character limit) the code action would simply erase a <code>'</code> and add some <code>?</code>.  However, most of the time, the printing does more than just that.</p>",
        "id": 431273024,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712224425
    },
    {
        "content": "<p>(The linter found 11340 <code>refine'</code> in mathlib.)</p>",
        "id": 431273588,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712224607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431259276\">said</a>:</p>\n<blockquote>\n<p>Here is something that I would not know right-away how to do and that seems much smaller scope: find places where simply replacing <code>refine'</code> by <code>refine</code> <em>and do nothing else</em> produces a valid proof.  Finding these \"easy wins\" would be good.</p>\n</blockquote>\n<p>That pretty much never happens, right?</p>",
        "id": 431275003,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712224836
    },
    {
        "content": "<p>I had a hunch that it could only happen for terminal <code>refine'</code>s and Mario confirmed this.</p>",
        "id": 431275265,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712224878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431273024\">said</a>:</p>\n<blockquote>\n<p>With these automatic replacements, I always worry about getting the proposed syntax to match the input one.  E.g. in this case, I would expect that (except for the 100 character limit) the code action would simply erase a <code>'</code> and add some <code>?</code>.  However, most of the time, the printing does more than just that.</p>\n</blockquote>\n<p>That's okay, the code action doesn't have to reprint the whole syntax, it can literally say \"insert <code>?</code> here, remove <code>'</code> there\"</p>",
        "id": 431275320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712224896
    },
    {
        "content": "<p>which could of course go over the line length, but probably rarely enough that it can be handled manually</p>",
        "id": 431275440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712224926
    },
    {
        "content": "<p>Ah, good to know!  I am curious to learn about automatic replacements: after linting, I will explore that!</p>",
        "id": 431275464,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712224936
    },
    {
        "content": "<p>Btw, when producing the refine linter PR, I reached for <code>lake exe mkAll</code> and of course it failed me!  I already depend on it!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\ncc <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 431275618,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712224995
    },
    {
        "content": "<p>Ahah, that's a very good sign <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 431275803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712225054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431275265\">said</a>:</p>\n<blockquote>\n<p>I had a hunch that it could only happen for terminal <code>refine'</code>s and Mario confirmed this.</p>\n</blockquote>\n<p>Yes sorry I didn't scroll enough</p>",
        "id": 431275825,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712225066
    },
    {
        "content": "<p>can we <code>[@deprecated]</code> tactics (like <code>refine'</code>)? Or is this not possible?</p>",
        "id": 431283293,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712228011
    },
    {
        "content": "<p>it's not directly possible, but you can write a linter that pretends to be the deprecation linter and puts warnings on uses of <code>refine'</code></p>",
        "id": 431285179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712228735
    },
    {
        "content": "<p>In fact, this is exactly what the PR does!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 431291813,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712230936
    },
    {
        "content": "<p>In case anyone is interested, I also wrote a quick \"terminal <code>refine</code>\" linter: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11890\">#11890</a>.</p>\n<p>I may have made the \"terminal\" part too strict, but even so it is catching some good stuff.</p>",
        "id": 431306652,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712235317
    },
    {
        "content": "<p>It turns out that there are over 170 terminal uses of <code>refine/refine'</code> in mathlib.</p>\n<p>Assuming that I fixed all the complaints of the linter, all of them can be replaced by <code>exact</code> with a unique exception:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--  Mathlib/RingTheory/Jacobson.lean:477-519</span>\n  <span class=\"bp\">...</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">Localization</span> <span class=\"n\">M</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">IsMaximal</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">IsLocalization.comap_map_of_isPrime_disjoint</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">Localization</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊥</span> <span class=\"n\">bot_prime</span>\n      <span class=\"o\">(</span><span class=\"n\">disjoint_iff_inf_le.mpr</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hM</span> <span class=\"o\">(</span><span class=\"n\">hx.2</span> <span class=\"bp\">▸</span> <span class=\"n\">hx.1</span><span class=\"o\">))]</span>\n    <span class=\"c1\">-- a terminal `refine'` that cannot be replaced by either a `refine` nor an `exact!</span>\n    <span class=\"n\">refine'</span> <span class=\"o\">((</span><span class=\"n\">isMaximal_iff_isMaximal_disjoint</span> <span class=\"o\">(</span><span class=\"n\">Localization</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">map_bot</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/commit/b348428a4475cdd26e2930302f305c2f66cb06ef\">This</a> is the commit that unlints this usage.</p>\n<p>Source: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11890\">#11890</a></p>",
        "id": 431345874,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712245925
    },
    {
        "content": "<p>I was going to mention that there's a very subtle difference between <code>refine</code> and <code>refine'</code> in the way <code>_</code>'s are elaborated, so you might run into some oddities!</p>",
        "id": 431347147,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712246241
    },
    {
        "content": "<p>It turns out we can fix this one easily by replacing the first <code>_</code> with <code>a</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">isMaximal_iff_isMaximal_disjoint</span> <span class=\"o\">(</span><span class=\"n\">Localization</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">map_bot</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 431347224,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712246260
    },
    {
        "content": "<p>I feel that mathlib is so big that <em>any</em> quirk in any tactic is exploited somewhere.</p>",
        "id": 431347573,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712246325
    },
    {
        "content": "<p>I'll remove the no-linting and use your proof in the next round of CI: I am now curious to check that there are no further warnings.</p>",
        "id": 431348324,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712246453
    },
    {
        "content": "<p>I was a little skeptical about this linter, but <code>!bench</code> gives a (small) speed-up.  I put it up for review, but feel free to say that this is undesirable!</p>",
        "id": 431359320,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712249205
    },
    {
        "content": "<p>The file with the speed-up had 3 <code>refine'</code> that became <code>exact</code>.</p>",
        "id": 431359775,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712249346
    },
    {
        "content": "<p>Not that the overall change in instructions is nearing +1T which is an increase of about 0.75% and fairly large for a single PR so your skepticism is supported I would say.</p>\n<p>I would recommend breaking off performant changes into a separate PR.</p>",
        "id": 431360007,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712249416
    },
    {
        "content": "<p>Oh, I see!  I only looked at the summary, thinking that it was representative (and since I usually have very little understanding of the figures in the <code>!bench</code> output)!</p>",
        "id": 431360602,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712249620
    },
    {
        "content": "<p>I think the highlights should always include the change in total instructions</p>",
        "id": 431360784,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712249668
    },
    {
        "content": "<p>I really have a hard time understanding these benchmarks: where are the total instructions?</p>",
        "id": 431360953,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712249723
    },
    {
        "content": "<p>(And roughly \"total instructions\" is a good measure of \"total time for a single run\"?)</p>",
        "id": 431361044,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712249750
    },
    {
        "content": "<p>Time can be affected by spurious things like other processes CPU and RAM usage. This is more deterministic and a proxy for \"how hard the computer has to work to build Mathlib\"</p>",
        "id": 431361256,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712249807
    },
    {
        "content": "<p>Perhaps is it far to say they are \"atoms of CPU work\" as a metaphor</p>",
        "id": 431361410,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712249856
    },
    {
        "content": "<p>Ok, that's good enough.  Probably similar to the difference between \"time\" and \"heartbeats\"?</p>",
        "id": 431361562,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712249890
    },
    {
        "content": "<p>If I knew more about the implementation of heartbeats, I would probably safely say yes. I say it unsafely still</p>",
        "id": 431361729,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712249954
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 431361929,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712250010
    },
    {
        "content": "<p>How can I extract the information of which files were positively affected?</p>",
        "id": 431361981,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712250024
    },
    {
        "content": "<p>I assume that the suggestion would be \"perform the <code>refine --&gt; exact</code> change in those files and nowhere else\"?</p>",
        "id": 431362074,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712250052
    },
    {
        "content": "<p>It's still not perfect though -- you can change the memory access patterns while keeping the number of instructions the same, and it's possible for one instruction to take 200 cycles waiting on main memory during a cache miss.</p>\n<p>A program could get faster while using more instructions, if those calculations allow the program to avoid reading from main memory.</p>",
        "id": 431362126,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712250067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431361981\">said</a>:</p>\n<blockquote>\n<p>How can I extract the information of which files were positively affected?</p>\n</blockquote>\n<p>I use the web interface and sort by change</p>",
        "id": 431362319,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712250122
    },
    {
        "content": "<p>For the level of understanding that I have \"It's complicated, but it is roughly the number of elementary steps that the computer does\" is a good approximation!</p>",
        "id": 431362456,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712250163
    },
    {
        "content": "<p>The current terminal <code>refine'</code>'s in <code>RingHomProperties</code> existed because <code>refine'</code> could resolve differences in typeclass instances better than <code>exact</code>.  It was a hack</p>",
        "id": 431362699,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712250237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431362319\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431361981\">said</a>:</p>\n<blockquote>\n<p>How can I extract the information of which files were positively affected?</p>\n</blockquote>\n<p>I use the web interface and sort by change</p>\n</blockquote>\n<p>Ok, I see that a \"feature\" of the sort is that it sorts by <em>absolute value</em> of change of instructions!  This had confused me earlier.</p>",
        "id": 431362834,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712250275
    },
    {
        "content": "<p>Just to be completely clear: the \"good\" changes are the ones that have a <code>-</code> right?</p>",
        "id": 431363435,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712250456
    },
    {
        "content": "<p>Thanks and sorry for the silly questions!</p>",
        "id": 431363539,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712250482
    },
    {
        "content": "<p>Not silly whatsoever. Very happy to see things benchmarked before merging instead of after</p>",
        "id": 431363664,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712250513
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11896\">#11896</a> and <code>!bench</code>ed!</p>",
        "id": 431366583,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712251449
    },
    {
        "content": "<p>I still wonder whether having the linter as \"dormant\" might be desirable.  It can easily be changed to inspect other finishing tactics (e.g. finding terminal <code>apply</code>s and may be useful for other purposes).</p>\n<p>I will leave the PR open (and it is independent anyway of the one with the alleged speedup).</p>",
        "id": 431367843,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712251887
    },
    {
        "content": "<p>The benchmark on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11896\">#11896</a> is in: this is good, right?</p>",
        "id": 431375848,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712254193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Usage.20of.20refine'/near/431283293\">said</a>:</p>\n<blockquote>\n<p>can we <code>[@deprecated]</code> tactics (like <code>refine'</code>)? Or is this not possible?</p>\n</blockquote>\n<p>This is exactly what motivated <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/linting_rules.20.28and.20foo_rules.29\">#mathlib4 &gt; linting_rules (and foo_rules)</a> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/11520\">#11520</a>) which allows linting syntax by providing match alts (and can deprecate it) :) (I’m also interested in making a code action.)</p>",
        "id": 431430798,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1712282026
    },
    {
        "content": "<p>By the way, <a href=\"https://github.com/leanprover-community/mathlib4/pull/8364\">#8364</a> (<code>refine?</code>, which tells you which <code>_</code>’s need to become <code>?_</code>’s) might also be relevant to this thread. (It’s stalled since its dependencies (<a href=\"https://github.com/leanprover-community/mathlib4/pull/8503\">#8503</a>) need to be split up, and I haven’t had the motivation/time to do so yet.)</p>",
        "id": 431431227,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1712282347
    },
    {
        "content": "<p>I went back to the speed ups using Scott's count heartbeats and on the file that most improved, there was exactly one <code>refine'</code> that was <em>really</em> slow.  These are the timings</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--  Mathlib/AlgebraicGeometry/Morphisms/RingHomProperties.lean</span>\n<span class=\"c1\">--  affineLocally_of_isOpenImmersion</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span>\n        <span class=\"bp\">@</span><span class=\"n\">IsLocalization.away_of_isUnit_of_bijective</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">isUnit_one</span> <span class=\"n\">Function.bijective_id</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">heartbeats using `exact`   in 10 runs: Min: 747 Max: 865</span>\n<span class=\"cm\">heartbeats using `refine`  in 10 runs: Min: 747 Max: 865</span>\n<span class=\"cm\">heartbeats using `refine'` in 10 runs: Min: 72431 Max: 72549</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 431645162,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712384367
    },
    {
        "content": "<p>I am thinking of automating these tests: whenever there are two tactic sequences that achieve the same result, there should be an easy way to get the timings and use the quickest.</p>",
        "id": 431645254,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712384433
    },
    {
        "content": "<p>For instance, <code>hint</code> could use this information to print the fastest solution, when it finds one.</p>",
        "id": 431645291,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712384489
    },
    {
        "content": "<p>I think <code>hint</code> is not really the best avenue for this. It really should be suggesting the most stylistically canonical solution, regardless of speed.</p>",
        "id": 431649094,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712387767
    },
    {
        "content": "<p>Ok, fair enough!</p>",
        "id": 431650729,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712389416
    },
    {
        "content": "<p>Btw, this experiment made me wonder whether replacing some <code>exact</code>s by <code>refine</code>s could result in speedups somewhere.  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 431650800,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712389473
    }
]