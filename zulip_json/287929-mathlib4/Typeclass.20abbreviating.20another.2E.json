[
    {
        "content": "<p>I would like to add a Typeclass abbreviating for <code>HasCountableSeparatingOn _ MeasurableSet univ</code> as in the code below.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">CountablySeparated</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">countably_separated</span> <span class=\"o\">:</span> <span class=\"n\">HasCountableSeparatingOn</span> <span class=\"n\">α</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">univ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HasCountableSeparatingOn</span> <span class=\"n\">α</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">univ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">CountablySeparated</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">CountablySeparated</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasCountableSeparatingOn</span> <span class=\"n\">α</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"n\">h.countably_separated</span>\n</code></pre></div>\n<p>Is this the most efficient way to accomplish what is basically just notation? In particular I am worried that the instance loop might be unoptimal somehow.</p>",
        "id": 435240582,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1713979956
    },
    {
        "content": "<p>Is that equivalent to <code>[CountablyGenerated α] [MeasurableSingletonClass α]</code>?</p>",
        "id": 435249028,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1713983077
    },
    {
        "content": "<p>It is equivalent to the existence of a coarser sigma algebra with those properties</p>",
        "id": 435249140,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1713983121
    },
    {
        "content": "<p>see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasurableSpace.exists_countablyGenerated_le_of_hasCountableSeparatingOn#doc\">docs#MeasurableSpace.exists_countablyGenerated_le_of_hasCountableSeparatingOn</a></p>",
        "id": 435249329,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1713983181
    },
    {
        "content": "<p>and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasurableSpace.measurableSingletonClass_of_hasCountableSeparatingOn#doc\">docs#MeasurableSpace.measurableSingletonClass_of_hasCountableSeparatingOn</a></p>",
        "id": 435249500,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1713983253
    },
    {
        "content": "<p>Thanks for the clarification! (For instance, Lebesgue measurable sets are countably separated but not countably generated). Introducing a typeclass like you want to do is perfectly reasonable, and there is no issue with instance loops.</p>",
        "id": 435250305,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1713983536
    },
    {
        "content": "<p>ok, thanks!</p>",
        "id": 435250720,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1713983719
    }
]