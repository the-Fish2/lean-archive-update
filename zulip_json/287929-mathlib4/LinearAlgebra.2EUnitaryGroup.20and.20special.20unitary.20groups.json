[
    {
        "content": "<p>I am interested in working with special unitary groups of matrices. I have seen <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/UnitaryGroup.html\">LinearAlgebra.UnitaryGroup</a> and thought I might be able to define them as a subgroup. </p>\n<p>However I was  confused to find that <code>Matrix.unitaryGroup</code> has type <code>Submonoid (Matrix n n α)</code>, while I expected it to be a group. I also don't see a <code>Group</code> typeclass instance in the source file. Am I overlooking them, or maybe they are defined somewhere else? </p>\n<p>(Also if there is a better approach to defining special unitary groups of matrices, I would welcome any advice. I am new to using Mathlib and Lean.)</p>",
        "id": 418760958,
        "sender_full_name": "Chris Henson",
        "timestamp": 1706585094
    },
    {
        "content": "<p>In this case, the module documentation explains the situation:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.unitaryGroup#doc\">docs#Matrix.unitaryGroup</a> is the submonoid of matrices where the star-transpose is the inverse; the group structure (under multiplication) is inherited from a more general <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=unitary#doc\">docs#unitary</a> construction.</p>\n</blockquote>",
        "id": 418762410,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706586241
    },
    {
        "content": "<p>In particular, the group structure comes from: <br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=unitary.instGroupSubtypeMemSubmonoidToMulOneClassInstMembershipInstSetLikeSubmonoidUnitary#doc\">docs#unitary.instGroupSubtypeMemSubmonoidToMulOneClassInstMembershipInstSetLikeSubmonoidUnitary</a></p>",
        "id": 418762515,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706586311
    },
    {
        "content": "<p>Thanks! I did see that note but wasn't sure where/what it was referring to. I still don't quite understand how to use that to define a special unitary group. My first thought is something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Star.Unitary</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.UnitaryGroup</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">SU_ℂ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Subgroup</span> <span class=\"o\">(</span><span class=\"n\">unitary</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"n\">unitary.instGroupSubtypeMemSubmonoidToMulOneClassInstMembershipInstSetLikeSubmonoidUnitary</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">Matrix.det</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but that is definitely wrong because <code>A</code> does not have a matrix type. Is there a way to make this kind of approach work or do I need to find a different way?</p>",
        "id": 418775760,
        "sender_full_name": "Chris Henson",
        "timestamp": 1706596659
    },
    {
        "content": "<p>What happens if you just remove the @ and the silly instance name?</p>\n<p>One thing you might want to consider is that if someone \"unwraps\" an element of the special unitary group, what do you expect them to find? I would expect either a matrix or an invertible matrix, not an element of the unitary matrix group which I can unwrap further</p>",
        "id": 418787396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706603131
    },
    {
        "content": "<p>Is something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">SU_ℂ'</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">Matrix.det</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>what you mean to try? I definitely agree that the type is more natural to unwrap, but there's no existing instance of <code> Group (Matrix (Fin n) (Fin n) ℂ)</code>. Something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">SU</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">Matrix.det</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/\\</span> <span class=\"n\">Matrix.conjTranspose</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is what I would reach for in Coq, but I wasn't sure if is idiomatic Lean or fits well with connecting to what Mathlib has for the general linear and unitary groups.</p>",
        "id": 418836486,
        "sender_full_name": "Chris Henson",
        "timestamp": 1706621644
    }
]