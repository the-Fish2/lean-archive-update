[
    {
        "content": "<p>Hi folks,</p>\n<p>I am trying to use Lean to prove that the rational number 2/5 is<br>\nless than or equal to the rational number 1/2.  I am using<br>\nMathlib rationals.</p>\n<p>I was thinking to use Rat.le_def'.  In that case, I should be<br>\nable to prove 2/5 is less than or equal to 1/2 if I can prove<br>\nthat the integer 4 is less than or equal to the integer 5.</p>\n<p>I can prove that 4 is less than or equal to 5 in some ways of<br>\nsaying it, but not others.  For example, here are two attempts at<br>\na proof.  The first one works but the second one doesn't.</p>\n<p>(a) Is there a standard or easy way to prove 2/5 is less than or<br>\nequal to 1/2?</p>\n<p>(b) Why does my first theorem succeed while my second theorem<br>\nfails?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">le2512x</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Int.lt_succ_self</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"c1\">--theorem le2512y : Rat.num (2/5 : ℚ) * Rat.den (1/2 : ℚ) ≤ Rat.num (1/2 : ℚ) * Rat.den (2/5 : ℚ) :=</span>\n<span class=\"c1\">--  le_of_lt (Int.lt_succ_self 4)</span>\n</code></pre></div>",
        "id": 430504727,
        "sender_full_name": "Scott N. Walck",
        "timestamp": 1711916601
    },
    {
        "content": "<p>That's a subtle point. The issue is that the <code>2 / 5</code> notation for rationals unfolds to <code>{ num := 2 / Nat.gcd 2 5, den := 5 / Nat.gcd 2 5 , ... }</code>, so to see that <code>(2 / 5 : ℚ).num = 2</code> Lean needs to compute <code>2 / Nat.gcd 2 5</code>, which it can't do since <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.gcd#doc\">docs#Nat.gcd</a> is defined by well-founded recursion.</p>",
        "id": 430504928,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711916787
    },
    {
        "content": "<p>If you use <code>2 /. 5</code> instead of <code>2 / 5</code>, it should Just Work <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 430504964,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711916836
    },
    {
        "content": "<p>No wait sorry you need to use <code>{ num := 2, den := 5, two more fields }</code> instead of <code>2 / 5</code></p>",
        "id": 430505169,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711917018
    },
    {
        "content": "<p>The answer to your first question is \"use the <code>norm_num</code> tactic\"</p>",
        "id": 430505360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711917199
    },
    {
        "content": "<p>I would have expected <code>by decide</code> to also work, since rationals are decidable, but while <code>#eval (2/5 : ℚ) ≤ (1/2 : ℚ)</code> does work <code>theorem le2512y : (2/5 : ℚ) ≤ (1/2 : ℚ) := by decide</code> fails <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>. <code>native_decide</code> works, but I see there are some warnings about it because it adds an axiom.</p>",
        "id": 430541135,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711946096
    }
]