[
    {
        "content": "<p>I am getting an odd behaviour with instances.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">instance</span> <span class=\"n\">foobar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Function.End</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n<span class=\"c1\">--- This doesn't work: instance barfoo : Mul (Bool → Function.End (Fin 2)) := by infer_instance</span>\n</code></pre></div>\n<p>Something is getting imported here that is breaking the latter case, and I have no idea what it is. This is causing me an issue, because suddenly some code that was working, that used the multiplication on <code>Bool → Function.End (Fin (2^m))</code>, is no longer doing so</p>",
        "id": 432281087,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1712678682
    },
    {
        "content": "<p>This was previously working - and I have no idea when it broke.</p>",
        "id": 432281160,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1712678704
    },
    {
        "content": "<p>This also works:<br>\n<code>instance foobar {α : Type} {β : Type} : Mul (β → Function.End α) := by infer_instance</code></p>",
        "id": 432281864,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1712678871
    },
    {
        "content": "<p>This works again in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12037\">#12037</a>. I didn’t try to dig into the actual problem.</p>",
        "id": 432296869,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712683013
    },
    {
        "content": "<p>Huh. How odd. How did you find it?</p>",
        "id": 432297479,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1712683193
    },
    {
        "content": "<p><code>set_option trace.Meta.synthInstance</code> and looked at what it was trying. That was at the top of the list. It elaborated fine in <code>foobar</code> but didn’t in <code>barfoo</code>. Didn’t really try to figure out why since the instance itself seemed not so useful. There is probably some underlying issue still</p>",
        "id": 432297901,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712683313
    },
    {
        "content": "<p>Interesting. Was it added recently?</p>",
        "id": 432298062,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1712683352
    },
    {
        "content": "<p>What does an instance being private do?</p>",
        "id": 432298100,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1712683363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Odd.20behaviour.20with.20inferring.20instances.2E/near/432298100\">said</a>:</p>\n<blockquote>\n<p>What does an instance being private do?</p>\n</blockquote>\n<p>Doesn’t keep it very private :)</p>",
        "id": 432298491,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712683481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Odd.20behaviour.20with.20inferring.20instances.2E/near/432298062\">said</a>:</p>\n<blockquote>\n<p>Interesting. Was it added recently?</p>\n</blockquote>\n<p>I also didn’t check the git blame</p>",
        "id": 432298575,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712683511
    },
    {
        "content": "<p>I added the private instance in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7169\">#7169</a>; it was only used to prove two instances (<code>(Two)UniqueProds (G × H)</code>) by transferring results proved for indexed products to binary products. I couldn't inline it due to <code>to_additive</code> not working, or elaboration problem related to inferred universe parameters, maybe a combination of both. Since the proofs now work without the private instance, I'm all for removing it.</p>\n<p>Thanks for the diagnosis and PR!</p>",
        "id": 432301033,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1712684288
    },
    {
        "content": "<p>How odd. Can we remove anything else while we're there?</p>",
        "id": 432301207,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1712684345
    },
    {
        "content": "<p>I don't want to create scope creep but obviously if we can remove future footguns or whatnot that seems good</p>",
        "id": 432301325,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1712684396
    },
    {
        "content": "<p>Thanks the <span aria-label=\"eagle\" class=\"emoji emoji-1f985\" role=\"img\" title=\"eagle\">:eagle:</span> eye <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> ! </p>\n<p>I think locating such future footguns is currently not a well-posed problem. I think it’s fair to say that user questions about typeclass synthesis are a top, if not the the top, issue. There have been many discussions but really the only concrete procedure we have is</p>\n<ol>\n<li>Run into issue </li>\n<li>Change priorities or remove instances to fix it</li>\n<li>Repeat</li>\n</ol>",
        "id": 432320534,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712689936
    },
    {
        "content": "<p>Well, I was really thinking about the other private instances in the same file.</p>",
        "id": 432320595,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1712689970
    },
    {
        "content": "<p>But yes in general it does not seem well-posed.</p>",
        "id": 432320634,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1712689990
    },
    {
        "content": "<p>Oh ok. Yes, <code>private instance</code> is not something I can assign a value to over <code>instance</code>. I think it is common to read it as “hidden instance” but since it is exposed to the typeclass synthesis it doesn’t really do a good job of hiding.</p>",
        "id": 432321125,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712690209
    },
    {
        "content": "<p>If someone wants to attempt a cull of the <code>private instance</code>s I would be interested in seeing how much breakage results</p>",
        "id": 432321431,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712690297
    },
    {
        "content": "<p>Why do we have <code>private instance</code>s at all? Shouldn't they just be <code>local</code>?</p>",
        "id": 432325378,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712691397
    },
    {
        "content": "<p>These instances that I added should be okay globally, but they are auxiliary to two particular proofs and not intended to be otherwise used, which is a usual use case of <code>private</code>. If we intend them to be otherwise used, they should be moved to a more basic file. <code>local instance</code> is mainly used because it conflicts with a global instance (making them instances allows stating lemmas about them more conveniently), or for performance reasons (?).</p>\n<p>However one of these instances is now indeed causing trouble globally. Does changing <code>private instance</code> to <code>local instance</code> solve Wrenna's original problem? Changing to <code>instance</code> probably doesn't? If <code>instance</code> works, we'll know to avoid <code>private instance</code> in the future, and it would be a good idea to remove the remaining <code>private</code> from instances in this file.</p>",
        "id": 432335885,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1712694889
    }
]