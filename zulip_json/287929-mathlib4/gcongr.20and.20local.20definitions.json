[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.GCongr</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n  <span class=\"n\">gcongr</span> <span class=\"c1\">-- Makes no progress</span>\n</code></pre></div>",
        "id": 411571954,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704606072
    },
    {
        "content": "<p>What's the proper way to fix this: change <code>gcongr</code> or unfold <code>f</code> before calling it?</p>",
        "id": 411572015,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704606127
    },
    {
        "content": "<p>In fact, I'm not sure if it is about <code>set</code> or about <code>(· + 1) m</code> vs <code>m + 1</code></p>",
        "id": 411572463,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704606610
    },
    {
        "content": "<p>Both make <code>gcongr</code> fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.GCongr</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">gcongr</span><span class=\"o\">]</span> <span class=\"n\">Nat.succ_le_succ</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span>\n  <span class=\"n\">gcongr</span>\n</code></pre></div>",
        "id": 411572601,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704606736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 411572610,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704606754
    },
    {
        "content": "<p>That behaviour is what I would expect at the moment.  With the operation <code> + 1</code> hidden behind a definition, <code>gcongr</code> has no way of knowing that operation is monotone.  And it doesn't beta-reduce, which is why it fails on <code>(· + 1) m ≤ (· + 1) n</code>.</p>",
        "id": 411572719,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704606895
    },
    {
        "content": "<p>Shouldn't it do both (beta reduction and unfolding <code>let</code> definitions)?</p>",
        "id": 411572803,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704606998
    },
    {
        "content": "<p>A related beta-reduction issue has been discussed several times before: it's not possible to <em>tag</em> as <code>@[gcongr]</code> a lemma with a missing beta-reduction in the wrong place.  This is why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GCongr.sum_le_sum#doc\">docs#GCongr.sum_le_sum</a> exists: the standard version of the lemma, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_le_sum#doc\">docs#Finset.sum_le_sum</a>, has a non-beta-reduced conclusion, <code>(Finset.sum s fun (i : ι) =&gt; f i) ≤ Finset.sum s fun (i : ι) =&gt; g i</code>.  Same issue with integrals, etc.</p>",
        "id": 411572920,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704607190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/gcongr.20and.20local.20definitions/near/411572803\">said</a>:</p>\n<blockquote>\n<p>Shouldn't it do both (beta reduction and unfolding <code>let</code> definitions)?</p>\n</blockquote>\n<p>My tentative opinion is: <code>gcongr</code> should beta-reduce, and it should have a <code>!</code> version which unfolds <code>let</code> definitions and perhaps makes other reducibility adjustments.</p>",
        "id": 411573107,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704607298
    },
    {
        "content": "<p>But the reducibility settings seem to be performance-critical:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/.60gcongr.60.20speed\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.60gcongr.60.20speed</a><br>\nso I assume this is a delicate question.</p>",
        "id": 411573228,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704607373
    },
    {
        "content": "<p>Thank you for the explanation about performance.</p>",
        "id": 411574116,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704608415
    }
]