[
    {
        "content": "<p>I have been banging my head on this seemingly simple question  much too many hours!<br>\nWhat should I write on the right hand side?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span>  <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">RingCat</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 427119118,
        "sender_full_name": "Dan Synek",
        "timestamp": 1710682097
    },
    {
        "content": "<p>Put a <code>_</code> and click on the little <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> that appears. Then select \"Construct a ... skeleton for the structure under construction\"</p>",
        "id": 427119346,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710682155
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Look at how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingCat.of#doc\">docs#RingCat.of</a> does it</p>\n</div></div>",
        "id": 427119564,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710682209
    },
    {
        "content": "<p>Note that <code>t : Ring Nat</code> means \"put a new addition on Nat unrelated to the standard one\".</p>",
        "id": 427119686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710682239
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  Those are the best answers, teach how to fish instead of giving a fish!<br>\nThanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Thanks, for now I just wanted to put a type there for the question. But I will keep your remark in mind!</p>",
        "id": 427122161,
        "sender_full_name": "Dan Synek",
        "timestamp": 1710682913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"698527\">Dan Synek</span> has marked this topic as resolved.</p>",
        "id": 427122247,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710682935
    },
    {
        "content": "<p>Isn't <code>RingCat.of</code> itself likely to be the correct answer? You should never be working with a non-instance <code>Ring</code> unless you really know what you are getting into.</p>",
        "id": 427237940,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710713834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"698527\">Dan Synek</span> has marked this topic as unresolved.</p>",
        "id": 427345836,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710741548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  So I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span>  <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">RingCat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RingCat.of</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>but I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">RingCat.of</span> <span class=\"n\">t</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">t</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Ring</span> <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.30</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.30</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"n\">Lean</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 427345893,
        "sender_full_name": "Dan Synek",
        "timestamp": 1710741579
    },
    {
        "content": "<p>By looking at the types, I see that I could write <br>\n<code>RingCat.of ( ℕ)</code><br>\nbut what I wanted was to convert my particular ring t from being a Ring over N to a RingCat.</p>",
        "id": 427350465,
        "sender_full_name": "Dan Synek",
        "timestamp": 1710742658
    },
    {
        "content": "<p>You are almost certainly thinking about this wrong. You never want to put a ring structure on Nat besides the default one.</p>",
        "id": 427352637,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710743174
    },
    {
        "content": "<p>Ring Nat does not mean \"a ring over Nat\". It means \"a ring structure on Nat\".</p>",
        "id": 427352820,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710743215
    },
    {
        "content": "<p>Can you <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> for us?</p>",
        "id": 427352965,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710743253
    },
    {
        "content": "<p>Ok, so my goal is not to solve a particular problem, but to understand Lean and Matlab(with the plan of formalizing something in category (which I keep for myself for now because it is probably overambitius). So I set up a problem for myself, to make a RingCat of polynomials over a ring in RingCat. As far as I understand (but I am a total Lean beginner) this has already been done for Ring, so I thought I could convert a RingCat to Ring (which I think I can do by .str) then use Polynomial to get the ring of polynomials and then convert it back to RingCat.  And then I tried to simplifyit as much as possible not to clutter my question.  Anyway, I would stiull be interested in why I can't answer t in my definition of f as well as if my original question makes sense and any hint on how to solve it.</p>",
        "id": 427362115,
        "sender_full_name": "Dan Synek",
        "timestamp": 1710745453
    },
    {
        "content": "<p>I think you are just looking for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">RingCat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RingCat</span> <span class=\"o\">:=</span> <span class=\"n\">RingCat.of</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 427368452,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710746856
    },
    {
        "content": "<p>A good exercise is to show this is a functor. This should be in Mathlib somewhere.</p>",
        "id": 427368796,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710746928
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> . Indeed that was what I was looking for. I will now try your exercise ! The helpfulness of you people on the other end of Zulip is really appreciated!</p>",
        "id": 427375866,
        "sender_full_name": "Dan Synek",
        "timestamp": 1710748477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"698527\">Dan Synek</span> has marked this topic as resolved.</p>",
        "id": 427376033,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710748514
    }
]