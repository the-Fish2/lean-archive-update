[
    {
        "content": "<p>Did the <code>Abs</code> class go away entirely in <a href=\"https://github.com/leanprover-community/mathlib4/commit/cc7c881ae6e0d65a366d58016d7b253d43996c99\">cc7c881ae6e0d65a366d58016d7b253d43996c99</a>?  I have a computational type that <a href=\"https://github.com/girving/ray/blob/98f214210b7a4e2aa926a5f12f5e9e204a271bdc/Ray/Approx/Fixed.lean#L345\">implemented <code>Abs</code></a>, and I'm not sure if I get to keep clean <code>|x|</code> notation.</p>",
        "id": 417190152,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705916452
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 417190186,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705916465
    },
    {
        "content": "<p>Ah, it's called <code>PosPart</code> now? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> </p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Group/PosPart.html#PosPart\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Group/PosPart.html#PosPart</a></p>",
        "id": 417190781,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705916691
    },
    {
        "content": "<p>As a general docs ergonomics note, I'm finding it very difficult to work out where <code>abs</code> is defined.  So far I'm about 10 minutes into the search.</p>",
        "id": 417191512,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705916963
    },
    {
        "content": "<p>Loogle says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abs</span> <span class=\"n\">Mathlib.Algebra.Order.Group.Abs</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">AddGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 417191577,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705916996
    },
    {
        "content": "<p>Ah, excellent.  Which does mean I don't get to use nice notation anymore, since I want to do a custom computational implementation. :/</p>",
        "id": 417191744,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705917057
    },
    {
        "content": "<p>It's quite nice for computational types when Mathlib has a per-operation type class, since it means one can do custom stuff and prove the necessary lemmas for interfacing with standard theorems.</p>",
        "id": 417192020,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705917173
    },
    {
        "content": "<p>I think a good feature request in that direction would be specialized <code>csimp</code> lemmas</p>",
        "id": 417193658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705917783
    },
    {
        "content": "<p>Right now you can only provide a computational alternative for <code>foo</code>, not <code>foo Nat</code></p>",
        "id": 417193838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705917842
    },
    {
        "content": "<p>Fair, but <code>Abs</code> was working just fine before the mentioned commit.  Usually the lemmas I need to prove are trivial, so the thing that makes things nice is just having those per-operation type classes.</p>",
        "id": 417193987,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705917897
    },
    {
        "content": "<p>+, -, *, /, etc. are already nice.</p>",
        "id": 417194018,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705917912
    },
    {
        "content": "<p>Indeed, I don't think the <code>csimp</code> thing could ever work in my case, as the computational type is not nice enough for <code>AddGroup</code> (it has nan values).  And this is a quite generic problem: a computational type with error conditions that make it approximate but not exactly match a mathematical structure.</p>",
        "id": 417194759,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705918185
    },
    {
        "content": "<p>Oh, i see; your problem was not wanting an \"efficient\" abs, but that you can't satisfy the requirements of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=abs#doc\">docs#abs</a> anymore because it assumes lawfulness?</p>",
        "id": 417207661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705922318
    },
    {
        "content": "<p>Yes.</p>",
        "id": 417207735,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705922351
    },
    {
        "content": "<p>In that case I agree that we should probably restore the old <code>Abs</code> typeclass</p>",
        "id": 417207751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705922358
    },
    {
        "content": "<p>(though perhaps <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Norm#doc\">docs#Norm</a> is fine for you)</p>",
        "id": 417207779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705922372
    },
    {
        "content": "<p>The result of <code>norm</code> is <code>ℝ</code>, and thus noncomputable.</p>",
        "id": 417207965,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705922436
    },
    {
        "content": "<p>Whoops, I was falsely imagining we'd generalized that.</p>",
        "id": 417208723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705922738
    },
    {
        "content": "<p>It's probably getting off-topic, but I'm curious: if we generalize appropriately, why should <code>abs</code> and <code>norm</code> be different?</p>",
        "id": 417208840,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705922773
    },
    {
        "content": "<p>I think the difficulty in generalizing is the main reason; as soon as you make <code>norm : α → β</code>, then the elaborator has to solve for β in far more places</p>",
        "id": 417209055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705922866
    },
    {
        "content": "<p>Isn't <code>abs : X -&gt; X</code> and <code>norm : X -&gt; \\R</code> so they represent slightly different ideas.</p>",
        "id": 417214642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705924956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/No.20more.20.60Abs.60.3F/near/417191512\">said</a>:</p>\n<blockquote>\n<p>As a general docs ergonomics note, I'm finding it very difficult to work out where <code>abs</code> is defined.  So far I'm about 10 minutes into the search.</p>\n</blockquote>\n<p>What were you trying? I'm 10sec in and <a href=\"/user_uploads/3121/PiA7xzGZQMl0EGqIIzg2qug7/image.png\">I get this</a>.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PiA7xzGZQMl0EGqIIzg2qug7/image.png\" title=\"I get this\"><img src=\"/user_uploads/3121/PiA7xzGZQMl0EGqIIzg2qug7/image.png\"></a></div>",
        "id": 417219213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705926729
    },
    {
        "content": "<p>It's true that you used to be able to click on notation. We lost that we going to Lean 4.</p>",
        "id": 417219684,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705926917
    },
    {
        "content": "<p>Sorry about removing the <code>Abs</code> typeclass. I looked everywhere around and I could only find one instance of it (well actually two and they were creating a non-propeq diamond!) so I removed the typeclass. This has the advantage of giving you a meaningful jump-to-definition and a meaningful hover. It also reduces typeclass search (although the reduction should be fringe here).</p>",
        "id": 417219967,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705927023
    },
    {
        "content": "<p>If you just want it for one type, you can simply create your own copy of the <code>|  |</code> notation and make it elaborate correctly for your computational type.</p>",
        "id": 417220371,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705927145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/No.20more.20.60Abs.60.3F/near/417219213\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/No.20more.20.60Abs.60.3F/near/417191512\">said</a>:</p>\n<blockquote>\n<p>As a general docs ergonomics note, I'm finding it very difficult to work out where <code>abs</code> is defined.  So far I'm about 10 minutes into the search.</p>\n</blockquote>\n<p>What were you trying? I'm 10sec in and <a href=\"/user_uploads/3121/PiA7xzGZQMl0EGqIIzg2qug7/image.png\">I get this</a>.</p>\n</blockquote>\n<p>Hmm, I also get that now, so not sure what I was doing wrong.  Possibly I was being dense and searching for things like Reals.abs only.</p>",
        "id": 417223121,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705928041
    },
    {
        "content": "<p>^ I think the can't-click-on-notation thing was the core problem: I think I was implicitly assuming it was still a typeclass and thus not expecting it to exist as a standalone function, and all the abs lemmas are expressed in notation.</p>",
        "id": 417224275,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705928480
    },
    {
        "content": "<p>Even if it were still a typeclass, searching for <code>abs</code> would have picked up <code>Abs</code> and <code>Abs.abs</code>.</p>",
        "id": 417226847,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705929416
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/VSNgzqpkfTWfARVVCoNpvt-B/Screenshot-2024-01-22-at-1.17.08PM.png\">Screenshot-2024-01-22-at-1.17.08PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VSNgzqpkfTWfARVVCoNpvt-B/Screenshot-2024-01-22-at-1.17.08PM.png\" title=\"Screenshot-2024-01-22-at-1.17.08PM.png\"><img src=\"/user_uploads/3121/VSNgzqpkfTWfARVVCoNpvt-B/Screenshot-2024-01-22-at-1.17.08PM.png\"></a></div>",
        "id": 417226916,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705929440
    },
    {
        "content": "<p>Only the lowercase search works in mathlib4 docs.</p>",
        "id": 417227016,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705929482
    },
    {
        "content": "<p>Yeah so upper-case letters in a search only match upper-case letters, but lowercase letters match both lower-case and upper-case.</p>",
        "id": 417227058,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705929487
    },
    {
        "content": "<p>That's useful to know!</p>",
        "id": 417227099,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705929503
    },
    {
        "content": "<p>In particular, lower-case is the way to go if you are not sure that what you're searching for is upper-case.</p>",
        "id": 417227159,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705929531
    },
    {
        "content": "<p>That should probably be written somewhere, I had no idea that was the case</p>",
        "id": 417272140,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705942023
    },
    {
        "content": "<p>By the way, should the outputs below display all as <code>3</code>?  And not error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- best</span>\n<span class=\"k\">#eval</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 3</span>\n\n<span class=\"c1\">-- ok</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Int.ofNat 3</span>\n\n<span class=\"c1\">-- sub-par</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Rat.mk' (Int.ofNat 3) 1</span>\n\n<span class=\"c1\">-- error</span>\n<span class=\"k\">#eval</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">failed to compile definition, consider marking it as 'noncomputable'</span>\n<span class=\"cm\">because it depends on 'instConditionallyCompleteLinearOrderInt',</span>\n<span class=\"cm\">and it does not have executable code</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 417538442,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706048007
    },
    {
        "content": "<p>All of those outputs are expected</p>",
        "id": 417539636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706048554
    },
    {
        "content": "<p>They may be expected, but I can try arguing that they are not all ideal...</p>",
        "id": 417539703,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706048587
    },
    {
        "content": "<p>the first three are because <code>#reduce</code> reduces the expression to constructors, and the constructor of <code>Int</code> is <code>Int.ofNat</code> and the constructor of <code>Rat</code> is <code>Rat.mk'</code></p>",
        "id": 417539732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706048599
    },
    {
        "content": "<p>the <code>3</code> there is a raw nat literal</p>",
        "id": 417539757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706048611
    },
    {
        "content": "<p>so it only works on <code>Nat</code></p>",
        "id": 417539776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706048619
    },
    {
        "content": "<p>Notice that the very first one is <code>#eval</code>, though, not <code>#reduce</code>.</p>",
        "id": 417539900,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706048666
    },
    {
        "content": "<p>Actually the last one seems a bit odd, it should be computable</p>",
        "id": 417539903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706048669
    },
    {
        "content": "<p>I thought it was over reals</p>",
        "id": 417539932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706048681
    },
    {
        "content": "<p>I'm willing to bet that it works if you import less</p>",
        "id": 417539955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706048693
    },
    {
        "content": "<p>Over the reals it gives a cauchy sequence, it is not that bad, actually.</p>",
        "id": 417539969,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706048700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/No.20more.20.60Abs.60.3F/near/417539955\">said</a>:</p>\n<blockquote>\n<p>I'm willing to bet that it works if you import less</p>\n</blockquote>\n<p>Indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Group.Abs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 3</span>\n</code></pre></div>",
        "id": 417540066,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706048761
    },
    {
        "content": "<p>which means there is an instance priority issue</p>",
        "id": 417540196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706048818
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Lattice</span> <span class=\"n\">Int</span>\n<span class=\"c1\">--  with `import Mathlib`: `ConditionallyCompleteLattice.toLattice`</span>\n<span class=\"c1\">--  with minimal imports: `DistribLattice.toLattice`</span>\n</code></pre></div>",
        "id": 417540460,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706048959
    },
    {
        "content": "<p>Adding a <code>Lattice Int</code> instance after the <code>DistribLattice</code> instance is the standard fix here</p>",
        "id": 417546479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706052063
    },
    {
        "content": "<p>If the available typeclasses are a graph, you need to ensure that you have a \"shield\" of shortcut instances between the noncomputable instance and all the computable base classes.</p>",
        "id": 417546574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706052111
    },
    {
        "content": "<p>I'm trying this out in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9946\">#9946</a>.</p>",
        "id": 417547815,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706052747
    },
    {
        "content": "<p>I also think that the only noncomputability came from the file <code>Mathlib/Data/Int/ConditionallyCompleteOrder</code> that is imported by <code>Mathlib</code> only.</p>",
        "id": 417547901,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706052804
    },
    {
        "content": "<p>You should probably add a test at the end of that <code>ConditionallyCompleteOrder</code> file of <code>example : DistribLattice \\Z := inferInstance</code> (outside of a noncomputable section!)</p>",
        "id": 417548050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706052873
    },
    {
        "content": "<p>The computability of <code>abs</code> in <code>Int</code> should no longer depend on the imports!</p>",
        "id": 417704237,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706121193
    },
    {
        "content": "<p>Next question: is that true for <code>Real</code>?</p>",
        "id": 417974942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706135371
    },
    {
        "content": "<p>(and should we redefine abs to need only <code>Sup</code>?)</p>",
        "id": 417975187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706135471
    },
    {
        "content": "<p>How could <code>abs</code> only need <code>sup</code>?</p>",
        "id": 417975269,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706135521
    },
    {
        "content": "<p>Presumably Eric means Sup and Neg.</p>",
        "id": 417975329,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706135540
    },
    {
        "content": "<p>Sorry, I mean neg + sup</p>",
        "id": 417975337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706135542
    },
    {
        "content": "<p>Yeah okay</p>",
        "id": 417975341,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706135547
    },
    {
        "content": "<p>Crucially, not <code>Lattice</code></p>",
        "id": 417975349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706135555
    },
    {
        "content": "<p>It was actually the case until my refactor</p>",
        "id": 417975372,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706135570
    },
    {
        "content": "<p>Though maybe that still does the wrong thing for floats depending on what <code>max x nan</code> means  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 417975429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706135594
    },
    {
        "content": "<p>For floats you want to use a custom implementation, via the Abs typeclass.</p>",
        "id": 417975517,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706135643
    },
    {
        "content": "<p>Relevant part of the diff: <a href=\"https://github.com/leanprover-community/mathlib4/commit/cc7c881ae6e0d65a366d58016d7b253d43996c99#diff-04fe7d4ab1d9e83e80baaa4ff56278e736e3ec0a4ddace3fa767ddc86c69821bL27-L29\">https://github.com/leanprover-community/mathlib4/commit/cc7c881ae6e0d65a366d58016d7b253d43996c99#diff-04fe7d4ab1d9e83e80baaa4ff56278e736e3ec0a4ddace3fa767ddc86c69821bL27-L29</a></p>",
        "id": 417975693,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706135731
    },
    {
        "content": "<p>But I should admit that the neg + sup implementation will also work fine, it’s just slower than a single bitwise &amp;.</p>",
        "id": 417975955,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706135873
    },
    {
        "content": "<p>I wonder if the correct answer is to use <code>#norm_num</code> instead of <code>#eval</code> for these kind of computations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic</span>\n\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">))</span>              <span class=\"c1\">-- |3|</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Real</span><span class=\"o\">))</span>           <span class=\"c1\">-- |31 / 10|</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Real</span><span class=\"o\">))</span> <span class=\"c1\">-- |Real.sqrt 31 / Real.sqrt 10|</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"bp\">-</span> <span class=\"n\">Real.pi</span> <span class=\"o\">:</span> <span class=\"n\">Real</span><span class=\"o\">))</span>     <span class=\"c1\">-- |Real.pi|</span>\n</code></pre></div>\n<p>These all look fairly reasonable to me, except possibly <code>#norm_num</code> could realize that final <code>|·|</code> is superfluous, at least in some cases.</p>",
        "id": 418034059,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706173304
    }
]