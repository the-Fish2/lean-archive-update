[
    {
        "content": "<p>I find myself sometimes in a situation where <code>#eval</code> displays a result that I want to proof, but <code>decide</code> fails with <code>maximum recursion depth</code>. This is mostly computational stuff. Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n\n<span class=\"k\">#eval</span> <span class=\"n\">Nat.factors</span> <span class=\"mi\">1001</span> <span class=\"c1\">-- gives `[7, 11, 13]`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.factors</span> <span class=\"mi\">1001</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span> <span class=\"c1\">-- fails: maximum recursion depth has been reached</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.factors</span> <span class=\"mi\">1001</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span> <span class=\"c1\">-- works</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Nat.factors</span> <span class=\"mi\">492884382345</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">32858958823</span><span class=\"o\">]</span> <span class=\"c1\">-- gives `true`</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.factors</span> <span class=\"mi\">492884382345</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">32858958823</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span> <span class=\"c1\">-- fails: maximum recursion depth has been reached</span>\n</code></pre></div>\n<p>Is there a way to get a proof of these type of statements without <code>native_decide</code>?</p>",
        "id": 426922446,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1710623766
    },
    {
        "content": "<p>You can bump up the recursion depth, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.factors</span> <span class=\"mi\">1001</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">3000</span> <span class=\"k\">in</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I switched that to <code>rfl</code> since it's likely much more efficient than <code>decide</code> for proving an equality. The <code>decide</code> tactic would look for the <code>DecidableEq (List Nat)</code> instance and run that, which involves unfolding <code>Nat.factors 1001</code> anyway, rather than showing the equality directly with <code>rfl</code>.</p>",
        "id": 426922762,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710624061
    },
    {
        "content": "<p>I doubt you'll get <code>Nat.factors 492884382345</code> to work with <code>rfl</code>. That begs for a better proof.</p>",
        "id": 426922811,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710624105
    },
    {
        "content": "<p>Someone could write a <code>simproc</code> that could evaluate <code>Nat.factors</code> and then construct the proof from the result.</p>",
        "id": 426923003,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710624259
    },
    {
        "content": "<p>The large example can't rely on the current primality algorithm in <code>norm_num</code> though. This causes a stack overflow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">32858958823</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 426923427,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710624702
    },
    {
        "content": "<p>I didn't know about <code>simproc</code>, will have a look.</p>\n<p>In the example I currently care about, there are no really big prime factors, but the numbers are big nonetheless.<br>\nThings like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">7</span> <span class=\"bp\">^</span> <span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization.support</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">native_decide</span>\n</code></pre></div>",
        "id": 426923640,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1710624942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60decide.60.20and.20.60eval.60.20and.20.60maximum.20recursion.20depth.60/near/426923640\">said</a>:</p>\n<blockquote>\n<p>I didn't know about <code>simproc</code>, will have a look.</p>\n<p>In the example I currently care about, there are no really big prime factors, but the numbers are big nonetheless.<br>\nThings like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">7</span> <span class=\"bp\">^</span> <span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization.support</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">native_decide</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If you already know the factorization, it's a lot easier to do the proof and no big numbers are needed, the only thing needed to prove the quoted lemma is that 2,3,5,7 are prime</p>",
        "id": 426979419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710643535
    },
    {
        "content": "<p>took a swing at it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">7</span> <span class=\"bp\">^</span> <span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization.support</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorization_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.Prime.factorization_pow</span><span class=\"o\">]</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.support_add_eq</span><span class=\"o\">]</span> <span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.support_single_ne_zero</span><span class=\"o\">]</span> <span class=\"bp\">|</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 426991133,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1710646789
    }
]