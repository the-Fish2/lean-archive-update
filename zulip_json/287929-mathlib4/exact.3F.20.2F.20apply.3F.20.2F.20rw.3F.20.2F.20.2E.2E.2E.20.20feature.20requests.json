[
    {
        "content": "<ol>\n<li>The following shows one success and three failures of <code>exact?</code>:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.Prime.one_lt</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- exact? -- `exact?` could not close the goal.</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- exact? -- `exact?` could not close the goal.</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- exact? -- `exact?` could not close the goal.</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Would it be possible to extend <code>exact?</code> so that</p>\n<ul>\n<li>it also considers components of hypotheses in the context (like <code>Fact.out</code> or <code>h.1</code>), so that it would solve the first two of the failing cases above;</li>\n<li>it also considers strict inequalities when asked to solve goals involving <code>≤</code> or <code>≠</code> (similar to what I think it already does regarding symmetry of equalities), so that it would solve the last example?</li>\n</ul>\n<p>Or would this be too much of \"mission creep\"?</p>\n<ol start=\"2\">\n<li>When I have a goal that is an equality or an equivalence, <code>apply?</code> tends to produce a quite long list of generic statements about equalities or equivalences that are rarely, if ever, useful, and maybe only fairly far down shows some more specific suggestions. Would it be possible to filter the lemmas that <code>apply?</code>considers (and similarly for <code>rw?</code>) by providing a list of constants (like <code>ZMod</code> or <code>Finset.sum</code>) that should appear in the lemma statement and/or a list of terms (e.g., local hypotheses or statements derived from them) that should be used as arguments? Usually I have an idea of what I want to do and what I want to use as input, so being able to transmit this information to <code>apply?</code> would result in a much more targeted list of suggestions.</li>\n</ol>",
        "id": 416045550,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705502968
    },
    {
        "content": "<p>A related issue that maybe gets at the underlying issue is that <code>solve_by_elim</code> doesn't use TC hyps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.Prime.one_lt</span>\n  <span class=\"n\">solve_by_elim</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.Prime.one_lt</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"c1\">-- failed</span>\n</code></pre></div>",
        "id": 416096401,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1705516949
    },
    {
        "content": "<p>Regarding using projections of local facts:</p>\n<p>This would be a change to <code>solve_by_elim</code>, and I think would be very useful. It could be done either as the default behaviour, or under a flag, and <code>exact?</code> could use it either way.</p>",
        "id": 416696800,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705632711
    },
    {
        "content": "<p>Regarding inequalities, I think unfortunately this is scope creep into the \"hammer\" realm.</p>",
        "id": 416696880,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705632761
    },
    {
        "content": "<p>Regarding question 2, have you tried out <code>apply? using x</code>? This requires that <code>x</code> appears as a subexpression of any reported result.</p>",
        "id": 416696945,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705632809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>, I don't think this is about typeclasses at all, but rather than <code>Fact</code> is a one-field structure, and we would need to project using <code>Fact.out</code> to get the thing that <code>solve_by_elim</code> needs to finish:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.Prime.one_lt</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"o\">[</span><span class=\"n\">Fact.out</span><span class=\"o\">]</span> <span class=\"c1\">-- works!</span>\n</code></pre></div>",
        "id": 416697110,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705632927
    },
    {
        "content": "<p>What if the Fact hyp is unnamed?</p>",
        "id": 416697446,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1705633125
    },
    {
        "content": "<p>Doesn't (couldn't!) make any difference whether it has a user facing name.</p>",
        "id": 416698069,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705633482
    },
    {
        "content": "<p>Does anyone see a quick way to generate all the projections of an <code>Expr</code>? I'm not sure how to look up all the projections associated to the <code>Name</code> of the structure. <code>getProjectionFnInfo?</code> is looking up in the other direction.</p>",
        "id": 416698338,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705633585
    },
    {
        "content": "<p>There are a couple ways to get all the fields here: <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Metaprogramming.20a.20structure.20declaration/near/369266959\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Metaprogramming.20a.20structure.20declaration/near/369266959</a></p>",
        "id": 416698558,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705633732
    },
    {
        "content": "<p>Ah, just found <code>getStructureInfo?</code></p>",
        "id": 416698602,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705633759
    },
    {
        "content": "<p>That's not the projections yet (edit: never mind, it appears to be the projections)</p>",
        "id": 416698604,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705633760
    },
    {
        "content": "<p>There's a chance you want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.getStructureFieldsFlattened#doc\">docs#Lean.getStructureFieldsFlattened</a> so you can get the fields even if a structure extends another structure</p>",
        "id": 416698905,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705633954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20.2F.20apply.3F.20.2F.20rw.3F.20.2F.20.2E.2E.2E.20.20feature.20requests/near/416696945\">said</a>:</p>\n<blockquote>\n<p>Regarding question 2, have you tried out <code>apply? using x</code>? This requires that <code>x</code> appears as a subexpression of any reported result.</p>\n</blockquote>\n<p>Is this documented somewhere? (Hovering over \"apply?\" in VSCode shows the list of suggestions (if there are any) plus \"A sequence of tactics in brackets, or a delimiter-free indented sequence of tactics. Delimiter-free indentation is determined by the first tactic of the sequence.\")</p>\n<p>The following does not work, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span> <span class=\"n\">using</span> <span class=\"n\">h.1</span> <span class=\"c1\">--unexpected term 'h.left'; expected single reference to variable</span>\n</code></pre></div>",
        "id": 416719766,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705647894
    },
    {
        "content": "<p>Ah, yes, it only accepts a list of variables, not arbitrary terms. That could probably be fixed easily.</p>",
        "id": 416748629,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705660054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>, <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>works after <a href=\"https://github.com/leanprover/std4/pull/549\">std#549</a>.</p>",
        "id": 416748829,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705660113
    },
    {
        "content": "<p>(Although it's not entirely clear that we actually want that change; it works by saturating the context with projections of hypotheses, which is potentially an explosive thing to do.)</p>",
        "id": 416748958,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705660169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>, fair criticism about the lack of documentation. PRs of course very very welcome, and it's a great way to get into metaprogramming. :-)</p>\n<p>We're in the midst of replacing <code>exact?</code> with a rewrite that is now in Std, so documentation will be in flux, hopefully improving!</p>",
        "id": 416749140,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705660225
    },
    {
        "content": "<p>I saw that in the other thread. My question (regarding documentation) was basically if I should have known about <code>apply? using</code>, but I guess the answer is \"No\". I'll probably look into metaprogramming at some point, but not in the immediate future.</p>",
        "id": 416760364,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705664287
    },
    {
        "content": "<p>One good method for learning about tactics with poor documentation is to read their test files. These are often very helpful (and in particular <code>using</code> is \"documented\" in <code>test/LibrarySearch/basic.lean</code>).</p>",
        "id": 416762347,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705665091
    },
    {
        "content": "<p>But yeah... the missing doc-string is pretty bad.</p>",
        "id": 416762382,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705665108
    },
    {
        "content": "<p>Here is a failure of <code>apply? using</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- apply? -- `Try this: refine mul_ne_zero ?ha h` is no. 4 in the list</span>\n  <span class=\"c1\">-- apply? using h -- apply? didn't find any relevant lemmas</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_ne_zero</span> <span class=\"n\">two_ne_zero</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 416994860,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705760603
    },
    {
        "content": "<p>... and here is a failure of <code>rw?</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioi</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- rw? -- does not suggest the following</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">closure_Ioi</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Set.left_mem_Ici</span>\n</code></pre></div>",
        "id": 416998309,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705763528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20.2F.20apply.3F.20.2F.20rw.3F.20.2F.20.2E.2E.2E.20.20feature.20requests/near/416994860\">said</a>:</p>\n<blockquote>\n<p>Here is a failure of <code>apply? using</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- apply? -- `Try this: refine mul_ne_zero ?ha h` is no. 4 in the list</span>\n  <span class=\"c1\">-- apply? using h -- apply? didn't find any relevant lemmas</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_ne_zero</span> <span class=\"n\">two_ne_zero</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span>,  <em>several</em> drafts into an explanation of why this was going to be hard to fix, I came up with an easy fix: <a href=\"https://github.com/leanprover/std4/pull/554\">std4#554</a></p>",
        "id": 417143776,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705887823
    },
    {
        "content": "<p>(This will fix <code>std_apply?</code>, not <code>apply?</code>, but hopefully the switch will happen soon enough.)</p>",
        "id": 417143830,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705887856
    },
    {
        "content": "<p>Regarding the <code>rw?</code> question, <code>set_option trace.Tactic.rewrites.lemmas true</code> shows that at least it is finding <code>closure_Ioi</code> in its index.</p>",
        "id": 417144114,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705888080
    },
    {
        "content": "<p>I think the only probably here is that we restrict <code>rw?</code> to a max of 20 outputs, and it just hasn't got there yet. Can we do better? Suggestions welcome.</p>",
        "id": 417144247,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1705888189
    },
    {
        "content": "<p>It lists 18 <code>...mem_closure_iff...</code> lemmas and then <code>Set.mem_def</code> and <code>Set.mem_iff_boolIndicator</code>.</p>\n<p>How does <code>rw?</code> sort its output currently? (I seem to remember that there was a discussion at some point (maybe about <code>apply?</code>), but I don't recall if anything came out of it.) Maybe it would help to sort according to a weighted sum of</p>\n<ul>\n<li>number of remaining goals and</li>\n<li>(total) length (or complexity measured in some other resaonable way) of these goals.</li>\n</ul>\n<p>The goal <code>⊢ 0 ∈ Set.Ici 0</code> remaining after <code>rw [closure_Ioi]</code> is shorter than basically anything offered by <code>rw?</code>.</p>\n<p>Rationale: Usually we want to obtain \"simpler\" goals after the rewrite, and the number and length of the remaining goals should be a reasonably good proxy for measuring simplicity.</p>",
        "id": 417201342,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705920262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20.2F.20apply.3F.20.2F.20rw.3F.20.2F.20.2E.2E.2E.20.20feature.20requests/near/417143830\">said</a>:</p>\n<blockquote>\n<p>(This will fix <code>std_apply?</code>, not <code>apply?</code>, but hopefully the switch will happen soon enough.)</p>\n</blockquote>\n<p>It doesn't look like it, but does this also make it allow more general terms after <code>using</code>?</p>",
        "id": 417201759,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705920432
    },
    {
        "content": "<p>My memory of the sorting discussion was \"if you know how to sort them so the right thing appears at the top, you've just written an extremely powerful tactic; hence sorting must be hard\"</p>",
        "id": 417203290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705920936
    },
    {
        "content": "<p>There are NP-hard problems that allow for efficient good approximations, though.<br>\nI think <em>some</em> reasonable way of sorting here is better than none.</p>",
        "id": 417203940,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705921127
    }
]