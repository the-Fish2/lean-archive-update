[
    {
        "content": "<p>Has anyone seen this phenomenon before:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">fail_if_success</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"c1\">-- Doesn't work as a simp lemma until we specify the universe levels explicitly!</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo.</span><span class=\"o\">{</span><span class=\"n\">v₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}]</span> <span class=\"c1\">-- Succeeds</span>\n</code></pre></div>",
        "id": 438290693,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715584781
    },
    {
        "content": "<p>(If anyone wants to play with it, it is on <a href=\"https://github.com/leanprover-community/mathlib4/tree/Bimon\">branch#Bimon</a>, in Mathlib/CategoryTheory/Monoidal/Bimon_.lean, in <code>to_Mon_Comon_obj</code>.)</p>",
        "id": 438290966,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715584858
    },
    {
        "content": "<p>I'm mystified</p>",
        "id": 438290982,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715584862
    },
    {
        "content": "<p>Not sure what's going on there, but just <code>apply Mon_.mul_one</code> seems to work</p>",
        "id": 438313781,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715592004
    },
    {
        "content": "<p>Thanks. I would like to get to the bottom of this, as this goal should work by <code>simp</code> and this issue badly breaks automation.</p>",
        "id": 438315678,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715592558
    },
    {
        "content": "<p>Does it work as <code>(foo)</code>?</p>",
        "id": 438316852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715592930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20requires.20a.20universe.20annotation.3F/near/438316852\">said</a>:</p>\n<blockquote>\n<p>Does it work as <code>(foo)</code>?</p>\n</blockquote>\n<p>Seems like it, yeah</p>",
        "id": 438317057,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715592982
    },
    {
        "content": "<p>Comparing the traces, the relevant difference seems to be that for the one without a specific universe it fails to find anything for this term:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Debug.Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">no</span> <span class=\"n\">theorems</span> <span class=\"n\">found</span> <span class=\"n\">for</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">rewriting</span> <span class=\"o\">{</span> <span class=\"n\">unop</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">M.X.one.op</span><span class=\"o\">,</span> <span class=\"n\">one_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span><span class=\"o\">,</span> <span class=\"n\">mul_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span> <span class=\"o\">}</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">unop</span>\n\n<span class=\"o\">[</span><span class=\"n\">Debug.Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">no</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">simprocs</span> <span class=\"n\">found</span> <span class=\"n\">for</span> <span class=\"o\">{</span> <span class=\"n\">unop</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">M.X.one.op</span><span class=\"o\">,</span> <span class=\"n\">one_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span><span class=\"o\">,</span> <span class=\"n\">mul_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span> <span class=\"o\">}</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">unop</span>\n</code></pre></div>\n<p>whereas <code>foo.{v₁ + 1}</code> has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">foo.</span><span class=\"o\">{</span><span class=\"n\">v₁</span> <span class=\"bp\">+</span>\n          <span class=\"mi\">1</span><span class=\"o\">}:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n        <span class=\"n\">unop</span> <span class=\"o\">:=</span>\n          <span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">M.X.one.op</span><span class=\"o\">,</span> <span class=\"n\">one_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span><span class=\"o\">,</span> <span class=\"n\">mul_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span> <span class=\"o\">}</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"bp\">==&gt;</span> <span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">M.X.one.op</span><span class=\"o\">,</span> <span class=\"n\">one_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span><span class=\"o\">,</span> <span class=\"n\">mul_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Using <code>(foo)</code> has almost the same output there, just <code>(foo):1000</code> instead of <code>foo.{v₁ + 1}:1000</code>.</p>",
        "id": 438318202,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715593379
    },
    {
        "content": "<p>Are those first logs for <code>(foo)</code> or <code>foo</code>?</p>",
        "id": 438319245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715593691
    },
    {
        "content": "<p>I think the issue here is that <code>simp [foo]</code> is shorthand for <code>simp [@foo]</code>, and so you need to insert some other syntax to prevent the special case for identifiers taking over; either <code>()</code> or a universe annotation is enough to do that</p>",
        "id": 438319496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715593772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20requires.20a.20universe.20annotation.3F/near/438319245\">said</a>:</p>\n<blockquote>\n<p>Are those first logs for <code>(foo)</code> or <code>foo</code>?</p>\n</blockquote>\n<p>The first logs are for <code>foo</code>. <code>(foo)</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">):</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n        <span class=\"n\">unop</span> <span class=\"o\">:=</span>\n          <span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">M.X.one.op</span><span class=\"o\">,</span> <span class=\"n\">one_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span><span class=\"o\">,</span> <span class=\"n\">mul_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span> <span class=\"o\">}</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"bp\">==&gt;</span> <span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">M.X.one.op</span><span class=\"o\">,</span> <span class=\"n\">one_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span><span class=\"o\">,</span> <span class=\"n\">mul_hom</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 438319560,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715593794
    },
    {
        "content": "<p>Shouldn't it also work for <code>dsimp</code>? For <code>dsimp</code> even <code>foo.{v₁ + 1}</code> fails</p>",
        "id": 438320491,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1715594066
    },
    {
        "content": "<p>This works </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">Quiver.Hom.unop</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 438418869,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715623259
    },
    {
        "content": "<p>I am sure someone has a handy way to dump the keys for the two the cases. (I've got to go to Costco.)</p>",
        "id": 438419522,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715623458
    },
    {
        "content": "<p>But my guess from this is that the keys are getting crunched down too much to match</p>",
        "id": 438419721,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715623533
    },
    {
        "content": "<p>Another fix: make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Hom.unop#doc\">docs#Quiver.Hom.unop</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Hom.op#doc\">docs#Quiver.Hom.op</a> <code>abbrev</code>.</p>\n<p>Not sure of the impact of this.</p>",
        "id": 438783052,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715773483
    },
    {
        "content": "<p>Bonus: you don't even need <code>foo</code> anymore</p>",
        "id": 438783355,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715773572
    },
    {
        "content": "<p>Performance impact: <a href=\"http://speed.lean-fro.org/mathlib4/run-detail/72df5316-31cc-4c76-b571-906f13c0dcce\">http://speed.lean-fro.org/mathlib4/run-detail/72df5316-31cc-4c76-b571-906f13c0dcce</a> </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12936\">#12936</a></p>",
        "id": 439275562,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715971628
    },
    {
        "content": "<p>Some proofs became longer to write. But performance also improved.<br>\nSo... <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> are you happy with this solution?</p>",
        "id": 439320415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716002452
    },
    {
        "content": "<p><span aria-label=\"writing\" class=\"emoji emoji-270d\" role=\"img\" title=\"writing\">:writing:</span></p>",
        "id": 439481924,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716168831
    },
    {
        "content": "<p>Not concerned by the changes to proofs, just by <code>nolint simpVarHead</code>, which I think is bad news.</p>",
        "id": 439481972,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716168859
    },
    {
        "content": "<p>I responded to the comments there with agreement but I think broader discussion would be useful. </p>\n<p>Now that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Hom.unop_op#doc\">docs#Quiver.Hom.unop_op</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Hom.op_unop#doc\">docs#Quiver.Hom.op_unop</a> are covered by built in reduction rules, I thought we would be fine removing them from the <code>simp</code> tree.</p>",
        "id": 439566651,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716209245
    },
    {
        "content": "<p>But! Automation starts breaking immediately. Why? Well the following works fine for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Category.opposite#doc\">docs#CategoryTheory.Category.opposite</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Category.opposite</span> <span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">where</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span><span class=\"o\">⟩</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">X</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Whereas the current statement </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Category.opposite</span> <span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">where</span>\n  <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">g.unop</span> <span class=\"bp\">≫</span> <span class=\"n\">f.unop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span>\n  <span class=\"n\">id</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op</span>\n</code></pre></div>\n<p>is broken</p>",
        "id": 439566908,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716209340
    },
    {
        "content": "<p>Eg <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/optimal.20instance.20design.20for.20structure.20wrappers\">#lean4 &gt; optimal instance design for structure wrappers</a></p>",
        "id": 439567066,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716209399
    },
    {
        "content": "<p>Also, I've never seen a <code>simpVarHead</code> warning that isn't secretly provable with <code>by simp</code></p>",
        "id": 439568000,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716209722
    },
    {
        "content": "<p>Here is an example. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\" ⟶ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quiver.Hom</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CategoryStruct</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"𝟙\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">CategoryStruct.id</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" ≫ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">CategoryStruct.comp</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CategoryStruct.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">comp_id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Category</span> <span class=\"k\">in</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">comp_id</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Opposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">op</span> <span class=\"o\">::</span> <span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">α</span> <span class=\"s2\">\"ᵒᵖ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Opposite</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Opposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Quiver</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">opposite</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span>  <span class=\"n\">unop</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Hom.op</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">op</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Opposite.op</span> <span class=\"n\">f</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Hom.unop</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">unop</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Opposite.unop</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"c1\">-- we should remove this since it's proof is `simp` right? but doing so breaks the example</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Quiver.Hom.unop_op</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.op.unop</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"c1\">-- red flag!</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Quiver.Hom.op_unop</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.unop.op</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Quiver</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Quiver</span> <span class=\"n\">Category</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span>  <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f.unop</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op.unop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 439839947,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716304284
    },
    {
        "content": "<p>This takes the existing definitions in the library and makes <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Hom.op#doc\">docs#Quiver.Hom.op</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Hom.unop#doc\">docs#Quiver.Hom.unop</a> <code>abbrev</code>'s.</p>",
        "id": 439840082,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716304323
    },
    {
        "content": "<p>Now <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Hom.unop_op#doc\">docs#Quiver.Hom.unop_op</a> becomes a <code>simp only</code> so we should remove <code>@[simp]</code>.</p>",
        "id": 439840363,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716304407
    },
    {
        "content": "<p>But that breaks the example</p>",
        "id": 439840421,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716304426
    },
    {
        "content": "<p>If we change the <code>Quiver</code> instance on the opposite to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">opposite</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⟶</span>  <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>then </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Hom.op_unop'</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>works fine as does </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span>  <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">X</span><span class=\"o\">)))))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 439851875,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716307741
    },
    {
        "content": "<p>Neither of these work with the original syntax</p>",
        "id": 439851948,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716307768
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">theorems</span> <span class=\"k\">with</span> <span class=\"n\">bad</span> <span class=\"n\">keys</span> <span class=\"bp\">▼</span>\n  <span class=\"n\">comp_id</span><span class=\"o\">,</span> <span class=\"n\">key</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">CategoryStruct.comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CategoryStruct.id</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Hmm, that seems bad</p>",
        "id": 439858744,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716310009
    },
    {
        "content": "<p>If we go back to the original definition of <code>opposite</code>, then </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">theorems</span> <span class=\"k\">with</span> <span class=\"n\">bad</span> <span class=\"n\">keys</span> <span class=\"bp\">▼</span>\n  <span class=\"n\">Hom.op_unop</span><span class=\"o\">,</span> <span class=\"n\">key</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Hom</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">op</span> <span class=\"n\">_</span> <span class=\"n\">_.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">op</span> <span class=\"n\">_</span> <span class=\"n\">_.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_.1</span>\n</code></pre></div>\n<p>for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">diagnostics</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span>  <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">index</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 439859279,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716310171
    },
    {
        "content": "<p>What the heck! Should what namespace things live in affect the behavior of <code>simp</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\" ⟶ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quiver.Hom</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Opposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">op</span> <span class=\"o\">::</span> <span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">α</span> <span class=\"s2\">\"ᵒᵖ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Opposite</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Opposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Quiver</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">opposite</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span>  <span class=\"n\">unop</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Hom.op</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">op</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Opposite.op</span> <span class=\"n\">f</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Hom.unop</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">unop</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Opposite.unop</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Hom.op_unop</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.unop.op</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Hom.bar</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span>  <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 439860204,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716310501
    },
    {
        "content": "<p>I can't move messages to another thread so I just copied the last one.</p>",
        "id": 439862365,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716311142
    },
    {
        "content": "<p>Isn't the different namespace changing the name resolution of <code>op</code> and <code>unop</code> here?</p>",
        "id": 439882643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716317947
    },
    {
        "content": "<p>Yes, Matthew figured that out</p>",
        "id": 439882749,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716317984
    },
    {
        "content": "<p>Yes. But hover was tricking me</p>",
        "id": 439882780,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716317995
    },
    {
        "content": "<p>maybe you want to make <code>Hom.op</code> and <code>Hom.unop</code> protected</p>",
        "id": 439882794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716317999
    },
    {
        "content": "<p>My main issue is trying to figure out why the example at the start of the thread (EDIT: today!) didn’t work</p>",
        "id": 439883063,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716318065
    },
    {
        "content": "<p>If <code>X</code> is closed by <code>simp</code>, should I need to add <code>X</code> to the simp set?</p>",
        "id": 439883298,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716318131
    },
    {
        "content": "<p>We have a linter for this so I thought the answer was no</p>",
        "id": 439883417,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716318181
    },
    {
        "content": "<p>The example at the start runs counter to the expectation.</p>",
        "id": 439883505,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716318216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20requires.20a.20universe.20annotation.3F/near/439883298\">said</a>:</p>\n<blockquote>\n<p>If <code>X</code> is closed by <code>simp</code>, should I need to add <code>X</code> to the simp set?</p>\n</blockquote>\n<p>Depends</p>",
        "id": 439883895,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716318330
    },
    {
        "content": "<p>Possibly <code>simp</code> is simplifying <em>the equality itself</em>, in which case simp-nf shouldn't complain</p>",
        "id": 439884061,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716318366
    },
    {
        "content": "<p>The true test is whether the <em>LHS</em> gets simplified to the RHS (without simp seeing the equality)</p>",
        "id": 439884109,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716318389
    },
    {
        "content": "<p>Hmm. Can you point me to an example?</p>",
        "id": 439884878,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716318656
    },
    {
        "content": "<p>The issue goes away here with the <code>index := false</code> config option on lean4 master</p>",
        "id": 439885080,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716318725
    },
    {
        "content": "<p>Can't think of an actual example off the top of my head, but imagine we were making <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.eq_empty_iff_forall_not_mem#doc\">docs#Set.eq_empty_iff_forall_not_mem</a> a simp lemma and we had a simp lemma <code>foo (x): x ∉ fancySet</code>. Then <code>fancySet = ∅</code> can be proved by simp, but simp can't simplify <code>fancySet</code> to <code>∅</code>.</p>",
        "id": 439885820,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716319003
    },
    {
        "content": "<p>I see</p>",
        "id": 439886312,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716319165
    },
    {
        "content": "<p>Note that I'm not inventing anything. The <code>simpNF</code> linter already follows this logic.</p>",
        "id": 439886510,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716319226
    },
    {
        "content": "<p>This is the same behavior as in Lean 3?</p>",
        "id": 439887245,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716319485
    },
    {
        "content": "<p>Basically. The only difference is that sometimes simp applies extensionality on the fly using congruence lemmas, meaning that it might actually be able to simplify <code>fancySet</code> to <code>∅</code> in my toy example above. I don't really understand under which conditions this happens, though.</p>",
        "id": 439887558,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716319576
    },
    {
        "content": "<p>It looks like you should assign a <code>*</code> to any implicit argument taking <code>[self : Class]</code></p>",
        "id": 439935285,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716339205
    },
    {
        "content": "<p>And that structure eta has to be a bit more aggressive</p>",
        "id": 439935681,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716339477
    }
]