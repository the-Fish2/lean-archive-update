[
    {
        "content": "<p>I have a PR up currently, but it isn't passing CI. It tweaks one definition, that of <code>Fin.snoc</code>, to be consistent with <code>Fin.cons</code>.</p>\n<p>This is predictably causing minor breakages in various places. Most I can fix! I have a most mysterious one in the Analysis files, though. I can't seem to work out why it's happened or how to fix it.</p>\n<p>The PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/9571\">#9571</a>. The latest build is <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/7460747928/job/20299451883?pr=9571\">https://github.com/leanprover-community/mathlib4/actions/runs/7460747928/job/20299451883?pr=9571</a>. The error I'd like help with is in Mathlib/Analysis/Calculus/FDeriv/Analytic.lean.</p>",
        "id": 411924127,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704802822
    },
    {
        "content": "<p>My concern is that whatever is causing this to break in my PR, it indicates perhaps that these proofs are fairly brittle and need another look - it seems the tweak in definition is hence causing some kind of typeclass inference to fail.</p>",
        "id": 411935711,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704807224
    },
    {
        "content": "<p>It is something related to currying. In current mathlib this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">HasFPowerSeriesAt.hasStrictFDerivAt</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HasFPowerSeriesAt</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasStrictFDerivAt</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">continuousMultilinearCurryFin1</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">IsBigO.trans_isLittleO</span> <span class=\"o\">(</span><span class=\"n\">isBigO_image_sub_norm_mul_norm_sub</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">IsLittleO.of_norm_right</span> <span class=\"n\">_</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">isLittleO_iff_exists_eq_mul.2</span> <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">‚Äñ</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">EventuallyEq.rfl</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"n\">continuous_id.sub</span> <span class=\"n\">continuous_const</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">norm.tendsto'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">_root_.id</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">norm_zero</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but in your branch it gives the error (at the first line)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">IsBigO.trans_isLittleO</span> <span class=\"o\">(</span><span class=\"n\">isBigO_image_sub_norm_mul_norm_sub</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">isBigO_image_sub_norm_mul_norm_sub</span> <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"n\">y.1</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y.2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">y.1</span> <span class=\"bp\">-</span> <span class=\"n\">y.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">y.1</span> <span class=\"bp\">-</span> <span class=\"n\">y.2</span><span class=\"bp\">‚Äñ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p_1</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">f</span> <span class=\"n\">p_1.1</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">p_1.2</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"n\">continuousMultilinearCurryFin1</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">p_1.1</span> <span class=\"bp\">-</span> <span class=\"n\">p_1.2</span><span class=\"o\">))</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n    <span class=\"bp\">?</span><span class=\"n\">m.12631</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 411938122,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704808108
    },
    {
        "content": "<p>Ah, it seems refine rather than refine' gave different results...?</p>",
        "id": 411942024,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704809393
    },
    {
        "content": "<p>In that that's a different error</p>",
        "id": 411942054,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704809402
    },
    {
        "content": "<p>Not sure how to fix it though.</p>",
        "id": 411942262,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704809463
    },
    {
        "content": "<p><code>refine</code> is what <code>show term</code> gave me with current mathlib, I don't think it is really relevant.</p>",
        "id": 411942743,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704809635
    },
    {
        "content": "<p>Oh fair</p>",
        "id": 411942808,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704809646
    },
    {
        "content": "<p>It's just that the error I was getting was a failure to synthesise a Norm</p>",
        "id": 411942847,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704809662
    },
    {
        "content": "<p>Ultimately the issue appears to be that the proof uses (overuses?) definitional equality to work, and now something isn't fitting.</p>",
        "id": 411942975,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704809707
    },
    {
        "content": "<p>Yes, I noticed. I don't have any more time today (it is Lean together time!), but I can have a look tomorrow.</p>",
        "id": 411943003,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1704809717
    },
    {
        "content": "<p>Oh goodness yes so it is</p>",
        "id": 411943037,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704809728
    }
]