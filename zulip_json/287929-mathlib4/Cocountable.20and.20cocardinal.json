[
    {
        "content": "<p>I would like to generalise <code>cofinite</code> to <code>cocountable</code> and in fact <code>cocardinal</code> for any cardinal.  <code>cofinite</code> is defined through <code>Filter.comk</code>, for <code>cocountable</code> we recently introduced Filter.ofCountableUnion to provide an analogous tool.</p>\n<p>I actually want to do the analogous thing for<code>cocardinal</code>, which is the filter generated by the sets that have complements of a given cardinality. I have the proofs working, but I'm not sure if this is the preferred way of writing this, so please let me know! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.CountableInter</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cocountable</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ofCountableUnion</span> <span class=\"n\">Set.Countable</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">hs</span> <span class=\"n\">hs2</span> <span class=\"bp\">↦</span> <span class=\"n\">Countable.sUnion</span> <span class=\"n\">hs</span> <span class=\"n\">hs2</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">ht</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Countable.mono</span> <span class=\"n\">a</span> <span class=\"n\">ht</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Construct a filter with cardinal intersection property. This constructor deduces</span>\n<span class=\"sd\">`Filter.univ_sets` and `Filter.inter_sets` from the cardinal intersection property. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Filter.ofCardinalInter</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"bp\">⋂₀</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n  <span class=\"n\">univ_sets</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">sInter_empty</span> <span class=\"n\">α</span> <span class=\"bp\">▸</span> <span class=\"n\">hp</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">empty_subset</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_le</span><span class=\"o\">]</span>\n  <span class=\"n\">sets_of_superset</span> <span class=\"o\">:=</span> <span class=\"n\">h_mono</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">inter_sets</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"n\">hs</span> <span class=\"n\">ht</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sInter_pair</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">▸</span> <span class=\"n\">hp</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ge_trans</span> <span class=\"n\">hc</span> <span class=\"n\">Cardinal.mk_le_aleph0</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">insert_subset_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">singleton_subset_iff.2</span> <span class=\"n\">ht</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Filter.ofCardinalUnion</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hUnion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">⋃₀</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hmono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">ofCardinalInter</span> <span class=\"n\">hc</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">S</span> <span class=\"n\">hSc</span> <span class=\"n\">hSp</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">hsub</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_setOf_eq</span><span class=\"o\">,</span> <span class=\"n\">compl_sInter</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hUnion</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ge_trans</span> <span class=\"n\">hSc</span> <span class=\"n\">Cardinal.mk_image_le</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ball_image_iff.2</span> <span class=\"n\">hSp</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hmono</span> <span class=\"n\">_</span> <span class=\"n\">ht</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">compl_subset_compl.2</span> <span class=\"n\">hsub</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Of course, this would generalise to CardinalInterFilter under a suitable definition for these.</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Filter.countableInter_ofCardinalnter</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"bp\">⋂₀</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">CountableInterFilter</span> <span class=\"o\">(</span><span class=\"n\">Filter.ofCardinalInter</span> <span class=\"n\">hc</span> <span class=\"n\">l</span> <span class=\"n\">hp</span> <span class=\"n\">h_mono</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">countable_sInter_mem</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">hS</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">hp</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ge_trans</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"n\">Countable.le_aleph0</span> <span class=\"n\">hS</span><span class=\"o\">))</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cocardinal</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ofCardinalUnion</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">Cardinal.mk</span> <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hc</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_eq_aleph0</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 421209118,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707817861
    },
    {
        "content": "<p>I can also make a PR for this, but I'm not sure where to put these (<code>cocountable</code> should probably go to <code>Order.Filter.CountableInter</code>, but I'm not sure about the other ones).</p>",
        "id": 421209629,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707818029
    },
    {
        "content": "<p>This is now <a href=\"https://github.com/leanprover-community/mathlib4/pull/10515\">#10515</a>, I'm happy to hear feedback! As the file for <code>Cofinite.lean</code> says that we should have versions for other cardinalities, do we want them all in the same file (or even in one more general <code>def</code>?) or does the way I currently do it (putting cofinite, cocountable and cocardinal in different places) look fine?</p>",
        "id": 421337173,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707863912
    },
    {
        "content": "<p>What files about cardinals do you have to <code>import</code> for the general definition?</p>",
        "id": 421337572,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707864137
    },
    {
        "content": "<p>currently I'm importing <code>Mathlib.Order.Filter.CountableInter</code>, I think that passed shake (but running shake on my device very often tells me that all imports are fine, and then CI tells me otherwise, so let's see..)</p>",
        "id": 421337697,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707864227
    },
    {
        "content": "<p>Could you please add <code>mem_cocardinal</code> lemma that unfolds the definition?</p>",
        "id": 421337800,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707864281
    },
    {
        "content": "<p>You're using too many <code>_</code>s in the definition.</p>",
        "id": 421337871,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707864318
    },
    {
        "content": "<p>I mean, it's OK to use them in the proof but not on the first <code>apply</code> line of <code>def cocardinal</code>.</p>",
        "id": 421337984,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707864368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Cocountable.20and.20cocardinal/near/421337871\">said</a>:</p>\n<blockquote>\n<p>You're using too many <code>_</code>s in the definition.</p>\n</blockquote>\n<p>Yes, I agree. Should I just fill in the necessary terms there to make it look better?</p>",
        "id": 421337987,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707864369
    },
    {
        "content": "<p>Yes, please. And add <code>mem_cocardinal</code> to be 100% sure that you've defined what you wanted.</p>",
        "id": 421338028,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707864399
    },
    {
        "content": "<p>That's a good point, I'll add that and other basic API tomorrow! Do you think that the current definition (in particular the way I'm writing <code>hc</code>) is fine?</p>",
        "id": 421338103,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707864443
    },
    {
        "content": "<p>Yes, this is the standard way of assuming that a cardinal is infinite.</p>",
        "id": 421338221,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707864493
    },
    {
        "content": "<p>Great! I'd also like to define a CardinalInterFilter at some point, which I could do in tandem with cocardinal, or I can do it in a later PR. What would you say?</p>",
        "id": 421338280,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707864537
    },
    {
        "content": "<p>If you want your definition to give <code>cofinite</code> for <code>c = aleph0</code>, then you can use <code>&lt;</code> instead of <code>≤</code>. Then you'll need <code>Order.succ aleph0</code> to get <code>cocountable</code> etc.</p>",
        "id": 421338299,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707864548
    },
    {
        "content": "<p>I have to stop for today, but I'll give it a go tomorrow!</p>",
        "id": 421338323,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707864570
    },
    {
        "content": "<p>OTOH, it will be much easier to define the filter of sets that are complement of something of cardinality strictly less than continuum.</p>",
        "id": 421338433,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707864618
    },
    {
        "content": "<p>My thought was to get cofinite for c &lt; aleph0, so that cocardinal exactly picks up where cofinite stops. I could deduce cocountable as a special case of cocardinal if we like that?</p>",
        "id": 421338441,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707864623
    },
    {
        "content": "<p>You can't get <code>&lt;</code> version from <code>≤</code> version but you can get <code>≤</code> version from <code>&lt;</code> version.</p>",
        "id": 421338560,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707864718
    },
    {
        "content": "<p>I was a bit unclear, what I meant was that, when you would like to have c &lt; aleph0, you use cofinite, whereas if you would like to have c &gt;= aleph0, you use cocardinal. </p>\n<p>On second thought I do agree it is better to go for full generality indeed and define <code>hc</code> in terms of <code>Cardinal.aleph0 &lt; c</code>. I'll do that as well tomorrow, thank you</p>",
        "id": 421338819,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707864864
    },
    {
        "content": "<p>I'm surprised that you never use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Cardinal.mul_lt_of_lt#doc\">docs#Cardinal.mul_lt_of_lt</a> or something like that.</p>",
        "id": 421338837,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707864875
    },
    {
        "content": "<p><code>#s &lt; c</code>, not <code>aleph0 &lt; c</code></p>",
        "id": 421338897,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707864900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Cocountable.20and.20cocardinal/near/421338897\">said</a>:</p>\n<blockquote>\n<p><code>#s &lt; c</code>, not <code>aleph0 &lt; c</code></p>\n</blockquote>\n<p>yes, you're right!</p>",
        "id": 421338995,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707864953
    },
    {
        "content": "<p>I think that some of these <code>_</code> are filled with something you didn't want to have there.</p>",
        "id": 421339076,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707864990
    },
    {
        "content": "<p>That's why the proof doesn't need advanced lemmas about cardinals.</p>",
        "id": 421339111,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707865014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Cocountable.20and.20cocardinal/near/421339111\">said</a>:</p>\n<blockquote>\n<p>That's why the proof doesn't need advanced lemmas about cardinals.</p>\n</blockquote>\n<p>Let me make _-free proofs tomorrow, thank you for pointing this out!</p>",
        "id": 421339154,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707865041
    },
    {
        "content": "<p>I've rewritten in terms of <code>&lt;</code> and removed most of the <code>_</code>, but I'm having trouble closing the last <code>sorry</code> (I'd think the result should be true at least, it is a rather basic statement about cardinalities but I sometimes get confused by these) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Filter</span>\n\n<span class=\"sd\">/-- Construct a filter with cardinal intersection property. This constructor deduces</span>\n<span class=\"sd\">`Filter.univ_sets` and `Filter.inter_sets` from the cardinal intersection property. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ofCardinalInter</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"bp\">⋂₀</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n  <span class=\"n\">univ_sets</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">sInter_empty</span> <span class=\"n\">α</span> <span class=\"bp\">▸</span> <span class=\"n\">hp</span> <span class=\"bp\">∅</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">empty_subset</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_eq_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">gt_of_ge_of_gt</span> <span class=\"n\">hc</span> <span class=\"n\">Cardinal.aleph0_pos</span>\n  <span class=\"n\">sets_of_superset</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">↦</span> <span class=\"n\">h_mono</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span>\n  <span class=\"n\">inter_sets</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"n\">hs</span> <span class=\"n\">ht</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sInter_pair</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">▸</span> <span class=\"n\">hp</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">insert_subset_iff.2</span> <span class=\"o\">⟨</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">singleton_subset_iff.2</span> <span class=\"n\">ht</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">gt_of_ge_of_gt</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.lt_aleph0_of_finite</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Construct a filter sets whose complements satisfy a property that is stable under unions</span>\n<span class=\"sd\">with a certain cardinality. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ofCardinalUnion</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hUnion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">⋃₀</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hmono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">.</span><span class=\"n\">ofCardinalInter</span> <span class=\"n\">hc</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">S</span> <span class=\"n\">hSc</span> <span class=\"n\">hSp</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">hsub</span> <span class=\"bp\">↦</span> <span class=\"n\">hmono</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"n\">ht</span> <span class=\"n\">t</span><span class=\"bp\">ᶜ</span> <span class=\"o\">(</span><span class=\"n\">compl_subset_compl.2</span> <span class=\"n\">hsub</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_setOf_eq</span><span class=\"o\">,</span> <span class=\"n\">compl_sInter</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hUnion</span> <span class=\"o\">(</span><span class=\"n\">compl</span> <span class=\"bp\">''</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">Cardinal.mk_image_le</span> <span class=\"n\">hSc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ball_image_iff.2</span> <span class=\"n\">hSp</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The filter defined by all sets that have a complement with at most cardinality `c`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">cocardinal</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ofCardinalUnion</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">Cardinal.mk</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">hS</span> <span class=\"n\">hSc</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Cardinal.mk_sUnion_le</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Cardinal.mul_lt_of_lt</span> <span class=\"n\">hc</span> <span class=\"n\">hS</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">hSc</span> <span class=\"n\">_</span> <span class=\"n\">ht</span> <span class=\"bp\">↦</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk_le_mk_of_subset</span> <span class=\"n\">ht</span><span class=\"o\">)</span> <span class=\"n\">hSc</span>\n</code></pre></div>",
        "id": 421409109,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707904568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Cocountable.20and.20cocardinal/near/421338028\">said</a>:</p>\n<blockquote>\n<p>Yes, please. And add <code>mem_cocardinal</code> to be 100% sure that you've defined what you wanted.</p>\n</blockquote>\n<p>If you add </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_cocardinal</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.aleph0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">@</span><span class=\"n\">cocardinal</span> <span class=\"n\">α</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"bp\">↔</span> <span class=\"n\">Cardinal.mk</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n</code></pre></div>\n<p>below the def of <code>cocardinal</code>, you get this! I'll make the commit when I closed the last sorry!</p>",
        "id": 421410591,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707905041
    },
    {
        "content": "<p>I've added this to <a href=\"https://github.com/leanprover-community/mathlib4/pull/10515\">#10515</a> by the way, build is only failing because of the <code>sorry</code>, as far as I can tell.</p>",
        "id": 421421217,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707908546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Cocountable.20and.20cocardinal/near/421421217\">said</a>:</p>\n<blockquote>\n<p>I've added this to <a href=\"https://github.com/leanprover-community/mathlib4/pull/10515\">#10515</a> by the way, build is only failing because of the <code>sorry</code>, as far as I can tell.</p>\n</blockquote>\n<p>I can close the goal if I assume that <code>c</code> is a regular cardinal (I've committed this change now) as I then have access to <code>Cardinal.iSup_lt_of_isRegular</code>. Is that the right approach, or is there some proof possible where <code>cocardinal</code> only needs to assume <code>hc : Cardinality.aleph0 ≤ c</code>?</p>",
        "id": 421653956,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708003854
    },
    {
        "content": "<p>I don't know</p>",
        "id": 421703935,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708017473
    },
    {
        "content": "<p>Possibly, the \"lt\" idea was not as good as I thought.</p>",
        "id": 421704047,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708017500
    },
    {
        "content": "<p>Note that you get a filter for any infinite cardinal, just not a <code>c</code>-intersection filter for some <code>c</code>.</p>",
        "id": 421704182,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708017556
    },
    {
        "content": "<p>Yes, that is true. The point is of course to build a specific <code>cocardinal</code> filter that will then have a nice <code>CardinalInterFilter</code> property. For this, we need the <code>iSup</code> of <code>c</code> values, all at most <code>c</code>, to be equal to <code>c</code> again, for which we need to assume that <code>c</code> is regular (at least, based on current tools in Mathlib. I'm not too familiar with all mathematical nuances here)</p>",
        "id": 421704894,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708017841
    }
]