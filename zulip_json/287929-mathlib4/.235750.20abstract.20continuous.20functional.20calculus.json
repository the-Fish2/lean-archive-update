[
    {
        "content": "<p>This PR would be marked RFC, but we don't have that label. In it I am developing an API that will work for the continuous functional calculus in unital algebras. If you are interested, please have a look and share your thoughts. It's kind of a big undertaking. I've thought a lot about it, but I'm always happy to have improvements.</p>",
        "id": 373035666,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688683411
    },
    {
        "content": "<p>I've just created that label and added it to your PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a>.</p>",
        "id": 373119444,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688718149
    },
    {
        "content": "<p>I also hope to have some comments eventually but probably not for at least a week.</p>",
        "id": 373119605,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688718181
    },
    {
        "content": "<p>I will have a look</p>",
        "id": 373123963,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688719069
    },
    {
        "content": "<p>After many months, a completely new version is available for review.</p>",
        "id": 422336053,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708397721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"690437\">@Omar Mohsen</span> as promised: see <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a> for the initial API for the continuous functional calculus. Feel free to ask questions about the design, or even review the code.</p>",
        "id": 422342356,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708402394
    },
    {
        "content": "<p>It would be nice to have some explanation for people who are not familiar with the concept.</p>",
        "id": 422358060,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708412535
    },
    {
        "content": "<p>IMHO, as we move past the standard undergraduate program, it's important to add these explanations or at least provide links to relevant publicly available texts on the Internet as well as textbooks.</p>",
        "id": 422358323,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708412710
    },
    {
        "content": "<p>Also, it may be worthwile to explain why we need an abstract version (this was not clear to me until I started to tinker with it) where everyone just uses \"the\" functional calculus (the answer being that it's hard to merge all three use cases in a single definition).</p>",
        "id": 422376095,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708421003
    },
    {
        "content": "<p>I have updated the module docstring with an example of the continuous functional calculus on matrices, as well as an explanation of why we need an abstract version.</p>",
        "id": 422429256,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708439535
    },
    {
        "content": "<p>I haven't provided references yet, but I'll do that at some point too.</p>",
        "id": 422429367,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708439566
    },
    {
        "content": "<p>I read the whole thing. I like it.  </p>\n<p>I don't understand why the 4 lemmas on  functional calculus of constant functions are tagged with simp</p>",
        "id": 422455666,
        "sender_full_name": "Omar Mohsen",
        "timestamp": 1708446685
    },
    {
        "content": "<p>Do you mean \"<em>not</em> tagged with <code>simp</code>\"?</p>",
        "id": 422456268,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708446850
    },
    {
        "content": "<p>yeah sry thats what I meant</p>",
        "id": 422456326,
        "sender_full_name": "Omar Mohsen",
        "timestamp": 1708446867
    },
    {
        "content": "<p>I guess <code>cfc_zero</code> and <code>cfc_zero'</code> could be, but none of the others can because they would never fire (because of the <code>ha</code> hypothesis).</p>",
        "id": 422456754,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708446992
    },
    {
        "content": "<p>Almost all lemmas here cannot be marked <code>simp</code> because of the autoParam arguments.</p>",
        "id": 422456812,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708447015
    },
    {
        "content": "<p>Ok I see. Btw: can you explain why </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cfc_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>doesn't work while </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cfc_one..</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>does</p>",
        "id": 422457131,
        "sender_full_name": "Omar Mohsen",
        "timestamp": 1708447105
    },
    {
        "content": "<p>I don't entirely understand this myself, but it definitely is related to the <code>autoParam</code>s.</p>",
        "id": 422457420,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708447198
    },
    {
        "content": "<p>It has something to do with how Lean does unification when performing the rewrite. I think <code>cfc_one ..</code> inserts underscore <em>up until but not including any</em> autoParams. Lean then tries to unify this with the goal, and, upon doing so, applies autoParam to complete the term.</p>\n<p>In contrast, I think <code>cfc_one</code> by causes Lean to fail to try to unify for some reason, but I'm not sure why.</p>",
        "id": 422457916,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708447370
    },
    {
        "content": "<p>To be honest, I kind of consider this a bug, but I haven't brought it up yet.</p>",
        "id": 422458089,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708447441
    },
    {
        "content": "<p>OK thx !</p>",
        "id": 422458659,
        "sender_full_name": "Omar Mohsen",
        "timestamp": 1708447625
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/270676-lean4/topic/autoParam.20cause.20.60rw.60.20not.20to.20unify/near/422459446\">this thread</a></p>",
        "id": 422459583,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708447908
    }
]