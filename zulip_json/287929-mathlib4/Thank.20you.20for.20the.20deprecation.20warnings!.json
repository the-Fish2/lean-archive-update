[
    {
        "content": "<p>This time when I updated mathlib, most of the functions that have been renamed come with deprecation warnings that say what the new function is.  This has made this most recent upgrade experience far more pleasant than the last time.  Thank you! </p>\n<p>One feature request: it would be cool if the deprecation warnings produced clickable things in VSCode that did the substitution, since often just doing the name replace works (and even if it doesn't one can then edit to fix).</p>",
        "id": 420078161,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707234857
    },
    {
        "content": "<p>I have not really thought about this, but it might be tricky to get the substitution to work automatically, mostly due to dot-notation and what the new name should look like.</p>\n<p>Someone else may have a better answer, though!</p>",
        "id": 420079281,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707235177
    },
    {
        "content": "<p>(I am not saying that it is impossible, but that a simple-minded replacement would not \"Just work\".)</p>",
        "id": 420079648,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707235266
    },
    {
        "content": "<p><del>If it's purely a name change</del> In some cases, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">oldname</span> <span class=\"o\">:=</span> <span class=\"n\">newname</span>\n</code></pre></div>\n<p>there will indeed be a code action (<a href=\"#narrow/stream/270676-lean4/topic/machineApplicableDeprecated.20tag.20attribute\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/machineApplicableDeprecated.20tag.20attribute</a>).</p>",
        "id": 420080612,
        "sender_full_name": "Richard Copley",
        "timestamp": 1707235531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> the link that you shared highlights that the auto-deprecated script that I used produces the wrong syntax for automatic replacement to work.</p>\n<p><span class=\"user-mention\" data-user-id=\"514145\">@Geoffrey Irving</span>, if your deprecated lemmas were of the <code>op_norm</code>-form, then auto-replacement might have worked better if I had understood how this worked...</p>",
        "id": 420082040,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707235926
    },
    {
        "content": "<p>Hopefully, <a href=\"https://github.com/leanprover-community/mathlib4/pull/10302\">#10302</a> uses the correct syntax and allows auto-replacement of the deprecated <code>op_norm</code> statements.</p>",
        "id": 420088122,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707237564
    },
    {
        "content": "<p>Very cool, thank you!  Yep, getting the simple cases right gets nearly all of the value.</p>",
        "id": 420091794,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707238567
    },
    {
        "content": "<p>In case someone comes here, with the PR, the deprecation code action works with the lemmas that were auto-deprecated.  However, even the deprecation does not seem to work if you use a deprecated lemma with dot-notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Alias</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">Nat.sup</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ_pos</span>\n\n<span class=\"c1\">-- code action works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m.succ</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sup</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"k\">in</span>\n<span class=\"c1\">-- code action works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m.succ</span> <span class=\"o\">:=</span> <span class=\"n\">sup</span> <span class=\"n\">m</span>\n\n<span class=\"c1\">-- no deprecation notice</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m.succ</span> <span class=\"o\">:=</span> <span class=\"n\">m.sup</span>\n</code></pre></div>",
        "id": 420117393,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707246903
    },
    {
        "content": "<p>Not even a warning?</p>",
        "id": 420118951,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707247484
    },
    {
        "content": "<p>No, not even a warning.</p>",
        "id": 420118981,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707247496
    },
    {
        "content": "<p>Sounds like that should be a bug report for core.</p>",
        "id": 420181571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707281841
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover/lean4/issues/3270\">issue #3270</a></p>",
        "id": 420198221,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707293086
    },
    {
        "content": "<p>There was a deprecation warning in <code>Topology/Compactness/Lindelof</code> which I tried to fix by carrying out the suggested change (from <code>subset_trans</code> to <code>embedding_inclusion</code>), but this involved more than just replacing the name of the result, as the result from <code>embedding_inclusion</code> was an <code>Embedding</code>. </p>\n<p>My build on <a href=\"https://github.com/leanprover-community/mathlib4/pull/10376\">#10376</a> failed when I committed without fixing the deprecation warning, so in order to get my PR to build, I would've been forced to figure out how to do the proof with the intermediate Embedding step, which feels like it adds quite some overhead if you want to quickly add another result which happens to be in the same file as the deprecated step. In this case, <code>aesop</code> quickly gave me a different proof that didn't use embedding. </p>\n<p>My question is, is this efficient behaviour, that the build fails when I don't change a deprecated step that doesn't have anything to do with my contribution? Or am I misinterpreting what happened?</p>",
        "id": 420618918,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707472829
    },
    {
        "content": "<p>I don't think a new warning should come up and block you if you make an unrelated change, if I understand you correctly</p>",
        "id": 420622990,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707474331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Thank.20you.20for.20the.20deprecation.20warnings!/near/420622990\">said</a>:</p>\n<blockquote>\n<p>I don't think a new warning should come up and block you if you make an unrelated change, if I understand you correctly</p>\n</blockquote>\n<p>Yes, exactly, that would be what I thought as well. What happened was the following: </p>\n<p>The warning was there when I opened the file in VS code. The build failed on my first commit because I forgot to check the lint, but then the build failed on my second commit, due to the presence of a deprecated function in the file, which was unrelated to my change</p>",
        "id": 420623401,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707474466
    },
    {
        "content": "<p>Ah, I see what happened</p>",
        "id": 420623577,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707474526
    },
    {
        "content": "<p>The code on master uses <code>_root_.subset_trans</code> which isn't deprecated. You added a new import, which caused <code>subset_trans</code> to resolve to <code>TopologicalSpace.subset_trans</code> instead, and this one is deprecated.</p>",
        "id": 420623701,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707474584
    },
    {
        "content": "<p>So you could make this change instead:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-  have hiU : ∀ i ∈ s, f i ⊆ ⋃ i, U i := fun _ is ↦ subset_trans (subset_biUnion_of_mem is) hUcover</span>\n<span class=\"gi\">+  have hiU : ∀ i ∈ s, f i ⊆ ⋃ i, U i := fun _ is ↦</span>\n<span class=\"gi\">+    _root_.subset_trans (subset_biUnion_of_mem is) hUcover</span>\n</code></pre></div>",
        "id": 420623825,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707474618
    },
    {
        "content": "<p>Okay, that makes sense, I'll fix that line as I think it is more elegant. Would it be good to have something (in general) that avoids that <code>fun</code> resolves to something like <code>A.fun</code> rather than <code>B.fun</code> if the former is deprecated? Or is this horribly complicated to add? I guess it would prevent issues like the one I just ran into.</p>",
        "id": 420624295,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707474786
    },
    {
        "content": "<p>The systematic use of <code>deprecated</code> in Mathlib is very recent.  There are several improvements that would be great, not necessarily hard to implement.  There just has not been enough time to really write them, I think.</p>",
        "id": 420624659,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707474910
    },
    {
        "content": "<p>I'm not convinced that deprecation should affect name resolution. If this particular theorem hadn't been deprecated, you'd also have hit a weird error because the signature no longer matched</p>",
        "id": 420629954,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707476789
    },
    {
        "content": "<p>In case people aren't aware of it, <a href=\"https://mathlib-changelog.org/v4\">Mathlib Changelog</a> is a useful tool when you need to figure out what happened to some declaration when you're upgrading.</p>",
        "id": 420701383,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707500664
    }
]