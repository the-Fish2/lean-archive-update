[
    {
        "content": "<p>I wanted to ask for feedback on a refactor I'm working on at <a href=\"https://github.com/leanprover-community/mathlib4/pull/10856\">#10856</a>, since it is somewhat low-level in the MeasureTheory library and I'd like to make sure I'm doing it in the best way. I also am not sure if there is standard terminology related to this construction, or a good reference for it. </p>\n<p>The idea is to generalize <code>NullMeasurableSpace</code> to measurability modulo an arbitrary sigma-filter. For example the main definitions are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CountableInterFilter</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- The `MeasurableSpace` of sets which are measurable with respect to a given σ-algebra `m`</span>\n<span class=\"sd\">on `α`, modulo a given σ-filter `l` on `α`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">EventuallyMeasurableSpace</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">MeasurableSet'</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">t</span>\n  <span class=\"n\">measurableSet_empty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSet.empty</span><span class=\"o\">,</span> <span class=\"n\">EventuallyEq.refl</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">⟩</span>\n  <span class=\"n\">measurableSet_compl</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hts</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"n\">ht.compl</span><span class=\"o\">,</span> <span class=\"n\">hts.compl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">measurableSet_iUnion</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">choose</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">hts</span> <span class=\"n\">using</span> <span class=\"n\">hs</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSet.iUnion</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">EventuallyEq.countable_iUnion</span> <span class=\"n\">hts</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- We say a set `s` is and `EventuallyMeasurableSet` with respect to a given</span>\n<span class=\"sd\">σ-algebra `m` and σ-filter `l` if it differs from a set in `m` by a set in</span>\n<span class=\"sd\">the dual ideal of `l`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">EventuallyMeasurableSet</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">MeasurableSet</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">EventuallyMeasurableSpace</span>\n</code></pre></div>\n<p>And then for example I redefine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">NullMeasurableSpace.instMeasurableSpace</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">NullMeasurableSpace</span> <span class=\"n\">α</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">EventuallyMeasurableSpace</span> <span class=\"n\">α</span> <span class=\"n\">inferInstance</span> <span class=\"o\">(</span><span class=\"n\">Measure.ae</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 422876181,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1708625633
    },
    {
        "content": "<p>Do you have specific filters in mind?</p>",
        "id": 423123634,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708741968
    },
    {
        "content": "<p>With your proposed change we can move parts of the theory about <code>AEMeasurable</code>/<code>NullMeasurable</code> functions to <code>MeasurableSpace</code>.</p>",
        "id": 423123794,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708742114
    },
    {
        "content": "<p>The main reason I want to do this is to apply it with the <code>residual</code> filter to get the Baire measurable sets.</p>",
        "id": 423123915,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1708742227
    },
    {
        "content": "<p>And yeah, I'd like to move lemmas about Null measurability that don't actually have anything to do with Measure as you said, so as to not reprove them for Baire measurability</p>",
        "id": 423124303,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1708742599
    },
    {
        "content": "<p>TIL that Baire measurability is a thing. When people need it?</p>",
        "id": 423124653,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708742981
    },
    {
        "content": "<p>(I hope it didn't sound like I doubt that they're useful; it's about me not knowing relevant parts of mathematics)</p>",
        "id": 423125338,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708743600
    },
    {
        "content": "<p>For example, the Kuratowski-Ulam theorem, which I have a lean 3 formalization of, is an analogue of Fubini's theorem for the <code>residual</code> filter. It says for a subset of the plane, residually many horizontal slices are residual iff residually many vertical slices are residual. </p>\n<p>Like Fubini, it requires that the set be Baire measurable in the plane.</p>",
        "id": 423125954,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1708744035
    },
    {
        "content": "<p>It also features heavily in the theory of Polish groups, which are just topological groups where the topology is Polish. Here, it tends to be the most useful regularity property of Borel sets/functions, since there is not necessarily a Haar measure. </p>\n<p>For example, a very nice result is that Baire measurable homomorphisms between Polish groups are automatically continuous, from one which can conclude that if a group has a group topology compatible with some Borel structure, that topology is unique.</p>",
        "id": 423126440,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1708744418
    },
    {
        "content": "<p>These are just some examples of course. It shows up all over descriptive set theory.</p>",
        "id": 423126582,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1708744543
    },
    {
        "content": "<p>So many things to learn...</p>",
        "id": 423127123,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708745011
    },
    {
        "content": "<p>Pinging <span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> since I think this change would be relevant for <a href=\"https://github.com/leanprover-community/mathlib4/pull/7076\">#7076</a></p>",
        "id": 423157601,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708769865
    },
    {
        "content": "<p>It looks like <a href=\"https://github.com/leanprover-community/mathlib4/pull/7076\">#7076</a> only defines the \"conull\" filter for now, but if there is a plan to define \"null-measurable\" subsets of a manifold in the future, then I agree</p>",
        "id": 423172186,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1708783088
    },
    {
        "content": "<p>Ah right, sorry for the confusion</p>",
        "id": 423183806,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1708790853
    },
    {
        "content": "<p>IMHO, we should define <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=dimH#doc\">docs#dimH</a> for manifolds and get \"away from codimension <code>r</code>\" filter.</p>",
        "id": 423185025,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708791813
    },
    {
        "content": "<p>But I had some issues with convexity when I tried, don't remember the details.</p>",
        "id": 423185053,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708791839
    }
]