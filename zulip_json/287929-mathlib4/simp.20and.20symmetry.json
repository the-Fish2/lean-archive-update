[
    {
        "content": "<p><code>simp</code> simplifies <code>x ^ 2 = 0</code> to <code>x = 0</code> (in suitable circumstances), but leaves <code>0 = x ^ 2</code> alone.<br>\nWould it make sense to have a <code>simproc</code> that rewrites <code>0 = whatever</code> to <code>whatever = 0</code> before looking for lemmas that can be applied?<br>\nThis is just a thought I had after noticing the behavior mentioned at the beginning and after listening to Leo talking about <code>simproc</code>s...</p>",
        "id": 412829108,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705250783
    },
    {
        "content": "<p>We could also have a simproc rewriting <code>x ≥ 0</code> to <code>0 ≤ x</code></p>",
        "id": 412829373,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1705251055
    },
    {
        "content": "<p>I'm not sure you need a simproc here.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span> <span class=\"bp\">↓</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"c1\">-- ⊢ x = 0</span>\n</code></pre></div>\n<p>Though perhaps a simproc would be more efficient than this lemma.</p>",
        "id": 412829496,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705251162
    },
    {
        "content": "<p>It's annoying that I can't easily find out what that down-arrow is doing on mobile (unless <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=simp#doc\">docs#simp</a> now works...) (edit : nope)</p>",
        "id": 412830494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705251955
    },
    {
        "content": "<p>It means \"apply this simp lemma before simplifying subexpressions.\" You can use it before lemmas in a list of simp lemmas too.</p>",
        "id": 412831053,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705252337
    },
    {
        "content": "<p>The default is <code>@[simp ↑]</code>, which means \"apply this simp lemma after simplifying subexpressions\". You could place <code>↑</code> before simp lemmas too, but there's no point since it's the default.</p>",
        "id": 412831100,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705252393
    },
    {
        "content": "<p>I'll claim that these are respectively known as \"pre-simp lemmas\" and \"(post-)simp lemmas\". (These words don't appear in the lean4 repository though, so this a normative claim rather than a descriptive one.)</p>",
        "id": 412831203,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705252456
    },
    {
        "content": "<p>I don't really know how to decide whether it should be a <code>@[simp ↓]</code> lemma or not. It would work fine as just a <code>@[simp]</code> lemma too. Another option is making be high-priority to be sure it triggers before anything else. Pre-simp lemmas effectively have priority infinity compared to post-simp lemmas.</p>",
        "id": 412831398,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705252663
    }
]