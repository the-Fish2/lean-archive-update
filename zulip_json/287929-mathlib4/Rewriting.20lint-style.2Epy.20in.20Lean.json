[
    {
        "content": "<p>I have \"just\" rewritten most of <code>lint-style.py</code> in Lean: more specifically:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12928\">#12928</a> rewrites the <code>set_option</code> linter in syntax, as an honest syntax linter<br>\n(This also means better coverage.)</p>\n</li>\n<li>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13199\">#13199</a> rewrites most remaining linters as text-based Lean linters. For simplicity, that PR depends on this one - but feel free to review it already. (The file <code>Tactic/Linter/TextBased.lean</code> defines the linter; the other changes are from the previous PR or PRed separately.)</p>\n</li>\n</ul>\n<p>I am looking particularly for feedback on</p>\n<ul>\n<li>any performance aspects I have overlooked? I've gone through at least one round of macro-optimising all checkers; now they're not abyssimally slow any more: but I'm sure they could be faster!</li>\n<li>thoughts on integrating this into mathlib</li>\n<li>taking a look at the spin-off PRs, particularly <a href=\"https://github.com/leanprover-community/mathlib4/pull/12928\">#12928</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/13212\">#13212</a> (but <a href=\"https://github.com/leanprover-community/mathlib4/pull/13203\">#13203</a> is also welcome)</li>\n</ul>",
        "id": 440651284,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716657508
    },
    {
        "content": "<p>Help rewriting the remaining linters is also most welcome: these are</p>\n<ul>\n<li>the \"missing module docstring\" linter -&gt; can or should this become part of the docBlame linter?</li>\n<li>\"the second line is not correctly indented\" -&gt; long-term, this should become part of a formatter...</li>\n<li>\"space after \"←\", in tactic lists (but not when this refers to monads) -&gt; this should become a syntax linter</li>\n<li>rewriting the non-terminal simp linter: I think the best way is to land <a href=\"https://github.com/leanprover-community/mathlib4/pull/11821\">#11821</a>, after ironing out whatever kinks remain.</li>\n</ul>",
        "id": 440651289,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716657512
    },
    {
        "content": "<p>For writing the remaining linters, note that <a href=\"https://github.com/leanprover-community/mathlib4/pull/11520\">#11520</a> (which isn’t quite ready, but does work) might be relevant/convenient: it allows us to lint syntax by matching on it in <code>macro_rules</code> style, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">linting_rules</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">style</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo_stx</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">msg</span>\n</code></pre></div>",
        "id": 440651673,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1716657892
    },
    {
        "content": "<p>(“String-based” linters like “space after <code>←</code>” in this context could involve inspecting the source info, and the syntax match means we know we’re looking “at the right thing”. Though the motivation for <a href=\"https://github.com/leanprover-community/mathlib4/pull/11520\">#11520</a> is really the ability to deprecate syntax.)</p>",
        "id": 440652073,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1716658312
    },
    {
        "content": "<p>This is great, thanks!  I left two \"bureaucratic\" comments on the PR.</p>",
        "id": 440695370,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716710367
    },
    {
        "content": "<p>Thanks for the feedback. A status update:</p>\n<ul>\n<li>the performance issue has been resolved (compiling instead of running the interpreter really helps)</li>\n<li>I have hooked up the linter to the <code>build</code> workflow and verified that new linter's errors are caught in CI</li>\n<li>In short: there are no conceptual questions remaining with the rewrite, mostly reviewing and landing code! Reviews are welcome on<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13240\">#13240</a>, rewriting the copyright header check (and basic infrastructure)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/13245\">#13245</a>, rewriting <code>update_style_exceptions.py</code> in Lean: an important pre-requisite for moving the later linters</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12928\">#12928</a>, rewriting the set_option linter: this is a syntax linter, hence this PR is independent of the others</li>\n</ul>\n</li>\n</ul>\n<p>This is one of my first programming projects in Lean: I'm sure there's the occasional language feature making my life easier. Even a look from the \"code style\" perspective is useful!</p>",
        "id": 440806906,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716799948
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/12928\">#12928</a>, I was looking at <code>setOptionLinter</code> and was thinking of ways of flattening the code. Ultimately, the code is essentially \"if b then return\" repeated, so it seems like there should be a way of writing this without the repetition. My first thought is there must be a way of wrapping <code>CommandElabM Unit</code> with an <code>Alternative</code> instance, so that it's failure is just <code>return</code>. The following is a partial flattening, but I feel like it could be made to look much nicer.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">setOptionLinter</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Linter</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">withSetOptionIn</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">unless</span><span class=\"w\"> </span><span class=\"n\">getLinterHash</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getOptions</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"n\">return</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">MonadState</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages</span><span class=\"bp\">.</span><span class=\"n\">hasErrors</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"n\">return</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"bp\">.</span><span class=\"n\">find?</span><span class=\"w\"> </span><span class=\"n\">is_set_option</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">parse_set_option</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">drop</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">      </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"s2\">\"pp.\"</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"s2\">\"profiler.\"</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"s2\">\"trace.\"</span>\n<span class=\"w\">      </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"n\">Linter</span><span class=\"bp\">.</span><span class=\"n\">logLint</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">setOption</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"Forbidden set_option `{name}`; please remove\"</span>\n</code></pre></div>\n<p>I'd love to know if what I'm imagining is possible or if I'm just sleep deprived <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 441853071,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1717214905
    },
    {
        "content": "<p>Ok, I managed to get the following working.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">setOptionLinter</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Linter</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">withSetOptionIn</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"bp\">&lt;*</span><span class=\"w\"> </span><span class=\"n\">OptionT</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">getLinterHash</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getOptions</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">MonadState</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages</span><span class=\"bp\">.</span><span class=\"n\">hasErrors</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"bp\">.</span><span class=\"n\">find?</span><span class=\"w\"> </span><span class=\"n\">is_set_option</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Drop a leading backtick.</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">parse_set_option</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">drop</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"s2\">\"pp.\"</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"s2\">\"profiler.\"</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"s2\">\"trace.\"</span>\n<span class=\"w\">  </span><span class=\"n\">Linter</span><span class=\"bp\">.</span><span class=\"n\">logLint</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">setOption</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"Forbidden set_option `{name}`; please remove\"</span>\n</code></pre></div>",
        "id": 441999899,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1717298660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> Does the above code seems like an improvement? Feel free to use it or if you want I can submit a patch to the PR. You will need to import <code>Lake.Util.Lift</code> for the Monad lifting instances.</p>",
        "id": 442132895,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1717381367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"560559\">@Richard Osborn</span> Thanks for thinking about this! To me, this code is denser, but not necessarily clearer... you're aiming at removing the initial \"if b then return\" pattern?</p>",
        "id": 443515805,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717876555
    },
    {
        "content": "<p>My reasoning is not really rational, but somehow I find the following the easiest to parse:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">setOptionLinter</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Linter</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">withSetOptionIn</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"bp\">&lt;*</span><span class=\"w\"> </span><span class=\"n\">OptionT</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">getLinterHash</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getOptions</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">MonadState</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages</span><span class=\"bp\">.</span><span class=\"n\">hasErrors</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"bp\">.</span><span class=\"n\">find?</span><span class=\"w\"> </span><span class=\"n\">is_set_option</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">parse_set_option</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">drop</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"s2\">\"pp.\"</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"s2\">\"profiler.\"</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"s2\">\"trace.\"</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"n\">Linter</span><span class=\"bp\">.</span><span class=\"n\">logLint</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">setOption</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"Forbidden set_option `{name}`; please remove\"</span>\n</code></pre></div>",
        "id": 443585864,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1717932146
    },
    {
        "content": "<p>I like Jon's suggestion as well. It'd also look nicer if <code>guard</code> wasn't a function, but notation. I realize the \"monadic style\" is still not as common as the normal imperative <code>if-then</code>, but I mainly find the nested <code>if let some ...</code> fairly clunky looking. As lean is the only language I know of that does this imperative style <code>do</code> blocks, I'm not entirely sure what the right balance is.</p>",
        "id": 443592454,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1717937465
    },
    {
        "content": "<p>Those string manipulations are not the right way to handle Lean names. You should use the Name api.</p>",
        "id": 443622776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717958394
    },
    {
        "content": "<p>Fair point, I'll read up on it and use it. (Might be in two or three weeks only.)</p>",
        "id": 443691757,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718000832
    },
    {
        "content": "<p>Thanks for the pointer!</p>",
        "id": 443691763,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718000839
    }
]