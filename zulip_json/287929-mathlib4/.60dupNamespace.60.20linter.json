[
    {
        "content": "<p>Dear All,</p>\n<p>some of the Lean3 linters that only run in CI could now probably be implemented as \"syntax\" linters.  I am specifically thinking about the <code>dupNamespace</code> linter: this could raise a warning whenever a namespace is duplicated.</p>\n<p>Is there a reason not to do that?  I am happy to try and implement it, since I am trying to learn a little about syntax and linters.</p>",
        "id": 424613429,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709545378
    },
    {
        "content": "<p>Also, where are these linters defined?</p>",
        "id": 424613474,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709545397
    },
    {
        "content": "<p><code>Std/Tactic/Lint/Misc.lean</code> for that one</p>",
        "id": 424616055,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709546221
    },
    {
        "content": "<p>It being in <code>Std</code> may mean that there is a good reason for not making it a syntax linter.</p>",
        "id": 424616831,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709546468
    },
    {
        "content": "<p>I'm not sure I'd draw that conclusion, but I don't know much :)</p>",
        "id": 424618871,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709547129
    },
    {
        "content": "<p>Ok, I'll wait a bit and see how an implementation might look like.</p>",
        "id": 424619182,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709547228
    },
    {
        "content": "<p>I'm testing out a simple implementation at <a href=\"https://github.com/leanprover-community/mathlib4/pull/11154\">#11154</a></p>",
        "id": 424721557,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709577726
    },
    {
        "content": "<p>The main reason it is an environment linter (besides historical reasons) is that autogenerated theorems can also have duplicated names</p>",
        "id": 424741994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709584402
    },
    {
        "content": "<p>having a reduplicated name is a property of the name and not of the syntax used to generate it</p>",
        "id": 424742059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709584439
    },
    {
        "content": "<p>It turns out that there is a <code>private theorem Seminorm.Seminorm.isLUB_sSup</code> that passes the <code>Std</code> linter.</p>",
        "id": 424742132,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709584459
    },
    {
        "content": "<p>Yes, I am still thinking about how to get the autogenerated declarations to be linted.</p>",
        "id": 424742175,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709584481
    },
    {
        "content": "<p>Anyway, maybe even if the syntax linter does not replace the <code>Std</code> one, it could still be useful as it will catch duplicated namespaces \"on the spot\", avoiding a CI cycle to find out.  Even if it is not always accurate.  <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 424743271,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709584851
    },
    {
        "content": "<p>yes, that's definitely something we could improve</p>",
        "id": 424743711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709585019
    },
    {
        "content": "<p>If we ever get \"fast <code>whatsnew in</code>\" it will be possible to run environment linters in general after each command by registering a syntax linter which just calls all environment linters (which don't opt out)</p>",
        "id": 424743913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709585098
    },
    {
        "content": "<p>While we are here, if <code>id : TSyntax `ident</code> is the identifier extracted from a declaration, how do I get the <code>Lean.Name</code> of the corresponding declaration?  Essentially, it should add all <code>namespace</code>s, unless <code>id</code> starts with <code>_root_</code>, in which case, it should strip <code>_root_</code>.  I could not find the correct <code>resolveStuff</code> definition, though.</p>",
        "id": 424748629,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709586895
    },
    {
        "content": "<p>I think it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.mkDeclName#doc\">docs#Lean.Elab.mkDeclName</a></p>",
        "id": 424750055,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709587491
    },
    {
        "content": "<p>But <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Command.elabDeclaration#doc\">docs#Lean.Elab.Command.elabDeclaration</a> has additional logic for handling the case where the declaration id contains a namespace. Writing <code>def Foo.f ...</code> does <code>namespace Foo def f ... end</code></p>",
        "id": 424750522,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709587686
    },
    {
        "content": "<p>It seems that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.mkDeclName#doc\">docs#Lean.Elab.mkDeclName</a> gives an error if I use it on a declaration that is already in the environment: am I using it wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Parser</span> <span class=\"n\">Command</span>\n<span class=\"sd\">/-- `getIds stx` extracts the `declId` nodes from the `Syntax` `stx`. -/</span>\n<span class=\"n\">partial</span>\n<span class=\"kd\">def</span> <span class=\"n\">getIds</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span>\n  <span class=\"bp\">|</span> <span class=\"n\">stx</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">args.map</span> <span class=\"n\">getIds</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">++</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">stx</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">getKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">declId</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">default</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"name of \"</span> <span class=\"n\">cmd</span><span class=\"o\">:</span><span class=\"n\">command</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabCommand</span> <span class=\"n\">cmd</span>  <span class=\"c1\">-- add the declaration to the environment</span>\n  <span class=\"k\">let</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getIds</span> <span class=\"n\">cmd</span><span class=\"o\">)[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getScope</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">currNamespace</span>\n  <span class=\"k\">let</span> <span class=\"n\">mods</span> <span class=\"bp\">←</span> <span class=\"n\">elabModifiers</span> <span class=\"n\">cmd</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{(← mkDeclName ns mods id.getId)}\"</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n\n<span class=\"n\">name</span> <span class=\"n\">of</span>  <span class=\"c1\">-- 'Foo.foo' has already been declared</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 424753134,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709588733
    },
    {
        "content": "<p>Anyway, the syntax linter passed CI (<a href=\"https://github.com/leanprover-community/mathlib4/pull/11154\">#11154</a>) after scanning most of Mathlib.  As I mentioned above, even with its limitations, I think that it might be useful to avoid duplicating namespaces... sometimes!</p>",
        "id": 424757274,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709590484
    },
    {
        "content": "<p>You can't use <code>mkDeclName</code> because of exactly this issue. There is no API function which does this resolution, I've hit this issue before</p>",
        "id": 424758976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709591285
    },
    {
        "content": "<p>I think a better approach would be to look for declared constants in the info tree, where they are already resolved</p>",
        "id": 424759128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709591369
    },
    {
        "content": "<p>Well, in the specific case of the <code>dupNamespace</code> linter, I can simply extract the declId and prepend the namespace: if a <code>_root_</code> gets jammed in the middle there will not be further duplications due to it anyway, so I think that I am good!</p>",
        "id": 424759800,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709591686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60dupNamespace.60.20linter/near/424758976\">said</a>:</p>\n<blockquote>\n<p>You can't use <code>mkDeclName</code> because of exactly this issue. There is no API function which does this resolution, I've hit this issue before</p>\n</blockquote>\n<p>Is this fixable?</p>",
        "id": 424767929,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1709595856
    },
    {
        "content": "<p>copy paste? I think there are already several cases of this</p>",
        "id": 424775784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709600572
    }
]