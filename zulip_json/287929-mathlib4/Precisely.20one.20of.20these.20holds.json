[
    {
        "content": "<p>What's the idiomatic mathlib spelling for \"exactly one of these conditions holds\"?<br>\n(Case in point is <a href=\"https://github.com/leanprover-community/mathlib4/pull/9343\">#9343</a>: the result is \"either condition A xor condition B holds\". The current solution is a lemma <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\lnot A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\">A</span></span></span></span> iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, which is slightly cumbersome to prove.)</p>",
        "id": 411769700,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1704730320
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Xor%27#doc\">docs#Xor'</a></p>",
        "id": 411798249,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704740052
    },
    {
        "content": "<p>IMHO, we should define an instance of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Xor#doc\">docs#Xor</a> for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prop#doc\">docs#Prop</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bool#doc\">docs#Bool</a>, then use the <code>^^^</code> notation.</p>",
        "id": 411798371,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704740112
    },
    {
        "content": "<p>No, you should use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=symmDiff#doc\">docs#symmDiff</a> instead</p>",
        "id": 411799710,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704740694
    },
    {
        "content": "<p>I'm not sure... We also don't use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∪</mo></mrow><annotation encoding=\"application/x-tex\">\\cup</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">∪</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∩</mo></mrow><annotation encoding=\"application/x-tex\">\\cap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">∩</span></span></span></span> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∨</mo></mrow><annotation encoding=\"application/x-tex\">\\lor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">∨</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∧</mo></mrow><annotation encoding=\"application/x-tex\">\\land</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5556em;\"></span><span class=\"mord\">∧</span></span></span></span>...</p>",
        "id": 411800160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704740893
    },
    {
        "content": "<p>we can make some nice notation for symmdiff. I'm surprised we haven't ran into this much before; I think many, many of the <code>Or</code>s written in mathlib right now are of this form</p>",
        "id": 411803888,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704742573
    },
    {
        "content": "<p>Personally I think we should set something up similar to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.TFAE#doc\">docs#List.TFAE</a> for this.</p>",
        "id": 411805876,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704743494
    },
    {
        "content": "<p><code>X1OTFIT</code> = \"exactly one of the following is true\"</p>",
        "id": 411806096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704743589
    },
    {
        "content": "<p><code>List.ExactlyOne</code></p>",
        "id": 411806169,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704743623
    },
    {
        "content": "<p>We can have both a <code>List</code> and a binary version. I think that the operation on <code>Prop</code> should be called <code>xor</code> in theorem names. I don't care which notation does it use.</p>",
        "id": 411808267,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704744542
    },
    {
        "content": "<p>Thanks for all the pointers! I've gone with Xor for now - if there's consensus to use otherwise or a reviewer objects, this can be changed easily.</p>",
        "id": 411810465,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1704745501
    },
    {
        "content": "<p>I think it probably shouldn't use <code>^^^</code> because we have a different symbol for \"Boolean and\" and ∧, right?</p>",
        "id": 411922197,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704802075
    },
    {
        "content": "<p>Unfortunately this operation is quite an overloaded one, semantically. But I think <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> is right: <code>∆</code> is good.</p>",
        "id": 411922490,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704802186
    },
    {
        "content": "<p>It is worth thinking about what you'd actually do with such statements, mind. <code>And</code> and <code>Or</code> decompose easily enough.</p>",
        "id": 411922732,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704802284
    },
    {
        "content": "<p><code>∆</code> is no good for the n-ary statement</p>",
        "id": 411926112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704803687
    },
    {
        "content": "<p>good point</p>",
        "id": 411927356,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704804177
    },
    {
        "content": "<p>But then, again, it isn't clear to me (from a structural point of view) how you should use such a proposition.</p>\n<p>For A_i, I suppose what you have is a) a proof of A_1 or A_2.. or A_n, and b) a proof that A_i -&gt; not (A_j) for i \\ne j.</p>",
        "id": 411927595,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704804270
    },
    {
        "content": "<p>It's a little bit like being pairwise disjoint, actually.</p>",
        "id": 411927783,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704804333
    },
    {
        "content": "<p>That is probably the analogous n-ary statement on sets.</p>",
        "id": 411927803,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704804342
    },
    {
        "content": "<p>What you probably want is a symbol for \"at most one of these is true\", which is that. And then or covers \"at least one of these is true\".</p>",
        "id": 411928016,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704804406
    },
    {
        "content": "<p>Any two of them imply False.</p>",
        "id": 411928082,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704804424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Precisely.20one.20of.20these.20holds/near/411926112\">said</a>:</p>\n<blockquote>\n<p><code>∆</code> is no good for the n-ary statement</p>\n</blockquote>\n<p>I guess <code>∆</code> is great for \"an odd number of these statements are true\" :-)</p>",
        "id": 411932369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704805990
    },
    {
        "content": "<p><code>example (ι : Type*) (p : ι → Prop) : Prop := Pairwise (fun i j =&gt; ¬ (p i) ∨ ¬ (p j)) ∧ ∃ i, p i</code></p>",
        "id": 411933749,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704806519
    },
    {
        "content": "<p>Something like this?</p>",
        "id": 411933765,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704806523
    },
    {
        "content": "<p><code>example (ι : Type*) (p : ι → Prop) : Prop := Pairwise (Or on (Not ∘ p)) ∧ ∃ i, p i</code></p>\n<p>or this, if you want to be cute.</p>",
        "id": 411934039,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704806622
    },
    {
        "content": "<p><code>∃! i, p i</code> seems like the obvious spelling</p>",
        "id": 411934544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704806802
    },
    {
        "content": "<p>Yes I was about to say, if you want to bundle everything together, that is the one.</p>",
        "id": 411934872,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704806910
    },
    {
        "content": "<p>But in practice I think you will, I'm prepared to say 99% of the time, prove that by proving the left and the right there.</p>",
        "id": 411934943,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704806936
    },
    {
        "content": "<p>Incidentally, where is <code>∃!</code> defined? Docs search isn't giving me it.</p>",
        "id": 411935045,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704806977
    },
    {
        "content": "<p>nvm got it. <br>\n<code>ExistsUnique p = ∃ (x : α), p x ∧ ∀ (y : α), p y → y = x</code></p>",
        "id": 411935214,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704807034
    },
    {
        "content": "<p>Not sure if that's easier or harder to work with in practice.</p>",
        "id": 411935321,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704807078
    },
    {
        "content": "<p>like I can imagine in some cases wanting to split the proof of \"at most one\" and \"at least one\", and here, you show \"at most one\" and then \"any others are <em>that</em> one\"</p>",
        "id": 411935500,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704807136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Precisely.20one.20of.20these.20holds/near/411927783\">said</a>:</p>\n<blockquote>\n<p>It's a little bit like being pairwise disjoint, actually.</p>\n</blockquote>\n<p>It is <em>exactly</em> being a partition of <code>True</code>.</p>",
        "id": 411966100,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704816590
    },
    {
        "content": "<p>BTW, do we have <code>(∃! b : Bool, p b) &lt;-&gt; Xor' (p true) (p false)</code>?</p>",
        "id": 412007925,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704832425
    }
]