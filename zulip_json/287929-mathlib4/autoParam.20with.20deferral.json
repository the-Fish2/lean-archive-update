[
    {
        "content": "<p>Is it possible to have an <code>autoParam</code> which just defers a goal it can't solve?</p>",
        "id": 421724293,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708024862
    },
    {
        "content": "<p>Here's a giant hack:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"defer\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">defer</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case refine_2</span>\n<span class=\"cm\">  this: ℕ</span>\n<span class=\"cm\">  ⊢ True</span>\n<span class=\"cm\">  case refine_1</span>\n<span class=\"cm\">  ⊢ 1 = 2</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>You could do <code>by tactic_to_try &lt;|&gt; defer</code></p>",
        "id": 421728873,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708026563
    },
    {
        "content": "<p>The way the hack works is that it just ignores the goal completely in the autoParam, and since goals metavariables are <code>?_</code> rather than <code>_</code> metavariables, <code>refine</code>, etc., will turn them into new goals.</p>",
        "id": 421729097,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708026638
    },
    {
        "content": "<p>this is cool, but unfortunately it's not quite working in my use case (I'll try to <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>). The issue is that I would like to use autoParams for lemmas used in rewriting (or maybe even simp) and have it fail to prove the desired goal gracefully. (I understand maybe simp can't do this, but at least I would want <code>rw</code>to do it).</p>\n<p>I'm also running into the issue that when using simp, even in a case where it should work, it crashes the server because as you are typing, before Lean has enough information to fill in the metavariables to allow the autoParam to succeed, it goes crazy trying to solve it ahead of time.</p>",
        "id": 421735835,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708029211
    }
]