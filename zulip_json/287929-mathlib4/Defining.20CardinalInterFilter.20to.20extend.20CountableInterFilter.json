[
    {
        "content": "<p>Hi all, I'm trying to define <code>CardinalInterFilter</code> as a generalisation of <code>CountableInterFilter</code>. I have made PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10531\">#10531</a> for this purpose, in which I try to define this concept and show that it corresponds to the <code>CountableInterFilter</code> for a suitable choice of cardinality. I'd much recommend any feedback! I think that I can generalise most of the API from <code>CountableInterFilter</code>, but I'm keeping this PR a bit small until we have agreement that the way that I set up <code>CardinalInterFilter</code> is desirable. </p>\n<p>In particular, I would like to hear your thoughts on:</p>\n<ol>\n<li>ordering of the arguments in <code>CardinalInterFilter</code>: should I start with the filter and then the cardinality, or vice versa? the latter seems closer to the naming of the object, but the former stresses more that this is a property for filters. </li>\n<li>should I aim to redefine <code>CountableInterFilter</code> purely in terms of <code>CardinalInterFilter</code>? </li>\n</ol>\n<p>Motivation for introducing <code>CardinalInterFilter</code>: this would be the way to go to introduce K-Lindel√∂f spaces, where the condition would be exactly in terms of these <code>CardinalInterFilter</code>s: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsCardinalLindelof</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}):=</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"o\">‚¶É</span><span class=\"n\">f</span><span class=\"o\">‚¶Ñ</span> <span class=\"o\">[</span><span class=\"n\">NeBot</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CardinalInterFilter</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">],</span> <span class=\"n\">f</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìü</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ClusterPt</span> <span class=\"n\">x</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>It is clear that for <code>c = aleph0</code>, this reduces to <code>IsCompact</code>, whereas for <code>c = aleph1</code>, this reduces to <code>IsLindelof</code>.</p>",
        "id": 421609527,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707988156
    }
]