[
    {
        "content": "<p>Curently, tactic mode allows both</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">suffices</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">·</span> <span class=\"n\">simpa</span>\n</code></pre></div>\n<p>Should we drop one of the versions?</p>",
        "id": 378812792,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690379939
    },
    {
        "content": "<p>What’s wrong with having both?</p>",
        "id": 378816221,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690380484
    },
    {
        "content": "<p><del>Was the second one introduced recently? I remember trying it 2 weeks ago and it didn't work</del></p>",
        "id": 378816985,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690380573
    },
    {
        "content": "<p><del>The problem with the second one is that writing <code>name : type := proof</code> strongly suggests that <code>proof : type</code>, wherehas here <code>proof</code> is a proof of the goal with the added hypothesis <code>name : type</code>...</del></p>",
        "id": 378817529,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690380640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> There was a typo in the second one. Fixed.</p>",
        "id": 378818957,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690380852
    },
    {
        "content": "<p>I believe one is from core and one from mathlib; it's pretty annoying that they have significantly different syntax. The first one also allows <code>suffices foo from term</code></p>",
        "id": 378819091,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690380873
    },
    {
        "content": "<p>But they have different reasons for being used. In the second you can optionally name the hypothesis.</p>",
        "id": 378819958,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690381024
    },
    {
        "content": "<p>Right, but these features should be orthogonal</p>",
        "id": 378825742,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690381949
    },
    {
        "content": "<p>My main concern about two syntaxes is inconsistency.</p>",
        "id": 378848406,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690385364
    },
    {
        "content": "<p>the core-preferred way to write it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">suffices</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span>\n</code></pre></div>",
        "id": 378910176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690396932
    },
    {
        "content": "<p>(notwithstanding one line golf)</p>",
        "id": 378910287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690396947
    },
    {
        "content": "<p>refactoring this was considered for mathport but it's just a bit too tricky to do reliably so I left it for after the port / via linter</p>",
        "id": 378910604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690397003
    },
    {
        "content": "<p>it really only exists for backward compatibility with lean 3, same thing with <code>have; tac</code></p>",
        "id": 378911601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690397185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/suffices.20syntax/near/378910176\">said</a>:</p>\n<blockquote>\n<p>the core-preferred way to write it is</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">suffices</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>With no way to rename the hypothesis? I guess I don't particularly mind, but it seems a strange limitation when you're used to the lean3 version</p>",
        "id": 378922105,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690399353
    },
    {
        "content": "<p>you can write <code>suffices h : 0 &lt; a by ...</code> too</p>",
        "id": 378925963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690400290
    },
    {
        "content": "<p>But not <code>suffices : 0 &lt; a by ...</code></p>",
        "id": 378926536,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690400432
    },
    {
        "content": "<blockquote>\n<p>the core-preferred way to write it is</p>\n</blockquote>\n<p>Does core have similar opinions on <code>have</code>?</p>",
        "id": 382688725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691424339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/suffices.20syntax/near/378926536\">said</a>:</p>\n<blockquote>\n<p>But not <code>suffices : 0 &lt; a by ...</code></p>\n</blockquote>\n<p>but <code>suffices 0 &lt; a by</code> is fine and shorter!</p>",
        "id": 382724693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691432402
    },
    {
        "content": "<p>I am sorry to resurrect this stream, but I have seen <a href=\"https://github.com/leanprover-community/mathlib4/pull/10534\">#10534</a> by <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  and I see that the <code>doc</code> concerning <code>suffices</code> is still the old one, saying</p>\n<blockquote>\n<p>Given a main goal ctx ⊢ t, suffices h : t' from e replaces the main goal with ctx ⊢ t', e must have type t in the context ctx, h : t'.</p>\n<p>The variant suffices h : t' by tac is a shorthand for suffices h : t' from by tac. If h : is omitted, the name this is used.</p>\n</blockquote>\n<p>I wanted to create a  PR, but I realise that I find the indenting requirement very odd: the goal that needs to be fixed after <code>suffices</code> is the original one, so it is not a side goal, yet indentation is required. Isn't this opposite to what I read <a href=\"https://leanprover-community.github.io/contribute/style.html\">here</a> :</p>\n<blockquote>\n<p>When new goals arise as side conditions or steps, they are indented and preceded by a focusing dot · (inserted as \\.); the dot is not indented.</p>\n</blockquote>\n<p>?</p>",
        "id": 422668414,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1708535834
    },
    {
        "content": "<p><a href=\"#narrow/stream/304774-FLT-regular/topic/Mathlib.20bumps/near/422648069\">Related</a> discussion. I don't know a reasonable way of writing a proof that uses <code>suffices</code>. (I see there are tricks to make it OK, but it would be nice to have an official workflow.)</p>",
        "id": 422671230,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708536695
    },
    {
        "content": "<p>And coherent, official doc!</p>",
        "id": 422671341,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1708536724
    },
    {
        "content": "<p>Also the new <code>suffices</code> notation is inconsistent with the new <code>have</code> notation</p>",
        "id": 422673153,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708537318
    },
    {
        "content": "<p>In particular, the <code>by</code> is not separated from the rest of the term which to me is really really bad because I was independently hoping we could make <code>by</code> have the same precedence as <code>fun</code> (there are so many <code>$ by</code> everywhere), and that new <code>suffices</code> syntax seems to be conflicting with this.</p>",
        "id": 422673546,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708537471
    },
    {
        "content": "<p>Should it be <code>suffices h : foo =&gt;</code> instead?</p>",
        "id": 422673695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708537545
    },
    {
        "content": "<p>That would make more sense than currently at least</p>",
        "id": 422673851,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708537602
    },
    {
        "content": "<p>Also because we need a colon to put binders before, the same way the <code>have</code> syntax does it</p>",
        "id": 422673960,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708537651
    },
    {
        "content": "<p>Maybe we can discuss this in the lean4 stream? All these tactics are in core, and even if we can modify the standard behavior it's probably a good idea to follow what core does.</p>",
        "id": 422675221,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708538094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/suffices.20syntax/near/422673695\">said</a>:</p>\n<blockquote>\n<p>Should it be <code>suffices h : foo =&gt;</code> instead?</p>\n</blockquote>\n<p>Well, already having the colon would be a great advance (it makes more type-theoretic sense). I also do not understand the indentation <em>of the dot</em> that should be used: the first goal that one approaches is not a <em>side goal</em> , just the first one. It should be possible to work on it withoug indentation.</p>",
        "id": 422682539,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1708540920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/suffices.20syntax/near/422675221\">said</a>:</p>\n<blockquote>\n<p>Maybe we can discuss this in the lean4 stream? All these tactics are in core, and even if we can modify the standard behavior it's probably a good idea to follow what core does.</p>\n</blockquote>\n<p>Or to ask for some modification in core...</p>",
        "id": 422682679,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1708540968
    }
]