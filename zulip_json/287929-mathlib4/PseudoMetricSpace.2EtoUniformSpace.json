[
    {
        "content": "<p>Why is <code>toUniformSpace</code> a field of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PseudoMetricSpace#doc\">docs#PseudoMetricSpace</a> instead having <code>PseudoMetricSpace</code> extend <code>UniformSpace</code>?</p>",
        "id": 418161576,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706215360
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 418162458,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706215803
    },
    {
        "content": "<p>Related question: how can I make the following work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.PseudoMetric</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"n\">M₃</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">M₃</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">instTopologicalSpaceProd</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">×</span> <span class=\"n\">M₃</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">PseudoMetricSpace.toUniformSpace.toTopologicalSpace</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">with_reducible_and_instances</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 418163635,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706216335
    },
    {
        "content": "<p>It doesn’t want to unfold <code>PseudoMetricSpace.toUniformSpace</code></p>",
        "id": 418163670,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706216361
    },
    {
        "content": "<p>What if you use <code>extends</code> instead of an explicit field?</p>",
        "id": 418164623,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706216694
    },
    {
        "content": "<p>It's possible that someone chose an explicit field for some reason that no longer applies in Lean 4.</p>",
        "id": 418164665,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706216718
    },
    {
        "content": "<p>At first glance, I get many errors</p>",
        "id": 418165119,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706216884
    },
    {
        "content": "<p>I wonder why</p>",
        "id": 418165704,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706217171
    },
    {
        "content": "<p>Looks like most come from the autoparams from the other fields. Just <code>sorry</code>-ing everything removes errors until the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod.pseudoMetricSpaceMax#doc\">docs#Prod.pseudoMetricSpaceMax</a> but still not unfolding.</p>",
        "id": 418166447,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706217519
    },
    {
        "content": "<p>I think the issue is that you want it for the default <code>by intros; rfl</code> proof of <code>uniformity_dist</code>.</p>",
        "id": 418166471,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706217533
    },
    {
        "content": "<p>That was the source of most errors when moving to a parent class</p>",
        "id": 418166565,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706217580
    },
    {
        "content": "<p>And for that to work in general you need the special construction <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformSpace.ofDist#doc\">docs#UniformSpace.ofDist</a> to be supplied as the default field.</p>",
        "id": 418166584,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706217587
    },
    {
        "content": "<p>This is all coming back to me now from when I added bornology.</p>",
        "id": 418166658,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706217608
    },
    {
        "content": "<p>But many constructions already have a <code>UniformSpace</code> instance.</p>",
        "id": 418169678,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706219111
    },
    {
        "content": "<p>In fact, I think that forcing a user to explicitly provide <code>toUniformSpace</code> if there is no instance yet is a good thing.</p>",
        "id": 418169743,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706219154
    },
    {
        "content": "<p>I was looking at the wrong place. I need to make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PseudoEMetricSpace.toPseudoMetricSpaceOfDist#doc\">docs#PseudoEMetricSpace.toPseudoMetricSpaceOfDist</a> reducible</p>",
        "id": 418172361,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706220370
    },
    {
        "content": "<p>It was choking there in the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod.pseudoMetricSpaceMax#doc\">docs#Prod.pseudoMetricSpaceMax</a></p>",
        "id": 418172452,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706220419
    },
    {
        "content": "<p>Yury, I can see why we might want to always (or mostly) provide our own <code>UniformSpace</code> instance in Mathlib, but for downstream users I think it's quite inconvenient if things like this are not autoparams.</p>",
        "id": 418172937,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1706220654
    },
    {
        "content": "<p>I think we need a <code>tryThisParam</code> instead of <code>autoParam</code> that inserts a template for the user, so that they are at least aware that a default is being use</p>",
        "id": 418175315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706221880
    },
    {
        "content": "<p>You have to guess what the <code>autoParam</code> is trying to do when it errors right now which is extra overhead</p>",
        "id": 418175568,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706222021
    }
]