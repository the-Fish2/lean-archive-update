[
    {
        "content": "<p>If a class <code>myClass</code> depends on a <code>[Funlike F X Y]</code> hypothesis, should it implement <code>myClass.ext_iff</code> (which would be defined as <code>DFunLike.ext_iff …</code>) etc., or should the user simply rely on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DFunLike.ext_iff#doc\">docs#DFunLike.ext_iff</a> ?</p>",
        "id": 420796691,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707568535
    },
    {
        "content": "<p>Trying to answer my question myself : it seems <code>myClass.ext_iff</code> should not be added.<br>\nOn the other hand,  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom.ext_iff#doc\">docs#MonoidHom.ext_iff</a> is tagged as <code>deprecated</code>, while <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.ext_iff#doc\">docs#LinearMap.ext_iff</a> isn't.</p>",
        "id": 420797325,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707569195
    },
    {
        "content": "<p>I don't think it matters much. It's better to copy it for discoverability, but no biggie</p>",
        "id": 420800087,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707571668
    },
    {
        "content": "<p>OK. I understood the issue I had. Defining <code>myHomClass.ext_iff … [FunLike F X Y]  [myHomClass F X Y]</code> makes the <code>unusedArguments</code> linter complain, because that function only uses <code>[FunLike F X Y]</code>. So it seems that for the class, one has to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FunLike.ext_iff#doc\">docs#FunLike.ext_iff</a>. However, this works for the type version, one can define <code>myHom.ext_iff (f : myHom X Y)</code>, although some cases are marked as deprecated in mathlib.</p>",
        "id": 420814508,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1707583614
    },
    {
        "content": "<p>Ah yes, that's a funny consequence of the new design that I hadn't foreseen.</p>",
        "id": 420817340,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707585607
    },
    {
        "content": "<p>I thought the whole point of the set-up was to save the user from having to write a new <code>ext_iff</code> lemma?</p>",
        "id": 420818735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707586740
    },
    {
        "content": "<p>Only <code>MyHom.ext</code> needs to be defined (for the <code>@[ext]</code> attribute to work). <code>MyHom.ext_iff</code> as alias for <code>DFunLike.ext_iff</code> is possible if you really want dot notation but as Kevin said it duplicates work. I am against <code>MyHomClass.ext_iff</code>, since the subclassing adds nothing that the original <code>DFunLike.ext_iff</code> can't do (and now with <code>FunLike</code> moving to a separate parameter, the linter rightfully complains!)</p>",
        "id": 420840299,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707606855
    }
]