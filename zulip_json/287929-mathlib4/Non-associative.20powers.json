[
    {
        "content": "<p>I'm trying to make powers work for non-associative algebras by moving <code>nsmul</code>, <code>nsmul_zero</code> and <code>nsmul_succ</code> from <code>Monoid</code> into <code>MulOneClass</code>. I've solved a lot of issues, but I'm stuck: on this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">1131</span><span class=\"bp\">/</span><span class=\"mi\">1819</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.FreeMonoid.Count</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">importGraph</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mans0954</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.7.0/bin/lean -Dpp.unicode.fun=true -Dpp.proofs.withType=false -DautoImplicit=false -DrelaxedAutoImplicit=false ./././Mathlib/Algebra/FreeMonoid/Count.lean -R ././. -o ./.lake/build/lib/Mathlib/Algebra/FreeMonoid/Count.olean -i ./.lake/build/lib/Mathlib/Algebra/FreeMonoid/Count.ilean -c ./.lake/build/ir/Mathlib/Algebra/FreeMonoid/Count.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">FreeMonoid</span><span class=\"bp\">/</span><span class=\"n\">Count.lean</span><span class=\"o\">:</span><span class=\"mi\">58</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">AddMonoidHom.toMultiplicative</span> <span class=\"o\">(</span><span class=\"n\">FreeAddMonoid.countP</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">MonoidHom</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">FreeAddMonoid</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">Multiplicative.mulOneClass</span>\n    <span class=\"n\">Multiplicative.mulOneClass</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">MonoidHom</span> <span class=\"o\">(</span><span class=\"n\">FreeMonoid</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">Monoid.toMulOneClass</span> <span class=\"n\">Multiplicative.mulOneClass</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n</code></pre></div>\n<p>Anyone able to give me a hint please?</p>\n<p>PR here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12281\">https://github.com/leanprover-community/mathlib4/pull/12281</a></p>\n<p>Not clear to me that I can pull out a MWE from a refactor like this.</p>\n<p>Thanks.</p>\n<p>Christopher</p>",
        "id": 434523642,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1713637306
    },
    {
        "content": "<p>Won't you need to <em>assume</em> <a href=\"https://en.wikipedia.org/wiki/Power_associativity\">power associativity</a>?</p>",
        "id": 434524177,
        "sender_full_name": "Richard Copley",
        "timestamp": 1713637787
    },
    {
        "content": "<p>I guess strictly speaking the answer to that is \"no\", as the definition will go through fine! Indeed both definitions will, and will give different answers in general :-)</p>",
        "id": 434524433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713638037
    },
    {
        "content": "<p>Hmm. Right, <code>x^3</code> will mean either <code>x^2*x</code> or <code>x*x^2</code>, and it won't necessarily follow that those are equal.</p>",
        "id": 434524545,
        "sender_full_name": "Richard Copley",
        "timestamp": 1713638158
    },
    {
        "content": "<p>Yes, without associativity, power associativity isn't automatic, but it does hold for some special cases (e.g. Jordan algebras).</p>\n<p>For the opposite algebra, I have stuck with the default <code>nsmul</code> rather than try to define the opposite one. <a href=\"https://github.com/leanprover-community/mathlib4/pull/12281/files#diff-ac8c71e48327ed7815458d03a7b509e49fc7262daa8cc61f2206d0c6fda599bfL127\">https://github.com/leanprover-community/mathlib4/pull/12281/files#diff-ac8c71e48327ed7815458d03a7b509e49fc7262daa8cc61f2206d0c6fda599bfL127</a> This then means that some previously <code>rfl</code> results now require inductive proofs <a href=\"https://github.com/leanprover-community/mathlib4/pull/12281/files#diff-ac8c71e48327ed7815458d03a7b509e49fc7262daa8cc61f2206d0c6fda599bfR190\">https://github.com/leanprover-community/mathlib4/pull/12281/files#diff-ac8c71e48327ed7815458d03a7b509e49fc7262daa8cc61f2206d0c6fda599bfR190</a></p>",
        "id": 434525102,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1713638709
    },
    {
        "content": "<p>I don't think changing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulOneClass#doc\">docs#MulOneClass</a> is the right way to go</p>",
        "id": 434526952,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713640452
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"630477\">@Scott Carnahan</span> who did something similar in spirit with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PNatPowAssoc#doc\">docs#PNatPowAssoc</a></p>",
        "id": 434526970,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713640484
    },
    {
        "content": "<p>Ack, we really need some forgetful inheritance here, or else I fear we're going to end up in an untenable situation.</p>",
        "id": 434529952,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713643433
    },
    {
        "content": "<p>I'm afraid I don't have any particularly helpful advice, but I like the fact that you are trying this generalization.</p>\n<p>One unsatisfying point I encountered when writing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PNatPowAssoc#doc\">docs#PNatPowAssoc</a> was the lack of <code>PNat</code> power structure in semigroups.  This meant I couldn't easily write a <code>PNatPowAssoc</code> instance for semigroups (and hence nonunital rings).  I had thought about changing <code>Mul</code> to incorporate a <code>pnpowRec</code> function, but was daunted by the vastness of the potential refactor.  See <a href=\"#narrow/stream/287929-mathlib4/topic/PNat.20powers.20in.20a.20semigroup\">this earlier discussion</a>.</p>",
        "id": 434540121,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1713653845
    },
    {
        "content": "<p>I'm really busy with some other things, but if I get a chance I'll try to revive my work on adding a <code>ppow</code> field for forgetful inheritance in the algebraic hierarchy. It's not actually as much work as you might expect if you just let it use the default values everywhere. If it goes well, I'll see about factoring both that and the standard <code>Pow</code> instance on monoids out.</p>",
        "id": 434555717,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713670803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Non-associative.20powers/near/434526952\">said</a>:</p>\n<blockquote>\n<p>I don't think changing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulOneClass#doc\">docs#MulOneClass</a> is the right way to go</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> can you explain why you think we should avoid forgetful inheritance here? It doesn't make any sense to me.</p>",
        "id": 434555732,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713670846
    },
    {
        "content": "<p>Thanks. I realised that the approach I was trying wouldn't solve the problem of powers in non-unital algebras, which I'd also like to have. But I  was hoping it might be an achievable interim step that would let me get a bit further with non-associative algebras.</p>",
        "id": 434561838,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1713678138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Non-associative.20powers/near/434555732\">said</a>:</p>\n<blockquote>\n<p>can you explain why you think we should avoid forgetful inheritance here?</p>\n</blockquote>\n<p>I'm not saying we should avoid forgetful inheritance. I'm saying that <code>MulOneClass</code> is probably not the right class to go for to mean \"power associative multiplication\". But also I don't know how much <code>MulOneClass</code> is used (it's one of those typeclasses I don't understand the use of), so maybe you could recycle it to mean \"power associative multiplication\", assuming you rename it to something more mathematically accurate.</p>",
        "id": 434564853,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713681647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Non-associative.20powers/near/434564853\">said</a>:</p>\n<blockquote>\n<p>I'm not saying we should avoid forgetful inheritance. I'm saying that <code>MulOneClass</code> is probably not the right class to go for to mean \"power associative multiplication\". But also I don't know how much <code>MulOneClass</code> is used (it's one of those typeclasses I don't understand the use of), so maybe you could recycle it to mean \"power associative multiplication\", assuming you rename it to something more mathematically accurate.</p>\n</blockquote>\n<p>I did wonder about inserting a class in between <code>MulOneClass</code> and  <code>Monoid</code> but that doesn't necessarily help with <code>NonAssocSemiring</code> which extends <code>MulZeroOneClass</code> rather than <code>MulOneClass</code> directly. Would having a mixin class which just contained <code>nsmul</code>, <code>nsmul_zero</code> and <code>nsmul_succ</code> help?</p>",
        "id": 434565988,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1713682987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373192\">Christopher Hoskin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Non-associative.20powers/near/434565988\">said</a>:</p>\n<blockquote>\n<p>I did wonder about inserting a class in between <code>MulOneClass</code> and <code>Monoid</code> but that doesn't necessarily help with <code>NonAssocSemiring</code> which extends <code>MulZeroOneClass</code> rather than <code>MulOneClass</code> directly</p>\n</blockquote>\n<p>You know you are allowed to change the <code>extends</code> clauses, right?</p>",
        "id": 434567824,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713685021
    },
    {
        "content": "<p>It's not because structures are extended in a certain way in mathlib that the algebraic hierarchy is immutable</p>",
        "id": 434567900,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713685096
    },
    {
        "content": "<p>Here you could just replace</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">NonAssocSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"n\">AddCommMonoidWithOne</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">NonAssocSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"n\">AddCommMonoidWithOne</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">PowAssocClass</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>or something like that</p>",
        "id": 434567939,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713685165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Non-associative.20powers/near/434567824\">said</a>:</p>\n<blockquote>\n<p>You know you are allowed to change the <code>extends</code> clauses, right?</p>\n</blockquote>\n<p>I'm not sure that you're allowed to change the first one -- this is the \"preferred parent\" right?</p>",
        "id": 434571958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713689047
    },
    {
        "content": "<p>From <a href=\"#narrow/stream/287929-mathlib4/topic/PNat.20powers.20in.20a.20semigroup/near/404727588\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/PNat.20powers.20in.20a.20semigroup/near/404727588</a> :</p>\n<blockquote>\n<p>Yes, I did start on this on <a href=\"https://github.com/leanprover-community/mathlib4/tree/j-loreaux%2Fppow\">branch#j-loreaux/ppow</a>, but it was causing performance issues, and I never finished getting it compiling (I can't remember how much was left to do). It's possible that it could be revived and those performance issues would go away because of more recent performance upgrades to master.</p>\n</blockquote>\n<p>I was curious, so I had a go at merging recent <code>HEAD</code> of <code>master</code> into this branch.</p>\n<p>With a few tweaks I was able to get it to build (except for linting): <a href=\"https://github.com/leanprover-community/mathlib4/pull/12355\">https://github.com/leanprover-community/mathlib4/pull/12355</a></p>\n<p>The <a href=\"https://github.com/leanprover-community/mathlib4/pull/12355/commits/9380937956d44e20f4892e9707cf7a418512bd38\">tweaks and fudges</a> included:</p>\n<ul>\n<li><code>(Add)CommSemigroup.ext</code> was defined in two places, so I commented one out</li>\n<li>Some lemmas like <code>ppow_add</code> appear in two places - I've masked this by putting one set in the <code>Mul</code> namespace for now</li>\n<li>An instance in <code>AlgebraicGeometry/Properties</code> needed a few more heartbeats</li>\n<li>I added the hypothesis <code>[FunLike F M N]</code> to <code>map_ppow</code></li>\n</ul>",
        "id": 434909135,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1713852579
    },
    {
        "content": "<p>Omg that diff +541,230 -284,439 <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> (it's not a diff against master)</p>",
        "id": 435005856,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713884645
    },
    {
        "content": "<p>Thanks for doing this by the way!</p>",
        "id": 435005898,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713884661
    },
    {
        "content": "<p>I've just hit <code>!bench</code></p>",
        "id": 435006126,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713884731
    },
    {
        "content": "<p>I think that diff has a git screwup in it</p>",
        "id": 435006845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713884936
    },
    {
        "content": "<p>No, it's on purpose, it's merging into my branch, that's why</p>",
        "id": 435006922,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713884955
    },
    {
        "content": "<p>I guess we've added a quarter million lines of code in the past 9 months or so though?</p>",
        "id": 435007219,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713885043
    },
    {
        "content": "<p>Sounds about right, but we can't actually know since <a href=\"https://github.com/leanprover-community/mathlib4/graphs/contributors\">Github gives up on line counts in repos with more than 10000 commits</a></p>",
        "id": 435011166,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713886182
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_stats.html\">https://leanprover-community.github.io/mathlib_stats.html</a> gives ~200k net lines added since July last year.</p>",
        "id": 435014499,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713887220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span> I just checked the diff of that branch against current master, and it was pretty reasonable. There were a few heartbeat bumps I had added months ago when I was trying to get it to work. I was able to remove all of those without issue, so the only bump is to that decl in algebraic geometry. I also tried to address the linting issues, and I've push these changes to that branch. I'm happy for you to merge this into my branch if you want.</p>",
        "id": 435047428,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713897910
    },
    {
        "content": "<p>Ultimately, if people are happy with this idea / approach, then I think the right approach is to not merge this, but start a new branch with an intermediate <code>PPowAssoc</code> class in between <code>Mul</code> and <code>Semigroup</code> and an intermediate <code>PowAssoc</code> class in between <code>MulOneClass</code> and <code>Monoid</code>.</p>\n<p>Then, hopefully that version will have the same success. <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 435047959,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713898094
    },
    {
        "content": "<p>Thanks! I've merged my branch into yours. I hope I haven't distracted you too much. I probably should be doing other things...</p>",
        "id": 435048568,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1713898332
    },
    {
        "content": "<p>No, honestly I really appreciate your taking the time to do this. It's something I've meant to get back to and have just never had the impetus to do it. It would be very satisfying to finally be able to talk about PNat powers appropriately.</p>",
        "id": 435048788,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713898420
    }
]