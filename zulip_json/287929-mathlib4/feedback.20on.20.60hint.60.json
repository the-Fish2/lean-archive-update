[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20.60fprop.60.20tactic/near/418937467\">said</a>:</p>\n<blockquote>\n<p>(Public service announcement for those who haven't been using it: please do report your experiences with <code>hint</code>!)</p>\n</blockquote>\n<p>Where is a good place to put these? In particular I think one previous topic was to mention that <code>hint</code> often suggests <code>aesop</code> which then makes no progress</p>",
        "id": 419101040,
        "sender_full_name": "Julian Berman",
        "timestamp": 1706725894
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/feedback.20on.20.60hint.60/near/419101040\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/porting.20.02klzzwxh.3A0000.03.20tactic\">#mathlib4 &gt; porting <code>fprop</code> tactic</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>.</p>",
        "id": 419163058,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706756195
    },
    {
        "content": "<p>How about here.</p>\n<p>A repro showing <code>aesop</code> doing nothing would be great. I do remember that, but I think it may have been fixed, too.</p>",
        "id": 419163110,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706756241
    },
    {
        "content": "<p>Aesop should fail when it doesn't make progress. Anything else is a bug.</p>",
        "id": 419217753,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1706784063
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/hint\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/hint</a> was one where David shared an example.</p>",
        "id": 419237523,
        "sender_full_name": "Julian Berman",
        "timestamp": 1706791169
    },
    {
        "content": "<p>Example from that thread:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lemma1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">13</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">hint</span>\n<span class=\"c1\">-- Try these:</span>\n<span class=\"c1\">-- • aesop</span>\n\n<span class=\"c1\">-- ... but `aesop` fails with \"failed to prove the goal after exhaustive search.\"</span>\n</code></pre></div>\n<p>Aesop is working as intended here, but the result is quite confusing. Namely, Aesop makes progress using <em>unsafe</em> rules, but it doesn't manage to solve the goal. Hence, it reports the goals that remain after the <em>safe</em> rules were exhaustively applied, but the safe rules make no progress. So the reported goal is identical to the initial goal.</p>\n<p>I see two possible solutions:</p>\n<ol>\n<li><code>hint</code> uses <code>aesop (config := { terminal := true })</code> to suggest only Aesop calls that entirely solve the goal.</li>\n<li>Aesop reports \"no progress\" if the safe rules haven't made any progress.</li>\n</ol>",
        "id": 419266997,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1706800212
    },
    {
        "content": "<p>(Separately, but just because I recall it now) -- another recent example where I wished <code>hint</code> had given me some recommendation was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where I would have loved if <code>hint</code> told me <code>interval_cases</code> existed.</p>",
        "id": 419273868,
        "sender_full_name": "Julian Berman",
        "timestamp": 1706802084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>, isn't there a 3rd option, which is that Aesop could report what it achieved with the unsafe rules?</p>",
        "id": 419736997,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707085566
    },
    {
        "content": "<p>I guess that too often will produce garbage? In that case, my preference is for option 2.</p>",
        "id": 419737026,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707085596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/287929-mathlib4/topic/feedback.20on.20.60hint.60/near/419273868\">said</a>:</p>\n<blockquote>\n<p>(Separately, but just because I recall it now) -- another recent example where I wished <code>hint</code> had given me some recommendation was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where I would have loved if <code>hint</code> told me <code>interval_cases</code> existed.</p>\n</blockquote>\n<p>I would be much happier about <code>register_hint omega</code>, which also solves this goal.</p>",
        "id": 419737092,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707085671
    },
    {
        "content": "<p>But <code>register_hint interval_cases</code> is not terrible either.</p>",
        "id": 419737142,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707085695
    },
    {
        "content": "<p><code>register_hint omega</code> is <a href=\"https://github.com/leanprover-community/mathlib4/pull/10259\">#10259</a>.</p>",
        "id": 419737538,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707086042
    },
    {
        "content": "<p>Fantastic! Thanks Scott. I guess this is offtopic for <code>hint</code>, but how about having <code>omega</code> run on <code>trivial</code> as well, do you have an opinion and/or advice on whether that's a good idea as well? The original context for that was <a href=\"#narrow/stream/113489-new-members/topic/List.20access.20error/near/409839424\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/List.20access.20error/near/409839424</a> which IIRC was about list indexing, which uses <code>trivial</code>.</p>",
        "id": 419739654,
        "sender_full_name": "Julian Berman",
        "timestamp": 1707087534
    },
    {
        "content": "<p>Yes, it's definitely on the agenda to run <code>omega</code> more automatically in array indexing and termination. </p>\n<p><code>omega</code> is intended to fail pretty fast if it has nothing useful to do, although I worry that as people keep asking for more features it is getting slower. :-( I will re-run some benchmarks soon.</p>",
        "id": 419741856,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707089144
    },
    {
        "content": "<p>Issue for omega as default termination checking: <a href=\"https://github.com/leanprover/lean4/issues/3185\">https://github.com/leanprover/lean4/issues/3185</a></p>",
        "id": 419777751,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707118037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/feedback.20on.20.60hint.60/near/419736997\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span>, isn't there a 3rd option, which is that Aesop could report what it achieved with the unsafe rules?</p>\n</blockquote>\n<p>The main issue with this is that unsafe rules produce multiple sets of leftover goals. Showing all of them would not make for great UI. I could show a heuristically chosen subset, but this would be quite unpredictable. So I think I'll just adjust the progress check.</p>",
        "id": 419787647,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1707122387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/287929-mathlib4/topic/feedback.20on.20.60hint.60/near/419266997\">said</a>:</p>\n<blockquote>\n<p>Aesop reports \"no progress\" if the safe rules haven't made any progress.</p>\n</blockquote>\n<p>This is now implemented on Aesop master.</p>",
        "id": 419933385,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1707169401
    },
    {
        "content": "<p>Thank you both! Looking forward to trying it out.</p>",
        "id": 419935003,
        "sender_full_name": "Julian Berman",
        "timestamp": 1707170078
    }
]