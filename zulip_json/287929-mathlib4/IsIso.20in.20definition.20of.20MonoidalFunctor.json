[
    {
        "content": "<p>Why does the definition of <code>MonoidalFunctor</code> have Prop-valued fields <code>ε_isIso, μ_isIso</code> instead of inverses for <code>ε, μ</code>? It seems like it would be nice for things like <code>MonoidalClosed.ofEquiv</code> to compute, but this is not the case right now. It seems like this is at odds with other parts of the category theory library like <code>IsLimit, IsLeftAdjoint, IsEquivalence</code> where we use data-carrying subsingletons (or objects of contractible groupoids more generally) instead of Props</p>",
        "id": 421340565,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707865744
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.MonoidalFunctor#doc\">docs#CategoryTheory.MonoidalFunctor</a> for reference)</p>",
        "id": 421342256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707866648
    },
    {
        "content": "<p>It might just be done this way because it was easiest, since you can use <code>extends</code></p>",
        "id": 421342310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707866684
    },
    {
        "content": "<p>(which isn't an argument for keeping it the way it is)</p>",
        "id": 421342342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707866704
    },
    {
        "content": "<p>Why does extends not work if we do it the other way?</p>",
        "id": 421352230,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707872787
    },
    {
        "content": "<p>Oh, what I had in mind was adding fields called something like <code>μinv, εinv</code> and proofs that they're inverses, then deriving projections <code>μIso, εIso</code> from these (not making <code>μIso, εIso</code> themselves fields)</p>",
        "id": 421353078,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1707873356
    },
    {
        "content": "<p>I was indeed thinking of the other approach you describe</p>",
        "id": 421353161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707873388
    },
    {
        "content": "<p>Both are reasonable, I think the second one is shorter overall</p>",
        "id": 421353199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707873412
    },
    {
        "content": "<p>Does this risk introducing diamonds?</p>",
        "id": 421364050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707881092
    },
    {
        "content": "<p>I'm generally pretty unhappy with the state of MonoidalFunctor, so if you feel like making major changes, sounds good to me. :-)</p>",
        "id": 421366180,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707882734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/IsIso.20in.20definition.20of.20MonoidalFunctor/near/421364050\">said</a>:</p>\n<blockquote>\n<p>Does this risk introducing diamonds?</p>\n</blockquote>\n<p>I don’t think diamonds would be an issue with the proposed approach. It’s still just forgetting data when you pass to lax monoidal functors</p>",
        "id": 421367366,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1707883734
    },
    {
        "content": "<p>I have a first draft of this refactor, but as I was cleaning things up I realized the approach Eric had in mind would probably be better... I expect that most of the work I've done here will be compatible with that definition too, though. <a href=\"https://github.com/leanprover-community/mathlib4/pull/10845\">#10845</a></p>",
        "id": 422753296,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708581655
    },
    {
        "content": "<p>The PR is a somewhat unavoidably monstrous size, since so many files are descendents of <code>MonoidalFunctor</code></p>",
        "id": 422753337,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708581698
    },
    {
        "content": "<p>There's also a fair amount of boilerplate that only exists because I can't generate <code>εIso, μIso</code> with <code>simps</code>. A tactic that generates them in a similar way could be implemented, but it would be simplest to make the existing infrastructure available by having εIso, μIso be fields of MonoidalFunctor</p>",
        "id": 422753726,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708582007
    },
    {
        "content": "<p>Also, for oplax monoidal functors would we still use ε, μ or use the names η, δ? This is really a question about comonoids more generally. Comonads in mathlib use ε, δ which is consistent with the first source I checked (category theory in context) but feels wrong to me (it's not consistent with the names for the comultiplication/counit of a bialgebra)</p>",
        "id": 422756832,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708584305
    },
    {
        "content": "<p>Er wait I'm backwards, I think the convention I'm suggesting would say the unitor structure map for a lax monoidal functor should be named η instead of ε? This is very confusing</p>",
        "id": 422757046,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708584456
    },
    {
        "content": "<p>We only added bialgebras a few weeks ago and I'm definitely open to a change of names there if you're looking for consistency. I don't know what the literature says, we just copied out of a random book</p>",
        "id": 422763016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708587874
    },
    {
        "content": "<p>The suggested refactor would slightly ease some proofs in the internals of the API for shift functors . For example, I think that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.ShiftMkCore.shiftFunctorZero_eq#doc\">docs#CategoryTheory.ShiftMkCore.shiftFunctorZero_eq</a> would become <code>rfl</code>.</p>",
        "id": 422793712,
        "sender_full_name": "Joël Riou",
        "timestamp": 1708600075
    },
    {
        "content": "<p>Alternatively, should <code>IsIso</code> be made to carry data (so that it matches <code>IsLimit, IsLeftAdjoint, IsEquivalence</code>)?</p>",
        "id": 422801561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708603210
    },
    {
        "content": "<p>The with-data version of <code>IsIso</code> is <code>Iso</code>! I think it is useful to have both.</p>",
        "id": 422804553,
        "sender_full_name": "Joël Riou",
        "timestamp": 1708604337
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Iso#doc\">docs#Iso</a> is to my proposed <code>IsIso</code> as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units#doc\">docs#Units</a> is to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Invertible#doc\">docs#Invertible</a></p>",
        "id": 422805291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708604620
    },
    {
        "content": "<p>Or I think as <code>Adjunction</code> is to <code>IsLeftAdjoint</code>, though I could be mistaken there</p>",
        "id": 422805533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708604707
    },
    {
        "content": "<p>If <code>IsIso</code> was carrying data, there would be great risks of diamonds.</p>",
        "id": 422807050,
        "sender_full_name": "Joël Riou",
        "timestamp": 1708605273
    },
    {
        "content": "<p>Indeed, but it sounds like we were ok with that for the three other <code>Is*</code>s described above</p>",
        "id": 422807957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708605601
    },
    {
        "content": "<p>For some reason seeing all these <code>Is</code> things which aren't Props today, combined with seeing a bunch of non-<code>Is</code> things which are props in the question about topology and spectral spaces yesterday (<code>CompactSpace</code>, sober space, T0 space etc) really surprises me. This community is usually so consistent with naming conventions but with <code>Is</code> we are absolutely all over the place.</p>",
        "id": 422808486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708605792
    },
    {
        "content": "<p>I guess it's even something that we can lint against.</p>",
        "id": 422809030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708605996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/IsIso.20in.20definition.20of.20MonoidalFunctor/near/422807957\">said</a>:</p>\n<blockquote>\n<p>Indeed, but it sounds like we were ok with that for the three other <code>Is*</code>s described above</p>\n</blockquote>\n<p><code>IsLimit</code> is not a typeclass so that it carries data is not a problem (but we may consider changing the name). For <code>IsLeftAdjoint</code> and <code>IsEquivalence</code>, I am not super-happy that they contain data...</p>",
        "id": 422810459,
        "sender_full_name": "Joël Riou",
        "timestamp": 1708606505
    },
    {
        "content": "<p>May I interest you in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10819\">#10819</a>?</p>",
        "id": 422813827,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708607672
    },
    {
        "content": "<p>Did we agree on <code>_Like</code> as a naming pattern for data-like <code>Is_</code>? (I'm fine with it)</p>",
        "id": 422814044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708607726
    },
    {
        "content": "<p>I think the prop vs data carrying defintions in the category theory library are sort of a mess, it's not clear to me why some are one way and some are the other. Like, why is preservation of (co)limits a data carrying subsingleton when their existence is a prop? At the very least it would be good to have some design docs explaining the various design decisions</p>",
        "id": 422829594,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708612717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/IsIso.20in.20definition.20of.20MonoidalFunctor/near/422763016\">said</a>:</p>\n<blockquote>\n<p>We only added bialgebras a few weeks ago and I'm definitely open to a change of names there if you're looking for consistency. I don't know what the literature says, we just copied out of a random book</p>\n</blockquote>\n<p>The change in names would be for lax monoidal functors, renaming ε to η for consistent with monads (both are unit maps of monoids). Unfortunately I think ε is very common for the unitor of a lax monoidal functor in the literature. I'd just prefer if we uniformly stuck with:</p>\n<ul>\n<li>μ as the name for a multiplication</li>\n<li>δ (or Δ) as the name for a comultiplication</li>\n<li>η as the name for a unit</li>\n<li>ε as the name for a counit</li>\n</ul>",
        "id": 422830516,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708612975
    },
    {
        "content": "<p>For the preservation of limits/colimits, I think most of us agree it should be props.</p>",
        "id": 422832963,
        "sender_full_name": "Joël Riou",
        "timestamp": 1708613616
    }
]