[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> I have a failing case for <code>fun_prop</code> I'm hoping you have a quick fix for.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousAt</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ContinuousAt</span> <span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.recOn</span> <span class=\"n\">n</span> <span class=\"n\">continuousAt_id</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">ihn</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.iterate_succ</span><span class=\"o\">,</span> <span class=\"n\">Function.comp</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ihn</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ContinuousAt.comp'</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- `fun_prop` fails to find the hypothesis `ihn` in context.</span>\n    <span class=\"n\">fun_prop</span>\n</code></pre></div>",
        "id": 421166294,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707792087
    },
    {
        "content": "<p>If you're going to add this lemma to the library, then could you please add a more general version?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">Filter.Tendsto.iterate</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"n\">l</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>The <code>ContinuousAt</code> version follows by some <code>simp(a)</code></p>",
        "id": 421166609,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707792349
    },
    {
        "content": "<p>This lemma is already in the library as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousAt.iterate#doc\">docs#ContinuousAt.iterate</a>, I'm just trying out <code>fun_prop</code> in various places to see what it's capable of.</p>",
        "id": 421166687,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707792389
    },
    {
        "content": "<p>I'm going to add the generic <code>Tendsto</code> version so that we can use it, e.g., for <code>l = atTop</code>.</p>",
        "id": 421166741,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707792452
    },
    {
        "content": "<p>I see, this should be relatively easy to fix. </p>\n<p>When writing the tactic I wasn't thinking about recursively defined functions at all. They might break the tactic in more ways :)</p>",
        "id": 421168261,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707793650
    },
    {
        "content": "<p>I'm also thinking allowing to specify a custom normalization of the goal. Right now, there is no normalization going on(some unfolding and beta reduction).</p>\n<p>What about proving it with <code>induction n &lt;;&gt; (simp[Nat.iterate]; fun_prop (normalization:=rw[hx]))</code> ?</p>\n<p>Currently <code>induction n &lt;;&gt; (simp[Nat.iterate]; fun_prop)</code> stops on <code>ContinuousAt (fun x3 =&gt; f^[n] x3) (f x)</code>. To continue it would need to somehow apply <code>hx</code> to rewrite the <code>f x</code> to <code>x</code>.</p>",
        "id": 421168628,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707793916
    },
    {
        "content": "<p>I'm not asking for <code>fun_prop</code> to do the whole thing, just for it to see the hypothesis <code>ihn</code>. I thought it might be a missing <code>withMainContext</code> somewhere.</p>",
        "id": 421168824,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707794073
    },
    {
        "content": "<p>Nope, because the goal is <code>ContinuousAt (Nat.iterate f n) x</code> it is looking for facts about <code>Nat.iterate</code>. Right now, it does not look in the local context for constants.</p>",
        "id": 421168951,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707794168
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 421174578,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707799148
    },
    {
        "content": "<p>I found another test case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.fun_prop</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_case</span> <span class=\"o\">:</span> <span class=\"n\">DifferentiableOn</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">try</span> <span class=\"n\">fun_prop</span>\n  <span class=\"n\">apply</span> <span class=\"n\">DifferentiableOn.mul</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">differentiableOn_const</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">differentiableOn_id</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.fun_prop</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">❌</span><span class=\"o\">]</span> <span class=\"n\">DifferentiableOn</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">applicable</span> <span class=\"n\">theorems</span> <span class=\"n\">for</span> <span class=\"n\">HMul.hMul</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">DifferentiableOn.mul</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"bp\">❌</span><span class=\"o\">]</span> <span class=\"n\">applying</span><span class=\"o\">:</span> <span class=\"n\">DifferentiableOn.mul</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"bp\">❌</span><span class=\"o\">]</span> <span class=\"n\">DifferentiableOn</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"bp\">❌</span><span class=\"o\">]</span> <span class=\"n\">applying</span><span class=\"o\">:</span> <span class=\"n\">differentiableOn_const</span>\n</code></pre></div>",
        "id": 422154504,
        "sender_full_name": "llllvvuu",
        "timestamp": 1708313944
    }
]