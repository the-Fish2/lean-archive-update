[
    {
        "content": "<p>Recently I got into representation theory. I made a few threads in the past days of some difficulties I faced, e.g. <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Type.20of.20subrepresentation/near/442933800\">here</a> and <a href=\"#narrow/stream/113489-new-members/topic/Simplifying.20hidden.20function.20coercion.20mess/near/443179903\">here</a> and <a href=\"#narrow/stream/287929-mathlib4/topic/Proving.20equivalence.20of.20representation.20statements/near/443465555\">here</a>. I am trying to improve it, in particular by creating some API to convert between the categorical and \"classical\" (with G -&gt; GL(V)) setups. I ran into a lot of problems, so I made them into a file, and any help on the <code>sorry</code>s would be great. I am very unfamiliar with algebra in Mathlib, so sorry for the horrible code. <a href=\"https://gist.github.com/grhkm21/fa0533a5defc3c4b092b21706b55b20b\">Here is the link</a>.</p>\n<p>As a consequence, the following can be proven, which was my original goal: rank 1 representations are irreducible/simple</p>\n<p><a href=\"/user_uploads/3121/PzCofStyB_TvC9Tg_eM1q7hA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PzCofStyB_TvC9Tg_eM1q7hA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/PzCofStyB_TvC9Tg_eM1q7hA/image.png\"></a></div>",
        "id": 443652639,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1717973463
    },
    {
        "content": "<p>Unrelated to the mathematics: I think <code>FdRep</code> should be called <code>FDRep</code>.</p>",
        "id": 443728543,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1718013232
    },
    {
        "content": "<p>I can make a PR for that</p>",
        "id": 443866705,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1718054606
    },
    {
        "content": "<p>I finished the main goal of my original question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span><span class=\"w\"> </span><span class=\"n\">Rep.isSimpleModule_iff_simple</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsSimpleModule</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"bp\">⟦</span><span class=\"n\">G</span><span class=\"bp\">⟧</span><span class=\"w\"> </span><span class=\"n\">V.ρ.asModule</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">Simple</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">⟨</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">simple_of_isSimpleModule</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">isSimpleModule_of_Simple</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Now I just have to translate the language also to FDRep, and it will be done. From there some of the missing \"<a href=\"https://leanprover-community.github.io/undergrad_todo.html\">undergrad maths in Mathlib</a>\" , e.g.</p>\n<p><strong>Linear representations:</strong> <a href=\"https://en.wikipedia.org/wiki/Irreducible_representation\">irreducible representation</a>, examples</p>\n<p>and also</p>\n<p><strong>Representation theory of finite groups:</strong> <a href=\"https://proofwiki.org/wiki/Irreducible_Representations_of_Abelian_Group\">representations of abelian groups</a>, <a href=\"https://kconrad.math.uconn.edu/blurbs/grouptheory/charthy.pdf\">dual groups</a>, <a href=\"https://en.wikipedia.org/wiki/Fourier_transform_on_finite_groups#Fourier_transform_for_finite_abelian_groups\">Fourier transform for finite abelian groups</a>, <a href=\"https://en.wikipedia.org/wiki/Fourier_transform_on_finite_groups#Transform_of_a_convolution\">convolution</a>, <a href=\"https://en.wikipedia.org/wiki/Class_function\">class function over a group</a>, <a href=\"https://en.wikipedia.org/wiki/Character_theory#Orthogonality_relations\">orthonormal basis of irreducible characters</a>, examples of groups with small cardinality.</p>",
        "id": 446128650,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1718989779
    },
    {
        "content": "<p>Proof found <a href=\"https://gist.github.com/grhkm21/a6e6f00a4c5210c022e98b1033d362d8\">here</a>. TLDR use more category theory</p>",
        "id": 446128792,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1718989810
    },
    {
        "content": "<p>I find it quite confusing to keep track of all the defeq types. For example, a morphism <code>M --&gt; N</code> between two <code>ModuleCat R</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-modules is defeq is to <code>M -&gt;_l[R] N</code> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-linear maps). On paper of course this is obvious, but when writing the Lean code the user kind of have to memorise that, and transfer between the two when needed. It also means <code>exact?</code> doesn't work 70% of the time. <del>That's the point of the theorems like the one proven above, so that users don't have to think about these confusing things</del></p>",
        "id": 446129345,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1718989974
    },
    {
        "content": "<p>You might also want to consult Johan Commelin about designing an API for his Dynkin diagrams, since he's demonstrating the classification theorem.</p>",
        "id": 446282563,
        "sender_full_name": "E. Dean Young",
        "timestamp": 1719069235
    },
    {
        "content": "<p>I have created some PRs related to representation theory now:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/14140\">#14140</a> FdRep is rigid (autonomous)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/14309\">#14309</a> FdRep -&gt; FDRep as suggested by Winston above</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/14313\">#14313</a> FdRep is a full subcategory of Rep</li>\n</ul>\n<p>I think Kim is not too free currently so feel free to take over <a href=\"https://github.com/leanprover-community/mathlib4/pull/14140\">#14140</a> if you see this.<br>\nI have a few more results e.g. <a href=\"https://github.com/leanprover-community/mathlib4/pull/14308\">#14308</a> and also the <code>isSimpleModule_iff_simple</code> above.</p>",
        "id": 448212025,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1719805320
    }
]