[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Why.20does.20.60Matrix.2Erow.60.20use.20.20.60Unit.60.20instead.20of.20.60Fin.201.60.3F/near/427949223\">said</a>:</p>\n<blockquote>\n<p>I mean something like <code>(col v : R^m×1)</code></p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Why.20does.20.60Matrix.2Erow.60.20use.20.20.60Unit.60.20instead.20of.20.60Fin.201.60.3F/near/427949680\">said</a>:</p>\n<blockquote>\n<p>I was thinking something like <code>M_[m, n][R]</code></p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12178\">#12178</a> explores this further</p>",
        "id": 433696745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713341105
    },
    {
        "content": "<p>Exactly, I would like to add notation for <code>M : Matrix (Fin n) (Fin m) R</code> as I believe the two <code>(Fin _)</code> clutter the infoview, especially when students start doing exercises about something concrete like 3x3-Matrices.<br>\nDo people have an opinion what's the cleanest notation for such concrete matrices? (please add other suggestions):</p>",
        "id": 433713412,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713346555
    },
    {
        "content": "<p>/poll What would be a preferred notation for <code>Matrix (Fin n) (Fin m) R</code><br>\n<code>Mat[m, n][R]</code><br>\n<code>R¹ˣ³</code> (does not work for variables <code>n : Nat</code>; Potential problem with <code>Mᵀᵀ</code>)<br>\nboth <code>Mat[m, n][R]</code> and <code>R¹ˣ³</code> (preferring the latter if possible)<br>\n<code>R^[m, n]</code> (maybe fragile with <code>HPow</code>? But seems alright)<br>\n<code>R^n×m</code> (does not work at all, currently)</p>",
        "id": 433713498,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713346571
    },
    {
        "content": "<p>(generally, anything with <code>×</code> (\\times) seems very fragile or broken)</p>",
        "id": 433713633,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713346625
    },
    {
        "content": "<p>4 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Why.20does.20.02klzzwxh.3A0000.03.20use.20.20.02klzzwxh.3A0001.03.20instead.20of.20.02klzzwxh.3A0002.03.3F\">#mathlib4 &gt; Why does <code>Matrix.row</code> use  <code>Unit</code> instead of <code>Fin 1</code>?</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 433713880,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713346698
    },
    {
        "content": "<p><code>ℝ⁽ⁿ⁾ˣ²</code> works fine</p>",
        "id": 433714116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713346797
    },
    {
        "content": "<p>Though I claim that as soon as <code>m</code> and <code>n</code> are variables, <code>Matrix (Fin m) (Fin n)</code> is usually an antipattern anyway</p>",
        "id": 433714342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713346863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Notation.20for.20Matrix.20.28Fin.20m.29.20.28Fin.20n.29.20R/near/433714342\">said</a>:</p>\n<blockquote>\n<p>Though I claim that as soon as <code>m</code> and <code>n</code> are variables, <code>Matrix (Fin m) (Fin n)</code> is usually an antipattern anyway</p>\n</blockquote>\n<p>I think you are right regarding contributions to mathlib. However, in teaching I often thought I'd like to say let <code>m n : Nat</code> and look at <code>(m,n)-Matrices</code>\" which feels more natural/mathematical than \"let <code>m,n</code> be two <code>Fintype</code>s.\". And <code>Matrix (Fin m) (Fin n)</code> does appear in Mathlib 62 times (GroupTheory/RingTheory/NumberTheory/LinearAlgebra), so it seems not completely unreasonable that people use it. (Can add a comment to the docstring though suggesting using <code>Fintype</code>!)</p>",
        "id": 433715963,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713347387
    },
    {
        "content": "<p>/poll What would be a preferred notation for <code>Matrix (Fin n) (Fin m) R</code><br>\n<code>Mat[m, n][R]</code><br>\n<code>ℝ⁽ⁿ⁾ˣ²</code><br>\nboth <code>Mat[m, n][R]</code> and <code>R¹ˣ³</code> (preferring the latter if possible)<br>\n<code>R^[m, n]</code><br>\n<code>R^n×m</code> (does not work at all, currently)</p>",
        "id": 433716941,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713347651
    },
    {
        "content": "<p>(apparently I can't delete/modify a poll <span aria-label=\"neutral\" class=\"emoji emoji-1f610\" role=\"img\" title=\"neutral\">:neutral:</span> )</p>",
        "id": 433717125,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713347717
    },
    {
        "content": "<p>You get in trouble quite quickly with <code>Fin m</code> if you want to use block matrices or kronecker matrices or ...</p>",
        "id": 433717213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713347749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Notation.20for.20Matrix.20.28Fin.20m.29.20.28Fin.20n.29.20R/near/433713412\">said</a>:</p>\n<blockquote>\n<p>Exactly, I would like to add notation for <code>M : Matrix (Fin n) (Fin m) R</code> as I believe the two <code>(Fin _)</code> clutter the infoview, especially when students start doing exercises about something concrete like 3x3-Matrices.<br>\nDo people have an opinion what's the cleanest notation for such concrete matrices? (please add other suggestions):</p>\n</blockquote>\n<p>My opinion is matrices should be indexed by general (possibly finite) types, there's most of the time no need that they be of the form ‘Fin n‘ for some natural number n. In fact this is even often a nuisance.</p>",
        "id": 433727682,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713351638
    },
    {
        "content": "<p>Give <code>Type</code> an <code>OfNat</code> instance</p>",
        "id": 433733322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713353626
    },
    {
        "content": "<p>(<code>ZMod</code>)</p>",
        "id": 433733458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713353668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Notation.20for.20Matrix.20.28Fin.20m.29.20.28Fin.20n.29.20R/near/433727682\">said</a>:</p>\n<blockquote>\n<p>My opinion is matrices should be indexed by general (possibly finite) types, there's most of the time no need that they be of the form ‘Fin n‘ for some natural number n. In fact this is even often a nuisance.</p>\n</blockquote>\n<p>What about <code>Mat[ι, κ][R]</code> being notation for <code>Matrix ι κ R</code> and <code>Mat[m, n][R]</code> being notation for <code>Mat[Fin m, Fin n][R]</code>?</p>",
        "id": 433733995,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713353858
    },
    {
        "content": "<p>This could be made to work because the notation could look at whether the expected type is <code>Type _</code> or <code>Nat</code></p>",
        "id": 433734122,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713353891
    },
    {
        "content": "<p>But the notation isn't any shorter!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mat</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">κ</span><span class=\"o\">][</span><span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"n\">Matrix</span> <span class=\"n\">ι</span> <span class=\"n\">κ</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 433736217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713354574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Notation.20for.20Matrix.20.28Fin.20m.29.20.28Fin.20n.29.20R/near/433733322\">said</a>:</p>\n<blockquote>\n<p>Give <code>Type</code> an <code>OfNat</code> instance</p>\n</blockquote>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Nat</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:)</span> <span class=\"n\">ℕ</span> <span class=\"c1\">-- Matrix (Fin 2) (Fin 2) ℕ : Type</span>\n</code></pre></div>",
        "id": 433736639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713354728
    },
    {
        "content": "<p>I think we are underestimating the cognitive burden caused by adding an extra definition or piece of notation. In my opinion, it easily eclipses the benefit of not having to type <code>Fin</code> a couple times.</p>",
        "id": 433739744,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1713355606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> it makes it a bit difficult to explain what's going on in, e.g., the row swaps in Gaussian elimination if the indices don't come from a type, since a row swap is precisely a reindexing of the rows of a matrix, but for this they need to be numbered (not just have a cardinality).</p>",
        "id": 433758637,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713360984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I get that, I'm  also not arguing for <code>(Fin m)</code> instead of <code>[Fintype m]</code> for statements in mathlib.</p>\n<p>Instead, my assumption is that the notation <code>!![2, 2; 4, 5] : Matrix (Fin 2) (Fin 2) R</code> should be a well-integrated part into mathlib, but so far I have the experience that it's not as smooth as I'd like it to be. And as part of working with this notation I thought it would also be nice if the type was displayed as simple as <code>Mat[2,2][R]</code> so that one doesn't even need to parse these additional <code>Fin</code> floating around.</p>\n<p>But maybe it's just a wrong assumption that this is how one should use the API for calculations with simple, concrete matrices as you would find them in an undergrad exercise sheet (or in some science application) .</p>",
        "id": 433764343,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713362048
    },
    {
        "content": "<p>Writing a <code>simproc</code> for <code>!![a, b] * !![c; d]</code> is on my todo list; I had one in Lean 3, but it never got merged.</p>",
        "id": 433781820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713363929
    },
    {
        "content": "<p>Jon, I think for <em>numerals only</em> that syntax could be nice. However, I think it would be confusing to allow <code>Mat[m,n]</code> to mean <code>Matrix (Fin m) (Fin n)</code> where <code>m n : Nat</code>. That's because throughout Mathlib, people will see <code>Matrix m n</code>, and, not realizing the distinction, think that this is the same thing as <code>Mat[m,n]</code>, when it really isn't. But if we restrict it to work only for numerals, I think that's less of an issue and suits your use case better.</p>",
        "id": 433786166,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713364434
    }
]