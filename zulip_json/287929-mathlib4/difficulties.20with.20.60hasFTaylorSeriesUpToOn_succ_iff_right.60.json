[
    {
        "content": "<p>I'm having trouble fixing the proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=hasFTaylorSeriesUpToOn_succ_iff_right#src\">src#hasFTaylorSeriesUpToOn_succ_iff_right</a> in <code>Mathlib/Analysis/Calculus/ContDiff/Defs.lean</code> on the <code>lean-pr-testing-4119</code> branch. (We're keen to get <a href=\"https://github.com/leanprover/lean4/pull/4119\">lean#4119</a> in soon, as it fixes a bunch of longstanding typeclass inference bugs.)</p>\n<p>I'm probably done looking at this branch until after the weekend --- but I'm wondering if anyone would be interested in robustifying the proof on <code>master</code> in any case (and perhaps magically solving my problem).</p>\n<p>There's a slightly scary section</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">have</span> <span class=\"o\">:</span>\n          <span class=\"n\">HasFDerivWithinAt</span> <span class=\"o\">((</span><span class=\"n\">continuousMultilinearCurryRightEquiv'</span> <span class=\"bp\">ùïú</span> <span class=\"n\">m</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">‚àò</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">¬∑</span> <span class=\"n\">m.succ</span><span class=\"o\">))</span>\n            <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">shift</span> <span class=\"n\">m.succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">curryLeft</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Htaylor.fderivWithin</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">LinearIsometryEquiv.comp_hasFDerivWithinAt_iff'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n        <span class=\"n\">convert</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>in which we are making Lean do quite a lot of work both inferring implicit arguments, and then all the unification that goes into a <code>convert</code>. It's not terrible as proofs go, but I thought I would advertise this as one where I'd love to see a refactor that relies more on explicit terms and rewrites, and less on inference and unification. :-)</p>\n<p>If anyone is feeling particularly keen, coming up with a sane proof that still works on the lean-pr-testing-4119 branch would be even better!</p>",
        "id": 437971652,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715342984
    },
    {
        "content": "<p>Does less insane count as sane?</p>",
        "id": 438043217,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715373654
    },
    {
        "content": "<p>I had trouble porting this file (AFAIR, you've fixed some of the issues).</p>",
        "id": 438076063,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1715399272
    }
]