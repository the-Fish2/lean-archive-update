[
    {
        "content": "<p>I have a use case for the following result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Reflexive</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span><span class=\"w\"> </span><span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">op_hasReflexiveCoequalizers_of_hasCoreflexiveEqualizers</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">dual</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HasCoreflexiveEqualizers</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HasReflexiveCoequalizers</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The naïve approach seems to involve a whole lot of definition unpacking, to the point that I'm a little lost. It's my understanding that a general duality tactic doesn't really exist, but is there a \"fast\" way of closing the goal here?</p>",
        "id": 440363438,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1716483493
    },
    {
        "content": "<p>You may have a look at the file <code>Mathlib.CategoryTheory.Limits.Opposites</code>. In the case of pullbacks/pushouts, we have definitions which say things about pushout cocone that are colimit iff the corresponding pullback cone in the opposite is colimit, etc. There are similar results about (co)kernel (co)forks. For your application, it would be worth generalizing to more general fork/coforks, and  apply it to the case of reflexive equalizers, etc.</p>",
        "id": 440364835,
        "sender_full_name": "Joël Riou",
        "timestamp": 1716483969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> Thanks, I'll look into it!</p>\n<p>Also, I think I've discovered a minor XY problem here. I've realized that since I'm working in a category <code>C</code> which has all equalizers, I really just need that if <code>C</code> has equalizers then <code>Cᵒᵖ</code> has coequalizers. Is this already present somewhere/more readily achieved? I don't see such a result in <code>Mathlib/CategoryTheory/Limits/Constructions/Equalizers</code>, but maybe I'm not looking in the right places.</p>",
        "id": 440368603,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1716485482
    },
    {
        "content": "<p>Just look everywhere at once!</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">universe</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">v</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">Limits</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">HasEqualizers</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span><span class=\"w\"> </span><span class=\"n\">HasCoequalizers</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"w\"> </span><span class=\"c1\">-- works!</span>\n</code></pre></div>",
        "id": 440369940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716486074
    },
    {
        "content": "<p>Apparently it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.hasEqualizers_opposite#doc\">docs#CategoryTheory.Limits.hasEqualizers_opposite</a> in <code>CategoryTheory/Limits/Opposites.lean</code></p>",
        "id": 440370064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716486131
    },
    {
        "content": "<p>I was about to say, I should have bothered checking <code>exact?</code> <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span> thanks! (This did teach me that <code>#synth</code> exists though. I assume it does the same thing that <code>exact?</code> does?) I will probably still try to prove <code>op_hasReflexiveCoequalizers_of_hasCoreflexiveEqualizers </code> when I get around to it.</p>",
        "id": 440370479,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1716486331
    },
    {
        "content": "<p>Anyway, I'll mark this as resolved for now since my current issue is resolved, although this XY problem has given me an excuse to make a PR in the near future.</p>",
        "id": 440370887,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1716486540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"218940\">Charlie Conneen</span> has marked this topic as resolved.</p>",
        "id": 440370904,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716486546
    },
    {
        "content": "<p><code>#synth</code> specifically searches for instances.</p>",
        "id": 440396741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716497544
    },
    {
        "content": "<p>And you don't have to resolve topics here, this just adds a bit of noise.</p>",
        "id": 440396881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716497615
    }
]