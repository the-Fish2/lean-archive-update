[
    {
        "content": "<p>The proofs in <code>Mathlib.Computability.PartrecCode</code> contain some non-terminal simps.</p>\n<p>I just had to make some modifications in these proofs to adapt to a potential change in Lean. Fortunately I managed to work it out fairly quickly, but nevertheless the non-terminal simps made it marginally harder.</p>\n<p>Could I please request an upgrade here?</p>",
        "id": 444141074,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718164291
    },
    {
        "content": "<p>Pinging <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> as the original author of this code, but hopefully this doesn't need to be solely his problem.</p>",
        "id": 444141116,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718164317
    },
    {
        "content": "<p>is there a linter which flags the offenses?</p>",
        "id": 444296068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718214625
    },
    {
        "content": "<p>The python style linter for non-terminal simps is apparently too simple-minded - would <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>'s \"flexible tactics linter\" help here? (I could imagine it does, but they are the author, so let's hear from them.)</p>",
        "id": 444315923,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718220771
    },
    {
        "content": "<p>The linter \"works\" in the sense that it does flag \"rigid tactics\" following \"flexible tactics\".  One of the reasons why I stopped pushing for it, though, is that I did not really find a good way to silence the linter: most of the times, neither <code>simp only [...]</code>, nor <code>suffices ...</code> feels like an improvement.</p>",
        "id": 444319676,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718222037
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13791\">#13791</a></p>",
        "id": 444366089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718245415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Non-terminal.20simps.20in.20.60Mathlib.2EComputability.2EPartrecCode.60/near/444319676\">said</a>:</p>\n<blockquote>\n<p>The linter \"works\" in the sense that it does flag \"rigid tactics\" following \"flexible tactics\".  One of the reasons why I stopped pushing for it, though, is that I did not really find a good way to silence the linter: most of the times, neither <code>simp only [...]</code>, nor <code>suffices ...</code> feels like an improvement.</p>\n</blockquote>\n<p>One easy thing that would help here would be to add the linter, but disable it by default. Then it would be possible to enable it locally for cleanups like this</p>",
        "id": 444366198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718245478
    },
    {
        "content": "<p>Ok, I can certainly do that, though I'll have to bump it: I may not have much lean time for a week or two, since it is end of term and I'll be busy with exams.</p>",
        "id": 444380892,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718253786
    },
    {
        "content": "<p>I think that the relevant PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/11821\">#11821</a>.</p>",
        "id": 444381817,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718254459
    },
    {
        "content": "<p>I updated <a href=\"https://github.com/leanprover-community/mathlib4/pull/11821\">#11821</a> and marked it as <code>awaiting-review</code>.</p>\n<p>The PR is over 700 lines long, but half of it is tests, the linter is documented and verbose.</p>\n<p>The extensive tests show what the linter flags and what it does not flag -- they are really intended to be close to a specification of the linter and of which tactics are considered flexible (by default, a new tactic is rigid, not flexible).</p>\n<p>Pro: As I mentioned above, I think that in terms of flagging rigid tactics that follow flexible ones, it does a good job.</p>\n<p>Cons: I also think that the code could probably be improved upon and I suspect that it does not perform very well.</p>\n<p>Conclusion: If the intention is to leave it silent (as it is now in the PR) and only activate it locally, it is probably in a pretty good state!</p>",
        "id": 444513639,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718297634
    },
    {
        "content": "<p>For the specific case in question, <code>Mathlib.Computability.PartrecCode</code>, the output of <code>lake build</code> with the linter turned on is too long for Zulip, but this is how it starts:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">⚠</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">678</span><span class=\"bp\">/</span><span class=\"mi\">678</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Replayed</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Computability</span><span class=\"bp\">.</span><span class=\"n\">PartrecCode</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Computability</span><span class=\"bp\">/</span><span class=\"n\">PartrecCode</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">70</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this'</span><span class=\"w\"> </span><span class=\"n\">stains</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">this'</span><span class=\"bp\">...</span>\n<span class=\"n\">note</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">disabled</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">flexible</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"bp\">`</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Computability</span><span class=\"bp\">/</span><span class=\"n\">PartrecCode</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">70</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">...</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">this'</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">this'!</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Computability</span><span class=\"bp\">/</span><span class=\"n\">PartrecCode</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">341</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"w\"> </span><span class=\"n\">stains</span><span class=\"w\"> </span><span class=\"bp\">'⊢'...</span>\n<span class=\"n\">note</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">disabled</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">flexible</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"bp\">`</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Computability</span><span class=\"bp\">/</span><span class=\"n\">PartrecCode</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">342</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">...</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">iterate</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">cases'</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ofNatCode_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ofNatCode</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl'</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"bp\">'⊢'!</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Computability</span><span class=\"bp\">/</span><span class=\"n\">PartrecCode</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">341</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"w\"> </span><span class=\"n\">stains</span><span class=\"w\"> </span><span class=\"bp\">'⊢'...</span>\n<span class=\"n\">note</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">disabled</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">flexible</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"bp\">`</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Computability</span><span class=\"bp\">/</span><span class=\"n\">PartrecCode</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">343</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">...</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">length_map</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">length_range</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"bp\">'⊢'!</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Computability</span><span class=\"bp\">/</span><span class=\"n\">PartrecCode</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">341</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"w\"> </span><span class=\"n\">stains</span><span class=\"w\"> </span><span class=\"bp\">'⊢'...</span>\n<span class=\"n\">note</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">disabled</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">flexible</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"bp\">`</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Computability</span><span class=\"bp\">/</span><span class=\"n\">PartrecCode</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">344</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">...</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">div2</span><span class=\"bp\">.</span><span class=\"n\">div2'</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"bp\">'⊢'!</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Computability</span><span class=\"bp\">/</span><span class=\"n\">PartrecCode</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">341</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"w\"> </span><span class=\"n\">stains</span><span class=\"w\"> </span><span class=\"bp\">'⊢'...</span>\n<span class=\"n\">note</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">disabled</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">flexible</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"bp\">`</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Computability</span><span class=\"bp\">/</span><span class=\"n\">PartrecCode</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">345</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">...</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"k\">show</span>\n<span class=\"w\">  </span><span class=\"n\">G₁</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)),</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)))</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"bp\">'⊢'!</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Computability</span><span class=\"bp\">/</span><span class=\"n\">PartrecCode</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">341</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"w\"> </span><span class=\"n\">stains</span><span class=\"w\"> </span><span class=\"bp\">'⊢'...</span>\n<span class=\"n\">note</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">disabled</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">flexible</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"bp\">`</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Computability</span><span class=\"bp\">/</span><span class=\"n\">PartrecCode</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">355</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">...</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">ofNatCode</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"bp\">'⊢'!</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Computability</span><span class=\"bp\">/</span><span class=\"n\">PartrecCode</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">454</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"w\"> </span><span class=\"n\">stains</span><span class=\"w\"> </span><span class=\"bp\">'⊢'...</span>\n<span class=\"n\">note</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">disabled</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">linter</span><span class=\"bp\">.</span><span class=\"n\">flexible</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"bp\">`</span>\n\n<span class=\"bp\">...</span><span class=\"w\"> </span><span class=\"mi\">358</span><span class=\"w\"> </span><span class=\"n\">lines</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">output</span>\n\n<span class=\"n\">Build</span><span class=\"w\"> </span><span class=\"n\">completed</span><span class=\"w\"> </span><span class=\"n\">successfully</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>The linter <em>warns</em> at the first flexible tactic that is followed by a rigid one and then <em>info</em>rms all the following rigid tactics, until the next flexible tactic appears.  Essentially, it follows the proof tree and reports all rigid nodes that have a flexible ancestor.</p>",
        "id": 444516899,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718298565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Non-terminal.20simps.20in.20.60Mathlib.2EComputability.2EPartrecCode.60/near/444513639\">said</a>:</p>\n<blockquote>\n<p>I updated <a href=\"https://github.com/leanprover-community/mathlib4/pull/11821\">#11821</a> and marked it as <code>awaiting-review</code>.</p>\n</blockquote>\n<p>What about the linter output that I asked in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11821#issuecomment-2152119886\">https://github.com/leanprover-community/mathlib4/pull/11821#issuecomment-2152119886</a> ?</p>",
        "id": 444566968,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718314321
    },
    {
        "content": "<p>Yaël, <a href=\"https://github.com/leanprover-community/mathlib4/pull/13812\">#13812</a> sets the default of the linter to true and imports it in <code>.Tactic.Linter</code>.</p>",
        "id": 444588040,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718326115
    },
    {
        "content": "<p>The output looks very reasonable</p>",
        "id": 444616531,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718341844
    },
    {
        "content": "<p>I'm glad you like it!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 444621507,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718343755
    }
]