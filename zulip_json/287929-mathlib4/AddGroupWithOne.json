[
    {
        "content": "<p>Why is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddGroupWithOne#doc\">docs#AddGroupWithOne</a> defined in a file called <code>Mathlib/Data/Int/Cast/Defs.lean</code>. I would expect stuff about <code>Int.Cast</code> there. But not much more...</p>",
        "id": 426369346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710344407
    },
    {
        "content": "<p>This is probably half a porting accident. <code>AddGroupWithOne</code> was new to Lean 4 and backported to Lean 3. So it already existed and material around ad hoc porting always had some special treatment.</p>\n<p>In addition, I think the main point is that you can't put it any <em>earlier</em> (as we do with <code>Algebra.Group.Defs</code>) because you actually need the cast first.</p>",
        "id": 426370158,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710344655
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonoidWithOne#doc\">docs#AddMonoidWithOne</a> is also in <code>Data.Nat.Cast.Defs</code></p>",
        "id": 426370185,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710344662
    },
    {
        "content": "<p>Right, it can't go earlier, but I still expected it <em>later</em>, outside <code>Int/Cast/*</code></p>",
        "id": 426373569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1710345588
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 426373815,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710345641
    },
    {
        "content": "<p>I guess we could just split them out into <code>Algebra.Monoid.WithOne</code> and <code>Algebra.Group.WithOne</code> or something like that.</p>",
        "id": 426374221,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710345736
    },
    {
        "content": "<p>Nonono, please don't do that</p>",
        "id": 426406839,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710356025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> can you expand?</p>",
        "id": 426407308,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710356195
    },
    {
        "content": "<p>Everything under <code>Algebra.Monoid</code> and <code>Algebra.Group</code> is meant to be additivisable. <code>AddMonoidWithOne</code> and <code>AddGroupWithOne</code> are not</p>",
        "id": 426407468,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710356266
    },
    {
        "content": "<p>What would you recommend for a module?</p>",
        "id": 426407628,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710356333
    },
    {
        "content": "<p>Furthermore, <code>AddMonoidWithOne</code> and <code>AddGroupWithOne</code> are exactly where they should be. They are part of the core definitions needed for <code>Nat.cast</code>/<code>Int.cast</code></p>",
        "id": 426407637,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710356336
    },
    {
        "content": "<p>I would recommend leaving them as is</p>",
        "id": 426407680,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710356354
    },
    {
        "content": "<p>And Jireh is wrong in that it is not a porting accident</p>",
        "id": 426407940,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710356430
    },
    {
        "content": "<p>It was <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> who defined much before the port and put them where they are now</p>",
        "id": 426408091,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710356481
    },
    {
        "content": "<p>Yaël, did I not say they were in place and then backported? My point is that during porting we didn't think terribly hard about where these should ‌‌/ would go; I know, because I ported them (IIRC).</p>",
        "id": 426408571,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710356663
    },
    {
        "content": "<p>But nevertheless, I take your point about being additivisable. Is that convention written down anywhere? If not, let's make that happen.</p>",
        "id": 426408679,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710356715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/AddGroupWithOne/near/426407637\">said</a>:</p>\n<blockquote>\n<p>Furthermore, <code>AddMonoidWithOne</code> and <code>AddGroupWithOne</code> are exactly where they should be. They are part of the core definitions needed for <code>Nat.cast</code>/<code>Int.cast</code></p>\n</blockquote>\n<p>This argument seems stronger to me than the one about additivizability</p>",
        "id": 426410979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710357571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/AddGroupWithOne/near/426408571\">said</a>:</p>\n<blockquote>\n<p>My point is that during porting we didn't think terribly hard about where these should ‌‌/ would go; I know, because I ported them (IIRC).</p>\n</blockquote>\n<p>I'm on my phone right now but I'm sure Eric can show you the PR from 2022 which defined <code>AddMonoidWithOne</code>.</p>",
        "id": 426413907,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710358730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/AddGroupWithOne/near/426408679\">said</a>:</p>\n<blockquote>\n<p>But nevertheless, I take your point about being additivisable. Is that convention written down anywhere? If not, let's make that happen.</p>\n</blockquote>\n<p>It is not yet written anywhere because it is not yet true. I'm trying to make it happen but I'm stuck at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom.End#doc\">docs#MonoidHom.End</a>, for which I might have to make an exception.</p>",
        "id": 426414079,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710358802
    },
    {
        "content": "<p>At least once it becomes true (maybe modulo <code>MonoidHom.End</code>) we won't have bogus things like basic files about groups importing rings</p>",
        "id": 426414337,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710358883
    },
    {
        "content": "<p>We can't have such things be policed by \"Yael notices some github discussion and they put a stop to it\" - can we put some documentation in the folders?</p>",
        "id": 426415386,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1710359287
    },
    {
        "content": "<p>The PR Yael is talking about is <a href=\"https://github.com/leanprover-community/mathlib/pull/12182\">https://github.com/leanprover-community/mathlib/pull/12182</a></p>",
        "id": 426416198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710359634
    },
    {
        "content": "<p>Though I think it was indeed motivated by Lean 4's <code>OfNat</code> in some way (<a href=\"#narrow/stream/113488-general/topic/enat.20pain/near/282459938\">relevant message</a>)</p>",
        "id": 426416473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710359744
    },
    {
        "content": "<p>I think the summary is that in Lean 3 we had an <code>Algebra</code> diamond that we could put up with, but in lean 4 we were headed towards having a diamond in numeric literals, which made the problem much more urgent.</p>",
        "id": 426416621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710359793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/AddGroupWithOne/near/426415386\">said</a>:</p>\n<blockquote>\n<p>can we put some documentation in the folders?</p>\n</blockquote>\n<p>Yes actually I am still very much in favour of putting some markdown file inside each (somewhat interesting) folder to explain what is supposed to be in there.</p>",
        "id": 426417754,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710360243
    }
]