[
    {
        "content": "<p>I don't know how to get the tactic <code>reduce_mod_char</code> to do anything for me in a (variable) ring with a <code>CharP</code> hypothesis. <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span>\n  <span class=\"n\">reduce_mod_char</span> <span class=\"c1\">-- no progress</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span>\n  <span class=\"n\">reduce_mod_char</span> <span class=\"c1\">-- no progress</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">reduce_mod_char</span> <span class=\"c1\">-- no progress</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">reduce_mod_char</span> <span class=\"c1\">-- no progress</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">reduce_mod_char</span> <span class=\"c1\">-- no progress</span>\n</code></pre></div>",
        "id": 426764477,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1710515664
    },
    {
        "content": "<p>I don't think <code>reduce_mod_char</code> searches for a <code>CharP</code> instance at all. It contains a hardcoded list of supported types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Determine the characteristic of a ring from the type.</span>\n<span class=\"sd\">This should be fast, so this pattern-matches on the type, rather than searching for a</span>\n<span class=\"sd\">`CharP` instance. -/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">typeToCharP</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">TypeToCharPResult</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">Expr.getAppFnArgs</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">ZMod</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">))])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">intLike</span> <span class=\"n\">n</span>\n  <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">((</span><span class=\"n\">ZMod.commRing</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toRing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">ZMod.charP</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">CharP</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Polynomial</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)),</span> <span class=\"n\">_</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">typeToCharP</span> <span class=\"n\">R</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">intLike</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">intLike</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Polynomial.ring</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"bp\">$</span><span class=\"n\">R</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Polynomial.instCharP</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">CharP</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"bp\">$</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">failure</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">failure</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">failure</span>\n</code></pre></div>",
        "id": 426828634,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1710539951
    },
    {
        "content": "<p>Huh, that seems like it should be easy to support (iirc Anne's Lean 3 version did support this, and it certainly seems coded up with that in mind also)</p>",
        "id": 426844646,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710549956
    },
    {
        "content": "<p>(I posted this reply a couple days ago, but I can't see it now so I'll repost. Sorry for possibly spamming the topic.)</p>\n<p>Markus is right. The reason that this is not supported currently is that the tactic avoids searching for a <code>CharP</code> instance on every type of every subexpression, which saves quite a bit of time in my testcases. I suppose adding a <code>reduce_mod_char!</code> variant that does do the instance search would be an easy fix. (Or maybe the user can pass the type on which to operate?)</p>",
        "id": 427399767,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1710753194
    },
    {
        "content": "<p>I tried implementing the typeclass search approach and ran into an issue: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharP#doc\">docs#CharP</a> in <code>CharP R n</code> doesn't have <code>n</code> as an outParam, so it's not supposed to be assignable during instance search. So when we ask for an instance of <code>CharP R ?n</code> with <code>[CharP R 2]</code> in the context, the unification <code>?n =?= 2</code> fails. Is there a workaround?</p>",
        "id": 427415545,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1710756133
    },
    {
        "content": "<p>Try typeclass search with every possible <code>n</code>? <span aria-label=\"speak no evil\" class=\"emoji emoji-1f64a\" role=\"img\" title=\"speak no evil\">:speak_no_evil:</span></p>",
        "id": 427415796,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710756179
    },
    {
        "content": "<p>(Modifying the depth of the metavariable after creating it doesn't work, because it's subsequently checked in the original depth, so the metavariable won't be assignable during that check.)</p>",
        "id": 427419420,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1710756836
    },
    {
        "content": "<p>Here's the code I came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">typeToCharP</span> <span class=\"o\">(</span><span class=\"n\">expensive</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">TypeToCharPResult</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">Expr.getAppFnArgs</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">ZMod</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">))])</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">intLike</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">((</span><span class=\"n\">ZMod.commRing</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toRing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">ZMod.charP</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">CharP</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Polynomial</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)),</span> <span class=\"n\">_</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">typeToCharP</span> <span class=\"o\">(</span><span class=\"n\">expensive</span> <span class=\"o\">:=</span> <span class=\"n\">expensive</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">intLike</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">intLike</span> <span class=\"n\">n</span>\n      <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Polynomial.ring</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"bp\">$</span><span class=\"n\">R</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Polynomial.instCharP</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">CharP</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"bp\">$</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">failure</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">failure</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"bp\">!</span> <span class=\"n\">expensive</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">failure</span> <span class=\"k\">else</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- Fallback: run an expensive procedures to determine a characteristic,</span>\n  <span class=\"c1\">-- by looking for a `CharP` instance.</span>\n  <span class=\"n\">withNewMCtxDepth</span> <span class=\"k\">do</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> If we want to support semirings, here we could implement the `natLike` fallback. -/</span>\n    <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">instRing</span> <span class=\"bp\">←</span> <span class=\"n\">trySynthInstanceQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Ring</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">failure</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    -- Evil hack because we do want `n` to be assigned by `synthInstance`.</span>\n<span class=\"cm\">    modifyMCtx fun mctx =&gt; mctx.modifyExprMVarDecl n.mvarId!</span>\n<span class=\"cm\">      fun decl =&gt; { decl with depth := decl.depth + 1 }</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">instCharP</span> <span class=\"bp\">←</span> <span class=\"n\">trySynthInstanceQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">CharP</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">failure</span>\n\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">intLike</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVarsQ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">instRing</span> <span class=\"n\">instCharP</span>\n</code></pre></div>",
        "id": 427419848,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1710756920
    },
    {
        "content": "<p>Can't you create a new metavariable at the correct depth, unify that one, then unify it with the old one too?</p>",
        "id": 427419946,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710756939
    },
    {
        "content": "<p>The point being that both unifications can be done at different depths</p>",
        "id": 427420260,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710756993
    },
    {
        "content": "<p><code>synthInstance</code> does both unifications internally, so I don't see how to pass in two different metavariables in one call.</p>",
        "id": 427421486,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1710757230
    },
    {
        "content": "<p>Do the first one using <code>synthInstance</code>, the second one manually?</p>",
        "id": 427421757,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710757293
    },
    {
        "content": "<p>No no, I mean that <code>synthInstance</code> unifies <code>CharP R ?n =?= CharP R 2</code> twice: once inside a <code>withNewMCtxDepth</code> (when trying candidate instances) and once outside (when checking that the resulting instance is correct). I don't see a way to separate these out without reimplementing a large part of the instance synthesis functions.</p>",
        "id": 427422537,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1710757435
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ringChar.charP#doc\">docs#ringChar.charP</a> the only reason we don't just make the n an out param? Maybe its time we reconsidered how this is all set up</p>",
        "id": 427426189,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710758103
    },
    {
        "content": "<p>Yes, I assume the problem is that we might get equal-but-not-defeq values for <code>?n</code> from a <code>CharP R ?n</code> goal. But that shouldn't be a big issue, right?</p>",
        "id": 427429109,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1710758629
    },
    {
        "content": "<p>Here's a PR that makes the first few examples in this thread work: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11478\">#11478</a>. The last ones require support for (n, z, ...)-smul which we can do in a separate, and hopefully easier, PR.</p>",
        "id": 427429786,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1710758754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/reduce_mod_char.20doesn't.20work/near/427399767\">said</a>:</p>\n<blockquote>\n<p>(I posted this reply a couple days ago, but I can't see it now so I'll repost. Sorry for possibly spamming the topic.)</p>\n<p>Markus is right. The reason that this is not supported currently is that the tactic avoids searching for a <code>CharP</code> instance on every type of every subexpression, which saves quite a bit of time in my testcases. I suppose adding a <code>reduce_mod_char!</code> variant that does do the instance search would be an easy fix. (Or maybe the user can pass the type on which to operate?)</p>\n</blockquote>\n<p>Other tactics like <code>ring</code> and <code>norm_num</code> also search for a lot of type classes, so that doesn't sound like an inherent problem for a performant tactic.<br>\nThe fact that the <code>n</code> is a metavariable during type-class search is a problem of course.<br>\nI think looking for variables in the local context is a good compromise.</p>",
        "id": 427904761,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1710933530
    }
]