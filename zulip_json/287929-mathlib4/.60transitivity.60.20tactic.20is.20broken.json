[
    {
        "content": "<p>This worked in Lean 3</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">transitivity</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but doesn't work in Lean 4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">transitivity</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 421220984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707822219
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Error message</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>application type mismatch\n  @Nat.lt_trans ?m.29 2\nargument\n  2\nhas type\n  ℚ : Type\nbut is expected to have type\n  ℕ : Type\n</code></pre></div>\n</div></div>",
        "id": 421221101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707822263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60transitivity.60.20tactic.20is.20broken/near/421220984\">said</a>:</p>\n<blockquote>\n<p>This worked in Lean 3</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">transitivity</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but doesn't work in Lean 4</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">transitivity</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Just \"<code>trans</code>\" now</p>",
        "id": 421221487,
        "sender_full_name": "Richard Copley",
        "timestamp": 1707822423
    },
    {
        "content": "<p>Yeah, trans works. But what's up with transitivity then?</p>",
        "id": 421225982,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707824295
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 421232215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707826792
    },
    {
        "content": "<p>I guess he means \"what if anything does <code>transitivity</code> do in lean 4\"?</p>",
        "id": 421235289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707827879
    },
    {
        "content": "<p>Yeah, I fully expected it to either do the same as <code>trans</code> or not do anything</p>",
        "id": 421242680,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707830605
    },
    {
        "content": "<p>But instead we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"transitivity\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">transitivity</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.le_trans</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">transitivity</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">))</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">transitivity</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_trans</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">transitivity</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 421242701,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707830613
    },
    {
        "content": "<p>Which seems to be used exactly once in mathlib</p>",
        "id": 421242931,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707830679
    },
    {
        "content": "<p>Well, this explains the error message...</p>",
        "id": 421243214,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707830773
    },
    {
        "content": "<p>Let's see what happens: <a href=\"https://github.com/leanprover-community/mathlib4/compare/tactic-transitivity?expand=1\">https://github.com/leanprover-community/mathlib4/compare/tactic-transitivity?expand=1</a></p>",
        "id": 421243385,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707830840
    },
    {
        "content": "<p>early on I mathported uses of <code>transitivity</code> to <code>trans</code>, I'm not sure who added the <code>transitivity</code> tactic</p>",
        "id": 421243610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707830916
    },
    {
        "content": "<p>A certain <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, apparently</p>",
        "id": 421243901,
        "sender_full_name": "Richard Copley",
        "timestamp": 1707831017
    },
    {
        "content": "<p>it appears to be one of the first commits to mathlib4, long before mathport</p>",
        "id": 421243966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707831039
    },
    {
        "content": "<p>I think it was just a straight hand port of some basic tactics, which later got lost in the shuffle when mathport started</p>",
        "id": 421244061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707831069
    },
    {
        "content": "<p>Yeah, <a href=\"https://github.com/leanprover-community/mathlib4/commit/c993c9367f19ed77ea27bbef7592ff30b6bf4c43\">https://github.com/leanprover-community/mathlib4/commit/c993c9367f19ed77ea27bbef7592ff30b6bf4c43</a> . I think it's outlived its usefulness :)</p>",
        "id": 421244319,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707831159
    }
]