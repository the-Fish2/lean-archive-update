[
    {
        "content": "<p>The following snippet times out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">E</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>Looking at the trace, it seems that Lean decides at some point that its best bet is to prove <code>Algebra A F</code> which leads it to try to prove <code>Algebra A E</code> and from there it gets nowhere. <br>\nRising <code>synthInstance.maxHeartbeats</code> to  <code>150000</code> or providing a little hint such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"mi\">1001</span><span class=\"o\">]</span> <span class=\"n\">Algebra.id</span>\n</code></pre></div>\n<p>does help it synthesize the instance though.</p>",
        "id": 417083809,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1705841032
    },
    {
        "content": "<p><code>attribute [-instance] IsDomain.toCancelCommMonoidWithZero IsDomain.toCancelMonoidWithZero</code> makes it fast</p>",
        "id": 417086842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705843516
    },
    {
        "content": "<p>I think these instances are forming loops somehow</p>",
        "id": 417086852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705843527
    },
    {
        "content": "<p>What's wrong with making <code>Algebra.id</code> super-high priority? Whenever it applies it's going to be exactly what we're looking for, right?</p>",
        "id": 417091292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705847120
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9887\">#9887</a> to see what happens</p>",
        "id": 417091746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705847486
    },
    {
        "content": "<p>ha ha apparently CI disagrees with this \"it can't go wrong\" argument :-)</p>",
        "id": 417095618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705850439
    },
    {
        "content": "<p>I find it very surprising that this change is causing trouble with <code>linarith</code>...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">Convex</span><span class=\"bp\">/</span><span class=\"n\">SpecificFunctions</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">223</span><span class=\"o\">:</span><span class=\"mi\">61</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">linarith</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 417096558,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1705851216
    },
    {
        "content": "<p>One problem with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.id#doc\">docs#Algebra.id</a> is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.id#doc\">docs#RingHom.id</a> is not reducible. So when trying unification at reducible or instance transparency Lean won’t unfold it.</p>",
        "id": 417097291,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1705851820
    },
    {
        "content": "<p>yeah mathlib is breaking at completely random places. See the current state of <a href=\"https://github.com/leanprover-community/mathlib4/pull/9887\">#9887</a>, but it's still not compiling and I'm going to give up.</p>",
        "id": 417097745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705852202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> the issue with <code>linarith</code> is that for some reason which I don't understand at all, <code>(1 + t) / 2</code> is being replaced with <code>Div.div (1 + t) 2</code> and this is not in the form which <code>linarith</code> understands (it's definitionally equal but not syntactically equal). Quite why my change caused this, I have no idea.</p>",
        "id": 417097824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705852264
    },
    {
        "content": "<p>I see. Anyway, thanks for the effort. I'll use one of the above tricks to fix the problem.</p>",
        "id": 417098004,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1705852431
    },
    {
        "content": "<p>Aside: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> gets pretty close to pushing it under the default limit. You need <code>35000</code>.</p>",
        "id": 417098994,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1705853168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2Eid.20for.20IntermediateField/near/417097291\">said</a>:</p>\n<blockquote>\n<p>One problem with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.id#doc\">docs#Algebra.id</a> is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.id#doc\">docs#RingHom.id</a> is not reducible. So when trying unification at reducible or instance transparency Lean won’t unfold it.</p>\n</blockquote>\n<p>It sounds like using <code>toRingHom</code> in algebra instances (without overriding toFun) is an anti pattern then?</p>",
        "id": 417124717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705873690
    },
    {
        "content": "<p>Rewriting some instances like this sounds like a good experiment</p>",
        "id": 417281665,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1705944945
    },
    {
        "content": "<p>I am having similar problems with <code>IntermediateField</code>. All of the following instances were found by <code>infer_instance</code> in Lean 3, but in Lean 4 I have to provide their proofs explicitly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.AlgebraicClosure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.NormalClosure</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- inferInstance does not find this</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.id</span> <span class=\"n\">E</span>\n\n<span class=\"c1\">-- inferInstance does not find this</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">Mul.toSMul</span> <span class=\"n\">E</span>\n\n<span class=\"c1\">-- inferInstance does not find this</span>\n<span class=\"kd\">instance</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">IsScalarTower.right</span>\n\n<span class=\"c1\">-- inferInstance does not find this</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n\n<span class=\"c1\">--ERROR: failed to synthesize SMul L ↥E (?)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- @AlgebraicClosure.instSMulAlgebraicClosure E _ E _ _</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">aux'</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">inferInstance</span>\n\n<span class=\"c1\">-- inferInstance does not find this</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">normalClosure.algebra</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- inferInstance does not find this</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span>  <span class=\"n\">SMul</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toSMul</span>\n\n<span class=\"c1\">-- inferInstance does not find this</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SubfieldClass.toField</span> <span class=\"o\">(</span><span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- inferInstance does not find this</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">normalClosure.instIsScalarTowerSubtypeMemIntermediateFieldInstMembershipInstSetLikeIntermediateFieldNormalClosureToSMulToCommSemiringToSemifieldToSemiringToDivisionSemiringToSemifieldToSMulToCommSemiringToSemiringToSemiringToDivisionSemiringToSemifieldToSubalgebraAlgebraToSMulAlgebra</span>\n    <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Moreover, in the <code>SMul E (AlgebraicClosure E) </code> instance,  when I try to provide the proof explicitly I get <code>ERROR: failed to synthesize SMul L ↥E</code>.</p>",
        "id": 417402978,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1706001874
    },
    {
        "content": "<p>Does Eric's fix above, removing some troublesome instances, work?</p>",
        "id": 417404656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706002430
    },
    {
        "content": "<p>If I add <code>attribute [local instance 1001] Algebra.id</code> as Eric suggested, then the first instance is found. So I can similarly add <code>Mul.toSMul</code>, <code>IsScalarTower.right</code>, etc to get the others.<br>\nI tried adding the line <code>attribute [-instance] IsDomain.toCancelCommMonoidWithZero IsDomain.toCancelMonoidWithZero </code> as well, but this made no difference for me.<br>\nThe <code>sorry</code>d instance still gives an error.</p>",
        "id": 417408321,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1706003625
    },
    {
        "content": "<p>Does the following work on <code>master</code>? (my cache is misbehaving) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.AlgebraicClosure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.NormalClosure</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">IntermediateField.algebra'</span> <span class=\"n\">Subalgebra.algebra'</span> <span class=\"n\">Subalgebra.instSMulSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebra</span> <span class=\"n\">Subsemiring.smul</span> <span class=\"n\">Submonoid.smul</span> <span class=\"n\">IntermediateField.module'</span> <span class=\"n\">Subalgebra.instDistribMulActionSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToMonoidToMonoidToMonoidWithZeroToSubmonoidToNonAssocSemiringToSubsemiring</span> <span class=\"n\">Subsemiring.distribMulAction</span> <span class=\"n\">Submonoid.distribMulAction</span> <span class=\"n\">Subalgebra.isScalarTower_left</span> <span class=\"n\">Subsemiring.isScalarTower</span> <span class=\"n\">Submonoid.isScalarTower</span> <span class=\"n\">Subalgebra.isScalarTower_mid</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">aux'</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span>  <span class=\"n\">SMul</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 417425318,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706009207
    },
    {
        "content": "<p>All but two work very quickly on <code>master</code>: <code>Algebra E ↥(normalClosure K E (AlgebraicClosure E))</code> and <code>IsScalarTower K E (normalClosure K (↥E) (AlgebraicClosure ↥E))</code> time out.</p>",
        "id": 417425820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706009407
    },
    {
        "content": "<p>Two possibilities: </p>\n<ol>\n<li>I did this on my working copy of <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> so that might be it </li>\n<li>I copied wrong</li>\n</ol>",
        "id": 417425890,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706009445
    },
    {
        "content": "<p>The instances above open up a hole to <code>SMul L E</code> which takes forever to fail (or take forever with unification checks)</p>",
        "id": 417426002,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706009496
    },
    {
        "content": "<p>I didn’t copy wrong</p>",
        "id": 417426151,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706009547
    },
    {
        "content": "<p>This is similar to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Timeout.20in.20Submodule.20.28.F0.9D.93.9E.20K.29.20.28.F0.9D.93.9E.20K.29\">#mathlib4 &gt; Timeout in Submodule (𝓞 K) (𝓞 K)</a> in that the instances are not under-specified overall but the complement of the expensive-to-resolve classes is under-specified. So to fail we need to go through expensive checks</p>",
        "id": 417426663,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706009744
    },
    {
        "content": "<p>So this is holding up Maria-Ines' work, which in turn holds up Amelia's work, which in turn holds up my work, so I am super-motivated to try and understand and help fix what's going on here. </p>\n<p>I thought a lot about these slow typeclass issues in algebra over the summer (when I had time to think) and saw lots of examples of slowness caused by typeclass goals of the form <code>CommRing.ToCommSemiring R =?= CommRing.ToCommSemiring R</code> which were taking forever to succeed, because one side would explode. We narrowed it down to certain instances being defined in the form <code>A,B,C with</code> and having <code>let</code>s in. I tried to remove a bunch of <code>let</code>s and had partial success. Since then I've become mired in 6 months of teaching (I finish late March) and Matt has taken over the reins, and Eric understands what's happening, but I've lost track. Now my understanding is that the main sin is not the <code>let</code> and that we now have a better understanding of the underlying problem, which is something to do with eta expansion, a concept which I am at worst hazy about.</p>\n<p>This code here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.AlgebraicClosure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.NormalClosure</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">0</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>takes 21 seconds to succeed on my fast machine. If I plough through the instance trace I see that a big part of the problem is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">066374</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">≟</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"n\">E</span>\n</code></pre></div>\n<p>which is <em>precisely</em> one of these things which I was seeing all summer when I last thought a lot about these problems. This bifurcates into two problems, one of which is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>                [delta] [8.548725s] ✅ Ring.toSemiring =?= Ring.toSemiring ▼\n                  [] [8.548709s] ✅ CommRing.toRing =?= SubringClass.toRing E ▼\n                    [] [8.548614s] ✅ CommRing.toRing =?= Function.Injective.ring Subtype.val _ _ _ _ _ _ _ _ _ _ _ _ ▼\n                      [] [8.548491s] ✅ CommRing.toRing =?= let src := Function.Injective.mulZeroClass Subtype.val _ _ _;\n                          let src_1 := Function.Injective.addGroupWithOne Subtype.val _ _ _ _ _ _ _ _ _ _;\n                          let src_2 := Function.Injective.addCommGroup Subtype.val _ _ _ _ _ _ _;\n                          let src_3 := Function.Injective.monoid Subtype.val _ _ _ _;\n                          let src_4 := Function.Injective.distrib Subtype.val _ _ _;\n                          Ring.mk AddGroupWithOne.zsmul _ ▶\n</code></pre></div>\n<p>and this is exactly the phenomenon which I was seeing all summer: Lean is finding two defeq semiring instances on <code>E</code> and then spending forever checking that they're defeq. I was blaming this on the <code>let</code>s but my understanding is that this is not the issue, and there are people out there who understand the actual issue but I'm not one of them. </p>\n<p>The explosion here is caused by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Injective.ring#doc\">docs#Function.Injective.ring</a> , whose definition is very <code>with</code>y:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Function.Injective.ring</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Neg</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">ℕ</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">ℤ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Pow</span> <span class=\"n\">β</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NatCast</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IntCast</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nsmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zsmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">npow</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat_cast</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">int_cast</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">hf.mulZeroClass</span> <span class=\"n\">f</span> <span class=\"n\">zero</span> <span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"c1\">-- porting note: had to add this explicitly?</span>\n    <span class=\"n\">hf.addGroupWithOne</span> <span class=\"n\">f</span> <span class=\"n\">zero</span> <span class=\"n\">one</span> <span class=\"n\">add</span> <span class=\"n\">neg</span> <span class=\"n\">sub</span> <span class=\"n\">nsmul</span> <span class=\"n\">zsmul</span> <span class=\"n\">nat_cast</span> <span class=\"n\">int_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">hf.addCommGroup</span> <span class=\"n\">f</span> <span class=\"n\">zero</span> <span class=\"n\">add</span> <span class=\"n\">neg</span> <span class=\"n\">sub</span> <span class=\"n\">nsmul</span> <span class=\"n\">zsmul</span><span class=\"o\">,</span>\n    <span class=\"n\">hf.monoid</span> <span class=\"n\">f</span> <span class=\"n\">one</span> <span class=\"n\">mul</span> <span class=\"n\">npow</span><span class=\"o\">,</span>\n    <span class=\"n\">hf.distrib</span> <span class=\"n\">f</span> <span class=\"n\">add</span> <span class=\"n\">mul</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and which expands to</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>fun {α} {β} [Ring α] [Zero β] [One β] [Add β] [Mul β] [Neg β] [Sub β] [SMul ℕ β] [SMul ℤ β] [Pow β ℕ] [NatCast β]\n    [IntCast β] f hf zero one add mul neg sub nsmul zsmul npow nat_cast int_cast ↦\n  let src := Injective.mulZeroClass f hf zero mul;\n  let src_1 := Injective.addGroupWithOne f hf zero one add neg sub nsmul zsmul nat_cast int_cast;\n  let src_2 := Injective.addCommGroup f hf zero add neg sub nsmul zsmul;\n  let src_3 := Injective.monoid f hf one mul npow;\n  let src_4 := Injective.distrib f hf add mul;\n  Ring.mk AddGroupWithOne.zsmul _\n</code></pre></div>\n<p>It's at this point in the conversation when people now pop in and start talking about eta and I get lost. Have I isolated at least one of the problems here, and how does one go about fixing it?</p>",
        "id": 417428908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706010623
    },
    {
        "content": "<p>I think the problem with <code>Function.Injective.ring</code> is that it has unify data over and over again. Once for itself and then for each of the supplied instances</p>",
        "id": 417429556,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706010898
    },
    {
        "content": "<p>Right: the next bi(multi)furcation is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>                                [] [8.604870s] ✅ Ring.mk Ring.zsmul _ =?= Ring.mk AddGroupWithOne.zsmul _ ▼\n                                  [] [1.236130s] ✅ Ring.zsmul =?= AddGroupWithOne.zsmul ▶\n                                  [] [3.741473s] ✅ Ring.toSemiring =?= Semiring.mk _ _ Monoid.npow ▶\n                                  [] [1.204535s] ✅ Ring.toNeg =?= AddGroupWithOne.toNeg ▶\n                                  [] [1.197401s] ✅ Ring.toSub =?= AddGroupWithOne.toSub ▶\n                                  [] [1.224481s] ✅ Ring.toIntCast =?= AddGroupWithOne.toIntCast ▶\n</code></pre></div>\n<p>and expanding one of these at random (I choose <code>Neg</code>) the next bifurcation is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>                                    [] [1.204373s] ✅ AddGroupWithOne.toNeg =?= AddGroupWithOne.toNeg ▼\n                                      [delta] [1.204269s] ✅ AddGroupWithOne.toNeg =?= AddGroupWithOne.toNeg ▼\n                                        [] [1.203737s] ✅ Function.Injective.addGroupWithOne Subtype.val _ _ _ _ _ _ _ _ _\n                                              _ =?= Function.Injective.addGroupWithOne Subtype.val _ _ _ _ _ _ _ _ _ _ ▼\n                                          [delta] [1.203617s] ✅ Function.Injective.addGroupWithOne Subtype.val _ _ _ _ _ _ _ _ _\n                                                _ =?= Function.Injective.addGroupWithOne Subtype.val _ _ _ _ _ _ _ _ _ _ ▼\n                                            [] [0.662417s] ✅ Distrib.toAdd =?= Distrib.toAdd ▶\n                                            [] [0.527991s] ✅ Semiring.toNatCast =?= Semiring.toNatCast ▶\n</code></pre></div>\n<p>and these bifurcations just occur again and again (for example the <code>Distrib.toAdd</code> one bifurcates to</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>                                                                [] [0.661214s] ✅ NonUnitalNonAssocSemiring.mk _ _ _ _ =?= NonUnitalNonAssocSemiring.mk _ _ _ _ ▼\n                                                                  [] [0.306879s] ✅ AddCommMonoid.mk _ =?= NonUnitalNonAssocSemiring.toAddCommMonoid ▶\n                                                                  [] [0.353811s] ✅ NonUnitalNonAssocRing.toMul =?= NonUnitalNonAssocSemiring.toMul ▶\n</code></pre></div>\n<p>(so to answer a question about Neg we seem to be now answering a question about Mul, which to me is very weird)</p>",
        "id": 417430140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706011097
    },
    {
        "content": "<p>I think writing versions of <code>Function.Injective.*</code>/<code>Function.Surjective.*</code> only for <code>Subtype.coe</code>/<code>Quotient.mk</code> using less data might help</p>",
        "id": 417430733,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706011282
    },
    {
        "content": "<p>I am not sure if there is a fix for the pattern occurring in the all the disabled instances above other than not making them instances. <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> might have more ideas</p>",
        "id": 417431003,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706011356
    },
    {
        "content": "<p>I was hoping you were going to say \"my work <a href=\"#narrow/stream/270676-lean4/topic/Multi-source.20structure.20instance.20elaboration.20.28lean4.232478.29/near/417266998\">here</a> will sort all of this out, don't worry\".</p>",
        "id": 417431034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706011366
    },
    {
        "content": "<p>No</p>",
        "id": 417431063,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706011377
    },
    {
        "content": "<p>Should help sure but there are other problems</p>",
        "id": 417431107,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706011393
    },
    {
        "content": "<p>I don't understand that work properly, you see, so I always feel a bit like I'm floundering around.</p>",
        "id": 417431125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706011400
    },
    {
        "content": "<p>I would like to contribute but I need supervision.</p>",
        "id": 417431205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706011439
    },
    {
        "content": "<p>I don’t think the eta reductions can be pushed any further but writing versions of these instance transport defs which only apply to <code>Subtype.coe</code>/<code>Quotient.mk</code> is still untouched</p>",
        "id": 417431637,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706011590
    },
    {
        "content": "<p>There was a (some?) thread(s) about this a while back. I will search when I get to a more conducive machine</p>",
        "id": 417431774,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706011639
    },
    {
        "content": "<p>Not directly related, but it made a big difference in the Lean 3 days: we had a linter to check the priority of instances, with the rule that instances that always apply (i.e., they involve a generic type, instead of a type constructed in a specific way) should have priority &lt; 1000. The day this was implemented (by <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I think?) and enforced throughout the library, all of a sudden things got much better for many searches. </p>\n<p>I don't think we have this in Lean 4. For a long time it was blocked by the fact that priorities could not be changed after the fact, but I don't think it's the case any more so if someone with meta skills wanted to have a look it could be a big gain for a minor(?) investment. (More precisely, I'd be willing to spend a lot of time fixing the library if someone writes the linter for me :-)</p>\n<p>For instance, for now, if one is looking for a monoid structure on <code>A x B</code>, I think there's no reason that <code>Monoid.Prod</code> (or whatever it's named) would be tried before <code>Group.toMonoid</code>, while obviously the former is the thing to do.</p>",
        "id": 417432019,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706011719
    },
    {
        "content": "<p>Yeah, I think a lot more care with priorities would be great</p>",
        "id": 417432407,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706011863
    },
    {
        "content": "<p>Would it not be nice for this to be enforced directly by Lean itself? On the other hand that does require a core change...</p>",
        "id": 417432438,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706011876
    },
    {
        "content": "<p>I don't understand much either, but I do recall <code>Function.injective.foo</code> coming up as a red flag a number of times</p>",
        "id": 417436561,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706013357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2Eid.20for.20IntermediateField/near/417431774\">said</a>:</p>\n<blockquote>\n<p>There was a (some?) thread(s) about this a while back. I will search when I get to a more conducive machine</p>\n</blockquote>\n<p>This is a version where the data is replaced by proofs </p>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.237584.20speed.20up.20.60Ideal.2EQuotient.2EcommRing.60.20instance/near/395889960\">said</a>:</p>\n<blockquote>\n<p>I think the best way forward is to make things passing through <code>RingCon</code> faster overall by going from  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Function.Injective.commRing</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Neg</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">ℕ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">ℤ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Pow</span> <span class=\"n\">β</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NatCast</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IntCast</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nsmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zsmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">npow</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nat_cast</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int_cast</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Function.Injective.commRing'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nsmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zsmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">npow</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nat_cast</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int_cast</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>in some spots and for <code>Function.Surjective</code> similarly. </p>\n<p>Or maybe just for <code>Subtype.coe</code> and <code>Quotient.mk</code> alone.</p>\n</blockquote>",
        "id": 417440861,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706014930
    },
    {
        "content": "<p>It may have been refined more elsewhere</p>",
        "id": 417441137,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706015027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2Eid.20for.20IntermediateField/near/417425820\">said</a>:</p>\n<blockquote>\n<p>All but two work very quickly on <code>master</code>: <code>Algebra E ↥(normalClosure K E (AlgebraicClosure E))</code> and <code>IsScalarTower K E (normalClosure K (↥E) (AlgebraicClosure ↥E))</code> time out.</p>\n</blockquote>\n<p>No quick fix here that I see other than <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a></p>",
        "id": 417445413,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706016497
    },
    {
        "content": "<p>Removing <code>aux</code> and <code>aux’</code> makes those also timeout on <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a></p>",
        "id": 417447840,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706017353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2Eid.20for.20IntermediateField/near/417430140\">said</a>:</p>\n<blockquote>\n<p>Right: the next bi(multi)furcation is [...}</p>\n</blockquote>\n<p>I can't help but thinking this means this happens because we're not respecting the preferred parent of <code>Ring</code></p>",
        "id": 417461897,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706021394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2Eid.20for.20IntermediateField/near/417428908\">said</a>:</p>\n<blockquote>\n<p>If I plough through the instance trace I see that a big part of the problem is</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">066374</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">≟</span> <span class=\"n\">IsDomain</span> <span class=\"bp\">↥</span><span class=\"n\">E</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Certainly we should fix the slow <code>Function.Injective</code> unification issues, but why is <code>IsDomain</code> even needed here? Presumably by tweaking priorities/modifying instances we can avoid hitting the real slow path.</p>",
        "id": 417462673,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1706021620
    },
    {
        "content": "<p>This is all coming from instances declared via <code>extends</code> having normal priority (instead of <code>100</code>), right?</p>",
        "id": 417463157,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706021754
    },
    {
        "content": "<p>Yes, that will be a big part of it.</p>",
        "id": 417463266,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1706021769
    },
    {
        "content": "<p>Okay here I notice that <code>Function.Injective.semiring</code> is not even <em>used</em> in the definition of <code>Function.Injective.ring</code>. This seems very very wrong.</p>",
        "id": 417463503,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706021826
    },
    {
        "content": "<p>I'm gonna open a PR using preferred parents and we can benchmark it.</p>",
        "id": 417463663,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706021870
    },
    {
        "content": "<p>Looks like this is the path onto <code>IsDomain</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IntermediateField.algebra'</span> <span class=\"n\">to</span> <span class=\"n\">Algebra</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Algebra</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">≟</span> <span class=\"n\">Algebra</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">↥</span><span class=\"n\">E</span>\n        <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SMulZeroClass.toSMul</span> <span class=\"n\">to</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SMulWithZero.toSMulZeroClass</span> <span class=\"n\">to</span> <span class=\"n\">SMulZeroClass</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SMulZeroClass</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"bp\">≟</span> <span class=\"n\">SMulZeroClass</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">K</span>\n        <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Zero</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CommMonoidWithZero.toZero</span> <span class=\"n\">to</span> <span class=\"n\">Zero</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CancelCommMonoidWithZero.toCommMonoidWithZero</span> <span class=\"n\">to</span> <span class=\"n\">CommMonoidWithZero</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IsDomain.toCancelCommMonoidWithZero</span> <span class=\"n\">to</span> <span class=\"n\">CancelCommMonoidWithZero</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 417464069,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1706021963
    },
    {
        "content": "<p>Weird. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsDomain.toCancelCommMonoidWithZero#doc\">docs#IsDomain.toCancelCommMonoidWithZero</a>  has priority 100</p>",
        "id": 417464230,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706022003
    },
    {
        "content": "<p>Yeah, but <code>IntermediateField.algebra'</code> probably should have low priority (like we recently changed for <code>Subalgebra.module'</code>).</p>",
        "id": 417464439,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1706022064
    },
    {
        "content": "<p>Indeed, lowering the priority makes this a lot faster:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span> <span class=\"mi\">100</span><span class=\"o\">]</span> <span class=\"n\">IntermediateField.algebra'</span> <span class=\"n\">Subalgebra.algebra'</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">▶ 12:1-13:1: information:</span>\n<span class=\"cm\">Used 9186 heartbeats, which is less than the current maximum of 200000.</span>\n\n<span class=\"cm\">▶ 12:1-13:1: information:</span>\n<span class=\"cm\">[Elab.command] [0.589160s] count_heartbeats</span>\n<span class=\"cm\">      in instance : Algebra E E :=</span>\n<span class=\"cm\">        inferInstance ▶</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>(My system is about twice as slow as Kevin's, according to our profiler outputs.)</p>",
        "id": 417465116,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1706022248
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9936\">#9936</a></p>",
        "id": 417466497,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1706022634
    },
    {
        "content": "<p>Priority 100 is for instances that always apply, right? This is not the case here, so maybe you should choose 900 or something? Smaller than default, but greater than 100.</p>",
        "id": 417467006,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706022772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2Eid.20for.20IntermediateField/near/417463663\">said</a>:</p>\n<blockquote>\n<p>I'm gonna open a PR using preferred parents and we can benchmark it.</p>\n</blockquote>\n<p>I think was tried before to mixed results. Maybe intervening changes will help though</p>",
        "id": 417467081,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706022795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2Eid.20for.20IntermediateField/near/417467006\">said</a>:</p>\n<blockquote>\n<p>Priority 100 is for instances that always apply, right? This is not the case here, so maybe you should choose 900 or something? Smaller than default, but greater than 100.</p>\n</blockquote>\n<p>I went with <code>(priority := low)</code> like what we have for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subalgebra.module%27#doc\">docs#Subalgebra.module'</a> now. I suppose it's slightly more selective than the blanket instance so indeed it deserves a higher number. I don't actually know what the Lean 4 constants are, though!</p>",
        "id": 417467813,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1706022991
    },
    {
        "content": "<p>I was working under the assumption that preferred parents were set first, so if nothing else making sure they actually are will help me better understand the situation! (plus, it's good to have a consistent style for those declarations)</p>",
        "id": 417468060,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706023067
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9938\">#9938</a> for the switch to preferred parents</p>",
        "id": 417480741,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706026738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2Eid.20for.20IntermediateField/near/417124717\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2Eid.20for.20IntermediateField/near/417097291\">said</a>:</p>\n<blockquote>\n<p>One problem with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.id#doc\">docs#Algebra.id</a> is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.id#doc\">docs#RingHom.id</a> is not reducible. So when trying unification at reducible or instance transparency Lean won’t unfold it.</p>\n</blockquote>\n<p>It sounds like using <code>toRingHom</code> in algebra instances (without overriding toFun) is an anti pattern then?</p>\n</blockquote>\n<p>And <code>smul</code>. Experiment at <a href=\"https://github.com/leanprover-community/mathlib4/pull/9949\">#9949</a> with <code>Algebra.id</code> to check performance impact</p>",
        "id": 417551430,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706054878
    },
    {
        "content": "<p>I worry that <code>Module.compHom</code> has a problem here too</p>",
        "id": 417554590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706056744
    },
    {
        "content": "<p>Maybe this is an argument that we need unbundled <code>IsRingHom</code> predicates, even if most of the time we keep using<code>RingHom</code></p>",
        "id": 417554645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706056786
    },
    {
        "content": "<p>Maybe instance reducibility is just a weird concept?</p>",
        "id": 417554750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706056830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/386568325\">said</a>:</p>\n<blockquote>\n<p>I'm quite surprised by a failure illustrated in <code>Example 2</code> below. It has the characteristics that:</p>\n<ol>\n<li><code>simp only [Pi.smul_apply]</code> fails but both <code>simp only [Pi.smul_apply _]</code> and <code>rw [Pi.smul_apply]</code> work,</li>\n<li>the failure is triggered by adding <code>let</code> statement to the context <em>which does not change the goal</em>.</li>\n</ol>\n<p>Here are the examples:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Pi.Algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Basic</span>\n\n<span class=\"c1\">-- Example 1: succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"c1\">-- Example 2: fails!</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span> <span class=\"c1\">-- Fails!</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>These work now. :)</p>",
        "id": 417562621,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706062007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/Simp.20claims.20not.20defeq.20but.20rfl.20works/near/407817897\">said</a>:</p>\n<blockquote>\n<p>So in well-studied example of <code>Pi.smul_apply</code> <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works\">#lean4 &gt; simp [X] fails, rw [X] works</a> we have three options to have <code>simp</code> work \"as expected\":</p>\n<ol>\n<li>Make the instance implicit just implicit <a href=\"https://github.com/leanprover-community/mathlib4/pull/9020\">#9020</a></li>\n<li>Make <code>RingHom.id</code> (and intermediate defs reducible) <a href=\"https://github.com/leanprover-community/mathlib4/pull/9025\">#9025</a></li>\n<li>Use <code>simp [Pi.smul_apply _]</code>. </li>\n</ol>\n<p>Option 2 follows the general principles for handling this situation but the (mind-numbed) implementation is horrifically slower overall. Option 3 muddles us along.</p>\n</blockquote>\n<p>This gives Option 4 which follows existing best practices.</p>",
        "id": 417562794,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706062130
    },
    {
        "content": "<p>Here's some code from that IntermediateField file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> More general form of `IntermediateField.algebra`.</span>\n\n<span class=\"cm\">This instance should have low priority since it is slow to fail:</span>\n<span class=\"cm\">before failing, it will cause a search through all `SMul K' K` instances,</span>\n<span class=\"cm\">which can quickly get expensive.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">500</span><span class=\"o\">)</span> <span class=\"n\">algebra'</span> <span class=\"o\">{</span><span class=\"n\">K'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">K'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">K'</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K'</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">K'</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Algebra</span> <span class=\"n\">K'</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"n\">S.toSubalgebra.algebra'</span>\n</code></pre></div>\n<p>That instance can be discovered by <code>inferInstance</code> -- it's not necessary. What are the consequences of making a low priority shortcut instance?</p>",
        "id": 418757311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706582152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> here's a workaround using <a href=\"https://github.com/leanprover-community/mathlib4/pull/10116\">#10116</a> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.AlgebraicClosure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.NormalClosure</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span>\n  <span class=\"n\">Subalgebra.instSMulSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebra</span>\n  <span class=\"n\">Subsemiring.smul</span>\n  <span class=\"n\">Submonoid.smul</span>\n  <span class=\"n\">IntermediateField.module'</span>\n  <span class=\"n\">Subalgebra.isScalarTower_left</span>\n  <span class=\"n\">Subsemiring.isScalarTower</span>\n  <span class=\"n\">Submonoid.isScalarTower</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">aux'</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">400000</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span>  <span class=\"n\">SMul</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">normalClosure</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 418758663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706583233
    },
    {
        "content": "<p>Oh in fact this works fine on <code>master</code>.</p>",
        "id": 418800243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706608058
    },
    {
        "content": "<p>Inspired by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra#doc\">docs#Algebra</a> -- do we have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">toMonoidHom</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">toMonoidHom</span> <span class=\"n\">r</span>\n  <span class=\"n\">smul_def'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">toMonoidHom</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>?</p>",
        "id": 418840222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706622917
    },
    {
        "content": "<p>Should we (a) have it (b) make it a coercion (c) let Algebra extend it?</p>\n<p>There are a lot of fields going on in Maria Ines' example. We have L/K a field extension (so types), E an intermediate field (so a term), but then immediately promoted to a type (so \\u E is now a K-algebra) and then AlgebraicClosure E is a new type, and in my head I have a picture of all the fields and their inclusions, commonly represented on a whiteboard by a graph with smaller fields under bigger ones, and I can see it's blatantly obvious that K acts on AlgebraicClosure E because of the picture, but typeclass inference has a real problem with this. For example </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>fails some linting test because B isn't mentioned in the output, so transitivity of <code>Algebra</code> (part of the geometry of the diagram)  is not understood by the typeclass inference system. This is why you get it floundering around asking for <code>Algebra E K</code> (i.e. the other way around from what it shoeld be, clearly should be rejected as nonsense or at the worst unlikely but the system takes a long time to fail with this stuff</p>",
        "id": 418843171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706623824
    },
    {
        "content": "<p>If I am not mistaken, this <code>foo</code> class is the <code>lift_monoid_hom</code> proposed in <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> 's thesis, and I agree that it would be very convenient if this could be made into a coercion and extended by <code>Algebra</code>, but Anne said this is not compatible with the current Lean 4 coercion mechanism.</p>",
        "id": 419024552,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1706702490
    },
    {
        "content": "<p>Indeed! The specific issue that I see is that coercions are now expanded: where the term in Lean 3 looked like <code>@coe A B { coe := foo } x</code>, in Lean 4 the term looks like <code>foo x</code>. So we'd have to teach tactics like the simplifier that when they see <code>foo (a * b)</code> then they can apply <code>coe_mul</code>. It's possible but not so easy.</p>",
        "id": 419426015,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1706868885
    },
    {
        "content": "<p>I feel like we're running into the limits of what a single <code>Algebra</code> class can do. Just like for coercions we have <code>Coe</code>, <code>CoeHead</code>, <code>CoeOut</code> and so on, I think we also need to make the construction of the transitive closure explicit here. That would look like instances having type <code>Algebra</code> and theorems assuming <code>AlgebraT</code> (and in between these two there is \"hidden\" machinery for making <code>id</code> and transitivity work, that mathematicians can hopefully just ignore).</p>",
        "id": 419426751,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1706869155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2Eid.20for.20IntermediateField/near/418843171\">said</a>:</p>\n<blockquote>\n<p>Should we (a) have it (b) make it a coercion (c) let Algebra extend it?</p>\n</blockquote>\n<p>I would like it! The drawback is that this is going to cause quite some redundancy with the heavy Algebra machinery I propose. So that was why I proposed in Lean 3 to reuse the coercion mechanism.</p>",
        "id": 419427106,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1706869315
    },
    {
        "content": "<p>There is a way to redo the Lean 3 design, although it's not quite optimal:</p>\n<ul>\n<li>Introduce a new operation, let's say <code>lift</code>, which comes from <code>class LiftT (A B : Type*) := (lift : A → B)</code>. Make instances so <code>LiftT</code> is the reflexive transitive closure of <code>Lift</code>, analogous to <code>LiftT</code> and <code>CoeT</code>.</li>\n<li>Optional: declare <code>lift</code> to be a coercion and add the corresponding <code>CoeT</code> instance.</li>\n<li>Create classes saying \"this <code>LiftT</code> is a monoid/ring/etc hom\":</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MonoidLift</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LiftT</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">:</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">lift_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">lift</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">lift</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<ul>\n<li>Replace (most of) our <code>Algebra</code> hierarchy with <code>Lift</code>, <code>LiftOut</code>, ... and <code>RingLift</code> instances.</li>\n</ul>",
        "id": 419429970,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1706870299
    },
    {
        "content": "<p>The advantage is that we can redo the <code>Algebra</code> hierarchy with a more principled / effective search mechanism, and that the same will work for monoids, etc.</p>",
        "id": 419430184,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1706870391
    },
    {
        "content": "<p>Some drawbacks:</p>\n<ul>\n<li>Existing maps such as <code>Nat.cast</code> are coercions, not <code>lift</code>s, so tactics still won't recognize that <code>RingLift</code> applies here.</li>\n<li>By writing every map as <code>lift</code> and only distinguishing which <code>lift</code> we mean by instances, we lose most advantages of the discrimination tree: <code>simp</code> might get somewhat slower.</li>\n<li>Unlike <code>algebraMap</code>, <code>lift</code> is a plain function: we'd have to bundle it explicitly to get a <code>RingHom</code>.</li>\n</ul>",
        "id": 419430681,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1706870563
    }
]