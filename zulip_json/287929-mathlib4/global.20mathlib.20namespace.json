[
    {
        "content": "<p>Would it be possible to put everything in mathlib in <code>Mathlib</code> namespace? I often run into problem that I want to use some name in a project depending on mathlib but it is already used by mathlib. Recent example: both <code>Rand</code> and <code>Random</code> are claimed by mathlib.</p>",
        "id": 419476840,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706886774
    },
    {
        "content": "<p>We shouldn't namespace everything in the <code>Mathlib</code> namespace, no. But we should namespace everything which is too short and could create conflicts. Your two examples are very good examples of this: these ones should definitely be namespaced, and it's very good that you mention them here so that we can fix it.</p>",
        "id": 419477608,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706887023
    },
    {
        "content": "<p>Hm, if we're going to namespace parts, I think we might as well namespace everything, no?</p>",
        "id": 419477861,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706887098
    },
    {
        "content": "<p>What is the argument against namespacing everything? You just add <code>namespace Mathlib</code> at the top of every file and you are done. In every math formalization project depending on mathlib you just add <code>open Mathlib</code> at the top of every  file.</p>",
        "id": 419478562,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706887302
    },
    {
        "content": "<p>I don't want to put <code>CompactSpace</code> in a namespace, because no user should want to introduce another notion than the one we have. But <code>Gen</code> or <code>Rand</code>, I definitely want to namespace them because they are way too generic.</p>",
        "id": 419478701,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706887332
    },
    {
        "content": "<p>I agree that the likelihood that someone might want to define a new <code>CompactSpace</code> is very low. However, it is hard to judge what passes the bar and what not and in my opinion would lead to more confusion then putting everything in one namespace.</p>",
        "id": 419479026,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706887427
    },
    {
        "content": "<p>In lean 3 putting things in a namespace could cause some confusion when there were multiple interpretations but in lean 4 this seems to work really well. For CompactSpace the argument that it shouldn't be the only one is \"what if one of my students decides to make compact spaces themselves as a project?\" but we already have a good answer for this, namely the student puts it in their own namespace.</p>",
        "id": 419479154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706887457
    },
    {
        "content": "<p>It would be nice if there was a lean 4 equivalent of python's \"import .. as ..\". Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib</span>\n</code></pre></div>",
        "id": 419479304,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706887504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/global.20mathlib.20namespace/near/419479154\">said</a>:</p>\n<blockquote>\n<p>In lean 3 putting things in a namespace could cause some confusion when there were multiple interpretations but in lean 4 this seems to work really well. For CompactSpace the argument that it shouldn't be the only one is \"what if one of my students decides to make compact spaces themselves as a project?\" but we already have a good answer for this, namely the student puts it in their own namespace.</p>\n</blockquote>\n<p>Yes this works but I still want to use mathlib's <code>Rand</code> and use my own <code>Rand</code>. I end up writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">MyRand</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Rand</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Erased</span> <span class=\"o\">(</span><span class=\"n\">Measure</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"n\">rand</span> <span class=\"o\">:</span> <span class=\"n\">_root_.Rand</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>Having mathlib namespace I would write <code>Mathlib.Rand</code> vs <code>_root_.Rand</code>. I would prefer the former but I can live with the later.</p>",
        "id": 419480401,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706887806
    },
    {
        "content": "<p>maybe don't call it <code>Rand</code>?</p>",
        "id": 419480604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706887858
    },
    {
        "content": "<p>What else? Maybe <code>RandVar</code> but I don't like it.</p>",
        "id": 419480632,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706887867
    },
    {
        "content": "<p>Oh I thought it was a probability space or something</p>",
        "id": 419480853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706887928
    },
    {
        "content": "<p>or a monad</p>",
        "id": 419480865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706887934
    },
    {
        "content": "<p>It is almost a monad</p>",
        "id": 419480916,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706887949
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rand#doc\">docs#Rand</a></p>",
        "id": 419480951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706887959
    },
    {
        "content": "<p>mathlib's <code>Rand</code> is definitely a monad</p>",
        "id": 419481042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706887994
    },
    {
        "content": "<p>Yes it is the same as mathlibs <code>Rand</code> is just has the measure that should specify the random number generator. There is no connenction between the two yet</p>",
        "id": 419481121,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706888014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , do you agree that claiming <code>Rand</code> in mathlib is excessive? What namespace should we put it in in this case?</p>",
        "id": 419481296,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706888050
    },
    {
        "content": "<p>seeing <code>StdGen</code> and <code>MeasurableSpace</code> in the same definition looks really weird</p>",
        "id": 419481301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706888051
    },
    {
        "content": "<p>I'm still trying to understand the purpose for which it is being used</p>",
        "id": 419481440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706888089
    },
    {
        "content": "<p>I don't think <code>Mathlib.Rand</code> is any better of a name than <code>Rand</code></p>",
        "id": 419481584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706888133
    },
    {
        "content": "<p>Looking at the definition, I think the name <code>Rand</code> is defensible, although I think we should avoid the <code>Random</code> class</p>",
        "id": 419482002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706888250
    },
    {
        "content": "<p>We could also call it <code>RandM</code></p>",
        "id": 419482093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706888274
    },
    {
        "content": "<p>It seems to be similar to <code>State</code> and <code>Reader</code> monads, which are also unnamespaced</p>",
        "id": 419482222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706888301
    },
    {
        "content": "<p><code>RandM</code> seems like a nice compromise which solves the immediate problem</p>",
        "id": 419482286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706888325
    },
    {
        "content": "<p>I do wonder if we should just remove this file entirely though, it's only used once</p>",
        "id": 419482434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706888370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/global.20mathlib.20namespace/near/419481440\">said</a>:</p>\n<blockquote>\n<p>I'm still trying to understand the purpose for which it is being used</p>\n</blockquote>\n<p>I want to write a program in the <code>Rand</code> monad and then reason about it.</p>",
        "id": 419483292,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706888630
    },
    {
        "content": "<p>I guess one could also ask: should <code>List</code> be in the <code>Core</code> namespace and should [some basic std thing] be in the <code>Std</code> namespace?</p>",
        "id": 419485010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706889092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/global.20mathlib.20namespace/near/419483292\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/global.20mathlib.20namespace/near/419481440\">said</a>:</p>\n<blockquote>\n<p>I'm still trying to understand the purpose for which it is being used</p>\n</blockquote>\n<p>I want to write a program in the <code>Rand</code> monad and then reason about it.</p>\n</blockquote>\n<p>I guess this is like your <code>Real -&gt; Float</code> trick, where you are making claims that are provably false if you poke at them too hard but it doesn't matter because programmers do it in practice anyway</p>",
        "id": 419485623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706889274
    },
    {
        "content": "<p>in this case, it is the claim that <code>StdGen</code> is a true random number generator</p>",
        "id": 419485727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706889305
    },
    {
        "content": "<p>Yup, it is definitely not going to be aimed to prove some privacy security or crypto.</p>",
        "id": 419485958,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706889365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/global.20mathlib.20namespace/near/419485727\">said</a>:</p>\n<blockquote>\n<p>in this case, it is the claim that <code>StdGen</code> is a true random number generator</p>\n</blockquote>\n<p>Yes exactly</p>",
        "id": 419486040,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706889392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/global.20mathlib.20namespace/near/419485010\">said</a>:</p>\n<blockquote>\n<p>I guess one could also ask: should <code>List</code> be in the <code>Core</code> namespace and should [some basic std thing] be in the <code>Std</code> namespace?</p>\n</blockquote>\n<p>this is absolutely not unprecedented, see C# and <code>using System</code>. similarly with c++ and <code>using namespace std</code>. Lean core itself is mostly all namespaced under <code>Lean</code></p>",
        "id": 419491151,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706890995
    },
    {
        "content": "<p>I think we should only do this if and when lean switches to some kind of module system where <code>import Foo as Bar</code> works</p>",
        "id": 419491336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706891045
    },
    {
        "content": "<p>I would not mind the internal name of <code>List</code> being something like <code>Init.List.Basic.List</code> but it would have to be something that I never ever write explicitly</p>",
        "id": 419491627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706891158
    },
    {
        "content": "<p>This would be a large language change, and I don't think it's on the near term or even mid term roadmap</p>",
        "id": 419492118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706891295
    },
    {
        "content": "<p>But there have been general noises in that direction for a long time</p>",
        "id": 419492185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706891318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/global.20mathlib.20namespace/near/419491151\">said</a>:</p>\n<blockquote>\n<p>Lean core itself is mostly all namespaced under <code>Lean</code></p>\n</blockquote>\n<p>The <code>Lean</code> namespace is generally for the Lean system (metaprogramming, elaborator, compiler, etc.), vs the prelude (where you'd find <code>List</code>). Just want to be sure we have the fact there are multiple types of things in \"core\" in mind. I guess this is <code>Init</code> vs <code>Lean</code> in the docs.</p>\n<p>In mathlib I try to make sure all the meta code is in a namespace, to keep it out of the way of the theory. Some goes in <code>Lean</code> if it extends core, and the rest goes in <code>Mathlib</code>.</p>",
        "id": 419507299,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706896837
    },
    {
        "content": "<p>Another data point. Now I'm using <code>SciLean</code> in a different project thus I'm no longer in <code>SciLean</code> namespace. To use <code>SciLean.Rand</code> I can't just say <code>open SciLean</code> and use <code>Rand</code> as I get unambiguity between <code>_root_.Rand</code> and <code>SciLean.Rand</code>. I'm forced to write out <code>SciLean.Rand</code> everywhere.</p>\n<p>Also recently <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> had <a href=\"#narrow/stream/270676-lean4/topic/.60namespace.20Std.60.20in.20Lean.20Core/near/424073460\">issue</a> with <code>_root_.Associative</code>.</p>",
        "id": 424115362,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709243644
    },
    {
        "content": "<p>All those examples are mostly unused in mathlib, so I'm not sure how strong of an argument you're making</p>",
        "id": 424115526,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709243719
    },
    {
        "content": "<p>Yeah probably not very strong ... yet. I will just keep collecting them and post them here :)</p>",
        "id": 424115696,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709243767
    },
    {
        "content": "<p><code>Rand</code> is not unused, but I don't think it would matter much if it moved to a namespace</p>",
        "id": 424119129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709245181
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Associative#doc\">docs#Associative</a> is not Mathlib's fault, that name is in the root namespace because it came from Lean itself as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/associative\">docs3#associative</a></p>",
        "id": 424119265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709245227
    },
    {
        "content": "<p>(It's also fairly reasonable to argue that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Associative#doc\">docs#Associative</a> is the only possible thing that <code>Associative</code> could mean)</p>",
        "id": 424119351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709245273
    },
    {
        "content": "<p>I don't think \"it would be reasonable to argue this is the only possible definition\" is the right criterion. The loser of that argument still has to write <code>SciLean.Rand</code> everywhere.</p>",
        "id": 424124057,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709247401
    },
    {
        "content": "<p>Maybe we should have something like <code>open _root_ hiding Associative</code> (we already have <code>open Std hiding Associative</code>, right?); irrespective of what is considered \"well-behaved\" for a package and whether Mathlib conforms to it, inevitably there will be things in the wider ecosystem which do not, and it's nice to have tools to deal with those cases.</p>",
        "id": 424125897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709248245
    },
    {
        "content": "<p>I really do not really care about the particular instances where this is an issue. Arguing if we should rename/move <code>Rand</code> or <code>Associative</code> is sort of pointless. I'm just pointing out that such name clashes will be an issue if mathlib is used by other projects and there should be a way to deal with it.</p>",
        "id": 424126349,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709248484
    },
    {
        "content": "<p>I'm still unclear about why we don't just put everything from mathlib in a mathlib namespace. I don't agree that mathlib's definition of CompactSpace is the only definition which is allowed in Lean.</p>",
        "id": 424126839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709248717
    }
]