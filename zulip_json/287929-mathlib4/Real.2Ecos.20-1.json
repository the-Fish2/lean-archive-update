[
    {
        "content": "<p>I was lean4ifying the docs for my UG course and in them I talk about <code>Real.sqrt(-1)</code> when explaining junk values. As far as I'm concerned it's rather unfortunate that this syntax is not even valid any more in Lean 4, so following the principle I tell the students (\"brackets not necessary\") I tried <code>Real.sqrt -1</code> and got a very surprising answer. Just to emphasize that this is no longer about junk values, can anyone guess the value of <code>Real.cos -1</code>?</p>",
        "id": 410298711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703772462
    },
    {
        "content": "<p>Is it </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>fun x =&gt; cos x - 1</code>?</p>\n</div></div>",
        "id": 410303010,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703774507
    },
    {
        "content": "<p>Seems that <code>#check Real.cos (-1 : ℝ)</code> is needed to get expected.</p>",
        "id": 410307908,
        "sender_full_name": "Utensil Song",
        "timestamp": 1703776816
    },
    {
        "content": "<p>Is the type ascription necessary?</p>",
        "id": 410307968,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703776853
    },
    {
        "content": "<p>Now I'm puzzled by this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">done</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">done</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">done</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 410308042,
        "sender_full_name": "Utensil Song",
        "timestamp": 1703776881
    },
    {
        "content": "<p>Does <code>norm_num</code> try to support real powers at all?</p>",
        "id": 410308909,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703777247
    },
    {
        "content": "<p>The code was commented out during the port (<code>Mathlib/Analysis/SpecialFunctions/Pow/Real.lean</code>), and hasn't been restored yet</p>",
        "id": 410309139,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703777353
    },
    {
        "content": "<p>Though it seems like even in mathlib3 it only supported integer exponents</p>",
        "id": 410309211,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703777394
    },
    {
        "content": "<p>The <code>1/2</code> in the middle example is a Nat.</p>",
        "id": 410309878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703777715
    },
    {
        "content": "<p>Yes, the example is there to demonstrate that <code>norm_num</code> seems to be able to penetrate <code>Real.sqrt</code> to an extent to know that's false.</p>",
        "id": 410310560,
        "sender_full_name": "Utensil Song",
        "timestamp": 1703778015
    },
    {
        "content": "<p>Ah, the limitation is on the power side (for reals).</p>",
        "id": 410310637,
        "sender_full_name": "Utensil Song",
        "timestamp": 1703778054
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 410310722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703778098
    },
    {
        "content": "<p>(and <code>norm_num</code> tries <code>simp</code>)</p>",
        "id": 410310750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703778109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Real.2Ecos.20-1/near/410298711\">said</a>:</p>\n<blockquote>\n<p>I tried <code>Real.sqrt -1</code> and got a very surprising answer. Just to emphasize that this is no longer about junk values, can anyone guess the value of <code>Real.cos -1</code>?</p>\n</blockquote>\n<p>I do find this a bit funny, like a \"last laugh\" against the people who argued that type theory was going to solve the problem of \"junk theorems\" in ZFC. They said <code>1 ∈ 2</code> was ludicrous but now through a system of coercions and overloading we are seeing the same kind of junk values showing up in a strongly typed system. (Of course it's not actually a ludicrous answer, it's just an answer which is domain specific and being observed out of its domain - which is much the same as what you could say about <code>1 ∈ 2</code>.)</p>",
        "id": 410321522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703783946
    },
    {
        "content": "<p>I feel like this is just a bad priority for the negation operator, no?</p>",
        "id": 410322165,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703784338
    },
    {
        "content": "<p>I think <code>-x</code> and <code>- x</code> should mean different things, but that's probably horrifying behaviour</p>",
        "id": 410322257,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703784381
    },
    {
        "content": "<p>In Lean 3, <code>\\-1</code> had precendence 1034 &gt; 1024 (at least at some point) to make sure that <code>f x\\-1</code> parsed as <code>f (x\\-1)</code>.</p>",
        "id": 410322268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703784394
    },
    {
        "content": "<p>This isn't <code>\\-1</code> though, it's just a literal <code>x-1</code></p>",
        "id": 410322675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703784682
    },
    {
        "content": "<p>I assume you would not expect <code>x - 1</code> to be interpreted as <code>x (-1)</code></p>",
        "id": 410322699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703784700
    },
    {
        "content": "<p>maybe we could make the spaces factor in here but currently they make no difference</p>",
        "id": 410322720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703784721
    },
    {
        "content": "<p>certainly <code>x -1</code> is misleading spacing</p>",
        "id": 410322777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703784732
    },
    {
        "content": "<p>I think that the no space form <code>x-1</code> shows up enough that we can't ban it, so really it's just a matter of <code>x -1</code> or <code>x- 1</code> which look like linter warnings to me</p>",
        "id": 410322897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703784834
    },
    {
        "content": "<p>Yes I know <code>\\-1</code> isn't -1, I was trying to imply that we could make unary neg have binding power greater than function application -- but maybe that wouldn't solve the problem?</p>",
        "id": 410334257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703792256
    },
    {
        "content": "<p>the problem is that high-precedence unary negation is genuinely ambiguous with binary subtraction</p>",
        "id": 410334402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703792327
    },
    {
        "content": "<p>because we do not want <code>x - 1</code> to mean <code>x (- 1)</code></p>",
        "id": 410334496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703792397
    }
]