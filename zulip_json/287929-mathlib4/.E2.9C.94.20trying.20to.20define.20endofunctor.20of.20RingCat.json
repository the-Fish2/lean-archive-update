[
    {
        "content": "<p>This is probably a beginners question about how to use tactics in algebra proofs or it is just a  beginner who got lost in a maze of algebra and coercions. I any case I could use a hint on how to continue (or restart, whatever is relevant!). A couple of days ago I was given an exercise <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  to make a functor from rings to rings of polynomials. I understood that as an endo functor on RingCat that maps a ring R to the correspondig ring of polynomials over R and maps a ring homorphism h from R1 to R2 to the corresponding homorphism between the ring of polynomials over R1 to the  ring of polynomials over R2.  (Another way of understanding the exercise is to make a functor from category of rings to the category of polynomials, I don't know which was meant)<br>\nAnyway,  in an endofunctor interpretation I want a functor of the following type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">scott_exerc1</span> <span class=\"o\">:</span> <span class=\"n\">RingCat</span> <span class=\"bp\">‚•§</span> <span class=\"n\">RingCat</span>\n</code></pre></div>\n<p>I found </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mapRingHom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">‚Üí+*</span> <span class=\"n\">S</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>in Eval.lean that looked promising</p>\n<p>SoI tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">scott_exerc1</span> <span class=\"o\">:</span> <span class=\"n\">RingCat</span> <span class=\"bp\">‚•§</span> <span class=\"n\">RingCat</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">RingCat.of</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">RingCat.ofHom</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.mapRingHom</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"n\">map_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">map_comp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>but aesop cannot prove it.<br>\nIt needs to prove </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ofHom</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.mapRingHom</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X_1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"bp\">‚Üë</span><span class=\"n\">X_1</span><span class=\"o\">))</span>\n<span class=\"n\">ofHom</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.mapRingHom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">ofHom</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.mapRingHom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span>\n                                                                                          <span class=\"n\">ofHom</span><span class=\"o\">(</span><span class=\"n\">Polynomial.mapRingHom</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Looking around I found twol lemmas that look relevant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mapRingHom_id</span> <span class=\"o\">:</span> <span class=\"n\">mapRingHom</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mapRingHom_comp</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí+*</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚Üí+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mapRingHom</span> <span class=\"o\">(</span><span class=\"n\">f.comp</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I don't understand how to apply them.</p>",
        "id": 427930091,
        "sender_full_name": "Dan Synek",
        "timestamp": 1710942047
    },
    {
        "content": "<p>Have you tried something like <code>map_id := by intros; apply mapRingHom_id</code>?</p>",
        "id": 427930534,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1710942170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span>  that worked!  The next goal does not work the same way, unfortunately. I get the message </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">mapRingHom_comp</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">RingHom.comp</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"bp\">?</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"bp\">?</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mapRingHom</span> <span class=\"o\">(</span><span class=\"n\">RingHom.comp</span> <span class=\"bp\">?</span><span class=\"n\">f</span> <span class=\"bp\">?</span><span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">R</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">R</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">],</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofHom</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">‚úù</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"bp\">‚úù</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">R</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">R</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">],</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofHom</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"bp\">‚úù</span> <span class=\"bp\">‚â´</span>\n      <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">R</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">R</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">],</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofHom</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"bp\">‚úù</span>\n</code></pre></div>\n<p>In the spirit of teaching how to fish instead of giving a fish,  is there some way I can simplify the error message so I get it as computed as possible. I guess  the problem is that somehow  RingHom.comp (mapRingHom ?f) (mapRingHom ?g)  isn't the same as the expression above involving &gt;&gt;, but I don't know how to decipher why it goes wrong. Or how else do I use Lean to understand what goes wrong?</p>",
        "id": 427935105,
        "sender_full_name": "Dan Synek",
        "timestamp": 1710943466
    },
    {
        "content": "<p>Have you tried <code>simp</code>, <code>dsimp</code>?</p>",
        "id": 427935238,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1710943500
    },
    {
        "content": "<p>Remember, I am a Lean beginner. What do you mean by trying simp? <br>\nI tried by intros; dsimp; apply mapRingHom_comp <br>\nbut with no luck</p>",
        "id": 427935838,
        "sender_full_name": "Dan Synek",
        "timestamp": 1710943664
    },
    {
        "content": "<p>I mean write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"kd\">by</span>\n<span class=\"n\">simp</span>\n</code></pre></div>\n<p>and see what the remaining goal is</p>",
        "id": 427936024,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1710943705
    },
    {
        "content": "<p>I see, that does simplify the goal to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">RingCat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">ofHom</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n<span class=\"n\">ofHom</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">ofHom</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I guess I will go hunting for a lemma involving composition...</p>",
        "id": 427937430,
        "sender_full_name": "Dan Synek",
        "timestamp": 1710944053
    },
    {
        "content": "<p>Does <code>ext x</code> do anything here?</p>",
        "id": 427998080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710961486
    },
    {
        "content": "<p>There's an issue with the algebraic categories. <code>ext</code> probably won't be able to tell that it should apply <code>RingHom.ext</code> since the goal involves terms of <code>Quiver.Hom ...</code>, which is defeq to <code>RingHom</code> in this case. Lean4's ext is much less aggressive than lean3's was.</p>",
        "id": 428003001,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710963384
    },
    {
        "content": "<p>But certainly <code>intros ; apply RingHom.ext ; intros</code> should make progress here.</p>",
        "id": 428003069,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710963421
    },
    {
        "content": "<p>the lemma you want to use is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.mapRingHom_comp#doc\">docs#Polynomial.mapRingHom_comp</a> but beware that its phrased using usual ring homs, not homs in the sense of category theory.</p>",
        "id": 428003971,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1710963802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  you write: the lemma you want to use is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.mapRingHom_comp#doc\">docs#Polynomial.mapRingHom_comp</a> <br>\nWe are actually discussing how to use that lemma and yes the problem is as you suspected that the goal is in terms of &gt;&gt;(from the category)  and the lemma is in terms of comp from the Ring..</p>",
        "id": 428059041,
        "sender_full_name": "Dan Synek",
        "timestamp": 1710997939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"698527\">@Dan Synek</span> perhaps you've already figured this out by now, but there should be coercions in place that enable you to use <code>Polynomial.mapRingHom_comp</code> to close the goal directly, without needing any rewrites (besides using <code>symm</code> to make things line up)</p>",
        "id": 428167699,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711037773
    },
    {
        "content": "<p>in fact, i would think that for a goal of the form </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">RingCat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">ofHom</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n<span class=\"n\">ofHom</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">ofHom</span> <span class=\"o\">(</span><span class=\"n\">mapRingHom</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>simply doing <code>intros ;  symm ; apply Polynomial.mapRingHom_comp</code> should work.</p>",
        "id": 428167927,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711037847
    },
    {
        "content": "<p>There shouldn't be any coercions... morphisms in <code>RingCat</code> are <em>defined</em> as ring homs.</p>",
        "id": 428168140,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711037907
    },
    {
        "content": "<p>and <code>ofHom</code> is just an alias that helps with typechecking.</p>",
        "id": 428168205,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711037924
    },
    {
        "content": "<p>Here's a complete solution (spoiler, obviously):</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>SPOILER</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">RingCat</span> <span class=\"bp\">‚•§</span> <span class=\"n\">RingCat</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.mapRingHom</span> <span class=\"n\">f</span>\n  <span class=\"n\">map_id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.mapRingHom_id</span>\n  <span class=\"n\">map_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.mapRingHom_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span>\n</code></pre></div>\n</div></div>",
        "id": 428168968,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711038113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  Nononono, I had not solved it myself and I  felt I was \"in a maze of twisty little passages, all alike\"  printing out the coercions and trying to make sense of it. I did not notice that there was a symm missing.   It is also interesting to see how you can optimize the input of the proof term by only providing the necessary information in your answer. So thanks a lot! I will analyze it and learn from it!</p>",
        "id": 428182233,
        "sender_full_name": "Dan Synek",
        "timestamp": 1711042100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"698527\">Dan Synek</span> has marked this topic as resolved.</p>",
        "id": 428182316,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711042135
    },
    {
        "content": "<p>That's why I put it in a spoiler :) don't open it until you want to see my solution!</p>",
        "id": 428182375,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711042155
    }
]