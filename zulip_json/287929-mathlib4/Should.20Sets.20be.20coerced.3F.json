[
    {
        "content": "<p>As commented <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/API.2Ftactic.20for.20subspace.20topology/near/406971512\">here</a>, I am writing an API for restricting Sets to subtypes. In particular, if we have a type <code>X</code> and a set <code>A : Set X</code>, I defined a function <code>restrict: Set X → Set ↑A</code> in the natural way, and defined an infix notation <code>↓∩</code> for it.</p>\n<p>On the other hand, there is also another natural function <code>Set ↑A  → Set X </code> that would be the image of the coercion map from <code>↑A</code> to <code>X</code>. So I wonder if it would make sense to make one of these maps a coercion. Would that break something?</p>\n<p>And in case it does make sense, which of the two maps should be the coercion?</p>",
        "id": 417004578,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1705768443
    },
    {
        "content": "<p>I think the more natural map is from <code>Set ↑A</code>to <code>Set X</code>; it's the one that is injective. So if there is a coercion, it should be this one. But I'll leave the discussion whether it makes sense to have a coercion here to more experienced people.</p>",
        "id": 417006012,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1705769603
    },
    {
        "content": "<p>I think this used to be a coercion via <code>coeM</code>, but we turned it off by disabling the monad instance on sets</p>",
        "id": 417012200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705774750
    },
    {
        "content": "<p>What was the reason for disabling it?</p>",
        "id": 417020971,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1705782461
    },
    {
        "content": "<p>We turned it off because inserting arbitrary coercions, using the special coercion elaborator for Monads, didn't seem appropriate, and it also led to weird internal-looking terms.</p>\n<p>Have you done any experiment coercing these sets yet? One of the things we did at the same time was introduce a coercion instance for subtypes.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Subtype.val '' t : Set α</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 417024080,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705785082
    },
    {
        "content": "<p>Question about <code>restrict</code>: given that it's the following, does it need an extra notation for it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Subtype.val ⁻¹' s' : Set ↑s</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Though of course <code>s ↓∩ s'</code> would look cleaner and have nicer-looking algebraic rules.</p>",
        "id": 417024227,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705785230
    },
    {
        "content": "<p>I just pushed a  first prototype <a href=\"https://github.com/leanprover-community/mathlib4/blob/subset/Mathlib/Data/Set/Subset.lean\">here</a>. I think it is a convenient API (I used the opposite order for the notation... not sure which is the right one).</p>",
        "id": 417027506,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1705787951
    },
    {
        "content": "<p>I haven't experimented yet with coercions. That will be my next step.</p>",
        "id": 417027575,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1705788006
    },
    {
        "content": "<p>I see, the notation is reverse from what I was expecting. I'd have thought <code>A ↓∩ B</code> would give you <code>A</code> intersected with <code>B</code> in <code>Set A</code>. The mnemonic is that the arrow is that <code>B</code> is being intersected \"down to\" <code>A</code>.</p>\n<p>I also seeing <code>A</code> at the front, since that's sort of the main part of the restriction operator.</p>",
        "id": 417044058,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705802209
    },
    {
        "content": "<p>The way i read it is exactly that <code>B ↓∩ A</code> would mean \"you take <code>B</code> and intersect it down to <code>A</code>\".  Incidentally, the one you propose is more compatible with the already existing <code>restrict</code> function.</p>\n<p>I am fine with both notations, but would like to have more opinions before fixing one.</p>\n<p>Will try to define a coercion and write some more simplification lemmas for that, and for the combination of both maps.</p>",
        "id": 417074198,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1705832218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Should.20Sets.20be.20coerced.3F/near/417074198\">said</a>:</p>\n<blockquote>\n<p>Will try to define a coercion</p>\n</blockquote>\n<p>Could you say what you mean here? I'm afraid you might have misunderstood my earlier message -- the coercion already exists.</p>",
        "id": 417111885,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705864052
    },
    {
        "content": "<p>There is s coercion from subtypes to types, but I can't coerce a set in a subtype to a set in the ambient type: </p>\n<p>This:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"bp\">↑</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">T</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>does not work.</p>",
        "id": 417112895,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1705864879
    },
    {
        "content": "<p>Yes there is, that was the point of my code block, to demonstrate that it existed. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"bp\">↑</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">T</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 417115673,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705866867
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.instCoeHeadSetElem#doc\">docs#Set.instCoeHeadSetElem</a></p>\n<p>(This coercion is shockingly slow... Maybe someone might have some time to diagnose the issue?)</p>",
        "id": 417115850,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705866986
    },
    {
        "content": "<p>Oh, I see, I guess I didn't import the right file. Thanks</p>",
        "id": 417127777,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1705876357
    },
    {
        "content": "<p>One small problem I am having now is that the infoview does not use the notation <code>↑D</code>; instead, it shows <code>Subtype.val '' D </code>.  Is there something else I should import or open?</p>",
        "id": 417206268,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1705921803
    },
    {
        "content": "<p>Arguably this is a feature; if it showed <code>↑D</code> then you wouldn't know that you should be looking for lemmas about <code>val</code> and <code>image</code></p>",
        "id": 417208299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705922566
    },
    {
        "content": "<p>I see. In my case i find it more confusing (specially, I think my students will find it confusing).</p>",
        "id": 417209199,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1705922913
    },
    {
        "content": "<p>It wouldn't surprise me if the confusion can be better avoided by not using sets of subtypes in the first place; but maybe that's not possible</p>",
        "id": 417209519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705923034
    },
    {
        "content": "<p>(for instance, by using <code>(A B : Set α) (h : B ⊆ A)</code> instead of <code>(A : Set α) (B : Set A)</code>)</p>",
        "id": 417209740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705923119
    },
    {
        "content": "<p>Yeah, generally it's better to not work with subtypes if you can help it, but sometimes you can't help it.</p>",
        "id": 417211581,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705923769
    },
    {
        "content": "<p>Here's a delaborator for this coercion, lightly tested:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">app.Set.image</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delab_set_image_subtype</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">Subtype.val</span> <span class=\"mi\">2</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">α.coeTypeSet</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">withAppArg</span> <span class=\"n\">delab</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">↑$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> ↑S : Set α -/</span>\n</code></pre></div>",
        "id": 417211601,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705923779
    },
    {
        "content": "<p>I want to deal with the subspace topology, so I really need subsets of subtypes, and to relate them with subsets of the ambient type.</p>",
        "id": 417217799,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1705926203
    },
    {
        "content": "<p>I think I have something ready. Do you think it would be worth adding it to mathlib?</p>",
        "id": 417328511,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1705963201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Should.20Sets.20be.20coerced.3F/near/417115850\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.instCoeHeadSetElem#doc\">docs#Set.instCoeHeadSetElem</a></p>\n<p>(This coercion is shockingly slow... Maybe someone might have some time to diagnose the issue?)</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- 9027</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"bp\">↑</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">T</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is 9027 slow?</p>",
        "id": 417330803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705964066
    },
    {
        "content": "<p>Here's the instance trace <a href=\"https://gist.github.com/kbuzzard/ba8688ea0007eb30785f1bf2bb7fc337\">https://gist.github.com/kbuzzard/ba8688ea0007eb30785f1bf2bb7fc337</a> . Lean's taking 1/3 of a second to go on a merry adventure all around normed ring typeclasses and lattice/order typeclasses and continuous semilinear equiv typeclasses -- but for all I know this is normal and expected.</p>",
        "id": 417331574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705964347
    },
    {
        "content": "<p>It is hitting <code>FunLike</code> in there</p>",
        "id": 417332098,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1705964563
    },
    {
        "content": "<p>I'm currently lost in a maze of @instCoeTC_2's, all alike</p>",
        "id": 417332170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705964604
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> might help</p>",
        "id": 417332171,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1705964604
    },
    {
        "content": "<p>Down to 170</p>",
        "id": 417332844,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1705964866
    },
    {
        "content": "<p>All I've learnt so far (by completely unfolding the instance trace, by piping it to a file)  is that one way to look for <code>CoeT (Set ↑A) T (Set α)</code> is to look for <code>CoeHTCT (Set ↑A) (Set α)</code> and then for <code>CoeHTC (Set ↑A) (Set α)</code> and then for <code>CoeOTC (Set ↑A) (Set α)</code> and then (via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instCoeOTC#doc\">docs#instCoeOTC</a>) for <code>CoeOut (Type u_1) _tc.1</code> and then (via  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instCoeOut#doc\">docs#instCoeOut</a>) for <code>CoeFun (Type u_1) fun x ↦ _tc.1</code> and then, as you can see from the name, the fun starts (warning: very long line)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">ZeroHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">OneHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">EmbeddingLike.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">RelHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">StarHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SMulHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">TopHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">BotHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SupHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">InfHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">sSupHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">sInfHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">NonnegHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SubadditiveHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SubmultiplicativeHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulLEAddHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">NonarchimedeanHomClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ContinuousMapClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">LocallyBoundedMapClass.toDFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">DilationClass.toDFunLike</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and that's quite a lot to get through. I guess this is exactly what <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> is trying to avoid.</p>",
        "id": 417333751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705965293
    },
    {
        "content": "<p>I opened a <a href=\"https://github.com/leanprover-community/mathlib4/pull/9940\">PR</a> in case someone wants to review it.</p>",
        "id": 417509319,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1706036148
    },
    {
        "content": "<p>It has a red x so it's not on the <a href=\"https://bit.ly/3cKk3ld\">#queue</a> so you're unlikely to get reviewers.</p>",
        "id": 417509643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706036263
    },
    {
        "content": "<p>I don't see what I can do to get rid of the x, a test was skipped for some reason, but all the rest pass.</p>",
        "id": 417509828,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1706036334
    },
    {
        "content": "<p>The error is that you have added a new file but have not edited Mathlib.lean so that it imports the file.</p>",
        "id": 417509954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706036385
    },
    {
        "content": "<p>Oh, I see, thanks.</p>",
        "id": 417510087,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1706036423
    },
    {
        "content": "<p>I'm not sure where you're looking. Another error is that you have a definition without a docstring on line 34 of the file you added, and there are several other errors which you can see on github.</p>",
        "id": 417510104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706036430
    },
    {
        "content": "<p>Ah, silly me. I wasn't scrolling down in the tests list.</p>",
        "id": 417510946,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1706036755
    },
    {
        "content": "<p>I finally got all the test passed. Thanks for the hint.</p>",
        "id": 417518013,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1706039739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Should.20Sets.20be.20coerced.3F/near/417509828\">said</a>:</p>\n<blockquote>\n<p>I don't see what I can do to get rid of the x, a test was skipped for some reason, but all the rest pass.</p>\n</blockquote>\n<p>(just to be clear, posting in Zulip if you have a red X and don't know what to do about it is exactly the right thing to do <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  )</p>",
        "id": 417522276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706041405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461731\">Miguel Marco</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Should.20Sets.20be.20coerced.3F/near/417509319\">said</a>:</p>\n<blockquote>\n<p>I opened a <a href=\"https://github.com/leanprover-community/mathlib4/pull/9940\">PR</a> in case someone wants to review it.</p>\n</blockquote>\n<p>I'll take a look. My PR which could've benefited from some subtype topology API was just merged yesterday/today (<a href=\"https://github.com/leanprover-community/mathlib4/pull/8886\">#8886</a>, bonus points for being a lucky Chinese number), but there's a TODO there where I want to try out your API. Thanks for working on it for mathlib!</p>",
        "id": 417564639,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1706063581
    },
    {
        "content": "<p>Perhaps I'm coming in a little late with this, but: I am wary of the proposed definition being a good idea, just as I was for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.subgroupOf#doc\">docs#Subgroup.subgroupOf</a>. We already have <a href=\"https://loogle.lean-lang.org/?q=Set.preimage+Subtype.val\">68 lemmas</a> about <code> (↑) ⁻¹' s</code> (or 14 with the stricter <code>@Set.preimage (Set.Elem _) _ Subtype.val</code> query). Making new semireducible definitions comes with a cost, and in this case that cost is duplicating many of these lemmas, as well as many existing lemmas about preimages.</p>",
        "id": 419131167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706738604
    },
    {
        "content": "<p>Using an <code>abbrev</code> instead of a <code>def</code> would eliminate this cost, though it doesn't help users who don't realize they should be looking for lemmas about preimages</p>",
        "id": 419131443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706738705
    },
    {
        "content": "<p>I just posted a related message <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/API.2Ftactic.20for.20subspace.20topology/near/419131156\">here</a> (but my concerns are slightly different)</p>",
        "id": 419131557,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706738753
    },
    {
        "content": "<p>I agree we shouldn't be having those new definitions</p>",
        "id": 419140522,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706742658
    },
    {
        "content": "<p>Would you argue we should remove the existing <code>Subgroup.subgroupOf</code> too? If we decided that we should have that, then probably we should have the <code>Set</code> version too for consistency.</p>",
        "id": 419140562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706742685
    },
    {
        "content": "<p>Yes. It should be made notation</p>",
        "id": 419185281,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706771239
    },
    {
        "content": "<p>you mean make it <code>abbrev</code> instead of <code>def</code>?</p>",
        "id": 419197258,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1706776592
    },
    {
        "content": "<p>No, make it <code>notation</code></p>",
        "id": 419199986,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706777699
    },
    {
        "content": "<p>I tried to replace the definition with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"n\">lhs</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\" ↓∩ \"</span> <span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"mi\">66</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">lhs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but then again the infoview does not show the <code>↓∩</code> notation. I am trying to write a delaborator for that... but I haven't figured out the right way to do it.</p>",
        "id": 419243901,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1706793483
    }
]