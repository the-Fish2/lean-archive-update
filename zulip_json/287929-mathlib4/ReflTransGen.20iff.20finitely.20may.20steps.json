[
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Relation.html#Definitions\">description here</a> about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Relation.ReflTransGen#doc\">docs#Relation.ReflTransGen</a> explains the reflexive transitive closure with the common equivalence <code>ReflTransGen r a b ↔ (∃ x₀ ... xₙ, r a x₀ ∧ r x₀ x₁ ∧ ... ∧ r xₙ b) ∨ a = b</code> but as far as I see Mathlib does not contain a result saying this or something similar.</p>\n<p>As part of a project we needed a way to go from <code>ReflTransGen</code> to these finite chains and back, so I proved the following. Now I would like to clean it up and upstream it to Mathlib, if that makes sense:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Vector.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Relation</span>\n\n<span class=\"sd\">/-- A version of `Relation.ReflTransGen.cases_tail` also giving (in)equalities. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ReflTransGen.cases_tail_eq_neq</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Relation.ReflTransGen</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">Relation.ReflTransGen</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- `ReflTransGen r a b` is equivalent to `∃ x₀ ... xₙ, a = x₀ ∧ r x₀ x₁ ∧ ... ∧ r xₙ = b` -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ReflTransGen.iff_finitelyManySteps</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Relation.ReflTransGen</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">↔</span>\n      <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n.succ</span><span class=\"o\">),</span>\n        <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">ys.head</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">ys.last</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">ys.get</span> <span class=\"n\">i.castSucc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys.get</span> <span class=\"o\">(</span><span class=\"n\">i.succ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>See <a href=\"https://github.com/m4lvin/lean4-pdl/blob/main/Pdl/Star.lean\">https://github.com/m4lvin/lean4-pdl/blob/main/Pdl/Star.lean</a> for the actual proofs.</p>\n<p>To prepare a draft PR I started to edit <code>Mathlib.Logic.Relation</code> locally and ran into a problem:</p>\n<ul>\n<li>With <code>import Mathlib.Data.Vector.Basic</code> in <code>Relation.lean</code> I get into an import cycle <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span> I see two solutions: (i) a new file that imports both <code>Relation</code> and <code>Data.Vector.Basic</code> - what would be a good name and place for it? <code>ReflTransGen.FiniteChains</code>? or (maybe better?) (ii) avoid using <code>Vector</code>, and use a list instead? But that makes the theorem less useful, currently induction on the length <code>n</code> is a nice use case.</li>\n</ul>\n<p>Also, I was wondering if having the equalities <code>x = ys.head ∧ z = ys.last</code> as part of the right hand side is problematic for anything - note that the documentation says <code>r a x₀</code> where I now say <code>a = x₀</code> but my version does then not need the <code>∨ a = b</code> addition.</p>\n<p>Thanks in advance for any comments and advice - I have not made any PRs with code for mathlib before!</p>",
        "id": 432870510,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1712915888
    },
    {
        "content": "<p>I think in Mathlib to talk about vectors of Length <code>n</code> we prefer to use <code>Fin n -&gt; A</code>, see the definitions in the file <code>Mathlib.Data.Fin.Tuple.Basic</code>.</p>",
        "id": 432871384,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712916186
    },
    {
        "content": "<p>But solution (i) is the correct way to avoid import cycles. You can call your new file <code>Mathlib.Logic.Relation.Chain</code> or something (and rename <code>Mathlib.Logic.Relation</code> to <code>Mathlib.Logic.Relation.Basic</code>).</p>",
        "id": 432871488,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712916225
    },
    {
        "content": "<p>Thanks! It seems <code>Mathlib.Data.Fin.Tuple.Basic</code> also transitively imports <code>Mathlib.Logic.Relation</code>, so even if I reformulate things in terms of <code>Fin n -&gt; A</code> instead of <code>Vector</code>, a separate file is needed.</p>",
        "id": 432873617,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1712917007
    },
    {
        "content": "<p>In general, if I rename <code>Bla</code> to <code>Bla.Basic</code>, do I have to replace <code>import Bla</code> with <code>import Bla.Basic</code> in all files throughout all of Mathlib?</p>",
        "id": 432874416,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1712917358
    },
    {
        "content": "<p>That's correct</p>",
        "id": 432874623,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712917456
    },
    {
        "content": "<p>Hmm. I think I replaced all and <code>grep -nr \"Mathlib.Logic.Relation\" . | grep -v Basic</code> finds nothing outside <code>.git</code>, but <code>lake build</code> still says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">Mathlib.Logic.Relation'</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Logic</span><span class=\"bp\">/</span><span class=\"n\">Relation.lean</span>\n</code></pre></div>\n<p>even after <code>rm -rf .lake</code>.</p>",
        "id": 432875806,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1712917932
    },
    {
        "content": "<p>ah wait, my <code>grep</code> is bad. it missed <code>./Mathlib/Data/Set/Pairwise/Basic.lean:7:import Mathlib.Logic.Relation</code></p>",
        "id": 432875929,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1712917990
    },
    {
        "content": "<p>There are some results<br>\n<a href=\"/user_uploads/3121/CUf-RirAlVyk03P4o-5xuRt-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/CUf-RirAlVyk03P4o-5xuRt-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/CUf-RirAlVyk03P4o-5xuRt-/image.png\"></a></div>",
        "id": 432876821,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712918448
    },
    {
        "content": "<p>I just found <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Chain#doc\">docs#List.Chain</a> and think using that should be better / more systematic than using functions from <code>Fin</code>.</p>",
        "id": 433066916,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1713031918
    },
    {
        "content": "<p>I also did not make a PR yet, but pushed the branch and the CI seems to have worked <a href=\"https://github.com/leanprover-community/mathlib4/blob/m4lvin_ReflTrans_Chain/Mathlib/Logic/Relation/Chain.lean\">https://github.com/leanprover-community/mathlib4/blob/m4lvin_ReflTrans_Chain/Mathlib/Logic/Relation/Chain.lean</a></p>",
        "id": 433067014,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1713031989
    },
    {
        "content": "<p>Aha! There already are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.relationReflTransGen_of_exists_chain#doc\">docs#List.relationReflTransGen_of_exists_chain</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.exists_chain_of_relationReflTransGen#doc\">docs#List.exists_chain_of_relationReflTransGen</a> - bummer I did not find those some months ago <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 433067740,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1713032564
    }
]