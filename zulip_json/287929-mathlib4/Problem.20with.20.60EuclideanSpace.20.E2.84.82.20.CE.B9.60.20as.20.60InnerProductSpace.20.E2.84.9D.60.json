[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">InnerProductSpace.complexToReal</span> <span class=\"o\">:</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℂ</span> <span class=\"n\">ι</span><span class=\"o\">))</span>\n      <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">PiLp.innerProductSpace</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℂ</span> <span class=\"n\">ι</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">InnerProductSpace.complexToReal</span> <span class=\"o\">:</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℂ</span> <span class=\"n\">ι</span><span class=\"o\">))</span>\n      <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">PiLp.innerProductSpace</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℂ</span> <span class=\"n\">ι</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">InnerProductSpace.complexToReal</span> <span class=\"n\">PiLp.innerProductSpace</span>\n  <span class=\"n\">congr</span><span class=\"bp\">!</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">real_inner_eq_re_inner</span><span class=\"o\">]</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>\n<p>This is causing some problems when trying to work with <code>EuclideanSpace ℂ ι</code> as an <code>InnerProductSpace ℝ</code>. For example, when I try to construct an orthonormal basis of <code>EuclideanSpace ℂ ι</code> using <a href=\"https://github.com/leanprover-community/mathlib4/pull/12242\">#12242</a>, I get the error message: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">InnerProductSpace.complexToReal</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">PiLp.innerProductSpace</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">ℂ</span>\n</code></pre></div>\n<p>What is the best way to fix that? <br>\n(I guess the best fix would be for the <code>rfl</code> above to work, but I don't know how to do that.)</p>",
        "id": 438183797,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1715519330
    },
    {
        "content": "<p>Hmm, that looks bad</p>",
        "id": 438184343,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715519981
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=InnerProductSpace.complexToReal#doc\">docs#InnerProductSpace.complexToReal</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PiLp.innerProductSpace#doc\">docs#PiLp.innerProductSpace</a></p>",
        "id": 438184455,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715520062
    },
    {
        "content": "<p>It boils down to <code>re (sum i, inner (x i) (y i)) = sum i, re (inner (x i) (y i))</code> not being defeq</p>",
        "id": 438184669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715520291
    },
    {
        "content": "<p>Can we hope to make <code>re (sum i in s, f i) = sum i in s, re (f i)</code> defeq in general? I doubt so</p>",
        "id": 438184770,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715520388
    },
    {
        "content": "<p>But then it means that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=InnerProductSpace.complexToReal#doc\">docs#InnerProductSpace.complexToReal</a> should not be an instance?</p>",
        "id": 438184978,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1715520628
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12840\">#12840</a> : Change <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=InnerProductSpace.complexToReal#doc\">docs#InnerProductSpace.complexToReal</a> to a def and add the instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">innerProductSpace.complexToReal</span>\n</code></pre></div>",
        "id": 438186002,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1715521741
    },
    {
        "content": "<p>Most of these <code>complexToReal</code> instances are sort of bad, but the convenience usually outweighs this. This seems like an example where it doesn't</p>",
        "id": 438189140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715524814
    },
    {
        "content": "<p>Given that mathlib compiles without it, I agree!</p>",
        "id": 438189262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715524941
    }
]