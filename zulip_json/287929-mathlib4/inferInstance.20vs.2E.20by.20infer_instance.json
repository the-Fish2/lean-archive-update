[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/12060\">#12060</a>, seeing several instances proved via <code>by infer_instance</code>, I replaced the proofs by <code>inferInstance</code>, thinking that the term proof is shorter and likely more efficient than a tactic proof. Then <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> asked me to revert, saying</p>\n<blockquote>\n<p>This change means that any use of those instances comes at the cost of unfolding <code>inferInstance</code>. In general, please use <code>infer_instance</code> the tactic instead of <code>inferInstance</code> the term when defining instances</p>\n</blockquote>\n<p>However, the tactic <code>infer_instance</code> is <em>defined</em> to be <code>exact inferInstance</code>, and some experiments showed that (in terms of heartbeats) the term is at least as efficient as the tactic.</p>\n<p>So my question is whether there is a preference for the tactic over the term (and if so, on what grounds).</p>\n<p>(It may be the case that in Lean3 there was a difference that no longer exists.)</p>",
        "id": 432863769,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712913100
    },
    {
        "content": "<p>indeed there used to be a difference in lean 3 that no longer exists</p>",
        "id": 432863863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712913132
    },
    {
        "content": "<p>IMO it's a (minor) regression</p>",
        "id": 432863880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712913139
    },
    {
        "content": "<p>What was better in Lean3?</p>",
        "id": 432863928,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712913167
    },
    {
        "content": "<p>the difference is that <code>apply_instance</code> would directly insert the result of typeclass synthesis, while <code>inferInstance</code> or whatever it was called then is just an identity wrapper with a <code>[x : A]</code> argument which indirectly triggers typeclass synthesis</p>",
        "id": 432864021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712913213
    },
    {
        "content": "<p>the <code>inferInstance</code> identity function is needless cruft in the proof term</p>",
        "id": 432864082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712913238
    },
    {
        "content": "<p>But <code>apply_instance</code> would need to get the result from somewhere, so how is it different?</p>",
        "id": 432864188,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712913270
    },
    {
        "content": "<p>it would call the typeclass machinery function itself</p>",
        "id": 432864225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712913286
    },
    {
        "content": "<p>rather than relying on the app elaborator to see a <code>[ ]</code> argument and call the typeclass machinery</p>",
        "id": 432864269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712913307
    },
    {
        "content": "<p>Are there any plans to change the implementation of the tactic <code>infer_instance</code> to recover the old behavior?</p>",
        "id": 432864450,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712913366
    },
    {
        "content": "<p>I don't think it's on anyone's radar</p>",
        "id": 432864482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712913380
    },
    {
        "content": "<p>So should I revert the change anyway, so that we can profit in case somebody does it after all?</p>",
        "id": 432864707,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712913485
    },
    {
        "content": "<p>there is no difference between them, so for now I would say no preference. If we fix it we'll want to make both forms work anyway</p>",
        "id": 432864962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712913602
    },
    {
        "content": "<p>I'm happy with that</p>",
        "id": 432950947,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712943504
    },
    {
        "content": "<p>Can we then get <a href=\"https://github.com/leanprover-community/mathlib4/pull/12060\">#12060</a> merged?</p>",
        "id": 432951838,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712943937
    }
]