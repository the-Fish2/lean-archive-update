[
    {
        "content": "<p>(For the full context of this question, you can check out <a href=\"#narrow/stream/116395-maths/topic/Setting.20up.20appropriate.20definitions.20for.20Lusin-Novikov\">this conversation</a>.)</p>\n<p>I currently have a function <code>B : α → Set β</code>, and would like to create another function <code>B' : α → Set β</code> such that the outputs of <code>B'</code> are pairwise disjoint. Infrastructure to do this for functions of the form <code>ℕ → Set β</code> exists in <a href=\"https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Order/Disjointed.lean#L49-L51\">Docs#Disjointed</a>, but I have been unsuccessful in finding an implementation more generally.</p>\n<p>For my intended use specifically, I only care about disjointedness within a single specific <code>F : Finset α</code> rather than all of <code>α</code>, but even this is eluding me. Part of me would like to use <code>F.toList</code> and attempt to reason from there, but my attempts thus far have been unsuccessful. Any ideas on how I could do this?</p>",
        "id": 421118153,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1707768310
    },
    {
        "content": "<p><code>Set</code> is a mathlib thing, not a core Lean 4 thing, so this question is in the wrong stream -- can someone move it to <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> ?</p>\n<p>I'm assuming that you want the union over <code>B'</code> to be equal to the union over <code>B</code>? Either that or something else is missing from your question (the answer to the question right now is \"let <code>B' x</code> be the empty set for all x\"). </p>\n<p>In general why not just well-order alpha and define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>B</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B&#x27;(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> to be the things which are in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> but not in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B(y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>&lt;</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">y&lt;x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>?</p>",
        "id": 421120447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707769114
    },
    {
        "content": "<p>Ah, apologies for the wrong stream. I'm still somewhat new to messaging on Zulip, and I'll keep it in mind going forward.</p>\n<p>And also allow me to clarify what I mean. I have a function that is really defined from <code>F → Set β</code>, for a specific <code>F : Finset α</code>, but was recommended to define the function from <code>α → Set β</code>in its entirety and ignore the part outside of <code>F</code>. Yes, I do want to preserve the union, but specifically with respect to the set <code>F</code> (same with making things disjoint; I really only care about behavior on <code>F</code>).</p>\n<p>As for well-ordering, I would love to be able to do that, but I genuinely have no idea how (and again, really would need to specifically well-order <code>F</code>).</p>\n<p>Hopefully that addresses everything, apologies for the lack of specificity in my original post.</p>",
        "id": 421123864,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1707770218
    },
    {
        "content": "<p>Oh OK. I should think this would work then:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- use axiom of choice to well-order α</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">IsWellOrder.linearOrder</span> <span class=\"n\">WellOrderingRel</span>\n\n<span class=\"c1\">-- B' is a function of B and F</span>\n<span class=\"kd\">def</span> <span class=\"n\">B'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a'</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">B</span> <span class=\"n\">a'</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 421124315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707770384
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Placing.20an.20order.20on.20a.20finite.20set\">#lean4 &gt; Placing an order on a finite set</a> by <span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span>.</p>",
        "id": 421124880,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707770583
    },
    {
        "content": "<p>(thanks Jireh). This function <code>B' B F</code> should (if I got the maths right) have the property that the union over a in F of B(a) equals the union over a in F of B'(a), and the B'(a) for a in F are disjoint. Is that what you're after?</p>",
        "id": 421125107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707770662
    },
    {
        "content": "<p>Yes it is, thank you so much! I'll give it a go and see if it works for me!</p>",
        "id": 421126089,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1707771018
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>My effort</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I didn't leave comments but I didn't try any golfing so hopefully the code is not too hard to read.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- use axiom of choice to well-order α</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">IsWellOrder.linearOrder</span> <span class=\"n\">WellOrderingRel</span>\n\n<span class=\"c1\">-- B' is a function of B and F</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">B'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a'</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">B</span> <span class=\"n\">a'</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lemma1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B'</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">B'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">⋃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">B'</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Set.Subset.antisymm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.iUnion_subset_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_iUnion</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span> <span class=\"bp\">⊢</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>\n    <span class=\"n\">classical</span>\n    <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">F.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">hiS</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_filter</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"n\">hS'</span> <span class=\"o\">:</span> <span class=\"n\">S.Nonempty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hiS</span><span class=\"o\">⟩</span>\n    <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.min'</span> <span class=\"n\">S</span> <span class=\"n\">hS'</span>\n    <span class=\"k\">have</span> <span class=\"n\">hj2</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">S.min'_mem</span> <span class=\"n\">hS'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hj2</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hj2</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">hjF</span><span class=\"o\">,</span> <span class=\"n\">hBj</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">j</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_iUnion</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"n\">hjF</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">hBj</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a'</span> <span class=\"n\">ha'j</span> <span class=\"n\">ha'F</span> <span class=\"n\">hb</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"n\">ha'S</span> <span class=\"o\">:</span> <span class=\"n\">a'</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_filter</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ha'F</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"n\">S.min'_le</span> <span class=\"n\">a'</span> <span class=\"n\">ha'S</span>\n    <span class=\"n\">exact</span> <span class=\"n\">not_lt.2</span> <span class=\"n\">this</span> <span class=\"n\">ha'j</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Set.iUnion_mono</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Set.iUnion_mono</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lemma1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">B'</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B'</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.disjoint_left</span><span class=\"o\">]</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h2</span> <span class=\"n\">a₁</span> <span class=\"n\">h</span> <span class=\"n\">h₁</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">B'</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B'</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h'</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">aux</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"n\">h₁</span> <span class=\"n\">h'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">contradiction</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">disjoint_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">aux</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"n\">h₂</span> <span class=\"n\">h'</span>\n</code></pre></div>\n</div></div>",
        "id": 421130177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707772460
    },
    {
        "content": "<p>This works, thanks!</p>",
        "id": 421693089,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1708014449
    }
]