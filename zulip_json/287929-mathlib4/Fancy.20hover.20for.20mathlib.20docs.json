[
    {
        "content": "<p>If I'm using the VSCode plugin, and I hover over an operator or a function, I get full details for implicit arguments and such.</p>\n<p>Would it be possible to get the same information into the mathlib web docs, with similar hover semantics?  I realize that's a fairly big task, but it would be spectacular for understanding things, especially for lemmas that convert between different things with the same name.</p>",
        "id": 418998665,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706693539
    },
    {
        "content": "<p>doc-gen used to be better in Lean 3. Can you check eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_assoc\">docs3#mul_assoc</a> and see whether the information there is enough for your needs?</p>",
        "id": 418999041,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706693659
    },
    {
        "content": "<p>Not really.  E.g., if I hover over one of the <code>*</code> instances or click on it, it says it's <code>has_mul.mul</code>.  But the corresponding thing in VSCode hover would say that it's multiplying things of type <code>G</code>.  This is important if there's a multiplication lemma that multiplies things of a variety of types.</p>\n<p><a href=\"/user_uploads/3121/QPHfpsDToLtJD2dLyar1h7V6/Screenshot-2024-01-31-at-9.40.00AM.png\">Screenshot-2024-01-31-at-9.40.00AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QPHfpsDToLtJD2dLyar1h7V6/Screenshot-2024-01-31-at-9.40.00AM.png\" title=\"Screenshot-2024-01-31-at-9.40.00AM.png\"><img src=\"/user_uploads/3121/QPHfpsDToLtJD2dLyar1h7V6/Screenshot-2024-01-31-at-9.40.00AM.png\"></a></div>",
        "id": 419000392,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706694102
    },
    {
        "content": "<p>E.g., here's the types of a power operation using VSCode hover, with my cursor at the beginning of the proof block (which is semantically where the docs would want to operate as well, I think).  Crucially, it lists the HPow types as <code>ℝ ℤ ℝ</code>.</p>\n<p><a href=\"/user_uploads/3121/dUh8yKW9RDEKHXoQOSeTovmY/Screenshot-2024-01-31-at-9.41.51AM.png\">Screenshot-2024-01-31-at-9.41.51AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dUh8yKW9RDEKHXoQOSeTovmY/Screenshot-2024-01-31-at-9.41.51AM.png\" title=\"Screenshot-2024-01-31-at-9.41.51AM.png\"><img src=\"/user_uploads/3121/dUh8yKW9RDEKHXoQOSeTovmY/Screenshot-2024-01-31-at-9.41.51AM.png\"></a></div>",
        "id": 419000600,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706694151
    },
    {
        "content": "<p>I think this is what LeanInk was intended to solve</p>",
        "id": 419140764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706742792
    },
    {
        "content": "<p>But this is really hard to do well, because it requires either having:</p>\n<ul>\n<li>The full pretty-printed output of every declaration in mathlib available to download somewhere (this is likely enormous, certainly too large to embed statically)</li>\n<li>Lean running in browser (this is not particularly viable)</li>\n<li>A dedicated server to handle such queries against a running lean installation</li>\n</ul>",
        "id": 419140942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706742888
    }
]