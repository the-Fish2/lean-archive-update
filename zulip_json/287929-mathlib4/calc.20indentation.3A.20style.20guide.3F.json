[
    {
        "content": "<p>I see different styles of indentation with <code>calc</code> in the library. Should we have a style guide or allow all of them?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- as a closing tactic-1</span>\n<span class=\"k\">calc</span>\n  <span class=\"n\">first_term</span> <span class=\"bp\">≤</span> <span class=\"n\">mid_term</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">last_term</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- as a closing tactic-2</span>\n<span class=\"k\">calc</span> <span class=\"n\">first_term</span>\n  <span class=\"bp\">≤</span> <span class=\"n\">mid_term</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n  <span class=\"bp\">=</span> <span class=\"n\">last_term</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- to prove a `have`</span>\n<span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- newline, then one of 2 styles above</span>\n\n<span class=\"c1\">-- to prove a `have`</span>\n<span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 422189203,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708333598
    },
    {
        "content": "<p>Another one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"n\">long</span> <span class=\"n\">first</span> <span class=\"n\">term</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">middle</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">last</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422189876,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708333814
    },
    {
        "content": "<p>I personally prefer</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 422190171,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708333927
    },
    {
        "content": "<p>This way a reader can't see the first term</p>",
        "id": 422190257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708333954
    },
    {
        "content": "<p>Yeah but that's fine because it's usually in the statement</p>",
        "id": 422190311,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708333981
    },
    {
        "content": "<p>Not if you had some <code>simp</code>s, <code>rw</code>s or <code>apply</code>s before.</p>",
        "id": 422190652,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708334109
    },
    {
        "content": "<p>Emphasis on \"usually\"</p>",
        "id": 422191234,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708334321
    },
    {
        "content": "<p>Then please fix your example to include surrounding code that contains the first and the last terms.</p>",
        "id": 422191363,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708334382
    },
    {
        "content": "<p>You could always have a <code>show a = b</code> before the calc</p>",
        "id": 422225743,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708346821
    },
    {
        "content": "<p>Your second example is missing an <code>_</code> before the <code>=</code>.<br>\nI personally don't  like the first term being omitted as it should never increase the number of lines nor ruin the formatting if it is written next to <code>calc</code>. If <code>calc first_term</code> is longer than a single line, there may be other problems with the proof.  To keep formatting as consistent as possible the following seems like the most robust and readable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">first_term</span>\n  <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">mid_term</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">last_term</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 422234173,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1708349838
    },
    {
        "content": "<p>^ I also like <code>first_term</code> on the <code>calc</code> line, FWIW.  It’s uniform, since then each change corresponds to a further line.</p>",
        "id": 422236009,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708350371
    },
    {
        "content": "<p>It depends on the length of the expressions for me - putting the first expression on a separate line makes it much easier to pick out the structure than if you have to scan for a symbol somewhere in the middle of a long line</p>",
        "id": 422238415,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708351085
    },
    {
        "content": "<p>I disagree about putting the first expression on the calc line. Indeed, the <code>calc</code> keyword will often appear <em>at the end of the preceding line</em>. In such situations it would be weird if the first expression were on that line.</p>",
        "id": 422242107,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708352170
    },
    {
        "content": "<p>I think that only happens in the case when Yael's suggestion above can take over, and <code>_</code> on the first line is fine</p>",
        "id": 422243743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708352653
    }
]