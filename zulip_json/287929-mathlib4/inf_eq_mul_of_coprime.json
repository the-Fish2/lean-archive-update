[
    {
        "content": "<p>Let I and J be ideals of a commutative (semi)ring R. </p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.mul_eq_inf_of_coprime#doc\">docs#Ideal.mul_eq_inf_of_coprime</a> says <code>I * J = I ⊓ J</code> if <code>I ⊔ J = ⊤</code>. On the other hand, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.inf_eq_mul_of_coprime#doc\">docs#Ideal.inf_eq_mul_of_coprime</a> says <code>I ⊓ J = I * J</code> if <code>IsCoprime I J</code> and furthermore if R is a Dedekind domain :-) <br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCoprime.sup_eq#doc\">docs#IsCoprime.sup_eq</a> says that <code>I ⊔ J = ⊤</code> if <code>IsCoprime I J</code> so we have all the ingredients to remove the Dedekind domain assumption from <code>inf_eq_mul_of_coprime</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">RingTheory</span><span class=\"bp\">.</span><span class=\"n\">DedekindDomain</span><span class=\"bp\">.</span><span class=\"n\">Ideal</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">inf_eq_mul_of_coprime</span><span class=\"w\"> </span><span class=\"c1\">-- a theorem about Dedekind domains</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">inf_eq_mul_of_coprime'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommSemiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">J</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">coprime</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsCoprime</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">J</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">⊓</span><span class=\"w\"> </span><span class=\"n\">J</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">J</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">symm</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">mul_eq_inf_of_coprime</span>\n<span class=\"w\">  </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">IsCoprime</span><span class=\"bp\">.</span><span class=\"n\">sup_eq</span><span class=\"w\"> </span><span class=\"n\">coprime</span>\n</code></pre></div>\n<p>Here are some questions about the fix. Should <code>mul_eq_inf_of_coprime</code> be renamed <code>mul_eq_inf_of_sup_eq_top</code>? It's never used in mathlib anyway, so should I just change its statement to use <code>IsCoprime</code>, or maybe add <code>mul_eq_inf_of_isCoprime</code>? And which do we want -- <code>mul_eq_inf</code> or <code>inf_eq_mul</code>? Or both?</p>\n<p>Neither lemma is used much at all BTW. The only place <code>inf_eq_mul_of_coprime</code> is used (ironically with <code>.symm</code>!) is in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.quotientMulEquivQuotientProd#doc\">docs#Ideal.quotientMulEquivQuotientProd</a> , an explicit form of CRT for Dedekind domains, which is the same as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=quotientInfEquivQuotientProd#doc\">docs#quotientInfEquivQuotientProd</a>  modulo the replacement of <code>I ⊓ J</code> by <code>I * J</code> and the superfluous Dedekind domain assumption, so probably this should also be dealt with somehow.</p>",
        "id": 441025922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716898274
    },
    {
        "content": "<p>The name of <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Ideal/Operations.html#Ideal.mul_eq_inf_of_coprime\">Ideal.mul_eq_inf_of_coprime</a> should be changed in my opinion (maybe it is like that because of some historical reason?).</p>",
        "id": 441028345,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1716899094
    },
    {
        "content": "<p>I don't like coprime (and find its name misleading here), but inf_eq_top is heavy. Some French people say comaximal, which is better. Maybe coTop, or cocoatom.</p>",
        "id": 441035959,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1716901457
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"bp\">.</span><span class=\"n\">isCoprime_iff_sup_eq</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">CommSemiring</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">J</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"n\">IsCoprime</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">J</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">⊔</span><span class=\"w\"> </span><span class=\"n\">J</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">⊤</span>\n</code></pre></div>\n<p>Didn't we decide at some point that <code>IsCoprime</code> is the preferred spelling?</p>",
        "id": 441039336,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716902494
    }
]