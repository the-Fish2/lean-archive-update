[
    {
        "content": "<p>Should <code>apply?</code> get this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">re</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">reSetoid</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n  <span class=\"n\">r</span>     <span class=\"o\">:=</span> <span class=\"n\">re</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Eq.refl</span><span class=\"o\">,</span> <span class=\"n\">Eq.symm</span><span class=\"o\">,</span> <span class=\"n\">Eq.trans</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Quotient.mk'</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">re</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p><code>Quotient.exact h</code> works.</p>",
        "id": 401639397,
        "sender_full_name": "Nir Paz",
        "timestamp": 1699822210
    },
    {
        "content": "<p>No, because <code>apply?</code> isn't allowed to look at how you defined <code>re</code></p>",
        "id": 401648994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699832595
    },
    {
        "content": "<p>If you replace it with <code>abbrev re</code> instead of <code>def re</code>, which <code>apply?</code> is allowed to look through, then it works</p>",
        "id": 401649009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699832630
    },
    {
        "content": "<p>What about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 402534407,
        "sender_full_name": "Nir Paz",
        "timestamp": 1700160619
    },
    {
        "content": "<p>I think this is simply not stated in Mathlib.</p>",
        "id": 402535856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700161156
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mt#doc\">docs#mt</a> I thought</p>",
        "id": 402535900,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700161173
    },
    {
        "content": "<p>But I thought this may be the performance optimisation stuff</p>",
        "id": 402535986,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700161199
    },
    {
        "content": "<p>Eric is right and I was wrong.</p>",
        "id": 402536070,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700161210
    },
    {
        "content": "<p>Eric, Patrick, and I were all wrong. In fact it was a bug (one of the horsemen!) fixed now in <a href=\"https://github.com/leanprover/std4/pull/368\">std4#368</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/8458\">#8458</a>.</p>",
        "id": 402596458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700186331
    },
    {
        "content": "<p>Cool! Is there a rule of thumb for when it's ok for apply to not find a single-theorem-solution, like due to \"optimization stuff\"?</p>",
        "id": 402610913,
        "sender_full_name": "Nir Paz",
        "timestamp": 1700194027
    },
    {
        "content": "<p>Because I always think of that as a problem and I guess sometimes it's not</p>",
        "id": 402611020,
        "sender_full_name": "Nir Paz",
        "timestamp": 1700194093
    },
    {
        "content": "<p>(Excluding things like my first example with <code>def</code>s)</p>",
        "id": 402611084,
        "sender_full_name": "Nir Paz",
        "timestamp": 1700194173
    },
    {
        "content": "<p>As far as I know, after <a href=\"https://github.com/leanprover-community/mathlib4/pull/8458\">#8458</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/8459\">#8459</a> land, I think the claim is:</p>\n<blockquote>\n<p>if you can prove a goal via <code>apply X; solve_by_elim*</code> for some <code>X</code>, then <code>exact?</code> should work</p>\n</blockquote>\n<p>and </p>\n<blockquote>\n<p>if you can prove a collection of goals via <code>apply X; apply Y; ...; apply Z</code>, where all the <code>X Y Z</code> are hypotheses, then <code>solve_by_elim*</code> should work</p>\n</blockquote>\n<p>These are probably wrong, but I'd be happy to see more examples where they are wrong!</p>",
        "id": 402611369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700194386
    },
    {
        "content": "<p>Great way to phrase the specification for these tactics. Maybe could be part of the docstring?</p>",
        "id": 402626691,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700204079
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.RelIso.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span><span class=\"n\">r</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≃</span><span class=\"n\">r</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h.injective</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h'.injective</span>\n  <span class=\"n\">use</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">--fails</span>\n</code></pre></div>\n<p>fails,  but works with <code>use fun a ↦ (h' ∘ h) a</code>. (<code>apply Function.Injective.comp; solve_by_elim*</code> works in both cases)</p>\n<p>So does <code>exact?</code> not try all theorems with results defeq to the goal? If that's how it works then there must be lots of cases where it can't close goals where a single <code>apply</code> would work.</p>",
        "id": 419929286,
        "sender_full_name": "Nir Paz",
        "timestamp": 1707167728
    },
    {
        "content": "<p>So this is not what it does. It used to do it in Lean 3 and it became unusable because Mathlib is now too large. So it uses some indexing now and this will not see through definitional equality.</p>",
        "id": 419934495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707169870
    },
    {
        "content": "<p>Another way to say this: <code>exact?</code> in Lean 4 now requires that matches satisfy a stricter equality constraint.</p>",
        "id": 419964969,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707187370
    },
    {
        "content": "<p>Is there a tactic that does what the old <code>exact</code> did? I often spend &gt;2 minutes loogling and find a single theorem proof, and when it's obvious that what I want is somewhere in the library I'd rather just let that run for a minute.</p>",
        "id": 420352854,
        "sender_full_name": "Nir Paz",
        "timestamp": 1707344309
    },
    {
        "content": "<p>You presumably mean <code>exact?</code> in your message. Yes it would be nice sometimes to have an <code>exact?!</code> or <code>eexact?</code> which tried harder.</p>",
        "id": 420354068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707344880
    }
]