[
    {
        "content": "<p>In Lean 3 we added the feature that you could <code>sorry</code> out subproofs by putting <code>sorry</code> in front of them. It worked particularly well because subproofs were wrapped in curly braces, so you could just put the <code>sorry</code> in front of the leading <code>{</code>. For example, you could replace <code>{ intro, expensive_tactic, }</code> with <code>sorry { intro, expensive_tactic, }</code>, even if the subproof spanned multiple lines. <a href=\"https://github.com/leanprover-community/lean/pull/689\">https://github.com/leanprover-community/lean/pull/689</a></p>\n<p>I've been wondering what a Lean 4 version could look like for a while.</p>\n<p>This seems like a design:</p>\n<ul>\n<li><code>\"with_sorry\" tactic</code> evaluates as <code>sorry</code> (ignoring the tactic)</li>\n<li><code>\"with_sorry\" \" =&gt; \" tacticSeq</code> evaluates as <code>sorry</code> (ignoring the tactic sequence)</li>\n</ul>\n<p>This way you can \"comment out\" the rest of a block by inserting <code>with_sorry =&gt;</code> (you can also adjust the indentation for that if needed).</p>\n<p>You can also \"comment out\" subproofs with <code>with_sorry</code>, for example, the <code>with_sorry</code> would consume the existing <code>·</code> block in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">perm_factors_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"bp\">~</span> <span class=\"n\">a.factors</span> <span class=\"bp\">++</span> <span class=\"n\">b.factors</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"n\">factors_unique</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.prod_append</span><span class=\"o\">,</span> <span class=\"n\">prod_factors</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">prod_factors</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n  <span class=\"n\">with_sorry</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">hp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_append</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">hp</span> <span class=\"k\">with</span> <span class=\"n\">hp'</span> <span class=\"n\">hp'</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">prime_of_mem_factors</span> <span class=\"n\">hp'</span>\n</code></pre></div>\n<p>The main goal with this design for <code>with_sorry</code> is that it is easy to insert without adjusting the formatting of the rest of the proof.</p>",
        "id": 427193728,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710702054
    },
    {
        "content": "<p>Can it be similar to how <code>classical</code> works?</p>",
        "id": 427195421,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710702521
    },
    {
        "content": "<p>Sure, it could, but I'm not sure that <code>classical</code> is how we would want this to work.</p>",
        "id": 427195856,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710702636
    },
    {
        "content": "<p>I think often you want to comment out a single sub-proof, rather than comment out the rest of the proof.</p>",
        "id": 427196026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710702692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427193728\">said</a>:</p>\n<blockquote>\n<p>In Lean 3 we added the feature that you could <code>sorry</code> out subproofs by putting <code>sorry</code> in front of them. It worked particularly well because subproofs were wrapped in curly braces, so you could just put the <code>sorry</code> in front of the leading <code>{</code>. For example, you could replace <code>{ intro, expensive_tactic, }</code> with <code>sorry { intro, expensive_tactic, }</code>, even if the subproof spanned multiple lines. <a href=\"https://github.com/leanprover-community/lean/pull/689\">https://github.com/leanprover-community/lean/pull/689</a></p>\n<p>I've been wondering what a Lean 4 version could look like for a while.</p>\n</blockquote>\n<p>Are you familiar with the <code>stop</code> tactic? In mathport I originally used <code>sorry =&gt;</code> as the spelling of lean 3 <code>sorry { ... }</code> but later switched it to <code>stop</code> which is not different enough to matter</p>",
        "id": 427196059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710702700
    },
    {
        "content": "<p>(More generally, if you are thinking \"what happened to that old lean 3 feature?\" then mathport has probably already considered it and come up with an answer)</p>",
        "id": 427196226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710702744
    },
    {
        "content": "<p><code>stop</code> is a complete drop-in replacement for <code>with_sorry</code> in your examples</p>",
        "id": 427196722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710702876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427196026\">said</a>:</p>\n<blockquote>\n<p>I think often you want to comment out a single sub-proof, rather than comment out the rest of the proof.</p>\n</blockquote>\n<p>I’m not sure how <code>stop</code> works, but it certainly <em>sounds</em> like it doesn’t do this; if it does, maybe it could use a better name</p>",
        "id": 427197098,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710702979
    },
    {
        "content": "<p>I'd seen (but forgotten) about it, but I think it's worth thinking about how the user experience should work.</p>\n<p>It's a \"drop-in replacement\" functionally, but not experience-wise. It doesn't solve the problem of \"how do I conveniently sorry-out this single focus block\". The <code>stop</code> tactic comments out the entire rest of the proof.</p>",
        "id": 427197275,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703029
    },
    {
        "content": "<p>that's the \"not quite the same\" part, related to the way that block tactics parse in lean 4. In this example <code>stop</code> will consume both subproofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">stop</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 427197391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703081
    },
    {
        "content": "<p>this is also why <code>stop</code> is defined as <code>repeat sorry</code> instead of just <code>sorry</code>, because otherwise it would <em>bracket</em> both subproofs but only close the first goal</p>",
        "id": 427197559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703118
    },
    {
        "content": "<p>Exactly, so with what I was proposing, there would be a way to consume just the next tactic, which I think is a very important feature as a replacement for <code>sorry { ... }</code></p>",
        "id": 427197642,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703139
    },
    {
        "content": "<p>You need some indentation if you want to only consume the one goal</p>",
        "id": 427197658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703147
    },
    {
        "content": "<p>But actually it's not that bad, you can always kill individual subproofs by just moving the <code>stop</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">·</span> <span class=\"n\">stop</span>\n    <span class=\"n\">trivial</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 427197713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703183
    },
    {
        "content": "<p>Is there some mistake with this design that I proposed that would make it so that you need some indentation to consume one goal?<br>\n<span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427193728\">said</a>:</p>\n<blockquote>\n<p>This seems like a design:</p>\n<ul>\n<li><code>\"with_sorry\" tactic</code> evaluates as <code>sorry</code> (ignoring the tactic)</li>\n<li><code>\"with_sorry\" \" =&gt; \" tacticSeq</code> evaluates as <code>sorry</code> (ignoring the tactic sequence)</li>\n</ul>\n</blockquote>",
        "id": 427197845,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427197713\">said</a>:</p>\n<blockquote>\n<p>But actually it's not that bad, you can always kill individual subproofs by just moving the <code>stop</code>:</p>\n</blockquote>\n<p>I discarded this idea myself, because you have to alter that subproof by inserting the right amount of whitespace</p>",
        "id": 427198031,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703256
    },
    {
        "content": "<p>like I said, that's exactly how the <code>sorry =&gt;</code> tactic worked. We could bring it back but it has a lot of overlap with <code>stop</code></p>",
        "id": 427198090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703286
    },
    {
        "content": "<p>Also <code>with_sorry foo; bar</code> will have some weird parsing in your example</p>",
        "id": 427198224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703321
    },
    {
        "content": "<p>At least you can do <code>with_sorry =&gt; foo; bar</code> if you notice the weird parsing.</p>",
        "id": 427198421,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703366
    },
    {
        "content": "<p><code>sorry =&gt;</code> does look like it demands indentation after it, though, even if it doesn’t.</p>",
        "id": 427198449,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710703379
    },
    {
        "content": "<p>The idea is that it really should have indentation</p>",
        "id": 427198515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703395
    },
    {
        "content": "<p>if you want the unindented block version you should probably be using <code>stop</code></p>",
        "id": 427198594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703416
    },
    {
        "content": "<p>I think Kyle’s idea is that you should be able to insert it in a proof easily for good UX</p>",
        "id": 427198633,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710703426
    },
    {
        "content": "<p>And there's the consideration that these are never meant to be permanent parts of the proofs, so you want to be able to insert/delete them quickly and accurately</p>",
        "id": 427198802,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703462
    },
    {
        "content": "<p>If the whitespace handling around the dots is annoying you can always just put an extra newline there</p>",
        "id": 427198903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703496
    },
    {
        "content": "<p>I agree that this is an issue, although it's true in general and not just with stop</p>",
        "id": 427198993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703519
    },
    {
        "content": "<p>it would be great if vscode autoindent played better with the dots</p>",
        "id": 427199095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703546
    },
    {
        "content": "<p>Are you saying that we could \"just\" make all of mathlib look like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">perm_factors_mul_of_coprime</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">Coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"bp\">~</span> <span class=\"n\">a.factors</span> <span class=\"bp\">++</span> <span class=\"n\">b.factors</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">a.eq_zero_or_pos</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">coprime_zero_left</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hab</span><span class=\"o\">]</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">b.eq_zero_or_pos</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">coprime_zero_right</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hab</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">perm_factors_mul</span> <span class=\"n\">ha.ne'</span> <span class=\"n\">hb.ne'</span>\n</code></pre></div>",
        "id": 427199100,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703547
    },
    {
        "content": "<p>Just to support being able to insert <code>stop</code>?</p>",
        "id": 427199181,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703568
    },
    {
        "content": "<p>no, I'm saying that you would reformat into that style on an ad-hoc basis when messing about</p>",
        "id": 427199230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703581
    },
    {
        "content": "<p>vscode doesn't have the same issues with markdown lists, so maybe there is a way to fix it in the editor</p>",
        "id": 427199418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703629
    },
    {
        "content": "<p>I agree that is something that we could do, but I think you have to agree that as a user experience, that's a non-starter, unless we want to rely on editor support.</p>",
        "id": 427199430,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427199095\">said</a>:</p>\n<blockquote>\n<p>it would be great if vscode autoindent played better with the dots</p>\n</blockquote>\n<p>I think the extension PR I made for this a while ago recently got merged</p>",
        "id": 427199502,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710703661
    },
    {
        "content": "<p>I mean it's not that bad to type <code>stop + enter + tab</code> but I get what you mean</p>",
        "id": 427199524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703667
    },
    {
        "content": "<p>I would rather not rely on editor support. There are solutions where you can \"just\" insert some tactics (like the ones I proposed) and get the behavior that you want.</p>",
        "id": 427199528,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703668
    },
    {
        "content": "<p>My muscles expect</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"gr\">sorry</span> <span class=\"bp\">·</span> <span class=\"n\">tactic_that_does_not_run</span>\n  <span class=\"n\">another_tactic_not_running</span>\n</code></pre></div>\n<p>to work</p>",
        "id": 427199674,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710703695
    },
    {
        "content": "<p>(\"Just\" is in quotes because I usually consider it to be a banned word for design discussions. It always hides too much about what the underlying constraints are, and what we each think is important to design for.)</p>",
        "id": 427199780,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703723
    },
    {
        "content": "<p><code>stop</code> would almost work with that, but you broke the whitespace sensitive tacticSeq there</p>",
        "id": 427199863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703743
    },
    {
        "content": "<p>I think that's easy enough to be user-friendly, and ugly enough that nobody will want to leave that in final code?</p>",
        "id": 427199876,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710703752
    },
    {
        "content": "<p>Yeah; that breaks the <code>tacticSeq</code> expectation, but I would claim that's a feature?</p>",
        "id": 427200007,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710703790
    },
    {
        "content": "<p>I'd want your idea to work <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, but I think it's not technically possible because of indentation sensitivity (what Mario said). What if you want to comment out a tactic that itself is multi-line and indentation sensitive?</p>",
        "id": 427200015,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703792
    },
    {
        "content": "<p>Half-serious proposal for an alternate name for <code>with_sorry</code> if Yaël’s <code>sorry</code> doesn’t work (but I like that one best): <code>sorry_about</code> (pros: initial <code>sorry</code> so you can easily see when a line starts with it, makes “linguistic sense”; cons: not idiomatic/consistent with other <code>with</code>s)</p>",
        "id": 427200045,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710703800
    },
    {
        "content": "<p>(I do want to mention that I think <code>stop</code> is a good design for stopping a proof partway through.)</p>",
        "id": 427200463,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703904
    },
    {
        "content": "<p>For the case of stubbing out a single subgoal from the outside, kyle's <code>with_sorry</code> would work. I wouldn't recommend using it in any other situation though</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">with_sorry</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 427200464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703904
    },
    {
        "content": "<p>Can't macros handle multiline things somehow? I mean if we have a macro that literally replaces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"gr\">sorry</span> <span class=\"bp\">·</span> <span class=\"n\">tac1</span>\n  <span class=\"n\">tac2</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">·</span> <span class=\"n\">stop</span>\n  <span class=\"n\">tac1</span>\n  <span class=\"n\">tac2</span>\n</code></pre></div>\n<p>then we win, right?</p>",
        "id": 427200605,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710703930
    },
    {
        "content": "<p>Maybe the solution is add <code>with_sorry</code> for commenting out a single tactic, and keep <code>stop</code> as-is?</p>",
        "id": 427200633,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710703941
    },
    {
        "content": "<p>it's already a parse error though <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 427200647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703950
    },
    {
        "content": "<p>What if we had <code>\"sorry\" \".\"</code> &lt;followed by appropriate tactics&gt; parse?</p>",
        "id": 427200698,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710703964
    },
    {
        "content": "<p>but you could have a code action that changes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">·</span> <span class=\"n\">tac1</span>\n  <span class=\"n\">tac2</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">·</span> <span class=\"n\">stop</span>\n  <span class=\"n\">tac1</span>\n  <span class=\"n\">tac2</span>\n</code></pre></div>",
        "id": 427200797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710703989
    },
    {
        "content": "<p>maybe just \"insert tactic here\"</p>",
        "id": 427200842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704002
    },
    {
        "content": "<p>Hmm, I thought we could have macro-like objects getting replaced at several points, including possibly before parsing?</p>",
        "id": 427200954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710704034
    },
    {
        "content": "<p>In fact, the tactic code actions infrastructure was designed specifically to support code actions of this form</p>",
        "id": 427201022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427200954\">said</a>:</p>\n<blockquote>\n<p>Hmm, I thought we could have macro-like objects getting replaced at several points, including possibly before parsing?</p>\n</blockquote>\n<p>The trouble is that if it doesn't parse then either you have no parse information or garbage parse information, so either way it's difficult to make a very intelligent suggestion about the code</p>",
        "id": 427201350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704145
    },
    {
        "content": "<p>(On the code action route, there also ought to be a code action to remove <code>stop</code>, which could also be annoying to do)</p>",
        "id": 427201558,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710704189
    },
    {
        "content": "<p>ditto for <code>done</code></p>",
        "id": 427201671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704220
    },
    {
        "content": "<p>this probably overlaps with (the code action for) <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> 's useless tactic linter</p>",
        "id": 427201779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704257
    },
    {
        "content": "<p>Hey, his tactic linter is useful <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 427201859,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710704277
    },
    {
        "content": "<p>The useless tactic linter does not have a code action... at least not yet!  I think that finding a way to formatting the output might be the biggest blocker, though.</p>",
        "id": 427202129,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710704346
    },
    {
        "content": "<p>By the way, can you still see the tactic state at a tactic that comes after <code>stop</code>? Say, if you wanted to consider whether to keep working on it?</p>",
        "id": 427202301,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710704390
    },
    {
        "content": "<p>rust-analyzer has a code action for <code>remove dbg!()</code> where you can just select a whole code block and it will delete all these temporary debugging things. We could do the same for <code>stop</code> / <code>done</code> removal</p>",
        "id": 427202354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> No? I mean the code doesn't run at all</p>",
        "id": 427202468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704432
    },
    {
        "content": "<p>I'm liking this design for \"how to sorry out proofs\":</p>\n<ul>\n<li>keep <code>stop</code> exactly as it is, to sorry out the rest of a proof</li>\n<li><code>with_sorry</code> (or whatever the name) for a single tactic, to support sorrying out blocks without relying on editor support</li>\n<li>create a code action for inserting and removing other tactics, including <code>stop</code></li>\n</ul>",
        "id": 427202505,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710704441
    },
    {
        "content": "<p>Maybe inserting <code>skip</code> before/after would be a good code action to have?</p>",
        "id": 427202511,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710704443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>  I'm not sure how that could work</p>",
        "id": 427202572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704458
    },
    {
        "content": "<p>How do code actions display? Are they \"noisy\", as in add an info message to the infoview?</p>",
        "id": 427202702,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710704488
    },
    {
        "content": "<p>they are the lightbulb</p>",
        "id": 427202742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704500
    },
    {
        "content": "<p>It could work if syntax like <code>sorry . &lt;tacs&gt;</code> worked (I.e. if <code>sorry .</code> was like <code>.</code>)</p>",
        "id": 427202785,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710704510
    },
    {
        "content": "<p>Thomas, you can see the tactic state by putting your cursor here: <code>|stop</code></p>",
        "id": 427202855,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710704527
    },
    {
        "content": "<p>I mean at the end of the block, not the beginning!</p>",
        "id": 427202921,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710704544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427202785\">said</a>:</p>\n<blockquote>\n<p>It could work if syntax like <code>sorry . &lt;tacs&gt;</code> worked (I.e. if <code>sorry .</code> was like <code>.</code>)</p>\n</blockquote>\n<p>This already works, exactly as Yael described (for <code>stop</code>). The trouble is that you have to match indentation for the rest of the block</p>",
        "id": 427202995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704563
    },
    {
        "content": "<p>Oh, so the code does run!</p>",
        "id": 427203041,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710704575
    },
    {
        "content": "<p>i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stop</span> <span class=\"bp\">·</span> <span class=\"n\">tac1</span>\n  <span class=\"n\">tac2</span>\n</code></pre></div>\n<p>is a parse error but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stop</span> <span class=\"bp\">·</span> <span class=\"n\">tac1</span>\n       <span class=\"n\">tac2</span>\n</code></pre></div>\n<p>parses as intended (although actually you wouldn't want to use <code>stop</code> for this because it does <code>repeat sorry</code> instead of <code>sorry</code>)</p>",
        "id": 427203320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704647
    },
    {
        "content": "<p>it's just that aligning the rest of the block is way too much work to ask for</p>",
        "id": 427203404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704671
    },
    {
        "content": "<p>You could do this and maybe get Yaël's behaviour:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"sorrys \"</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Tactic</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">sorrys</span> <span class=\"bp\">$</span><span class=\"n\">_</span>\n                <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"gr\">sorry</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span>\n  <span class=\"n\">sorrys</span> <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n</code></pre></div>",
        "id": 427203543,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710704718
    },
    {
        "content": "<p>I just want to be clear: if you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">.</span> <span class=\"n\">stop</span>\n  <span class=\"n\">tac1</span>\n  <span class=\"n\">tac2</span>\n</code></pre></div>\n<p>then placing your cursor before stop shows the tactic state <em>after</em> tac2? That’s what I’m asking about.</p>",
        "id": 427203669,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710704752
    },
    {
        "content": "<p>No, it shows the tactic state before tac1</p>",
        "id": 427203784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704773
    },
    {
        "content": "<p>and there is no tactic state after tac1 because tac1 was never run</p>",
        "id": 427203838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704788
    },
    {
        "content": "<p>if you put your cursor inside or after the <code>stop</code> token or anywhere in the block I expect you to see <code>No goals</code> because <code>stop</code> closes all goals</p>",
        "id": 427203978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427202995\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427202785\">said</a>:</p>\n<blockquote>\n<p>It could work if syntax like <code>sorry . &lt;tacs&gt;</code> worked (I.e. if <code>sorry .</code> was like <code>.</code>)</p>\n</blockquote>\n<p>This already works, exactly as Yael described (for <code>stop</code>). The trouble is that you have to match indentation for the rest of the block</p>\n</blockquote>\n<p>Ok, I got confused by “this already works”—I thought you were talking about the behavior I’m asking about</p>",
        "id": 427204089,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710704862
    },
    {
        "content": "<p>? I am?</p>",
        "id": 427204230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704891
    },
    {
        "content": "<p>if <code>&lt;tacs&gt;</code> was on one line it would work</p>",
        "id": 427204308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> that fails if the first line has more than one tactic in it (separated by <code>;</code>)</p>",
        "id": 427204439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704954
    },
    {
        "content": "<p>I'm not sure it does: this seems to work for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span>\n  <span class=\"n\">sorrys</span><span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n</code></pre></div>",
        "id": 427204572,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710704989
    },
    {
        "content": "<p>I wonder what would happen if you use <code>\"sorrys \" tacticSeq (colGt tacticSeq)?</code> though</p>",
        "id": 427204585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710704997
    },
    {
        "content": "<p>it's because you used a dot after <code>sorrys</code></p>",
        "id": 427204852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710705063
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">sorrys</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>doesn't parse</p>",
        "id": 427204907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710705078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427204852\">said</a>:</p>\n<blockquote>\n<p>it's because you used a dot after <code>sorrys</code></p>\n</blockquote>\n<p>Right, but this was Yaël's suggestion.  In the situation that you are describing, wouldn't stop already work?</p>",
        "id": 427205000,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710705114
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stop</span> <span class=\"bp\">.</span> <span class=\"n\">tac1</span>\n       <span class=\"n\">tac2</span>\n</code></pre></div>\n<p>runs <code>tac1</code>, <code>tac2</code> on the goal <em>after</em> <code>stop</code>, does it not?</p>",
        "id": 427205017,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710705119
    },
    {
        "content": "<p>(Sorry, this is a reply to Mario.)</p>",
        "id": 427205098,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710705131
    },
    {
        "content": "<p>No</p>",
        "id": 427205150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710705145
    },
    {
        "content": "<p>You are right, but your suggestion works, I think.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427204585\">said</a>:</p>\n<blockquote>\n<p>I wonder what would happen if you use <code>\"sorrys \" tacticSeq (colGt tacticSeq)?</code> though</p>\n</blockquote>",
        "id": 427205324,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710705205
    },
    {
        "content": "<p>it does not run tac1 or tac2, but if there is a <code>tac3</code> after it then it would be run</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stop</span> <span class=\"bp\">.</span> <span class=\"n\">tac1</span>\n       <span class=\"n\">tac2</span>\n<span class=\"bp\">.</span> <span class=\"n\">tac3</span>\n  <span class=\"n\">tac4</span>\n</code></pre></div>\n<p>this runs <code>tac3</code> and <code>tac4</code> but not <code>tac1</code> and <code>tac2</code> (and fails at the second dot because of the semantics of <code>stop</code>)</p>",
        "id": 427205407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710705226
    },
    {
        "content": "<p>So, this is what might work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"sorrys \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">tacticSeq</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Tactic</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">sorrys</span> <span class=\"bp\">$</span><span class=\"n\">_</span>\n               <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"gr\">sorry</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span>\n  <span class=\"n\">sorrys</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"n\">sorrys</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n</code></pre></div>",
        "id": 427205605,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710705269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427205150\">said</a>:</p>\n<blockquote>\n<p>No</p>\n</blockquote>\n<p>Ok, so it must not produce the behavior I’m talking about, right? Because it doesn’t run <code>tac1</code>/<code>tac2</code>? I’m specifically looking to get the tactic state at <code>tac2</code>.</p>",
        "id": 427205643,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710705278
    },
    {
        "content": "<p>Yeah, Mario is misunderstanding what behavior you were talking about</p>",
        "id": 427205701,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710705322
    },
    {
        "content": "<p>95 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks\">#mathlib4 &gt; haves with blanks</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 427205729,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710705329
    },
    {
        "content": "<p>The point of <code>stop</code> is to not run the tactics that are in the same indentation block, because they are expensive, throw a lot of error, etc...</p>",
        "id": 427205924,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710705373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/sorry.20a.20tactic.20block/near/427205643\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427205150\">said</a>:</p>\n<blockquote>\n<p>No</p>\n</blockquote>\n<p>Ok, so it must not produce the behavior I’m talking about, right? Because it doesn’t run <code>tac1</code>/<code>tac2</code>? I’m specifically looking to get the tactic state at <code>tac2</code>.</p>\n</blockquote>\n<p>It's impossible to get the tactic state at <code>tac2</code> without running <code>tac1</code></p>",
        "id": 427205934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710705375
    },
    {
        "content": "<p>It would be great if there was a \"sorry mode\" one could set in the tactic state so that tactics only do structural stuff and sorry everything they can...</p>",
        "id": 427206063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710705415
    },
    {
        "content": "<p>then you could get the state of <code>tac2</code> without \"fully\" running <code>tac1</code></p>",
        "id": 427206138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710705436
    },
    {
        "content": "<p>this would be especially useful for <code>simp</code></p>",
        "id": 427206251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710705467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/sorry.20a.20tactic.20block/near/427205924\">said</a>:</p>\n<blockquote>\n<p>The point of <code>stop</code> is to not run the tactics that are in the same indentation block, because they are expensive, throw a lot of error, etc...</p>\n</blockquote>\n<p>Hmm, yeah, makes sense...thinking about it more, waiting for a <code>stop</code>ped proof to elaborate when it has expensive tactics just to have the option of seeing how far you've gotten seems like it would be too annoying...</p>",
        "id": 427209274,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710706264
    },
    {
        "content": "<p>I suppose second-best to being able to see the tactic state after <code>tac2</code> is to be able to activate the <code>stop</code>-removing code action from anywhere after <code>stop</code>! :) (Which is maybe already what you had in mind, Mario?)</p>",
        "id": 427209769,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710706398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/haves.20with.20blanks/near/427199095\">said</a>:</p>\n<blockquote>\n<p>it would be great if vscode autoindent played better with the dots</p>\n</blockquote>\n<p>(Just to record this here now that I’m at my computer, this was <a href=\"https://github.com/leanprover-community/vscode-lean4/pull/328\">vscode-lean4#328</a>, merged 4 days ago)</p>",
        "id": 427212210,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1710707026
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 427504367,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710773778
    },
    {
        "content": "<p><span aria-label=\"peach\" class=\"emoji emoji-1f351\" role=\"img\" title=\"peach\">:peach:</span> post</p>",
        "id": 427508938,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710774913
    }
]