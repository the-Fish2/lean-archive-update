[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12528\">#12528</a> is a draft PR containing a simple, <code>to_additive</code> inspired command that takes a declaration about <code>WithBot</code> and converts its to a declaration about <code>WithTop</code>.  It worked remarkably well on the initial segment of <code>Mathlib/Order/WithBot.lean</code>, but now would need some actual effort into \"reverting\" inequalities -- the first part was just <code>Bot</code> vs <code>Top</code> with not order yet.</p>\n<p>I would be very happy to hear any comments on it!  In particular, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> and I (and many others!) have discussed a few times an automatic conversion for <code>Bot</code>, <code>Top</code> and this may be a starting point.</p>",
        "id": 436168876,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714438628
    },
    {
        "content": "<p>Very nice! One thing I should say is that you need something more than <code>to_additive</code>: When there are several types at play, you need a way of dualising only one of them</p>",
        "id": 436198375,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714456155
    },
    {
        "content": "<p>I definitely agree: the PR is now just tackling the easiest of the conversion, the one that is basically \"search and replace\".  I am still hoping that a good part of the \"reversal of inequalities\" could be largely syntactic.</p>\n<p>What you mention, though, will almost certainly involve also some type-awareness.</p>",
        "id": 436202291,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714458037
    },
    {
        "content": "<p>I might try <code>min --&gt; max</code> as a testing ground for the reversal of inequalities.</p>",
        "id": 436202375,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714458074
    },
    {
        "content": "<p>What about limits v colimits in category theory?</p>",
        "id": 436202937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714458373
    },
    {
        "content": "<p>That is another possibility for the reversal.  I suspect that <code>min</code> to <code>max</code> may be an easier testing ground, if nothing else because the files tend to build faster...  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 436203273,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714458540
    },
    {
        "content": "<p>In any case, once the reversal is settled, I am hoping that similar translations can be applied to many different parts of the library.</p>",
        "id": 436203327,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714458585
    },
    {
        "content": "<p>(As usual, my motivation is on polynomials: <code>degree --&gt; trailingDegree</code>. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> )</p>",
        "id": 436203441,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714458622
    },
    {
        "content": "<p>In all of these situations, a very important first step, is to design an automatic conversion of the <em>name</em> of the declarations: some parts need to trade places, others stay fixed.  I wonder if it might turn out to be easier to \"reverse the <code>Expr</code> statement\" and reconstruct the name from the reverted expression.</p>\n<p>Neither the syntactic nor the <code>Expr</code> approach seem easy.</p>",
        "id": 436203818,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714458805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60toTop.60.20converts.20.60Bot.60-lemmas.20to.20.60Top.60-lemmas/near/436203818\">said</a>:</p>\n<blockquote>\n<p>In all of these situations, a very important first step, is to design an automatic conversion of the <em>name</em> of the declarations: some parts need to trade places, others stay fixed.</p>\n</blockquote>\n<p>In fact, I wanted to make this the <em>last</em> step. I would first write a <em>tactic</em> taking in a lemma and a type(/list of types) and attempts to prove the goal using the lemma applied to the dual of the given type, with every order construction appropriately replaced by its dual (most of them are defeq to their dual on the dual order, but not all).</p>",
        "id": 436209148,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714460887
    },
    {
        "content": "<p>Ok, this is indeed easier, but it still means that you have to write the statement of the lemmas (not just their names).  Using the \"calling out of arguments\" syntax, what you are suggesting could be little more than a macro expansion.</p>",
        "id": 436210692,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714461602
    },
    {
        "content": "<p>No, I don't think it can be as simple as a macro. You need to translate every order theoretic primitive... which is why I think it's a great first step!</p>",
        "id": 436211027,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714461757
    },
    {
        "content": "<p>Btw, I'm even thinking of making <code>to_top</code> a <em>linter</em> that automatically applies <code>to_top</code> to all declarations, once it's active.</p>",
        "id": 436211089,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714461788
    },
    {
        "content": "<p>Also, you're calling it <code>to_top</code>, but of course it's not about <code>Top</code> specifically, right?</p>",
        "id": 436211158,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714461835
    },
    {
        "content": "<p>The issues I've opened about it always called it <code>to_dual</code></p>",
        "id": 436211240,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714461860
    },
    {
        "content": "<p>Right, I wanted <code>to_dual</code>, but, as you also mention, getting to <code>to_dual</code> involves translating the basic lemmas first.</p>",
        "id": 436211350,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714461927
    },
    {
        "content": "<p>So the initial translation I called <code>to_top</code>, but could have equally well called it <code>to_max</code> and started from a different file!</p>",
        "id": 436211476,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714461976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60toTop.60.20converts.20.60Bot.60-lemmas.20to.20.60Top.60-lemmas/near/436211350\">said</a>:</p>\n<blockquote>\n<p>Right, I wanted <code>to_dual</code>, but, as you also mention, getting to <code>to_dual</code> involves translating the basic lemmas first.</p>\n</blockquote>\n<p>Yeah I don't really see how you could bypass that</p>",
        "id": 436211539,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714462010
    },
    {
        "content": "<p>Indeed, that translation is what <code>to_top</code> is trying now: create the ecosystem of basic facts on which the actual conversion relies.</p>",
        "id": 436211637,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714462069
    },
    {
        "content": "<p>Maybe I should have called the command <code>sed</code> and have it take a <code>HashMap String String</code> as input...  <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 436212634,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714462496
    }
]