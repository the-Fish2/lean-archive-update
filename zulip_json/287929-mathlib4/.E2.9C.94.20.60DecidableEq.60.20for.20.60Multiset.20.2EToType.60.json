[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Multiset.Fintype</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">m.ToType</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm not sure this instance will really solve the problem I have, but I want to give it a try.</p>",
        "id": 421281984,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707842066
    },
    {
        "content": "<p>Make sure not to use <code>m.ToType</code>. That's an auxiliary definition, and the interface is to use the coercion.</p>",
        "id": 421290339,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707844822
    },
    {
        "content": "<p>Oh right, that's out-of-date information because coercions changed how they work. (In any case, you can write <code>DecidableEq m</code> for short.)</p>",
        "id": 421290440,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707844858
    },
    {
        "content": "<p>Here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Multiset.count</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 421290604,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707844919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 421294067,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707846197
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10505\">#10505</a></p>",
        "id": 421294304,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707846277
    }
]