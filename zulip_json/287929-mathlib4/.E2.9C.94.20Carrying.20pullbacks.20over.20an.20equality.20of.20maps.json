[
    {
        "content": "<p>I have a use case for the following (obvious) statement: if I have a pullback cone over maps <code>h</code> and <code>k</code> which I know to be the actual pullback, and I know that <code>k=k'</code>, then the same two maps from that cone form a pullback over <code>h</code> and <code>k'</code> as well. However, I don't see an obvious way to prove this without quite a bit of tedium. here's a formalized MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Pullbacks</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Category</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">PullbackLimitTransfer_eq_bottom</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">k'</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comm</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lim</span> <span class=\"o\">:</span> <span class=\"n\">IsLimit</span> <span class=\"o\">(</span><span class=\"n\">PullbackCone.mk</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">comm</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">IsLimit</span> <span class=\"o\">(</span><span class=\"n\">PullbackCone.mk</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">k'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">eq</span><span class=\"o\">]</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I know I could prove this the \"long way\" with <code>PullbackCone.IsLimit.mk</code> but I wanted to know whether there's something I'm missing to prove this more quickly. Or perhaps more generally, when I can prove that the maps in the original cospan (<code>h</code> and <code>k</code> here) are equal to some other <code>h'</code> and <code>k'</code>, whether there is an equivalence defined somewhere between cones over <code>cospan h k</code> and cones over <code>cospan h' k'</code>?</p>",
        "id": 439107444,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1715896130
    },
    {
        "content": "<p>Try <code>subst eq</code> and if you're lucky it should be one line from there</p>",
        "id": 439107775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715896296
    },
    {
        "content": "<p>Aha, thanks! Didn't know about <code>subst</code>.</p>",
        "id": 439109543,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1715897122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"218940\">Charlie Conneen</span> has marked this topic as resolved.</p>",
        "id": 439109592,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715897141
    }
]