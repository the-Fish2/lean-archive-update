[
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>isn't solved by <code>ring/ring!/ring_nf</code>, or <code>simp</code>, or <code>aesop</code>. It _is_ solved by <code>abel</code>, and <code>exact?</code> finds <code>sub_eq_add_neg</code> which is the relevant statement. If I switch the order of the statement, the other tactics still fail, and now <code>exact?</code> instead finds me <code>Mathlib.Tactic.RingNF.add_neg</code>. This leads me to two questions:<br>\n(1) Is there a reason that <code>simp</code> can't do this? It seems like it would be a sensible simp lemma, generally.<br>\n(2) Is there a reason that <code>ring</code> can't do this? There's even a <code>ring_nf</code> lemma for it so it looks as though it was designed to handle this -- but doesn't!</p>",
        "id": 436171204,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1714440053
    },
    {
        "content": "<p><code>ring</code>, despite the name, only applies to commutative rings.</p>",
        "id": 436171672,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714440346
    },
    {
        "content": "<p><code>sub_eq_add_neg</code> would be pretty bad as a simp lemma. Does the right hand side really count as simpler? That is deciding that you really dislike the subtraction operation, which is not clearly a good idea as a simp normal form rule.</p>",
        "id": 436171768,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714440394
    },
    {
        "content": "<p>Oh, I guess I actually meant <code>← sub_eq_add_neg</code> as a simp lemma. (I agree that the forward direction would be bad)</p>",
        "id": 436171835,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1714440449
    },
    {
        "content": "<p>I realize that it's still a bit subjective though.</p>",
        "id": 436171866,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1714440475
    },
    {
        "content": "<p>You could try it out. I'd prefer that if any changes are made there that it agrees with <code>Int</code> simp normal forms before <code>Ring</code> becomes available.</p>",
        "id": 436171950,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714440511
    },
    {
        "content": "<p>I did not realize that <code>ring</code> was only for commutative rings. :') This arose when I needed the fact on some matrices had <code>A - B = A + (-B)</code> and was surprised it didn't work and needed to go look up the relevant thing.</p>",
        "id": 436172020,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1714440565
    },
    {
        "content": "<p>Thanks for the tip though</p>",
        "id": 436172027,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1714440571
    },
    {
        "content": "<p>I guess I thought that, like <code>linarith</code>, it would mostly do a \"best effort\" with lemmas it did have if it didn't have a full commsemiring</p>",
        "id": 436172136,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1714440613
    },
    {
        "content": "<p>Try the <code>noncomm_ring</code> tactic for such a best effort tactic. (It is mostly just a custom simp set.)</p>",
        "id": 436172581,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714440867
    },
    {
        "content": "<p>In this case <code>abel</code> should work.</p>",
        "id": 436176141,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714442984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"448405\">@Alex Meiburg</span>, you might want to know that I already tried that in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3309\">#3309</a></p>",
        "id": 436198999,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714456472
    },
    {
        "content": "<p>(turning <code>add_neg_eq_sub</code> into a simp lemma)</p>",
        "id": 436199043,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714456497
    },
    {
        "content": "<p>If you could make it work, that would be great. But after the failure of <a href=\"https://github.com/leanprover-community/mathlib4/pull/3309\">#3309</a> I am semi-convinced that it's impossible to fix the non-confluence of simp here</p>",
        "id": 436199044,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714456497
    },
    {
        "content": "<p>IIRC <code>sub_eq_add_neg</code> was a simp lemma in core in 2017 and it drove people nuts :-)</p>",
        "id": 436203285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714458550
    },
    {
        "content": "<p>Yeah, the suggestion was the other direction now, no?</p>",
        "id": 436223468,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714466733
    },
    {
        "content": "<p>Yes that might work better :-)</p>",
        "id": 436267533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714482393
    }
]