[
    {
        "content": "<p>I'm trying to get my hands wet with probability in mathlib, but I'm having some issues. I'm trying to show that the expected value for a random variable <code>X : Œ© ‚Üí ‚Ñù</code> is <code>1/2</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Integrals</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Density</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ProbabilityTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Œ©</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasureSpace</span> <span class=\"bp\">Œ©</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsProbabilityMeasure</span> <span class=\"o\">(</span><span class=\"n\">‚Ñô</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Œ©</span><span class=\"o\">)]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">MeasureTheory.pdf.IsUniform</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">‚Ñô</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">ùîº</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MeasureTheory.pdf.IsUniform.integral_eq</span> <span class=\"bp\">?</span><span class=\"n\">measurable</span> <span class=\"bp\">?</span><span class=\"n\">nonempty</span> <span class=\"bp\">?</span><span class=\"n\">top</span> <span class=\"n\">hX</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">measurable</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">case</span> <span class=\"n\">top</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">case</span> <span class=\"n\">nonempty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  Œ© : Type u_1</span>\n<span class=\"cm\">  inst‚úù¬π : MeasureSpace Œ©</span>\n<span class=\"cm\">  inst‚úù : IsProbabilityMeasure ‚Ñô</span>\n<span class=\"cm\">  X : Œ© ‚Üí ‚Ñù</span>\n<span class=\"cm\">  hX : pdf.IsUniform X (Set.Icc 0 1) ‚Ñô</span>\n<span class=\"cm\">  ‚ä¢ ‚à´ (x : ‚Ñù) in Set.Icc 0 1, x = 2‚Åª¬π</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>Here I'm stuck showing that this integral has the value 1/2. A few things I noted:</p>\n<ul>\n<li>Looking around mathlib, it looks like interval integrals are defined on <code>Set.Ioc</code> instead of <code>Set.Icc</code>, and I'm unsure how to convert this integral to one like that in order to use the existing lemmas.</li>\n<li>Hovering over the integral itself in the tactics window, I see this: <br>\n<code>@integral ‚Ñù ‚Ñù Real.normedAddCommGroup InnerProductSpace.toNormedSpace MeasureSpace.toMeasurableSpace (Measure.restrict ‚Ñô (Set.Icc 0 1)) fun x =&gt; x : ‚Ñù</code>. I'm confused why the measure <code>‚Ñô</code> is being referenced in this integral.</li>\n</ul>",
        "id": 418185511,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706227952
    },
    {
        "content": "<p><code>‚Ñô</code> is a notation for <code>volume</code> in the <code>ProbabilityTheory</code> scope.</p>",
        "id": 418198308,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706237696
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">ùîº</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hX.integral_eq</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">set_integral_congr_set_ae</span> <span class=\"n\">Ioc_ae_eq_Icc</span><span class=\"o\">,</span>\n    <span class=\"bp\">‚Üê</span> <span class=\"n\">intervalIntegral.integral_of_le</span> <span class=\"n\">zero_le_one</span><span class=\"o\">]</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 418199025,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706238266
    },
    {
        "content": "<p>Ah indeed it is, hovering over ‚Ñô shows <code>@volume ‚Ñù Real.measureSpace : Measure ‚Ñù</code></p>",
        "id": 418199035,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706238283
    },
    {
        "content": "<p><code>set_integral_congr_set_ae Ioc_ae_eq_Icc</code> what an incantation</p>",
        "id": 418199289,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706238485
    },
    {
        "content": "<p>Makes a ton of sense, thanks a ton :)</p>",
        "id": 418199319,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1706238512
    },
    {
        "content": "<p>In fact, some of the assumptions (e.g., <code>Œº s ‚â† 0</code>) in <code>IsUniform.integral_eq</code> are not needed at all. I'm going to drop them.</p>",
        "id": 418203799,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706240059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/10021\">#10021</a></p>",
        "id": 418206611,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706240756
    },
    {
        "content": "<p>Also, please turn <code>HasPDF</code> into a structure with 3 fields, not one field with two <code>‚àß</code>s.</p>",
        "id": 418207754,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706241035
    }
]