[
    {
        "content": "<p>I'm trying to explain coercions in mathlib4 to my class but I realise I don't understand them myself.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- `⊢ ↑x = ↑x`</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- `⊢ f x = f x`</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- `⊢ ↑S = ↑S`</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>So is the rule that lean 3 coercions from types to types have an up-arrow in lean 4, lean 3 coercions to functions don't have any arrows any more, and lean 3 coercions to sort used to have an exotic arrow but now just have a simple up-arrow? Or is something more complicated going on? Or do I have some settings on some values which can be changed?</p>",
        "id": 413191977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705422225
    },
    {
        "content": "<blockquote>\n<p>So is the rule that lean 3 coercions from types to types have an up-arrow in lean 4</p>\n</blockquote>\n<p>Yes, if tagged with <code>@[coe]</code></p>\n<blockquote>\n<p>lean 3 coercions to functions don't have any arrows any more, </p>\n</blockquote>\n<p>Only <code>Funlike.coe</code> has special printing rules. Yes, but the arrow is printed if there is no argument to make it obvious</p>",
        "id": 413193872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705422782
    },
    {
        "content": "<p>BTW, you can use <code>set_option pp.coercions false</code> to see what functions are actually used for coercions.</p>",
        "id": 413194024,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705422822
    },
    {
        "content": "<p>Just to make things more confusing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `set_option pp.coercions false ` has no effect!</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- `⊢ ↥S = ↥S`</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 413194056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705422832
    },
    {
        "content": "<p><code>↥</code> is used for <code>{x // x \\in _}</code>, but not <code>Set.Elem</code></p>",
        "id": 413194134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705422845
    },
    {
        "content": "<p>In Lean 3, we had generic <code>coe</code>/<code>coe_fn</code>/<code>coe_sort</code>, now Lean unfolds to <code>Nat.cast</code>, <code>FunLike.coe</code>, and <code>Set.Elem</code> in your examples.</p>",
        "id": 413194276,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705422883
    },
    {
        "content": "<p>The arrows are added by delaborators and we can cahnge the rules without touching Lean core source code.</p>",
        "id": 413194406,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705422926
    },
    {
        "content": "<p>So, to summarise, the rule now is that it's chaos?</p>",
        "id": 413195278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705423221
    },
    {
        "content": "<p>in the sense that I cannot give some succinct list of rules to undergraduates, like I could in Lean 3? (other than \"erm...it depends on which delaborators have been written\")</p>",
        "id": 413195533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705423314
    },
    {
        "content": "<p>Make the list of rules you want to have, then ask someone to fix them in Std/mathlib</p>",
        "id": 413196738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705423672
    },
    {
        "content": "<p>It's too late for my course now -- I will not be upgrading mathlib because the course has started and experience shows me that not upgrading mathlib solves more problems than it causes. I'm writing documentation.</p>",
        "id": 413197041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705423753
    }
]