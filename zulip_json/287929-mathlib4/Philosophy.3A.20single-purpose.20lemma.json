[
    {
        "content": "<p>We had some disagreement in a current PR thread (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12380\">#12380</a>) which was rather philosophical in nature than an issue of the particular code we wrote, so I would like to bring the philosophical issue here.</p>\n<p>Is it acceptable to declare a lemma that will be used only once?</p>\n<p>Pro: It makes the complicated proof (that uses this lemma) shorter.<br>\nCon: It makes the total length of the code longer.<br>\nPro: Even tho we think that it is a single-purpose lemma, another use of the lemma might pop up later.<br>\nCon: If the lemma is too idiosyncratic, we will probably not be able to name it in such a way that a potential later user will be able to find it even if they happen to need it.<br>\nPro: The lemma can always be found by importing the entire Mathlib and writing <code>exact?</code> or similar.<br>\nCon: If the lemma is too idiosyncratic, its potential second use case will be probably phrased a bit differently, which will make <code>exact?</code> fail.<br>\nPro: If we inline the proof of the lemma inside the theorem that uses it (instead of keeping the single-purpose lemma in the production code), a potential second user will definitely have to duplicate the code as well as if the lemma existed and was not found; however, it is easier to do refactoring that will search for duplicate lemmas than refactoring that will search for duplicate blocks inside different proofs.</p>\n<p>A second question is whether such a single-purpose lemma should be private.</p>",
        "id": 435168469,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1713958514
    },
    {
        "content": "<p>I think it's fine if it does improve the complicated proof - either in readability or in performance. I would probably keep it next to the complicated proof rather than trying to find a \"logical\" place for it</p>",
        "id": 435169180,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713958776
    },
    {
        "content": "<p>... and mark it <code>private</code></p>",
        "id": 435174481,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713960484
    },
    {
        "content": "<p>I'd say it's only acceptable if the lemma is nontrivial (i.e., the proof of the lemma has more than three lines). Otherwise, you should inline it in the proof of the main result.</p>",
        "id": 435193623,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1713966342
    },
    {
        "content": "<p>However, if the lemma is used more than once (even if it was used twice by the same theorem), is it OK to have a trivial lemma, right?</p>",
        "id": 435216884,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1713972098
    },
    {
        "content": "<p>Do you have a concrete example for me? My general impression is that lemmas which are really specific and have a one-line or two-lines proof should almost never be stated separately, because you won't gain any readability compared to just giving the proof where you need it.</p>",
        "id": 435219294,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1713972752
    },
    {
        "content": "<p>One example that comes to mind is <a href=\"https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L113\">this</a>.</p>",
        "id": 435219851,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1713972910
    },
    {
        "content": "<p>I would normally do that as a <code>have</code></p>",
        "id": 435222078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713973599
    },
    {
        "content": "<p>If there are reasons why the theorem will <em>never</em> be referenced again later (e.g. it has additional hypotheses not in the main theorem with the same statement), then I think it should be inlined</p>",
        "id": 435222278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713973669
    },
    {
        "content": "<p>My reason for preferring <code>have</code> is that when going through a file, I'm usually searching for a \"useful <code>lemma</code>\", so having less things to search through is more efficient (a single-purpose lemma doesn't fit the definition for a \"useful <code>lemma</code>\").</p>",
        "id": 435225222,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1713974497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Philosophy.3A.20single-purpose.20lemma/near/435219294\">said</a>:</p>\n<blockquote>\n<p>Do you have a concrete example for me? My general impression is that lemmas which are really specific and have a one-line or two-lines proof should almost never be stated separately, because you won't gain any readability compared to just giving the proof where you need it.</p>\n</blockquote>\n<p>Currently for example this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Set.between_inter</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">T</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hIT</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hTX</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">⊆</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">I</span> <span class=\"bp\">∩</span> <span class=\"n\">E</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"bp\">∩</span> <span class=\"n\">E</span> <span class=\"bp\">∧</span> <span class=\"n\">T</span> <span class=\"bp\">∩</span> <span class=\"n\">E</span> <span class=\"bp\">⊆</span> <span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Set.inter_subset_inter_left</span> <span class=\"n\">E</span> <span class=\"n\">hIT</span><span class=\"o\">,</span> <span class=\"n\">Set.inter_subset_inter_left</span> <span class=\"n\">E</span> <span class=\"n\">hTX</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>It is completely trivial and brings no extra value for Mathlib as a whole, but it perfectly fits into the shape of our goals, so we use it.</p>",
        "id": 435244569,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1713981500
    },
    {
        "content": "<p>This example seems very clear: this should not be stated, even as a private lemma.</p>",
        "id": 435244997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1713981640
    },
    {
        "content": "<p>In my older project, this would be a good example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">List.length_append_append</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">x.length</span> <span class=\"bp\">+</span> <span class=\"n\">y.length</span> <span class=\"bp\">+</span> <span class=\"n\">z.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.length_append</span><span class=\"o\">,</span> <span class=\"n\">List.length_append</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Again, completely trivial and useless for \"how many features does Mathlib provide\", but I used it 13 times throughout my project, so it paid off.</p>",
        "id": 435245477,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1713981809
    },
    {
        "content": "<p>This one is just <code>simp [List.length_append]</code>, so I don't see how the lemma could help compared to this single command whose name is not longer than the name of the lemma. Maybe it's a <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem: if you show me how you use this lemma, I can probably show you how to avoid it without any loss in readability.</p>",
        "id": 435248474,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1713982866
    },
    {
        "content": "<p>Let's say the current goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n</code></pre></div>\n<p>and the desired goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">x.length</span> <span class=\"bp\">+</span> <span class=\"n\">y.length</span> <span class=\"bp\">+</span> <span class=\"n\">z.length</span>\n</code></pre></div>\n<p>after which I want to do some other transformations, probably exploiting some properties of <code>(a ++ b)</code> without ripping them apart. The easiest way how to get from the former proof state to the latter proof state is to use <code>rw [List.length_append_append]</code>.</p>",
        "id": 435249352,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1713983192
    },
    {
        "content": "<p>I thought similar things until I embraced <code>calc</code>. Maybe you could <code>calc</code> a try?</p>",
        "id": 435249490,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713983250
    },
    {
        "content": "<p>For this one you just need <code>rw [List.length_append _ z, List.length_append x]</code>, so there is essentially no gain.</p>",
        "id": 435249744,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1713983339
    },
    {
        "content": "<p>The gain is in both readability and how fast I can write it.</p>",
        "id": 435249847,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1713983379
    },
    {
        "content": "<p>I think there is a value in being able to express \"one step of my thinking\" by \"one step in Lean\".</p>",
        "id": 435250035,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1713983444
    },
    {
        "content": "<p>The issue is for your readers: if you introduce more lemmas, they have more to remember. Just like when you write a math paper, the focus should not be on how easy it is for you to write something, but how you're making it as easy as possible to read.</p>",
        "id": 435250660,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1713983694
    },
    {
        "content": "<p>The reader should read the main result and all definitions that the main result depends on.</p>",
        "id": 435250968,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1713983803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Philosophy.3A.20single-purpose.20lemma/near/435193623\">said</a>:</p>\n<blockquote>\n<p>I'd say it's only acceptable if the lemma is nontrivial (i.e., the proof of the lemma has more than three lines). Otherwise, you should inline it in the proof of the main result.</p>\n</blockquote>\n<p>This reminds me of something our teacher said when I was in the second year of my undergrad:<br>\n\"The difference between mathematicians and computer scientists is that mathematicians like when things are nontrivial.\"<br>\nBack then I didn't understand what he meant.</p>",
        "id": 435251373,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1713983961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Philosophy.3A.20single-purpose.20lemma/near/435250968\">said</a>:</p>\n<blockquote>\n<p>The reader should read the main result and all definitions that the main result depends on.</p>\n</blockquote>\n<p>This presupposes that the reader doesn't care about the proof just because it is formally verified. I would argue that's false in general.</p>",
        "id": 435252995,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713984664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Philosophy.3A.20single-purpose.20lemma/near/435252995\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Philosophy.3A.20single-purpose.20lemma/near/435250968\">said</a>:</p>\n<blockquote>\n<p>The reader should read the main result and all definitions that the main result depends on.</p>\n</blockquote>\n<p>This presupposes that the reader doesn't care about the proof just because it is formally verified. I would argue that's false in general.</p>\n</blockquote>\n<p>The assertion may not always be true, but I think it's true rather a substantial fraction of the time – particularly for mathlib files near the leaves of the import tree, which often consist of long chains of obscure technical lemmas leading up to a few big theorems at the end, with the preliminary lemmas being utterly useless outside the context of that particular proof. If I'm looking for some specific well-known theorem in the manual because I want to use it elsewhere, I don't care about the technical lemmas leading to it – only the theorem and the definitions needed to state it.</p>\n<p>I would argue for a wider use of <code>private</code> in mathlib, in order to avoid cluttering the reference manual and the autocomplete results with single-use lemmas like this. At one time I recall being told that <code>private</code> was always discouraged in mathlib contributions, and I am pleasantly surprised to see Yael's suggestion in this thread to use <code>private</code> getting some upvotes. Another possibility is to wrap the technical results in a dedicated namespace and only export the \"interesting\" results to the root namespace, but this only partially solves the clutter issue.</p>",
        "id": 435317286,
        "sender_full_name": "David Loeffler",
        "timestamp": 1714024698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Philosophy.3A.20single-purpose.20lemma/near/435244569\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Set.between_inter</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">T</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hIT</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hTX</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">⊆</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">I</span> <span class=\"bp\">∩</span> <span class=\"n\">E</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"bp\">∩</span> <span class=\"n\">E</span> <span class=\"bp\">∧</span> <span class=\"n\">T</span> <span class=\"bp\">∩</span> <span class=\"n\">E</span> <span class=\"bp\">⊆</span> <span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Set.inter_subset_inter_left</span> <span class=\"n\">E</span> <span class=\"n\">hIT</span><span class=\"o\">,</span> <span class=\"n\">Set.inter_subset_inter_left</span> <span class=\"n\">E</span> <span class=\"n\">hTX</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>It is completely trivial and brings no extra value for Mathlib as a whole, but it perfectly fits into the shape of our goals, so we use it.</p>\n</blockquote>\n<p>Unpopular opinion:</p>\n<p>Lemmas like <code>Set.between_inter</code> become (locally) helpful once you bracket your conjunctions in a logical way instead of going with the flow.</p>",
        "id": 435328154,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714030039
    },
    {
        "content": "<p>Popular opinion:  conjunctions should almost never appear in the conclusions of lemmas, especially if each half of the conjunction already exists as a lemma</p>",
        "id": 435333958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714032167
    },
    {
        "content": "<p>I agree with you. What we did is some kind of compromise between declaring a <code>Prop</code> \"is between\" and writing every inclusion explicitly. In literature, they say <code>T</code> is a set of sets <code>T := { I' | I ⊆ I' ⊆ X }</code> and then talk about \"belonging to <code>T</code>\"; however, for formalization, it is better not to define <code>T</code> as a set of sets. Perhaps is best not to define <code>T</code> at all.</p>",
        "id": 435335739,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714032838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sébastien Gouëzel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Philosophy.3A.20single-purpose.20lemma/near/435250660\">said</a>:</p>\n<blockquote>\n<p>The issue is for your readers: if you introduce more lemmas, they have more to remember. Just like when you write a math paper, the focus should not be on how easy it is for you to write something, but how you're making it as easy as possible to read.</p>\n</blockquote>\n<p>I think that <code>List.length_append_append</code> gets bonus points for having a name that is easy to understand without having to press F12.</p>",
        "id": 435336399,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714033067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"580947\">Rida Hamadani</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Philosophy.3A.20single-purpose.20lemma/near/435225222\">said</a>:</p>\n<blockquote>\n<p>having less things to search through is more efficient</p>\n</blockquote>\n<p>In general, I am gradually turning away from searching stuff by scrolling.</p>",
        "id": 435337043,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714033301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Philosophy.3A.20single-purpose.20lemma/near/435333958\">said</a>:</p>\n<blockquote>\n<p>Popular opinion:  conjunctions should almost never appear in the conclusions of lemmas, especially if each half of the conjunction already exists as a lemma</p>\n</blockquote>\n<p>I agree that the \"main logical connective\" in the conclusions of lemmas should not be AND. However, it is perfectly fine if AND appears inside OR or inside IFF that is the conclusion of the lemma.</p>\n<p>Nevertheless, for private lemmas I'd drop even the first requirement. I wish a private lemma could be whatever the caller finds convenient.</p>",
        "id": 435338002,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714033589
    }
]