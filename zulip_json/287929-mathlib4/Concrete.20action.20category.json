[
    {
        "content": "<p>I would like to generalise <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Action.ofMulAction#doc\">docs#Action.ofMulAction</a> to more concrete categories other than <code>Type</code>. In particular I need this for <code>FintypeCat</code>, but I think one could generalise to any <code>ConcreteCategory V</code> where <code>forget V</code> is <code>Full</code>, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">LargeCategory</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">[</span><span class=\"n\">ConcreteCategory</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Concrete.MulAction.of</span> <span class=\"o\">[</span><span class=\"n\">Full</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">V</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"o\">((</span><span class=\"n\">forget</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Action</span> <span class=\"n\">V</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n  <span class=\"n\">ρ</span> <span class=\"o\">:=</span> <span class=\"n\">MonCat.ofHom</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">g</span>\n      <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">forget</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">((</span><span class=\"n\">forget</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Full.preimage</span> <span class=\"n\">f</span>\n    <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_injective</span>\n      <span class=\"n\">ext</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">Full.witness</span><span class=\"o\">,</span> <span class=\"n\">End.one_def</span><span class=\"o\">,</span> <span class=\"n\">FunctorToTypes.map_id_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">g</span> <span class=\"n\">h</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_injective</span>\n      <span class=\"n\">ext</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Full.witness</span><span class=\"o\">,</span> <span class=\"n\">End.mul_def</span><span class=\"o\">,</span> <span class=\"n\">FunctorToTypes.map_comp_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>But I don't want this to make the usage of <code>Action.ofMulAction</code> worse. Currently</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Types.ofMulAction</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Action</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"o\">((</span><span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">X</span>\n    <span class=\"n\">infer_instance</span>\n  <span class=\"n\">Concrete.MulAction.of</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Types.ofMulAction</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ρ</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works, but has unwanted boilerplate code because Lean does not infer <code>MulAction G X</code> automatically, because it somehow can't see through <code>(forget (Type u)).obj X</code>.</p>",
        "id": 412375206,
        "sender_full_name": "Christian Merten",
        "timestamp": 1704989387
    },
    {
        "content": "<p>Do you think this is worth it or should one better introduce specialized <code>ofMulAction</code>s for each full subcategory of <code>Type u</code> that one encounters?</p>",
        "id": 412375678,
        "sender_full_name": "Christian Merten",
        "timestamp": 1704989509
    },
    {
        "content": "<p>I'm not sure how useful this would be since there aren't many concrete categories \"in the wild\" where the forgetful functor is full.</p>",
        "id": 412384746,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704992359
    },
    {
        "content": "<p>So I just go with a specialized constructor <code>Action.FintypeCat.ofMulAction</code>?</p>",
        "id": 412385038,
        "sender_full_name": "Christian Merten",
        "timestamp": 1704992428
    },
    {
        "content": "<p>Yes, I think so. If there ends up being another case which fits this model then it may be worth adding this general construction, but I can't think of a natural example.</p>",
        "id": 412385155,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704992466
    },
    {
        "content": "<p>Follow up question: Where would this <code>Action.FintypeCat.ofMulAction</code> go? In <code>RepresentationTheory.Action.Basic</code> I would have to add an import for <code>FintypeCat</code>, do I add an extra file for this? Or do I just put this where I actually use it?</p>",
        "id": 412386366,
        "sender_full_name": "Christian Merten",
        "timestamp": 1704992845
    },
    {
        "content": "<p>Alternative suggestion: How about making a new file <code>RepresentationTheory.Action.Concrete</code> and move <code>Action.ofMulAction</code> and associated lemmas there.</p>",
        "id": 412386674,
        "sender_full_name": "Christian Merten",
        "timestamp": 1704992941
    }
]