[
    {
        "content": "<p>Perhaps you've had problems elaborating <code>AlgHom</code>s or <code>StarAlgHom</code>s. If so, I've come across two instances (I think I added them) that are causing the pain. Namely <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgHom.instContinuousLinearMapClassToSemiringToDivisionSemiringToSemifieldToFieldToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToSeminormedCommRingToNormedCommRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingToNonUnitalSeminormedCommRingToModuleToSeminormedAddCommGroupToNonUnitalSeminormedRingToNonUnitalNormedRingToNormedSpace%27ToModuleToSeminormedAddCommGroupToNonUnitalSeminormedRingToNormedSpace#doc\">docs#AlgHom.instContinuousLinearMapClassToSemiringToDivisionSemiringToSemifieldToFieldToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToSeminormedCommRingToNormedCommRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingToNonUnitalSeminormedCommRingToModuleToSeminormedAddCommGroupToNonUnitalSeminormedRingToNonUnitalNormedRingToNormedSpace'ToModuleToSeminormedAddCommGroupToNonUnitalSeminormedRingToNormedSpace</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarAlgHom.instContinuousLinearMapClassComplexInstSemiringComplexToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToModuleInstNormedFieldComplexToSeminormedAddCommGroupToNonUnitalSeminormedRingToNonUnitalNormedRingToNormedSpace%27ToModuleToSeminormedAddCommGroupToNonUnitalSeminormedRingToNonUnitalNormedRingToNormedSpace%27#doc\">docs#StarAlgHom.instContinuousLinearMapClassComplexInstSemiringComplexToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToModuleInstNormedFieldComplexToSeminormedAddCommGroupToNonUnitalSeminormedRingToNonUnitalNormedRingToNormedSpace'ToModuleToSeminormedAddCommGroupToNonUnitalSeminormedRingToNonUnitalNormedRingToNormedSpace'</a>.</p>\n<p>Now, in Lean 3 these instances did <em>not</em> cause the same elaboration pain, but in Lean 4 I get errors when Lean goes looking for certain <code>FunLike</code> instances.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>mwe</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.ofId</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n\n<span class=\"c1\">-- reenable the instance to break elaboration of `bar_zero`</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">AlgHom.instContinuousLinearMapClassToSemiringToDivisionSemiringToSemifieldToFieldToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToSeminormedCommRingToNormedCommRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocCommSemiringToNonUnitalNonAssocCommRingToNonUnitalCommRingToNonUnitalSeminormedCommRingToModuleToSeminormedAddCommGroupToNonUnitalSeminormedRingToNonUnitalNormedRingToNormedSpace'ToModuleToSeminormedAddCommGroupToNonUnitalSeminormedRingToNormedSpace</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar_zero</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">map_zero</span> <span class=\"n\">bar</span>\n\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">StarRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→⋆ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">StarAlgHom.ofId</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n\n<span class=\"c1\">-- reenable the instance to break elaboration of `foo_zero`</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">StarAlgHom.instContinuousLinearMapClassComplexInstSemiringComplexToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToModuleInstNormedFieldComplexToSeminormedAddCommGroupToNonUnitalSeminormedRingToNonUnitalNormedRingToNormedSpace'ToModuleToSeminormedAddCommGroupToNonUnitalSeminormedRingToNonUnitalNormedRingToNormedSpace'</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo_zero</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">map_zero</span> <span class=\"n\">foo</span>\n</code></pre></div>\n</div></div>\n<p>This reminds me of elaboration problem we had during porting surround a redundant <code>FunLike</code> instance on <code>Module.Dual</code> that was causing linear maps to fail to elaborate. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and I ran across that independently and we just ended up removing the instance because it was unnecessary. However, I think (?) we actually want both of the instances above. I'd love some help or insight on this.</p>",
        "id": 412781772,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705208123
    },
    {
        "content": "<p>Here is <a href=\"#narrow/stream/287929-mathlib4/topic/Module.2EDual.20and.20linear.20maps\">yet another thread</a> about the <code>Module.Dual</code> issue which may contain some hints as to what is going on here.</p>",
        "id": 412782163,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705208385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> I assume that you never made any more progress after the end of that thread?</p>",
        "id": 412782408,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705208509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> were these the instances you came across that were problematic during the refactor?</p>",
        "id": 412799172,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1705224765
    },
    {
        "content": "<p>I’ve mostly got current master building with Anne’s changes at <a href=\"https://github.com/leanprover-community/mathlib4/tree/mrb%2Fupdates\">branch#mrb/updates</a> (any help appreciated) but if someone doesn’t beat me to testing the mwe above there I’ll do it in a few hours</p>",
        "id": 412810747,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1705235199
    },
    {
        "content": "<p>Yes this is no problem. You can do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">500</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">200</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bar_zero</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">map_zero</span> <span class=\"n\">bar</span>\n</code></pre></div>\n<p>for example.</p>",
        "id": 412815677,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1705239548
    }
]