[
    {
        "content": "<p>Another puzzle.  Will Lean accept this proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">âˆ§</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">]</span>  <span class=\"c1\">-- does this work?</span>\n</code></pre></div>",
        "id": 438876958,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715803546
    },
    {
        "content": "<p>Ooh, <em>bad</em> <code>simp_rw</code></p>",
        "id": 438877364,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715803687
    },
    {
        "content": "<p>Maybe I should have asked \"Would <em>you</em> accept this proof?\"!</p>",
        "id": 438877476,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715803749
    },
    {
        "content": "<p>This shows that <code>simp_rw</code> is much like me (bad at focusing)</p>",
        "id": 438878027,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715804000
    },
    {
        "content": "<p>By the way, I discovered this by going through the warnings of the multiple goal linter and it took me an inordinate amount of time to figure out how Lean could solve the second goal while working only on the first.</p>",
        "id": 438878269,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715804117
    },
    {
        "content": "<p>a focusing dot would have prevented this</p>",
        "id": 438891243,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1715809658
    },
    {
        "content": "<p>makes me think, is it reasonable to look into requiring use of focusing dots in certain cases via linter?</p>",
        "id": 438891496,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1715809779
    },
    {
        "content": "<p>That is exactly what the multiple goal linter does...</p>",
        "id": 438891578,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715809804
    },
    {
        "content": "<p>i don't quite think it's the same?</p>",
        "id": 438891699,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1715809866
    },
    {
        "content": "<p>The multiple goal linter asks you to place focusing dots whenever there is more than one goal.</p>",
        "id": 438891798,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715809917
    },
    {
        "content": "<p>oh... i must have been thinking of a different linter involving wether a tactic closes goals...</p>",
        "id": 438891949,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1715809983
    },
    {
        "content": "<p>(and it is what I am working on and how I found the feature above of <code>simp_rw</code>.)</p>",
        "id": 438891981,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715809998
    },
    {
        "content": "<p>So, in conclusion, you are right, a focusing dot would have prevented this and a linter is a way of making this robust!</p>",
        "id": 438892214,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715810116
    },
    {
        "content": "<p>(I am also \"fixing\" <code>simp_rw</code> right now and making it focus on its own anyway.)</p>",
        "id": 438892239,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715810137
    },
    {
        "content": "<p>ah, i was thinking of the non-terminal simp linter</p>",
        "id": 438893377,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1715810673
    },
    {
        "content": "<p>Oh, I think that, because of how <code>simp_rw</code> works, the non-terminal <code>simp</code> linter would ignore it: <code>simp_rw</code> is more of a \"powered <code>rw</code>\" than a version of <code>simp</code>.</p>",
        "id": 438893504,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715810737
    },
    {
        "content": "<p>(In any case, the non-terminal <code>simp</code> and the multiple goals linter are in the same status of existence...)</p>",
        "id": 438893598,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715810771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60simp_rw.60.20puzzle/near/438893504\">said</a>:</p>\n<blockquote>\n<p>Oh, I think that, because of how <code>simp_rw</code> works, the non-terminal <code>simp</code> linter would ignore it: <code>simp_rw</code> is more of a \"powered <code>rw</code>\" than a version of <code>simp</code>.</p>\n</blockquote>\n<p>right... although i remember someone saying that <code>simp_rw some_list</code> behaves similarly to <code>simp only [some_list[0]];simp only [some_list[1]];....</code></p>",
        "id": 438894035,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1715811011
    },
    {
        "content": "<p>Yes, that is a good mental model, but I also think that most people would have expected <code>simp_rw [lemmas]</code> to not spill over, so, again, just like both <code>rw</code> and <code>simp</code> do.</p>",
        "id": 438894291,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715811146
    },
    {
        "content": "<p>It turns out that mathlib used this feature exactly once.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12940\">#12940</a></p>",
        "id": 438895262,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715811637
    }
]