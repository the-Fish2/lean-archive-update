[
    {
        "content": "<p>This is an announcement that <a href=\"https://github.com/leanprover-community/mathlib4/pull/9095\">#9095</a> landed. This is a rather disruptive PR since it renamed 58 lemmas that are among the most used in mathlib. If you have a project depending on mathlib, you should check how the lemmas were renamed to adapt.</p>",
        "id": 408559345,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702888026
    },
    {
        "content": "<p>The lemmas in question are all about monotonicity of <code>(a ^ ·)</code> and <code>(· ^ n)</code>. The full list of renames by file is</p>\n<h3><code>Algebra.GroupPower.Order</code></h3>\n<ul>\n<li><code>pow_mono</code> → <code>pow_right_mono</code></li>\n<li><code>pow_le_pow</code> → <code>pow_le_pow_right</code></li>\n<li><code>pow_le_pow_of_le_left</code> → <code>pow_le_pow_left</code></li>\n<li><code>pow_lt_pow_of_lt_left</code> → <code>pow_lt_pow_left</code></li>\n<li><code>strictMonoOn_pow</code> → <code>pow_left_strictMonoOn</code></li>\n<li><code>pow_strictMono_right</code> → <code>pow_right_strictMono</code></li>\n<li><code>pow_lt_pow</code> → <code>pow_lt_pow_right</code></li>\n<li><code>pow_lt_pow_iff</code> → <code>pow_lt_pow_iff_right</code></li>\n<li><code>pow_le_pow_iff</code> → <code>pow_le_pow_iff_right</code></li>\n<li><code>self_lt_pow</code> → <code>lt_self_pow</code></li>\n<li><code>strictAnti_pow</code> → <code>pow_right_strictAnti</code></li>\n<li><code>pow_lt_pow_iff_of_lt_one</code> → <code>pow_lt_pow_iff_right_of_lt_one</code></li>\n<li><code>pow_lt_pow_of_lt_one</code> → <code>pow_lt_pow_right_of_lt_one</code></li>\n<li><code>lt_of_pow_lt_pow</code> → <code>lt_of_pow_lt_pow_left</code></li>\n<li><code>le_of_pow_le_pow</code> → <code>le_of_pow_le_pow_left</code></li>\n<li><code>pow_lt_pow₀</code> → <code>pow_lt_pow_right₀</code></li>\n</ul>\n<h3><code>Algebra.GroupPower.CovariantClass</code></h3>\n<ul>\n<li><code>pow_le_pow_of_le_left'</code> → <code>pow_le_pow_left'</code></li>\n<li><code>nsmul_le_nsmul_of_le_right</code> → <code>nsmul_le_nsmul_right</code></li>\n<li><code>pow_lt_pow'</code> → <code>pow_lt_pow_right'</code></li>\n<li><code>nsmul_lt_nsmul</code> → <code>nsmul_lt_nsmul_left</code></li>\n<li><code>pow_strictMono_left</code> → <code>pow_right_strictMono'</code></li>\n<li><code>nsmul_strictMono_right</code> → <code>nsmul_left_strictMono</code></li>\n<li><code>StrictMono.pow_right'</code> → <code>StrictMono.pow_const</code></li>\n<li><code>StrictMono.nsmul_left</code> → <code>StrictMono.const_nsmul</code></li>\n<li><code>pow_strictMono_right'</code> → <code>pow_left_strictMono</code></li>\n<li><code>nsmul_strictMono_left</code> → <code>nsmul_right_strictMono</code></li>\n<li><code>Monotone.pow_right</code> → <code>Monotone.pow_const</code></li>\n<li><code>Monotone.nsmul_left</code> → <code>Monotone.const_nsmul</code></li>\n<li><code>lt_of_pow_lt_pow'</code> → <code>lt_of_pow_lt_pow_left'</code></li>\n<li><code>lt_of_nsmul_lt_nsmul</code> → <code>lt_of_nsmul_lt_nsmul_right</code></li>\n<li><code>pow_le_pow'</code> → <code>pow_le_pow_right'</code></li>\n<li><code>nsmul_le_nsmul</code> → <code>nsmul_le_nsmul_left</code></li>\n<li><code>pow_le_pow_of_le_one'</code> → <code>pow_le_pow_right_of_le_one'</code></li>\n<li><code>nsmul_le_nsmul_of_nonpos</code> → <code>nsmul_le_nsmul_left_of_nonpos</code></li>\n<li><code>le_of_pow_le_pow'</code> → <code>le_of_pow_le_pow_left'</code></li>\n<li><code>le_of_nsmul_le_nsmul'</code> → <code>le_of_nsmul_le_nsmul_right'</code></li>\n<li><code>pow_le_pow_iff'</code> → <code>pow_le_pow_iff_right'</code></li>\n<li><code>nsmul_le_nsmul_iff</code> → <code>nsmul_le_nsmul_iff_left</code></li>\n<li><code>pow_lt_pow_iff'</code> → <code>pow_lt_pow_iff_right'</code></li>\n<li><code>nsmul_lt_nsmul_iff</code> → <code>nsmul_lt_nsmul_iff_left</code></li>\n</ul>\n<h3><code>Data.Nat.Pow</code></h3>\n<ul>\n<li><code>Nat.pow_lt_pow_of_lt_left</code> → <code>Nat.pow_lt_pow_left</code></li>\n<li><code>Nat.pow_le_iff_le_left</code> → <code>Nat.pow_le_pow_iff_left</code></li>\n<li><code>Nat.pow_lt_iff_lt_left</code> → <code>Nat.pow_lt_pow_iff_left</code></li>\n</ul>",
        "id": 408559468,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702888083
    },
    {
        "content": "<p>On top of that, the following lemmas were removed:</p>\n<ul>\n<li><code>self_le_pow</code> was a duplicate of <code>le_self_pow</code>.</li>\n<li><code>Nat.pow_lt_pow_of_lt_right</code> is defeq to <code>pow_lt_pow_right</code>.</li>\n<li><code>Nat.pow_right_strictMono</code> is defeq to <code>pow_right_strictMono</code>.</li>\n<li><code>Nat.pow_le_iff_le_right</code> is defeq to <code>pow_le_pow_iff_right</code>.</li>\n<li><code>Nat.pow_lt_iff_lt_right</code> is defeq to <code>pow_lt_pow_iff_right</code>.</li>\n</ul>",
        "id": 408559569,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702888111
    },
    {
        "content": "<p>And finally:</p>\n<ul>\n<li>Some lemma assumptions have been turned from <code>0 &lt; n</code> or <code>1 ≤ n</code> to <code>n ≠ 0</code>.</li>\n<li>A few <code>Nat</code> lemmas have been <code>protected</code>.</li>\n</ul>",
        "id": 408559616,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702888131
    },
    {
        "content": "<p>There are other changes that are non-breaking that you can look up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9095\">#9095</a> if you're interested.</p>",
        "id": 408559739,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702888178
    },
    {
        "content": "<p>I should remind you that the information of what lemma has been changed in what PR is available in the <a href=\"https://mathlib-changelog.org/\">#changelog</a>. The changelog does not however contain lists of renames.</p>",
        "id": 408560097,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702888319
    },
    {
        "content": "<p>Thanks for clearly documenting the changes!</p>",
        "id": 408560659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702888549
    },
    {
        "content": "<p>Just curious, what is the benefit of these changes? The cost of the change is substantial since existing non-mathlib codebases have to be refactored, and muscle memory needs to be re-trained. In this case the lemmas seem to be among the most-used in mathlib which is especially rough.</p>\n<p>And if renames are necessary, it seems that an alternative that should be considered is leaving the old lemmas in place as aliases for the new lemmas, possibly with a deprecation attribute or something of the sort. It would be great to introduce those for this change if possible. That way there's a smooth off-ramp from the old lemmas to the new ones.</p>",
        "id": 409671047,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703296748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I meant to send this earlier, but got caught during the Zulip outage. This PR would be an ideal test candidate for evaluating Leaff's renaming detection. It would be awesome if you could generate the list that Yaël created manually above automatically from Leaff.</p>",
        "id": 409682252,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703305461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117969\">@Tudor achim</span> Thanks for posting. You are right, and I think mathlib might need to start thinking about these issues. In general, I think we are quite unaware of all the projects that depend on mathlib. So it's good that you tell us about such examples.<br>\nI'm optimistic that in the near future we will have much better tooling around such renames.<br>\nAlready the latest Lean release seems to have brought us functionality for automatically renaming declarations. If we can run that in batch mode, and those batches can be scripted, then these transitions should become almost painfree.</p>",
        "id": 409690736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703313890
    },
    {
        "content": "<p>In that specific case, my motivation was that the lemma names were all over the place and as a result it was impossible to infer what the name of a lemma is going off the name of a similar lemma, and in fact some of those similar lemmas were missing!</p>",
        "id": 409690869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703314078
    },
    {
        "content": "<p>And in particular, mathlib strongly leans on \"guessability\" of names, so there's also a cost to having inconsistent names. That doesn't mean we can't have a deprecation period, though</p>",
        "id": 409691128,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703314347
    },
    {
        "content": "<p>Certainly! We shouldn't stop making these changes. But we can try to be a bit less disruptive, in support of other projects depending on mathlib.</p>",
        "id": 409691239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703314446
    },
    {
        "content": "<p>I know there's a new deprecation feature, but it's a bit unergonomic to use within mathlib since it throws warnings on uses of the deprecated lemmas, and mathlib CI errors on warnings.</p>",
        "id": 409691283,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703314503
    },
    {
        "content": "<p>well yeah, mathlib should not have warnings in itself, doesn't mean it shouldn't flag deprecations for downstream use</p>",
        "id": 409691980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315096
    },
    {
        "content": "<p>besides you can always suppress the deprecation warning if you can't be bothered / it's a larger project to update mathlib itself after a deprecation</p>",
        "id": 409692008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315138
    },
    {
        "content": "<p>certainly if this is pushing you to just remove instead of deprecate then it's the wrong reaction</p>",
        "id": 409692073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315188
    },
    {
        "content": "<p>How can I suppress the deprecation warning? With a nolint?</p>",
        "id": 409692111,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703315231
    },
    {
        "content": "<p>the linter warning should tell you the name of the linter to disable</p>",
        "id": 409692125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315255
    },
    {
        "content": "<p>if it's the kind of warning that pops up immediately rather than at the end of the build with <code>#lint</code>, you suppress it using <code>set_option linter.foo false in</code></p>",
        "id": 409692191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315298
    },
    {
        "content": "<p>all linter warnings (including the unused variable linter) can be suppressed in this way</p>",
        "id": 409692220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315351
    },
    {
        "content": "<p>Yes but that involves disabling the linter of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> declarations where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is the number of downstream uses. When I first heard of the deprecation tool, I was hoping this meant I could touch <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> (zero) declarations downstream while still saying \"you shouldn't use this lemma, but that one instead\".</p>",
        "id": 409692226,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703315353
    },
    {
        "content": "<p>I think the workflow should be something like:</p>\n<ol>\n<li>Rename a lemma, and tag it with <code>@[old_name foo_bar]</code>.</li>\n<li>The attribute creates an alias, and deprecates the old name in favour of the new name.</li>\n<li>mathlib has a boatload of warnings</li>\n<li>automatic tooling fixes all those warnings to switch over to the new names</li>\n<li>PR</li>\n<li>a week later: remove all the <code>@[old_name]</code> attributes.</li>\n</ol>",
        "id": 409692230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703315363
    },
    {
        "content": "<p>what the heck kind of deprecation is that <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 409692237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315373
    },
    {
        "content": "<p>the whole point is to get the downstream uses to use something else</p>",
        "id": 409692265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315403
    },
    {
        "content": "<p>Listen, the way I do refactors is</p>\n<ol>\n<li>Shuffle many lemmas around, possibly leaving duplicates for me to clean up afterwards</li>\n<li>Fix the downstream uses</li>\n</ol>",
        "id": 409692313,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703315423
    },
    {
        "content": "<p>okay?</p>",
        "id": 409692322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315435
    },
    {
        "content": "<p>warnings don't break the build</p>",
        "id": 409692330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315446
    },
    {
        "content": "<p>Each step is a sufficiently hard to review PR on its own. I don't want to mix the steps together.</p>",
        "id": 409692333,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703315450
    },
    {
        "content": "<p>at least they shouldn't</p>",
        "id": 409692345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas/near/409692330\">said</a>:</p>\n<blockquote>\n<p>warnings don't break the build</p>\n</blockquote>\n<p>Sorry, what??</p>",
        "id": 409692346,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703315469
    },
    {
        "content": "<p>they make CI fail but it should still produce oleans and such</p>",
        "id": 409692352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315484
    },
    {
        "content": "<p>All I'm complaining here is that <code>@[deprecated]</code> doesn't naturally let me split steps 1 and 2 into two PRs.</p>",
        "id": 409692375,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703315517
    },
    {
        "content": "<p>Sure it does, step 1 can not deprecate the old declaration and just have both</p>",
        "id": 409692428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315542
    },
    {
        "content": "<p>I'm not a super big fan of this, but if the PR deprecating them comes around quickly I guess it's alright.</p>",
        "id": 409692484,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703315620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas/near/409692230\">said</a>:</p>\n<blockquote>\n<ol start=\"6\">\n<li>a week later: remove all the <code>@[old_name]</code> attributes.</li>\n</ol>\n</blockquote>\n<p>I would <em>really</em> like us to start thinking on a time scale more like 3 months for this kind of thing</p>",
        "id": 409692490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315637
    },
    {
        "content": "<p>also fine with me</p>",
        "id": 409692537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703315654
    },
    {
        "content": "<p>this is the kind of thing that gives mathlib a bad name</p>",
        "id": 409692540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315658
    },
    {
        "content": "<p><code>week</code> was a meta-syntactic variable in that step (-;</p>",
        "id": 409692550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703315673
    },
    {
        "content": "<p>FWIW, I'm happy with having a long list of <code>@[deprecated] alias</code> for a long time.</p>",
        "id": 409692577,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703315711
    },
    {
        "content": "<p>The thing is, deprecation and migration are aspects of library design too, and they actually take work to achieve</p>",
        "id": 409692588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315724
    },
    {
        "content": "<p>The amount of work I spent in my PR description is probably no less than what it would have taken me to deprecate. Migration I don't know.</p>",
        "id": 409692670,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703315792
    },
    {
        "content": "<p>Right now our best tools for migration are tied up in deprecations</p>",
        "id": 409692685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315822
    },
    {
        "content": "<p>Maybe we want a <code>@[soft_deprecated]</code> which is a info message instead of a warning, this should fix the issue with breaking CI since noisy files also cause CI to fail but lake will run to completion</p>",
        "id": 409692767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas/near/409692540\">said</a>:</p>\n<blockquote>\n<p>this is the kind of thing that gives mathlib a bad name</p>\n</blockquote>\n<p>blasphemy! ... <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 409692786,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703315941
    },
    {
        "content": "<p>Yes, that would be an improvement as I could then fix all of mathlib in one go instead of many</p>",
        "id": 409692788,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703315942
    },
    {
        "content": "<p>seems like a hack around our current tools though, I wouldn't want to actually have users dealing with that</p>",
        "id": 409692819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315985
    },
    {
        "content": "<p>deprecations are morally warnings</p>",
        "id": 409692826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703315995
    },
    {
        "content": "<p>No but I mean I could <code>@[soft_deprecated]</code> all the lemmas I want, build mathlib, remove all downstream uses, replace all the <code>@[soft_deprecated]</code> with <code>@[deprecated]</code>.</p>",
        "id": 409692947,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703316103
    },
    {
        "content": "<p>right, I was imagining exactly that workflow</p>",
        "id": 409692956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316119
    },
    {
        "content": "<p>unfortunately it doesn't help consumers that are also big projects</p>",
        "id": 409693014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316148
    },
    {
        "content": "<p>Does mathlib have some sort of stable release schedule?  From what it seems most of the tagged releases are from toolchain updates.</p>",
        "id": 409693020,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703316153
    },
    {
        "content": "<p>It has a version compatible with each lean stable release, but it doesn't have stable releases in the \"stable\" sense</p>",
        "id": 409693040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas/near/409693014\">said</a>:</p>\n<blockquote>\n<p>unfortunately it doesn't help consumers that are also big projects</p>\n</blockquote>\n<p>Then maybe the solution is to have a lake flag for warning/info on deprecation?</p>",
        "id": 409693047,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703316193
    },
    {
        "content": "<p>I think lake should just not stop on warnings-as-errors</p>",
        "id": 409693063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316209
    },
    {
        "content": "<p>That's a fair position. I always found that a bit surprising.</p>",
        "id": 409693095,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703316236
    },
    {
        "content": "<p>it's a very low effort implementation</p>",
        "id": 409693143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316249
    },
    {
        "content": "<p>It would also be interesting to have an extra date argument to <code>@[deprecated]</code> so that a bot can watch for them and send a reminder <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> months later \"Those lemmas have been deprecated for a long time. Should we delete them?\" (and also for general information of the source code readers).</p>",
        "id": 409693176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703316291
    },
    {
        "content": "<p>it literally just turns all warning messages into error messages, with all the downstream effects of an error message on the server and lake</p>",
        "id": 409693180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316296
    },
    {
        "content": "<p>yes the whole thing could be redesigned, someone needs to look into how other languages do it</p>",
        "id": 409693212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316339
    },
    {
        "content": "<p>Without that bot checking for long-deprecated lemmas, I would be a bit wary of using <code>@[deprecated]</code>.</p>",
        "id": 409693216,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703316344
    },
    {
        "content": "<p><code>since := NNN</code> is part of most deprecation mechanisms I know</p>",
        "id": 409693252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316364
    },
    {
        "content": "<p>or <code>will_be_removed_in := NNN</code></p>",
        "id": 409693272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316375
    },
    {
        "content": "<p>Also, do <code>deprecated</code> lemmas show up in search tools like <code>rw?</code>, <code>apply?</code>, <code>exact?</code> and the docs?</p>",
        "id": 409693291,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703316399
    },
    {
        "content": "<p>I think so</p>",
        "id": 409693299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316407
    },
    {
        "content": "<p>every such tool has to implement this kind of logic independently so it's very haphazard what is checked</p>",
        "id": 409693332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316452
    },
    {
        "content": "<p>Okay, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=and_assoc%27#doc\">docs#and_assoc'</a> does show up the docs with a <code>@[deprecated and_assoc]</code> tag, but it's not as flashing yellow as I would have wanted it to.</p>",
        "id": 409693335,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703316458
    },
    {
        "content": "<p>there are half a dozen <code>isInternal</code> or <code>isBlacklisted</code> functions in lean+mathlib</p>",
        "id": 409693344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316471
    },
    {
        "content": "<p>that also relates to the fact that there is no generic way to show attributes on a definition like lean 3 <code>#print</code></p>",
        "id": 409693408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316509
    },
    {
        "content": "<p>so every such metaprogram has to go and query every attribute it cares about, and since this is extensible in both programs and attributes you can see why this is difficult to arrange</p>",
        "id": 409693433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316548
    },
    {
        "content": "<p>I should also say I have many other breaking refactors underway and I am willing for them to be the testing ground of any deprecation/migration method we come up with.</p>",
        "id": 409693434,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703316548
    },
    {
        "content": "<p>I think we need a holistic proposal for how deprecation is supposed to work, what the attribute looks like, the code action, auto fix etc</p>",
        "id": 409693535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703316622
    },
    {
        "content": "<p>Mario/Johan, would you welcome a PR that turns the PR description of <a href=\"https://github.com/leanprover-community/mathlib4/pull/9095\">#9095</a> into a long list of <code>@[deprecated] alias</code> in the relevant files?</p>",
        "id": 409694114,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703317222
    },
    {
        "content": "<p>(for the lemmas whose old name hasn't been taken by a new lemma)</p>",
        "id": 409694140,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703317258
    },
    {
        "content": "<p>I don't want to push you to do that work now. But if you do it, I'm happy to merge that PR</p>",
        "id": 409694350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703317480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas/near/409694140\">said</a>:</p>\n<blockquote>\n<p>(for the lemmas whose old name hasn't been taken by a new lemma)</p>\n</blockquote>\n<p>This is also something that the holistic deprecation proposal should address.</p>",
        "id": 409694365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703317505
    },
    {
        "content": "<p>It should be pretty easy. Let's try.</p>",
        "id": 409694370,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703317512
    },
    {
        "content": "<p>I've just deprecated my first ever lemmas in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9219\">#9219</a>.</p>",
        "id": 409694393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703317551
    },
    {
        "content": "<p>For documentation purposes, it would be nice for the <code>deprecated</code> attribute to be able to store a blurb on why something was deprecated, even if it’s just a link to a PR or issue. (Ideally it would be a little bit more.) :)</p>",
        "id": 409694600,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703317735
    },
    {
        "content": "<p>The value of <code>deprecated since</code> should ideally be updated just before the PR is merged by bors...</p>",
        "id": 409694664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703317786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> you can already give a string argument, if you want to</p>",
        "id": 409694728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703317820
    },
    {
        "content": "<p>Ah, I’ve just never seen that string argument used, so I assumed it didn’t exist <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 409694770,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703317864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas/near/409694664\">said</a>:</p>\n<blockquote>\n<p>The value of <code>deprecated since</code> should ideally be updated just before the PR is merged by bors...</p>\n</blockquote>\n<p>Yes, although I think it's fine if the date is off by a few days. It's not like huge refactor PRs sit around for a long time anyway.</p>",
        "id": 409694986,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703318049
    },
    {
        "content": "<p>What would the value of <code>since</code> be, in general? A date, a PR number, a commit…? (All three?)</p>",
        "id": 409695388,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703318417
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9235\">#9235</a></p>",
        "id": 409695522,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703318501
    },
    {
        "content": "<p>PR number sounds like the most reliable</p>",
        "id": 409695647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703318555
    },
    {
        "content": "<p>I think we could still make a script to find old deprecations with only PR numbers to go by</p>",
        "id": 409695697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703318614
    },
    {
        "content": "<p>And then we say something like \"The deprecation period is 3000 PRs long\"?</p>",
        "id": 409695698,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703318615
    },
    {
        "content": "<p>If we stored time as well, and if each mathlib commit somehow knew the time at which the commit itself was committed, we wouldn’t need soft_deprecated: we could calculate the amount of time from the deprecation to the current commit you were on, and decide to either log info or warn based on the result. </p>\n<p>E.g. log “this declaration will be deprecated in the version of &lt;project&gt; released &lt;x&gt; days after the current version” where x = deprecationTime + gracePeriodDuration – projectCommitTime (where here mathlib is the project). If x ≤ 0, you get a warning instead.</p>\n<p>(Maybe there are reasons not to want this behavior, but just putting it out there as an idea.)</p>",
        "id": 409696993,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1703319778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Can you tell me whether there is now a way to do batch renames? Can we give Lean or VScode or the LSP a dictionary of names mapping to new names , and it will just update all of mathlib to use those new names?</p>",
        "id": 409698279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703320885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas/near/409692767\">said</a>:</p>\n<blockquote>\n<p>Maybe we want a <code>@[soft_deprecated]</code> which is a info message instead of a warning</p>\n</blockquote>\n<p>Python has <code>PendingDeprecationWarning</code> for this</p>",
        "id": 409700707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703322582
    },
    {
        "content": "<p>I guess the way to deprecate lemmas that have a name that is then used elsewhere is to have a special deprecation attribute that only comes up if there's an error applying the lemma (e.g. if there's a type error applying the lemma/a rw doesn't work/etc, it can say 'you may be wanting lemma X, which was recently renamed from this')</p>",
        "id": 409701051,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703322905
    },
    {
        "content": "<p>To me, mathlib feels like the standard library of other languages (and less like functionality-specific libraries that developers build around the core language). Generally speaking, standard libraries rarely if ever undergo breaking API changes outside of major version bumps. This includes both renaming things as well as changing API type signatures in a breaking way. The counterargument to this, of course, is that the mathlib library is significantly more complex than the stdlib of any major language, and it's also early days, so it's natural that there <em>should</em> be more breaking changes otherwise the long-term potential of the library is diminished. I don't think anybody would argue this point. </p>\n<p>I would suggest the following principles:</p>\n<ol>\n<li>If a function or definition exists in a given <code>mathlib</code> master commit <em>without</em> the deprecated tag, it is guaranteed to be preserved (with the exact module/name/type signature) for at least 6 months. However, it may later be tagged as deprecated.</li>\n<li>If a function is deprecated, that means that it cannot be used elsewhere in mathlib, which ensures that it doesn't propagate to the core codebase in ways that other people would pattern match on. So it is the responsibility of someone deprecating functions to replace them in the rest of mathlib.</li>\n<li>Over time, as the library matures and design patterns are solidified, I think it's reasonable to increase the 6 month window to something on the order of several years (but likely not beyond).</li>\n</ol>\n<p>Following these principles would provide a much more stable platform to build on, and I think they, in spirit, capture the key points of the discussion above.</p>\n<p>There was a suggestion in the thread about deprecating more quickly and providing migration tools to keep up -- just note that these can be serious papercuts to impose on a user community (e.g. even python's <code>2to3</code> was pretty annoying to use, speaking from personal experience). I think for folks working on mathlib who are very familiar with these things they don't seem like a big deal, but as the popularity of mathlib keeps growing, there will be lots of users for whom it will be a turnoff to have to regularly run housekeeping scripts on their repos.</p>",
        "id": 409734427,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703351476
    },
    {
        "content": "<p>As a test case, in this specific instance, would it be acceptable to open a PR to reintroduce those functions with whatever deprecated tag is most appropriate? I'd be happy to handle that.</p>",
        "id": 409734612,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703351696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117969\">@Tudor achim</span> thanks for your thoughts. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> also offered to add back the functions, together with deprecated tags. I'll be happy to merge that PR.</p>",
        "id": 409737639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1703354696
    },
    {
        "content": "<p>I don't think deprecation even makes sense for most of mathlib. Many parts of the library are leaves that are under active development, and each lemma can change many times in a few months. In contrast, the lemmas that I renamed here are part of the algebraic order hierarchy, which is very central.</p>",
        "id": 409739541,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703356386
    },
    {
        "content": "<p>I opened a new topic for the discussion about backward compatibility of mathlib: <a href=\"#narrow/stream/287929-mathlib4/topic/Backward.20compatibility\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Backward.20compatibility</a></p>",
        "id": 409743155,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703359784
    },
    {
        "content": "<p>(also, <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, when will loogle be updated? It doesn't have the new lemma names yet)</p>",
        "id": 409743407,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703359998
    },
    {
        "content": "<p>I recall that I have an ancient mathlib3 PR that uses <code>ₚ</code> suffixes for some lemmas with positivity assumptions. I felt this looks better than suffixes like <code>'</code> and <code>_of_pos_of_nonneg</code>.</p>",
        "id": 409745422,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1703361871
    },
    {
        "content": "<p>Sadly, many search tools don't support unicode, so I think it would in practice be a downgrade.</p>",
        "id": 409745519,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703361959
    },
    {
        "content": "<p>I disagree and think it would be a strong upgrade. ' is unsearchable anyways, and searching for _of_blah sucks</p>",
        "id": 409746028,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703362449
    },
    {
        "content": "<p>The other thing is that <code>_of_pos</code> and <code>_of_nonneg</code> are sometimes good ways to disambiguate similar lemmas.</p>",
        "id": 409746210,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703362639
    },
    {
        "content": "<p>E.g., I think that we should have many versions of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_lt_mul#doc\">docs#mul_lt_mul</a></p>",
        "id": 409746239,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703362669
    },
    {
        "content": "<p>And <code>of_le_of_lt</code>/<code>of_lt_of_le</code>/..., possibly with extra <code>of_pos</code>/<code>of_nonneg</code> seem like a good way to disambiguate.</p>",
        "id": 409746311,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703362721
    },
    {
        "content": "<p>I came up with this idea inspired by the suffix <code>₀</code> (also a unicode).</p>",
        "id": 409746475,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1703362864
    },
    {
        "content": "<p>Another motivation is that lemmas like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_lt_mul_of_nonneg_of_pos#doc\">docs#mul_lt_mul_of_nonneg_of_pos</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_lt_mul_of_le_of_lt%27#doc\">docs#mul_lt_mul_of_le_of_lt'</a> have inconsistent names. Using the suffix <code>p</code> allows them to have consistent names with no more than one <code>'</code>, and can clearly distinguish <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_lt_mul_of_le_of_lt#doc\">docs#mul_lt_mul_of_le_of_lt</a> which does not require positivity assumptions.</p>",
        "id": 409747403,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1703363741
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/782\">#782</a> is the old synchronizing PR, I'll make a new one.</p>",
        "id": 409747688,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1703364043
    },
    {
        "content": "<p>Please don't! I am halfway through a PR touching those lemmas.</p>",
        "id": 409748666,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703365052
    },
    {
        "content": "<p>Yael, if you are doing this already, can we at least add aliases with names of that form? I think it's very valuable, and aliases are _cheap_</p>",
        "id": 409748754,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703365144
    },
    {
        "content": "<p><del>I think I kept the original name as an alias in my previous PR.</del> No, but most of them.</p>",
        "id": 409749408,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1703365586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas/near/409743407\">said</a>:</p>\n<blockquote>\n<p>(also, <span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span>, when will loogle be updated? It doesn't have the new lemma names yet)</p>\n</blockquote>\n<p>Manually, once in a while. Thanks for the ping :-)</p>\n<p>I should automate it if course eventually.</p>",
        "id": 409749524,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703365726
    },
    {
        "content": "<p>It looks like some inconsistent names and wrong names like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_lt_mul_of_le_of_le%27#doc\">docs#mul_lt_mul_of_le_of_le'</a> are not kept. In any case I can wait for the other changes to be done first. I'm in no hurry to change it. I already have several PRs that have been there for more than 6 months.</p>",
        "id": 409750066,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1703366310
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9249\">#9249</a> In fact, nothing in mathlib has been broken.</p>\n<p>upd: Wait, I may have misunderstood. But I can wait for other PRs anyway.</p>",
        "id": 409757819,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1703373663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , just to confirm, are you currently making a PR to mathlib to reintroduce those lemmas as aliases that are marked deprecated? If you guys want to defer this decision until later that's also totally cool, just trying to plan out some things internally.</p>",
        "id": 409762652,
        "sender_full_name": "Tudor achim",
        "timestamp": 1703377375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas/near/409695522\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9235\">#9235</a></p>\n</blockquote>\n<p>Yes, see <span aria-label=\"wait one second\" class=\"emoji emoji-261d\" role=\"img\" title=\"wait one second\">:wait_one_second:</span></p>",
        "id": 409790803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703400197
    }
]