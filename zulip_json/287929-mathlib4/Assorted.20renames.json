[
    {
        "content": "<p>I've collected the following list of names that I believe should be changed.</p>\n<ol>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=chartedSpace#doc\">docs#chartedSpace</a>: It's the charted space instance for spheres. I suggest <code>chartedSpaceSphere</code>, mirroring <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=chartedSpaceSelf#doc\">docs#chartedSpaceSelf</a>.</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=smoothMfldWithCorners#doc\">docs#smoothMfldWithCorners</a>: It's the <code>SmoothManifoldWithCorners</code> instance for spheres. I suggest <code>smoothManifoldCornersSphere</code></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=funLike#doc\">docs#funLike</a>: It's only for <code>MulChar</code>, so either something like <code>funLikeMulChar</code> or let Lean generate an automatic instance name.</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartialEquiv.trans_self_symm#doc\">docs#PartialEquiv.trans_self_symm</a>: I suggest <code>PartialEquiv.self_trans_symm</code> to mirror <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.self_trans_symm#doc\">docs#Equiv.self_trans_symm</a>. Similarly, rename <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartialEquiv.trans_symm_self#doc\">docs#PartialEquiv.trans_symm_self</a> to <code>PartialEquiv.symm_trans_self</code>.</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartialHomeomorph.trans_self_symm#doc\">docs#PartialHomeomorph.trans_self_symm</a>: I suggest <code>PartialHomeomorph.self_trans_symm</code> to mirror <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Homeomorph.self_trans_symm#doc\">docs#Homeomorph.self_trans_symm</a>. Similarly, rename <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartialHomeomorph.trans_symm_self#doc\">docs#PartialHomeomorph.trans_symm_self</a> to <code>PartialHomeomorph.symm_trans_self</code>.</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Homeomorph.transPartialHomeomorph_symm_apply#doc\">docs#Homeomorph.transPartialHomeomorph_symm_apply</a>: I suggest <code>Homeomorph.transPartialHomeomorph_symm_coe</code> because there's no function application going on, just coecion. Similarly rename <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Homeomorph.transPartialHomeomorph_apply#doc\">docs#Homeomorph.transPartialHomeomorph_apply</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartialHomeomorph.transHomeomorph_symm_apply#doc\">docs#PartialHomeomorph.transHomeomorph_symm_apply</a>, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartialHomeomorph.transHomeomorph_apply#doc\">docs#PartialHomeomorph.transHomeomorph_apply</a>.</li>\n</ol>\n<p>Items 1-3 are currently confusing when searching in the docs, as the names are too general. Comments and opinions welcome. If people find these agreeable, I'll open a PR.</p>\n<p>Another question is, how come dot notation works for <code>Equiv.symm</code> when rendered (e.g. <code>e.symm.trans e'</code>) but not for <code>Homeomorph</code> or <code>PartialHomeomorph</code>?</p>",
        "id": 411096017,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704323371
    },
    {
        "content": "<p>Items 1-3: nice finds! Yes definitely open a PR.</p>",
        "id": 411100530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704326562
    },
    {
        "content": "<p>About the last question, I'm not 100% sure I understand the question, but if I understand then it is a missing <code>pp_dot</code> attribute.</p>",
        "id": 411101292,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704326910
    },
    {
        "content": "<p>3: <code>MulChar.instFunLike</code></p>",
        "id": 411135950,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704350220
    },
    {
        "content": "<p>Similarly, I think <code>Sphere.instChartedSpace</code>, etc...</p>",
        "id": 411137466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704351362
    },
    {
        "content": "<p>Looks like item 6 is autogenerated by <code>@[simps! (config := .asFn)]</code>, so I'm not going to touch it.</p>",
        "id": 411155652,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704361050
    },
    {
        "content": "<p>Items 1-3 in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9429\">#9429</a></p>\n<p>Items 4-5 + <code>@[pp_dot]</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9430\">#9430</a></p>",
        "id": 411156169,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704361319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Assorted.20renames/near/411137466\">said</a>:</p>\n<blockquote>\n<p>Similarly, I think <code>Sphere.instChartedSpace</code>, etc...</p>\n</blockquote>\n<p>I've named it <code>Metric.sphere.instChartedSpace</code>, and so on.</p>",
        "id": 411156337,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704361399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Assorted.20renames/near/411101292\">said</a>:</p>\n<blockquote>\n<p>About the last question, I'm not 100% sure I understand the question, but if I understand then it is a missing <code>pp_dot</code> attribute.</p>\n</blockquote>\n<p>I think I tried this, but it means that for <code>e : MulEquiv A B</code>, <code>e.toEquiv.symm</code> prints the same way as <code>e.symm</code>, which is bad.</p>",
        "id": 411162427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704363586
    },
    {
        "content": "<p>(old structures for morphisms, which is on my to-do list, would fix this)</p>",
        "id": 411162529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704363624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I tested it, and this is the current behaviour of <code>Equiv</code> and <code>MulEquiv</code>, because <code>Equiv</code> has <code>pp_dot</code>. Should I hold off on marking <code>Homeomorph</code>, etc. with <code>pp_dot</code> until old structures for morphisms land?</p>",
        "id": 411249637,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704397039
    },
    {
        "content": "<p>By clicking <code>symm</code> in <code>e.symm</code>, I can see which structure's <code>symm</code> it is. This is probably not ideal.</p>",
        "id": 411251315,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704397678
    },
    {
        "content": "<p>Thanks for checking, I wasn't 100% certain myself.</p>",
        "id": 411275968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704409718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin (尹維晨)</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Assorted.20renames/near/411249637\">said</a>:</p>\n<blockquote>\n<p>Should I hold off on marking <code>Homeomorph</code>, etc. with <code>pp_dot</code></p>\n</blockquote>\n<p>I think that's probably best</p>\n<blockquote>\n<p>until old structures for morphisms land?</p>\n</blockquote>\n<p>I think this is a long way off since:</p>\n<ul>\n<li>It is a rather tiresome refactor (<a href=\"https://github.com/leanprover-community/mathlib4/pull/6791\">#6791</a> is an early attempt, but it would be better to build upon <a href=\"https://github.com/leanprover-community/mathlib4/pull/8977\">#8977</a>)</li>\n<li>If the refactor is a success, then it requires <a href=\"https://github.com/leanprover/lean4/pull/2940\">lean4#2940</a> to be merged and released, which requires buy in from the FRO, in particular Leo who is apparently opposed to old structures.</li>\n<li>I seem to be the person most motivated to try it, but I have no time to do so in the next month</li>\n</ul>",
        "id": 411276346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704409924
    },
    {
        "content": "<p>I would go on with <code>pp_dot</code> in the meantime.</p>",
        "id": 411277814,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704410804
    },
    {
        "content": "<p>I'm not convinced that having confusing goal states is better than having verbose goal states</p>",
        "id": 411277877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704410846
    },
    {
        "content": "<p>A middle ground would be to write a custom delaborator that doesn't repeat the mistake that <code>pp_dot</code> makes of dropping the <code>toEquiv</code></p>",
        "id": 411277913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704410873
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> has some ideas on improving the delaborator here</p>",
        "id": 411277991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704410915
    },
    {
        "content": "<p>I don't want to see that <code>toEquiv</code> by default. For me this is a feature, not a bug.</p>",
        "id": 411279420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704411826
    },
    {
        "content": "<p>I’m torn because verbose goal states that don’t correspond to usual mathematical notation do lead to a non-insignificant slowdown in proof writing, but on the other hand, getting stuck on an incorrect rewrite lemma due to dot notation ambiguity can be truly frustrating.</p>",
        "id": 411280101,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704412290
    },
    {
        "content": "<p>For now in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9430\">#9430</a> I’ve reverted the new <code>pp_dot</code> attributes. But I would like to have dot notation working for things like <code>symm</code> and <code>trans</code> ideally much before Eric’s refactor lands.</p>",
        "id": 411280377,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704412484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Assorted.20renames/near/411279420\">said</a>:</p>\n<blockquote>\n<p>I don't want to see that <code>toEquiv</code> by default. For me this is a feature, not a bug.</p>\n</blockquote>\n<p>I claim that it is not that you don't want to <em>see</em> it; but  that you don't want it to be there at all.<br>\nAs I understand it, the behavior matrix is:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>no <code>pp_dot</code></th>\n<th><code>pp_dot</code></th>\n<th>what we had in lean 3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Simp-normal form</td>\n<td><code>Homeomorph.symm e x</code></td>\n<td><code>e.symm x</code></td>\n<td><code>e.symm x</code></td>\n</tr>\n<tr>\n<td>Non-simp-normal form</td>\n<td><code>Equiv.symm e.toEquiv x</code></td>\n<td><code>e.symm x</code></td>\n<td><code>e.toEquiv.symm x</code></td>\n</tr>\n</tbody>\n</table>\n<p>and we have to pick a column</p>",
        "id": 411283640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704413944
    },
    {
        "content": "<p>It seems that the type of <code>x</code> will clue which <code>.symm</code> is being used here. If still unclear, clicking on <code>.symm</code> will reveal this info. Is this enough of a disambiguation? The second column looks far better for working with a load of nested/composed equivs.</p>",
        "id": 411466597,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704508302
    },
    {
        "content": "<p>Currently, I have to copy the goal state, paste it somewhere, manually turn it into the style of column 2, reason about it, and then continue with my proof.</p>",
        "id": 411466729,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1704508376
    },
    {
        "content": "<p>I edited with a third column, which is the behavior we actually want</p>",
        "id": 411467016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704508572
    }
]