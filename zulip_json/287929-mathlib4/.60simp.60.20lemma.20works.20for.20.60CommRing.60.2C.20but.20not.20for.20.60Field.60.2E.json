[
    {
        "content": "<p>If someone could explain what's going on here, that would be great, because I'm at a loss. (A fix would be even better! <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">unitaryGroup</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">rank</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">rank</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"c1\">-- simp only [UnitaryGroup.det_isUnit, rank_mul_eq_left_of_isUnit_det]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">unitaryGroup</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">rank</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">rank</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"c1\">-- fails with no progress</span>\n</code></pre></div>",
        "id": 436895345,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714746522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 436895518,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714746585
    },
    {
        "content": "<p>With <code>set_option trace.Meta.Tactic.simp true</code>, I can see that in both cases, <code>simp</code> correctly tries <code>rank_mul_eq_left_of_isUnit_det</code>, but in the second case it fails to discharge the hypothesis with <code>UnitaryGroup.det_isUnit</code> because it doesn't even seem to try to unify with this.</p>",
        "id": 436896859,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714747057
    },
    {
        "content": "<p>nevermind, I figured it out.</p>",
        "id": 436898099,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714747277
    },
    {
        "content": "<p>In the case when <code>R</code> is a field, the trace in the second showed that it rewrote the discharging goal of <code>IsUnit (↑A)</code> to <code>det (↑A) ≠ 0</code> with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isUnit_iff_ne_zero#doc\">docs#isUnit_iff_ne_zero</a>, which made it no longer try to discharge the goal with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.UnitaryGroup.det_isUnit#doc\">docs#Matrix.UnitaryGroup.det_isUnit</a> because the discharging goal no longer matched.</p>",
        "id": 436898778,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714747428
    },
    {
        "content": "<p>so for clarity, <code>simp [-isUnit_iff_ne_zero]</code> works.</p>",
        "id": 436899986,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714747789
    },
    {
        "content": "<p>I guess for confluence, you could add <code>det (↑A) ≠ 0</code> as a simp lemma</p>",
        "id": 436900120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714747818
    },
    {
        "content": "<p>Eric, I guess this is some non-confluence in our <code>simp</code> set here. We should ultimately decide what to do, and if <a href=\"https://github.com/leanprover-community/mathlib4/pull/12244\">#12244</a> was the wrong idea.</p>",
        "id": 436900152,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714747829
    },
    {
        "content": "<p>Does making <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.isUnit_iff_ne_zero#doc\">docs#Matrix.isUnit_iff_ne_zero</a> lower priority than <code>Unit.isUnit</code> make sense?</p>",
        "id": 436900222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714747858
    },
    {
        "content": "<p>I don't think that's the problem.</p>",
        "id": 436900257,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714747874
    },
    {
        "content": "<p>the lemma we want it to apply is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.UnitaryGroup.det_isUnit#doc\">docs#Matrix.UnitaryGroup.det_isUnit</a></p>",
        "id": 436900507,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714747955
    },
    {
        "content": "<p>These links don't work for me</p>",
        "id": 436900610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714747986
    },
    {
        "content": "<p>Sorry: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isUnit_iff_ne_zero#doc\">docs#isUnit_iff_ne_zero</a></p>",
        "id": 436900712,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714748033
    },
    {
        "content": "<p>(I somehow really screwed up the naming in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12244\">#12244</a>, sorry)</p>",
        "id": 436900877,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714748076
    },
    {
        "content": "<p>If we want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isUnit_iff_ne_zero#doc\">docs#isUnit_iff_ne_zero</a> to be a <code>simp</code> lemma, shouldn't any <code>GroupWithZero</code> instance take <code>_ ≠ 0</code> instead of <code>isUnit _</code> as a hypothesis?</p>",
        "id": 436904234,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1714749005
    },
    {
        "content": "<p>I guess you mean, in any lemma (but especially <code>simp</code> lemmas) which has as a hypothesis <code>GroupWithZero</code> any hypothesis of the form <code>isUnit _</code> should be replaced with <code>_ ≠ 0</code>. Correct?</p>",
        "id": 436904803,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714749182
    },
    {
        "content": "<p>Yea, sorry. In this case <code>A.det</code> is only conditionally a <code>GroupWithZero</code>. I wonder if it could be possible to specialize <code>rank_mul_eq_left_of_isUnit_det</code> for when <code>R</code> is a field and add it to the <code>simp</code> set.</p>",
        "id": 436916048,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1714752831
    }
]