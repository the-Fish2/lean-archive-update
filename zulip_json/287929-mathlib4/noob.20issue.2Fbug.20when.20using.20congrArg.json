[
    {
        "content": "<p>So this simple example does what I would expect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But when I use congrArg, I get a weird type error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h3</span> <span class=\"c1\">-- ← error here</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The error is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Eq.mp</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">HDiv.hDiv</span> <span class=\"o\">(</span><span class=\"n\">neg_mul</span> <span class=\"n\">a</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">HDiv.hDiv</span> <span class=\"o\">(</span><span class=\"n\">neg_mul</span> <span class=\"n\">a</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">/</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 412272720,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1704950522
    },
    {
        "content": "<p>Zulip hints: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> and <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<p>This seems to be a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h3</span> <span class=\"c1\">-- ← error here</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 412272999,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704950700
    },
    {
        "content": "<p>There seems to be a bug in <code>apply ... at ...</code> itself, where it's forgetting to synthesize synthetic metavariables. Here's a workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h3</span> <span class=\"c1\">-- ← no more error</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 412273066,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704950759
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/noob.20issue.2Fbug.20when.20using.20congrArg\">#lean4 &gt; noob issue/bug when using congrArg</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 412273139,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704950799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <code>apply ... at ...</code> appears to be missing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.synthesizeSyntheticMVars#doc\">docs#Lean.Elab.Term.synthesizeSyntheticMVars</a> or something equivalent. Maybe wrap it in <code>withSynthesize</code>?</p>",
        "id": 412273216,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704950881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461776\">@Andre Popovitch</span> Here's another way to write this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">$</span><span class=\"n\">h3</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 412273330,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704950969
    },
    {
        "content": "<p>Here's another:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyFun</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 412273411,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704951010
    },
    {
        "content": "<p>(<code>(1 / ·)</code> is just syntactic sugar for <code>(fun x =&gt; x / 1)</code>)</p>",
        "id": 412273438,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704951038
    },
    {
        "content": "<p>No, you put <code>1</code> on different sides.</p>",
        "id": 412273472,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704951068
    },
    {
        "content": "<p>hehe, but I know what kyle meant</p>",
        "id": 412273518,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1704951108
    },
    {
        "content": "<p>thank you everyone!</p>",
        "id": 412273523,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1704951116
    },
    {
        "content": "<p>Right, I was working in a world where real number division is commutative <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 412273634,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704951207
    },
    {
        "content": "<p>ZMod 2 or ZMod 3 (or ZMod 1)</p>",
        "id": 412282633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704957374
    },
    {
        "content": "<p>Thanks Andre and Kyle for pointing out this bug! I'll try to fix it soon.</p>",
        "id": 412327986,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704974616
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9650\">#9650</a></p>",
        "id": 412336282,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704977496
    },
    {
        "content": "<p><code>withSyntehsize</code> does indeed fix this. I added the example above as an additional test for this tactic as well.</p>",
        "id": 412336399,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704977525
    },
    {
        "content": "<p>I started a draft of a page on metaprogramming gotchas: <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Metaprogramming-gotchas\">https://github.com/leanprover-community/mathlib4/wiki/Metaprogramming-gotchas</a></p>\n<p>It still needs examples and better explanations, but it's a start!</p>",
        "id": 412410724,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705002736
    }
]