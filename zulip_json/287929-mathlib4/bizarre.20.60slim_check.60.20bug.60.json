[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SlimCheck</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">slim_check</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">failed to compile definition, consider marking it as 'noncomputable' because it depends on 'Classical.propDecidable', and it does not have executable code</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>All of this is minimal as far as I can see; reducing the numbers seems to just give a normal error. I can see that probably using <code>slim_check</code> with <code>Classical</code> open is going to give weird results.</p>",
        "id": 418944179,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706660036
    },
    {
        "content": "<p>Without any debug work my guess is: TC synthesis gets changed by open classical which causes slim check to attempt to use noncomputable functionality for its fuzzing.</p>",
        "id": 418980184,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1706685299
    },
    {
        "content": "<p>Its not quite clear to me how go fix this? Maybe we can lower the priority of the propDecidable instance such that it doesn't pick up on it? Or maybe we could even equip tc synthesis with a flag to explicitly ignore all non computable things for applications like this.</p>",
        "id": 418980359,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1706685422
    },
    {
        "content": "<p>Or <code>slim_check</code> could complain if <code>Classical</code> is open (which is a bad move most of the time anyway).</p>",
        "id": 418980963,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1706685811
    },
    {
        "content": "<p>But that only mitigates the issue. In general if you have any noncomputable instance related to decidability around, this will break slim_check.</p>",
        "id": 418981188,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1706685954
    }
]