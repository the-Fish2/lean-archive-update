[
    {
        "content": "<p>Hello! <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8950187927/job/24585285669\">This CI job</a> on my <a href=\"https://github.com/leanprover-community/mathlib4/tree/idealsunion\">branch</a> just failed with the <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8950187927/job/24585285669#step:14:81\">message</a>:<br>\n<code>tail: error writing 'standard output': Broken pipe</code><br>\nDoes anyone know what went wrong / what I should do?</p>",
        "id": 437017980,
        "sender_full_name": "Sam van G",
        "timestamp": 1714825699
    },
    {
        "content": "<p>That's a new one for me. I triggered another attempt</p>",
        "id": 437019355,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714826930
    },
    {
        "content": "<p>Interesting, this time it worked! Thanks Ruben.</p>",
        "id": 437026193,
        "sender_full_name": "Sam van G",
        "timestamp": 1714833039
    },
    {
        "content": "<p>I'm seeing the message</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>tail: error writing 'standard output': Broken pipe\n</code></pre></div>\n<p>also from time to time in CI (and also when bors is trying to merge something) now.</p>",
        "id": 437139990,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714924058
    },
    {
        "content": "<p><del>I'm wondering if this has something to do with the fact that lake closes stdout now <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></del> never mind, I must have hallucinated that</p>",
        "id": 437140398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714924209
    },
    {
        "content": "<p>It seems like something that's either caused by some unprincipled pipe handling or by the operating system not being 100% reliable</p>",
        "id": 437145755,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714927659
    },
    {
        "content": "<p>Just happening again:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code> Downloaded: 4454 file(s) [attempted 4454/4454 = 100%] (100% success)\nDecompressing 4454 file(s)\nunpacked in 5118 ms\n[2/4455] Building Mathlib.Mathport.Rename\ntail: error writing 'standard output': Broken pipe\nError: Process completed with exit code 1.\n</code></pre></div>\n<p>while checking the cache in CI.</p>",
        "id": 437157037,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714937495
    },
    {
        "content": "<p>... and again after re-running the build job.</p>",
        "id": 437158382,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714938544
    },
    {
        "content": "<p>One slightly annoying thing is that I have to wait until the other parts of the job have finished (in particular, linting) before I can restart it.</p>",
        "id": 437158486,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714938609
    },
    {
        "content": "<p>This time, it's</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Downloaded: 4454 file(s) [attempted 4454/4454 = 100%] (100% success)\nDecompressing 4454 file(s)\nunpacked in 6167 ms\n[2/4455] Building Mathlib.Mathport.Rename\n/home/lean/actions-runner/_work/_temp/cf950ba2-6abb-4d03-bbf2-4d2ce2af80b8.sh: line 9: kill: (2272700) - No such process\ntail: error writing 'standard output': Broken pipe\n</code></pre></div>\n<p>but it was apparently not registered as a failure.</p>",
        "id": 437159283,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714939315
    },
    {
        "content": "<p>This comes from the \"check the cache\" step in one of <code>bors.yml</code>, <code>build.yml</code>, <code>build.yml.in</code>, <code>build_fork.yml</code>, which all have this test:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\">            </span><span class=\"c1\"># We pipe the output of `lake build` to a file,</span>\n<span class=\"w\">            </span><span class=\"c1\"># and if we find \" Building Mathlib\" in that file we kill `lake build`, and error.</span>\n<span class=\"w\">            </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>&gt;<span class=\"w\"> </span>tmp<span class=\"w\"> </span><span class=\"p\">&amp;</span><span class=\"w\"> </span>tail<span class=\"w\"> </span>--pid<span class=\"o\">=</span><span class=\"nv\">$!</span><span class=\"w\"> </span>-n<span class=\"w\"> </span>+1<span class=\"w\"> </span>-F<span class=\"w\"> </span>tmp<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"o\">(</span>!<span class=\"w\"> </span><span class=\"o\">(</span>grep<span class=\"w\"> </span>-m<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"s2\">\" Building Mathlib\"</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">kill</span><span class=\"w\"> </span><span class=\"nv\">$!</span><span class=\"w\"> </span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Finding, for example, \"Building Mathlib.Mathport.Rename\" in the output of <code>lake build</code> used to mean that the file needed to be rebuilt, indicating that the cache didn't work. That's no longer a valid assumption, so this test should be rewritten.<br>\nThe intention seems to be for <code>tail</code> to fail gracefully on detecting that <code>lake</code> was killed, but apparently that didn't work.</p>",
        "id": 437160791,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714940776
    },
    {
        "content": "<p>This was always quite racy. <code>grep</code> sends the kill signal to whichever process has the pid that <code>lake</code> was given when it started (hopefully either <code>lake</code> or nobody), then <code>grep</code> exits and <code>tail</code> falls over because it can no longer talk to <code>grep</code>. Later, <code>lake</code> handles the signal and dies  (which was supposed to be detected by <code>tail</code>).</p>",
        "id": 437161533,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714941542
    },
    {
        "content": "<p>Eek. Thanks for figuring that out</p>",
        "id": 437161656,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714941659
    },
    {
        "content": "<p>Originally written by <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/7099\">#7099</a>) (but that doesn't mean they have to fix it!)</p>",
        "id": 437161889,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714941925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, another instance of Hyrum's law in action here with Lake.</p>\n<p>Can you tell us how we should detect whether <code>lake build</code> wants to do any work, without doing any work?</p>",
        "id": 437188861,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714968263
    },
    {
        "content": "<p>Ah, this is just <code>lake build --no-build</code>, I think.</p>",
        "id": 437188931,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714968330
    },
    {
        "content": "<p>Hopefully <a href=\"https://github.com/leanprover-community/mathlib4/pull/12688\">#12688</a>.</p>",
        "id": 437189195,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714968577
    }
]