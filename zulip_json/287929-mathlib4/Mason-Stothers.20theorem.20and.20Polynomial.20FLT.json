[
    {
        "content": "<p>Hello. A couple months ago, with suggestion from <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> me and <span class=\"user-mention\" data-user-id=\"588998\">@Seewoo Lee</span> formalized Mason-Stothers theorem in Lean 3 <a href=\"https://github.com/seewoo5/lean-poly-abc\">here</a>.</p>\n<p>A consequence of this theorem is a version of FLT on polynomials: if K is a characteristic zero field, then for any polynomials a, b, c in K[X] and n &gt;= 3, the equation a^n + b^n = c^n implies that a, b, c are scalar multiples of a common polynomial.</p>\n<p>Now that I see the <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/FLT/Basic.html#FermatLastTheoremFor\">statement of FLT</a> in mathlib4, I am wondering if porting the Mason-Stothers theorem to mathlib4 is suitable. The proof of both Mason-Stothers and polynomial FLT are elementary, and a full Lean 3 formalization exists, so it shouldn't take that long if one decides to actually port it.</p>\n<p>So the questions are:</p>\n<ul>\n<li>Will it be good for mathlib4 to have this theorem? Have a look at the <a href=\"https://github.com/seewoo5/lean-poly-abc\">Lean 3 project readme</a> to get a feeling of what the theorem is.</li>\n<li>If so, how can we (<span class=\"user-mention\" data-user-id=\"242240\">@Jineon Baek</span> and <span class=\"user-mention\" data-user-id=\"588998\">@Seewoo Lee</span>) start? Should we start by using mathport to convert our Lean 3 project?</li>\n</ul>",
        "id": 409868742,
        "sender_full_name": "Jineon Baek",
        "timestamp": 1703475301
    },
    {
        "content": "<ul>\n<li>Yes, it will be good for Mathlib to have this theorem. I don't have to be an expert in this area to answer that question.</li>\n<li>I'm not an expert in this area, so I can't comment about your approach to formalizing this theorem (e.g., which proof to use etc).</li>\n<li>Yes, <code>mathport</code> should give you a good first approximation to Lean 4 forward-port.</li>\n</ul>",
        "id": 409879729,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703485586
    },
    {
        "content": "<p>Yep this is definitely a good candidate for inclusion in mathlib</p>",
        "id": 409883818,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703489145
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FermatLastTheoremWith#doc\">docs#FermatLastTheoremWith</a> sufficiently general for it to apply to your work? That would be a nice bonus! Or are there problems with units or something?</p>",
        "id": 409899845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703501074
    },
    {
        "content": "<p>Thanks for the input everyone.</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Unfortunately our polynomial FLT does not match with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FermatLastTheoremWith#doc\">FermatLastTheoremWith</a> as-is. <code>FermatLastTheoremWith</code> states that every nonzero a, b, c cannot satisfy the FLT equation, but for polynomial with arbitrary field K one may have nonzero scalar (unit) solutions a = b = 1 and c = 2^{1/n}. And also note that their common multiples are also solutions to FLT (the non-coprime solutions).</p>\n<p>The question is whether we should a suitable statement of FLT for general semiring that can accommodate this, or should we treat polynomial FLT as a separate theorem. </p>\n<ul>\n<li>A common statement that works is: if a, b, c satisfies <code>a^n+b^n=c^n</code> then a, b, c are common multiples of units. This loses the simplicity of the original FLT on N.</li>\n<li>Another way is to just factor out the equation <code>a^n+b^n=c^n</code> and draw different conclusions for different semirings</li>\n<li><a href=\"https://mathoverflow.net/questions/352699/fermats-last-theorem-for-integer-matrices\">Here</a> is a discussion on FLT for integer matrices.</li>\n</ul>",
        "id": 409908402,
        "sender_full_name": "Jineon Baek",
        "timestamp": 1703507974
    },
    {
        "content": "<p>Yes it's very strange isn't it -- \"Fermat's Last Theorem for K\" seems to say \"if n&gt;=3 then the only solutions to x^n+y^n=z^n in K are the obvious ones\" but it's perhaps not possible to formalise what \"obvious\" means.</p>",
        "id": 409910239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703509500
    },
    {
        "content": "<p>Is it enough to posit solutions with no divisibility relations?</p>",
        "id": 409912807,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703511929
    },
    {
        "content": "<p>I think you mean that none of a, b, c should divide any other, right? Or is it that it suffices to think of only solutions of that kind?</p>",
        "id": 409919678,
        "sender_full_name": "Jineon Baek",
        "timestamp": 1703517351
    },
    {
        "content": "<p>One of the motivations for <code>FermatLastTheoremWith</code> was polynomial FLT, so I'm very much in favour of changing the definition so that it fits it!</p>",
        "id": 409986233,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703575659
    },
    {
        "content": "<p>We (<span class=\"user-mention\" data-user-id=\"242240\">@Jineon Baek</span> and <span class=\"user-mention\" data-user-id=\"588998\">@Seewoo Lee</span>) will work on porting our Lean 3 project to Lean 4 for <code>mathlib</code> integration, hopefully in next month or two.</p>\n<p>Indeed, separately I think it is worth thinking about what is the right generalization of FLT for general ring. The following text gives a good overview of FLT generalized to number fields. See the counterexamples on Section 3.2, and Theorems 12 and 13. I wonder what characteristics of FLT does make it really work. <br>\n<a href=\"https://revistas.rcaap.pt/boletimspm/article/view/21033/15548\">https://revistas.rcaap.pt/boletimspm/article/view/21033/15548</a></p>\n<p>Here is an attempt: For any commutative ring A, units u v and w in A, and variables x, y, z in A, the solutions of equation u*x^n + v*y^n + w*z^n = 0 satisfy one of the followings: xyz=0, or there is a common divisor d of x, y, z such that x/d, y/d, z/d are units of A. <br>\nI'm not 100% satisfied with this, but this works for at least Z and k[X] where char k = 0.</p>",
        "id": 410050504,
        "sender_full_name": "Jineon Baek",
        "timestamp": 1703612195
    },
    {
        "content": "<p>We just finished porting our Lean 3 formalization of polynomial FLT to Lean 4:</p>\n<p><a href=\"https://github.com/seewoo5/lean-poly-abc\">https://github.com/seewoo5/lean-poly-abc</a></p>\n<p>Now we are ready to include this to mathlib4. The current code is not up to standards of mathlib4 as of now. Any pointers on how to start the process of shpping this to mathlib4?</p>",
        "id": 446693340,
        "sender_full_name": "Jineon Baek",
        "timestamp": 1719255966
    },
    {
        "content": "<p>Pick a small part and make a pull request</p>",
        "id": 446696765,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719256877
    },
    {
        "content": "<p>You should update the README which still says Lean 3!</p>",
        "id": 446753627,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719279216
    },
    {
        "content": "<p>Working file at a time is often good. So start with something like <a href=\"https://github.com/seewoo5/lean-poly-abc/blob/main/LeanPolyABC/Lib/RationalFunc.lean\">https://github.com/seewoo5/lean-poly-abc/blob/main/LeanPolyABC/Lib/RationalFunc.lean</a>, which has no other imports from your project, and start working out which Mathlib files those results should be distributed into. Even just processing that file should be at least one PR.</p>",
        "id": 446753769,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719279304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mason-Stothers.20theorem.20and.20Polynomial.20FLT/near/409910239\">said</a>:</p>\n<blockquote>\n<p>Yes it's very strange isn't it -- \"Fermat's Last Theorem for K\" seems to say \"if n&gt;=3 then the only solutions to x^n+y^n=z^n in K are the obvious ones\" but it's perhaps not possible to formalise what \"obvious\" means.</p>\n</blockquote>\n<p>We need to decide if we want to change the statement of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FermatLastTheoremWith#doc\">docs#FermatLastTheoremWith</a> to incorporate the polynomial FLT or not. I opt to say no (and thus make the polynomial FLT a separate theorem).</p>\n<p>For the usual (semi)rings R = N, Z, Q, the following statement suffices and is the current definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FermatLastTheoremWith#doc\">docs#FermatLastTheoremWith</a>.</p>\n<blockquote>\n<p>Statement 1: If <code>n &gt;= 3</code>, then any solution of <code>a^n+b^n=c^n</code> in ring <code>R</code> should satisfy <code>abc=0</code>.</p>\n</blockquote>\n<p>For the polynomial ring R=k[X], its FLT variant is not Statement 1. It should be this instead.</p>\n<blockquote>\n<p>Statement 2: If <code>n &gt;= 3</code>, then any solution of <code>a^n+b^n=c^n</code> in ring <code>R</code> is a common multiple <code>(a, b, c) = (u*d, v*d, w*d)</code> of units or zeroes <code>u, v, w</code> of <code>R</code>.</p>\n</blockquote>\n<p>Now Statement 1 works for R = N, Z, Q but not k[X]. Statement 2 works for R = N, Z, k[X] but not Q (which is stated in Mathlib). The second statement is also lengthier to state and more distant from the original FLT statement. This is why I opt to not change <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FermatLastTheoremWith#doc\">docs#FermatLastTheoremWith</a> and state the polynomial FLT separately.</p>",
        "id": 447866752,
        "sender_full_name": "Jineon Baek",
        "timestamp": 1719606556
    },
    {
        "content": "<p>In retrospective, we might instead take this approach.</p>\n<p>Instead of generalizing FLT to only ring <code>R</code>, we can generalize the statement to <code>R</code> and its subset <code>S</code> of 'trivial' elements, closed under multiplication.</p>\n<blockquote>\n<p>Statement 3: If <code>n &gt;= 3</code>, then any solution of <code>a^n+b^n=c^n</code> in ring <code>R</code> is a common multiple of triples in <code>S</code>.</p>\n</blockquote>\n<p>This captures the idea that the only solutions are 'obvious' ones, by making explicit of what 'obvious' means. Now this works for (N, {0, 1}), (Z, {-1, 0, 1}), (Q, {-1, 0, 1}) and (k[X], k) where they are the pairs (R, S). I'll leave the rest for discussion as this is more of an 'aesthetic' decision.</p>",
        "id": 447867857,
        "sender_full_name": "Jineon Baek",
        "timestamp": 1719606929
    },
    {
        "content": "<p>For Statement 1, do you mean <code>abc = 0</code> to cover cases like <code>a = 0</code>, <code>b = c</code> nonzero?</p>",
        "id": 447873481,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1719609012
    },
    {
        "content": "<p>Oh that's a shame. I wrote <code>FermatLastTheoremWith</code> with the explicit goal of including Mason-Stothers</p>",
        "id": 447875013,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719609697
    },
    {
        "content": "<p>Sorry, I missed your second message. Not a shame anymore :)</p>",
        "id": 447875213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719609766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"630477\">Scott Carnahan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mason-Stothers.20theorem.20and.20Polynomial.20FLT/near/447873481\">said</a>:</p>\n<blockquote>\n<p>For Statement 1, do you mean <code>abc = 0</code> to cover cases like <code>a = 0</code>, <code>b = c</code> nonzero?</p>\n</blockquote>\n<p>Thanks for the catch! It should be <code>abc=0</code> instead of <code>a=b=c=0</code>.</p>",
        "id": 447876102,
        "sender_full_name": "Jineon Baek",
        "timestamp": 1719610215
    },
    {
        "content": "<p>Made a PR suggesting a possible generalized statement.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/14270\">https://github.com/leanprover-community/mathlib4/pull/14270</a></p>",
        "id": 448020483,
        "sender_full_name": "Jineon Baek",
        "timestamp": 1719690369
    }
]