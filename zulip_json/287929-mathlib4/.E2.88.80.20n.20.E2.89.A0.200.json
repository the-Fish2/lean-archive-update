[
    {
        "content": "<p>Why does <code>∀ n ≠ 0, ...</code> expand to <code>∀ n, n ≠ 0 → ...</code> rather than <code>∀ {n}, n ≠ 0 → ...</code>, which would appear more natural, as <code>n</code> can be obtained from the <code>n ≠ 0</code> argument? (And similarly for variations of this syntax.)</p>",
        "id": 431160081,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712172349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.88.80.20n.20.E2.89.A0.200/near/431160081\">said</a>:</p>\n<blockquote>\n<p>Why does <code>∀ n ≠ 0, ...</code> expand to <code>∀ n, n ≠ 0 → ...</code> rather than <code>∀ {n}, n ≠ 0 → ...</code>, which would appear more natural, as <code>n</code> can be obtained from the <code>n ≠ 0</code> argument? (And similarly for variations of this syntax.)</p>\n</blockquote>\n<p>Wouldn’t that imply that we are looking at the 1 element set that contains n?</p>",
        "id": 431168449,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712175309
    },
    {
        "content": "<p>No, <code>{n}</code> here is the binder for an implicit variable. The point here is whether <code>n</code> is explicit or implicit.</p>",
        "id": 431168635,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712175376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.88.80.20n.20.E2.89.A0.200/near/431168635\">said</a>:</p>\n<blockquote>\n<p>No, <code>{n}</code> here is the binder for an implicit variable. The point here is whether <code>n</code> is explicit or implicit.</p>\n</blockquote>\n<p>Thanks, I misinterpreted what you said, I thought you were talking about printing!</p>",
        "id": 431169183,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712175600
    },
    {
        "content": "<p>\"That's how it's always been\" is one answer. If you want to try figuring it out from commit and PR messages, here's the Lean 3 function it comes from: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/parser.cpp#L1037-L1081\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/parser.cpp#L1037-L1081</a></p>\n<p>There have been suggestions to have it expand to <code>∀ {{n}}, n ≠ 0 → ...</code>. You don't want <code>∀ {n}, n ≠ 0 → ...</code> since the eagerness causes it to specialize to a particular <code>n</code> too soon.</p>",
        "id": 431352958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712247527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.88.80.20n.20.E2.89.A0.200/near/431352958\">said</a>:</p>\n<blockquote>\n<p>There have been suggestions to have it expand to <code>∀ {{n}}, n ≠ 0 → ...</code>. You don't want <code>∀ {n}, n ≠ 0 → ...</code> since the eagerness causes it to specialize to a particular <code>n</code> too soon.</p>\n</blockquote>\n<p>That's even better, of course!</p>",
        "id": 431371220,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712253046
    }
]