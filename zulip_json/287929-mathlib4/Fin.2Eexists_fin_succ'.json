[
    {
        "content": "<p>Any objections to the following addition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Fin.exists_fin_succ'</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i.castSucc</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin.lastCases</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩)</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">h.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">i.castSucc</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)⟩</span>\n</code></pre></div>\n<p>this is analogous to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.forall_fin_succ%27#doc\">docs#Fin.forall_fin_succ'</a>, which is like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.forall_fin_succ#doc\">docs#Fin.forall_fin_succ</a> but splitting the cases into the last element of the tuple and <code>Fin.init</code>, as opposed to the first element and <code>Fin.tail</code>.</p>",
        "id": 421020903,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1707741519
    },
    {
        "content": "<p>Is it different enough that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.eq_castSucc_or_eq_last#doc\">docs#Fin.eq_castSucc_or_eq_last</a> doesn't work?</p>",
        "id": 421023058,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707742241
    },
    {
        "content": "<p>Looks sensible to me, the other lemmas (and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.exists_fin_succ#doc\">docs#Fin.exists_fin_succ</a>) look like clear precedent for it</p>",
        "id": 421023066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707742244
    },
    {
        "content": "<p>Eric is right though, there is enough precedent to include this anyway.</p>",
        "id": 421023217,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1707742298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Fin.2Eexists_fin_succ'/near/421023058\">said</a>:</p>\n<blockquote>\n<p>Is it different enough that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.eq_castSucc_or_eq_last#doc\">docs#Fin.eq_castSucc_or_eq_last</a> doesn't work?</p>\n</blockquote>\n<p>I thought about this, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.eq_castSucc_or_eq_last#doc\">docs#Fin.eq_castSucc_or_eq_last</a> seems just to be a less general statement where <code>P := (· = i)</code>.</p>",
        "id": 421050484,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1707749216
    },
    {
        "content": "<p>Thanks for the input</p>",
        "id": 421050515,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1707749224
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10459\">#10459</a>, should be a simple review. Would one of you mind reviewing <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ?</p>",
        "id": 421096893,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1707761207
    }
]