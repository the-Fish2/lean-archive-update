[
    {
        "content": "<p>Is Mathlib cache ok now? I've just created a demo project and seeing <code>[4453/8908] Building Mathlib</code> even after a few retries.</p>\n<p>These are the steps I created the project and the output:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>%<span class=\"w\"> </span>lake<span class=\"w\"> </span>new<span class=\"w\"> </span>demo_proj2\n%<span class=\"w\"> </span><span class=\"nb\">cd</span><span class=\"w\"> </span>demo_proj2\n%<span class=\"w\"> </span><span class=\"c1\"># add mathlib require lines to lakefile.lean</span>\n%<span class=\"w\"> </span>lake<span class=\"w\"> </span>build\nerror:<span class=\"w\"> </span>missing<span class=\"w\"> </span>manifest<span class=\"p\">;</span><span class=\"w\"> </span>use<span class=\"w\"> </span><span class=\"sb\">`</span>lake<span class=\"w\"> </span>update<span class=\"sb\">`</span><span class=\"w\"> </span>to<span class=\"w\"> </span>generate<span class=\"w\"> </span>one\n%<span class=\"w\"> </span>lake<span class=\"w\"> </span>-R<span class=\"w\"> </span>update\nAttempting<span class=\"w\"> </span>to<span class=\"w\"> </span>download<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">1</span>/1<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">0</span>%<span class=\"w\"> </span>success<span class=\"o\">)</span>\nWarning:<span class=\"w\"> </span>some<span class=\"w\"> </span>files<span class=\"w\"> </span>were<span class=\"w\"> </span>not<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>cache.\nThis<span class=\"w\"> </span>usually<span class=\"w\"> </span>means<span class=\"w\"> </span>that<span class=\"w\"> </span>your<span class=\"w\"> </span><span class=\"nb\">local</span><span class=\"w\"> </span>checkout<span class=\"w\"> </span>of<span class=\"w\"> </span>mathlib4<span class=\"w\"> </span>has<span class=\"w\"> </span>diverged<span class=\"w\"> </span>from<span class=\"w\"> </span>upstream.\nIf<span class=\"w\"> </span>you<span class=\"w\"> </span>push<span class=\"w\"> </span>your<span class=\"w\"> </span>commits<span class=\"w\"> </span>to<span class=\"w\"> </span>a<span class=\"w\"> </span>branch<span class=\"w\"> </span>of<span class=\"w\"> </span>the<span class=\"w\"> </span>mathlib4<span class=\"w\"> </span>repository,<span class=\"w\"> </span>CI<span class=\"w\"> </span>will<span class=\"w\"> </span>build<span class=\"w\"> </span>the<span class=\"w\"> </span>oleans<span class=\"w\"> </span>and<span class=\"w\"> </span>they<span class=\"w\"> </span>will<span class=\"w\"> </span>be<span class=\"w\"> </span>available<span class=\"w\"> </span>later.\nDecompressing<span class=\"w\"> </span><span class=\"m\">4449</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nunpacked<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">5590</span><span class=\"w\"> </span>ms\ninfo:<span class=\"w\"> </span>mathlib:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/leanprover-community/mathlib4<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"s1\">'././.lake/packages/mathlib'</span>\ninfo:<span class=\"w\"> </span>std:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/leanprover/std4<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"s1\">'././.lake/packages/std'</span>\ninfo:<span class=\"w\"> </span>Qq:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/leanprover-community/quote4<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"s1\">'././.lake/packages/Qq'</span>\ninfo:<span class=\"w\"> </span>aesop:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/leanprover-community/aesop<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"s1\">'././.lake/packages/aesop'</span>\ninfo:<span class=\"w\"> </span>proofwidgets:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/leanprover-community/ProofWidgets4<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"s1\">'././.lake/packages/proofwidgets'</span>\ninfo:<span class=\"w\"> </span>Cli:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/leanprover/lean4-cli<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"s1\">'././.lake/packages/Cli'</span>\ninfo:<span class=\"w\"> </span>importGraph:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/leanprover-community/import-graph.git<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"s1\">'././.lake/packages/importGraph'</span>\nwarning:<span class=\"w\"> </span>Qq:<span class=\"w\"> </span>ignoring<span class=\"w\"> </span>missing<span class=\"w\"> </span>dependency<span class=\"w\"> </span>manifest<span class=\"w\"> </span><span class=\"s1\">'././.lake/packages/Qq/lake-manifest.json'</span>\ninfo:<span class=\"w\"> </span>mathlib:<span class=\"w\"> </span>running<span class=\"w\"> </span>post-update<span class=\"w\"> </span>hooks\n%<span class=\"w\"> </span><span class=\"c1\"># add `import Mathlib` in `Main.lean`</span>\n%<span class=\"w\"> </span>lake<span class=\"w\"> </span>build\n<span class=\"o\">[</span><span class=\"m\">4453</span>/8908<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib\n</code></pre></div>\n</div></div>\n<p>The Mathlib require lines are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">leanVersion</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"v{Lean.versionString}\"</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span> <span class=\"bp\">@</span> <span class=\"n\">leanVersion</span>\n</code></pre></div>\n<p>I've tried <code>rm</code>, <code>lake exe cache get!</code> etc.</p>",
        "id": 438526892,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715675609
    },
    {
        "content": "<p>Have you tried with the recommended command?</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>+leanprover-community/mathlib4:lean-toolchain<span class=\"w\"> </span>new<span class=\"w\"> </span>&lt;your_project_name&gt;<span class=\"w\"> </span>math\n</code></pre></div>",
        "id": 438527254,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715675747
    },
    {
        "content": "<p>Same, as long as I add a <code>Main.lean</code> and set it to the default target.</p>",
        "id": 438530194,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715676727
    },
    {
        "content": "<p>That's a <em>lot</em> of files! Does your project really contain ~4k files on top of mathlib?</p>",
        "id": 438531175,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1715677094
    },
    {
        "content": "<p>No, note the number is exactly 2n+2 of Mathlib files.</p>",
        "id": 438531300,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715677148
    },
    {
        "content": "<p>I would guess that somehow you've persuaded lake that it needs to <em>compile</em> (generate C code for) mathlib</p>",
        "id": 438531399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715677193
    },
    {
        "content": "<p>What is item 4454 that it prints?</p>",
        "id": 438531504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715677214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438531399\">said</a>:</p>\n<blockquote>\n<p>I would guess that somehow you've persuaded lake that it needs to <em>compile</em> (generate C code for) mathlib</p>\n</blockquote>\n<p>I compared <code>demo_proj2</code> (created without Mathlib in mind then add Mathlib afterwards) and <code>demo_proj3</code> (created by the recommended command), file by file and line by line, could not see the cause.</p>",
        "id": 438531727,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715677289
    },
    {
        "content": "<p>Try <code>rm -rf ~/.cache/mathlib</code></p>",
        "id": 438531904,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715677333
    },
    {
        "content": "<p>I'm guessing <code>lake clean</code> is included in the \"etc\" of the commands you tried?</p>",
        "id": 438531979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715677355
    },
    {
        "content": "<p>Except for noticing that without <code>Main</code> it's happy, and with <code>Main</code> I have <code>[4453/8908] Building Mathlib</code>.</p>",
        "id": 438532168,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715677422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438531979\">said</a>:</p>\n<blockquote>\n<p>I'm guessing <code>lake clean</code> is included in the \"etc\" of the commands you tried?</p>\n</blockquote>\n<p>Not really, I haven't used <code>lake clean</code> after the last time it removed project files. So it also cleans Mathlib cache?</p>",
        "id": 438532342,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715677476
    },
    {
        "content": "<p>If I checkout mathlib at <code>v4.8.0-rc1</code> and call <code>lake exe cache get</code> I also see a cache miss for 1 file, and <code>lake build</code> shows <code>[4451/4451] Building Mathlib</code> for about a second. Is that the toolchain you're on?</p>",
        "id": 438532406,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715677495
    },
    {
        "content": "<p>Yes, I'm on   <code>leanprover/lean4:v4.8.0-rc1</code>.</p>",
        "id": 438532489,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715677524
    },
    {
        "content": "<p>and does it also only take about 1-2 seconds for you to build this file, or do you get stuck for a longer time?</p>",
        "id": 438532634,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715677568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438532634\">said</a>:</p>\n<blockquote>\n<p>and does it also only take about 1-2 seconds for you to build this file, or do you get stuck for a longer time?</p>\n</blockquote>\n<p>It takes only a second if the <code>import Mathlib</code> is in the lib, but forever if in <code>Main.lean</code>.</p>",
        "id": 438532766,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715677627
    },
    {
        "content": "<p>Well, in the sample project, <code>Main.lean</code> is compiled (as <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  guessed), so importing mathlib there would probably need to compile all of mathlib.</p>",
        "id": 438532864,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715677676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438531904\">said</a>:</p>\n<blockquote>\n<p>Try <code>rm -rf ~/.cache/mathlib</code></p>\n</blockquote>\n<p>Same.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>%<span class=\"w\"> </span>rm<span class=\"w\"> </span>-rf<span class=\"w\"> </span>~/.cache/mathlib\n%<span class=\"w\"> </span>lake<span class=\"w\"> </span>build\n<span class=\"o\">[</span><span class=\"m\">612</span>/8908<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.Data.NNRat.Defs^C\n%\n%<span class=\"w\"> </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get!\ninstalling<span class=\"w\"> </span>leantar<span class=\"w\"> </span><span class=\"m\">0</span>.1.11\n<span class=\"w\">  </span>%<span class=\"w\"> </span>Total<span class=\"w\">    </span>%<span class=\"w\"> </span>Received<span class=\"w\"> </span>%<span class=\"w\"> </span>Xferd<span class=\"w\">  </span>Average<span class=\"w\"> </span>Speed<span class=\"w\">   </span>Time<span class=\"w\">    </span>Time<span class=\"w\">     </span>Time<span class=\"w\">  </span>Current\n<span class=\"w\">                                 </span>Dload<span class=\"w\">  </span>Upload<span class=\"w\">   </span>Total<span class=\"w\">   </span>Spent<span class=\"w\">    </span>Left<span class=\"w\">  </span>Speed\n<span class=\"w\">  </span><span class=\"m\">0</span><span class=\"w\">     </span><span class=\"m\">0</span><span class=\"w\">    </span><span class=\"m\">0</span><span class=\"w\">     </span><span class=\"m\">0</span><span class=\"w\">    </span><span class=\"m\">0</span><span class=\"w\">     </span><span class=\"m\">0</span><span class=\"w\">      </span><span class=\"m\">0</span><span class=\"w\">      </span><span class=\"m\">0</span><span class=\"w\"> </span>--:--:--<span class=\"w\"> </span>--:--:--<span class=\"w\"> </span>--:--:--<span class=\"w\">     </span><span class=\"m\">0</span>\n<span class=\"m\">100</span><span class=\"w\">  </span>927k<span class=\"w\">  </span><span class=\"m\">100</span><span class=\"w\">  </span>927k<span class=\"w\">    </span><span class=\"m\">0</span><span class=\"w\">     </span><span class=\"m\">0</span><span class=\"w\">   </span>253k<span class=\"w\">      </span><span class=\"m\">0</span><span class=\"w\">  </span><span class=\"m\">0</span>:00:03<span class=\"w\">  </span><span class=\"m\">0</span>:00:03<span class=\"w\"> </span>--:--:--<span class=\"w\">  </span>374k\n\nAttempting<span class=\"w\"> </span>to<span class=\"w\"> </span>download<span class=\"w\"> </span><span class=\"m\">4450</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">4449</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">4450</span>/4450<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">99</span>%<span class=\"w\"> </span>success<span class=\"o\">)</span>\nWarning:<span class=\"w\"> </span>some<span class=\"w\"> </span>files<span class=\"w\"> </span>were<span class=\"w\"> </span>not<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>cache.\nThis<span class=\"w\"> </span>usually<span class=\"w\"> </span>means<span class=\"w\"> </span>that<span class=\"w\"> </span>your<span class=\"w\"> </span><span class=\"nb\">local</span><span class=\"w\"> </span>checkout<span class=\"w\"> </span>of<span class=\"w\"> </span>mathlib4<span class=\"w\"> </span>has<span class=\"w\"> </span>diverged<span class=\"w\"> </span>from<span class=\"w\"> </span>upstream.\nIf<span class=\"w\"> </span>you<span class=\"w\"> </span>push<span class=\"w\"> </span>your<span class=\"w\"> </span>commits<span class=\"w\"> </span>to<span class=\"w\"> </span>a<span class=\"w\"> </span>branch<span class=\"w\"> </span>of<span class=\"w\"> </span>the<span class=\"w\"> </span>mathlib4<span class=\"w\"> </span>repository,<span class=\"w\"> </span>CI<span class=\"w\"> </span>will<span class=\"w\"> </span>build<span class=\"w\"> </span>the<span class=\"w\"> </span>oleans<span class=\"w\"> </span>and<span class=\"w\"> </span>they<span class=\"w\"> </span>will<span class=\"w\"> </span>be<span class=\"w\"> </span>available<span class=\"w\"> </span>later.\nDecompressing<span class=\"w\"> </span><span class=\"m\">4449</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nunpacked<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">11158</span><span class=\"w\"> </span>ms\n%<span class=\"w\"> </span>lake<span class=\"w\"> </span>build\n<span class=\"o\">[</span><span class=\"m\">4454</span>/8908<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Main^C\n</code></pre></div>\n</div></div>",
        "id": 438533191,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715677796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438532864\">said</a>:</p>\n<blockquote>\n<p>Well, in the sample project, <code>Main.lean</code> is compiled (as <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>  guessed), so importing mathlib there would probably need to compile all of mathlib.</p>\n</blockquote>\n<p>Is this expected?</p>",
        "id": 438533333,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715677831
    },
    {
        "content": "<p>I think <code>Main.lean</code> is intended to be the template if you want to write a command like <code>lake exe graph</code> or <code>lake exe cache</code> while <code>YourProject/Basic.lean</code> is intended to be the entry-point for mathematical content.</p>\n<p>Or \"was\". If I create a new sample project, I don't get a <code>Main.lean</code> at all anymore. (EDIT: I see, <code>lake new --help</code> explains the template options)</p>",
        "id": 438533748,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715677988
    },
    {
        "content": "<p>Or what's the code you wanted to put in <code>Main.lean</code> which depends on Mathlib?</p>",
        "id": 438534071,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715678096
    },
    {
        "content": "<p>Using Mathlib contents in an executable is a valid use case (not necessary the whole Mathlib). But maybe I didn't realize that it requires a compilation previously.</p>",
        "id": 438535316,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715678540
    },
    {
        "content": "<p>I think if you just import the parts you need, then you should be fine. I think some parts of Mathlib (e.g. some tactics) are already compiled in cache, but might be wrong here.</p>\n<p>The cache miss for <code>Mathlib.lean</code> is an independent issue though, I'm not sure how one would look into that in a quick way.</p>",
        "id": 438535982,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715678787
    },
    {
        "content": "<p>Thanks for the help, I'm trying with SciLean to see if this is the cause.</p>",
        "id": 438536325,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715678903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438535982\">said</a>:</p>\n<blockquote>\n<p>I think some parts of Mathlib (e.g. some tactics) are already compiled in cache, but might be wrong here.</p>\n</blockquote>\n<p>I'm pretty sure this isn't true, and the \"compile\" outputs are not cached at any level (they are platform-dependent)</p>",
        "id": 438536533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715678977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438535982\">said</a>:</p>\n<blockquote>\n<p>The cache miss for <code>Mathlib.lean</code> is an independent issue though, I'm not sure how one would look into that in a quick way.</p>\n</blockquote>\n<p>Are you sure this is a cache miss? It might just be printing the last successful target while it works out what it needs to do for compilation</p>",
        "id": 438536755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715679038
    },
    {
        "content": "<p>So, my observation on SciLean is that it would quickly show <code>[1189/2437] Compiling Mathlib.Tactic.FunProp.Decl</code> etc. and compiles very fast.</p>\n<p>But in my case, it stuck at <code>[4451/8908] Building Mathlib</code> forever (note that it's not \"compiling\" and it shows nothing after that), so I can't tell that it's a compilation issue (but this is also unconfirmed).</p>",
        "id": 438537057,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715679144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438536755\">said</a>:</p>\n<blockquote>\n<p>Are you sure this is a cache miss? It might just be printing the last successful target while it works out what it needs to do for compilation</p>\n</blockquote>\n<p>No I'm not, but it says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">me</span><span class=\"bp\">@</span><span class=\"n\">computer</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">1</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Downloaded</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">attempted</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">%</span> <span class=\"n\">success</span><span class=\"o\">)</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">files</span> <span class=\"n\">were</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">cache.</span>\n</code></pre></div>\n<p>How do I check the hashes manually again?</p>",
        "id": 438538011,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715679502
    },
    {
        "content": "<p>I guess this is the actual story: Lake realized that for <code>import Mathlib</code> in <code>Main</code> to work, it needs to \"build\" Mathlib by \"compiling\" individual files, so while it's busy compiling individual files, it stuck at showing \"building\" Mathlib, causing the confusion, unlike in the SciLean case, it quickly shows a lot of \"compiling\" progress of idividual files. So it's probably just a prompt issue caused by my incorrect usage of <code>import Mathlib</code> in <code>Main</code> ( I should just use individual imports).</p>\n<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> Maybe you can confirm this guess? Thanks!</p>",
        "id": 438538050,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715679521
    },
    {
        "content": "<p>To verify the guess on the progress prompt, I changed <code>Main.lean</code> to only <code>import Mathlib.LinearAlgebra.CliffordAlgebra.Contraction</code> then <code>lake clean &amp; lake exe cache get</code> but I'm still seeing <code>[1305/8908] Building Mathlib.RingTheory.IntegralClosure</code> etc. all the way to a <code>[4453/8908] Building Mathlib</code> then this time quickly changed to <code>Building Main</code> then a successful run:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">demo_proj3</span>\n<span class=\"n\">Hello</span><span class=\"o\">,</span> <span class=\"n\">world</span><span class=\"bp\">!</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">demo_proj3</span>  <span class=\"mi\">896</span><span class=\"bp\">.</span><span class=\"mi\">11</span><span class=\"n\">s</span> <span class=\"n\">user</span> <span class=\"mi\">87</span><span class=\"bp\">.</span><span class=\"mi\">50</span><span class=\"n\">s</span> <span class=\"n\">system</span> <span class=\"mi\">544</span><span class=\"bp\">%</span> <span class=\"n\">cpu</span> <span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"bp\">.</span><span class=\"mi\">79</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 438540102,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715680267
    },
    {
        "content": "<p>It doesn't seem that I can get \"compiling\" prompt like with SciLean.</p>",
        "id": 438540185,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715680312
    },
    {
        "content": "<p>But it's using <code>leanprover/lean4:v4.7.0</code> so that might be why.</p>",
        "id": 438540285,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715680343
    },
    {
        "content": "<p>I did a rerun (after <code>lake clean</code> and <code>lake exe cache get</code>) with <code>import Mathlib</code> it shows <code>876.81s user 83.65s system 555% cpu 2:53.01 total</code>.</p>",
        "id": 438541477,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715680772
    },
    {
        "content": "<p>It's even faster...</p>",
        "id": 438542096,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715680982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438538011\">said</a>:</p>\n<blockquote>\n<p>How do I check the hashes manually again?</p>\n</blockquote>\n<p>The answer here is <code>lake exe cache lookup Mathlib.lean</code>which printed <code>/home/me/.cache/mathlib/d919624d79b05cfe.ltar not found</code> 10min ago. But it seems to work now and downloads this last file, too. So that seems to work again <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438541477\">said</a>:</p>\n<blockquote>\n<p>I did a rerun (after <code>lake clean</code> and <code>lake exe cache get</code>) with <code>import Mathlib</code> it shows <code>876.81s user 83.65s system 555% cpu 2:53.01 total</code>.</p>\n</blockquote>\n<p>You're right, for me that's about the same time, and also prints the expected messages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Test.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Test</span>\n<span class=\"o\">[</span><span class=\"mi\">4306</span><span class=\"bp\">/</span><span class=\"mi\">4313</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Mathport.Rename</span>\n<span class=\"o\">[</span><span class=\"mi\">4306</span><span class=\"bp\">/</span><span class=\"mi\">4314</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.CodeAction.Attr</span>\n<span class=\"o\">[</span><span class=\"mi\">4306</span><span class=\"bp\">/</span><span class=\"mi\">4314</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Init.Data.Nat.Notation</span>\n<span class=\"o\">[</span><span class=\"mi\">4306</span><span class=\"bp\">/</span><span class=\"mi\">4315</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Position</span>\n<span class=\"o\">[</span><span class=\"mi\">4306</span><span class=\"bp\">/</span><span class=\"mi\">4315</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.CodeAction.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">4306</span><span class=\"bp\">/</span><span class=\"mi\">4487</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Alias</span>\n<span class=\"bp\">...</span>\n<span class=\"o\">[</span><span class=\"mi\">8589</span><span class=\"bp\">/</span><span class=\"mi\">8613</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Closeds</span>\n<span class=\"o\">[</span><span class=\"mi\">8591</span><span class=\"bp\">/</span><span class=\"mi\">8613</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib</span>\n<span class=\"o\">[</span><span class=\"mi\">8592</span><span class=\"bp\">/</span><span class=\"mi\">8613</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Main</span>\n<span class=\"o\">[</span><span class=\"mi\">8607</span><span class=\"bp\">/</span><span class=\"mi\">8613</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Main</span>\n<span class=\"o\">[</span><span class=\"mi\">8613</span><span class=\"bp\">/</span><span class=\"mi\">8613</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">Main</span>\n</code></pre></div>\n<p>So it seems now creating a new project it's all as expected. What's the state on your side, do you still have troubles that are unresolved?</p>",
        "id": 438542818,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715681263
    },
    {
        "content": "<p>One thing I notice is that lake starts with a stuck, then quickly lots of files, then a stuck, then a jump of thousands of tasks, then repeat the stuck and the jump. The last few 1000+ task jumping are between building Mathlib, building DemoProj3, and building Main.</p>",
        "id": 438542940,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715681302
    },
    {
        "content": "<p>I can't see why there could be 1000+ tasks jump between them.</p>",
        "id": 438543084,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715681372
    },
    {
        "content": "<p>The jumps will be fixed on rc2.</p>",
        "id": 438544989,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715682079
    },
    {
        "content": "<p>Thanks, if seeing outputs refreshing regularly, I'll just do some other coding to wait it out. Seeing a stuck will make me try doing too much to \"fix\" a normal situation.</p>",
        "id": 438545832,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715682405
    },
    {
        "content": "<p>It would also be nice to distinguish building, compiling, and \"assembling\", they mean different debugging directions.</p>",
        "id": 438546829,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715682765
    },
    {
        "content": "<p>Doesn't it saying \"building\" and \"compiling\" right in the output?</p>",
        "id": 438547782,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715683186
    },
    {
        "content": "<p>Yes, but if the diagnostics in this topic are correct, they are compilation issues.</p>",
        "id": 438558959,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715687493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438558959\">said</a>:</p>\n<blockquote>\n<p>Yes, but if the diagnostics in this topic are correct, they are compilation issues.</p>\n</blockquote>\n<p>(as far as the diagnostics from my side are concerned, I could reproduce your cache miss earlier, but it seems that the missing file is now available and everything works as expected when I try to reproduce things <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span> )</p>",
        "id": 438559811,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1715687804
    },
    {
        "content": "<p>I guess there are compilation caches that can't be cleared by lake clean, will verify that later.</p>",
        "id": 438560769,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715688142
    },
    {
        "content": "<p><code>lake clean</code> after <code>rm -rf .lake</code> will do something heavy:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>info: mathlib: cloning <a href=\"https://github.com/leanprover-community/mathlib4\">https://github.com/leanprover-community/mathlib4</a> to '././.lake/packages/mathlib'<br>\ninfo: std: cloning <a href=\"https://github.com/leanprover/std4\">https://github.com/leanprover/std4</a> to '././.lake/packages/std'<br>\ninfo: Qq: cloning <a href=\"https://github.com/leanprover-community/quote4\">https://github.com/leanprover-community/quote4</a> to '././.lake/packages/Qq'<br>\ninfo: aesop: cloning <a href=\"https://github.com/leanprover-community/aesop\">https://github.com/leanprover-community/aesop</a> to '././.lake/packages/aesop'<br>\ninfo: proofwidgets: cloning <a href=\"https://github.com/leanprover-community/ProofWidgets4\">https://github.com/leanprover-community/ProofWidgets4</a> to '././.lake/packages/proofwidgets'<br>\ninfo: Cli: cloning <a href=\"https://github.com/leanprover/lean4-cli\">https://github.com/leanprover/lean4-cli</a> to '././.lake/packages/Cli'<br>\ninfo: importGraph: cloning <a href=\"https://github.com/leanprover-community/import-graph.git\">https://github.com/leanprover-community/import-graph.git</a> to '././.lake/packages/importGraph'</p>\n</div></div>\n<p>I guess this should not be expected.</p>",
        "id": 438568554,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715690808
    },
    {
        "content": "<p>Both after <code>lake clean &amp;&amp; rm -rf .lake &amp;&amp; rm -rf ~/.cache/mathlib &amp;&amp; lake exe cache get</code>:</p>\n<ul>\n<li><code>897.78s user 83.84s system 464% cpu 3:31.16 total</code> for <code>import Mathlib</code> in <code>Main.lean</code></li>\n<li><code>876.74s user 82.51s system 487% cpu 3:16.86 total</code> for <code>import Mathlib.LinearAlgebra.CliffordAlgebra.Contraction</code> in <code>Main.lean</code></li>\n</ul>\n<p>Almost no difference, and it's weird that the latter stuck at <code>[4439/8908] Building Mathlib.Topology.Sheaves.Skyscraper</code> for quite a bit, but <code>CliffordAlgebra.Contraction</code> definitely has no dependency on that.</p>",
        "id": 438570991,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715691595
    },
    {
        "content": "<p>The assumption of the experiment is that the cache of olean files are valid, and linking time is neglectable, so the net time should be compilation (IR in C), and I expect importing a specific file is significantly faster due to much less compilation.</p>",
        "id": 438571709,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715691786
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 438741325,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715758001
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 438741369,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715758024
    }
]