[
    {
        "content": "<p>I plan to refactor <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OreLocalization#doc\">docs#OreLocalization</a> to allow localizations of <code>X</code> at <code>S : Submonoid R</code> for some <code>MulAction R X</code>, and replace <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Localization#doc\">docs#Localization</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LocalizedModule#doc\">docs#LocalizedModule</a> with it. Are there any suggestions or objections? If not, <a href=\"https://github.com/leanprover-community/mathlib4/pull/13151\">#13151</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13156\">#13156</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/13158\">#13158</a> are the first sequence of PRs dealing with the <code>LocalizedModule</code> half of the refactor.</p>",
        "id": 440460996,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716538081
    },
    {
        "content": "<p>Am I right in thinking that right now if R is a commutative ring, S is a submonoid and M is an R-module then the only way to localise M at S is to tensor with <code>Localization S</code>? And your refactor will change this?</p>",
        "id": 440462237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716538645
    },
    {
        "content": "<p>Right now we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LocalizedModule#doc\">docs#LocalizedModule</a>. But <code>LocalizedModule S R</code> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><msup><mi>S</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[S^{-1}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> as a module) and <code>Localization S</code> are currently not the same thing.</p>",
        "id": 440462446,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716538739
    },
    {
        "content": "<p>I don't have any objections to a refactor, but I'm interested in why you want to do it.</p>",
        "id": 440469827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716541609
    },
    {
        "content": "<p>By unifying <code>LocalizedModule</code> and <code>Localization</code>, we can get results of submodules for free with what we already have about ideals. Plus we can get the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">O</mi><mi>X</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}_X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-module <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>M</mi><mo>~</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\tilde{M}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9202em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9202em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span><span style=\"top:-3.6023em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1667em;\"><span class=\"mord\">~</span></span></span></span></span></span></span></span></span></span> for free (hopefully) with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgebraicGeometry.Spec.structureSheaf#doc\">docs#AlgebraicGeometry.Spec.structureSheaf</a>. We will also get localization of modules over non-commutative rings, which would also show \"left ore &lt;-&gt; strong rank condition\" for domains (a todo somewhere in mathlib).</p>",
        "id": 440471537,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716542276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Refactoring.20Localization/near/440462446\">said</a>:</p>\n<blockquote>\n<p>Right now we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LocalizedModule#doc\">docs#LocalizedModule</a>. But <code>LocalizedModule S R</code> ($R[S^{-1}]$ as a module) and <code>Localization S</code> are currently not the same thing.</p>\n</blockquote>\n<p>I think we can unify these without doing OreLocalization at the same time?</p>",
        "id": 440471993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716542442
    },
    {
        "content": "<p>I did some work just before the port to make their relations defeq I think</p>",
        "id": 440472053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716542462
    },
    {
        "content": "<p>Yeah but I want to generalize some results on LocalizedModule to non-commutative setting as well.</p>",
        "id": 440472311,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716542552
    },
    {
        "content": "<p>You should probably coordinate with <span class=\"user-mention\" data-user-id=\"622371\">@Hannah Fechtner</span> who is also working on localization things.</p>",
        "id": 440512097,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716558136
    },
    {
        "content": "<p>thanks, Patrick! Andrew, I'll message you. I have some work that I'm almost ready to push which depends on the current OreLocalization file (namely, if you localize a presented monoid, the resulting group is isomorphic to the presented group on the same relations.generators)</p>",
        "id": 440526443,
        "sender_full_name": "Hannah Fechtner",
        "timestamp": 1716562710
    },
    {
        "content": "<p>I'm building a small API over OreLocalization for the simplified case in which R = S (aka the whole monoid satisfies the ore conditions). I'm also a bit hesitant about switching right to left -- I'm working towards a proof of a solution to the word problem on braids, and I've shown right common multiples already through disgustingly long proofs by induction. I'll look at it; it's probably possible to re-do for left common multiples, but I'd have to work out the math myself instead of following an already-written proof in a book</p>",
        "id": 440527154,
        "sender_full_name": "Hannah Fechtner",
        "timestamp": 1716562943
    },
    {
        "content": "<p>This sounds like an argument for doing this refactor in two steps; merge Localization and LocalizedModule (which won't interfere with Hannah's work), then later merge the result with Ore localizations</p>",
        "id": 440527340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716563019
    },
    {
        "content": "<p>(that probably results in diffs that are easier to review too)</p>",
        "id": 440527550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716563093
    },
    {
        "content": "<p>Are right ore localization more common in the literature than left ore?</p>",
        "id": 440532665,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716565053
    },
    {
        "content": "<p>I somewhat take that back - it would only be about 100 lines of code for me to switch from right to left. so I'm fine with  that :)</p>\n<p>I have seen right ore much more frequently than left ore, though both appear. I'm no expert, though!</p>",
        "id": 440557936,
        "sender_full_name": "Hannah Fechtner",
        "timestamp": 1716575089
    },
    {
        "content": "<p>One argument against doing the refactor in two steps is that it is twice the work. The fact that the proofs in the commutative case does not apply to the non-commutative case doesn't help too. Nonetheless the first PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/13151\">#13151</a> only touches ore localization (flips left -&gt; right &amp; make it work for group actions / modules) and it should be useful even if we do not want the refactor on <code>Localization</code>.</p>",
        "id": 440559270,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716575681
    },
    {
        "content": "<p>Let me also tag the original authors <span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span>. I remember there were some disscussions on this generalization when ore localization landed in mathlib but I couldn't find it now.</p>",
        "id": 440559810,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716575925
    },
    {
        "content": "<p>Thanks for the ping, I'll try to find the old thread</p>",
        "id": 440794272,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1716795681
    },
    {
        "content": "<p>Can't find any discussion re left and right, most of the design choices were discussed in the <a href=\"https://github.com/leanprover-community/mathlib/pull/14348\">PR</a></p>",
        "id": 440794801,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1716795844
    },
    {
        "content": "<p>A ping for someone to review <a href=\"https://github.com/leanprover-community/mathlib4/pull/13151\">#13151</a>. Now that we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">O</mi><mi>X</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}_X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> modules in mathlib, I really want to make structureSheaf work for modules.</p>",
        "id": 442859329,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717611345
    },
    {
        "content": "<p>The next PR in the line is <a href=\"https://github.com/leanprover-community/mathlib4/pull/13559\">#13559</a>, which is just a split of the big file and removes the comparison of <code>OreLocalization</code> with <code>Localization</code>, so that we can import it from <code>MonoidLocalization.lean</code> without new imports in the future.</p>",
        "id": 443031722,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717672532
    },
    {
        "content": "<p>Side question: Do we actually need the additive version of localization (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddLocalization#doc\">docs#AddLocalization</a>)? The only example I have is <code>Int</code> being the <code>AddLocalization</code> of <code>Nat</code>.</p>\n<p>I can additivize <code>OreLocalization</code> as well but I don't think this is necessary if it will never be used.</p>",
        "id": 443032085,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717672672
    },
    {
        "content": "<p>I suppose we'll have more instances of <code>AddLocalization</code> in the future. Like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">K_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> of an abelian category.</p>",
        "id": 443033128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717673096
    },
    {
        "content": "<p>Oh yeah they are additive. Will additivize <code>OreLocalization</code> then.</p>",
        "id": 443033430,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1717673205
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13156\">#13156</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/13943\">#13943</a> are the refactoring PR, changing the definition of <code>LocalizedModule</code> and <code>Localization</code> respectively.</p>",
        "id": 445928288,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1718909224
    },
    {
        "content": "<p>The latter PR speeds up slow files like <code>Mathlib.AlgebraicGeometry.GammaSpecAdjunction</code> by 50% but also slows some slow files like <code>Mathlib.RingTheory.ClassGroup</code> by 50%, with an overall +5% build time. I'm not sure what to make of this result and how to fix the slow downs.</p>",
        "id": 445945666,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1718914806
    },
    {
        "content": "<p>Quite a few <code>irreducible_def</code>’s were deleted. Are the new versions still <code>irreducible</code>?</p>",
        "id": 445962678,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718921760
    },
    {
        "content": "<p>Okay I restored some of them, and the +5% build time has dissapeared, but the slow down on the files still persist. I'm afraid I cannot make the remaining ones irreducible, as they might cause non-defeq diamonds.</p>",
        "id": 446048757,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1718963997
    },
    {
        "content": "<p>We have <code>unseal</code> now to open up the internals of an irreducible declaration to help with new diamonds at <code>default</code>/<code>semireducible</code> transparency</p>",
        "id": 446126968,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718989297
    },
    {
        "content": "<p>Also, the +5% build lint is noise</p>",
        "id": 446130181,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718990117
    },
    {
        "content": "<p>I don't think unseal works for <code>irreducible_def</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"n\">irreducible_def</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"n\">unseal</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 446137684,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1718991889
    },
    {
        "content": "<p>I would write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">irreducible</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"n\">unseal</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kd\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"c1\">-- fails?</span>\n</code></pre></div>",
        "id": 446138157,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718992077
    },
    {
        "content": "<p>This seems the problem. We used to have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Exponentiation in a `Localization` is defined as `⟨a, b⟩ ^ n = ⟨a ^ n, b ^ n⟩`.</span>\n\n<span class=\"sd\">This is a separate `irreducible` def to ensure the elaborator doesn't waste its time</span>\n<span class=\"sd\">trying to unify some huge recursive definition with itself, but unfolded one step less.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"w\"> </span><span class=\"s2\">\"Multiplication with a natural in an `AddLocalization` is defined as</span>\n<span class=\"s2\">`n • ⟨a, b⟩ = ⟨n • a, n • b⟩`.</span>\n\n<span class=\"s2\">This is a separate `irreducible` def to ensure the elaborator doesn't waste its time</span>\n<span class=\"s2\">trying to unify some huge recursive definition with itself, but unfolded one step less.\"</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"n\">irreducible_def</span><span class=\"w\"> </span><span class=\"n\">npow</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Localization</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Localization</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">commMonoid.npow</span>\n</code></pre></div>\n<p>Now we have <code>npow := npowRec</code>(well not explicitly but from default insertion)</p>\n<p>Other default fields also creep in.</p>",
        "id": 446186514,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719009635
    },
    {
        "content": "<p>Thanks for the help! However I (think I) made all the fields (including default ones) irreducible, and the performance is still the same. I've hand checked some of the slowed files and the speed of them seemed okay though. Not sure what to do now.</p>",
        "id": 446473433,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1719176402
    },
    {
        "content": "<p>Mentioning this PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/13943\">#13943</a> again as it is easy to rot. Are there more improvements to be made?</p>",
        "id": 447629370,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1719540116
    },
    {
        "content": "<p>The bench results posted in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13943#issuecomment-2185261213\">https://github.com/leanprover-community/mathlib4/pull/13943#issuecomment-2185261213</a> are a bit discouraging. E.g. a file like <code>ClassGroup</code> seems to have &gt; 50% more instructions.</p>",
        "id": 447742397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1719574626
    },
    {
        "content": "<p>I'm not sure if this should be a show stopper. But I would like to hear from some benchmark experts (<span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> ?) if this is ok</p>",
        "id": 447742587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1719574687
    },
    {
        "content": "<p>Wrt the <code>!bench</code> output, I converted Michael's \"significant\" script and it would output what is below on the <code>!bench</code> for the PR.  Would it be good to automatically update a comment with this kind of summary for every issued <code>!bench</code>-command?</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>File</th>\n<th style=\"text-align: right;\">Instructions</th>\n<th style=\"text-align: center;\">%</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Increase</code></td>\n<td style=\"text-align: right;\"></td>\n<td style=\"text-align: center;\"></td>\n</tr>\n<tr>\n<td>build</td>\n<td style=\"text-align: right;\">+222.571⬝10⁹</td>\n<td style=\"text-align: center;\">(+0.18%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.IntegralRestrict</td>\n<td style=\"text-align: right;\">+92.618⬝10⁹</td>\n<td style=\"text-align: center;\">(+57.69%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.DedekindDomain.Different</td>\n<td style=\"text-align: right;\">+65.185⬝10⁹</td>\n<td style=\"text-align: center;\">(+45.48%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.DedekindDomain.Ideal</td>\n<td style=\"text-align: right;\">+44.272⬝10⁹</td>\n<td style=\"text-align: center;\">(+34.26%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.ClassGroup</td>\n<td style=\"text-align: right;\">+33.536⬝10⁹</td>\n<td style=\"text-align: center;\">(+50.14%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.Fourier.FourierTransformDeriv</td>\n<td style=\"text-align: right;\">+32.288⬝10⁹</td>\n<td style=\"text-align: center;\">(+8.27%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.Dual</td>\n<td style=\"text-align: right;\">+25.579⬝10⁹</td>\n<td style=\"text-align: center;\">(+6.90%)</td>\n</tr>\n<tr>\n<td>Mathlib.AlgebraicGeometry.EllipticCurve.Group</td>\n<td style=\"text-align: right;\">+25.159⬝10⁹</td>\n<td style=\"text-align: center;\">(+14.16%)</td>\n</tr>\n<tr>\n<td>lint</td>\n<td style=\"text-align: right;\">+18.896⬝10⁹</td>\n<td style=\"text-align: center;\">(+0.23%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.SpecialFunctions.Pow.Deriv</td>\n<td style=\"text-align: right;\">+18.852⬝10⁹</td>\n<td style=\"text-align: center;\">(+15.46%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.InnerProductSpace.TwoDim</td>\n<td style=\"text-align: right;\">+13.346⬝10⁹</td>\n<td style=\"text-align: center;\">(+10.44%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.WittVector.Isocrystal</td>\n<td style=\"text-align: right;\">+13.279⬝10⁹</td>\n<td style=\"text-align: center;\">(+34.28%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.OreLocalization.Basic</td>\n<td style=\"text-align: right;\">+11.506⬝10⁹</td>\n<td style=\"text-align: center;\">(+20.27%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.LocalProperties</td>\n<td style=\"text-align: right;\">+11.445⬝10⁹</td>\n<td style=\"text-align: center;\">(+17.45%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Kaehler.Basic</td>\n<td style=\"text-align: right;\">+11.312⬝10⁹</td>\n<td style=\"text-align: center;\">(+3.44%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.OreLocalization.Ring</td>\n<td style=\"text-align: right;\">+11.197⬝10⁹</td>\n<td style=\"text-align: center;\">(+42.30%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.Matrix.SesquilinearForm</td>\n<td style=\"text-align: right;\">+10.770⬝10⁹</td>\n<td style=\"text-align: center;\">(+10.22%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.TensorProduct.Basic</td>\n<td style=\"text-align: right;\">+10.353⬝10⁹</td>\n<td style=\"text-align: center;\">(+3.69%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv</td>\n<td style=\"text-align: right;\">+10.80⬝10⁹</td>\n<td style=\"text-align: center;\">(+8.72%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Ideal.Norm</td>\n<td style=\"text-align: right;\">+7.860⬝10⁹</td>\n<td style=\"text-align: center;\">(+10.89%)</td>\n</tr>\n<tr>\n<td>Mathlib.Algebra.Category.Ring.Instances</td>\n<td style=\"text-align: right;\">+7.610⬝10⁹</td>\n<td style=\"text-align: center;\">(+86.78%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.CliffordAlgebra.BaseChange</td>\n<td style=\"text-align: right;\">+6.738⬝10⁹</td>\n<td style=\"text-align: center;\">(+8.38%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization</td>\n<td style=\"text-align: right;\">+6.340⬝10⁹</td>\n<td style=\"text-align: center;\">(+7.36%)</td>\n</tr>\n<tr>\n<td>Mathlib.Topology.ContinuousFunction.StoneWeierstrass</td>\n<td style=\"text-align: right;\">+6.174⬝10⁹</td>\n<td style=\"text-align: center;\">(+2.47%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.InnerProductSpace.LaxMilgram</td>\n<td style=\"text-align: right;\">+6.116⬝10⁹</td>\n<td style=\"text-align: center;\">(+23.21%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.DiscreteValuationRing.TFAE</td>\n<td style=\"text-align: right;\">+6.114⬝10⁹</td>\n<td style=\"text-align: center;\">(+35.5%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.QuadraticForm.TensorProduct</td>\n<td style=\"text-align: right;\">+5.752⬝10⁹</td>\n<td style=\"text-align: center;\">(+6.73%)</td>\n</tr>\n<tr>\n<td>Mathlib.Algebra.Lie.BaseChange</td>\n<td style=\"text-align: right;\">+5.428⬝10⁹</td>\n<td style=\"text-align: center;\">(+7.11%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Jacobson</td>\n<td style=\"text-align: right;\">+5.289⬝10⁹</td>\n<td style=\"text-align: center;\">(+6.97%)</td>\n</tr>\n<tr>\n<td>Mathlib.Algebra.Lie.TraceForm</td>\n<td style=\"text-align: right;\">+5.239⬝10⁹</td>\n<td style=\"text-align: center;\">(+3.32%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.Calculus.BumpFunction.FiniteDimension</td>\n<td style=\"text-align: right;\">+5.107⬝10⁹</td>\n<td style=\"text-align: center;\">(+7.73%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.InnerProductSpace.Basic</td>\n<td style=\"text-align: right;\">+5.25⬝10⁹</td>\n<td style=\"text-align: center;\">(+1.90%)</td>\n</tr>\n<tr>\n<td>Mathlib.FieldTheory.Minpoly.IsIntegrallyClosed</td>\n<td style=\"text-align: right;\">+5.15⬝10⁹</td>\n<td style=\"text-align: center;\">(+18.91%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.Matrix.BilinearForm</td>\n<td style=\"text-align: right;\">+4.764⬝10⁹</td>\n<td style=\"text-align: center;\">(+6.11%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.WittVector.FrobeniusFractionField</td>\n<td style=\"text-align: right;\">+4.709⬝10⁹</td>\n<td style=\"text-align: center;\">(+10.13%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.Fourier.FourierTransform</td>\n<td style=\"text-align: right;\">+4.310⬝10⁹</td>\n<td style=\"text-align: center;\">(+4.98%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.Contraction</td>\n<td style=\"text-align: right;\">+4.269⬝10⁹</td>\n<td style=\"text-align: center;\">(+6.33%)</td>\n</tr>\n<tr>\n<td>Mathlib.FieldTheory.IsAlgClosed.Basic</td>\n<td style=\"text-align: right;\">+4.120⬝10⁹</td>\n<td style=\"text-align: center;\">(+3.97%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.BilinearForm.TensorProduct</td>\n<td style=\"text-align: right;\">+4.99⬝10⁹</td>\n<td style=\"text-align: center;\">(+8.71%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.InnerProductSpace.Rayleigh</td>\n<td style=\"text-align: right;\">+4.58⬝10⁹</td>\n<td style=\"text-align: center;\">(+9.36%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.Trace</td>\n<td style=\"text-align: right;\">+4.32⬝10⁹</td>\n<td style=\"text-align: center;\">(+4.98%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.QuadraticForm.Basic</td>\n<td style=\"text-align: right;\">+3.995⬝10⁹</td>\n<td style=\"text-align: center;\">(+2.88%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.Fourier.RiemannLebesgueLemma</td>\n<td style=\"text-align: right;\">+3.954⬝10⁹</td>\n<td style=\"text-align: center;\">(+6.49%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.Dimension.Localization</td>\n<td style=\"text-align: right;\">+3.729⬝10⁹</td>\n<td style=\"text-align: center;\">(+11.95%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.Orientation</td>\n<td style=\"text-align: right;\">+3.708⬝10⁹</td>\n<td style=\"text-align: center;\">(+5.49%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Ideal.Over</td>\n<td style=\"text-align: right;\">+3.620⬝10⁹</td>\n<td style=\"text-align: center;\">(+7.46%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.PerfectPairing</td>\n<td style=\"text-align: right;\">+3.576⬝10⁹</td>\n<td style=\"text-align: center;\">(+9.81%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.DedekindDomain.PID</td>\n<td style=\"text-align: right;\">+3.567⬝10⁹</td>\n<td style=\"text-align: center;\">(+16.56%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.SpecialFunctions.PolarCoord</td>\n<td style=\"text-align: right;\">+3.436⬝10⁹</td>\n<td style=\"text-align: center;\">(+10.78%)</td>\n</tr>\n<tr>\n<td>Mathlib.Algebra.Module.Submodule.Localization</td>\n<td style=\"text-align: right;\">+3.48⬝10⁹</td>\n<td style=\"text-align: center;\">(+7.97%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.IntegrallyClosed</td>\n<td style=\"text-align: right;\">+2.938⬝10⁹</td>\n<td style=\"text-align: center;\">(+13.74%)</td>\n</tr>\n<tr>\n<td>Mathlib.Geometry.Euclidean.Inversion.Calculus</td>\n<td style=\"text-align: right;\">+2.710⬝10⁹</td>\n<td style=\"text-align: center;\">(+9.43%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.CliffordAlgebra.Contraction</td>\n<td style=\"text-align: right;\">+2.682⬝10⁹</td>\n<td style=\"text-align: center;\">(+2.40%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.SpecialFunctions.ExpDeriv</td>\n<td style=\"text-align: right;\">+2.603⬝10⁹</td>\n<td style=\"text-align: center;\">(+8.3%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.DedekindDomain.Dvr</td>\n<td style=\"text-align: right;\">+2.592⬝10⁹</td>\n<td style=\"text-align: center;\">(+27.20%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Localization.Integral</td>\n<td style=\"text-align: right;\">+2.577⬝10⁹</td>\n<td style=\"text-align: center;\">(+5.86%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Kaehler.Polynomial</td>\n<td style=\"text-align: right;\">+2.559⬝10⁹</td>\n<td style=\"text-align: center;\">(+1.56%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.SpecialFunctions.Log.Deriv</td>\n<td style=\"text-align: right;\">+2.482⬝10⁹</td>\n<td style=\"text-align: center;\">(+5.77%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.SpecialFunctions.Trigonometric.ArctanDeriv</td>\n<td style=\"text-align: right;\">+2.481⬝10⁹</td>\n<td style=\"text-align: center;\">(+10.86%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.RingHomProperties</td>\n<td style=\"text-align: right;\">+2.398⬝10⁹</td>\n<td style=\"text-align: center;\">(+11.9%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.InnerProductSpace.Orientation</td>\n<td style=\"text-align: right;\">+2.319⬝10⁹</td>\n<td style=\"text-align: center;\">(+4.48%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries</td>\n<td style=\"text-align: right;\">+2.287⬝10⁹</td>\n<td style=\"text-align: center;\">(+2.80%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.QuadraticForm.Dual</td>\n<td style=\"text-align: right;\">+2.274⬝10⁹</td>\n<td style=\"text-align: center;\">(+7.74%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.IsTensorProduct</td>\n<td style=\"text-align: right;\">+2.198⬝10⁹</td>\n<td style=\"text-align: center;\">(+1.83%)</td>\n</tr>\n<tr>\n<td>Mathlib.Algebra.Module.LinearMap.Polynomial</td>\n<td style=\"text-align: right;\">+2.194⬝10⁹</td>\n<td style=\"text-align: center;\">(+2.18%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.NormedSpace.Dual</td>\n<td style=\"text-align: right;\">+2.162⬝10⁹</td>\n<td style=\"text-align: center;\">(+5.2%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.Coevaluation</td>\n<td style=\"text-align: right;\">+2.70⬝10⁹</td>\n<td style=\"text-align: center;\">(+6.27%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Localization.LocalizationLocalization</td>\n<td style=\"text-align: right;\">+2.45⬝10⁹</td>\n<td style=\"text-align: center;\">(+8.96%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Localization.FractionRing</td>\n<td style=\"text-align: right;\">+1.962⬝10⁹</td>\n<td style=\"text-align: center;\">(+7.71%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Localization.AtPrime</td>\n<td style=\"text-align: right;\">+1.899⬝10⁹</td>\n<td style=\"text-align: center;\">(+13.46%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Flat.Stability</td>\n<td style=\"text-align: right;\">+1.759⬝10⁹</td>\n<td style=\"text-align: center;\">(+5.9%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.RootSystem.Basic</td>\n<td style=\"text-align: right;\">+1.754⬝10⁹</td>\n<td style=\"text-align: center;\">(+3.67%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.Matrix.PosDef</td>\n<td style=\"text-align: right;\">+1.702⬝10⁹</td>\n<td style=\"text-align: center;\">(+3.38%)</td>\n</tr>\n<tr>\n<td>Mathlib.Topology.ContinuousFunction.NonUnitalFunctionalCalculus</td>\n<td style=\"text-align: right;\">+1.650⬝10⁹</td>\n<td style=\"text-align: center;\">(+0.72%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.TensorProduct.MvPolynomial</td>\n<td style=\"text-align: right;\">+1.588⬝10⁹</td>\n<td style=\"text-align: center;\">(+1.73%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.QuadraticForm.Prod</td>\n<td style=\"text-align: right;\">+1.526⬝10⁹</td>\n<td style=\"text-align: center;\">(+3.69%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Localization.AsSubring</td>\n<td style=\"text-align: right;\">+1.447⬝10⁹</td>\n<td style=\"text-align: center;\">(+9.7%)</td>\n</tr>\n<tr>\n<td>Mathlib.FieldTheory.KummerExtension</td>\n<td style=\"text-align: right;\">+1.409⬝10⁹</td>\n<td style=\"text-align: center;\">(+1.19%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.SpecialFunctions.Arsinh</td>\n<td style=\"text-align: right;\">+1.394⬝10⁹</td>\n<td style=\"text-align: center;\">(+7.38%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.Convolution</td>\n<td style=\"text-align: right;\">+1.333⬝10⁹</td>\n<td style=\"text-align: center;\">(+0.35%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Polynomial.Cyclotomic.Roots</td>\n<td style=\"text-align: right;\">+1.296⬝10⁹</td>\n<td style=\"text-align: center;\">(+6.27%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Ideal.MinimalPrime</td>\n<td style=\"text-align: right;\">+1.287⬝10⁹</td>\n<td style=\"text-align: center;\">(+8.75%)</td>\n</tr>\n<tr>\n<td>Mathlib.MeasureTheory.Decomposition.SignedLebesgue</td>\n<td style=\"text-align: right;\">+1.252⬝10⁹</td>\n<td style=\"text-align: center;\">(+3.13%)</td>\n</tr>\n<tr>\n<td>Mathlib.LinearAlgebra.TensorProduct.Graded.Internal</td>\n<td style=\"text-align: right;\">+1.217⬝10⁹</td>\n<td style=\"text-align: center;\">(+0.46%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Localization.Away.AdjoinRoot</td>\n<td style=\"text-align: right;\">+1.152⬝10⁹</td>\n<td style=\"text-align: center;\">(+8.75%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.DedekindDomain.IntegralClosure</td>\n<td style=\"text-align: right;\">+1.146⬝10⁹</td>\n<td style=\"text-align: center;\">(+2.58%)</td>\n</tr>\n<tr>\n<td>Mathlib.NumberTheory.Modular</td>\n<td style=\"text-align: right;\">+1.111⬝10⁹</td>\n<td style=\"text-align: center;\">(+1.47%)</td>\n</tr>\n<tr>\n<td>Mathlib.Algebra.GCDMonoid.IntegrallyClosed</td>\n<td style=\"text-align: right;\">+1.85⬝10⁹</td>\n<td style=\"text-align: center;\">(+15.54%)</td>\n</tr>\n<tr>\n<td><code>Decrease</code></td>\n<td style=\"text-align: right;\"></td>\n<td style=\"text-align: center;\"></td>\n</tr>\n<tr>\n<td>Mathlib.AlgebraicGeometry.GammaSpecAdjunction</td>\n<td style=\"text-align: right;\">-175.385⬝10⁹</td>\n<td style=\"text-align: center;\">(-46.17%)</td>\n</tr>\n<tr>\n<td>Mathlib.AlgebraicGeometry.Scheme</td>\n<td style=\"text-align: right;\">-96.446⬝10⁹</td>\n<td style=\"text-align: center;\">(-49.30%)</td>\n</tr>\n<tr>\n<td>Mathlib.AlgebraicGeometry.AffineScheme</td>\n<td style=\"text-align: right;\">-81.35⬝10⁹</td>\n<td style=\"text-align: center;\">(-34.50%)</td>\n</tr>\n<tr>\n<td>Mathlib.AlgebraicGeometry.Spec</td>\n<td style=\"text-align: right;\">-35.358⬝10⁹</td>\n<td style=\"text-align: center;\">(-28.77%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.Localization.Basic</td>\n<td style=\"text-align: right;\">-19.575⬝10⁹</td>\n<td style=\"text-align: center;\">(-17.43%)</td>\n</tr>\n<tr>\n<td>Mathlib.Topology.ContinuousFunction.UniqueCFC</td>\n<td style=\"text-align: right;\">-10.113⬝10⁹</td>\n<td style=\"text-align: center;\">(-4.56%)</td>\n</tr>\n<tr>\n<td>Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Scheme</td>\n<td style=\"text-align: right;\">-8.615⬝10⁹</td>\n<td style=\"text-align: center;\">(-3.15%)</td>\n</tr>\n<tr>\n<td>Mathlib.MeasureTheory.Measure.FiniteMeasure</td>\n<td style=\"text-align: right;\">-7.121⬝10⁹</td>\n<td style=\"text-align: center;\">(-8.56%)</td>\n</tr>\n<tr>\n<td>Mathlib.GroupTheory.MonoidLocalization</td>\n<td style=\"text-align: right;\">-6.634⬝10⁹</td>\n<td style=\"text-align: center;\">(-5.6%)</td>\n</tr>\n<tr>\n<td>Mathlib.NumberTheory.RamificationInertia</td>\n<td style=\"text-align: right;\">-5.762⬝10⁹</td>\n<td style=\"text-align: center;\">(-1.85%)</td>\n</tr>\n<tr>\n<td>Mathlib.AlgebraicGeometry.ProjectiveSpectrum.StructureSheaf</td>\n<td style=\"text-align: right;\">-4.454⬝10⁹</td>\n<td style=\"text-align: center;\">(-4.67%)</td>\n</tr>\n<tr>\n<td>Mathlib.AlgebraicGeometry.FunctionField</td>\n<td style=\"text-align: right;\">-4.361⬝10⁹</td>\n<td style=\"text-align: center;\">(-14.60%)</td>\n</tr>\n<tr>\n<td>Mathlib.Algebra.Module.LocalizedModule</td>\n<td style=\"text-align: right;\">-4.184⬝10⁹</td>\n<td style=\"text-align: center;\">(-2.2%)</td>\n</tr>\n<tr>\n<td>Mathlib.AlgebraicGeometry.StructureSheaf</td>\n<td style=\"text-align: right;\">-3.725⬝10⁹</td>\n<td style=\"text-align: center;\">(-2.30%)</td>\n</tr>\n<tr>\n<td>Mathlib.AlgebraicGeometry.Properties</td>\n<td style=\"text-align: right;\">-3.297⬝10⁹</td>\n<td style=\"text-align: center;\">(-6.0%)</td>\n</tr>\n<tr>\n<td>Mathlib.AlgebraicGeometry.Morphisms.RingHomProperties</td>\n<td style=\"text-align: right;\">-3.273⬝10⁹</td>\n<td style=\"text-align: center;\">(-0.89%)</td>\n</tr>\n<tr>\n<td>Mathlib.Analysis.NormedSpace.Star.ContinuousFunctionalCalculus.Restrict</td>\n<td style=\"text-align: right;\">-2.269⬝10⁹</td>\n<td style=\"text-align: center;\">(-1.66%)</td>\n</tr>\n<tr>\n<td>Mathlib.RingTheory.WittVector.Identities</td>\n<td style=\"text-align: right;\">-2.123⬝10⁹</td>\n<td style=\"text-align: center;\">(-12.35%)</td>\n</tr>\n<tr>\n<td>Mathlib.AlgebraicGeometry.Morphisms.ClosedImmersion</td>\n<td style=\"text-align: right;\">-2.108⬝10⁹</td>\n<td style=\"text-align: center;\">(-8.66%)</td>\n</tr>\n</tbody>\n</table>",
        "id": 447748050,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719576435
    },
    {
        "content": "<p>It's not terrible. I would like to ID the underlying cause. I will take another look later today. Either way, we can proceed after that</p>",
        "id": 447841856,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719598994
    },
    {
        "content": "<p>Investigating this has been on my job list for two weeks but I've been the organiser of two workshops in those two weeks :-) I'll take a look now.</p>",
        "id": 447945422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719648145
    },
    {
        "content": "<p>Master (note that this was so quick that we didn't even get a profiler time,<del> I wish I could remember or know how to look up the way to decrease the \"don't report if less than this number\" profiler time default, it's rubbish being old and forgetful</del>(yay hover on <code>trace.profiler</code> told me!)):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">Field</span><span class=\"bp\">.</span><span class=\"n\">toDivisionRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"bp\">✝²⁵</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"bp\">✝²⁶</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">FractionRing</span><span class=\"bp\">.</span><span class=\"n\">field</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">IsDomain</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">IsDomain</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n</code></pre></div>\n<p>Branch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.024656</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">OreLocalization</span><span class=\"bp\">.</span><span class=\"n\">instDivisionRingNonZeroDivisors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">IsSimpleAddGroup</span><span class=\"bp\">.</span><span class=\"n\">toNontrivial</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Nontrivial</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">AddGroupWithOne</span><span class=\"bp\">.</span><span class=\"n\">toAddGroup</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddGroup</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"n\">toAddGroupWithOne</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">AddGroupWithOne</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">StrictOrderedRing</span><span class=\"bp\">.</span><span class=\"n\">toRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing</span><span class=\"bp\">.</span><span class=\"n\">toStrictOrderedRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">StrictOrderedRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommRing</span><span class=\"bp\">.</span><span class=\"n\">toLinearOrderedRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">LinearOrderedRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedField</span><span class=\"bp\">.</span><span class=\"n\">toLinearOrderedCommRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">LinearOrderedCommRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommRing</span><span class=\"bp\">.</span><span class=\"n\">toStrictOrderedRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">StrictOrderedRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommRing</span><span class=\"bp\">.</span><span class=\"n\">toStrictOrderedCommRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">StrictOrderedCommRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">OrderedRing</span><span class=\"bp\">.</span><span class=\"n\">toRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">OrderedCommRing</span><span class=\"bp\">.</span><span class=\"n\">toOrderedRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">OrderedRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommRing</span><span class=\"bp\">.</span><span class=\"n\">toOrderedCommRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">OrderedCommRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">StrictOrderedRing</span><span class=\"bp\">.</span><span class=\"n\">toOrderedRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">OrderedRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">DivisionRing</span><span class=\"bp\">.</span><span class=\"n\">toRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">Field</span><span class=\"bp\">.</span><span class=\"n\">toDivisionRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"bp\">✝²⁵</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"bp\">✝²⁶</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedField</span><span class=\"bp\">.</span><span class=\"n\">toField</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"n\">toRing</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"bp\">✝¹⁴</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"bp\">✝¹⁵</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">❌</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"bp\">✝²⁸</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"bp\">✝²⁹</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">propagating</span><span class=\"w\"> </span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"n\">CommRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">propagating</span><span class=\"w\"> </span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"n\">Ring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">AddGroupWithOne</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">propagating</span><span class=\"w\"> </span><span class=\"n\">AddGroupWithOne</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"n\">AddGroupWithOne</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">AddGroup</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">propagating</span><span class=\"w\"> </span><span class=\"n\">AddGroup</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"n\">AddGroup</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Nontrivial</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">IsSimpleGroup</span><span class=\"bp\">.</span><span class=\"n\">toNontrivial</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Nontrivial</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">CommGroup</span><span class=\"bp\">.</span><span class=\"n\">toGroup</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Group</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">OrderedCommGroup</span><span class=\"bp\">.</span><span class=\"n\">toCommGroup</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">CommGroup</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommGroup</span><span class=\"bp\">.</span><span class=\"n\">toOrderedCommGroup</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">OrderedCommGroup</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LocalRing</span><span class=\"bp\">.</span><span class=\"n\">toNontrivial</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Nontrivial</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">IdemSemiring</span><span class=\"bp\">.</span><span class=\"n\">toSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">KleeneAlgebra</span><span class=\"bp\">.</span><span class=\"n\">toIdemSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">IdemSemiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">IdemCommSemiring</span><span class=\"bp\">.</span><span class=\"n\">toIdemSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">IdemSemiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">StrictOrderedSemiring</span><span class=\"bp\">.</span><span class=\"n\">toSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedSemiring</span><span class=\"bp\">.</span><span class=\"n\">toStrictOrderedSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">StrictOrderedSemiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommSemiring</span><span class=\"bp\">.</span><span class=\"n\">toLinearOrderedSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">LinearOrderedSemiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedSemifield</span><span class=\"bp\">.</span><span class=\"n\">toLinearOrderedCommSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">LinearOrderedCommSemiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">CanonicallyLinearOrderedSemifield</span><span class=\"bp\">.</span><span class=\"n\">toLinearOrderedSemifield</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">LinearOrderedSemifield</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedField</span><span class=\"bp\">.</span><span class=\"n\">toLinearOrderedSemifield</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">LinearOrderedSemifield</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommRing</span><span class=\"bp\">.</span><span class=\"n\">toLinearOrderedCommSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">LinearOrderedCommSemiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing</span><span class=\"bp\">.</span><span class=\"n\">toLinearOrderedSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">LinearOrderedSemiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommSemiring</span><span class=\"bp\">.</span><span class=\"n\">toStrictOrderedSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">StrictOrderedSemiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">LinearOrderedCommSemiring</span><span class=\"bp\">.</span><span class=\"n\">toStrictOrderedCommSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">StrictOrderedCommSemiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">StrictOrderedCommRing</span><span class=\"bp\">.</span><span class=\"n\">toStrictOrderedCommSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">StrictOrderedCommSemiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">StrictOrderedRing</span><span class=\"bp\">.</span><span class=\"n\">toStrictOrderedSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">StrictOrderedSemiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">OrderedSemiring</span><span class=\"bp\">.</span><span class=\"n\">toSemiring</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Semiring</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"mi\">164</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">entries</span><span class=\"bp\">...</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n</code></pre></div>\n<p>(note the \"164 more entries\")</p>",
        "id": 447947412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719649367
    },
    {
        "content": "<p>So we now have an exciting new option for proving that something is a division ring, which seems to take us on lots of adventures.<br>\nMaster:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Field</span><span class=\"bp\">.</span><span class=\"n\">toDivisionRing</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Branch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Field</span><span class=\"bp\">.</span><span class=\"n\">toDivisionRing</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">OreLocalization</span><span class=\"bp\">.</span><span class=\"n\">instDivisionRingNonZeroDivisors</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 447948357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719650074
    },
    {
        "content": "<p>Is this unavoidable if I want to make <code>FractionRing</code> non-commutative?</p>",
        "id": 447948796,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1719650432
    },
    {
        "content": "<p>It seems like the main culprit is the <code>Nontrivial</code> instances.</p>",
        "id": 447948807,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1719650442
    },
    {
        "content": "<p>I've (hopefully) tried the dumb thing of \"make Lean try the field version first\" in <a href=\"https://github.com/leanprover-community/mathlib4/pull/14257\">#14257</a> , with this priority modification:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">900</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">DivisionRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"bp\">⁰⁻¹</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">mul_inv_cancel</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">OreLocalization</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel</span>\n<span class=\"w\">  </span><span class=\"n\">inv_zero</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">OreLocalization</span><span class=\"bp\">.</span><span class=\"n\">inv_zero</span>\n<span class=\"w\">  </span><span class=\"n\">nnqsmul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">  </span><span class=\"n\">qsmul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n</code></pre></div>\n<p>Benchmarking hopefully on the way (I don't know what it will compare my branch against, hopefully not your branch :-) )</p>",
        "id": 447948914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719650525
    },
    {
        "content": "<p>Nope, that's not it</p>",
        "id": 447955252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719653538
    },
    {
        "content": "<p>Lots of things are just twice as slow in some files. Here is a trace of the proof of ClassGroup.mk0_integralRep in Ringtheory/ClassGroup.lean:</p>\n<p>Branch:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>  [] [0.072115] rw [← ClassGroup.mk_mk0 (FractionRing R), eq_comm, ClassGroup.mk_eq_mk] ▶\n  [] [0.190052] have fd_ne_zero : (algebraMap R (FractionRing R)) I.1.den ≠ 0 := by\n      exact IsFractionRing.to_map_ne_zero_of_mem_nonZeroDivisors (SetLike.coe_mem _) ▶\n  [] [0.032983] refine ⟨Units.mk0 (algebraMap R _ I.1.den) fd_ne_zero, ?_⟩ ▶\n  [] [0.010530] apply Units.ext ▶\n  [] [0.341623] rw [mul_comm, val_mul, coe_toPrincipalIdeal, val_mk0] ▶\n  [] [0.088342] exact FractionalIdeal.den_mul_self_eq_num' R⁰ (FractionRing R) I ▶\n</code></pre></div>\n<p>And here it is on master:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>  [] [0.032609] rw [← ClassGroup.mk_mk0 (FractionRing R), eq_comm, ClassGroup.mk_eq_mk] ▶\n  [] [0.064560] have fd_ne_zero : (algebraMap R (FractionRing R)) I.1.den ≠ 0 := by\n      exact IsFractionRing.to_map_ne_zero_of_mem_nonZeroDivisors (SetLike.coe_mem _) ▶\n  [] [0.011499] refine ⟨Units.mk0 (algebraMap R _ I.1.den) fd_ne_zero, ?_⟩ ▶\n  [] [0.006982] apply Units.ext ▶\n  [] [0.132865] rw [mul_comm, val_mul, coe_toPrincipalIdeal, val_mk0] ▶\n  [] [0.036618] exact FractionalIdeal.den_mul_self_eq_num' R⁰ (FractionRing R) I ▶\n</code></pre></div>",
        "id": 447965139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719658809
    },
    {
        "content": "<p>Internally typeclass inference is just taking longer to do those silly \"oh look those ring instances were defeq after all\" checks which are the bane of all our lives. Here's a random snapshot.</p>\n<p>Branch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.003429</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=?=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.001111</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">FractionalIdeal</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">⁰</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=?=</span><span class=\"w\"> </span><span class=\"n\">FractionalIdeal</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">⁰</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.002302</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=?=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n</code></pre></div>\n<p>Master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.001835</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=?=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.001718</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=?=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n</code></pre></div>\n<p>(we're in the middle of a proof of <code>Semiring.npow = Semiring.npow</code>, which occurs both on master and on the branch).  The branch takes twice as long as master to deal with this, partly because on the branch, defeq is distracted by </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">FractionalIdeal</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"bp\">✝¹¹</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">⁰</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">OreLocalization</span><span class=\"bp\">.</span><span class=\"n\">instCommRing</span><span class=\"w\"> </span><span class=\"n\">OreLocalization</span><span class=\"bp\">.</span><span class=\"n\">instAlgebra</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u_1</span>\n\n<span class=\"bp\">=?=</span>\n\n<span class=\"bp\">@</span><span class=\"n\">FractionalIdeal</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"bp\">✝¹¹</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">⁰</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FractionRing</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">EuclideanDomain</span><span class=\"bp\">.</span><span class=\"n\">toCommRing</span><span class=\"w\"> </span><span class=\"n\">OreLocalization</span><span class=\"bp\">.</span><span class=\"n\">instAlgebra</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u_1</span>\n</code></pre></div>\n<p>(this check doesn't occur at all on master, or maybe it does happen but it takes &lt; 0.001 s which to be honest is probably what's happening), and this is presumably because <code>Localization.instCommRing</code> (the instance corresponding to <code>OreLocalization.instCommRing</code> on master) was somehow closer to <code>EuclideanDomain.toCommRing</code> than <code>OreLocalization.instCommRing</code> is.</p>",
        "id": 447966086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719659515
    },
    {
        "content": "<p>Basically, it seems that if you move localization away from being a commutative theory, then Lean has to work harder to reconcile things with the general commutative theory (Euclidean domains, fields etc) in the commutative setting :-( On the other hand it's probably a good idea to do it, and it's not like the file is unusable by any stretch of the imagination -- the class group file is still very fast and responsive, it's just that it happens to be 50% slower than it was when we were pretending that noncommutative rings didn't exist.</p>",
        "id": 447967918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719660770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Refactoring.20Localization/near/447967918\">said</a>:</p>\n<blockquote>\n<p>it's just that it happens to be 50% slower than it was when we were pretending that noncommutative rings didn't exist.</p>\n</blockquote>\n<p>Isn't that also what happens with human students?</p>",
        "id": 447968432,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719661093
    },
    {
        "content": "<p>Maybe the slowdown problem is completely independent of the PR, the fact that I'm still looking at traces of proofs of <code>Semiring.npow = Semiring.npow</code> at all is perhaps an indication that somewhere we've got our preferred parents wrong, and this PR is just making an already-existing problem worse. This problem is pretty mild though, as I say it's still  very easy to use the files, things are taking 0.3 seconds instead of 0.2 seconds rather than taking 10 seconds instead of 5 seconds. I'm now with Matt: happy to merge. I suspect that this PR is not the problem, i.e. the solution is not by changing this PR, the problem is elsewhere and independent.</p>\n<p>My instinct is to see what Matt thinks and if he's happy to merge it then let's go for it, and if he doesn't say anything for a couple of days because he's currently got his hands ridulously full right now then we merge it anyway, but if he's not happy then hopefully he can give me more of an indication as to what I should be doing to help here. Next week is the first week for a month that I'm not organising a workshop so perhaps I can get more than 0 things done.</p>",
        "id": 447968449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719661114
    },
    {
        "content": "<p>I am taking a look. Extending my deadline to this evening to finish</p>",
        "id": 448109815,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719749443
    },
    {
        "content": "<p>A larger problem that affects us here: the simp keys for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=map_zero#doc\">docs#map_zero</a> are </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">DFunLike.coe</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>so Lean will try <code>map_zero</code> whenever it sees a coercion to a function through a <code>FunLike</code> instance applied to <code>0</code>. However, this only works when we have an <code>[ZeroHomClass F M N]</code> so Lean will try to synthesize it dragging on performance, sometimes dramatically.</p>",
        "id": 448371717,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719849311
    },
    {
        "content": "<p>This is a curse of unbundling things: the statement of the theorem is more \"elementary\" and the proof is not. The matching in the discrimination tree, which is the filter safeguard, lets it through when we match the more elementary conditions. Then Lean tries to find the non-elementary parts to make it work</p>",
        "id": 448372173,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719849451
    },
    {
        "content": "<p>This happens a lot in <code>LinearAlgebra</code> also</p>",
        "id": 448372679,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719849595
    },
    {
        "content": "<p>Why is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FractionRing#doc\">docs#FractionRing</a> an <code>abbrev</code>?</p>",
        "id": 448381363,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719851482
    },
    {
        "content": "<p>Because all the instances on it comes from instances on <code>Localization</code> (both in the PR, and in currently in mathlib)</p>",
        "id": 448381702,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1719851545
    },
    {
        "content": "<p>I've merged master to see if anything from <code>4.10</code> helps. After that I will delegate.</p>",
        "id": 448396278,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719855547
    }
]