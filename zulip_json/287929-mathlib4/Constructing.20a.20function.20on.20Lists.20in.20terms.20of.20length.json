[
    {
        "content": "<p>For a type <code>α</code> (that is a metric space), I am currently trying to construct a function <code>g : List Bool → Set α</code> such that for any two lists <code>l1</code> and <code>l2</code>, if <code>l1</code> is a prefix of <code>l2</code>, then <code>g l2 ⊆ g l1</code> (the outputs should all be nonempty and two distinct lists of the same length should map to disjoint sets, among a couple other conditions).</p>\n<p>I currently have the machinery to, given a <code>Finset (Set α)</code> meeting the conditions above, I can split it into another <code>Finset (Set α)</code> with twice as many elements, also meeting the conditions and having two subsets of each of the elements in the original Finset (or well, I have the preliminary results to prove that splitting lemma once I know exactly how to formulate it to solve this problem.</p>\n<p>Does anyone have any ideas how I should formulate the splitting lemma and/or go about the construction once I have it? I'd imagine I'd have to do it by induction/recursion but I don't know how.</p>",
        "id": 422639112,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1708528297
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 422694278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708544880
    },
    {
        "content": "<p>What's your maths proof that such a function exists? In fact, in this generality such a function doesn't always exist (for example if alpha is finite).</p>",
        "id": 422694440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708544950
    },
    {
        "content": "<p>If alpha is infinite, then choose an injection from the naturals into alpha and then define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> by sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a_0,a_1,\\ldots,a_{n-1}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> to the image under the injection of all the naturals congruent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>a</mi><mi>i</mi></msub><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_i a_i2^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1244em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span> mod <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, where you identify <code>Bool</code> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 422695377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708545325
    },
    {
        "content": "<p>I think what Connor is asking is how to define a function <code>f : List Bool \\to X</code> inductively where <code>f</code> of a list <code>a :: s</code> of length <code>n+1</code> does not just depend on <code>f s</code> (as in the default <code>List.rec</code>), but on <code>f t</code> for all lists <code>t</code> of length <code>n</code>.</p>",
        "id": 422699253,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1708546961
    },
    {
        "content": "<p>(I also would like to know how to do this)</p>",
        "id": 422699317,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1708546999
    },
    {
        "content": "<p>One option is to define functions <code>(f n) : {s : List Bool | s.length = n} \\to X</code> by induction on <code>n</code>. I am not sure if this is the cleanest way to do it though.</p>",
        "id": 422700246,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1708547411
    },
    {
        "content": "<p>Felix is correct, this is what I am looking for. The full context can be found in <a href=\"#narrow/stream/287929-mathlib4/topic/Lusin.20Novikov.20In.20Mathlib/near/422476842\">this conversation</a>, but right now I'm trying to compartmentalize the remainder of the proof into pieces that I could feasibly work on, and figuring out how to get this definition right is an important one.</p>",
        "id": 422702690,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1708548539
    },
    {
        "content": "<p>You can make your own recursors, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.rec_on_length</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">M.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">L.length</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">L</span> <span class=\"bp\">↦</span> <span class=\"n\">IH</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">M</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">M.rec_on_length</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">IH</span><span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">L</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.length</span> <span class=\"n\">L</span>\n</code></pre></div>\n<p>I'm no expert in this though. That should be something which, given a \"recipe\" <code>IH</code> which takes as input a list <code>L</code>, and an element of beta attached to every list of length less than <code>L</code>'s length, returns an element of beta, will give you the recursively-defined function to beta defined by the recipe.</p>",
        "id": 422705326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708549749
    },
    {
        "content": "<p>you can just define your function recursively and prove termination as needed.</p>",
        "id": 422705970,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708550046
    }
]