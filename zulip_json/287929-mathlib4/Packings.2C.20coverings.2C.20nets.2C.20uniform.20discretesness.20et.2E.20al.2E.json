[
    {
        "content": "<p>I have been playing around with something I have meant to define for some time now (for nearly two years - been busy!): a set of definitions to try and capture the contents of <a href=\"https://en.wikipedia.org/wiki/Delone_set\">https://en.wikipedia.org/wiki/Delone_set</a>. The direct motivation for this is to have an effective language to reason about (linear or otherwise) codes in, especially with the Hamming distance. (The notion of a uniformly discrete distance, for instance, defined at the head of here, is exactly that property of the Hamming distance that lets us say that non-equal elements have hamming distance at least 1, etc., etc.)</p>\n<p>I don't think all these definitions are perfect, and perhaps I have missed something and I have some of them already. So the reason I am raising this topic here is that I want feedback on what I've lain down so far, and open thoughts.</p>\n<p>(By the way, note that as currently defined the Hamming distance is also bounded! I suppose we could have an infinite version but I seem to recall we wanted to do it this way so we could stay in relatively easy to work with finite land.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Infsep</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">DiscreteDist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Dist</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">exists_pos_lt_dist</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">BoundedDist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Dist</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">exists_finite_dist_lt</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">DiscreteEDist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">EDist</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">exists_pos_lt_edist</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">BoundedEDist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">EDist</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">exists_finite_edist_lt</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DiscreteDist</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteEDist</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">exists_pos_lt_edist</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">DiscreteDist.exists_pos_lt_dist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r_pos</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">ENNReal.ofReal</span> <span class=\"n\">r</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">edist_dist</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.ofReal_lt_ofReal_iff_of_nonneg</span> <span class=\"n\">r_pos.le</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.ofReal_pos</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">r_pos</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedDist</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BoundedEDist</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">exists_finite_edist_lt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">BoundedDist.exists_finite_dist_lt</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">ENNReal.ofReal</span> <span class=\"n\">R</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">edist_dist</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.ofReal_lt_ofReal_iff'</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.ofReal_lt_top</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">forall_and</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">dist_nonneg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Set</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">PseudoEMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">packingRadius</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span>\n<span class=\"n\">sSup</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.PairwiseDisjoint</span> <span class=\"o\">(</span><span class=\"n\">EMetric.ball</span> <span class=\"bp\">·</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">packingRadius_eq_half_einfsep</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.packingRadius</span> <span class=\"bp\">=</span> <span class=\"n\">s.einfsep</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">coveringRadius</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span>\n    <span class=\"n\">sInf</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">EMetric.closedBall</span> <span class=\"bp\">.</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span>\n\n<span class=\"c1\">-- lemma coveringRadius_eq_something (infEDist? something not defined which should be?)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isPacking</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">s.packingRadius</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isCovering</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s.coveringRadius</span> <span class=\"bp\">≤</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isNet</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s.isPacking</span> <span class=\"n\">e</span> <span class=\"bp\">∧</span> <span class=\"n\">s.isCovering</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uniformlyDiscrete</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.packingRadius</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">relativelyDense</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s.coveringRadius</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">delone</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s.uniformlyDiscrete</span> <span class=\"bp\">∧</span> <span class=\"n\">s.relativelyDense</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">uniformlyDiscrete_of_isPacking_pos</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.isPacking</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.uniformlyDiscrete</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.mul_pos_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">h.trans_lt'</span> <span class=\"n\">e_pos</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">relativelyDense_of_isCovering_finite</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_finite</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.isCovering</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.relativelyDense</span> <span class=\"o\">:=</span> <span class=\"n\">h.trans_lt</span> <span class=\"n\">e_finite</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">delone_of_isNet_pos_finite</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_finite</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.isNet</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.delone</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">s.uniformlyDiscrete_of_isPacking_pos</span> <span class=\"n\">_</span> <span class=\"n\">e_pos</span> <span class=\"n\">h.1</span><span class=\"o\">,</span>\n  <span class=\"n\">s.relativelyDense_of_isCovering_finite</span> <span class=\"n\">_</span> <span class=\"n\">e_finite</span> <span class=\"n\">h.2</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Set</span>\n</code></pre></div>",
        "id": 418743219,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1706573040
    },
    {
        "content": "<p>The definitions you have from <code>packingRadius</code> on wards seem to line up with what is mentioned in <a href=\"https://en.wikipedia.org/wiki/Delone_set\">Delone set</a> nicely.  I am still trying to wrap my mind around how you would connect this with the class definitions you have above?   I would imagine that if you have had instances of <code>DiscreteDist</code> and <code>BoundedDist</code> on \\alpha that you would then hope to be able to derive <code>s.delone</code> (or something of that sort)?</p>",
        "id": 421898640,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708102083
    },
    {
        "content": "<p>Yes, I think that then follows.</p>",
        "id": 421898806,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708102132
    },
    {
        "content": "<p>I would like to see this in mathlib so if you need any help, let me know.</p>",
        "id": 421898939,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708102179
    },
    {
        "content": "<p>Thanks. I don't have any time right now but - oh, I can't remember his name, but if you search \"Delone\" I've been talking about this recently with another community member.</p>",
        "id": 421899092,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708102226
    },
    {
        "content": "<p>(I'm moving house in two weeks.)</p>",
        "id": 421899120,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708102236
    },
    {
        "content": "<p>Yes, I read that chat.  Do you have a branch you have already started working on?</p>",
        "id": 421899188,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708102262
    },
    {
        "content": "<p>Me personally? No I don't think I pushed it.</p>",
        "id": 421899253,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708102283
    },
    {
        "content": "<p>I'm really interested in this being in MathLib too, especially as I made the original infsep definition that I think is flawed but a decent start. It's purely been a finding time thing.</p>",
        "id": 421899409,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708102330
    },
    {
        "content": "<p>Very interested in collaborating on this though.</p>",
        "id": 421899431,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708102338
    },
    {
        "content": "<p>Okay, I can put up a draft branch if you would like to collaborate on this if that is okay with you.</p>",
        "id": 421899511,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708102373
    },
    {
        "content": "<p>Sounds great.</p>",
        "id": 421899543,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708102388
    },
    {
        "content": "<p>Incidentally it's possible that we shouldn't define packingRadius as above (if you read that discussion, you'll have seen the issues that creep in in the discrete case) but it feels like one those things we're just going to need to get right by experimentation</p>",
        "id": 421899901,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708102526
    },
    {
        "content": "<p>(I think I may have had a local branch where I was playing around with some other definitions but I can't access it right now, so press ahead and we'll throw some stuff together and see where we get to.)</p>",
        "id": 421900099,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708102587
    },
    {
        "content": "<p>At first I was thinking of naming the file Delone and putting in the same directory as your infsep but I can easily see this file can expand on to Meyer sets etc.  That is, things like ε-nets, ε-packings, ε-coverings, uniformly discrete sets, relatively dense sets, Delone sets, Meyer sets etc.  Maybe call the file epsilon.lean?</p>",
        "id": 421900568,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708102770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/421899901\">said</a>:</p>\n<blockquote>\n<p>Incidentally it's possible that we shouldn't define packingRadius as above (if you read that discussion, you'll have seen the issues that creep in in the discrete case) but it feels like one those things we're just going to need to get right by experimentation</p>\n</blockquote>\n<p>I have seen another definition of packing radius</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>r</mi><mi>p</mi></msub><mo>=</mo><mi>sup</mi><mo>⁡</mo><mo stretchy=\"false\">{</mo><mi>r</mi><mo>&gt;</mo><mn>0</mn><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><mi mathvariant=\"normal\">Λ</mi><mo>∈</mo><munder><mo>⋃</mo><mrow><mi>R</mi><mo>&gt;</mo><mn>0</mn></mrow></munder><msub><mi>D</mi><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">r_p = \\sup\\{ r &gt; 0\\ |\\ \\Lambda  \\in \\bigcup_{R &gt; 0} D_{(r, R)}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">sup</span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mspace\"> </span><span class=\"mord\">∣</span><span class=\"mspace\"> </span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3717em;vertical-align:-1.3217em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8557em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mrel mtight\">&gt;</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">⋃</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3217em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></span></p>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>D</mi><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">D_{(r, R)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0385em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span></span></span></span> is the set of all Delone sets with two choosen radii <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> so that $$U = $B_{r(0)}<span class=\"tex-error\">$$ and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>=</mo><msub><mi>B</mi><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">K = B_{R(0)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0385em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">0</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span></span></span></span> are appropriate \"confining\" neighborhoods (of uniform discreteness and relative denseness) for $$</span>\\Lambda$$.</p>\n<p>But this requires defining and using the Minkowski sum and difference to define uniform discreteness and relative denseness beforehand.</p>",
        "id": 421903723,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708103772
    },
    {
        "content": "<p>What's the Minkowski sum and difference?</p>",
        "id": 421903842,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708103810
    },
    {
        "content": "<p>This does look like it's maybe workable. In a sense the key thing is that you can link it back to things like the concept of \"minimum distance\" when that is possible.</p>",
        "id": 421904122,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708103895
    },
    {
        "content": "<p>Hmm, looking up the Minkowski sum and difference, that does seem as if it needs an underlying addition operation...</p>",
        "id": 421904344,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708103971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/421904344\">said</a>:</p>\n<blockquote>\n<p>Hmm, looking up the Minkowski sum and difference, that does seem as if it needs an underlying addition operation...</p>\n</blockquote>\n<p>Yes, the definitions I have seen assume an Euclidean space.</p>",
        "id": 421904571,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708104028
    },
    {
        "content": "<p>Right, whereas we're thinking - well, the prototypical example in coding theory is the hamming distance but other metrics exist</p>",
        "id": 421904709,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708104072
    },
    {
        "content": "<p>And it feels as if there should be a unifying description</p>",
        "id": 421904754,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708104087
    },
    {
        "content": "<p>However, there are pointwise operations on sets.</p>",
        "id": 421904766,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708104091
    },
    {
        "content": "<p>So I am not sure that this is an issue.</p>",
        "id": 421905597,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708104359
    },
    {
        "content": "<p>Right</p>",
        "id": 421905940,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708104466
    },
    {
        "content": "<p>I mean as I say for a space with the hamming distance there's not necessarily any kind of operation at all.</p>",
        "id": 421906107,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708104518
    },
    {
        "content": "<p>From what I have seen in the literature, the packing and covering radius in coding theory are derived from a lattice subset of an Euclidean space.  Hamming distance is also defined as the difference between two strings, which are modeled as vectors in a vector space and so on.  I am not an expert in this area but I have a feeling that although the majority of mathlib builds from the general to the concrete, maybe this time the hamming distance will need to be modeled from the concrete as to get to the general. (I am just going off Wikipedia and <em>Lattice and Codes - Ebeling</em>).  </p>\n<p>That is, we define things using more concrete definitions of Metric/Euclidean space and work backwards for the coding theory bits that are needed.  This would be following the route of the literature at least from what I can tell.</p>",
        "id": 421912701,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708106781
    },
    {
        "content": "<p>Will re-read over that chat you had to see what the main issues you were having with the packing radius were.</p>",
        "id": 421912839,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708106837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span>, are you thinking of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Metric.thickening#doc\">docs#Metric.thickening</a> ?</p>",
        "id": 421913079,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708106919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span> well, by definition it isn't a Euclidean space, because then it would have the Euclidean distance. And technically a Hamming space just needs, well, equality of elements. Linear codes are a vector space but they could, for instance, be over a finite field, where there's no notion of being embedded inside a Euclidean space at all.</p>",
        "id": 421913931,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708107260
    },
    {
        "content": "<p>The Euclidean or metric space assumption was for the packing and covering radii, since those are needed for Delone sets.  I was assuming that for the Hamming distance/space etc. that would be handled in another branch.  What I was trying to get at was the concern over using balls for the packing radius definition.  I have still yet to read up on that discussion to understand the issue and was getting ahead of myself some.</p>",
        "id": 421916850,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708108389
    },
    {
        "content": "<p>Well the Hamming space is also a metric space, that's fine.</p>",
        "id": 421917010,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708108446
    },
    {
        "content": "<p>(we already have that)</p>",
        "id": 421917017,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708108451
    },
    {
        "content": "<p>The concern basically boils down to - when your metric is integer valued, or I guess really discrete such that you don't have \"continuous\" values but it's especially clear in the integer case, one can end up with - well, for instance, open balls of radius 1 around distinct points won't intersect, so you always have the packing radius at least 1, but that's true even if the minimum distance is 1... basically the difference between open and closed balls matters more.</p>",
        "id": 421917661,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708108692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/421913079\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span>, are you thinking of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Metric.thickening#doc\">docs#Metric.thickening</a> ?</p>\n</blockquote>\n<p>No (although this is first time I am seeing this).</p>",
        "id": 421919244,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708109378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span> just to get something on the board: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10641\">#10641</a></p>",
        "id": 421930787,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708114038
    },
    {
        "content": "<p>I like the name</p>",
        "id": 421930909,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708114083
    },
    {
        "content": "<p>I think it would not be unreasonable to remove InfSep.lean and put its contents here</p>",
        "id": 421930962,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708114098
    },
    {
        "content": "<p>It certainly seems intimately bound up in this</p>",
        "id": 421930980,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708114108
    },
    {
        "content": "<p>I'm not sure it's in my definitions above but I did define the equivalent definition to infsep but for covering radius... somewhere...</p>",
        "id": 421931205,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708114208
    },
    {
        "content": "<p>I'm trying to remember if I posted it. Sorry, I'm just a bit out of it with stress as I say.</p>",
        "id": 421931243,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708114228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/421931243\">said</a>:</p>\n<blockquote>\n<p>I'm trying to remember if I posted it. Sorry, I'm just a bit out of it with stress as I say.</p>\n</blockquote>\n<p>No worries, I will remove infsep and add it to the file.</p>",
        "id": 421931312,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708114267
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 421931360,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708114287
    },
    {
        "content": "<p>I wonder if we can remove all the #aligns?</p>",
        "id": 421931742,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708114447
    },
    {
        "content": "<p>Morally I feel like it should be fine but I don't know what the policy on them is</p>",
        "id": 421931807,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708114479
    },
    {
        "content": "<p>Why do you want to remove aligns?</p>",
        "id": 421932022,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708114567
    },
    {
        "content": "<p>It might be good to state some goals: I think broadly what we are looking for here is, aside from the specific context of coding theory, to get concepts such as Delone sets, packing radii, minimum distance and so forth to a) lie flat together, b) be defined in Mathlib to an appropriate degree of generality i.e. for as arbitrary a metric space as possible.</p>",
        "id": 421933419,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708115190
    },
    {
        "content": "<p>The wrinkles come in because in the literature, different definitions are sometimes used, and in general settings they might not be equivalent.</p>",
        "id": 421933467,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708115216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/421932022\">said</a>:</p>\n<blockquote>\n<p>Why do you want to remove aligns?</p>\n</blockquote>\n<p>It was only a thought since I am moving a previous file into a new one.</p>",
        "id": 421933526,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708115235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"684366\">@Edward van de Meent</span> feel free to use your thread for discussing coding theory in specific, but the general discussion should I think go here</p>",
        "id": 421933564,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708115249
    },
    {
        "content": "<p>Please do not remove any <code>#align</code> from Mathlib until we officially deprecate mathport.</p>",
        "id": 421934050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708115448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/421934050\">said</a>:</p>\n<blockquote>\n<p>Please do not remove any <code>#align</code> from Mathlib until we officially deprecate mathport.</p>\n</blockquote>\n<p>Thanks, good to understand the policy.</p>",
        "id": 421934087,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708115462
    },
    {
        "content": "<p>I now it seems crazy that people could start porting a Lean 3 project now. But it could happen and the vague goal was to make it possible to do so for one year after the port.</p>",
        "id": 421934156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708115499
    },
    {
        "content": "<p>For sure</p>",
        "id": 421934196,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708115516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span> i took a look at the current definitions in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10641\">#10641</a> ... i noticed that your definitions uses the sSup and sInf from ENNReal... i don't think this is quite what we want... in particular i think we'd like this to depend on the codomain we're looking at... i got around this problem by defining my own kind of general metric spaces... is this something that you think might be a viable option?<br>\nfor example, i defined stuff like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">GDist</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">gdist</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gdist</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]{</span><span class=\"n\">α</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">GDist</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">GDist.gdist</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">GPseudoMetricSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">GDist</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">gdist_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">gdist_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">gdist</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n  <span class=\"n\">gdist_triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">gdist</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n  <span class=\"n\">toBornology</span> <span class=\"o\">:</span> <span class=\"n\">Bornology</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Bornology.ofGDist</span> <span class=\"n\">gdist</span> <span class=\"n\">gdist_comm</span> <span class=\"n\">gdist_triangle</span>\n  <span class=\"n\">cobounded_sets</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Bornology.cobounded</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">=</span>\n    <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>for most of the DeloneSet stuff i used a mixin to be able to combine <code>CompleteLinearOrder</code> and <code>LinearOrderedAddCommMonoid</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsOrderedAddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">:</span><span class=\"n\">IsOrderedAddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]:</span>\n  <span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">,</span><span class=\"n\">h3</span> <span class=\"k\">with</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>this way you avoid diamonds while assuming both of them</p>",
        "id": 421934945,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708115867
    },
    {
        "content": "<p>(not mwe but it should give a sense of how i went about some of these things)</p>",
        "id": 421935060,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708115922
    },
    {
        "content": "<p>I think defining a general metric is an idea with metric but it's possibly beyond scope of this, I'm not sure.</p>",
        "id": 421935126,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708115959
    },
    {
        "content": "<p>it does fix how you might expect the covering radius and packing radius to work...</p>",
        "id": 421935199,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708116002
    },
    {
        "content": "<p>i.e. have them be discrete when the distance is</p>",
        "id": 421935259,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708116025
    },
    {
        "content": "<p>Yeah, I'm just wondering if there's another way</p>",
        "id": 421935312,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116054
    },
    {
        "content": "<p>i suppose there might be some construction where you always cast between <code>ENNReal</code>and the 'actual' codomain of your metric but i think that might get tedious</p>",
        "id": 421935468,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708116127
    },
    {
        "content": "<p>Well we already have that to a degree when you need to work with real metrics...</p>",
        "id": 421935525,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116158
    },
    {
        "content": "<p>the fact that it's currently like that doesn't mean there can't be a better solution...</p>",
        "id": 421935610,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708116209
    },
    {
        "content": "<p>Ultimately as you say you want it to be true that if the range of your metric is discrete - to put it another way, if the distance between objects decreases in \"chunks\" - then this is also true of the covering and packing radii in the way that we would expect.</p>",
        "id": 421935730,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116263
    },
    {
        "content": "<p>And it feels like this is a property of the metric, to be sure, but not one that necessarily needs the codomain to be different.</p>",
        "id": 421935776,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116292
    },
    {
        "content": "<p>In the particular case where the range is nonnegative Integers, it's easy to work with, but what if it were nonnegative half integers, or some other type on which a bunch of stuff isn't already defined?</p>",
        "id": 421935903,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116358
    },
    {
        "content": "<p>Better I think to work with sets than types</p>",
        "id": 421935957,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116369
    },
    {
        "content": "<p>what if the metric can't be embedded in ENNReal though? then you also get problems...</p>",
        "id": 421936030,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708116414
    },
    {
        "content": "<p>For sure. I can't think of any examples where that might happen</p>",
        "id": 421936060,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116431
    },
    {
        "content": "<p>you might define a metric to nonneg hyperreals or to nonneg surreals? i don't think you can embed those...</p>",
        "id": 421936140,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708116478
    },
    {
        "content": "<p>I suppose. But I'm not even sure we currently have those in Mathlib in any form - this might be the limit of what we should generalise</p>",
        "id": 421936285,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116547
    },
    {
        "content": "<p>i believe that hyperreals are a thing?</p>",
        "id": 421936300,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708116560
    },
    {
        "content": "<p>yup.</p>",
        "id": 421936354,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708116593
    },
    {
        "content": "<p>it's at <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Real/Hyperreal.html#Hyperreal\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Real/Hyperreal.html#Hyperreal</a></p>",
        "id": 421936480,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708116650
    },
    {
        "content": "<p>Yeah I guess in the most most general case, you would embed a metric in the surreals</p>",
        "id": 421936811,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116831
    },
    {
        "content": "<p>But essentially I think I think we should stick to the extended nnreals for now.</p>",
        "id": 421936875,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116849
    },
    {
        "content": "<p>but i already have the definitions, and porting the necessary lemmas from PseudoMetricSpace and MetricSpace is very easy, just a case of adding G's, beta's, and sometimes adding some assumption about cancelling . this should work for most things you might need. it would be a shame if i were not to use them <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 421936975,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708116921
    },
    {
        "content": "<p>We have the surreals but their basic theory is not complete.</p>",
        "id": 421936989,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116927
    },
    {
        "content": "<p>yes, so just generalise the codomain and it's fixed?</p>",
        "id": 421937024,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708116953
    },
    {
        "content": "<p>No for sure. I'm very much in favour of generalized metrics in general. There was someone else talking about them fairly recently...</p>",
        "id": 421937027,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116954
    },
    {
        "content": "<p>(that might have been me?)</p>",
        "id": 421937092,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708116972
    },
    {
        "content": "<p>Maybe?</p>",
        "id": 421937107,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116981
    },
    {
        "content": "<p>My memory is poor, especially without avatars.</p>",
        "id": 421937147,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708116997
    },
    {
        "content": "<p>I didn't think so though. Anyway! It seems a shame to throw away your work on that. But they could be added without this Delone/radius stuff, couldn't they?</p>",
        "id": 421937241,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708117047
    },
    {
        "content": "<p>they could... but the fact that we want these definitions to work is a great reason to include them</p>",
        "id": 421937328,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708117086
    },
    {
        "content": "<p>I agree. But what I'm suggesting is another PR to base <a href=\"https://github.com/leanprover-community/mathlib4/pull/10641\">#10641</a> on.</p>",
        "id": 421938024,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708117386
    },
    {
        "content": "<p>i'm not sure i quite understand what that entices precisely, could you please elaborate?</p>",
        "id": 421938253,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708117491
    },
    {
        "content": "<p>As in, prepare a branch with generalised metrics on, push and submit it for review, and then <a href=\"https://github.com/leanprover-community/mathlib4/pull/10641\">#10641</a> could build on it while it was still in review.</p>",
        "id": 421938360,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708117555
    },
    {
        "content": "<p>If you haven't done a PR before, perhaps ambitious for a first PR. Still, everyone needs to start somewhere.</p>",
        "id": 421938438,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708117577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/421934156\">said</a>:</p>\n<blockquote>\n<p>I now it seems crazy that people could start porting a Lean 3 project now. But it could happen and the vague goal was to make it possible to do so for one year after the port.</p>\n</blockquote>\n<p>I totally agree with this, and had no plans on porting anything, but then Eric pointed out to me a couple of days ago that I'd never ported the solutions to my 1st year undergrad course to Lean 4 and the thought did occur to me that I might want to just try mathport one last time...</p>",
        "id": 421942159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708119364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/421938360\">said</a>:</p>\n<blockquote>\n<p>As in, prepare a branch with generalised metrics on, push and submit it for review, and then <a href=\"https://github.com/leanprover-community/mathlib4/pull/10641\">#10641</a> could build on it while it was still in review.</p>\n</blockquote>\n<p>a first PR is at <a href=\"https://github.com/leanprover-community/mathlib4/pull/10680\">#10680</a> , defining pseudo metric spaces with generic codomain.</p>",
        "id": 422082986,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708248586
    },
    {
        "content": "<p>i now have <a href=\"https://github.com/leanprover-community/mathlib4/pull/10749\">#10749</a> , defining metric spaces with a generic codomain.</p>",
        "id": 422414400,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708434763
    },
    {
        "content": "<p>Oh cool, does it build off <a href=\"https://github.com/leanprover-community/mathlib4/pull/10680\">#10680</a>?</p>",
        "id": 422414491,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708434794
    },
    {
        "content": "<p>yes, it does. (it is also listed as a dependency)</p>",
        "id": 422414560,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708434819
    },
    {
        "content": "<p>Great. Well done!</p>",
        "id": 422414617,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708434832
    },
    {
        "content": "<p>i haven't ported lemmas yet, but i think most lemmas we would need are easily ported.</p>",
        "id": 422414783,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708434870
    },
    {
        "content": "<p>how do we add these definitions to <a href=\"https://github.com/leanprover-community/mathlib4/pull/10641\">#10641</a>?</p>",
        "id": 422415116,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708434971
    },
    {
        "content": "<p>Merge in these branches and add them as dependencies would be the normal way.</p>",
        "id": 422415333,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708435052
    },
    {
        "content": "<p>i merged the branch into it, can you check i did it correctly?</p>",
        "id": 422416481,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708435391
    },
    {
        "content": "<p>I'm afraid I'm off sick today.</p>",
        "id": 422416534,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708435411
    },
    {
        "content": "<p>So not easily. Sorry.</p>",
        "id": 422416557,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708435420
    },
    {
        "content": "<p>oh... get better soon then <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 422416587,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708435433
    },
    {
        "content": "<p>I assume you have looked at how other \"blocked-by-other-PR\" branches in mathlib are handling it.  If so, you should be good.  I am not sure if there is any documentation that mentions exactly what to do here.</p>",
        "id": 422417202,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708435636
    },
    {
        "content": "<p>well... i didn't <em>quite</em> look at that...<br>\nlooking at it afterward, i'm not really finding an example where it gets added afterward? so i'm not sure... it might be the case that you, as creator of the PR, need to add the dependencies to the first comment... i'm not sure tho</p>",
        "id": 422417889,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708435886
    },
    {
        "content": "<p>From your merge I see your changes have been added to the branch.  I assume that once your branches get merged this diff would change back to the changes of my branch (if I didn't add any further changes that is).</p>",
        "id": 422418116,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708435963
    },
    {
        "content": "<p>yes, i'm pretty sure that's how that works, yes</p>",
        "id": 422418209,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708435997
    },
    {
        "content": "<p>Whether or not this tracks the changes you push to your other branches though, I am unsure.</p>",
        "id": 422418380,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708436048
    },
    {
        "content": "<p>i think it doesn't</p>",
        "id": 422418447,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708436084
    },
    {
        "content": "<p>anyhow, i hope you don't mind if i change some of your work to include these generalised definitions...</p>",
        "id": 422418610,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708436149
    },
    {
        "content": "<p>I don't mind.  This is all for fun anyways right? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 422418732,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708436183
    },
    {
        "content": "<p>do we need <code>#align</code> statements if this wasn't in lean3?</p>",
        "id": 422418961,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708436266
    },
    {
        "content": "<p>I think it would be wise though to get your previous branches dialed in first, or you could be wasting time so to speak</p>",
        "id": 422419045,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708436284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/422418961\">said</a>:</p>\n<blockquote>\n<p>do we need <code>#align</code> statements if this wasn't in lean3?</p>\n</blockquote>\n<p>Yes, we need to keep those as Patrick mentions above.</p>",
        "id": 422419119,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708436311
    },
    {
        "content": "<p>It doesn't track changes you make to other branches</p>",
        "id": 422419143,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708436323
    },
    {
        "content": "<p>I would probably counsel spending time on them and getting feedback as it will have cascading effects</p>",
        "id": 422419210,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708436350
    },
    {
        "content": "<p>Yes, the PR review process for mathlib can also take longer than one would expect sometimes (depending).</p>",
        "id": 422419313,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708436389
    },
    {
        "content": "<p>My goodness yes</p>",
        "id": 422419391,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708436408
    },
    {
        "content": "<p>I think getting somebody to review who has done a bunch on Metric spaces work (not I) would be best.</p>",
        "id": 422419445,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708436429
    },
    {
        "content": "<p>that's true... although if there are many dependencies, i believe it can give quite a bit of motivation for getting it approved...</p>",
        "id": 422419463,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708436437
    },
    {
        "content": "<p>Well, usually small changes get merged faster, all things being considered.</p>",
        "id": 422420274,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708436700
    },
    {
        "content": "<p>At any rate, maybe <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> or someone else with more experience than I can take a look at your branches if they get some time.</p>",
        "id": 422420431,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708436739
    },
    {
        "content": "<p>is there any sense in splitting up a PR post hoc?</p>",
        "id": 422420544,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708436764
    },
    {
        "content": "<p>because i <em>could</em> probably split the first pr into maybe 3 parts? one defining the mixins for combining orders and (additive) commutative monoids, one for defining <code>GDist</code> and <code>GPseudoMetricSpace</code>, and one for copying some relevant lemmas from <code>PseudoMetricSpace</code></p>",
        "id": 422420985,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708436888
    },
    {
        "content": "<p>Well sometimes the reviewers need to see the other parts to see where you are \"going with it all\" so I would just leave it until you get some feedback.  My $0.02 at least.</p>",
        "id": 422422201,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708437255
    },
    {
        "content": "<p>right... anyhow, i've done some thinking and i've been considering if we want <code>Delone</code> to be a definition or rather a <code>Prop</code>-typed Mixin class or something like that... or maybe even data-carrying?<br>\nfor example, these are some possiblilities</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isDelone</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">Set</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">uniformlyDiscrete</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">relativelyDense</span> <span class=\"n\">s</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Delone</span> <span class=\"n\">a</span> <span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">a</span>\n  <span class=\"n\">uniformly_discrete</span><span class=\"o\">:</span> <span class=\"n\">uniformlyDiscrete</span> <span class=\"n\">carrier</span>\n  <span class=\"n\">relatively_dense</span><span class=\"o\">:</span> <span class=\"n\">relativelyDense</span> <span class=\"n\">carrier</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">isDelone</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">Set</span> <span class=\"n\">a</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">uniformly_discrete</span><span class=\"o\">:</span> <span class=\"n\">uniformlyDiscrete</span> <span class=\"n\">carrier</span>\n  <span class=\"n\">relatively_dense</span><span class=\"o\">:</span> <span class=\"n\">relativelyDense</span> <span class=\"n\">carrier</span>\n</code></pre></div>",
        "id": 422424325,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708437927
    },
    {
        "content": "<p>i think in general the class is preferable to the def, as that can be inferred automatically when you define instances...</p>",
        "id": 422424618,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708438027
    },
    {
        "content": "<p>but i'm not sure how i should decide between the structure and class...</p>",
        "id": 422424701,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708438058
    },
    {
        "content": "<p>Re: <code>#align</code>: you shouldn't add new ones when there's nothing in mathlib3 that can be aligned, but you should preserve the existing ones while there's still something sensible to align to</p>",
        "id": 422424844,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708438091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/422424325\">said</a>:</p>\n<blockquote>\n<p>right... anyhow, i've done some thinking and i've been considering if we want <code>Delone</code> to be a definition or rather a <code>Prop</code>-typed Mixin class or something like that... or maybe even data-carrying?<br>\nfor example, these are some possiblilities</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isDelone</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">Set</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">uniformlyDiscrete</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">relativelyDense</span> <span class=\"n\">s</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is what is already in the branch, its just the Prop type is not explicitly written.</p>",
        "id": 422425295,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708438236
    },
    {
        "content": "<p>right... so what do you think about my other suggestions?</p>",
        "id": 422425538,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708438324
    },
    {
        "content": "<p>I would probably go with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">IsDeloneWith</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">UnifDiscrete</span> <span class=\"o\">:</span> <span class=\"n\">UniformlyDiscreteWith</span> <span class=\"n\">s</span> <span class=\"n\">r</span>\n  <span class=\"n\">UnifDense</span> <span class=\"o\">:</span> <span class=\"n\">UniformlyDenseWith</span> <span class=\"n\">s</span> <span class=\"n\">R</span>\n  <span class=\"n\">rPos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span>\n  <span class=\"n\">RPos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsDelone</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">IsDeloneWith</span> <span class=\"n\">s</span> <span class=\"n\">r</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>because the values of <code>r</code> and <code>R</code> can be relevant, so most API should be developed with <code>IsDeloneWith</code> (just like we do for <code>LipschitzWith</code> or <code>IsBigOWith</code>). And definitely a structure, not a class, because it's not something you can expect the system to fill in for you in useful ways.</p>",
        "id": 422425660,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708438369
    },
    {
        "content": "<p>ah... i hadn't considered that...</p>",
        "id": 422426093,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708438522
    },
    {
        "content": "<p>By the way, I am still not really convinced that the general <code>GDist</code> class you have just PRed is the way to go, because it would lead to a lot of code duplication, and create a bunch of unsolvable diamonds if you want to register useful instances for products for instance. Do you have examples of issues that can't be solved with the mixin or extension approaches that have been sketched to you earlier in the discussion?</p>",
        "id": 422426128,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708438534
    },
    {
        "content": "<p>you can't make a metric with a codomain that cannot be injectively embedded into ENNReal, for example hyperreals or surreals.</p>",
        "id": 422426586,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708438686
    },
    {
        "content": "<p>While this is true, it is still unclear to me there's any practical application for this.</p>",
        "id": 422426700,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708438726
    },
    {
        "content": "<p>i also think that making extensions will bring the same diamond issues that you would get anyway...</p>",
        "id": 422426995,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708438822
    },
    {
        "content": "<p>Yes, I'm not asking for theoretical issues, rather practical ones that you have encountered when trying to prove a concrete theorem and that have led you to introduce the more general class.</p>",
        "id": 422427072,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708438853
    },
    {
        "content": "<p><code>Prop</code>-valued mixins will not lead you to diamonds. Extensions wouldn't lead you to diamonds either if one extends metric spaces in the correct way.</p>",
        "id": 422427207,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708438898
    },
    {
        "content": "<p>the problem i'm trying to solve is the fact that you cannot take the infimum or supremum of distances with certain properties when using hamming distance, without having to specify and prove each time that you keep within the (extended) natural numbers.</p>",
        "id": 422427514,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708438992
    },
    {
        "content": "<p>with regards to the code duplication, i'm not sure i quite see what you mean</p>",
        "id": 422427574,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708439012
    },
    {
        "content": "<p>any duplication will be temporary as soon as we make sure <code>MetricSpace a</code> gets a <code>GMetricSpace a Real</code> instance</p>",
        "id": 422427885,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708439114
    },
    {
        "content": "<p>and yes, that might bring with it some diamonds, but nothing we can't fix by implementing forgetful inheritance</p>",
        "id": 422428101,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708439178
    },
    {
        "content": "<p>You can for instance use <code>edist</code>, and have a lemma saying that the supremum of a subset of ENNReal made of extended natural numbers is still an extended natural number.</p>\n<p>As for code duplication, you were saying yourself that you had started to copy a bunch of metric space lemmas to <code>GMetricSpace</code>. Note that we can not hope to replace metric spaces and emetric spaces by <code>GMetricSpace</code>, because of the subtle inheritance pattern that a metric space should also contain an <code>edist</code> to avoid diamonds.</p>",
        "id": 422428274,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708439250
    },
    {
        "content": "<p>those diamonds don't give problems though? because <code>EDist a</code> gets an instance <code>GDist a ENNReal</code>, while <code>Dist a</code> gets an instance <code>GDist a Real</code>. these don't have the same type signature, so there is no problem</p>",
        "id": 422428522,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708439334
    },
    {
        "content": "<p>But we can't just replace <code>EMetricSpace</code> and <code>MetricSpace</code> with a single <code>GMetricSpace</code>.</p>",
        "id": 422428643,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708439382
    },
    {
        "content": "<p>I am trying to say that the implementation of <code>MetricSpace</code> and <code>EMetricSpace</code>have to be genuinely different. So you can't do both with one single class.</p>",
        "id": 422428713,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708439401
    },
    {
        "content": "<p>that's true... but we can make instances to convert them</p>",
        "id": 422428722,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708439402
    },
    {
        "content": "<p>It might be useful indeed to have special handling for an integer-valued metric, as I've expressed before, but I don't know exactly the best way of doing so.</p>",
        "id": 422428881,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708439435
    },
    {
        "content": "<p>This will lead to code duplication between 3 classes.</p>",
        "id": 422428951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708439452
    },
    {
        "content": "<p>Yeah I mean I don't know that it needs a class</p>",
        "id": 422429005,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708439469
    },
    {
        "content": "<p>how so? what code will be duplicated?</p>",
        "id": 422429028,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708439476
    },
    {
        "content": "<p>For that reason</p>",
        "id": 422429038,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708439478
    },
    {
        "content": "<p>About diamonds: you can't have a generic instance for <code>GMetricSpace (∀ i, X i) K</code> without introducing a diamond.</p>",
        "id": 422429919,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708439723
    },
    {
        "content": "<p>you mean the one for getting to <code>GDist</code>, right?</p>",
        "id": 422430183,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708439795
    },
    {
        "content": "<p>Yes</p>",
        "id": 422430266,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708439818
    },
    {
        "content": "<p>Because formulas for <code>Dist</code> and <code>EDist</code> on <code>∀ i, X i</code> are different.</p>",
        "id": 422430323,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708439840
    },
    {
        "content": "<p>How about</p>\n<ul>\n<li>No instances for products of <code>GMetricSpace</code>s (Because diamonds, and it's not clear we need such products)</li>\n<li>Instances from <code>(E)MetricSpace</code> to <code>GMetricSpace _ (E)Real</code></li>\n<li>All lemmas that are copied to <code>GMetricSpace</code> can be deprecated for <code>(E)MetricSpace</code>.</li>\n</ul>",
        "id": 422430499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1708439888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/422430323\">said</a>:</p>\n<blockquote>\n<p>Because formulas for <code>Dist</code> and <code>EDist</code> on <code>∀ i, X i</code> are different.</p>\n</blockquote>\n<p>Oh, are they?</p>",
        "id": 422430664,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708439938
    },
    {
        "content": "<p>And the only way I see to unify them is to use <code>⨆ i, dist (x i) (y i)</code> which is not what you probably want for <code>Nat</code>-value distance (you want it to be computable, right?)</p>",
        "id": 422430771,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708439973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/422430664\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/422430323\">said</a>:</p>\n<blockquote>\n<p>Because formulas for <code>Dist</code> and <code>EDist</code> on <code>∀ i, X i</code> are different.</p>\n</blockquote>\n<p>Oh, are they?</p>\n</blockquote>\n<p>Yes, the <code>Real</code> one takes <code>Finset.sup</code> of <code>nndist</code>s.</p>",
        "id": 422430880,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708440004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/422430323\">said</a>:</p>\n<blockquote>\n<p>Because formulas for <code>Dist</code> and <code>EDist</code> on <code>∀ i, X i</code> are different.</p>\n</blockquote>\n<p>i don't think this can lead to two of the same GDist class though? unless that was a diamond to begin with? because <code>Dist (∀ i, X i)</code> leads to <code>GDist (∀ i, X i) Real</code>, while <code>EDist (∀ i, X i)</code> leads to <code>GDist (∀ i, X i) ENNReal</code></p>",
        "id": 422431361,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708440129
    },
    {
        "content": "<p>and if <code>Dist (∀ i, X i)</code> leads to <code>EDist (∀ i, X i)</code>, that's a diamond to begin with, and i wouldn't be introducing one</p>",
        "id": 422431578,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708440197
    },
    {
        "content": "<p>I claim that you can't have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">GDist</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">GDist</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"n\">where</span>\n  <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>without introducing a diamond.</p>",
        "id": 422431587,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708440201
    },
    {
        "content": "<p><code>Dist X</code> doesn't lead  to <code>EDist X</code>; <code>PseudoMetricSpace X</code> has a <code>edist</code> field to avoid a diamond.</p>",
        "id": 422431821,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708440253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/422431587\">said</a>:</p>\n<blockquote>\n<p>I claim that you can't have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">GDist</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">GDist</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"n\">where</span>\n  <span class=\"n\">gdist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>without introducing a diamond.</p>\n</blockquote>\n<p>ok... but how would you define this? because there are many ways to combine elements of <code>K</code>? if you know <code>i</code> is finite, you can add them... if you know <code>K</code> has a complete ordering, then both <code>iSup</code> and <code>iInf</code> give valid ways to combine them. so it doesn't make sense to begin with.</p>",
        "id": 422432876,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708440524
    },
    {
        "content": "<p>if you mean that i might run into trouble when trying to define the hamming distance, i believe that's the whole reason why <code>Hamming</code> exists as a definition hiding previously defined metrics</p>",
        "id": 422433724,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708440763
    },
    {
        "content": "<p>Yes, Hamming exists so that you don't have to worry about any kind of \"default\" product metric.</p>",
        "id": 422433903,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708440814
    },
    {
        "content": "<p>If you aren't going to have this instance, then I see no diamonds.</p>",
        "id": 422434159,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708440864
    },
    {
        "content": "<p>(as an aside, it's easy to imagine an extension to hamming which defines an edist, which would then be defined on arbitrary products - I think we didn't do that because I was somewhat trying to preserve computability)</p>",
        "id": 422434228,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708440882
    },
    {
        "content": "<p>You can have a noncomputable <code>ENat</code>-valued function and a computable <code>Nat</code>-valued function that requires <code>Fintype</code>.</p>",
        "id": 422434447,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708440932
    },
    {
        "content": "<p>Yes I think that's what you'd probably want to do and it would be better to do that!</p>",
        "id": 422434685,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708440972
    },
    {
        "content": "<p>But it's another one of those \"when I have time\" things</p>",
        "id": 422434782,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708440994
    },
    {
        "content": "<p>BTW, another way to deal with this is to use a bundled operator instead of a typeclass.</p>",
        "id": 422434816,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708441002
    },
    {
        "content": "<p>Hmm?</p>",
        "id": 422435376,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708441143
    },
    {
        "content": "<p>in the sense of <code>class PseudoMetric (dist: A -&gt; A -&gt; B)</code>?</p>",
        "id": 422435391,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708441149
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">GDistHom</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TypeclassAssumptions</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n  <span class=\"n\">nonneg'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">toFun</span> <span class=\"n\">x</span>\n  <span class=\"n\">symmetric'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">toFun</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n  <span class=\"n\">triangle'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">toFun</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n</code></pre></div>",
        "id": 422435400,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708441151
    },
    {
        "content": "<p>Oh for the GDist thing</p>",
        "id": 422435455,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708441167
    },
    {
        "content": "<p>Like we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddGroupSeminorm#doc\">docs#AddGroupSeminorm</a></p>",
        "id": 422435537,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708441187
    },
    {
        "content": "<p>i think that in general would be a prettier solution, honestly... because there are lots of kind of distance you might define on a space, also real-valued ones.</p>",
        "id": 422435713,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708441231
    },
    {
        "content": "<p>and making it a class will only invite diamond conflicts</p>",
        "id": 422435785,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708441252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/422435400\">said</a>:</p>\n<blockquote>\n<p>Something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">GDistHom</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TypeclassAssumptions</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n  <span class=\"n\">nonneg'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">toFun</span> <span class=\"n\">x</span>\n  <span class=\"n\">symmetric'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">toFun</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n  <span class=\"n\">triangle'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">toFun</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>i'll give it a try</p>",
        "id": 422437022,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708441565
    },
    {
        "content": "<p>is there a reason this should have hom in the name though?</p>",
        "id": 422437142,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708441608
    },
    {
        "content": "<p>No reason, it can be called something like <code>GMetric</code> instead, or even <code>Metric</code>.</p>",
        "id": 422437310,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708441659
    },
    {
        "content": "<p>and to be clear, should there be two versions, like <code>Metric</code> and <code>PseudoMetric</code>?</p>",
        "id": 422437555,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708441719
    },
    {
        "content": "<p>I guess, yes.</p>",
        "id": 422437707,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708441756
    },
    {
        "content": "<p>is it necessary to make an operator class (like morphism classes) for <code>GPseudoMetric</code> and <code>GMetric</code>? i'm reading Anne Baanen's dissertation where they say one of the reasons to use such classes for <code>MonoidHom</code> was that the bundled nature would lead to duplicating lemmas for <code>RingHom</code>, i'm guessing this is possibly also the case for <code>GPseudoMetric</code> and <code>GMetric</code>?</p>",
        "id": 422452971,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708445921
    },
    {
        "content": "<p>What is a morphism of metric spaces? Is it distance-preserving? Distance-non-increasing? A continuous map of the underlying topological spaces?</p>",
        "id": 422495412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708460745
    },
    {
        "content": "<p>i don't think that works in this case, there isn't necessarily an underlying topological space i think...</p>",
        "id": 422495700,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708460864
    },
    {
        "content": "<p>should there be some definition, it should at the very least include all isometries</p>",
        "id": 422495884,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708460932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/422495412\">said</a>:</p>\n<blockquote>\n<p>What is a morphism of metric spaces? Is it distance-preserving? Distance-non-increasing? A continuous map of the underlying topological spaces?</p>\n</blockquote>\n<p>what i meant by \"operator class\" is a class <code>GMetricClass T a b</code> stating that T is a type where elements are a GMetric from a to b, i.e. a class for the distance operator</p>",
        "id": 422499525,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708462608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/422495412\">said</a>:</p>\n<blockquote>\n<p>What is a morphism of metric spaces? Is it distance-preserving? Distance-non-increasing? A continuous map of the underlying topological spaces?</p>\n</blockquote>\n<p>In this context I think we'd want to use isometries but you make an important point.</p>",
        "id": 422499638,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708462672
    },
    {
        "content": "<p>If you don't want to duplicate between <code>PseudoMetric</code> and <code>Metric</code>, then you need a typeclass, at least for <code>PseudoMetric</code>.</p>",
        "id": 422499701,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708462688
    },
    {
        "content": "<p>i thought so. as for the morphisms, i think in general a morphism of generic metrics <code>GMetric a1 b1</code> and <code>GMetric a2 b2</code> is some map <code>f : a1 -&gt; a2</code> and <code>g:b1 -&gt; b2</code> where <code>g</code> preserves ordering, and <code>dist (f x) (f y))= g( dist x y)</code></p>",
        "id": 422500370,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708462982
    },
    {
        "content": "<p>akin to how linear morphisms can take a ringhom as parameter</p>",
        "id": 422500432,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708463024
    },
    {
        "content": "<p>Let's not add morphisms between different metrics to the mix (yet).</p>",
        "id": 422500515,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708463058
    },
    {
        "content": "<p>As Kevin said, there are many natural types of morphisms here (isometries, dilations, continuous maps, Lipschitz continuous maps, Hölder continuous maps etc)</p>",
        "id": 422500666,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708463115
    },
    {
        "content": "<p>right. in that case we probably take <code>b1=b2</code> and <code>g=id</code>?</p>",
        "id": 422500715,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708463126
    },
    {
        "content": "<p>which gives isometries i think...</p>",
        "id": 422500794,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708463146
    },
    {
        "content": "<p>We should definitely define <code>IsometryClass</code> and <code>IsometryEquivClass</code>, for the existing (pseudo)(e)metric spaces, as has been discussed before, since we have multiple types of bundled isometries and consequent duplication of lemmas. That doesn't say how useful such classes would be for metrics with other codomain, however.</p>",
        "id": 422521550,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1708473540
    },
    {
        "content": "<p>i've made the suggested changes, can someone take a look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/10680\">#10680</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/10749\">#10749</a>?</p>",
        "id": 422586829,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708511407
    },
    {
        "content": "<p>Looks like you need to update the main github comment for the first PR as you are doing the mapping now correct?</p>",
        "id": 422587634,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708511724
    },
    {
        "content": "<p>This comment will be what ends up in the log when the branch is merged.</p>",
        "id": 422587875,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708511819
    },
    {
        "content": "<p>i think i did do that already? could you point to a specific part that you think should be changed?</p>",
        "id": 422588067,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708511884
    },
    {
        "content": "<p>Ah, sorry, browser had stale tab from yesterday.  I see changes on refresh.</p>",
        "id": 422588958,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708512169
    },
    {
        "content": "<p>i'd like to create an instance <code>GPseudoMetricClass (PseudoEMetric a) a b</code>, but i can't figure out how to declare <code>FunLike (PseudoEMetric a) a (a -&gt; ENNReal)</code>... i got this far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.EMetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ENNReal.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">ENNReal</span>\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">PseudoEMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.edist</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">X</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">Y</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>i'd probably like to use some kind of extensibility, but apparently there are no applicable lemmas...</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>PseudoEMetricSpace.mk edist_self✝¹ edist_comm✝¹ edist_triangle✝¹ toUniformSpace✝¹ =\n  PseudoEMetricSpace.mk edist_self✝ edist_comm✝ edist_triangle✝ toUniformSpace✝\n</code></pre></div>\n<p>should i make ext lemmas until this works? or is there no proof for this?</p>",
        "id": 422611848,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708520429
    },
    {
        "content": "<p>curiously, there <em>does</em> exist an ext lemma for <code>MetricSpace</code>... not too sure what that's about</p>",
        "id": 422613700,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708520963
    },
    {
        "content": "<p>Isn't <code>PseudoEMetricSpace.mk.injEq</code> enough?</p>",
        "id": 422628654,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708525447
    },
    {
        "content": "<p><code>ext</code> lemmas base themselves on that auto-generated theorem</p>",
        "id": 422628775,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708525486
    },
    {
        "content": "<p>regardless, i've made a PR to add them at <a href=\"https://github.com/leanprover-community/mathlib4/pull/10813\">#10813</a></p>",
        "id": 422651382,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708531363
    },
    {
        "content": "<p>i'm currently porting lemmas about <code>einfsep</code>... currently those lemmas assume <code>EDist a</code>, but i want them available for any <code>GPseudoMetric a b</code> with <code>CompleteLinearOrder b</code>, <code>AddCommMonoid b</code>, and <code>CovariantClass b b (.+.) (.&lt;=.)</code>... but i realise that for most of these, that isn't the most general case... </p>\n<p>should i prove these for general functions <code>gdist:a -&gt; a -&gt; b</code>, with an assumption along the lines of <code>gdist &gt;= 0</code> where necessary? could someone tell me if in that case, these lemmas will be available for all instances <code>gdist:T</code> with instances <code>FunLike T a (a -&gt; b)</code>?</p>",
        "id": 423169239,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708780825
    },
    {
        "content": "<p>i have defined an instance <code>FunLike (GPseudoMetric a b) a (a -&gt; b)</code>, so that is not the limiting factor here...</p>",
        "id": 423169373,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708780939
    },
    {
        "content": "<p>or do i rather add <code>gidst:T</code> and <code>FunLike T a (a -&gt; b)</code> assumptions?</p>",
        "id": 423170023,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708781449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Packings.2C.20coverings.2C.20nets.2C.20uniform.20discretesness.20et.2E.20al.2E/near/423170023\">said</a>:</p>\n<blockquote>\n<p>or do i rather add <code>gidst:T</code> and <code>FunLike T a (a -&gt; b)</code> assumptions?</p>\n</blockquote>\n<p>this is what i've done for now...</p>",
        "id": 423184298,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708791215
    },
    {
        "content": "<p>i'm guessing i can't port <code>le_einfsep_pi_of_le</code>, (or at least not directly) because i'd need to specify how i want to combine the metrics to get one on <code>(b : β) → π b</code>?</p>",
        "id": 423184886,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708791696
    },
    {
        "content": "<p>ok, so i got this error...</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to synthesize instance\n  FunLike (((b' : β) → π b') → ((b' : β) → π b') → γ) ((i : β) → π i) (((i : β) → π i) → γ)\n</code></pre></div>\n<p>this happens at a point where i assume a parameter has an instance <code>FunLike</code>, which i pass some partially applied definition... i guess this means you typically shouldn't assume some funlike instance</p>",
        "id": 423191653,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708797085
    },
    {
        "content": "<p>is it just me, or is it in general beneficial to only use <code>einfsep</code> over <code>infsep</code>?</p>",
        "id": 423193050,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708798438
    },
    {
        "content": "<p>einfsep is more natural in some ways. infsep is useful because it's kind of like. it's useful to have the \"real only\" version defined. But it essentially has values it isn't meaningful on yeah</p>",
        "id": 423195696,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1708801120
    },
    {
        "content": "<p>i seem to be at a bit of a fork in the road... there are multiple possible definitions of <code>covering_radius</code> that i can think of. i've already proven some weak inequalities between them, so these are in ascending order:</p>\n<ul>\n<li><code>⨆ (y:α), closest_distance s y</code> with <code>def closest_distance (y:α): ℝ≥0∞ := ⨅ (x ∈ s), (edist x y)</code> the infimum of distances to elements of <code>s</code>. my intuition suggests this might be equivalent to the third definition... but i'm having a hard time proving it...</li>\n<li><code>⨅ (R:ℝ≥0∞) (_:IsCoveringWith s R), R</code> is the current definition</li>\n<li><code>⨅ (x∈ s) (y:α) (_:IsCoveringWith s (edist x y)), edist x y</code> is a variation on the current definition where you only consider relevant distances<br>\ni've tried to prove the first and second equivalent, but i haven't succeeded yet...</li>\n</ul>",
        "id": 423360315,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708941235
    },
    {
        "content": "<p>for reference: a MWE with my proofs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.EMetricSpace.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">ENNReal</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PseudoEMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsCoveringWith</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">):</span><span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">EMetric.ball</span> <span class=\"n\">x</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">closest_distance</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">covering_radius</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">closest_distance</span> <span class=\"n\">s</span> <span class=\"n\">y</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">covering_radius'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">IsCoveringWith</span> <span class=\"n\">s</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">R</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">covering_radius''</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">IsCoveringWith</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)),</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">covering_radius</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">covering_radius'</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">covering_radius</span><span class=\"o\">,</span><span class=\"n\">covering_radius'</span><span class=\"o\">,</span><span class=\"n\">le_iInf_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">IsCoveringWith</span><span class=\"o\">,</span><span class=\"n\">closest_distance</span><span class=\"o\">,</span><span class=\"n\">iSup_le_iff</span><span class=\"o\">,</span><span class=\"n\">iInf_le_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hcov</span> <span class=\"n\">y</span> <span class=\"n\">c</span> <span class=\"n\">hc</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hc</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span><span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">∈</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hcov</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hy</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span><span class=\"n\">hx'</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">hz</span> <span class=\"o\">:=</span> <span class=\"n\">hc</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">edist_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx'</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hz.trans</span> <span class=\"n\">hx'.le</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">covering_radius'</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">covering_radius''</span> <span class=\"n\">s</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">covering_radius''</span><span class=\"o\">,</span><span class=\"n\">covering_radius'</span><span class=\"o\">,</span><span class=\"n\">IsCoveringWith</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">le_iInf_iff</span><span class=\"o\">,</span><span class=\"n\">iInf_le_iff</span><span class=\"o\">,</span><span class=\"n\">le_iInf_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">_</span> <span class=\"n\">hb</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">hy</span>\n</code></pre></div>",
        "id": 423360562,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708941305
    },
    {
        "content": "<p>ok. i've found a counterexample to the second and third definition being equal. use <code>s={0}</code> and <code>α = {1 - (1 / n) | n ∈ ℕ} ∪ s</code> as subsets of <code>ℝ</code>, then the second definition gives <code>1</code> while the third gives <code>∞</code>...</p>",
        "id": 423363552,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1708942326
    }
]