[
    {
        "content": "<p>What are the best practices for block matrices bigger than 2x2 blocks?<br>\nIn particular, I will probably need 4x2 blocks.<br>\nIs any of the following definitions preferred by Mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.ColumnRowPartitioned</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">m₃</span> <span class=\"n\">m₄</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">A₁₁</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m₁</span> <span class=\"n\">n₁</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A₁₂</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m₁</span> <span class=\"n\">n₂</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">A₂₁</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m₂</span> <span class=\"n\">n₁</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A₂₂</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m₂</span> <span class=\"n\">n₂</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">A₃₁</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m₃</span> <span class=\"n\">n₁</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A₃₂</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m₃</span> <span class=\"n\">n₂</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">A₄₁</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m₄</span> <span class=\"n\">n₁</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A₄₂</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m₄</span> <span class=\"n\">n₂</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">m₂</span> <span class=\"bp\">⊕</span> <span class=\"n\">m₃</span> <span class=\"bp\">⊕</span> <span class=\"n\">m₄</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromColumns</span> <span class=\"n\">A₁₁</span> <span class=\"n\">A₁₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromColumns</span> <span class=\"n\">A₂₁</span> <span class=\"n\">A₂₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromColumns</span> <span class=\"n\">A₃₁</span> <span class=\"n\">A₃₂</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"n\">Matrix.fromColumns</span> <span class=\"n\">A₄₁</span> <span class=\"n\">A₄₂</span><span class=\"o\">))))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">m₂</span> <span class=\"bp\">⊕</span> <span class=\"n\">m₃</span> <span class=\"bp\">⊕</span> <span class=\"n\">m₄</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.fromColumns</span>\n    <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₁₁</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₂₁</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₃₁</span> <span class=\"n\">A₄₁</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₁₂</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₂₂</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₃₂</span> <span class=\"n\">A₄₂</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">m₂</span> <span class=\"bp\">⊕</span> <span class=\"n\">m₃</span> <span class=\"bp\">⊕</span> <span class=\"n\">m₄</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.fromBlocks</span>\n    <span class=\"n\">A₁₁</span> <span class=\"n\">A₁₂</span>\n    <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₂₁</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₃₁</span> <span class=\"n\">A₄₁</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₂₂</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₃₂</span> <span class=\"n\">A₄₂</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">((</span><span class=\"n\">m₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">m₃</span> <span class=\"bp\">⊕</span> <span class=\"n\">m₄</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.fromRows</span>\n    <span class=\"o\">(</span><span class=\"n\">Matrix.fromBlocks</span> <span class=\"n\">A₁₁</span> <span class=\"n\">A₁₂</span> <span class=\"n\">A₂₁</span> <span class=\"n\">A₂₂</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Matrix.fromBlocks</span> <span class=\"n\">A₃₁</span> <span class=\"n\">A₃₂</span> <span class=\"n\">A₄₁</span> <span class=\"n\">A₄₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">((</span><span class=\"n\">m₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">m₃</span> <span class=\"bp\">⊕</span> <span class=\"n\">m₄</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.fromBlocks</span>\n    <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₁₁</span> <span class=\"n\">A₂₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₁₂</span> <span class=\"n\">A₂₂</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₃₁</span> <span class=\"n\">A₄₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromRows</span> <span class=\"n\">A₃₂</span> <span class=\"n\">A₄₂</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 432289679,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712680989
    },
    {
        "content": "<p>PS: I could maybe write a general definition, but I think it is overkill:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.ColumnRowPartitioned</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">BigBlockMatrix</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.of</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 432296135,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712682743
    },
    {
        "content": "<p>I think the sigma version probably is reasonable</p>",
        "id": 432310593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712686682
    },
    {
        "content": "<p>(though I would recommend not using pattern matching)</p>",
        "id": 432310733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712686707
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">BigBlockMatrix</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.of</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span> <span class=\"n\">i.fst</span> <span class=\"n\">j.fst</span> <span class=\"n\">i.snd</span> <span class=\"n\">j.snd</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 432419866,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712730869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Best.20practices.20for.20block.20matrices/near/432310593\">said</a>:</p>\n<blockquote>\n<p>I think the sigma version probably is reasonable</p>\n</blockquote>\n<p>Uh, a lot of API will have to be built!<br>\nWould you go directly to the big block matrix, or would you rather define generalizations of <code>Matrix.fromRows</code> and <code>Matrix.fromColumns</code> first?</p>",
        "id": 432420425,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712731062
    },
    {
        "content": "<p>I guess the latter allows you to use an nary sum in the columns and a binary one in the rows</p>",
        "id": 432439556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712736039
    },
    {
        "content": "<p>I think the convention would be to use primed names to match <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.blockDiagonal%27#doc\">docs#Matrix.blockDiagonal'</a></p>",
        "id": 432439710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712736069
    }
]