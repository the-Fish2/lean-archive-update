[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> and I just distilled the following strange behaviour of <code>Finset.choose</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"mi\">3</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Finset.choose</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Finset.choose</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Finset.choose</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">eq_refl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Finset.choose</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Finset.choose</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Among the strange points here are that, if you hover over <code>eq_refl</code> you get the docstring</p>\n<blockquote>\n<p><code>eq_refl</code> is equivalent to <code>exact rfl</code>, but has a few optimizations</p>\n</blockquote>\n<p>which, it seems, is not true in this case!</p>",
        "id": 405217150,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701382443
    },
    {
        "content": "<p>Is something wrong with the implementation of <code>Finset.choose</code>?  We tried to make examples not using it, and failed.</p>",
        "id": 405217264,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701382476
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.choose#doc\">docs#Finset.choose</a>)</p>",
        "id": 405217368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701382521
    },
    {
        "content": "<p>A slightly simpler test using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.choose#doc\">docs#List.choose</a> with analogous behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">([</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"mi\">3</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">List.choose</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">List.choose</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">List.choose</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">eq_refl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">List.choose</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">List.choose</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 405217648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701382650
    },
    {
        "content": "<p>It seems to be a reducibility thing. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Finset.choose</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_unfolding_all</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 405218565,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701383089
    },
    {
        "content": "<p>I think this is due to a non-structural recursion</p>",
        "id": 405219203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701383359
    },
    {
        "content": "<p>The let pattern match in <code>chooseX</code> is to blame</p>",
        "id": 405220240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701383878
    },
    {
        "content": "<p>Patch incoming</p>",
        "id": 405220423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701383976
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8753\">#8753</a></p>",
        "id": 405221249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701384359
    },
    {
        "content": "<p>I'm afraid this doesn't answer your question about <code>eq_refl</code>, nor do I know <em>why</em> the pattern match is problematic here.</p>",
        "id": 405221407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701384418
    },
    {
        "content": "<p>This is <a href=\"#narrow/stream/236446-Type-theory/topic/And.2Erec/near/398483665\">\"no eta for propositions\"</a> striking again</p>",
        "id": 405222064,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701384705
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ohno</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_a</span><span class=\"o\">,</span> <span class=\"n\">_b</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ohno</span> <span class=\"gr\">sorry</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">anyway</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_a</span><span class=\"o\">,</span> <span class=\"n\">_b</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">anyway</span> <span class=\"gr\">sorry</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 405222170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701384731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Finset.2Echoose/near/405221407\">said</a>:</p>\n<blockquote>\n<p>I'm afraid this doesn't answer your question about <code>eq_refl</code>, nor do I know <em>why</em> the pattern match is problematic here.</p>\n</blockquote>\n<p>One thing I noticed when digging into this earlier was that <code>eq_refl</code> uses the kernel to check that <code>rfl</code> works rather than using the elaborator's <code>isDefEq</code> check(*). I suspect <code>isDefEq</code> is more restrictive than the kernel here -- the kernel doesn't know about reducibility for example.</p>\n<p>(*) This is conditional in the code. It uses the kernel if there are no metavariables or fvars.</p>",
        "id": 405271868,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701404040
    },
    {
        "content": "<p>This seems to be a related problem. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Partition.Equipartition</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Interval</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Finpartition</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Finpartition</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">IsEquipartition.partsEquiv</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P.IsEquipartition</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">P.parts</span> <span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">P.parts.card</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">IsEquipartition.equivProduct2</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P.IsEquipartition</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">t.1</span> <span class=\"bp\">∈</span> <span class=\"n\">P.parts</span> <span class=\"bp\">∧</span> <span class=\"n\">t.2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t.1.card</span> <span class=\"o\">}</span> <span class=\"bp\">≃</span>\n    <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">t.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P.parts.card</span> <span class=\"bp\">∧</span> <span class=\"n\">t.1</span> <span class=\"bp\">+</span> <span class=\"n\">P.parts.card</span> <span class=\"bp\">*</span> <span class=\"n\">t.2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.card</span> <span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨⟨(</span><span class=\"n\">hP.partsEquiv</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">⟩,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">hP.partsEquiv.symm</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span> <span class=\"n\">q</span><span class=\"o\">⟩,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Subtype.coe_eta</span><span class=\"o\">,</span> <span class=\"n\">Equiv.symm_apply_apply</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- And.rec (fun left right ↦ { val := (p, q), property := _ }) _ = { val := (p, q), property := _ }</span>\n    <span class=\"n\">with_unfolding_all</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Subtype.coe_eta</span><span class=\"o\">,</span> <span class=\"n\">Equiv.apply_symm_apply</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- And.rec (fun left right ↦ { val := (r, q), property := _ }) _ = { val := (r, q), property := _ }</span>\n    <span class=\"n\">with_unfolding_all</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- DOESN'T WORK</span>\n</code></pre></div>\n<p>Why does the last line in <code>left_inv</code> work but not the last line in <code>right_inv</code>, and how can I prove <code>right_inv</code>?</p>",
        "id": 410294052,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1703770433
    }
]