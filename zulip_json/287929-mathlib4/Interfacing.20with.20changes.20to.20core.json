[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simprocs.20and.20norm_num/near/431387324\">said</a>:</p>\n<blockquote>\n<p>Hi all.  I have an open Lean 4 PR (<a href=\"https://github.com/leanprover/lean4/pull/3808\">lean4#3808</a>) that removes some simp annotations ...</p>\n<p>When testing on Mathlib, I noticed that this PR seems to weaken <code>norm_num</code>.   That's a Mathlib tactic and out of scope for a Lean PR, but I thought I'd alert folks to the issue in case there are any changes that would help Mathlib.</p>\n</blockquote>\n<p>I think it's not good form to be merging a PR 4 hours after bringing up a potential issue and while the issue is still being investigated</p>",
        "id": 431423025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712275840
    },
    {
        "content": "<p>Lean + Mathlib is not a mono repo.</p>",
        "id": 431423200,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712275957
    },
    {
        "content": "<p>This isn't about fixing norm_num, it's about determining what the issue is and in particular whether it should be fixed in lean core or mathlib</p>",
        "id": 431423329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276047
    },
    {
        "content": "<p>because just because the issue manifests in mathlib code doesn't mean it's a mathlib issue</p>",
        "id": 431423350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276065
    },
    {
        "content": "<p>There's also the concern that Scott's CI to test PRs against mathlib becomes useless as soon as a branch is merged that fails the CI, because then all future PRs fail CI for unrelated reasons</p>",
        "id": 431423405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712276114
    },
    {
        "content": "<p>Yeah, that framework is really brittle.  We can't treat these two repos as a mono repo.</p>",
        "id": 431423506,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712276172
    },
    {
        "content": "<p>Monorepo has nothing to do with it</p>",
        "id": 431423517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276184
    },
    {
        "content": "<p>mathlib is a giant test suite for lean4 core</p>",
        "id": 431423528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276199
    },
    {
        "content": "<p>No, it sometimes catches issues, but Lean can't rely on Mathlib as a required test suite.</p>",
        "id": 431423604,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712276268
    },
    {
        "content": "<p>the thing is, we cannot let lean and mathlib diverge for any significant period of time, this is plainly an unacceptable outcome</p>",
        "id": 431423674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276309
    },
    {
        "content": "<p>so I don't see any way around there needing to be some back and forth here</p>",
        "id": 431423726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276371
    },
    {
        "content": "<p>It diverges quite regularly and that's necessary to make progress.</p>",
        "id": 431423733,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712276379
    },
    {
        "content": "<p>no, there are ways to maintain the rate of progress without breaking mathlib and making scott put out fires daily. I hate hearing this so often when it's obviously false</p>",
        "id": 431423836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276453
    },
    {
        "content": "<p>Prove it</p>",
        "id": 431423850,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712276478
    },
    {
        "content": "<p>This is what bors does for mathlib</p>",
        "id": 431423866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276491
    },
    {
        "content": "<p>we have a crazy rate of progress and yet master is never broken</p>",
        "id": 431423876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276505
    },
    {
        "content": "<p>That's a single repo.</p>",
        "id": 431423889,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712276513
    },
    {
        "content": "<p>The CI scott has set up is definitely capable of doing things which act effectively like bors over mathlib + lean</p>",
        "id": 431423988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276580
    },
    {
        "content": "<p>this is entirely a 'cultural' issue with lean4 maintenance</p>",
        "id": 431424006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276603
    },
    {
        "content": "<p>I don't believe you.  I've used it and there are regularly issues that a single repo never has.</p>",
        "id": 431424022,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712276623
    },
    {
        "content": "<p>I can't prove it because I have absolutely no power over the lean4 repo to demonstrate anything</p>",
        "id": 431424158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276749
    },
    {
        "content": "<p>And lean 4 has never actually attempted to do it</p>",
        "id": 431424222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276779
    },
    {
        "content": "<p>I've used the CI integration.  It is difficult.  It's easier to fixup nightly-testing in Mathlib.</p>",
        "id": 431424293,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712276873
    },
    {
        "content": "<p>the current tools are not perfect, sure. They are things scott hacked together to make his job less painful</p>",
        "id": 431424361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276903
    },
    {
        "content": "<p>that doesn't mean they can't be improved, especially if the processes respect them</p>",
        "id": 431424377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276931
    },
    {
        "content": "<p>e.g. not merging things that will cause them to break</p>",
        "id": 431424388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712276943
    },
    {
        "content": "<p>I've also had a PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10336\">#10336</a> sit for months in Mathlib that would be needed to merge a Std PR.  I could start hounding people about it I suppose, but it's a pain.</p>",
        "id": 431424498,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712277046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simprocs.20and.20norm_num/near/431423405\">said</a>:</p>\n<blockquote>\n<p>There's also the concern that Scott's CI to test PRs against mathlib becomes useless as soon as a branch is merged that fails the CI, because then all future PRs fail CI for unrelated reasons</p>\n</blockquote>\n<p>I don't think this is true? If you want a Lean PR to test against mathlib, it is essential that you base it off <code>nightly-with-mathlib</code>, not <code>master</code>. Otherwise, Mathlib CI won't even run. However, if you do, it shouldn't matter what other breaking changes have landed on Lean <code>master</code> in the meantime.</p>",
        "id": 431424547,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712277103
    },
    {
        "content": "<p>Apologies, I forgot that <code>nightly-with-mathlib</code> existed. This only works for one PR though, right? You can't make two PRs that depend on each other.</p>",
        "id": 431424617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712277147
    },
    {
        "content": "<p>30 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/simprocs.20and.20norm_num\">#mathlib4 &gt; simprocs and norm_num</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 431424659,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712277186
    },
    {
        "content": "<p>Why not? Seems like it should be fine.</p>",
        "id": 431424680,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712277202
    },
    {
        "content": "<p>Yes, a workflow I use if I am worried about Mathlib is to start with <code>nightly-with-mathlib</code>, convince myself the  Mathlib impact is managable, and then switch to Lean master so I am confident I can get a merge in.</p>",
        "id": 431424689,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712277213
    },
    {
        "content": "<p>Suppose there is a mathlib performance regression when you do that. Where would that be caught?</p>",
        "id": 431424813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712277352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Interfacing.20with.20changes.20to.20core/near/431424680\">said</a>:</p>\n<blockquote>\n<p>Why not? Seems like it should be fine.</p>\n</blockquote>\n<p>Once the first PR is rebase-merged into a mathlib-breaking master, there's no longer a commit to start your follow-up branch off.</p>",
        "id": 431424815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712277354
    },
    {
        "content": "<p>Oh, I thought you meant while they were still open.</p>",
        "id": 431425149,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712277613
    },
    {
        "content": "<p>does lean 4 core <em>ever</em> have dependent PR's? I've never seen it</p>",
        "id": 431425189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712277658
    },
    {
        "content": "<p>Yes, this seems a bit theoretical for now.</p>",
        "id": 431425318,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712277734
    },
    {
        "content": "<p>which is to say, the reason they don't exist is because the earlier PRs are merged first</p>",
        "id": 431425351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712277765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Interfacing.20with.20changes.20to.20core/near/431424813\">said</a>:</p>\n<blockquote>\n<p>Suppose there is a mathlib performance regression when you do that. Where would that be caught?</p>\n</blockquote>\n<p>If this was addressed to my workflow, then it's correct my testing would likely only really catch performance regressions that are really significant like timeouts.   Less significant ones would need to be addressed post master merge.</p>",
        "id": 431427547,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712279542
    },
    {
        "content": "<p>right, and what would that process look like exactly?</p>",
        "id": 431427576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712279573
    },
    {
        "content": "<p>Probably like what is happening with the <code>isDefEq</code> changes right now, where Scott has been working on a MWE.  Those changes positively impacted performance in one area to unblock some work, but negatively impacted Mathlib and so there's a need to investigate further.</p>",
        "id": 431427762,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712279754
    },
    {
        "content": "<p>The way I see it playing out:</p>\n<ul>\n<li>Joe tests on mathlib manually, estimates that the mathlib breakage is fixable and merges.</li>\n<li>Scott starts working on a mathlib fix, and either does it himself or calls in the troops to help</li>\n<li>Either during this process or at the next benchmark run, a significant performance regression is discovered</li>\n<li>The performance regression is isolated to an example which implicates the original PR</li>\n<li>We have to try to convince core that this is actually a problem and some part of the PR needs to be fixed. Months pass.</li>\n</ul>",
        "id": 431427884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712279845
    },
    {
        "content": "<p>That's a harder case though since it involved such a fundamental algoithm.  An easier case would some recent <code>applyRfl</code> changes that impacted <code>rw_search</code>.  I ended up reolving those yesterday.</p>",
        "id": 431427894,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712279857
    },
    {
        "content": "<p>the structure here is basically biasing toward the PR being merged, since it's now in master. So regressions will persist in the final product much longer this way</p>",
        "id": 431428000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712279935
    },
    {
        "content": "<p>The last time I looked into Mathlib build times (Tuesday), it looked like performance was improving over time.   Is there a concrete issue currently negatively impacting Mathlib that you want addressed?</p>",
        "id": 431428142,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712280042
    },
    {
        "content": "<p>No, I'm talking about the structural properties of this merging and interfacing setup between lean core and mathlib</p>",
        "id": 431428169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712280070
    },
    {
        "content": "<p>Which is to say: if there <em>was</em> a performance regressing PR, what are the mechanisms to prevent it from hurting end users? The answer seems to be \"there are some early checks, but insufficient to catch many performance regressions; and there is a mechanism to ensure that minor regressions are not fixed quickly\"</p>",
        "id": 431428306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712280186
    },
    {
        "content": "<p>whereas the answer I would prefer is \"there is a mechanism to ensure that any regression our benchmark bots can pick up will never make it to end users\"</p>",
        "id": 431428424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712280280
    },
    {
        "content": "<p>Let's be concrete then, this Lean 4 PR <a href=\"https://github.com/leanprover/lean4/pull/3784\">lean4#3784</a> was merged last week and this <a href=\"https://github.com/leanprover-community/mathlib4/commit/0a3d6a9b41f6b2099e6fda8efa43643a1724ea58\">Mathlib nightly testing commit</a> fixes an issue that arose from it.</p>",
        "id": 431428469,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712280322
    },
    {
        "content": "<p>There mechanism to avoid impacting users is this release process itelf.</p>",
        "id": 431428571,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712280393
    },
    {
        "content": "<p>No programming language project I know of promises stability if you are using nightly releases.</p>",
        "id": 431428631,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712280445
    },
    {
        "content": "<p>(incidentally, Rust does)</p>",
        "id": 431428763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712280527
    },
    {
        "content": "<p>We do have a mechanism to make sure that mathlib master is never broken, and we have a firefighter working to make sure that mathlib master is working on a positive fraction of days on nightly, but when you have to fix your tests this is often a red flag and currently the feedback mechanism is weak where lean issues are surfaced in the mathlib bumps and need to be communicated back to core</p>",
        "id": 431428972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712280639
    },
    {
        "content": "<p>More often than not people just fix mathlib anyway, because what else can we do? The next nightly is coming up and we want a working version in time</p>",
        "id": 431429026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712280676
    },
    {
        "content": "<p>instead of going through some expedited \"un-merging\" process, they go through the regular issue tracker, meaning that they are not prioritized and regressions can make it to stable</p>",
        "id": 431429170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712280745
    },
    {
        "content": "<p>If we were instead making proper use of the lean 4 mathlib CI, we could have prepared a bump, caught the issue, and reported it back <em>before the PR is merged</em>, meaning that there is no fighting against the current and no firefighting because interruptions in this process will not affect all other PRs</p>",
        "id": 431429458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712280949
    },
    {
        "content": "<p>(Meanwhile, I look over on the Rust zulip and <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202024-04-04/near/431321893\">read</a>:</p>\n<blockquote>\n<h3>Backport nominations</h3>\n<p>Note: many of these regressions were marked at P-high/P-critical since discovered by a crater run (thus impacting one of more crates we use as canary).</p>\n</blockquote>\n<p>Gosh, I sure wish we were considering regressions in downstream libraries as priority-critical and even making backport fixes to stable in response...)</p>",
        "id": 431430357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712281665
    },
    {
        "content": "<p>We tried the model of testing every PR against Mathlib. Unfortunately at first it had way too many false positives. Even after we go that sorted out (the model of rebasing everything onto <code>nightly-with-mathlib</code>), we decided that it was still slowing down progress far too much,  and that the current model of asynchronous work on <code>nightly-testing</code> was better. I know it is far from perfect (believe me, I spend half my life on nightly-testing some weeks), but it's what we're doing for the forseeable  future.</p>\n<p>Adjustments to the procedure that make life easier are very welcome, but I don't see us changing the requirements for PRs to Lean <code>master</code> to require a Mathlib patch. It is just too slow, and requires too much coordination.</p>",
        "id": 431445862,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712293112
    },
    {
        "content": "<p>I agree.  I think everybody I know of involved in Lean development is interested in seeing both Lean and Mathlib succeed.   It's just too time consuming to gate every PR to Lean master by a successful Mathlib build.</p>",
        "id": 431446118,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712293266
    },
    {
        "content": "<p>The \"un-merging\" approach would allow for handling this situation better without changing the \"merge first ask questions later\" workflow: if any issues are detected after merging, remove it again before the next nightly and reinstate it once the issue is resolved</p>",
        "id": 431446156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712293301
    },
    {
        "content": "<p>that is, if you are going to merge fast then you should also not be shy to unmerge</p>",
        "id": 431446213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712293325
    },
    {
        "content": "<p>The important part is that there should not be a high bar to justify unmerging, it should be the first response to issues</p>",
        "id": 431446296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712293398
    },
    {
        "content": "<p>I don't think that's a viable solution to automatically unmerge is the right approach either.  We may want to consider it if it's truly a bad idea, but iteration and refinement may be more efficiently lead to a better solution.</p>\n<p>I think we should be clear that Mathlib <code>nightly-testing</code> is highly unstable and should not be used as a starting point for building stable things.</p>",
        "id": 431447000,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712293925
    },
    {
        "content": "<p>it's not about whether it's \"truly a bad idea\", it's about giving time to people to review regressions without the clock ticking</p>",
        "id": 431447083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712293998
    },
    {
        "content": "<p>unmerging should in particular <em>not</em> be an implication that the original code was bad, ill-conceived or anything like that, only that it was implicated in an undiagnosed bug or regression and needs to be removed from the hot path</p>",
        "id": 431447241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712294129
    },
    {
        "content": "<p>Who are the end users for whom nightly testing of Mathlib is on their critical path?</p>",
        "id": 431447275,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712294160
    },
    {
        "content": "<p>contributors to lean</p>",
        "id": 431447333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712294189
    },
    {
        "content": "<p>also stable releases</p>",
        "id": 431447358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712294217
    },
    {
        "content": "<p>if nightly testing is broken for a month, I think our whole system breaks down</p>",
        "id": 431447400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712294271
    },
    {
        "content": "<p>When is the last time that happened?</p>",
        "id": 431447460,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712294291
    },
    {
        "content": "<p>never, because scott is on firefighting duty</p>",
        "id": 431447468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712294303
    },
    {
        "content": "<p>but we're always seemingly teetering on the edge of Bad Things</p>",
        "id": 431447482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712294323
    },
    {
        "content": "<p>and as a result there is a <em>lot</em> of pressure to make sure that nightly bumps go ahead, no matter how many hacks you have to put in place to do it</p>",
        "id": 431447558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712294392
    },
    {
        "content": "<p>and mathlib accumulates technical debt this way</p>",
        "id": 431447640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712294421
    },
    {
        "content": "<p>it would be much better if we had an \"ABORT\" button where we could say \"okay these hacks are getting kind of ridiculous, let's just abandon this bump, unmerge the offending PR, and work out what's gone wrong\"</p>",
        "id": 431447814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712294523
    },
    {
        "content": "<p>but there is a power imbalance here because unmerging is not a thing right now</p>",
        "id": 431447967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712294571
    },
    {
        "content": "<p>As far as I can tell, even scott doesn't have such an \"ABORT\" button. He can bring up unmerging later but The Bump Must Continue</p>",
        "id": 431448610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712294765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> My feeling/impression when reading <a class=\"stream\" data-stream-id=\"428973\" href=\"/#narrow/stream/428973-nightly-testing\">#nightly-testing</a> is that almost every week there are some annoying issues that cost several people a lot of time. This feels like firefighting under pressure, in a real sense. People like <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> and <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> are doing heroic efforts. But over the past weeks I have very often felt like this is absolutely not sustainable. We are relying on volunteers that reschedule large parts of their week to make sure that the bump continues.</p>\n<p>If the bump doesn't continue, then mathlib lags behind Lean.</p>\n<p>And then what?</p>",
        "id": 431451373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1712296364
    },
    {
        "content": "<p>As an end user with a high profile project which depends on mathlib, this discussion does concern me a little. In lean 3 friction (of a very different kind) between core and mathlib was fixed by a community fork; I can't imagine that anyone wants to go down this route again, but this attitude from the core devs might literally force it if the mathlib people ultimately can't keep the show on the road.</p>",
        "id": 431472889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712305566
    },
    {
        "content": "<p>Hey all, the previous months have been an exceptional period of Lean development due to broad changes to multiple repositories as part of the upstreaming efforts, necessitating changes to our approach to syncing with Mathlib partway through. This effort is now largely completed, so we expect the rate of breaking changes to revert back to previous levels going forward. Nevertheless, we are initiating internal discussions on how we can improve our processes here, both technical and organizational, for the benefit of all users of Lean.</p>",
        "id": 431516765,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1712321214
    },
    {
        "content": "<p>Yes, I am very much torn by what's going on right now, because at the community meetings I always come away being super-excited about how fast core is progressing and all the great new things going into it. And then I see poor Scott drowning in <a class=\"stream\" data-stream-id=\"428973\" href=\"/#narrow/stream/428973-nightly-testing\">#nightly-testing</a> and I see the consequences of moving fast and breaking things: things get broken. It is very comforting to know that you feel like there's a light at the end of the tunnel here.</p>",
        "id": 431551858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712331130
    },
    {
        "content": "<p>I don’t understand how the current workflow optimizes work, even if you only consider the FRO point of view. It seems to me that Scott’s life would be less stressful if changes were tested against Mathlib before merging them to core Lean. This would involve less back and forth, right?</p>",
        "id": 431563622,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712334672
    },
    {
        "content": "<p>Patrick, I think the point is that it doesn't optimize total effort required, but rather the speed with which core can make changes they deem necessary, and it's the latter that is currently taking priority.</p>",
        "id": 431564412,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712334909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Interfacing.20with.20changes.20to.20core/near/431424498\">said</a>:</p>\n<blockquote>\n<p>I've also had a PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10336\">#10336</a> sit for months in Mathlib that would be needed to merge a Std PR.  I could start hounding people about it I suppose, but it's a pain.</p>\n</blockquote>\n<p>PRs that have build errors are typically never looked at by maintainers. We are already overwhelmed by PRs that build. So yes, you should start hounding people if you need help to make it build.</p>",
        "id": 431570945,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712337123
    },
    {
        "content": "<p>There's one exception, namely PRs that are tagged <code>help-wanted</code>, but this wasn't done here</p>",
        "id": 431571217,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1712337231
    },
    {
        "content": "<p>Joe, the criterion that many people use when looking for mathlib PRs to review is whether the PR shows up in this list <a href=\"https://bit.ly/3cKk3ld\">#queue</a> .</p>",
        "id": 431571593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712337371
    },
    {
        "content": "<p>When I last looked at this today it had over 170 PRs on it, and for me these are the priority ones.</p>",
        "id": 431571952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712337522
    },
    {
        "content": "<p>Thanks for the tips on how to address this in the future.  I've reflected and decided to close <a href=\"https://github.com/leanprover-community/mathlib4/pull/10336\">#10336</a>.  That work predates some of the Std to base migrations and the benefits of nicer list folds in Std/Lean seem minor.</p>",
        "id": 431617454,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712359156
    },
    {
        "content": "<p>A few things to add:</p>",
        "id": 431630498,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712370647
    },
    {
        "content": "<ul>\n<li>First, perhaps I have been handling <code>nightly-testing</code> incorrectly. I certainly would like assistance on this. Depending on what pace changes are coming at, work on Mathlib adaptations and reporting and dealing with Lean regressions takes between 20% and 100% of my time in a given week (fortunately 20% much more common!). There are other things that I'm trying to get done, too, and so I've been reporting what needs to be done on the <code>nightly-testing</code> thread in a way that encourages and hopefully enables others to assist. But perhaps the way I've done this has overemphasised a sense of urgency or even desperation. :-) Obviously there is a lot of work here, but we're getting it done.</li>\n</ul>",
        "id": 431630501,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712370655
    },
    {
        "content": "<ul>\n<li>Second, it's important to remember that despite some disagreements about process, the FRO is really committed to helping Mathlib, both in its current form and hopefully during significant future growth. The FRO puts real resources into Mathlib, is happy to do so, and plans to put even more in future.</li>\n</ul>",
        "id": 431630507,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712370661
    },
    {
        "content": "<ul>\n<li>Third, I think some of the perspectives in this thread treat the model of \"Lean makes breaking changes, and then we sort things out on <code>nightly-testing</code> and negotiate regressions and  changes between the repositories\" as if this a broken model that is broken out of ignorance or carelessness. I really want to push back on that, and argue that it is much more \"by design\" than it might appear.</li>\n</ul>",
        "id": 431630515,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712370667
    },
    {
        "content": "<p>Why don't we go back to the system we briefly tried, in which every Lean PR is tested against mathlib? (Note this system is still available, and PR authors are encouraged to use it: just make sure your PR is based of <code>nightly-with-mathlib</code>, feel free to ping me if the system is confusing or not working, and read <a href=\"https://leanprover-community.github.io/contribute/tags_and_branches.html\">tags and branches</a> for the gory details.)</p>",
        "id": 431630519,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712370671
    },
    {
        "content": "<ol>\n<li>This requires every contributor to Lean to deal with Mathlib on a regular basis (and in particular all FRO members). This is simply inefficient, and from an efficiency point of view it makes more sense to separate the work of advancing core functionality in Lean, and dealing with the ecosystem integration. We're not asking anyone to use nightly releases of Lean, nor the <code>nightly-testing</code> branch of Mathlib. They exist so that we can efficiently delegate to the work to the people with the comparative advantage doing that work. (e.g. Leo making fundamental changes to the simplifier, me working out how this affects Mathlib, and then adapting or reporting reporting regressions). We tried it, and it didn't work. We really care about making fast progress on Lean.</li>\n</ol>",
        "id": 431630520,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712370676
    },
    {
        "content": "<ol start=\"2\">\n<li>Mathlib is not the only user of Lean, and despite it being big and providing great coverage as a test suite (more on that later), we don't want it to win by default on questions of performance tradeoffs. We need to be able to make changes that have sufficiently high payoffs elsewhere, <em>even if</em> Mathlib suffers as a result. Testing everything against Mathlib potentially prevents us doing this. That said, we very much understand that Mathlib is a great indicator, and regressions in Mathlib caused by problems in Lean are very much worth fixing. A great example here is <a href=\"https://github.com/leanprover/lean4/pull/3807\">lean#3807</a>, which provides absolutely essential performance changes in <code>IsDefEq</code>, enabling <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> to implement a powerful bitblasting tactic. (This takes high level goals that can be converted to boolean problems, and then hands them off to a SAT solver. After the changes from 3807, it spends most of its time in the SAT solver and handling the certificate provided by the solver. Before those changes, it was stuck in <code>IsDefEq</code>.) However --- we discovered there are some fairly significant slow-downs in Mathlib as a result of this. Now, we haven't just told Mathlib to cope! Instead, I've spent much of the last week trying to minimize the issue, so we can go back to Leo and sort out a solution that will work for Henrik's project and for Mathlib. We've decided to delay the release of v4.8.0-rc1 precisely because of this problem; we aspire to monthly releases, but keeping in sync with Mathlib is more important, so until we get to the bottom of this (hopefully!!!) we're delaying.</li>\n</ol>",
        "id": 431630523,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712370681
    },
    {
        "content": "<ol start=\"3\">\n<li>While Mathlib has great coverage when used as a test suite for Lean, to be honest it has <em>too thorough</em> coverage. It is big enough that every peculiarity in a tactic, or performance quirk in a core language feature, is depended on somewhere in Mathlib! It's simply not okay to treat every such a dependence as a blocker for changing things in Lean. We need a negotiated process, handled by people who know Mathlib well, to diagnose which changes warrant changes in Mathlib (because it is being naughty!), and which changes need to go back to Lean. As above, not everyone working on Lean can or should be doing this.</li>\n</ol>",
        "id": 431630526,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712370686
    },
    {
        "content": "<p>Sorry, that was all a bit longer than I at first planned. We're trying, we really really care about the future of both Lean and Mathlib, and I hope everyone will work with us as we sort these things out. Hopefully what I've written above gives a bit more context on why we don't like the \"test everything\" or \"unmerge anything that breaks\" approaches to development. And I'm sorry if I've been alarmist about <code>nightly-testing</code> in the past. :-)</p>",
        "id": 431630529,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712370690
    },
    {
        "content": "<p>And an addendum: there are plans afoot to build \"institutional funding\" specifically for Mathlib that would not come through the FRO. It's a fantastic opportunity at the moment that the FRO is able to marshall and deploy resources for Lean and Mathlib, but it's really important that we think about Mathlib separately as well. If we are to grow significantly, and more importantly transform Mathlib into something that can support 100x as much formalisation as currently happens, as downstream projects, then I suspect we are going to need a combination of academic contributions, volunteers efforts, but also paid engineering time. I really hope at least some of these plans come to fruition, and regardless that everyone thinks about this issue.</p>",
        "id": 431633202,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712373220
    },
    {
        "content": "<p>One thing I take from these very long, helpful and informative messages is that you don't seem to be tearing your hair out at the current situation, which is really great to hear :-)</p>",
        "id": 431695340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712428564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Interfacing.20with.20changes.20to.20core/near/431630523\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>Mathlib is not the only user of Lean, and despite it being big and providing great coverage as a test suite (more on that later), we don't want it to win by default on questions of performance tradeoffs. We need to be able to make changes that have sufficiently high payoffs elsewhere, <em>even if</em> Mathlib suffers as a result. Testing everything against Mathlib potentially prevents us doing this. That said, we very much understand that Mathlib is a great indicator, and regressions in Mathlib caused by problems in Lean are very much worth fixing. A great example here is <a href=\"https://github.com/leanprover/lean4/pull/3807\">lean#3807</a>, which provides absolutely essential performance changes in <code>IsDefEq</code>, enabling <span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> to implement a powerful bitblasting tactic. (This takes high level goals that can be converted to boolean problems, and then hands them off to a SAT solver. After the changes from 3807, it spends most of its time in the SAT solver and handling the certificate provided by the solver. Before those changes, it was stuck in <code>IsDefEq</code>.) However --- we discovered there are some fairly significant slow-downs in Mathlib as a result of this. Now, we haven't just told Mathlib to cope! Instead, I've spent much of the last week trying to minimize the issue, so we can go back to Leo and sort out a solution that will work for Henrik's project and for Mathlib. We've decided to delay the release of v4.8.0-rc1 precisely because of this problem; we aspire to monthly releases, but keeping in sync with Mathlib is more important, so until we get to the bottom of this (hopefully!!!) we're delaying.</li>\n</ol>\n</blockquote>\n<p>I can wait, yes, but apparently you <em>still</em> haven't found the causes of the issues in mathlib's nightly testing after <a href=\"https://github.com/leanprover/lean4/pull/3807\">lean4#3807</a></p>",
        "id": 433672616,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1713334891
    },
    {
        "content": "<p>Is there really no way to diagnose simpNF linter failures? (That linter is in Std so I don't know what to do with it)</p>",
        "id": 433673051,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1713334969
    },
    {
        "content": "<p>It should just be a matter of putting in a file with <code>import Mathlib</code> a restatement of the lemma and seeing if you can prove it <code>by simp only [my_lemma]</code>.</p>",
        "id": 433680734,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713337059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Interfacing.20with.20changes.20to.20core/near/433672616\">said</a>:</p>\n<blockquote>\n<p>I can wait, yes, but apparently you <em>still</em> haven't found the causes of the issues in mathlib's nightly testing after <a href=\"https://github.com/leanprover/lean4/pull/3807\">lean4#3807</a></p>\n</blockquote>\n<p>You might think about how this message comes across; hopefully it wasn't intended the way it sounds to me. Help looking at <code>nightly-testing</code> is always appreciated.</p>",
        "id": 433681350,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713337141
    },
    {
        "content": "<p>As an example, we can reproduce the simpNF error on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">comap_exp_cobounded</span> <span class=\"o\">:</span> <span class=\"n\">comap</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">cobounded</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">comap</span> <span class=\"n\">re</span> <span class=\"n\">atTop</span>\n</code></pre></div>\n<p>with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">error: failed to synthesize</span>\n<span class=\"sd\">  AddMonoidHomClass (AddGroupSeminorm ℂ) ℂ ℝ</span>\n<span class=\"sd\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit)</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"n\">Filter</span> <span class=\"n\">Bornology</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">comap</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">cobounded</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">comap</span> <span class=\"n\">re</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 433701085,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713342473
    },
    {
        "content": "<p>I wonder if it makes sense to actually collect all these in a test file someone.</p>",
        "id": 433701173,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713342493
    },
    {
        "content": "<p>It makes is possible for someone who wants to diagnose them to get started faster.</p>",
        "id": 433701206,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713342503
    },
    {
        "content": "<p>And could also tell us if one got better (or even worse, if we add a second copy that succeeds with a higher timeout).</p>",
        "id": 433701287,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713342532
    },
    {
        "content": "<p>Regarding simpNF, it would be nice if we had a different version of <code>nolint</code> for \"the linter crashes\"</p>",
        "id": 433711543,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713345979
    },
    {
        "content": "<p>I think better than a test file would be some issues. I've made <a href=\"https://github.com/leanprover-community/mathlib4/pull/12226\">#12226</a> as a prototype: please let me know if this should be structured differently.</p>",
        "id": 433903488,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713406119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Interfacing.20with.20changes.20to.20core/near/433701206\">said</a>:</p>\n<blockquote>\n<p>It makes is possible for someone who wants to diagnose them to get started faster.</p>\n</blockquote>\n<p>Still, that doesn't seem to help me <em>fix</em> the issue, which is what I was going for in my commit to the <code>nightly-testing</code> branch</p>",
        "id": 434254694,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1713483192
    },
    {
        "content": "<p>I don't understand. Your commit removed a <code>nolint simpNF</code>, then the next commit added it back. What were you trying to do?</p>\n<p>If you want to help diagnose these, you need to make examples such as those collected under <a href=\"https://github.com/leanprover-community/mathlib4/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Aslow-typeclass-synthesis\">https://github.com/leanprover-community/mathlib4/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Aslow-typeclass-synthesis</a>.</p>\n<p>Would you be interested in working on some of those? (Or adding more for other nolint simpNF attributes that don't have linked issues?)</p>",
        "id": 434259711,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713486737
    }
]