[
    {
        "content": "<p>It seems like we've historically ended up with parallel <code>Center</code> and <code>Centralizer</code> modules:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Group</span><span class=\"bp\">/</span><span class=\"n\">Center</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Group</span><span class=\"bp\">/</span><span class=\"n\">Centralizer</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Ring</span><span class=\"bp\">/</span><span class=\"n\">Center</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Ring</span><span class=\"bp\">/</span><span class=\"n\">Centralizer</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">GroupTheory</span><span class=\"bp\">/</span><span class=\"n\">Subgroup</span><span class=\"bp\">/</span><span class=\"n\">Center</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">GroupTheory</span><span class=\"bp\">/</span><span class=\"n\">Subgroup</span><span class=\"bp\">/</span><span class=\"n\">Centralizer</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">GroupTheory</span><span class=\"bp\">/</span><span class=\"n\">Submonoid</span><span class=\"bp\">/</span><span class=\"n\">Center</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">GroupTheory</span><span class=\"bp\">/</span><span class=\"n\">Submonoid</span><span class=\"bp\">/</span><span class=\"n\">Centralizer</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">GroupTheory</span><span class=\"bp\">/</span><span class=\"n\">Subsemigroup</span><span class=\"bp\">/</span><span class=\"n\">Center</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">GroupTheory</span><span class=\"bp\">/</span><span class=\"n\">Subsemigroup</span><span class=\"bp\">/</span><span class=\"n\">Centralizer</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n</code></pre></div>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/13034\">#13034</a>, Yaël is proposing merging the ones for Group (and splitting out results related to GroupWithZero). Does anyone have thoughts on this?</p>",
        "id": 443057271,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717680239
    },
    {
        "content": "<p>\"historically\" is a strong word. It's mostly <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span>'s doing</p>",
        "id": 443057872,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717680433
    },
    {
        "content": "<p>You've probably done this differently for a good reason, but just for my interest: in the PR, why don't you define <code>center</code> as a special case of <code>centralizer</code>?</p>",
        "id": 443060996,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1717680944
    },
    {
        "content": "<p>I am just moving stuff around</p>",
        "id": 443061186,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717680967
    },
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> , thoughts? :)</p>",
        "id": 443064447,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717681544
    },
    {
        "content": "<p>Without further context, I'd be inclined to either merge all the pairs or merge none of them, and the former seems like something for a standalone PR.</p>",
        "id": 443066501,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717681946
    },
    {
        "content": "<p>What is the reason for merging them? My default is to prefer more smaller files, as usual, but if there's good reason it's not a strong preference.</p>",
        "id": 443068086,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717682391
    },
    {
        "content": "<p>I am splitting off the <code>GroupWithZero</code> results. If I don't merge them, I find myself with four tiny files. If I merge them, I find myself with one short file and one tiny file.</p>",
        "id": 443068675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717682537
    },
    {
        "content": "<p>There are also no import considerations against merging</p>",
        "id": 443068733,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717682558
    },
    {
        "content": "<p>(also, motivated by my previous question: we could refactor <code>center</code> as a special case of <code>centralizer</code> in the future... I guess this gives you some <code>center</code> API for free)</p>",
        "id": 443069012,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1717682642
    },
    {
        "content": "<p>Yeah, I don't think there's enough difference mathematicall between center and centralizer to warrant separate files</p>",
        "id": 443069167,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717682687
    },
    {
        "content": "<p>Will the later center/centralizer files be similarly tiny? I have no objections to doing the refactor in stages, but would be sad if avoiding tiny files here resulted in large files later. Otherwise, sounds good.</p>",
        "id": 443080384,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717685784
    },
    {
        "content": "<ul>\n<li><code>GroupTheory.Subsemigroup</code>: Nothing about <code>GroupWithZero</code>, so no tiny file</li>\n<li><code>GroupTheory.Submonoid</code>: Nothing about <code>GroupWithZero</code>, so no tiny file</li>\n<li><code>GroupTheory.Subgroup</code>: A few declarations about <code>GroupWithZero</code>, so two tiny files</li>\n</ul>",
        "id": 443085361,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717686796
    }
]