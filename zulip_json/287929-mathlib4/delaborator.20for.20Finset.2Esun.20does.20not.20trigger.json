[
    {
        "content": "<p>In the following MWE the second sum does not get pretty-printed the way I'd like it too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"sd\">/-- Test that the delaborator works in this particular case. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- check pretty-printing here</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>this gets displayed as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.sum</span> <span class=\"n\">Finset.univ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>I would like to see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>The reason is that the delaborator assumes that <code>Finset.sum</code> has exactly 5 Arguments in <a href=\"https://github.com/leanprover-community/mathlib4/blob/69bf34c214a5aae78d3119d36620103141f12e10/Mathlib/Algebra/BigOperators/Basic.lean#L150\">this line of the source code</a> but in my example with matrices, there are 7 arguments. I tried to modify the delaborator but there are two things I don't understand:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/blob/69bf34c214a5aae78d3119d36620103141f12e10/Mathlib/Algebra/BigOperators/Basic.lean#L154\">At the place where it calls <code>← delab</code></a> is there a way to tell it to only delab using the first 5 arguments and ignoring any more arguments?</li>\n<li>If I do a <code>match</code> case for additional arguments, I end up with an <code>args : Array Expr</code> containing all arguments that aren't really part of the sum, and I just want to print them at the end of the pretty-printed Syntax. How would I have to modify the snippets <a href=\"https://github.com/leanprover-community/mathlib4/blob/69bf34c214a5aae78d3119d36620103141f12e10/Mathlib/Algebra/BigOperators/Basic.lean#L162\"><code> `(∑ $binder, $body)</code></a> ? Something similar to <code> `((∑ $binder, $body)) $args</code>? Except that <code>$args</code> seems not to be the right thing.</li>\n</ul>",
        "id": 432068318,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1712610868
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover/lean4/pull/3375\">lean4#3375</a> is supposed to have fixed this?</p>",
        "id": 432068962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712611133
    },
    {
        "content": "<p>That Lean PR won't fix this one. You can put the <code>withOverApp</code> combinator around that delaborator to get it to handle over-application.</p>",
        "id": 432072003,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712612287
    },
    {
        "content": "<p>Here's fixing <code>delabFinsetProd</code>, and <code>delabFinsetSum</code> is similar:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">scoped</span> <span class=\"n\">delab</span> <span class=\"n\">app.Finset.prod</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">delabFinsetProd</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span>\n  <span class=\"n\">whenPPOption</span> <span class=\"n\">getPPNotation</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withOverApp</span> <span class=\"mi\">5</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f.isLambda</span>\n  <span class=\"k\">let</span> <span class=\"n\">ppDomain</span> <span class=\"bp\">←</span> <span class=\"n\">getPPOption</span> <span class=\"n\">getPPPiBinderTypes</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">withAppArg</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withBindingBodyUnusedName</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">delab</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">s.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">Finset.univ</span> <span class=\"mi\">2</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">binder</span> <span class=\"bp\">←</span>\n      <span class=\"k\">if</span> <span class=\"n\">ppDomain</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">withNaryArg</span> <span class=\"mi\">0</span> <span class=\"n\">delab</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">extBinder</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">i</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">extBinder</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">i</span><span class=\"o\">):</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"bp\">$</span><span class=\"n\">binder</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">ss</span> <span class=\"bp\">←</span> <span class=\"n\">withNaryArg</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">delab</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">i</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">ss</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 432072454,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712612541
    },
    {
        "content": "<p>Ah, I was looking for <code>withOverApp</code> but could not find it</p>",
        "id": 432072772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712612703
    },
    {
        "content": "<p>Pretty much every <code>delab app.</code> should use <code>withOverApp</code>, right?</p>",
        "id": 432072877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712612754
    },
    {
        "content": "<p>I'll make a PR</p>",
        "id": 432073896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712613265
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12022\">#12022</a></p>",
        "id": 432074403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712613552
    },
    {
        "content": "<p>Thank you very much, both of you!</p>",
        "id": 432080298,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1712616792
    }
]