[
    {
        "content": "<p>To see how far the formalization of topology is progressing and to identify some nice small projects for myself (and possibly new members), I’m interested in tracking how many results in the pi-base (<a href=\"https://topology.pi-base.org/\">https://topology.pi-base.org/</a>) (a website that contains topological definitions and relations between spaces) have been formalized so far in Lean. I started with two simple files which import Mathlib, one that runs #check on every property in pi-base (to see if the definition is present) and one that runs #synth for every result to deduce the various theorems from pi-base. Formalization would be complete if all these commands pass without error. However, doing all of pi-base would be a lot of work, and I think that many results are nice first problems to tackle (provided some experience in topology). </p>\n<p>As such, I was wondering if it would be interesting to set this up as a project with a Mathlib dependency in a similar fashion as done for the Matrix Cookbook by Eric Wieser? I think it can provide for a nice overview of missing results for new members. Let me know what you think, and what would be the best way to set this up!</p>",
        "id": 420788417,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707560237
    },
    {
        "content": "<p>Sounds good to me!</p>",
        "id": 420798799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707570534
    },
    {
        "content": "<p>It looks like there are 434 theorems, which is about the same as the matrix cookbook</p>",
        "id": 420800161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707571722
    },
    {
        "content": "<p>Except it looks far more likely that the ones here are actually correct!</p>",
        "id": 420800182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707571745
    },
    {
        "content": "<p>Oh, I guess the property / space grid is in addition to all the theorems</p>",
        "id": 420800303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707571875
    },
    {
        "content": "<p>Yes, they collect over three dimensions, Spaces, Properties and Theorems. I think that tracking the Theorems would be a nice way of seeing what is still missing in this regard. To this end it is important to check that all Properties are defined as well, of course. With the experience of the matrix cookbook, would you suggest that I proceed similarly here, or do you have new insights that suggest another route?</p>",
        "id": 420803117,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707574288
    },
    {
        "content": "<p>I think the main learning in the matrix cookbook was to generate as much as possible before doing any manual work</p>",
        "id": 420803747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707574822
    },
    {
        "content": "<p>So that means, scrape the website and generate a file for each statement of the form <code>theorem T000XYZ : sorry := sorry</code>, probably with the LaTeX docstring above it</p>",
        "id": 420803777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707574853
    },
    {
        "content": "<p>It might be a nice experiment to try to use AI autoformalization to state the theorems, though I don't know how effective that would actually be. Probably the output is easier to fix than write from scratch.</p>",
        "id": 420803820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707574903
    },
    {
        "content": "<p>Okay, my experience with web scraping is non-existent, but I’ll give it a try soon! I know that they have a GitHub as well, perhaps there’s an easy file that contains what I’m looking for!</p>",
        "id": 420804155,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707575175
    },
    {
        "content": "<p>Yes, that's probably better than scraping!</p>",
        "id": 420804493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707575521
    },
    {
        "content": "<p>I've checked the GitHub, this part should be easy</p>",
        "id": 420813349,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707582660
    },
    {
        "content": "<p>I wrote some Julia code that reads in the properties and automatically tries to infer the Mathlib names. Then it creates a file that looks as follows. Of course, for any name that deviates, I should add an exception to the code, but that is fine. Would a file like this be useful to check if Properties have been defined in Mathlib? For Theorems, I'll do a similar thing in a few days, I don't have time right now! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"c1\">-- P000001 : $T_0$</span>\n<span class=\"k\">#check</span> <span class=\"n\">T0Space</span>\n\n<span class=\"c1\">-- P000002 : $T_1$</span>\n<span class=\"k\">#check</span> <span class=\"n\">T1Space</span>\n\n<span class=\"c1\">-- P000003 : $T_2$</span>\n<span class=\"k\">#check</span> <span class=\"n\">T2Space</span>\n\n<span class=\"c1\">-- P000004 : $T_{2 \\frac{1}{2}}$</span>\n<span class=\"k\">#check</span> <span class=\"n\">T25Space</span>\n\n<span class=\"c1\">-- P000005 : $T_3$</span>\n<span class=\"k\">#check</span> <span class=\"n\">T3Space</span>\n\n<span class=\"c1\">-- P000006 : $T_{3 \\frac{1}{2}}$</span>\n<span class=\"k\">#check</span> <span class=\"n\">T35Space</span>\n\n\n<span class=\"bp\">....</span>\n\n\n<span class=\"c1\">-- P000176 : Cardinality $\\geq 4$</span>\n<span class=\"k\">#check</span> <span class=\"n\">CardinalityGeq4Space</span>\n\n<span class=\"c1\">-- P000177 : $\\sigma$-space</span>\n<span class=\"k\">#check</span> <span class=\"n\">SigmaSpace</span>\n\n<span class=\"c1\">-- P000178 : $\\aleph$-space</span>\n<span class=\"k\">#check</span> <span class=\"n\">AlephSpace</span>\n\n<span class=\"c1\">-- P000179 : $\\aleph_0$-space</span>\n<span class=\"k\">#check</span> <span class=\"n\">Aleph0Space</span>\n\n<span class=\"c1\">-- P000180 : Hereditarily separable</span>\n<span class=\"k\">#check</span> <span class=\"n\">HereditarilySeparableSpace</span>\n</code></pre></div>",
        "id": 420818010,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707586189
    },
    {
        "content": "<p>(If you're interested, I just forked the pi-base GitHub (it seems to not have grown a lot recently) and added a file 'properties_to_cleaned.jl', which outputs 'properties_in_lean.txt' and 'properties_cleaned.txt'. (The latter should be a lean-file, but I'll change the extension manually later, to avoid errors regarding that there is no project.). Everything is very hacky, but that's fine for this purpose, as we only need to get the files once I guess)</p>",
        "id": 420818716,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707586722
    },
    {
        "content": "<p>I can generate Lean versions of the theorems in pi-base automatically now. As the names for the various spaces are determined by (hacky) pattern matching, I will add modifications as I go. For now, I can generate files that look like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"c1\">--T000001:</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">CountablyCompactSpace</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">--T000002:</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CountablyCompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">WeaklyCountablyCompactSpace</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">--T000003:</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SequentiallyCompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">CountablyCompactSpace</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">--T000004:</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CountablyCompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">PseudocompactSpace</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"c1\">--T000001:</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">CountablyCompactSpace</span> <span class=\"n\">X</span>\n\n<span class=\"c1\">--T000002:</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CountablyCompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">WeaklyCountablyCompactSpace</span> <span class=\"n\">X</span>\n\n<span class=\"c1\">--T000003:</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">SequentiallyCompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">CountablyCompactSpace</span> <span class=\"n\">X</span>\n\n<span class=\"c1\">--T000004:</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CountablyCompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">PseudocompactSpace</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>So, most automatisation seems done</p>",
        "id": 421104001,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707763367
    },
    {
        "content": "<p>However, I have two questions:</p>\n<ol>\n<li>\n<p>I will probably want to run this in some project that depends on Lean4, what is the best approach for this? I don't need anything fancy, if it just updates Mathlib and Lean daily and runs the files I'm happy. Extra credit if someone can set this up for me real quick (as it should probably also be able to run Julia) (I'm happy to convert my code to Python if this is substantially easier). </p>\n</li>\n<li>\n<p>Now I'm using infer_instance, which seems to work, but I'm not sure how to get that to work when I get spaces that do not have a certain property, like<code> ¬CompactSpace</code>. The same problem seems to occur for using #synth. For infer_instance, I'm just adding hypotheses like <code>h1 : ¬CompactSpace</code>, but I don't think that'll allow infer_instance to work. I tried <code>aesop</code>but that fails at e.g. </p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">--T000099:</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T1Space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">T4Space</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 421105125,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707763693
    },
    {
        "content": "<p>Currently, the project is sitting here (<a href=\"https://github.com/JADekker/pi_base_data\">https://github.com/JADekker/pi_base_data</a>), which is a fork of the pi-base GitHub. The files that check the properties are in the folders dubbed <code>lean_checklist_...</code>, where I've split up the files to make sure they are not too long.</p>",
        "id": 421105343,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707763757
    },
    {
        "content": "<p>As 140 out of 174 definitions in pi-base seem missing (probably less because of my bad pattern-matching), it is a bit hard to easily generate a long list of examples where it works/fails.</p>",
        "id": 421105840,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707763888
    },
    {
        "content": "<p>If that number is right, 341 out of 447 theorems in Pi-base cannot be attempted because a definition is lacking, so I think we now have a very nice list of problems that people may tackle if they want a new, hopefully usually relatively short, project</p>",
        "id": 421106496,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707764083
    },
    {
        "content": "<p>Would there be a nice way to summarise the files that I made/automatically count the number of missing definitions/identify the most important missing definitions and so forth, so we can identify what things one might focus on? Let me know!</p>",
        "id": 421106677,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707764150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421105125\">said</a>:</p>\n<blockquote>\n<ol>\n<li>I will probably want to run this in some project that depends on Lean4, what is the best approach for this? I don't need anything fancy, if it just updates Mathlib and Lean daily and runs the files I'm happy. Extra credit if someone can set this up for me real quick (as it should probably also be able to run Julia) (I'm happy to convert my code to Python if this is substantially easier). </li>\n</ol>\n</blockquote>\n<p><a href=\"https://docs.github.com/en/actions\">Github actions</a> would be the obvious way to go. There seems to be a CRON tool, and in general those give you a way to run commands for you, so as long as you can already run all the things you need from a bash script, you should be able to automate it :)</p>",
        "id": 421126904,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1707771310
    },
    {
        "content": "<p>This is a <em>very</em> cool project BTW! Once it's up and running you might want to ping some topologists to see if we can persuade them to fill in the missing definitions :-)</p>",
        "id": 421132090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707773150
    },
    {
        "content": "<p>I'd recommend writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">PiBase</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">T000001</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">CountablyCompactSpace</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">T000002</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CountablyCompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">WeaklyCountablyCompactSpace</span> <span class=\"n\">X</span>\n <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>etc, because then you can easily check which theorems are present and missing, as I do in the matrix cookbook</p>",
        "id": 421135685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707774524
    },
    {
        "content": "<p>I'm using <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook/blob/master/analyze.lean\">this script</a> and <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook/blob/master/.github/workflows/lean_build.yml#L44-L57\">these CI steps</a> to generate <a href=\"https://eric-wieser.github.io/lean-matrix-cookbook/progress_bar.svg\">this progress bar</a>.</p>",
        "id": 421135807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707774584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380890\">Emilie (Shad Amethyst)</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421126904\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421105125\">said</a>:</p>\n<blockquote>\n<ol>\n<li>I will probably want to run this in some project that depends on Lean4, what is the best approach for this? I don't need anything fancy, if it just updates Mathlib and Lean daily and runs the files I'm happy. Extra credit if someone can set this up for me real quick (as it should probably also be able to run Julia) (I'm happy to convert my code to Python if this is substantially easier). </li>\n</ol>\n</blockquote>\n<p><a href=\"https://docs.github.com/en/actions\">Github actions</a> would be the obvious way to go. There seems to be a CRON tool, and in general those give you a way to run commands for you, so as long as you can already run all the things you need from a bash script, you should be able to automate it :)</p>\n</blockquote>\n<p>I’m kind of a GitHub novice, how hard would it be to set this up?</p>",
        "id": 421182699,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707805095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421135807\">said</a>:</p>\n<blockquote>\n<p>I'm using <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook/blob/master/analyze.lean\">this script</a> and <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook/blob/master/.github/workflows/lean_build.yml#L44-L57\">these CI steps</a> to generate <a href=\"https://eric-wieser.github.io/lean-matrix-cookbook/progress_bar.svg\">this progress bar</a>.</p>\n</blockquote>\n<p>Thank you, I’ll look into it!</p>",
        "id": 421182787,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707805189
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10621\">#10621</a> brings us 1 step closer by defining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">R_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> spaces</p>",
        "id": 421793456,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708061766
    },
    {
        "content": "<p>BTW, is there a name for \"exists a <code>UniformSpace</code> structure that agrees with the topology and is a <code>CompleteSpace</code>\"? Something between completely regular and Polish.</p>",
        "id": 421796133,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708063180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421793456\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10621\">#10621</a> brings us 1 step closer by defining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">R_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> spaces</p>\n</blockquote>\n<p>That’s great! <a href=\"https://github.com/leanprover-community/mathlib4/pull/10601\">#10601</a> Adds the implication from sigma compact to Lindelöf by the way!</p>",
        "id": 421803095,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708067908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421135807\">said</a>:</p>\n<blockquote>\n<p>I'm using <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook/blob/master/analyze.lean\">this script</a> and <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook/blob/master/.github/workflows/lean_build.yml#L44-L57\">these CI steps</a> to generate <a href=\"https://eric-wieser.github.io/lean-matrix-cookbook/progress_bar.svg\">this progress bar</a>.</p>\n</blockquote>\n<p>I’ll try to learn some programming in Lean the coming days to properly understand this so I can modify it for pi-base, if time allows! (I can’t neglect my own research of course!)</p>",
        "id": 421803294,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708068049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421796133\">said</a>:</p>\n<blockquote>\n<p>BTW, is there a name for \"exists a <code>UniformSpace</code> structure that agrees with the topology and is a <code>CompleteSpace</code>\"? Something between completely regular and Polish.</p>\n</blockquote>\n<p>I’m not aware of a name, good question!</p>",
        "id": 421803994,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708068468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421803095\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421793456\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10621\">#10621</a> brings us 1 step closer by defining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">R_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> spaces</p>\n</blockquote>\n<p>That’s great! <a href=\"https://github.com/leanprover-community/mathlib4/pull/10601\">#10601</a> Adds the implication from sigma compact to Lindelöf by the way!</p>\n</blockquote>\n<p>I merged it but I think that we should split the file and change the <code>import</code> hierarchy so that we can use this fact in the file about σ-compact spaces to deduplicate API.</p>",
        "id": 421804008,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708068482
    },
    {
        "content": "<p>As a first step, we can move all the compactness-related definitions to a new file <code>Topology/Compactness/Defs</code>, moving some of them from <code>Topology/Defs/Filter</code> and some from other files.</p>",
        "id": 421804186,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708068575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421804008\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421803095\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421793456\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10621\">#10621</a> brings us 1 step closer by defining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">R_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> spaces</p>\n</blockquote>\n<p>That’s great! <a href=\"https://github.com/leanprover-community/mathlib4/pull/10601\">#10601</a> Adds the implication from sigma compact to Lindelöf by the way!</p>\n</blockquote>\n<p>I merged it but I think that we should split the file and change the <code>import</code> hierarchy so that we can use this fact in the file about σ-compact spaces to deduplicate API.</p>\n</blockquote>\n<p>Thank you!</p>",
        "id": 421804350,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708068640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421804186\">said</a>:</p>\n<blockquote>\n<p>As a first step, we can move all the compactness-related definitions to a new file <code>Topology/Compactness/Defs</code>, moving some of them from <code>Topology/Defs/Filter</code> and some from other files.</p>\n</blockquote>\n<p>Yes, this sounds like a good approach!</p>",
        "id": 421804442,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708068695
    },
    {
        "content": "<p>Another possible name for the file: <code>Topology/Defs/Compact</code></p>",
        "id": 421804454,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708068701
    },
    {
        "content": "<p>Not sure which one is better.</p>",
        "id": 421804490,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708068719
    },
    {
        "content": "<p>Fun fact: π-base can't prove that <a href=\"https://topology.pi-base.org/spaces?q=Pseudometrizable+%2B+Separable+%2B+%7ESecond+Countable\">https://topology.pi-base.org/spaces?q=Pseudometrizable+%2B+Separable+%2B+%7ESecond+Countable</a> is impossible</p>",
        "id": 421810497,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708071792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421793456\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10621\">#10621</a> brings us 1 step closer by defining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">R_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> spaces</p>\n</blockquote>\n<p>This should close/make it able to close at least three theorems (T286 - T288) immediately or relatively easily, so that is very nice!</p>",
        "id": 421821447,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708076081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421810497\">said</a>:</p>\n<blockquote>\n<p>Fun fact: π-base can't prove that <a href=\"https://topology.pi-base.org/spaces?q=Pseudometrizable+%2B+Separable+%2B+%7ESecond+Countable\">https://topology.pi-base.org/spaces?q=Pseudometrizable+%2B+Separable+%2B+%7ESecond+Countable</a> is impossible</p>\n</blockquote>\n<p>They take a database approach as far as I can tell, so if nobody added the result, it doesn't know this indeed. Once we have most things in Mathlib, a similar website/page on the site where you pick properties and it tries to infer the result in Lean would be very nice</p>",
        "id": 421821734,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708076177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421796133\">said</a>:</p>\n<blockquote>\n<p>BTW, is there a name for \"exists a <code>UniformSpace</code> structure that agrees with the topology and is a <code>CompleteSpace</code>\"? Something between completely regular and Polish.</p>\n</blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Completely_uniformizable_space\">https://en.wikipedia.org/wiki/Completely_uniformizable_space</a></p>",
        "id": 421829064,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1708078770
    },
    {
        "content": "<p>I am a bit worried that this pi-base tracking idea could lead to performance issues, or at least code bloat. I think we really don't want every topology lemma to send instance synthesis through a maze of hundreds of classes defining extremely exotic properties of topological spaces. Also we don't want each lemma to require 20 lines of type class assumptions like we have in differential geometry.</p>",
        "id": 421849140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708086528
    },
    {
        "content": "<p>I think we should have definitions only for properties that show up in mathematics outside of the corner of mathematics that is studying pathological topological spaces as an end goal.</p>",
        "id": 421849349,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708086622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421849349\">said</a>:</p>\n<blockquote>\n<p>I think we should have definitions only for properties that show up in mathematics outside of the corner of mathematics that is studying pathological topological spaces as an end goal.</p>\n</blockquote>\n<p>That is a fair concern, I think we should probably label which results are ‘useful but missing’ and which ones are ‘missing but currently not of immediate interest’. I wouldn’t make most of them instances either, we can keep most them as theorems?</p>",
        "id": 421850305,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708087107
    },
    {
        "content": "<p>There should be a condensed sets version of this so we can see how many of the pathologies survive :-)</p>",
        "id": 421852563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708088046
    },
    {
        "content": "<p>I agree that we shouldn't have too many properties/results in Mathlib that are (/seem) not necessary. However, I believe that a systematic approach in which we identify all properties that have (and have not) been added to Lean might be useful. Missing properties could then be labelled, e.g. <code>WIP</code>, <code>missing, needed for X, Y, Z</code> or <code>missing, exotic</code>, to indicate what the community thinks on whether these should/should not be added. </p>\n<p>I also agree that not all theorems in pi-base should be made instances, but they could be made theorems/examples. However, it seems to me that getting a 1-1 mapping between theorems in pi-base and lean proofs of these statements might be very useful.</p>",
        "id": 421855438,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708089172
    },
    {
        "content": "<p>In practice it seemed to be quite difficult to establish a 1-1 mapping between theorems in the Stacks project and theorems in mathlib, because there were theorems in the Stacks project which we didn't want in mathlib (e.g. they were not stated in the right generality, they were too weird, they were actually definitions, they were used only in proofs which we didn't want because we had a different proof of the same theorem  etc etc)</p>",
        "id": 421858276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708090124
    },
    {
        "content": "<p>I added R₀ because I was generalizing a lemma from <code>T2</code> to <code>R1</code> and a dependency was done for <code>T1</code> (<code>R0</code> is enough).</p>",
        "id": 421865628,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708092679
    },
    {
        "content": "<p><code>!bench</code> found no significant changes</p>",
        "id": 421881889,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708097561
    },
    {
        "content": "<p>A few more ideas (slightly outside of the scope of the pi base, but close enough):</p>\n<ul>\n<li>create a table with rows <code>T3Space</code> etc and columns <code>X × Y</code> and other constructions (probably, separate rows for <code>∀ i : ι, X i</code> with finite, countable, and generic <code>ι</code>) for each cell try to generate the instance;</li>\n<li>code and linter to autogenerate instances for \"unrelated\" synonyms (e.g., topological instances for <code>OrderDual</code> or <code>Multiplicative</code>).</li>\n</ul>",
        "id": 421942863,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1708119701
    },
    {
        "content": "<p>Could be interesting!</p>",
        "id": 421982681,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708152851
    },
    {
        "content": "<p>Cross-referencing some related discussion that spun out of my newbie questions at <a href=\"#narrow/stream/113489-new-members/topic/general.20topology.20in.20mathlib\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/general.20topology.20in.20mathlib</a> where I'm taking naive steps to start writing formalizations of some of our assertions at the pi-Base (including for some properties not currently modeled in mathlib).</p>",
        "id": 435471737,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714081061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/421849349\">said</a>:</p>\n<blockquote>\n<p>I think we should have definitions only for properties that show up in mathematics outside of the corner of mathematics that is studying pathological topological spaces as an end goal.</p>\n</blockquote>\n<p>Sounds quite reasonable to me - as a general topologist I'm quite interested in formalization of my field, but that of course could be done as a project that just uses mathlib4 as a dependency. But it'd be great if there was a clear workflow so that things of more general use can be implemented upstream: I'm a bad judge of what those are as someone who loves pathologies in set-theoretic topology. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 435471928,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714081170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/420803777\">said</a>:</p>\n<blockquote>\n<p>scrape the website</p>\n</blockquote>\n<p><span aria-label=\"triumph\" class=\"emoji emoji-1f624\" role=\"img\" title=\"triumph\">:triumph:</span> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  Enabling folks who want to build our on database without having to scrape our app (or maintain an API) is one of the several reasons it's all just text files stored at  <a href=\"https://github.com/pi-base/data\">https://github.com/pi-base/data</a> Another option is the JSON artifact we produce as part of our CI. <a href=\"https://github.com/pi-base/data/actions/runs/8794979526\">https://github.com/pi-base/data/actions/runs/8794979526</a> I wish more databases open-sourced their data (though we have an advantage that we're not storing a huge computer-generated dataset)</p>",
        "id": 435478432,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714084993
    },
    {
        "content": "<p>Anyway, thanks to Josha in that other thread for catching me up on this project. I'm quite interested in collaborating with anyone who wants to work with us to find the best way our projects can support each other (and build engagement in formalized mathematics by topologists).</p>",
        "id": 435478902,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714085293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"468051\">Steven Clontz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/435478432\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tracking.20pi-base/near/420803777\">said</a>:</p>\n<blockquote>\n<p>scrape the website</p>\n</blockquote>\n<p><span aria-label=\"triumph\" class=\"emoji emoji-1f624\" role=\"img\" title=\"triumph\">:triumph:</span> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  Enabling folks who want to build our on database without having to scrape our app (or maintain an API) is one of the several reasons it's all just text files stored at  <a href=\"https://github.com/pi-base/data\">https://github.com/pi-base/data</a> Another option is the JSON artifact we produce as part of our CI. <a href=\"https://github.com/pi-base/data/actions/runs/8794979526\">https://github.com/pi-base/data/actions/runs/8794979526</a> I wish more databases open-sourced their data (though we have an advantage that we're not storing a huge computer-generated dataset)</p>\n</blockquote>\n<p>A JSON artifact would be ideal for lean as the markdown+yaml output is quite hard to parse in general, so lean will unlikely have a parser for that format any time soon. Is there an easy way to link to the latest <code>bundle.json</code> artifact?</p>",
        "id": 435578172,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1714135170
    },
    {
        "content": "<p><a href=\"https://pi-base-bundles.s3.us-east-2.amazonaws.com/refs/heads/main.json\">https://pi-base-bundles.s3.us-east-2.amazonaws.com/refs/heads/main.json</a></p>\n<p>I should add that link explicitly at the <a href=\"https://topology.pi-base.org/dev\">https://topology.pi-base.org/dev</a> page so it's easier to find (and will do so now).</p>",
        "id": 436176427,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714443127
    },
    {
        "content": "<p>And done. Thanks for pointing out how obnoxious it is to find that link. (Well, to be honest, I was trying to show a student earlier today how the pi-Base worked, and that made me remember this thread.) <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Anyway, hopefully the next person who wants to hack on the pi-Base can discover that we have a relatively easy JSON blob to ingest.</p>",
        "id": 436179554,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714444796
    }
]