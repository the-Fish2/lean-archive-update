[
    {
        "content": "<p><code>IsScalarTower</code> is the way of telling the typeclass inference system that we have a commuting triangle of commutative rings. The \"AKLB set-up\" (notation commonly used when L / K is a finite Galois extension of number fields, A is the algebraic integers of K and B is the algebraic integers of L) is similarly a way of carrying round a commutative square of ring morphisms. But then this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Defs</span>\n\n<span class=\"c1\">-- notation \"AKLB\" is taken from this 2017 MIT course</span>\n<span class=\"c1\">--  https://mitocw.ups.edu.ec/courses/mathematics/18-785-number-theory-i-fall-2017/lecture-notes/</span>\n<span class=\"c1\">-- (see lecture 5)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">     K ----&gt; L</span>\n<span class=\"cm\">     /\\      /\\</span>\n<span class=\"cm\">     |       |</span>\n<span class=\"cm\">     A ----&gt; B</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">IsAKLB</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">B</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">where</span> <span class=\"c1\">-- error</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">parent field type mismatch, field 'smul_assoc' from parent 'IsScalarTower' has type</span>\n<span class=\"cm\">  ∀ (x : A) (y : K) (z : L), (x • y) • z = x • y • z : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ∀ (x : A) (y : B) (z : L), (x • y) • z = x • y • z : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 437308158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715016965
    },
    {
        "content": "<p>The two <code>IsScalarTower</code> both have a <code>smul_assoc</code> field, so that you should probably do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsAKLB</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">B</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">A</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">isScalarTowerABL</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n  <span class=\"n\">isScalarTowerAKL</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 437309339,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715017455
    },
    {
        "content": "<p>(But, it is unclear this would be useful as we cannot make <code>isScalarTowerABL</code> an instance because it depends only on the three rings <code>A</code>, <code>B</code>, <code>L</code>, and not on <code>K</code>.)</p>",
        "id": 437309682,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715017581
    },
    {
        "content": "<p>I am very interested to see where we need all of the AKLB set-up here. Jou claimed she needed for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=galRestrictHom#doc\">docs#galRestrictHom</a> but I bet that works with L -&gt;_a[A] L rather than L -&gt;_a[K] L and I bet they're the same.</p>\n<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> how much of <code>RingTheory.IntegralRestrict</code> goes through if you replace <code>[FiniteDimensional K L]</code> by the assumption that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">L/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is algebraic? I suspect that all the galrestrict stuff will be fine.</p>",
        "id": 437311245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715018223
    },
    {
        "content": "<p>I'm not aware of a definition of field norm or trace for infinite extensions, but yes <code>RingTheory.IntegralRestrict</code> only needs algebraicity.</p>",
        "id": 437312400,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1715018710
    },
    {
        "content": "<p>oh yeah I wouldn't expect norms and traces to work.</p>",
        "id": 437313237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715019042
    },
    {
        "content": "<p><a href=\"https://tqft.net/mathlib4files/Mathlib/RingTheory/DedekindDomain/Different\">file#Mathlib/RingTheory/DedekindDomain/Different</a> is one place where the AKLB setup is actually needed.</p>",
        "id": 437313485,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1715019147
    },
    {
        "content": "<p>I was thinking that if a finite group <code>G</code> acts on a commutative ring <code>B</code> in such a way that <code>A</code> identifies to the subring of <code>B</code> fixed by <code>G</code>, then the topological space <code>Spec(A)</code> is the quotient of <code>Spec(B)</code> by the action of <code>G</code> (SGA 1 V 1.1, which refers to Bourbaki). In particular, <code>G</code> acts transitively on the prime ideals of <code>B</code> over a given prime ideal of <code>A</code>. Also, given <code>q</code> over <code>p</code>, the residual extension is quasi-Galois, and the decomposition group surjects onto the residual Galois group (which also gives the existence of <code>Frob</code>). Still, Bourbaki assumes <code>G</code> is finite.</p>",
        "id": 437313719,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715019244
    }
]