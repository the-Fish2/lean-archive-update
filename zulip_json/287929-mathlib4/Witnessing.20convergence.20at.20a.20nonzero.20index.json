[
    {
        "content": "<p>I'm sure this is simple, but I'm not great at using convergence of filters. I've reduced what I'm trying to prove down to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.CantorScheme</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ENNReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"n\">u</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n.succ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but I'm having trouble proving this. Could I get some help?</p>",
        "id": 424137290,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1709254285
    },
    {
        "content": "<p>Here is one way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.CantorScheme</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">ENNReal</span> <span class=\"n\">Topology</span> <span class=\"n\">Set</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">u</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hŒµ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÉ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n.succ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Iic</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">Iic_mem_nhds</span> <span class=\"n\">hŒµ</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">atTop</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">Iic</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">hu.eventually_mem</span> <span class=\"n\">h1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eventually_atTop</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hn</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le.step</span> <span class=\"n\">Nat.le.refl</span>\n</code></pre></div>",
        "id": 424139783,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709255895
    },
    {
        "content": "<p>Hopefully that generalizes to other problems you are interested in, and shows that you actually can make much stronger conclusions.</p>",
        "id": 424139828,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709255935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I'm curious, is there a benefit to writing <code>by exact? says exact Iic_mem_nhds hŒµ</code> instead of <code>by exact Iic_mem_nhds hŒµ</code>? Is the idea to indicate to other readers where the result came from?</p>",
        "id": 424140068,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709256123
    },
    {
        "content": "<p>Yes, it's just to show that Lean can do this itself by running <code>exact?</code></p>",
        "id": 424140743,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709256331
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.CantorScheme</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ENNReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">u</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">Œµ_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n.succ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span>  <span class=\"n\">eventually_atTop.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">eventually_le_of_tendsto_lt</span> <span class=\"n\">Œµ_pos</span> <span class=\"n\">hu</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span> <span class=\"n\">_</span> <span class=\"n\">m.le_succ</span><span class=\"o\">‚ü©</span>\n</code></pre></div>",
        "id": 424141331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709256463
    },
    {
        "content": "<p>it just seems kind of odd to see stuff like <code>simp? says</code> in the mathlib codebase... I would think we would use the suggestion itself</p>",
        "id": 424142750,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709256773
    },
    {
        "content": "<p>In the case of <code>simp</code> it is helpful to have the original invocation since it is not immediately obvious from the output (i.e. what lemmas needed to be explicitly provided)</p>",
        "id": 424146885,
        "sender_full_name": "llllvvuu",
        "timestamp": 1709258341
    }
]