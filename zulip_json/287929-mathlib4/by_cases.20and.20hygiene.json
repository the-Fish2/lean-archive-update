[
    {
        "content": "<p>I'm just updating all the tactic documentation in my course to Lean 4, and spotted this (something which is no doubt well-known): if <code>h : P ∧ Q</code> then <code>cases h</code> gives me inaccessible names <code>left✝: P</code> and <code>right✝: Q</code>, which as far as I know is expected behaviour and encourages users to supply names (which presumably leads to easier-to-maintain code). But <code>by_cases P</code> just gives me <code>h: P</code> in one goal and <code>h: ¬P</code> in the other (and makes any other hypothesis called <code>h</code> inaccessible). I thought we were moving away from this kind of behaviour. Is this just a case of an early tactic when we were more concerned with getting the port going than worrying about stuff like this? I want to tell my students \"if you don't name hypotheses then don't expect to be able to use them explicitly later\" and <code>by_cases</code> is a counterexample.</p>",
        "id": 410924782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704240883
    },
    {
        "content": "<p>(You probably already know there is also <code>by_cases hP : P</code>.)</p>",
        "id": 410925881,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704241376
    },
    {
        "content": "<p>Right, it's just that I'm having a hard time explaining why my students should use it!</p>",
        "id": 410928060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704242369
    },
    {
        "content": "<p>Just make an example with some hypothesis named <code>h</code> which will become inaccessible if you use <code>by_cases</code> without an explicit name. I don’t know what the answer is but my guess is that the tactic was ported more or less directly from lean3 without regard for hygiene</p>",
        "id": 410929174,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704242830
    },
    {
        "content": "<p>Does <code>by_contra</code> have a similar behaviour?</p>",
        "id": 410929224,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704242851
    },
    {
        "content": "<p>Huh I thought the point of <a href=\"https://github.com/leanprover-community/mathlib4/pull/8542\">#8542</a> was that it fixed this, <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> ?</p>",
        "id": 410931722,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704243435
    },
    {
        "content": "<p>That was certainly the goal, yeah</p>",
        "id": 410967826,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704266229
    },
    {
        "content": "<p>Yes, this behavior should have changed, Kevin. Are you sure you're on the latest version?</p>",
        "id": 410969810,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704267523
    },
    {
        "content": "<p>Oh! I'm on \"random mathlib from when I set up my course repo\" and I couldn't upgrade because of the cache issue :-/</p>",
        "id": 410973782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704269752
    },
    {
        "content": "<p>Tough luck :(</p>",
        "id": 410973897,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704269818
    },
    {
        "content": "<p>You know, it really doesn't take that long to compile enough of mathlib to make &lt;project of interest&gt; work, usually in the range 30 min - 1 hour</p>",
        "id": 410975581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704270752
    },
    {
        "content": "<p>sure it sucks but it's no reason to give up doing anything</p>",
        "id": 410975617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704270777
    },
    {
        "content": "<p>I don't want to upgrade mathlib on my project because if there's a chance that it's not fixed by Monday then I'm in real trouble.</p>",
        "id": 410977529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704271913
    },
    {
        "content": "<p>Right now there is no difference between old mathlib and new mathlib in terms of cache effectiveness</p>",
        "id": 410977612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704271943
    },
    {
        "content": "<p>today they both fail, tomorrow (or whenever this is fixed) they both work</p>",
        "id": 410977651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704271968
    },
    {
        "content": "<p>if it's not fixed by monday you should precompile mathlib and put it in a zip file and send it to your students</p>",
        "id": 410977761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704272021
    },
    {
        "content": "<p>Kevin, this only works for you right now because for already have a cache on your own computer</p>",
        "id": 410991215,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704278231
    },
    {
        "content": "<p>I know all of this, and that's why I'm changing nothing right now. I am not going to be telling a class of students to download and unpack some zip file, unfortunately; that is way too high a bar for the kind of people I have to deal with. I am however confident that things will be fixed before Monday :-) I know this community too well.</p>",
        "id": 411000620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704282587
    }
]