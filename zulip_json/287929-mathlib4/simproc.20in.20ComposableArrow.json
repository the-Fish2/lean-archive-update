[
    {
        "content": "<p>I just wasted one hour because I <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/CategoryTheory/ComposableArrows.lean#L40-L51\">missed those lines</a> in ComposableArrows.lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">New `simprocs` that run even in `dsimp` have caused breakages in this file.</span>\n\n<span class=\"cm\">(e.g. `dsimp` can now simplify `2 + 3` to `5`)</span>\n\n<span class=\"cm\">For now, we just turn off simprocs in this file.</span>\n<span class=\"cm\">We'll soon provide finer grained options here, e.g. to turn off simprocs only in `dsimp`, etc.</span>\n\n<span class=\"cm\">*However*, hopefully it is possible to refactor the material here so that no backwards compatibility</span>\n<span class=\"cm\">`set_option`s are required at all</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">simprocs</span><span class=\"w\"> </span><span class=\"n\">false</span>\n</code></pre></div>\n<p>Do we have any gadget that could output a warning if the type <code>ComposableArrows</code> appears in a file that does not turn off simprocs? Is there any plan about the refactor mentioned in the above file? <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> <span class=\"user-mention\" data-user-id=\"432800\">@yannis monbru</span></p>",
        "id": 447349648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1719441750
    },
    {
        "content": "<p>I am afraid I cannot help very much here, because when I originally wrote the code, I took care that <code>dsimp</code> did the best we may expect, but I do not understand exactly what are the changes in the internals of Lean which broke this and led to this <code>set_option</code> fix.</p>",
        "id": 447350340,
        "sender_full_name": "Joël Riou",
        "timestamp": 1719442098
    },
    {
        "content": "<p>You can see what happens in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">ComposableArrows</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span><span class=\"w\"> </span><span class=\"n\">ComposableArrows</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X₀</span><span class=\"w\"> </span><span class=\"n\">X₁</span><span class=\"w\"> </span><span class=\"n\">X₂</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X₀</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">X₁</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X₁</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">X₂</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">map'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mk₂</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">dsimp</span><span class=\"w\"> </span><span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">map'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mk₂</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">dsimp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">reduceAdd</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">reduceNeg</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">reduceAdd</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">Int</span><span class=\"bp\">.</span><span class=\"n\">reduceSub</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">reduceFinMk</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">simprocs</span><span class=\"w\"> </span><span class=\"n\">false</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">map'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mk₂</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">dsimp</span>\n</code></pre></div>",
        "id": 447350811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1719442357
    },
    {
        "content": "<p>Note this is three times the same statement.k</p>",
        "id": 447350830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1719442375
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">Simp</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"warn_me\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">composableArrows?</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find?</span><span class=\"w\"> </span><span class=\"ss\">`CategoryTheory.ComposableArrows</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">simprocs</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getOptions</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">composableArrows?</span><span class=\"bp\">.</span><span class=\"n\">isSome</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"n\">logWarning</span><span class=\"w\"> </span><span class=\"s2\">\"Consider turning off `simprocs` using `set_option simprocs false`\"</span>\n</code></pre></div>\n<p>could be easily turned into a linter.</p>",
        "id": 447353467,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719443764
    },
    {
        "content": "<p>This works as a slightly finer-grained fix than disabling all simprocs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">attribute</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">simprocAttr</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"bp\">.</span><span class=\"n\">reduceFinMk</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">map'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mk₂</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">dsimp</span>\n</code></pre></div>\n<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.reduceFinMk#doc\">docs#Fin.reduceFinMk</a>)</p>",
        "id": 447355851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719444528
    },
    {
        "content": "<p>Damiano, this is a bit too much since importing the file (transitively) would be enough to trigger the warning.</p>",
        "id": 447355857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1719444530
    },
    {
        "content": "<p>Eric: nice, there are less issues than I thought (I simply looked at all simp lemmas in the failing dsimp).</p>",
        "id": 447356033,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1719444595
    },
    {
        "content": "<p>It would be helpful if these simprocs had docstrings</p>",
        "id": 447356046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719444600
    },
    {
        "content": "<p>Especially since unlike theorems, you have no idea what they do from the hover in vscode</p>",
        "id": 447356144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719444618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simproc.20in.20ComposableArrow/near/447356144\">said</a>:</p>\n<blockquote>\n<p>Especially since unlike theorems, you have no idea what they do from the hover in vscode</p>\n</blockquote>\n<p>Thanks for looking at this. After looking at the code, I still have no idea what they do!</p>\n<p>What could be changed in lemmas like <code>Precomp.map_succ_succ</code> (or any other which may not be in the suitable form) so that it may still be applied automatically by dsimp without any change in options/attributes?</p>",
        "id": 447357078,
        "sender_full_name": "Joël Riou",
        "timestamp": 1719444928
    },
    {
        "content": "<p>I think you run into a mess around <code>OfNat.ofNat</code> here</p>",
        "id": 447357761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719445210
    },
    {
        "content": "<p>I think the only way to counter this dsimproc is with another dsimproc</p>",
        "id": 447358054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719445409
    }
]