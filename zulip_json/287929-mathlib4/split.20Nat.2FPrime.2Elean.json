[
    {
        "content": "<p>I'm planning to split <code>Data/Nat/Prime.lean</code> into its own directory. Motivation is that <code>Factorization/Basic</code> imports <code>Data/Nat/Prime.lean</code> and I have a new lemma for <code>Prime</code> that needs stuff from <code>Factorization/Basic</code>, but that lemma (and many others) certainly does not belong in the main <code>Prime</code> that gets imported for the <code>Prime</code> definition.  <code>Prime.lean</code> is simply ripe for splitting IMO. I would like to hear opinions on the whole matter, and pointers to documents or threads are highly appreciated, as this would be my first maintenance attempt.</p>\n<p>In Detail, I think a case can be made to have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Nat</span><span class=\"bp\">/</span><span class=\"n\">Prime</span><span class=\"bp\">/</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- Basic.lean</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- MinFac.lean</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- Infinitude.lean</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- Misc.lean</span>\n</code></pre></div>\n<p>Is there consensus for names like <code>Misc</code>, <code>Lemmas</code>, <code>Other</code>, or such?</p>",
        "id": 448088383,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1719735954
    },
    {
        "content": "<p>Generally we prefer <code>Defs</code> / <code>Basic</code> / <code>Lemmas</code> as the \"generic\" names.</p>",
        "id": 448090414,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719737536
    },
    {
        "content": "<p>(And I am <em>strongly</em> in favour of, where possible, splitting definitions into <code>Defs</code> files, which then depend as little as possible --- but no less --- on non-<code>Defs</code> files.)</p>",
        "id": 448090449,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719737572
    },
    {
        "content": "<p>So I propose</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Nat</span><span class=\"bp\">/</span><span class=\"n\">Prime</span><span class=\"bp\">/</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- Defs.lean</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- Basic.lean</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- MinFac.lean</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- Infinitude.lean</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- Lemmas.lean</span>\n</code></pre></div>",
        "id": 448090702,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1719737816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707242\">Ralf Stephan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/split.20Nat.2FPrime.2Elean/near/448090702\">said</a>:</p>\n<blockquote>\n<p>So I propose</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Nat</span><span class=\"bp\">/</span><span class=\"n\">Prime</span><span class=\"bp\">/</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- Defs.lean</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- Basic.lean</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- MinFac.lean</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- Infinitude.lean</span>\n<span class=\"bp\">+</span><span class=\"c1\">-- Lemmas.lean</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Looks reasonable, on first glance. (If <code>Basic</code> and <code>Lemmas</code> are meaningfully different or should rather be merged is not something I can judge without looking at the files. A reviewer will certainly opine on this :-))</p>",
        "id": 448090829,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719737929
    },
    {
        "content": "<p>The criterion could be whether a lemma is used or not.</p>",
        "id": 448091300,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1719738339
    },
    {
        "content": "<p>One option to speed up (at least partial) review might be to not do all the splits at once</p>",
        "id": 448093451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719739416
    },
    {
        "content": "<p>Note that any PR splitting files should make no changes other than splitting the files, ie don't add your new lemmas at the same time. The tedious part of splitting is that you need to create new copyright headers and this is typically done by looking at git history (probably in this case in both the lean 3 and lean 4 repos).</p>",
        "id": 448093544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719739445
    },
    {
        "content": "<p>I do wonder if we should switch to using <code>Copyright mathlib contributors</code>, but I guess we still want to maintain the <code>Authors</code> list which can be helpful for requesting reviews</p>",
        "id": 448093892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719739585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/split.20Nat.2FPrime.2Elean/near/448093544\">said</a>:</p>\n<blockquote>\n<p>Note that any PR splitting files should make no changes other than splitting the files, ie don't add your new lemmas at the same time. The tedious part of splitting is that you need to create new copyright headers and this is typically done by looking at git history (probably in this case in both the lean 3 and lean 4 repos).</p>\n</blockquote>\n<p>I would like to promulgate the following rules for copyright headers:</p>\n<ul>\n<li>It's okay to simply reproduce the copyright header of the file you are splitting. (After all, it sufficed before the split, for the same content.)</li>\n<li>Forensics into git history should be entirely optional, but welcome.</li>\n</ul>",
        "id": 448106917,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719747248
    },
    {
        "content": "<p>Can Copilot chat help here?</p>",
        "id": 448109731,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719749397
    },
    {
        "content": "<p>Looking forward to seeing it make up some random people in the lean community.</p>",
        "id": 448111502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719750879
    },
    {
        "content": "<p>This is assuming it has access to the git history for mathlib and mathlib4</p>",
        "id": 448112207,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719751535
    },
    {
        "content": "<p>No. It doesnâ€™t</p>",
        "id": 448112817,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719752043
    },
    {
        "content": "<p>Yeah, that seems like a bad idea</p>",
        "id": 448113244,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719752383
    },
    {
        "content": "<p>Maybe a compromise is a \"needs-archaology\" label for PRs where the archaeology has been skipped? Then either someone else can come along before they're merged, or do a cleanup pass after (removing the label either way).</p>",
        "id": 448113430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719752507
    },
    {
        "content": "<p>Or, anyone that appears in <code>git blame</code>?</p>",
        "id": 448114896,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1719753818
    },
    {
        "content": "<p>A tension here is that the authors line has always been ambiguous --- it is somewhere in between</p>\n<ul>\n<li>capture everyone who has touched this file</li>\n<li>identify the people who promise to be available long term to help maintain and update this file</li>\n</ul>",
        "id": 448204492,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719800129
    },
    {
        "content": "<p>The first would be ridiculous for many files. (I suspect I have touched every file in Mathlib. :-)</p>",
        "id": 448204517,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719800156
    },
    {
        "content": "<p>The second goes too far in ignoring significant contributions.</p>",
        "id": 448204575,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719800171
    },
    {
        "content": "<p>But the truth is that we are in some ill-defined compromise between the two of these.</p>",
        "id": 448204593,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719800188
    },
    {
        "content": "<p>I think I would phrase it as \"these are people who contributed significantly to the file\" (with an emphasis on mathematical contributions, and specifically excluding updates from large scale refactors caused by changes to an earlier file or upstream)</p>",
        "id": 448205040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719800479
    },
    {
        "content": "<p>it should be a subset of the first bullet but it's probably incomparable with the second</p>",
        "id": 448205074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719800520
    },
    {
        "content": "<p>also it includes people who contributed significantly to an earlier version of the file, even if their contributions are no longer visible due to a subsequent major refactor</p>",
        "id": 448205326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719800700
    },
    {
        "content": "<p>I agree with Mario's interpretation. If we wanted to improve clarity, we could have both \"Authors\" and \"Maintainers\"/\"Owners\" (in the style of codeowner)/\"Referent\"/\"Keeper\"/however we want to call the people who take responsibility for a file</p>",
        "id": 448260804,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1719822376
    },
    {
        "content": "<p>Please review <a href=\"https://github.com/leanprover-community/mathlib4/pull/14286\">#14286</a>.</p>",
        "id": 448372992,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1719849654
    }
]