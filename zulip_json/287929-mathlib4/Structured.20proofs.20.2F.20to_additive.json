[
    {
        "content": "<p>I have two questions related to the proof of B. H. Neumann Lemma that <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> and I managed to formalize.</p>\n<p>The first proof is in <a href=\"https://github.com/leanprover-community/mathlib4/tree/ACL%2FNeumann\">branch#ACL/Neumann</a> and is the object of a WIP PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/13047\">#13047</a><br>\nAs you can observe, there is an intricate construction of which one needs to keep a ton of invariants to get the clean main theorems.</p>\n<p>Inspired by comments of <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , I tried to split the proof into shorter shunks, creating structures that hold the result of the constructions. The result is in <a href=\"https://github.com/leanprover-community/mathlib4/tree/ACL%2FNeumann-attempt\">branch#ACL/Neumann-attempt</a></p>\n<p>A lot of things can certainly be golfed, but opinions would be welcome whether this is useful work, or not, and whether it can be improved in one way or another.</p>\n<p>Moreover, the whole file is supposed to have @[to_additive] tags, but the automatic system breaks down in two or three proofs, where Lean is confused by the presence of multiplicative inverses  of rational numbers which it (apparently) tries to replace by negation. Any help here would also be appreciated.</p>",
        "id": 445407376,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1718728476
    },
    {
        "content": "<p>Can you make a Mathlib branch that I can check out where the first/only error is a failure of <code>@[to_additive]</code>?</p>",
        "id": 445439417,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718737706
    },
    {
        "content": "<p>I may have such a thing hanging around in my reflog ...</p>",
        "id": 445439599,
        "sender_full_name": "Richard Copley",
        "timestamp": 1718737755
    },
    {
        "content": "<p><code>to_additive</code> is using some heuristics to decide whether to additivize an operation. It does so by looking at the type on which the multiplicative operation happens. If that type is <code>Rat</code>, then the heuristic should catch this and leave it alone.</p>",
        "id": 445439852,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718737815
    },
    {
        "content": "<p>You can also try the steps here, and see if any of them are useful:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/ToAdditive.lean#L130\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/ToAdditive.lean#L130</a></p>",
        "id": 445440217,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718737906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Structured.20proofs.20.2F.20to_additive/near/445439417\">said</a>:</p>\n<blockquote>\n<p>Can you make a Mathlib branch that I can check out where the first/only error is a failure of <code>@[to_additive]</code>?</p>\n</blockquote>\n<p>Are you able to try the content of <code>GroupTheory.CosetCover</code> from commit d9cd5b18d3 on Antoine's branch (uncomment @[to_additive] on line 481), with the cache from commit b7e495e480? (It's a little awkward, because a branch with errors doesn't really get a cache ... )</p>",
        "id": 445442264,
        "sender_full_name": "Richard Copley",
        "timestamp": 1718738414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Structured.20proofs.20.2F.20to_additive/near/445440217\">said</a>:</p>\n<blockquote>\n<p>You can also try the steps here, and see if any of them are useful:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/ToAdditive.lean#L130\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/ToAdditive.lean#L130</a></p>\n</blockquote>\n<p>I spent a while staring at that. It really looked like the chosen type should be the <code>Group</code> <code>G</code> as intended. I didn't make progress.</p>",
        "id": 445442512,
        "sender_full_name": "Richard Copley",
        "timestamp": 1718738500
    },
    {
        "content": "<p>On commit <code>d9cd5b18d33</code> I get a bunch of <code>unknown identifier</code> errors and no error raised by <code>to_additive</code>.</p>",
        "id": 445444373,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718739101
    },
    {
        "content": "<p>Oh, I missed your parenthetical</p>",
        "id": 445444410,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718739117
    },
    {
        "content": "<p>This looks like <a href=\"https://github.com/leanprover-community/mathlib4/pull/10830\">#10830</a>, presumably when using <code>simp</code> with a <code>GroupWithZero</code> lemma. You can try the workaround mentioned there.</p>",
        "id": 445444935,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718739302
    },
    {
        "content": "<p>By specifying the type explicitly 4 times and adding <code>@[to_additive]</code> on line 340 it now works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">LeftCosetCover</span><span class=\"bp\">.</span><span class=\"n\">sieve_density</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Subgroup</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)]</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">DecidablePred</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">FiniteIndex</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">LeftCosetCover</span><span class=\"bp\">.</span><span class=\"n\">density</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">LeftCosetCover</span><span class=\"bp\">.</span><span class=\"n\">sieve</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">LeftCosetCover</span><span class=\"bp\">.</span><span class=\"n\">density</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">unfold</span><span class=\"w\"> </span><span class=\"n\">density</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"bp\">.</span><span class=\"n\">ofFinite</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sieve</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"bp\">.</span><span class=\"n\">ofFinite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sieve</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">carrier</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">finsum_eq_finset_sum_of_support_subset</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)]</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">finsum_eq_finset_sum_of_support_subset</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)]</span>\n<span class=\"w\">  </span><span class=\"n\">classical</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">sum_fiberwise_of_maps_to</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"o\">)]</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">    </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">    </span><span class=\"n\">by_cases</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">FiniteIndex</span>\n<span class=\"w\">    </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)]</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">sum_const</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">nsmul_eq_mul</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mul_inv_eq_iff_eq_mul₀</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">relindex_mul_index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">core_le</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"o\">),</span><span class=\"w\">  </span><span class=\"n\">mul_assoc</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"o\">)]</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">mul_inv_eq_one₀</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mul_one</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">unfold</span><span class=\"w\"> </span><span class=\"n\">sieve</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">id_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">eq_mpr_eq_cast</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cast_eq</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">FiniteIndex</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">core_finiteIndex</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">      </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">hy</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">exists_leftTransversal_of_FiniteIndex</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">LeftCosetCover</span><span class=\"bp\">.</span><span class=\"n\">core_le</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">hy</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">ht_eq</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">ht</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">hy</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">exists_leftTransversal_of_FiniteIndex</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">LeftCosetCover</span><span class=\"bp\">.</span><span class=\"n\">core_le</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">hy</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span>\n\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">card_congr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">hy</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">        </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true_and</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hy</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">hy</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">sieve_carrier_fiber_le_subgroup</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"w\">        </span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"o\">)]</span>\n<span class=\"w\">      </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">card_left_transversal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ht</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"m\">1</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">coe_sort_coe</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">card_eq_fintype_card</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"bp\">.</span><span class=\"n\">card_coe</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">subgroupOf</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">index_comap</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"n\">Subgroup</span><span class=\"bp\">.</span><span class=\"n\">subtype_range</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">y1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">y2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hy2</span><span class=\"bp\">⟩⟩</span><span class=\"w\"> </span><span class=\"n\">hy</span>\n<span class=\"w\">        </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true_and</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hy2</span><span class=\"w\"> </span><span class=\"n\">hy</span>\n<span class=\"w\">        </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hy1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"n\">y1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">FiniteIndex</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">hy</span><span class=\"w\"> </span><span class=\"bp\">▸</span><span class=\"w\"> </span><span class=\"n\">hx</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">dif_pos</span><span class=\"w\"> </span><span class=\"n\">hy1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hy2</span>\n<span class=\"w\">        </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span>\n<span class=\"w\">        </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hy2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">y2</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">y1</span><span class=\"w\"> </span><span class=\"n\">hy1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ht_eq</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">hy2</span>\n<span class=\"w\">        </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">hy2</span>\n<span class=\"w\">        </span><span class=\"n\">all_goals</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">rintro</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">y1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">y2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hy2</span><span class=\"bp\">⟩⟩</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">y'1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">y'2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hy'2</span><span class=\"bp\">⟩⟩</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">h'</span>\n<span class=\"w\">        </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true_and</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hy2</span><span class=\"w\"> </span><span class=\"n\">hy'2</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">h'</span>\n<span class=\"w\">        </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">injEq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Sigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj_iff</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">h2</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span>\n<span class=\"w\">        </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h'</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Subtype</span><span class=\"bp\">.</span><span class=\"n\">heq_iff_coe_heq</span><span class=\"w\"> </span><span class=\"bp\">?_</span><span class=\"w\"> </span><span class=\"bp\">?_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h'</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h'</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Subtype</span><span class=\"bp\">.</span><span class=\"n\">heq_iff_coe_heq</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"bp\">?_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h'</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">heq_eq_eq</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">hg</span>\n<span class=\"w\">        </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hg'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">FiniteIndex</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">if_pos</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">hg</span>\n<span class=\"w\">        </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hg'</span><span class=\"bp\">⟩⟩</span>\n<span class=\"w\">        </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Subtype</span><span class=\"bp\">.</span><span class=\"n\">coe_eta</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">and_self</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">exists_const</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">finiteIndex</span>\n<span class=\"w\">      </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">core_finiteIndex</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finiteIndex</span>\n<span class=\"w\">      </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true_and</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">inv_inj</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">hy</span>\n<span class=\"w\">        </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">congr_arg</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">sieve_subgroup_eq_core_iff</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hy</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">hx</span>\n<span class=\"w\">    </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)]</span>\n<span class=\"w\">      </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">sum_const_zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">zero_eq_inv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">G₀</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"o\">)]</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">by_contra</span><span class=\"w\"> </span><span class=\"n\">hx'</span>\n<span class=\"w\">      </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">hx'</span><span class=\"bp\">⟩</span>\n<span class=\"w\">      </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">true_and</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">inv_eq_zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">G₀</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">hy</span>\n<span class=\"w\">        </span><span class=\"n\">suffices</span><span class=\"w\"> </span><span class=\"bp\">¬</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">sieve</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">FiniteIndex</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">          </span><span class=\"n\">by_contra</span><span class=\"w\"> </span><span class=\"n\">hy'</span>\n<span class=\"w\">          </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">hy'</span><span class=\"bp\">⟩</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">sieve_subgroup_finite_index_iff</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hy</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">hx</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">coe_univ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">coe_univ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 445445647,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718739585
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 445445778,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1718739620
    },
    {
        "content": "<p>Yesterday someone (<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> or <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>) remarked to me \"I haven't seen people having issues with <code>to_additive</code> recently. It seems like you've solved all the issues with it.\"<br>\nClearly they jinxed it <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 445446423,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718739846
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> left the comment </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">-- Must specify the argument `α` to avoid mathlib4#10830</span>\n</code></pre></div>\n<p>dangling when they removed the explicit argument in <code>bb349f30dee</code>, which makes <a href=\"https://github.com/leanprover-community/mathlib4/pull/10830\">#10830</a> a little confusing.)</p>",
        "id": 445446484,
        "sender_full_name": "Richard Copley",
        "timestamp": 1718739871
    },
    {
        "content": "<p>I was exactly thinking I jinxed you. I’m really sorry about that.</p>",
        "id": 445446533,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718739890
    },
    {
        "content": "<p>And at the same time I’m asking questions to Kyle who should be urgently grading exams. I am really an awful ex-postdoc employer.</p>",
        "id": 445446758,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718739970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Structured.20proofs.20.2F.20to_additive/near/445446484\">said</a>:</p>\n<blockquote>\n<p>(<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> left the comment </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">-- Must specify the argument `α` to avoid mathlib4#10830</span>\n</code></pre></div>\n<p>dangling when they removed the explicit argument in <code>bb349f30dee</code>, which makes <a href=\"https://github.com/leanprover-community/mathlib4/pull/10830\">#10830</a> a little confusing.)</p>\n</blockquote>\n<p>Is it possible to write a linter to detect that?</p>",
        "id": 445446776,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1718739977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Structured.20proofs.20.2F.20to_additive/near/445446758\">said</a>:</p>\n<blockquote>\n<p>And at the same time I’m asking questions to Kyle who should be urgently grading exams. I am really an awful ex-postdoc employer.</p>\n</blockquote>\n<p>Real bad employers shame themselves yet go on…</p>",
        "id": 445446851,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1718740011
    },
    {
        "content": "<p>Sure, I always have new meta-programming questions for Kyle.</p>",
        "id": 445446919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718740041
    },
    {
        "content": "<p>I’m less sure about my jinxing abilities.</p>",
        "id": 445446984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718740060
    },
    {
        "content": "<p>That's a cool way to be an awful employer. (Checking in a dictionary what “jinxing” means…)</p>",
        "id": 445447105,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1718740082
    },
    {
        "content": "<p>And I’m no longer employing them, I’m their ex-employer only.</p>",
        "id": 445447167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718740097
    },
    {
        "content": "<p>Sometimes ex-es are toxic too… (unfortunately, more than often)</p>",
        "id": 445447228,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1718740127
    }
]