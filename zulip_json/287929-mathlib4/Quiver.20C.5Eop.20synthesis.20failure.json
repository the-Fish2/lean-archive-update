[
    {
        "content": "<p>Why does the following <code>#synth</code> fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">v₃</span> <span class=\"n\">u</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">u₃</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\" ⟶ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quiver.Hom</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Opposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">op</span> <span class=\"o\">::</span> <span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span>\n<span class=\"n\">α</span> <span class=\"s2\">\"ᵒᵖ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Opposite</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Opposite</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Quiver.opposite</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">unop</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Quiver</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span>\n</code></pre></div>",
        "id": 437719089,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715197688
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Opposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>fixes it</p>",
        "id": 437721565,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715198729
    },
    {
        "content": "<p>So does </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 437722902,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715199356
    },
    {
        "content": "<p>What is the reason that the objects of a category are in <code>Type u</code> and not <code>Sort u</code>? I seem to remember some discussion of this before but cannot locate it</p>",
        "id": 437727547,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715201255
    },
    {
        "content": "<p>Morphisms in quivers are allowed to be in <code>Prop</code> in order to allow graphs without multiple arrows.</p>",
        "id": 437729558,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715202037
    },
    {
        "content": "<p>I saw that when I tried to change it and things broke fast :)</p>",
        "id": 437729620,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715202066
    },
    {
        "content": "<p>But what about objects?</p>",
        "id": 437729666,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715202082
    },
    {
        "content": "<p>Nothing seems to break if we do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 437729886,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715202174
    },
    {
        "content": "<p>I would say there is little mathematical justification for doing this.</p>",
        "id": 437730029,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715202248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Quiver.20C.5Eop.20synthesis.20failure/near/437729886\">said</a>:</p>\n<blockquote>\n<p>Nothing seems to break if we do</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>One thing broke ... and then everything did.</p>",
        "id": 437754383,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715218026
    },
    {
        "content": "<p>IIRC this was how it was in lean 3 -- at some point there was a refactor which allowed sorts but there were problems so they were refactored back? <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> do you remember any more of the story?</p>",
        "id": 437797743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715250140
    },
    {
        "content": "<p>Yeah, I tried it twice in the early days, both failures. I really can't remember why I want to, however. :-)</p>",
        "id": 437804814,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715254343
    },
    {
        "content": "<p>Made <code>Hom</code> return a type and fixed enough <code>CategoryTheory</code> to build <code>AlgebraicGeometry</code>. Very anecdotal: elaboration is down about 10% for <code>GammaSpecAdjunction</code> which corresponds to a 5% speed up in the file. </p>\n<p>I don't think this is the solution. I just think Lean is struggling with solving level constraints in the presence of autogenerated level metavariables</p>",
        "id": 437814961,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715259542
    },
    {
        "content": "<p>This is blocking otherwise easy unifications and making it take longer, often much longer.</p>",
        "id": 437815234,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715259653
    },
    {
        "content": "<p>I am also trying to create a minimized (ha!) example of the issue. But, I am learning how much AG touches</p>",
        "id": 437815341,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715259705
    }
]