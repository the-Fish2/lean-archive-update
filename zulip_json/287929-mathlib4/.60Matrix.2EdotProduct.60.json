[
    {
        "content": "<p>I just noticed that the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dotProduct</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>is actually in the <code>Matrix</code> namespace. Is this a mistake? I don't see what this has to do with matrices. If there are no objections, I would like to move it to the root namespace.</p>",
        "id": 411564517,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1704597773
    },
    {
        "content": "<p>Oh, I have a very similar definition in APAP: <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/master/LeanAPAP/Prereqs/Discrete/LpNorm/Basic.lean#L230\">https://github.com/YaelDillies/LeanAPAP/blob/master/LeanAPAP/Prereqs/Discrete/LpNorm/Basic.lean#L230</a></p>",
        "id": 411581014,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704615479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Matrix.2EdotProduct.60/near/411564517\">said</a>:</p>\n<blockquote>\n<p>I just noticed that the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dotProduct</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>is actually in the <code>Matrix</code> namespace. Is this a mistake? I don't see what this has to do with matrices. If there are no objections, I would like to move it to the root namespace.</p>\n</blockquote>\n<p>I think I am responsible for the name. I agree, moving it to the root namespace is a lot better!</p>",
        "id": 411755797,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704726233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Matrix.2EdotProduct.60/near/411581014\">said</a>:</p>\n<blockquote>\n<p>Oh, I have a very similar definition in APAP: <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/master/LeanAPAP/Prereqs/Discrete/LpNorm/Basic.lean#L230\">https://github.com/YaelDillies/LeanAPAP/blob/master/LeanAPAP/Prereqs/Discrete/LpNorm/Basic.lean#L230</a></p>\n</blockquote>\n<p>Should we generalize <code>dotProduct</code> to a <code>StarOrderedRing</code>?</p>",
        "id": 411772423,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704731189
    },
    {
        "content": "<p>I mean, it requires more restrictive TC but works both for <code>Real</code> and <code>Complex</code>.</p>",
        "id": 411772663,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704731269
    },
    {
        "content": "<p>I mean, yeah, that's what I want</p>",
        "id": 411774187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704731766
    },
    {
        "content": "<p>I misread your definition. Now I see that you define it in the right generality. Sorry.</p>",
        "id": 411774295,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704731807
    },
    {
        "content": "<p>Note that I also have a normalised version: <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/master/LeanAPAP/Prereqs/Discrete/LpNorm/Compact.lean#L187C1-L187C1\">https://github.com/YaelDillies/LeanAPAP/blob/master/LeanAPAP/Prereqs/Discrete/LpNorm/Compact.lean#L187C1-L187C1</a></p>",
        "id": 411774524,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704731873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Matrix.2EdotProduct.60/near/411772663\">said</a>:</p>\n<blockquote>\n<p>I mean, it requires more restrictive TC but works both for <code>Real</code> and <code>Complex</code>.</p>\n</blockquote>\n<p>On the other hand, you can write <code>dotProduct u (star v)</code> today, and that works for both Real and complex</p>",
        "id": 411774832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704731961
    },
    {
        "content": "<p>Yes, but the dot product <em>does</em> contain the <code>star</code> in paper mathematics, right?</p>",
        "id": 411775155,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704732060
    },
    {
        "content": "<p>Not when it's written as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>T</mi></msup><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x^Tx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span></span></span></span>, which I see fairly often</p>",
        "id": 411776112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704732427
    },
    {
        "content": "<p>Is there any name distinction between both variants?</p>",
        "id": 411778168,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704733154
    },
    {
        "content": "<p>BTW, why not use <code>WithLp 2</code> and inner product instead of <code>dotProduct</code>?</p>",
        "id": 411782470,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704734258
    },
    {
        "content": "<p>The reason is that I juggle many different Lp-norms within each proof, and using type synonyms is impractical. In contrast, using Lp-norms and the inner product on the pi type makes things very readable and close to the paper proof.</p>",
        "id": 411783427,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704734466
    },
    {
        "content": "<p>There's also the fact that I am doing Fourier analysis, so I need two different normalisations for the physical and frequency space.</p>",
        "id": 411783633,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704734520
    },
    {
        "content": "<p>I see it used fairly often for things like <code>ZMod 2</code> (i.e. my use case right now) where there is no star operation (well, I guess you could put a trivial star on it but still).</p>",
        "id": 411840332,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1704759863
    },
    {
        "content": "<p>Yes, precisely, <code>ZMod</code> should have the trivial star.</p>",
        "id": 411876012,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704783487
    },
    {
        "content": "<p>Can it ever be used non-homogenously?</p>",
        "id": 412027895,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704842039
    }
]